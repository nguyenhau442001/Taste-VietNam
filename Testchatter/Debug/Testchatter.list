
Testchatter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba88  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  0800bc20  0800bc20  0001bc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be64  0800be64  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800be64  0800be64  0001be64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be6c  0800be6c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800be6c  0800be6c  0001be6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be74  0800be74  0001be74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800be78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ab0  200000a4  0800bf1c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b54  0800bf1c  00021b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000218ff  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049d7  00000000  00000000  000419d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  000463b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001560  00000000  00000000  00047a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc67  00000000  00000000  00048fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e4e3  00000000  00000000  00064c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097b93  00000000  00000000  00083132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011acc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064bc  00000000  00000000  0011ad18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a4 	.word	0x200000a4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800bc08 	.word	0x0800bc08

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a8 	.word	0x200000a8
 80001d4:	0800bc08 	.word	0x0800bc08

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f002 fd24 	bl	8002f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f81a 	bl	800052c <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004f8:	f000 f88a 	bl	8000610 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f9dc 	bl	80008b8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000500:	f000 f9b2 	bl	8000868 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8000504:	f000 f8aa 	bl	800065c <_ZL12MX_I2C1_Initv>
  MX_I2S2_Init();
 8000508:	f000 f8dc 	bl	80006c4 <_ZL12MX_I2S2_Initv>
  MX_I2S3_Init();
 800050c:	f000 f90e 	bl	800072c <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 8000510:	f000 f940 	bl	8000794 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8000514:	f000 f97a 	bl	800080c <_ZL19MX_USART1_UART_Initv>
  MX_USB_HOST_Init();
 8000518:	f00a fe80 	bl	800b21c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  setup();
 800051c:	f001 fbca 	bl	8001cb4 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000520:	f00a fea2 	bl	800b268 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    loop();
 8000524:	f001 fbd6 	bl	8001cd4 <loop>
    MX_USB_HOST_Process();
 8000528:	e7fa      	b.n	8000520 <main+0x34>
	...

0800052c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f00b f9da 	bl	800b8f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b2c      	ldr	r3, [pc, #176]	; (8000608 <_Z18SystemClock_Configv+0xdc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a2b      	ldr	r2, [pc, #172]	; (8000608 <_Z18SystemClock_Configv+0xdc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b29      	ldr	r3, [pc, #164]	; (8000608 <_Z18SystemClock_Configv+0xdc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b26      	ldr	r3, [pc, #152]	; (800060c <_Z18SystemClock_Configv+0xe0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a25      	ldr	r2, [pc, #148]	; (800060c <_Z18SystemClock_Configv+0xe0>)
 8000576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b23      	ldr	r3, [pc, #140]	; (800060c <_Z18SystemClock_Configv+0xe0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800059c:	2304      	movs	r3, #4
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005a0:	23c0      	movs	r3, #192	; 0xc0
 80005a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005a8:	2308      	movs	r3, #8
 80005aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f005 fe13 	bl	80061dc <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	bf14      	ite	ne
 80005bc:	2301      	movne	r3, #1
 80005be:	2300      	moveq	r3, #0
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80005c6:	f000 fa51 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2103      	movs	r1, #3
 80005e6:	4618      	mov	r0, r3
 80005e8:	f006 f870 	bl	80066cc <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	bf14      	ite	ne
 80005f2:	2301      	movne	r3, #1
 80005f4:	2300      	moveq	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80005fc:	f000 fa36 	bl	8000a6c <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000626:	2301      	movs	r3, #1
 8000628:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800062a:	23c8      	movs	r3, #200	; 0xc8
 800062c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800062e:	2305      	movs	r3, #5
 8000630:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000632:	2302      	movs	r3, #2
 8000634:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000636:	463b      	mov	r3, r7
 8000638:	4618      	mov	r0, r3
 800063a:	f006 fa67 	bl	8006b0c <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	bf14      	ite	ne
 8000644:	2301      	movne	r3, #1
 8000646:	2300      	moveq	r3, #0
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 800064e:	f000 fa0d 	bl	8000a6c <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3718      	adds	r7, #24
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000662:	4a16      	ldr	r2, [pc, #88]	; (80006bc <_ZL12MX_I2C1_Initv+0x60>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000668:	4a15      	ldr	r2, [pc, #84]	; (80006c0 <_ZL12MX_I2C1_Initv+0x64>)
 800066a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <_ZL12MX_I2C1_Initv+0x5c>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <_ZL12MX_I2C1_Initv+0x5c>)
 800067a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800067e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000682:	2200      	movs	r2, #0
 8000684:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <_ZL12MX_I2C1_Initv+0x5c>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000698:	4807      	ldr	r0, [pc, #28]	; (80006b8 <_ZL12MX_I2C1_Initv+0x5c>)
 800069a:	f004 ffbb 	bl	8005614 <HAL_I2C_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	bf14      	ite	ne
 80006a4:	2301      	movne	r3, #1
 80006a6:	2300      	moveq	r3, #0
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80006ae:	f000 f9dd 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000c0 	.word	0x200000c0
 80006bc:	40005400 	.word	0x40005400
 80006c0:	000186a0 	.word	0x000186a0

080006c4 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <_ZL12MX_I2S2_Initv+0x5c>)
 80006ca:	4a16      	ldr	r2, [pc, #88]	; (8000724 <_ZL12MX_I2S2_Initv+0x60>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <_ZL12MX_I2S2_Initv+0x5c>)
 80006d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <_ZL12MX_I2S2_Initv+0x5c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <_ZL12MX_I2S2_Initv+0x5c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <_ZL12MX_I2S2_Initv+0x5c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <_ZL12MX_I2S2_Initv+0x5c>)
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <_ZL12MX_I2S2_Initv+0x64>)
 80006ec:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <_ZL12MX_I2S2_Initv+0x5c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <_ZL12MX_I2S2_Initv+0x5c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <_ZL12MX_I2S2_Initv+0x5c>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000700:	4807      	ldr	r0, [pc, #28]	; (8000720 <_ZL12MX_I2S2_Initv+0x5c>)
 8000702:	f005 f8cb 	bl	800589c <HAL_I2S_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf14      	ite	ne
 800070c:	2301      	movne	r3, #1
 800070e:	2300      	moveq	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <_ZL12MX_I2S2_Initv+0x56>
  {
    Error_Handler();
 8000716:	f000 f9a9 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000114 	.word	0x20000114
 8000724:	40003800 	.word	0x40003800
 8000728:	00017700 	.word	0x00017700

0800072c <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <_ZL12MX_I2S3_Initv+0x5c>)
 8000732:	4a16      	ldr	r2, [pc, #88]	; (800078c <_ZL12MX_I2S3_Initv+0x60>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <_ZL12MX_I2S3_Initv+0x5c>)
 8000738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <_ZL12MX_I2S3_Initv+0x5c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <_ZL12MX_I2S3_Initv+0x5c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <_ZL12MX_I2S3_Initv+0x5c>)
 800074c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000750:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <_ZL12MX_I2S3_Initv+0x5c>)
 8000754:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <_ZL12MX_I2S3_Initv+0x64>)
 8000756:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <_ZL12MX_I2S3_Initv+0x5c>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <_ZL12MX_I2S3_Initv+0x5c>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <_ZL12MX_I2S3_Initv+0x5c>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800076a:	4807      	ldr	r0, [pc, #28]	; (8000788 <_ZL12MX_I2S3_Initv+0x5c>)
 800076c:	f005 f896 	bl	800589c <HAL_I2S_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	bf14      	ite	ne
 8000776:	2301      	movne	r3, #1
 8000778:	2300      	moveq	r3, #0
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 8000780:	f000 f974 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000015c 	.word	0x2000015c
 800078c:	40003c00 	.word	0x40003c00
 8000790:	00017700 	.word	0x00017700

08000794 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <_ZL12MX_SPI1_Initv+0x70>)
 800079a:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <_ZL12MX_SPI1_Initv+0x74>)
 800079c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <_ZL12MX_SPI1_Initv+0x70>)
 80007a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <_ZL12MX_SPI1_Initv+0x70>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <_ZL12MX_SPI1_Initv+0x70>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <_ZL12MX_SPI1_Initv+0x70>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <_ZL12MX_SPI1_Initv+0x70>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <_ZL12MX_SPI1_Initv+0x70>)
 80007c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <_ZL12MX_SPI1_Initv+0x70>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <_ZL12MX_SPI1_Initv+0x70>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <_ZL12MX_SPI1_Initv+0x70>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <_ZL12MX_SPI1_Initv+0x70>)
 80007da:	2200      	movs	r2, #0
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <_ZL12MX_SPI1_Initv+0x70>)
 80007e0:	220a      	movs	r2, #10
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e4:	4807      	ldr	r0, [pc, #28]	; (8000804 <_ZL12MX_SPI1_Initv+0x70>)
 80007e6:	f006 fae1 	bl	8006dac <HAL_SPI_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	bf14      	ite	ne
 80007f0:	2301      	movne	r3, #1
 80007f2:	2300      	moveq	r3, #0
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80007fa:	f000 f937 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200001a4 	.word	0x200001a4
 8000808:	40013000 	.word	0x40013000

0800080c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000812:	4a14      	ldr	r2, [pc, #80]	; (8000864 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000814:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000818:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800081c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <_ZL19MX_USART1_UART_Initv+0x54>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <_ZL19MX_USART1_UART_Initv+0x54>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000842:	4807      	ldr	r0, [pc, #28]	; (8000860 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000844:	f006 fb3b 	bl	8006ebe <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000858:	f000 f908 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200001fc 	.word	0x200001fc
 8000864:	40011000 	.word	0x40011000

08000868 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <_ZL11MX_DMA_Initv+0x4c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <_ZL11MX_DMA_Initv+0x4c>)
 8000878:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <_ZL11MX_DMA_Initv+0x4c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	203a      	movs	r0, #58	; 0x3a
 8000890:	f002 fcc5 	bl	800321e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000894:	203a      	movs	r0, #58	; 0x3a
 8000896:	f002 fcde 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	2046      	movs	r0, #70	; 0x46
 80008a0:	f002 fcbd 	bl	800321e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80008a4:	2046      	movs	r0, #70	; 0x46
 80008a6:	f002 fcd6 	bl	8003256 <HAL_NVIC_EnableIRQ>

}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
 80008d2:	4b61      	ldr	r3, [pc, #388]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a60      	ldr	r2, [pc, #384]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b5e      	ldr	r3, [pc, #376]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	4b5a      	ldr	r3, [pc, #360]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a59      	ldr	r2, [pc, #356]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b57      	ldr	r3, [pc, #348]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b53      	ldr	r3, [pc, #332]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a52      	ldr	r2, [pc, #328]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b50      	ldr	r3, [pc, #320]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b4c      	ldr	r3, [pc, #304]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a4b      	ldr	r2, [pc, #300]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b49      	ldr	r3, [pc, #292]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	4b45      	ldr	r3, [pc, #276]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a44      	ldr	r2, [pc, #272]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b42      	ldr	r3, [pc, #264]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b3e      	ldr	r3, [pc, #248]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a3d      	ldr	r2, [pc, #244]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b3b      	ldr	r3, [pc, #236]	; (8000a58 <_ZL12MX_GPIO_Initv+0x1a0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2108      	movs	r1, #8
 800097a:	4838      	ldr	r0, [pc, #224]	; (8000a5c <_ZL12MX_GPIO_Initv+0x1a4>)
 800097c:	f003 fa0c 	bl	8003d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2101      	movs	r1, #1
 8000984:	4836      	ldr	r0, [pc, #216]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1a8>)
 8000986:	f003 fa07 	bl	8003d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800098a:	2200      	movs	r2, #0
 800098c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000990:	4834      	ldr	r0, [pc, #208]	; (8000a64 <_ZL12MX_GPIO_Initv+0x1ac>)
 8000992:	f003 fa01 	bl	8003d98 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000996:	2304      	movs	r3, #4
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	482c      	ldr	r0, [pc, #176]	; (8000a5c <_ZL12MX_GPIO_Initv+0x1a4>)
 80009aa:	f003 f871 	bl	8003a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009ae:	2308      	movs	r3, #8
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4825      	ldr	r0, [pc, #148]	; (8000a5c <_ZL12MX_GPIO_Initv+0x1a4>)
 80009c6:	f003 f863 	bl	8003a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80009ca:	2332      	movs	r3, #50	; 0x32
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	481f      	ldr	r0, [pc, #124]	; (8000a5c <_ZL12MX_GPIO_Initv+0x1a4>)
 80009e0:	f003 f856 	bl	8003a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009e4:	2301      	movs	r3, #1
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4819      	ldr	r0, [pc, #100]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1a8>)
 80009fc:	f003 f848 	bl	8003a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a04:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4814      	ldr	r0, [pc, #80]	; (8000a68 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000a16:	f003 f83b 	bl	8003a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a1a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a1e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	480c      	ldr	r0, [pc, #48]	; (8000a64 <_ZL12MX_GPIO_Initv+0x1ac>)
 8000a34:	f003 f82c 	bl	8003a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a38:	2320      	movs	r3, #32
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4806      	ldr	r0, [pc, #24]	; (8000a64 <_ZL12MX_GPIO_Initv+0x1ac>)
 8000a4c:	f003 f820 	bl	8003a90 <HAL_GPIO_Init>

}
 8000a50:	bf00      	nop
 8000a52:	3730      	adds	r7, #48	; 0x30
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40020800 	.word	0x40020800
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	40020000 	.word	0x40020000

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>

08000a76 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <_ZN3ros3MsgC1Ev+0x1c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	0800be34 	.word	0x0800be34

08000ab8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
      data()
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ffe8 	bl	8000a98 <_ZN3ros3MsgC1Ev>
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ffcf 	bl	8000a76 <_ZN3ros4TimeC1Ev>
    {
    }
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	0800be1c 	.word	0x0800be1c

08000ae8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6859      	ldr	r1, [r3, #4]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	b2ca      	uxtb	r2, r1
 8000b02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	0a19      	lsrs	r1, r3, #8
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	683a      	ldr	r2, [r7, #0]
 8000b10:	4413      	add	r3, r2
 8000b12:	b2ca      	uxtb	r2, r1
 8000b14:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	0c19      	lsrs	r1, r3, #16
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3302      	adds	r3, #2
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	b2ca      	uxtb	r2, r1
 8000b26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	0e19      	lsrs	r1, r3, #24
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3303      	adds	r3, #3
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	4413      	add	r3, r2
 8000b36:	b2ca      	uxtb	r2, r1
 8000b38:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6899      	ldr	r1, [r3, #8]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	4413      	add	r3, r2
 8000b4a:	b2ca      	uxtb	r2, r1
 8000b4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	0a19      	lsrs	r1, r3, #8
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	3301      	adds	r3, #1
 8000b58:	683a      	ldr	r2, [r7, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	b2ca      	uxtb	r2, r1
 8000b5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	0c19      	lsrs	r1, r3, #16
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3302      	adds	r3, #2
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	b2ca      	uxtb	r2, r1
 8000b70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	0e19      	lsrs	r1, r3, #24
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3303      	adds	r3, #3
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	b2ca      	uxtb	r2, r1
 8000b82:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	3304      	adds	r3, #4
 8000b88:	60fb      	str	r3, [r7, #12]
      return offset;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
    }
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	6839      	ldr	r1, [r7, #0]
 8000bbe:	440b      	add	r3, r1
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	440b      	add	r3, r1
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	041b      	lsls	r3, r3, #16
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	3303      	adds	r3, #3
 8000be8:	6839      	ldr	r1, [r7, #0]
 8000bea:	440b      	add	r3, r1
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	061b      	lsls	r3, r3, #24
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	683a      	ldr	r2, [r7, #0]
 8000c00:	4413      	add	r3, r2
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3301      	adds	r3, #1
 8000c12:	6839      	ldr	r1, [r7, #0]
 8000c14:	440b      	add	r3, r1
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	021b      	lsls	r3, r3, #8
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3302      	adds	r3, #2
 8000c28:	6839      	ldr	r1, [r7, #0]
 8000c2a:	440b      	add	r3, r1
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	041b      	lsls	r3, r3, #16
 8000c30:	431a      	orrs	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3303      	adds	r3, #3
 8000c3e:	6839      	ldr	r1, [r7, #0]
 8000c40:	440b      	add	r3, r1
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	061b      	lsls	r3, r3, #24
 8000c46:	431a      	orrs	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3304      	adds	r3, #4
 8000c50:	60fb      	str	r3, [r7, #12]
     return offset;
 8000c52:	68fb      	ldr	r3, [r7, #12]
    }
 8000c54:	4618      	mov	r0, r3
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	0800bc20 	.word	0x0800bc20

08000c7c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	0800bc30 	.word	0x0800bc30

08000c98 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fef8 	bl	8000a98 <_ZN3ros3MsgC1Ev>
 8000ca8:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	809a      	strh	r2, [r3, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000cc4:	611a      	str	r2, [r3, #16]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
    {
    }
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	0800be04 	.word	0x0800be04
 8000cdc:	0800bc54 	.word	0x0800bc54

08000ce0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	8899      	ldrh	r1, [r3, #4]
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	683a      	ldr	r2, [r7, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	b2ca      	uxtb	r2, r1
 8000cfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	889b      	ldrh	r3, [r3, #4]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	b299      	uxth	r1, r3
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	3301      	adds	r3, #1
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	b2ca      	uxtb	r2, r1
 8000d0e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	3302      	adds	r3, #2
 8000d14:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fa5c 	bl	80001d8 <strlen>
 8000d20:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	683a      	ldr	r2, [r7, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	69b9      	ldr	r1, [r7, #24]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fff2 	bl	8001d14 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	3304      	adds	r3, #4
 8000d34:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	18d0      	adds	r0, r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4619      	mov	r1, r3
 8000d44:	f00a fdc8 	bl	800b8d8 <memcpy>
      offset += length_topic_name;
 8000d48:	69fa      	ldr	r2, [r7, #28]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fa3f 	bl	80001d8 <strlen>
 8000d5a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	4413      	add	r3, r2
 8000d62:	6979      	ldr	r1, [r7, #20]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 ffd5 	bl	8001d14 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	18d0      	adds	r0, r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f00a fdab 	bl	800b8d8 <memcpy>
      offset += length_message_type;
 8000d82:	69fa      	ldr	r2, [r7, #28]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	4413      	add	r3, r2
 8000d88:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fa22 	bl	80001d8 <strlen>
 8000d94:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	6939      	ldr	r1, [r7, #16]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 ffb8 	bl	8001d14 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	3304      	adds	r3, #4
 8000da8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	18d0      	adds	r0, r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4619      	mov	r1, r3
 8000db8:	f00a fd8e 	bl	800b8d8 <memcpy>
      offset += length_md5sum;
 8000dbc:	69fa      	ldr	r2, [r7, #28]
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000dca:	68f9      	ldr	r1, [r7, #12]
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	b2ca      	uxtb	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	0a19      	lsrs	r1, r3, #8
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	4413      	add	r3, r2
 8000de2:	b2ca      	uxtb	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	0c19      	lsrs	r1, r3, #16
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3302      	adds	r3, #2
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	4413      	add	r3, r2
 8000df2:	b2ca      	uxtb	r2, r1
 8000df4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	0e19      	lsrs	r1, r3, #24
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3303      	adds	r3, #3
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	4413      	add	r3, r2
 8000e02:	b2ca      	uxtb	r2, r1
 8000e04:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	61fb      	str	r3, [r7, #28]
      return offset;
 8000e0c:	69fb      	ldr	r3, [r7, #28]
    }
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3720      	adds	r7, #32
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b08a      	sub	sp, #40	; 0x28
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	4413      	add	r3, r2
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	889b      	ldrh	r3, [r3, #4]
 8000e36:	b21a      	sxth	r2, r3
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	6839      	ldr	r1, [r7, #0]
 8000e3e:	440b      	add	r3, r1
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	4313      	orrs	r3, r2
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	3302      	adds	r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	441a      	add	r2, r3
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 ff74 	bl	8001d50 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	3304      	adds	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	4413      	add	r3, r2
 8000e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d20c      	bcs.n	8000e98 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	441a      	add	r2, r3
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6839      	ldr	r1, [r7, #0]
 8000e8a:	440b      	add	r3, r1
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e92:	3301      	adds	r3, #1
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
 8000e96:	e7ec      	b.n	8000e72 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	441a      	add	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	4413      	add	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	441a      	add	r2, r3
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 ff41 	bl	8001d50 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	623b      	str	r3, [r7, #32]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4413      	add	r3, r2
 8000ede:	6a3a      	ldr	r2, [r7, #32]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d20c      	bcs.n	8000efe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	6a3b      	ldr	r3, [r7, #32]
 8000ee8:	441a      	add	r2, r3
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	440b      	add	r3, r1
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	623b      	str	r3, [r7, #32]
 8000efc:	e7ec      	b.n	8000ed8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4413      	add	r3, r2
 8000f04:	3b01      	subs	r3, #1
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	4413      	add	r3, r2
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	441a      	add	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4413      	add	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	441a      	add	r2, r3
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 ff0e 	bl	8001d50 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	3304      	adds	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	61fb      	str	r3, [r7, #28]
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	69fa      	ldr	r2, [r7, #28]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d20c      	bcs.n	8000f64 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	441a      	add	r2, r3
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	6839      	ldr	r1, [r7, #0]
 8000f56:	440b      	add	r3, r1
 8000f58:	7812      	ldrb	r2, [r2, #0]
 8000f5a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e7ec      	b.n	8000f3e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4413      	add	r3, r2
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	441a      	add	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4413      	add	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	6839      	ldr	r1, [r7, #0]
 8000f92:	440a      	add	r2, r1
 8000f94:	7812      	ldrb	r2, [r2, #0]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	6839      	ldr	r1, [r7, #0]
 8000fa2:	440b      	add	r3, r1
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	6839      	ldr	r1, [r7, #0]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	041b      	lsls	r3, r3, #16
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	3303      	adds	r3, #3
 8000fc4:	6839      	ldr	r1, [r7, #0]
 8000fc6:	440b      	add	r3, r1
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	061b      	lsls	r3, r3, #24
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	61bb      	str	r3, [r7, #24]
     return offset;
 8000fdc:	69bb      	ldr	r3, [r7, #24]
    }
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3728      	adds	r7, #40	; 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	0800bc58 	.word	0x0800bc58

08001004 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	0800bc74 	.word	0x0800bc74

08001020 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fd34 	bl	8000a98 <_ZN3ros3MsgC1Ev>
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	711a      	strb	r2, [r3, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001040:	609a      	str	r2, [r3, #8]
    {
    }
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	0800bdec 	.word	0x0800bdec
 8001050:	0800bc54 	.word	0x0800bc54

08001054 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	4413      	add	r3, r2
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	7912      	ldrb	r2, [r2, #4]
 800106c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	3301      	adds	r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f8ad 	bl	80001d8 <strlen>
 800107e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	4413      	add	r3, r2
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fe43 	bl	8001d14 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3304      	adds	r3, #4
 8001092:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	18d0      	adds	r0, r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f00a fc19 	bl	800b8d8 <memcpy>
      offset += length_msg;
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
      return offset;
 80010ae:	68fb      	ldr	r3, [r7, #12]
    }
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	3301      	adds	r3, #1
 80010d6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	441a      	add	r2, r3
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fe33 	bl	8001d50 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	3304      	adds	r3, #4
 80010ee:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d20c      	bcs.n	800111a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	441a      	add	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3b01      	subs	r3, #1
 800110a:	6839      	ldr	r1, [r7, #0]
 800110c:	440b      	add	r3, r1
 800110e:	7812      	ldrb	r2, [r2, #0]
 8001110:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	e7ec      	b.n	80010f4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	3b01      	subs	r3, #1
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	4413      	add	r3, r2
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	3b01      	subs	r3, #1
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	441a      	add	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
     return offset;
 800113e:	693b      	ldr	r3, [r7, #16]
    }
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	0800bc98 	.word	0x0800bc98

08001164 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	0800bcac 	.word	0x0800bcac

08001180 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fc84 	bl	8000a98 <_ZN3ros3MsgC1Ev>
 8001190:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	0800bdd4 	.word	0x0800bdd4

080011dc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6859      	ldr	r1, [r3, #4]
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	b2ca      	uxtb	r2, r1
 80011f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	0a19      	lsrs	r1, r3, #8
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	3301      	adds	r3, #1
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	4413      	add	r3, r2
 8001206:	b2ca      	uxtb	r2, r1
 8001208:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	0c19      	lsrs	r1, r3, #16
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	3302      	adds	r3, #2
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	4413      	add	r3, r2
 8001218:	b2ca      	uxtb	r2, r1
 800121a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	0e19      	lsrs	r1, r3, #24
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	3303      	adds	r3, #3
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	4413      	add	r3, r2
 800122a:	b2ca      	uxtb	r2, r1
 800122c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	3304      	adds	r3, #4
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	6a3a      	ldr	r2, [r7, #32]
 800123e:	429a      	cmp	r2, r3
 8001240:	d22b      	bcs.n	800129a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001250:	6939      	ldr	r1, [r7, #16]
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	4413      	add	r3, r2
 8001258:	b2ca      	uxtb	r2, r1
 800125a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	0a19      	lsrs	r1, r3, #8
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	3301      	adds	r3, #1
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	4413      	add	r3, r2
 8001268:	b2ca      	uxtb	r2, r1
 800126a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	0c19      	lsrs	r1, r3, #16
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	3302      	adds	r3, #2
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	4413      	add	r3, r2
 8001278:	b2ca      	uxtb	r2, r1
 800127a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	0e19      	lsrs	r1, r3, #24
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	3303      	adds	r3, #3
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	4413      	add	r3, r2
 8001288:	b2ca      	uxtb	r2, r1
 800128a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	3304      	adds	r3, #4
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	3301      	adds	r3, #1
 8001296:	623b      	str	r3, [r7, #32]
 8001298:	e7ce      	b.n	8001238 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6919      	ldr	r1, [r3, #16]
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	b2ca      	uxtb	r2, r1
 80012a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	0a19      	lsrs	r1, r3, #8
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	3301      	adds	r3, #1
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	4413      	add	r3, r2
 80012b6:	b2ca      	uxtb	r2, r1
 80012b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	0c19      	lsrs	r1, r3, #16
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	3302      	adds	r3, #2
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	b2ca      	uxtb	r2, r1
 80012ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	0e19      	lsrs	r1, r3, #24
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	3303      	adds	r3, #3
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	4413      	add	r3, r2
 80012da:	b2ca      	uxtb	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	3304      	adds	r3, #4
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d22b      	bcs.n	800134a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699a      	ldr	r2, [r3, #24]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001300:	68f9      	ldr	r1, [r7, #12]
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	4413      	add	r3, r2
 8001308:	b2ca      	uxtb	r2, r1
 800130a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	0a19      	lsrs	r1, r3, #8
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	3301      	adds	r3, #1
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	4413      	add	r3, r2
 8001318:	b2ca      	uxtb	r2, r1
 800131a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	0c19      	lsrs	r1, r3, #16
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	3302      	adds	r3, #2
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	4413      	add	r3, r2
 8001328:	b2ca      	uxtb	r2, r1
 800132a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	0e19      	lsrs	r1, r3, #24
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	3303      	adds	r3, #3
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	4413      	add	r3, r2
 8001338:	b2ca      	uxtb	r2, r1
 800133a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	3304      	adds	r3, #4
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	e7ce      	b.n	80012e8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69d9      	ldr	r1, [r3, #28]
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	4413      	add	r3, r2
 8001354:	b2ca      	uxtb	r2, r1
 8001356:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	0a19      	lsrs	r1, r3, #8
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	3301      	adds	r3, #1
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	4413      	add	r3, r2
 8001366:	b2ca      	uxtb	r2, r1
 8001368:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	0c19      	lsrs	r1, r3, #16
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	3302      	adds	r3, #2
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	4413      	add	r3, r2
 8001378:	b2ca      	uxtb	r2, r1
 800137a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	0e19      	lsrs	r1, r3, #24
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	3303      	adds	r3, #3
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	4413      	add	r3, r2
 800138a:	b2ca      	uxtb	r2, r1
 800138c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	3304      	adds	r3, #4
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d228      	bcs.n	80013f4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7fe ff12 	bl	80001d8 <strlen>
 80013b4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	6979      	ldr	r1, [r7, #20]
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fca8 	bl	8001d14 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	3304      	adds	r3, #4
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	18d0      	adds	r0, r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	4619      	mov	r1, r3
 80013e0:	f00a fa7a 	bl	800b8d8 <memcpy>
      offset += length_stringsi;
 80013e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	4413      	add	r3, r2
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	3301      	adds	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	e7d1      	b.n	8001398 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80013f6:	4618      	mov	r0, r3
 80013f8:	3728      	adds	r7, #40	; 0x28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80013fe:	b580      	push	{r7, lr}
 8001400:	b08e      	sub	sp, #56	; 0x38
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800140c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001418:	3301      	adds	r3, #1
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	6a3a      	ldr	r2, [r7, #32]
 8001424:	4313      	orrs	r3, r2
 8001426:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142a:	3302      	adds	r3, #2
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	4413      	add	r3, r2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	041b      	lsls	r3, r3, #16
 8001434:	6a3a      	ldr	r2, [r7, #32]
 8001436:	4313      	orrs	r3, r2
 8001438:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800143a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143c:	3303      	adds	r3, #3
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	061b      	lsls	r3, r3, #24
 8001446:	6a3a      	ldr	r2, [r7, #32]
 8001448:	4313      	orrs	r3, r2
 800144a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800144c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144e:	3304      	adds	r3, #4
 8001450:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	6a3a      	ldr	r2, [r7, #32]
 8001458:	429a      	cmp	r2, r3
 800145a:	d90a      	bls.n	8001472 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	6a3b      	ldr	r3, [r7, #32]
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4619      	mov	r1, r3
 8001466:	4610      	mov	r0, r2
 8001468:	f00a fb2c 	bl	800bac4 <realloc>
 800146c:	4602      	mov	r2, r0
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a3a      	ldr	r2, [r7, #32]
 8001476:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001478:	2300      	movs	r3, #0
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001482:	429a      	cmp	r2, r3
 8001484:	d236      	bcs.n	80014f4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800148e:	6839      	ldr	r1, [r7, #0]
 8001490:	440a      	add	r2, r1
 8001492:	7812      	ldrb	r2, [r2, #0]
 8001494:	4313      	orrs	r3, r2
 8001496:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149c:	3301      	adds	r3, #1
 800149e:	6839      	ldr	r1, [r7, #0]
 80014a0:	440b      	add	r3, r1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	4313      	orrs	r3, r2
 80014a8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ae:	3302      	adds	r3, #2
 80014b0:	6839      	ldr	r1, [r7, #0]
 80014b2:	440b      	add	r3, r1
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	041b      	lsls	r3, r3, #16
 80014b8:	4313      	orrs	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c0:	3303      	adds	r3, #3
 80014c2:	6839      	ldr	r1, [r7, #0]
 80014c4:	440b      	add	r3, r1
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	061b      	lsls	r3, r3, #24
 80014ca:	4313      	orrs	r3, r2
 80014cc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80014d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d6:	3304      	adds	r3, #4
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	3208      	adds	r2, #8
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80014ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ee:	3301      	adds	r3, #1
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
 80014f2:	e7c3      	b.n	800147c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80014f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	4413      	add	r3, r2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80014fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001500:	3301      	adds	r3, #1
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	4413      	add	r3, r2
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	4313      	orrs	r3, r2
 800150e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001512:	3302      	adds	r3, #2
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	041b      	lsls	r3, r3, #16
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	4313      	orrs	r3, r2
 8001520:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001524:	3303      	adds	r3, #3
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	4413      	add	r3, r2
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	061b      	lsls	r3, r3, #24
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	4313      	orrs	r3, r2
 8001532:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001536:	3304      	adds	r3, #4
 8001538:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	429a      	cmp	r2, r3
 8001542:	d90a      	bls.n	800155a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	699a      	ldr	r2, [r3, #24]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4619      	mov	r1, r3
 800154e:	4610      	mov	r0, r2
 8001550:	f00a fab8 	bl	800bac4 <realloc>
 8001554:	4602      	mov	r2, r0
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69fa      	ldr	r2, [r7, #28]
 800155e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800156a:	429a      	cmp	r2, r3
 800156c:	d236      	bcs.n	80015dc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	440a      	add	r2, r1
 800157a:	7812      	ldrb	r2, [r2, #0]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001584:	3301      	adds	r3, #1
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	440b      	add	r3, r1
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001596:	3302      	adds	r3, #2
 8001598:	6839      	ldr	r1, [r7, #0]
 800159a:	440b      	add	r3, r1
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	041b      	lsls	r3, r3, #16
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a8:	3303      	adds	r3, #3
 80015aa:	6839      	ldr	r1, [r7, #0]
 80015ac:	440b      	add	r3, r1
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	061b      	lsls	r3, r3, #24
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80015bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015be:	3304      	adds	r3, #4
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699a      	ldr	r2, [r3, #24]
 80015c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	3214      	adds	r2, #20
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80015d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d6:	3301      	adds	r3, #1
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015da:	e7c3      	b.n	8001564 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80015dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80015e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e8:	3301      	adds	r3, #1
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80015f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fa:	3302      	adds	r3, #2
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	041b      	lsls	r3, r3, #16
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800160a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800160c:	3303      	adds	r3, #3
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	4413      	add	r3, r2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	061b      	lsls	r3, r3, #24
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800161c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161e:	3304      	adds	r3, #4
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	429a      	cmp	r2, r3
 800162a:	d90a      	bls.n	8001642 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4619      	mov	r1, r3
 8001636:	4610      	mov	r0, r2
 8001638:	f00a fa44 	bl	800bac4 <realloc>
 800163c:	4602      	mov	r2, r0
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001652:	429a      	cmp	r2, r3
 8001654:	d23f      	bcs.n	80016d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	441a      	add	r2, r3
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fb74 	bl	8001d50 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166a:	3304      	adds	r3, #4
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800166e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
 8001672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167a:	429a      	cmp	r2, r3
 800167c:	d20c      	bcs.n	8001698 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	441a      	add	r2, r3
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	3b01      	subs	r3, #1
 8001688:	6839      	ldr	r1, [r7, #0]
 800168a:	440b      	add	r3, r1
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	3301      	adds	r3, #1
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
 8001696:	e7ec      	b.n	8001672 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	3b01      	subs	r3, #1
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80016a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016aa:	3b01      	subs	r3, #1
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	441a      	add	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80016b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	3220      	adds	r2, #32
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80016ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d0:	3301      	adds	r3, #1
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d4:	e7ba      	b.n	800164c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80016d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80016d8:	4618      	mov	r0, r3
 80016da:	3738      	adds	r7, #56	; 0x38
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	0800bd70 	.word	0x0800bd70

080016fc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	0800bcd0 	.word	0x0800bcd0

08001718 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	611a      	str	r2, [r3, #16]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68d8      	ldr	r0, [r3, #12]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6891      	ldr	r1, [r2, #8]
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	4798      	blx	r3
 8001764:	4603      	mov	r3, r0
  };
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
  }
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800179c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <_ZN13STM32HardwareC1Ev+0x34>)
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	200001fc 	.word	0x200001fc

080017e4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f804 	bl	80017fa <_ZN13STM32Hardware10reset_rbufEv>
    }
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6818      	ldr	r0, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3304      	adds	r3, #4
 800180a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800180e:	4619      	mov	r1, r3
 8001810:	f005 fc20 	bl	8007054 <HAL_UART_Receive_DMA>
    }
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <_ZN13STM32Hardware4readEv>:

    int read(){
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
 8001828:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ffa8 	bl	8001786 <_ZN13STM32Hardware10getRdmaIndEv>
 8001836:	4603      	mov	r3, r0
 8001838:	429c      	cmp	r4, r3
 800183a:	bf14      	ite	ne
 800183c:	2301      	movne	r3, #1
 800183e:	2300      	moveq	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d012      	beq.n	800186c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800184c:	1c59      	adds	r1, r3, #1
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	791b      	ldrb	r3, [r3, #4]
 800185a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001862:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 800186c:	68fb      	ldr	r3, [r7, #12]
    }
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bd90      	pop	{r4, r7, pc}
	...

08001878 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b20      	cmp	r3, #32
 800188c:	d108      	bne.n	80018a0 <_ZN13STM32Hardware5flushEv+0x28>
 800188e:	4b28      	ldr	r3, [pc, #160]	; (8001930 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	f083 0301 	eor.w	r3, r3, #1
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <_ZN13STM32Hardware5flushEv+0x28>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <_ZN13STM32Hardware5flushEv+0x2a>
 80018a0:	2300      	movs	r3, #0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d03f      	beq.n	8001926 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <_ZN13STM32Hardware5flushEv+0xb8>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d031      	beq.n	8001920 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d20a      	bcs.n	80018e2 <_ZN13STM32Hardware5flushEv+0x6a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80018da:	b29b      	uxth	r3, r3
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	b29b      	uxth	r3, r3
 80018e0:	e006      	b.n	80018f0 <_ZN13STM32Hardware5flushEv+0x78>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80018fc:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	4413      	add	r3, r2
 8001904:	89fa      	ldrh	r2, [r7, #14]
 8001906:	4619      	mov	r1, r3
 8001908:	f005 fb26 	bl	8006f58 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8001912:	89fb      	ldrh	r3, [r7, #14]
 8001914:	4413      	add	r3, r2
 8001916:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        }
        mutex = false;
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
      }
    }
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000300 	.word	0x20000300

08001934 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
      uint16_t n = length;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	b29b      	uxth	r3, r3
 8001944:	827b      	strh	r3, [r7, #18]
      n = n <= tbuflen ? n : tbuflen;
 8001946:	8a7b      	ldrh	r3, [r7, #18]
 8001948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800194c:	d803      	bhi.n	8001956 <_ZN13STM32Hardware5writeEPhi+0x22>
 800194e:	f107 0312 	add.w	r3, r7, #18
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	e001      	b.n	800195a <_ZN13STM32Hardware5writeEPhi+0x26>
 8001956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195a:	827b      	strh	r3, [r7, #18]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800195c:	8a7b      	ldrh	r3, [r7, #18]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8001966:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800196a:	4293      	cmp	r3, r2
 800196c:	bf28      	it	cs
 800196e:	4613      	movcs	r3, r2
 8001970:	617b      	str	r3, [r7, #20]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8001978:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	68b9      	ldr	r1, [r7, #8]
 8001984:	4618      	mov	r0, r3
 8001986:	f009 ffa7 	bl	800b8d8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8001990:	8a7a      	ldrh	r2, [r7, #18]
 8001992:	4413      	add	r3, r2
 8001994:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

      if(n != n_tail){
 800199e:	8a7b      	ldrh	r3, [r7, #18]
 80019a0:	461a      	mov	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00c      	beq.n	80019c2 <_ZN13STM32Hardware5writeEPhi+0x8e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	18d1      	adds	r1, r2, r3
 80019b4:	8a7b      	ldrh	r3, [r7, #18]
 80019b6:	461a      	mov	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	f009 ff8b 	bl	800b8d8 <memcpy>
      }

      flush();
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f7ff ff58 	bl	8001878 <_ZN13STM32Hardware5flushEv>
    }
 80019c8:	bf00      	nop
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	f001 fb16 	bl	8003008 <HAL_GetTick>
 80019dc:	4603      	mov	r3, r0
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
      data("")
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f850 	bl	8000a98 <_ZN3ros3MsgC1Ev>
 80019f8:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <_ZN8std_msgs6StringC1Ev+0x28>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001a02:	605a      	str	r2, [r3, #4]
    {
    }
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	0800bda8 	.word	0x0800bda8
 8001a14:	0800bc54 	.word	0x0800bc54

08001a18 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fbd4 	bl	80001d8 <strlen>
 8001a30:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f96a 	bl	8001d14 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3304      	adds	r3, #4
 8001a44:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	18d0      	adds	r0, r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	4619      	mov	r1, r3
 8001a54:	f009 ff40 	bl	800b8d8 <memcpy>
      offset += length_data;
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001a60:	68fb      	ldr	r3, [r7, #12]
    }
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	441a      	add	r2, r3
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 f963 	bl	8001d50 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d20c      	bcs.n	8001aba <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	441a      	add	r2, r3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	6839      	ldr	r1, [r7, #0]
 8001aac:	440b      	add	r3, r1
 8001aae:	7812      	ldrb	r2, [r2, #0]
 8001ab0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e7ec      	b.n	8001a94 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	441a      	add	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
     return offset;
 8001ade:	693b      	ldr	r3, [r7, #16]
    }
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	0800bcf4 	.word	0x0800bcf4

08001b04 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	0800bd04 	.word	0x0800bd04

08001b20 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	0800bdc0 	.word	0x0800bdc0

08001b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 1024,
         int OUTPUT_SIZE = 1024>
class NodeHandle_ : public NodeHandleBase_
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ffe8 	bl	8001b20 <_ZN3ros15NodeHandleBase_C1Ev>
 8001b50:	4a45      	ldr	r2, [pc, #276]	; (8001c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fe26 	bl	80017ac <_ZN13STM32HardwareC1Ev>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8001b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f009 feb1 	bl	800b8f4 <memset>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8001b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f009 fea8 	bl	800b8f4 <memset>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001baa:	3324      	adds	r3, #36	; 0x24
 8001bac:	2264      	movs	r2, #100	; 0x64
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f009 fe9f 	bl	800b8f4 <memset>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbc:	3388      	adds	r3, #136	; 0x88
 8001bbe:	2264      	movs	r2, #100	; 0x64
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f009 fe96 	bl	800b8f4 <memset>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bce:	461a      	mov	r2, r3
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bdc:	461a      	mov	r2, r3
 8001bde:	2300      	movs	r3, #0
 8001be0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bea:	461a      	mov	r2, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c06:	461a      	mov	r2, r3
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c20:	461a      	mov	r2, r3
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001c56:	3314      	adds	r3, #20
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fa91 	bl	8001180 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	0800bd94 	.word	0x0800bd94

08001c6c <HAL_UART_TxCpltCallback>:

std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello Taste VN!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <HAL_UART_TxCpltCallback+0x20>)
 8001c76:	f000 f890 	bl	8001d9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fdfb 	bl	8001878 <_ZN13STM32Hardware5flushEv>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000304 	.word	0x20000304

08001c90 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8001c98:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <HAL_UART_RxCpltCallback+0x20>)
 8001c9a:	f000 f87e 	bl	8001d9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fdaa 	bl	80017fa <_ZN13STM32Hardware10reset_rbufEv>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000304 	.word	0x20000304

08001cb4 <setup>:

void setup(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  nh.initNode();
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <setup+0x18>)
 8001cba:	f000 f87a 	bl	8001db2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
  nh.advertise(chatter);
 8001cbe:	4904      	ldr	r1, [pc, #16]	; (8001cd0 <setup+0x1c>)
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <setup+0x18>)
 8001cc2:	f000 f89f 	bl	8001e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000304 	.word	0x20000304
 8001cd0:	20001448 	.word	0x20001448

08001cd4 <loop>:

void loop(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0

//  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
//  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
//  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8001cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cdc:	4808      	ldr	r0, [pc, #32]	; (8001d00 <loop+0x2c>)
 8001cde:	f002 f874 	bl	8003dca <HAL_GPIO_TogglePin>

  str_msg.data = hello;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <loop+0x30>)
 8001ce4:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <loop+0x34>)
 8001ce6:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 8001ce8:	4906      	ldr	r1, [pc, #24]	; (8001d04 <loop+0x30>)
 8001cea:	4808      	ldr	r0, [pc, #32]	; (8001d0c <loop+0x38>)
 8001cec:	f7ff fd2b 	bl	8001746 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 8001cf0:	4807      	ldr	r0, [pc, #28]	; (8001d10 <loop+0x3c>)
 8001cf2:	f000 f8b7 	bl	8001e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>

  HAL_Delay(100);
 8001cf6:	2064      	movs	r0, #100	; 0x64
 8001cf8:	f001 f992 	bl	8003020 <HAL_Delay>
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40020c00 	.word	0x40020c00
 8001d04:	20001440 	.word	0x20001440
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	20001448 	.word	0x20001448
 8001d10:	20000304 	.word	0x20000304

08001d14 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d80d      	bhi.n	8001d44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	fa22 f103 	lsr.w	r1, r2, r3
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	b2ca      	uxtb	r2, r1
 8001d3a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	e7ee      	b.n	8001d22 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d811      	bhi.n	8001d8e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6839      	ldr	r1, [r7, #0]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	440a      	add	r2, r1
 8001d74:	7812      	ldrb	r2, [r2, #0]
 8001d76:	4611      	mov	r1, r2
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	00d2      	lsls	r2, r2, #3
 8001d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	e7ea      	b.n	8001d64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3304      	adds	r3, #4
  }
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fd10 	bl	80017e4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    bytes_ = 0;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    index_ = 0;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de6:	461a      	mov	r2, r3
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    topic_ = 0;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df4:	461a      	mov	r2, r3
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  };
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b18      	cmp	r3, #24
 8001e16:	dc1e      	bgt.n	8001e56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d111      	bne.n	8001e4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	60da      	str	r2, [r3, #12]
        return true;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e004      	b.n	8001e58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3301      	adds	r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e7dd      	b.n	8001e12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8001e56:	2300      	movs	r3, #0
  }
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce() override
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3304      	adds	r3, #4
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fdad 	bl	80019d0 <_ZN13STM32Hardware4timeEv>
 8001e76:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d905      	bls.n	8001e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    if (mode_ != MODE_FIRST_FF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00e      	beq.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eae:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d906      	bls.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
      if (spin_timeout_ > 0)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d014      	beq.n	8001efa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fd7b 	bl	80019d0 <_ZN13STM32Hardware4timeEv>
 8001eda:	4602      	mov	r2, r0
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1ad2      	subs	r2, r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	bf8c      	ite	hi
 8001eea:	2301      	movhi	r3, #1
 8001eec:	2300      	movls	r3, #0
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 8001ef4:	f06f 0301 	mvn.w	r3, #1
 8001ef8:	e221      	b.n	800233e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3304      	adds	r3, #4
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fc8c 	bl	800181c <_ZN13STM32Hardware4readEv>
 8001f04:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f2c0 81fa 	blt.w	8002302 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f14:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f22:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f30:	2b07      	cmp	r3, #7
 8001f32:	d12b      	bne.n	8001f8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f3a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8001f46:	f8c1 20f8 	str.w	r2, [r1, #248]	; 0xf8
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	b2d1      	uxtb	r1, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	460a      	mov	r2, r1
 8001f54:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f62:	3b01      	subs	r3, #1
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1a4      	bne.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f82:	461a      	mov	r2, r3
 8001f84:	2308      	movs	r3, #8
 8001f86:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001f8a:	e79c      	b.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f92:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d130      	bne.n	8001ffc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2bff      	cmp	r3, #255	; 0xff
 8001f9e:	d112      	bne.n	8001fc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001faa:	3301      	adds	r3, #1
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fb2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	3314      	adds	r3, #20
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fc0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8001fc4:	e77f      	b.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fd00 	bl	80019d0 <_ZN13STM32Hardware4timeEv>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	bf8c      	ite	hi
 8001fde:	2301      	movhi	r3, #1
 8001fe0:	2300      	movls	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f43f af6e 	beq.w	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          return SPIN_TIMEOUT;
 8001ff6:	f06f 0301 	mvn.w	r3, #1
 8001ffa:	e1a0      	b.n	800233e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002002:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002006:	2b01      	cmp	r3, #1
 8002008:	d121      	bne.n	800204e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2bfe      	cmp	r3, #254	; 0xfe
 800200e:	d10b      	bne.n	8002028 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002016:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800201a:	3301      	adds	r3, #1
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002022:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002026:	e74e      	b.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202e:	461a      	mov	r2, r3
 8002030:	2300      	movs	r3, #0
 8002032:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          if (configured_ == false)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	f47f af40 	bne.w	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f97d 	bl	8002346 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 800204c:	e73b      	b.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002054:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002058:	2b02      	cmp	r3, #2
 800205a:	d120      	bne.n	800209e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002062:	461a      	mov	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        index_ = 0;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002070:	461a      	mov	r2, r3
 8002072:	2300      	movs	r3, #0
 8002074:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002082:	3301      	adds	r3, #1
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800208a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte for calculating size checksum */
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002094:	461a      	mov	r2, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 800209c:	e713      	b.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d118      	bne.n	80020de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	4413      	add	r3, r2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        mode_++;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020cc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020d0:	3301      	adds	r3, #1
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020d8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80020dc:	e6f3      	b.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d11f      	bne.n	800212c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80020f6:	425a      	negs	r2, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	bf58      	it	pl
 80020fe:	4253      	negpl	r3, r2
 8002100:	2bff      	cmp	r3, #255	; 0xff
 8002102:	d10b      	bne.n	800211c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800210a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800210e:	3301      	adds	r3, #1
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002116:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800211a:	e6d4      	b.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002122:	461a      	mov	r2, r3
 8002124:	2300      	movs	r3, #0
 8002126:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800212a:	e6cc      	b.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002132:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002136:	2b05      	cmp	r3, #5
 8002138:	d119      	bne.n	800216e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002140:	461a      	mov	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002152:	3301      	adds	r3, #1
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800215a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte included in checksum */
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 800216c:	e6ab      	b.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002174:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002178:	2b06      	cmp	r3, #6
 800217a:	d123      	bne.n	80021c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002182:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	4413      	add	r3, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002192:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_ = MODE_MESSAGE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219c:	461a      	mov	r2, r3
 800219e:	2307      	movs	r3, #7
 80021a0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if (bytes_ == 0)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f47f ae89 	bne.w	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ba:	461a      	mov	r2, r3
 80021bc:	2308      	movs	r3, #8
 80021be:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80021c2:	e680      	b.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	f47f ae79 	bne.w	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021da:	461a      	mov	r2, r3
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if ((checksum_ % 256) == 255)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80021ec:	425a      	negs	r2, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	bf58      	it	pl
 80021f4:	4253      	negpl	r3, r2
 80021f6:	2bff      	cmp	r3, #255	; 0xff
 80021f8:	f47f ae65 	bne.w	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002206:	2b00      	cmp	r3, #0
 8002208:	d116      	bne.n	8002238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f89b 	bl	8002346 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f8b6 	bl	8002382 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221c:	461a      	mov	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            last_sync_receive_time = c_time;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            return SPIN_ERR;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	e082      	b.n	800233e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800223e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002242:	2b0a      	cmp	r3, #10
 8002244:	d107      	bne.n	8002256 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800224c:	4619      	mov	r1, r3
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f978 	bl	8002544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 8002254:	e637      	b.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002260:	2b06      	cmp	r3, #6
 8002262:	d111      	bne.n	8002288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800226a:	3314      	adds	r3, #20
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff f8c2 	bl	80013fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8002286:	e61e      	b.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800228e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002292:	2b0b      	cmp	r3, #11
 8002294:	d106      	bne.n	80022a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80022a2:	e610      	b.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022ae:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80022b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f43f ae02 	beq.w	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022cc:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80022d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022e4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80022ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	f602 0224 	addw	r2, r2, #2084	; 0x824
 80022fc:	4611      	mov	r1, r2
 80022fe:	4798      	blx	r3
    while (true)
 8002300:	e5e1      	b.n	8001ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 8002302:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d014      	beq.n	800233c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002318:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002324:	4293      	cmp	r3, r2
 8002326:	d909      	bls.n	800233c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f80c 	bl	8002346 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002334:	461a      	mov	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return SPIN_OK;
 800233c:	2300      	movs	r3, #0
  }
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002346:	b580      	push	{r7, lr}
 8002348:	b086      	sub	sp, #24
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800234e:	f107 030c 	add.w	r3, r7, #12
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fbb0 	bl	8000ab8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f107 020c 	add.w	r2, r7, #12
 8002362:	210a      	movs	r1, #10
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
    rt_time = hardware_.time();
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3304      	adds	r3, #4
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fb2f 	bl	80019d0 <_ZN13STM32Hardware4timeEv>
 8002372:	4602      	mov	r2, r0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8002382:	b590      	push	{r4, r7, lr}
 8002384:	b08b      	sub	sp, #44	; 0x2c
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fc82 	bl	8000c98 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002394:	2300      	movs	r3, #0
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	2b18      	cmp	r3, #24
 800239c:	dc63      	bgt.n	8002466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d056      	beq.n	800245e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	3308      	adds	r3, #8
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4608      	mov	r0, r1
 80023fe:	4798      	blx	r3
 8002400:	4603      	mov	r3, r0
 8002402:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	330c      	adds	r3, #12
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4608      	mov	r0, r1
 800242c:	4798      	blx	r3
 800242e:	4603      	mov	r3, r0
 8002430:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002436:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681c      	ldr	r4, [r3, #0]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff f98e 	bl	800176e <_ZN3ros9Publisher15getEndpointTypeEv>
 8002452:	4601      	mov	r1, r0
 8002454:	f107 030c 	add.w	r3, r7, #12
 8002458:	461a      	mov	r2, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	3301      	adds	r3, #1
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
 8002464:	e798      	b.n	8002398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	2b18      	cmp	r3, #24
 800246e:	dc5f      	bgt.n	8002530 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002474:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8002478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d053      	beq.n	8002528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002484:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8002488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	b29b      	uxth	r3, r3
 8002490:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002496:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800249a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a6:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80024aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b2:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80024b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3308      	adds	r3, #8
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4608      	mov	r0, r1
 80024c2:	4798      	blx	r3
 80024c4:	4603      	mov	r3, r0
 80024c6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024cc:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80024d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d8:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80024dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	330c      	adds	r3, #12
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4608      	mov	r0, r1
 80024e8:	4798      	blx	r3
 80024ea:	4603      	mov	r3, r0
 80024ec:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80024ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681c      	ldr	r4, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fe:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8002502:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800250e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3304      	adds	r3, #4
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4608      	mov	r0, r1
 800251a:	4798      	blx	r3
 800251c:	4601      	mov	r1, r0
 800251e:	f107 030c 	add.w	r3, r7, #12
 8002522:	461a      	mov	r2, r3
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	3301      	adds	r3, #1
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
 800252e:	e79c      	b.n	800246a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
 800253c:	bf00      	nop
 800253e:	372c      	adds	r7, #44	; 0x2c
 8002540:	46bd      	mov	sp, r7
 8002542:	bd90      	pop	{r4, r7, pc}

08002544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800254e:	f107 0308 	add.w	r3, r7, #8
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fab0 	bl	8000ab8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3304      	adds	r3, #4
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fa37 	bl	80019d0 <_ZN13STM32Hardware4timeEv>
 8002562:	4602      	mov	r2, r0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800256e:	f107 0308 	add.w	r3, r7, #8
 8002572:	6839      	ldr	r1, [r7, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fb0f 	bl	8000b98 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	4916      	ldr	r1, [pc, #88]	; (80025d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8002580:	fba1 1303 	umull	r1, r3, r1, r3
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	4413      	add	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800258a:	6939      	ldr	r1, [r7, #16]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8002590:	fba3 0302 	umull	r0, r3, r3, r2
 8002594:	099b      	lsrs	r3, r3, #6
 8002596:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800259a:	fb00 f303 	mul.w	r3, r0, r3
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	4a0e      	ldr	r2, [pc, #56]	; (80025dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	440b      	add	r3, r1
 80025a8:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80025aa:	f107 0308 	add.w	r3, r7, #8
 80025ae:	3304      	adds	r3, #4
 80025b0:	4619      	mov	r1, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f8aa 	bl	800270c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fa07 	bl	80019d0 <_ZN13STM32Hardware4timeEv>
 80025c2:	4602      	mov	r2, r0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
 80025ce:	bf00      	nop
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	10624dd3 	.word	0x10624dd3
 80025dc:	000f4240 	.word	0x000f4240

080025e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b63      	cmp	r3, #99	; 0x63
 80025f0:	dd0b      	ble.n	800260a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f8:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80025fc:	f083 0301 	eor.w	r3, r3, #1
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8002606:	2300      	movs	r3, #0
 8002608:	e079      	b.n	80026fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	f602 4224 	addw	r2, r2, #3108	; 0xc24
 8002616:	3207      	adds	r2, #7
 8002618:	4611      	mov	r1, r2
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	4798      	blx	r3
 800261e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	22ff      	movs	r2, #255	; 0xff
 8002624:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24
    message_out[1] = PROTOCOL_VER;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	22fe      	movs	r2, #254	; 0xfe
 800262c:	f883 2c25 	strb.w	r2, [r3, #3109]	; 0xc25
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f883 2c26 	strb.w	r2, [r3, #3110]	; 0xc26
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	b29b      	uxth	r3, r3
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	b29b      	uxth	r3, r3
 8002642:	b2da      	uxtb	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f883 2c27 	strb.w	r2, [r3, #3111]	; 0xc27
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 2c26 	ldrb.w	r2, [r3, #3110]	; 0xc26
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 3c27 	ldrb.w	r3, [r3, #3111]	; 0xc27
 8002656:	4413      	add	r3, r2
 8002658:	b2db      	uxtb	r3, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	b2da      	uxtb	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	b21b      	sxth	r3, r3
 8002672:	121b      	asrs	r3, r3, #8
 8002674:	b21b      	sxth	r3, r3
 8002676:	b2da      	uxtb	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a

    /* calculate checksum */
    int chk = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002682:	2305      	movs	r3, #5
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3306      	adds	r3, #6
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	429a      	cmp	r2, r3
 800268e:	dc0d      	bgt.n	80026ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	4413      	add	r3, r2
 8002696:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	4413      	add	r3, r2
 80026a2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	3301      	adds	r3, #1
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	e7ec      	b.n	8002686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	3307      	adds	r3, #7
 80026b0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	425a      	negs	r2, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	bf58      	it	pl
 80026bc:	4253      	negpl	r3, r2
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	1c59      	adds	r1, r3, #1
 80026c4:	6179      	str	r1, [r7, #20]
 80026c6:	43d2      	mvns	r2, r2
 80026c8:	b2d1      	uxtb	r1, r2
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4413      	add	r3, r2
 80026ce:	460a      	mov	r2, r1
 80026d0:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24

    if (l <= OUTPUT_SIZE)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026da:	dc0a      	bgt.n	80026f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1d18      	adds	r0, r3, #4
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4619      	mov	r1, r3
 80026ea:	f7ff f923 	bl	8001934 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	e005      	b.n	80026fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80026f2:	4905      	ldr	r1, [pc, #20]	; (8002708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f849 	bl	800278c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80026fe:	4618      	mov	r0, r3
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	0800bd28 	.word	0x0800bd28

0800270c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3304      	adds	r3, #4
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff f958 	bl	80019d0 <_ZN13STM32Hardware4timeEv>
 8002720:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4915      	ldr	r1, [pc, #84]	; (8002780 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x74>)
 800272a:	fba1 1303 	umull	r1, r3, r1, r3
 800272e:	099b      	lsrs	r3, r3, #6
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	1e5a      	subs	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6859      	ldr	r1, [r3, #4]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x74>)
 8002742:	fba3 0302 	umull	r0, r3, r3, r2
 8002746:	099b      	lsrs	r3, r3, #6
 8002748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800274c:	fb00 f303 	mul.w	r3, r0, r3
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	4a0c      	ldr	r2, [pc, #48]	; (8002784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x78>)
 8002754:	fb02 f303 	mul.w	r3, r2, r3
 8002758:	1aca      	subs	r2, r1, r3
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x7c>)
 800275c:	4413      	add	r3, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f603 0218 	addw	r2, r3, #2072	; 0x818
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8002770:	4619      	mov	r1, r3
 8002772:	4610      	mov	r0, r2
 8002774:	f000 fb8c 	bl	8002e90 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	10624dd3 	.word	0x10624dd3
 8002784:	000f4240 	.word	0x000f4240
 8002788:	3b9aca00 	.word	0x3b9aca00

0800278c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	2103      	movs	r1, #3
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f804 	bl	80027a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	460b      	mov	r3, r1
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fc30 	bl	8001020 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80027c0:	7afb      	ldrb	r3, [r7, #11]
 80027c2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f107 0214 	add.w	r2, r7, #20
 80027d2:	2107      	movs	r1, #7
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	4798      	blx	r3
  }
 80027d8:	bf00      	nop
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <_Z41__static_initialization_and_destruction_0ii>:
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d110      	bne.n	8002812 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10b      	bne.n	8002812 <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 80027fa:	4808      	ldr	r0, [pc, #32]	; (800281c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80027fc:	f7ff f9a0 	bl	8001b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
std_msgs::String str_msg;
 8002800:	4807      	ldr	r0, [pc, #28]	; (8002820 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002802:	f7ff f8f1 	bl	80019e8 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8002806:	2300      	movs	r3, #0
 8002808:	4a05      	ldr	r2, [pc, #20]	; (8002820 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800280a:	4906      	ldr	r1, [pc, #24]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800280c:	4806      	ldr	r0, [pc, #24]	; (8002828 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800280e:	f7fe ff83 	bl	8001718 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000304 	.word	0x20000304
 8002820:	20001440 	.word	0x20001440
 8002824:	0800bd64 	.word	0x0800bd64
 8002828:	20001448 	.word	0x20001448

0800282c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected() override
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    return configured_;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800283a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  };
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <_GLOBAL__sub_I_nh>:
 800284a:	b580      	push	{r7, lr}
 800284c:	af00      	add	r7, sp, #0
 800284e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002852:	2001      	movs	r0, #1
 8002854:	f7ff ffc4 	bl	80027e0 <_Z41__static_initialization_and_destruction_0ii>
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <HAL_MspInit+0x4c>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <HAL_MspInit+0x4c>)
 800286c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002870:	6453      	str	r3, [r2, #68]	; 0x44
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <HAL_MspInit+0x4c>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_MspInit+0x4c>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <HAL_MspInit+0x4c>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_MspInit+0x4c>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800289a:	2007      	movs	r0, #7
 800289c:	f000 fcb4 	bl	8003208 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800

080028ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	; 0x28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a19      	ldr	r2, [pc, #100]	; (8002930 <HAL_I2C_MspInit+0x84>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d12c      	bne.n	8002928 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	4b18      	ldr	r3, [pc, #96]	; (8002934 <HAL_I2C_MspInit+0x88>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a17      	ldr	r2, [pc, #92]	; (8002934 <HAL_I2C_MspInit+0x88>)
 80028d8:	f043 0302 	orr.w	r3, r3, #2
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <HAL_I2C_MspInit+0x88>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80028ea:	f44f 7310 	mov.w	r3, #576	; 0x240
 80028ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f0:	2312      	movs	r3, #18
 80028f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028f4:	2301      	movs	r3, #1
 80028f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028fc:	2304      	movs	r3, #4
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	4619      	mov	r1, r3
 8002906:	480c      	ldr	r0, [pc, #48]	; (8002938 <HAL_I2C_MspInit+0x8c>)
 8002908:	f001 f8c2 	bl	8003a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_I2C_MspInit+0x88>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	4a07      	ldr	r2, [pc, #28]	; (8002934 <HAL_I2C_MspInit+0x88>)
 8002916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800291a:	6413      	str	r3, [r2, #64]	; 0x40
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_I2C_MspInit+0x88>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002928:	bf00      	nop
 800292a:	3728      	adds	r7, #40	; 0x28
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40005400 	.word	0x40005400
 8002934:	40023800 	.word	0x40023800
 8002938:	40020400 	.word	0x40020400

0800293c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08e      	sub	sp, #56	; 0x38
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a59      	ldr	r2, [pc, #356]	; (8002ac0 <HAL_I2S_MspInit+0x184>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d15b      	bne.n	8002a16 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
 8002962:	4b58      	ldr	r3, [pc, #352]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	4a57      	ldr	r2, [pc, #348]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 8002968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800296c:	6413      	str	r3, [r2, #64]	; 0x40
 800296e:	4b55      	ldr	r3, [pc, #340]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002976:	623b      	str	r3, [r7, #32]
 8002978:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	4b51      	ldr	r3, [pc, #324]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a50      	ldr	r2, [pc, #320]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b4e      	ldr	r3, [pc, #312]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	61fb      	str	r3, [r7, #28]
 8002994:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	4b4a      	ldr	r3, [pc, #296]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a49      	ldr	r2, [pc, #292]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b47      	ldr	r3, [pc, #284]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029b2:	2304      	movs	r3, #4
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	2300      	movs	r3, #0
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80029c2:	2306      	movs	r3, #6
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ca:	4619      	mov	r1, r3
 80029cc:	483e      	ldr	r0, [pc, #248]	; (8002ac8 <HAL_I2S_MspInit+0x18c>)
 80029ce:	f001 f85f 	bl	8003a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80029d2:	2308      	movs	r3, #8
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029de:	2300      	movs	r3, #0
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029e2:	2305      	movs	r3, #5
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80029e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ea:	4619      	mov	r1, r3
 80029ec:	4836      	ldr	r0, [pc, #216]	; (8002ac8 <HAL_I2S_MspInit+0x18c>)
 80029ee:	f001 f84f 	bl	8003a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80029f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a04:	2305      	movs	r3, #5
 8002a06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	482f      	ldr	r0, [pc, #188]	; (8002acc <HAL_I2S_MspInit+0x190>)
 8002a10:	f001 f83e 	bl	8003a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002a14:	e04f      	b.n	8002ab6 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a2d      	ldr	r2, [pc, #180]	; (8002ad0 <HAL_I2S_MspInit+0x194>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d14a      	bne.n	8002ab6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	4b27      	ldr	r3, [pc, #156]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	4a26      	ldr	r2, [pc, #152]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 8002a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a30:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	4a1f      	ldr	r2, [pc, #124]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	6313      	str	r3, [r2, #48]	; 0x30
 8002a68:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <HAL_I2S_MspInit+0x188>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002a74:	2310      	movs	r3, #16
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a84:	2306      	movs	r3, #6
 8002a86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4811      	ldr	r0, [pc, #68]	; (8002ad4 <HAL_I2S_MspInit+0x198>)
 8002a90:	f000 fffe 	bl	8003a90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002a94:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002aa6:	2306      	movs	r3, #6
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4805      	ldr	r0, [pc, #20]	; (8002ac8 <HAL_I2S_MspInit+0x18c>)
 8002ab2:	f000 ffed 	bl	8003a90 <HAL_GPIO_Init>
}
 8002ab6:	bf00      	nop
 8002ab8:	3738      	adds	r7, #56	; 0x38
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40003800 	.word	0x40003800
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40020800 	.word	0x40020800
 8002acc:	40020400 	.word	0x40020400
 8002ad0:	40003c00 	.word	0x40003c00
 8002ad4:	40020000 	.word	0x40020000

08002ad8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	; 0x28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a19      	ldr	r2, [pc, #100]	; (8002b5c <HAL_SPI_MspInit+0x84>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d12b      	bne.n	8002b52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <HAL_SPI_MspInit+0x88>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	4a17      	ldr	r2, [pc, #92]	; (8002b60 <HAL_SPI_MspInit+0x88>)
 8002b04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b08:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_SPI_MspInit+0x88>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <HAL_SPI_MspInit+0x88>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	4a10      	ldr	r2, [pc, #64]	; (8002b60 <HAL_SPI_MspInit+0x88>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6313      	str	r3, [r2, #48]	; 0x30
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <HAL_SPI_MspInit+0x88>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002b32:	23e0      	movs	r3, #224	; 0xe0
 8002b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b36:	2302      	movs	r3, #2
 8002b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b42:	2305      	movs	r3, #5
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b46:	f107 0314 	add.w	r3, r7, #20
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4805      	ldr	r0, [pc, #20]	; (8002b64 <HAL_SPI_MspInit+0x8c>)
 8002b4e:	f000 ff9f 	bl	8003a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b52:	bf00      	nop
 8002b54:	3728      	adds	r7, #40	; 0x28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40013000 	.word	0x40013000
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40020000 	.word	0x40020000

08002b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a5c      	ldr	r2, [pc, #368]	; (8002cf8 <HAL_UART_MspInit+0x190>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	f040 80b1 	bne.w	8002cee <HAL_UART_MspInit+0x186>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	4b5a      	ldr	r3, [pc, #360]	; (8002cfc <HAL_UART_MspInit+0x194>)
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	4a59      	ldr	r2, [pc, #356]	; (8002cfc <HAL_UART_MspInit+0x194>)
 8002b96:	f043 0310 	orr.w	r3, r3, #16
 8002b9a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b9c:	4b57      	ldr	r3, [pc, #348]	; (8002cfc <HAL_UART_MspInit+0x194>)
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	4b53      	ldr	r3, [pc, #332]	; (8002cfc <HAL_UART_MspInit+0x194>)
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	4a52      	ldr	r2, [pc, #328]	; (8002cfc <HAL_UART_MspInit+0x194>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb8:	4b50      	ldr	r3, [pc, #320]	; (8002cfc <HAL_UART_MspInit+0x194>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	4b4c      	ldr	r3, [pc, #304]	; (8002cfc <HAL_UART_MspInit+0x194>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	4a4b      	ldr	r2, [pc, #300]	; (8002cfc <HAL_UART_MspInit+0x194>)
 8002bce:	f043 0302 	orr.w	r3, r3, #2
 8002bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd4:	4b49      	ldr	r3, [pc, #292]	; (8002cfc <HAL_UART_MspInit+0x194>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002be0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	2302      	movs	r3, #2
 8002be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bf2:	2307      	movs	r3, #7
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf6:	f107 0314 	add.w	r3, r7, #20
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4840      	ldr	r0, [pc, #256]	; (8002d00 <HAL_UART_MspInit+0x198>)
 8002bfe:	f000 ff47 	bl	8003a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	2302      	movs	r3, #2
 8002c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c12:	2307      	movs	r3, #7
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c16:	f107 0314 	add.w	r3, r7, #20
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4839      	ldr	r0, [pc, #228]	; (8002d04 <HAL_UART_MspInit+0x19c>)
 8002c1e:	f000 ff37 	bl	8003a90 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002c22:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <HAL_UART_MspInit+0x1a0>)
 8002c24:	4a39      	ldr	r2, [pc, #228]	; (8002d0c <HAL_UART_MspInit+0x1a4>)
 8002c26:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002c28:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <HAL_UART_MspInit+0x1a0>)
 8002c2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c2e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c30:	4b35      	ldr	r3, [pc, #212]	; (8002d08 <HAL_UART_MspInit+0x1a0>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c36:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_UART_MspInit+0x1a0>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c3c:	4b32      	ldr	r3, [pc, #200]	; (8002d08 <HAL_UART_MspInit+0x1a0>)
 8002c3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c42:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c44:	4b30      	ldr	r3, [pc, #192]	; (8002d08 <HAL_UART_MspInit+0x1a0>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c4a:	4b2f      	ldr	r3, [pc, #188]	; (8002d08 <HAL_UART_MspInit+0x1a0>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c50:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <HAL_UART_MspInit+0x1a0>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c56:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <HAL_UART_MspInit+0x1a0>)
 8002c58:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c5c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_UART_MspInit+0x1a0>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c64:	4828      	ldr	r0, [pc, #160]	; (8002d08 <HAL_UART_MspInit+0x1a0>)
 8002c66:	f000 fb11 	bl	800328c <HAL_DMA_Init>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002c70:	f7fd fefc 	bl	8000a6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a24      	ldr	r2, [pc, #144]	; (8002d08 <HAL_UART_MspInit+0x1a0>)
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38
 8002c7a:	4a23      	ldr	r2, [pc, #140]	; (8002d08 <HAL_UART_MspInit+0x1a0>)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002c80:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <HAL_UART_MspInit+0x1a8>)
 8002c82:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <HAL_UART_MspInit+0x1ac>)
 8002c84:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002c86:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <HAL_UART_MspInit+0x1a8>)
 8002c88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c8c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <HAL_UART_MspInit+0x1a8>)
 8002c90:	2240      	movs	r2, #64	; 0x40
 8002c92:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c94:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <HAL_UART_MspInit+0x1a8>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_UART_MspInit+0x1a8>)
 8002c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ca0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_UART_MspInit+0x1a8>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_UART_MspInit+0x1a8>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <HAL_UART_MspInit+0x1a8>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cb4:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <HAL_UART_MspInit+0x1a8>)
 8002cb6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002cba:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cbc:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <HAL_UART_MspInit+0x1a8>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cc2:	4813      	ldr	r0, [pc, #76]	; (8002d10 <HAL_UART_MspInit+0x1a8>)
 8002cc4:	f000 fae2 	bl	800328c <HAL_DMA_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8002cce:	f7fd fecd 	bl	8000a6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <HAL_UART_MspInit+0x1a8>)
 8002cd6:	635a      	str	r2, [r3, #52]	; 0x34
 8002cd8:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <HAL_UART_MspInit+0x1a8>)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	2025      	movs	r0, #37	; 0x25
 8002ce4:	f000 fa9b 	bl	800321e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ce8:	2025      	movs	r0, #37	; 0x25
 8002cea:	f000 fab4 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cee:	bf00      	nop
 8002cf0:	3728      	adds	r7, #40	; 0x28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40011000 	.word	0x40011000
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40020000 	.word	0x40020000
 8002d04:	40020400 	.word	0x40020400
 8002d08:	20000240 	.word	0x20000240
 8002d0c:	40026440 	.word	0x40026440
 8002d10:	200002a0 	.word	0x200002a0
 8002d14:	400264b8 	.word	0x400264b8

08002d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d1c:	e7fe      	b.n	8002d1c <NMI_Handler+0x4>

08002d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d22:	e7fe      	b.n	8002d22 <HardFault_Handler+0x4>

08002d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <MemManage_Handler+0x4>

08002d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d2e:	e7fe      	b.n	8002d2e <BusFault_Handler+0x4>

08002d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <UsageFault_Handler+0x4>

08002d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d64:	f000 f93c 	bl	8002fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d70:	4802      	ldr	r0, [pc, #8]	; (8002d7c <USART1_IRQHandler+0x10>)
 8002d72:	f004 f99f 	bl	80070b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	200001fc 	.word	0x200001fc

08002d80 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d84:	4802      	ldr	r0, [pc, #8]	; (8002d90 <DMA2_Stream2_IRQHandler+0x10>)
 8002d86:	f000 fc19 	bl	80035bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000240 	.word	0x20000240

08002d94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002d98:	4802      	ldr	r0, [pc, #8]	; (8002da4 <OTG_FS_IRQHandler+0x10>)
 8002d9a:	f001 fa9b 	bl	80042d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20001840 	.word	0x20001840

08002da8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002dac:	4802      	ldr	r0, [pc, #8]	; (8002db8 <DMA2_Stream7_IRQHandler+0x10>)
 8002dae:	f000 fc05 	bl	80035bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	200002a0 	.word	0x200002a0

08002dbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
	return 1;
 8002dc0:	2301      	movs	r3, #1
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <_kill>:

int _kill(int pid, int sig)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002dd6:	f008 fd45 	bl	800b864 <__errno>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2216      	movs	r2, #22
 8002dde:	601a      	str	r2, [r3, #0]
	return -1;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <_exit>:

void _exit (int status)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002df4:	f04f 31ff 	mov.w	r1, #4294967295
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ffe7 	bl	8002dcc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002dfe:	e7fe      	b.n	8002dfe <_exit+0x12>

08002e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e08:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <_sbrk+0x5c>)
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <_sbrk+0x60>)
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <_sbrk+0x64>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <_sbrk+0x64>)
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <_sbrk+0x68>)
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <_sbrk+0x64>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d207      	bcs.n	8002e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e30:	f008 fd18 	bl	800b864 <__errno>
 8002e34:	4603      	mov	r3, r0
 8002e36:	220c      	movs	r2, #12
 8002e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3e:	e009      	b.n	8002e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <_sbrk+0x64>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <_sbrk+0x64>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <_sbrk+0x64>)
 8002e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e52:	68fb      	ldr	r3, [r7, #12]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20020000 	.word	0x20020000
 8002e60:	00000400 	.word	0x00000400
 8002e64:	2000145c 	.word	0x2000145c
 8002e68:	20001b58 	.word	0x20001b58

08002e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <SystemInit+0x20>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <SystemInit+0x20>)
 8002e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	0a5a      	lsrs	r2, r3, #9
 8002ea0:	490f      	ldr	r1, [pc, #60]	; (8002ee0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8002ea2:	fba1 1202 	umull	r1, r2, r1, r2
 8002ea6:	09d2      	lsrs	r2, r2, #7
 8002ea8:	490e      	ldr	r1, [pc, #56]	; (8002ee4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8002eaa:	fb01 f202 	mul.w	r2, r1, r2
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	0a5b      	lsrs	r3, r3, #9
 8002eb8:	4a09      	ldr	r2, [pc, #36]	; (8002ee0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	09db      	lsrs	r3, r3, #7
 8002ec0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	441a      	add	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	601a      	str	r2, [r3, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	00044b83 	.word	0x00044b83
 8002ee4:	3b9aca00 	.word	0x3b9aca00

08002ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eec:	480d      	ldr	r0, [pc, #52]	; (8002f24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002eee:	490e      	ldr	r1, [pc, #56]	; (8002f28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ef0:	4a0e      	ldr	r2, [pc, #56]	; (8002f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ef4:	e002      	b.n	8002efc <LoopCopyDataInit>

08002ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002efa:	3304      	adds	r3, #4

08002efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f00:	d3f9      	bcc.n	8002ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f02:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f04:	4c0b      	ldr	r4, [pc, #44]	; (8002f34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f08:	e001      	b.n	8002f0e <LoopFillZerobss>

08002f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f0c:	3204      	adds	r2, #4

08002f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f10:	d3fb      	bcc.n	8002f0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f12:	f7ff ffab 	bl	8002e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f16:	f008 fcab 	bl	800b870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f1a:	f7fd fae7 	bl	80004ec <main>
  bx  lr    
 8002f1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f28:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002f2c:	0800be78 	.word	0x0800be78
  ldr r2, =_sbss
 8002f30:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002f34:	20001b54 	.word	0x20001b54

08002f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f38:	e7fe      	b.n	8002f38 <ADC_IRQHandler>
	...

08002f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <HAL_Init+0x40>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0d      	ldr	r2, [pc, #52]	; (8002f7c <HAL_Init+0x40>)
 8002f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_Init+0x40>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <HAL_Init+0x40>)
 8002f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <HAL_Init+0x40>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <HAL_Init+0x40>)
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f64:	2003      	movs	r0, #3
 8002f66:	f000 f94f 	bl	8003208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f000 f808 	bl	8002f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f70:	f7ff fc74 	bl	800285c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023c00 	.word	0x40023c00

08002f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_InitTick+0x54>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_InitTick+0x58>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	4619      	mov	r1, r3
 8002f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f967 	bl	8003272 <HAL_SYSTICK_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e00e      	b.n	8002fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b0f      	cmp	r3, #15
 8002fb2:	d80a      	bhi.n	8002fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbc:	f000 f92f 	bl	800321e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fc0:	4a06      	ldr	r2, [pc, #24]	; (8002fdc <HAL_InitTick+0x5c>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e000      	b.n	8002fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000010 	.word	0x20000010
 8002fd8:	20000018 	.word	0x20000018
 8002fdc:	20000014 	.word	0x20000014

08002fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_IncTick+0x20>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_IncTick+0x24>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4413      	add	r3, r2
 8002ff0:	4a04      	ldr	r2, [pc, #16]	; (8003004 <HAL_IncTick+0x24>)
 8002ff2:	6013      	str	r3, [r2, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000018 	.word	0x20000018
 8003004:	20001460 	.word	0x20001460

08003008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return uwTick;
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <HAL_GetTick+0x14>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	20001460 	.word	0x20001460

08003020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003028:	f7ff ffee 	bl	8003008 <HAL_GetTick>
 800302c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d005      	beq.n	8003046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_Delay+0x44>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003046:	bf00      	nop
 8003048:	f7ff ffde 	bl	8003008 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	429a      	cmp	r2, r3
 8003056:	d8f7      	bhi.n	8003048 <HAL_Delay+0x28>
  {
  }
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000018 	.word	0x20000018

08003068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <__NVIC_SetPriorityGrouping+0x44>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003084:	4013      	ands	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800309a:	4a04      	ldr	r2, [pc, #16]	; (80030ac <__NVIC_SetPriorityGrouping+0x44>)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	60d3      	str	r3, [r2, #12]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030b4:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <__NVIC_GetPriorityGrouping+0x18>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	f003 0307 	and.w	r3, r3, #7
}
 80030be:	4618      	mov	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	db0b      	blt.n	80030f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	4907      	ldr	r1, [pc, #28]	; (8003104 <__NVIC_EnableIRQ+0x38>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	2001      	movs	r0, #1
 80030ee:	fa00 f202 	lsl.w	r2, r0, r2
 80030f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000e100 	.word	0xe000e100

08003108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	6039      	str	r1, [r7, #0]
 8003112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003118:	2b00      	cmp	r3, #0
 800311a:	db0a      	blt.n	8003132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	b2da      	uxtb	r2, r3
 8003120:	490c      	ldr	r1, [pc, #48]	; (8003154 <__NVIC_SetPriority+0x4c>)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	0112      	lsls	r2, r2, #4
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	440b      	add	r3, r1
 800312c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003130:	e00a      	b.n	8003148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4908      	ldr	r1, [pc, #32]	; (8003158 <__NVIC_SetPriority+0x50>)
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	3b04      	subs	r3, #4
 8003140:	0112      	lsls	r2, r2, #4
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	440b      	add	r3, r1
 8003146:	761a      	strb	r2, [r3, #24]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000e100 	.word	0xe000e100
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800315c:	b480      	push	{r7}
 800315e:	b089      	sub	sp, #36	; 0x24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f1c3 0307 	rsb	r3, r3, #7
 8003176:	2b04      	cmp	r3, #4
 8003178:	bf28      	it	cs
 800317a:	2304      	movcs	r3, #4
 800317c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3304      	adds	r3, #4
 8003182:	2b06      	cmp	r3, #6
 8003184:	d902      	bls.n	800318c <NVIC_EncodePriority+0x30>
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3b03      	subs	r3, #3
 800318a:	e000      	b.n	800318e <NVIC_EncodePriority+0x32>
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	f04f 32ff 	mov.w	r2, #4294967295
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43da      	mvns	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	401a      	ands	r2, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031a4:	f04f 31ff 	mov.w	r1, #4294967295
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	43d9      	mvns	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b4:	4313      	orrs	r3, r2
         );
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3724      	adds	r7, #36	; 0x24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d4:	d301      	bcc.n	80031da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031d6:	2301      	movs	r3, #1
 80031d8:	e00f      	b.n	80031fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031da:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <SysTick_Config+0x40>)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031e2:	210f      	movs	r1, #15
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295
 80031e8:	f7ff ff8e 	bl	8003108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <SysTick_Config+0x40>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <SysTick_Config+0x40>)
 80031f4:	2207      	movs	r2, #7
 80031f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	e000e010 	.word	0xe000e010

08003208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff ff29 	bl	8003068 <__NVIC_SetPriorityGrouping>
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800321e:	b580      	push	{r7, lr}
 8003220:	b086      	sub	sp, #24
 8003222:	af00      	add	r7, sp, #0
 8003224:	4603      	mov	r3, r0
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003230:	f7ff ff3e 	bl	80030b0 <__NVIC_GetPriorityGrouping>
 8003234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	6978      	ldr	r0, [r7, #20]
 800323c:	f7ff ff8e 	bl	800315c <NVIC_EncodePriority>
 8003240:	4602      	mov	r2, r0
 8003242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff5d 	bl	8003108 <__NVIC_SetPriority>
}
 800324e:	bf00      	nop
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ff31 	bl	80030cc <__NVIC_EnableIRQ>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff ffa2 	bl	80031c4 <SysTick_Config>
 8003280:	4603      	mov	r3, r0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003298:	f7ff feb6 	bl	8003008 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e099      	b.n	80033dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032c8:	e00f      	b.n	80032ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ca:	f7ff fe9d 	bl	8003008 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d908      	bls.n	80032ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2203      	movs	r2, #3
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e078      	b.n	80033dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e8      	bne.n	80032ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4b38      	ldr	r3, [pc, #224]	; (80033e4 <HAL_DMA_Init+0x158>)
 8003304:	4013      	ands	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003316:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003322:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800332e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	2b04      	cmp	r3, #4
 8003342:	d107      	bne.n	8003354 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	4313      	orrs	r3, r2
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f023 0307 	bic.w	r3, r3, #7
 800336a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	2b04      	cmp	r3, #4
 800337c:	d117      	bne.n	80033ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00e      	beq.n	80033ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fb01 	bl	8003998 <DMA_CheckFifoParam>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2240      	movs	r2, #64	; 0x40
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033aa:	2301      	movs	r3, #1
 80033ac:	e016      	b.n	80033dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fab8 	bl	800392c <DMA_CalcBaseAndBitshift>
 80033bc:	4603      	mov	r3, r0
 80033be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	223f      	movs	r2, #63	; 0x3f
 80033c6:	409a      	lsls	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	f010803f 	.word	0xf010803f

080033e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_DMA_Start_IT+0x26>
 800340a:	2302      	movs	r3, #2
 800340c:	e040      	b.n	8003490 <HAL_DMA_Start_IT+0xa8>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b01      	cmp	r3, #1
 8003420:	d12f      	bne.n	8003482 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2202      	movs	r2, #2
 8003426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 fa4a 	bl	80038d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003440:	223f      	movs	r2, #63	; 0x3f
 8003442:	409a      	lsls	r2, r3
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0216 	orr.w	r2, r2, #22
 8003456:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d007      	beq.n	8003470 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0208 	orr.w	r2, r2, #8
 800346e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0201 	orr.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	e005      	b.n	800348e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800348a:	2302      	movs	r3, #2
 800348c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800348e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034a6:	f7ff fdaf 	bl	8003008 <HAL_GetTick>
 80034aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d008      	beq.n	80034ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2280      	movs	r2, #128	; 0x80
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e052      	b.n	8003570 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0216 	bic.w	r2, r2, #22
 80034d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d103      	bne.n	80034fa <HAL_DMA_Abort+0x62>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0208 	bic.w	r2, r2, #8
 8003508:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0201 	bic.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800351a:	e013      	b.n	8003544 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800351c:	f7ff fd74 	bl	8003008 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b05      	cmp	r3, #5
 8003528:	d90c      	bls.n	8003544 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2203      	movs	r2, #3
 8003534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e015      	b.n	8003570 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e4      	bne.n	800351c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	223f      	movs	r2, #63	; 0x3f
 8003558:	409a      	lsls	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d004      	beq.n	8003596 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2280      	movs	r2, #128	; 0x80
 8003590:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e00c      	b.n	80035b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2205      	movs	r2, #5
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0201 	bic.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035c8:	4b8e      	ldr	r3, [pc, #568]	; (8003804 <HAL_DMA_IRQHandler+0x248>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a8e      	ldr	r2, [pc, #568]	; (8003808 <HAL_DMA_IRQHandler+0x24c>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	0a9b      	lsrs	r3, r3, #10
 80035d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	2208      	movs	r2, #8
 80035e8:	409a      	lsls	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d01a      	beq.n	8003628 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d013      	beq.n	8003628 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0204 	bic.w	r2, r2, #4
 800360e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003614:	2208      	movs	r2, #8
 8003616:	409a      	lsls	r2, r3
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003620:	f043 0201 	orr.w	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	2201      	movs	r2, #1
 800362e:	409a      	lsls	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d012      	beq.n	800365e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00b      	beq.n	800365e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364a:	2201      	movs	r2, #1
 800364c:	409a      	lsls	r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003656:	f043 0202 	orr.w	r2, r3, #2
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003662:	2204      	movs	r2, #4
 8003664:	409a      	lsls	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d012      	beq.n	8003694 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003680:	2204      	movs	r2, #4
 8003682:	409a      	lsls	r2, r3
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	f043 0204 	orr.w	r2, r3, #4
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	2210      	movs	r2, #16
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d043      	beq.n	800372c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d03c      	beq.n	800372c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b6:	2210      	movs	r2, #16
 80036b8:	409a      	lsls	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d018      	beq.n	80036fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d108      	bne.n	80036ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d024      	beq.n	800372c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	4798      	blx	r3
 80036ea:	e01f      	b.n	800372c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01b      	beq.n	800372c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
 80036fc:	e016      	b.n	800372c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0208 	bic.w	r2, r2, #8
 800371a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003730:	2220      	movs	r2, #32
 8003732:	409a      	lsls	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4013      	ands	r3, r2
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 808f 	beq.w	800385c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8087 	beq.w	800385c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003752:	2220      	movs	r2, #32
 8003754:	409a      	lsls	r2, r3
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b05      	cmp	r3, #5
 8003764:	d136      	bne.n	80037d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0216 	bic.w	r2, r2, #22
 8003774:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003784:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <HAL_DMA_IRQHandler+0x1da>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0208 	bic.w	r2, r2, #8
 80037a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	223f      	movs	r2, #63	; 0x3f
 80037ac:	409a      	lsls	r2, r3
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d07e      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
        }
        return;
 80037d2:	e079      	b.n	80038c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d01d      	beq.n	800381e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10d      	bne.n	800380c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d031      	beq.n	800385c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
 8003800:	e02c      	b.n	800385c <HAL_DMA_IRQHandler+0x2a0>
 8003802:	bf00      	nop
 8003804:	20000010 	.word	0x20000010
 8003808:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003810:	2b00      	cmp	r3, #0
 8003812:	d023      	beq.n	800385c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3
 800381c:	e01e      	b.n	800385c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10f      	bne.n	800384c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0210 	bic.w	r2, r2, #16
 800383a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	2b00      	cmp	r3, #0
 8003862:	d032      	beq.n	80038ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d022      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2205      	movs	r2, #5
 8003874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0201 	bic.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	3301      	adds	r3, #1
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	429a      	cmp	r2, r3
 8003892:	d307      	bcc.n	80038a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f2      	bne.n	8003888 <HAL_DMA_IRQHandler+0x2cc>
 80038a2:	e000      	b.n	80038a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
 80038c6:	e000      	b.n	80038ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80038c8:	bf00      	nop
    }
  }
}
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	d108      	bne.n	8003910 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800390e:	e007      	b.n	8003920 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	60da      	str	r2, [r3, #12]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	3b10      	subs	r3, #16
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <DMA_CalcBaseAndBitshift+0x64>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003946:	4a13      	ldr	r2, [pc, #76]	; (8003994 <DMA_CalcBaseAndBitshift+0x68>)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b03      	cmp	r3, #3
 8003958:	d909      	bls.n	800396e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003962:	f023 0303 	bic.w	r3, r3, #3
 8003966:	1d1a      	adds	r2, r3, #4
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	659a      	str	r2, [r3, #88]	; 0x58
 800396c:	e007      	b.n	800397e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003976:	f023 0303 	bic.w	r3, r3, #3
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	aaaaaaab 	.word	0xaaaaaaab
 8003994:	0800be5c 	.word	0x0800be5c

08003998 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d11f      	bne.n	80039f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d856      	bhi.n	8003a66 <DMA_CheckFifoParam+0xce>
 80039b8:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <DMA_CheckFifoParam+0x28>)
 80039ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039be:	bf00      	nop
 80039c0:	080039d1 	.word	0x080039d1
 80039c4:	080039e3 	.word	0x080039e3
 80039c8:	080039d1 	.word	0x080039d1
 80039cc:	08003a67 	.word	0x08003a67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d046      	beq.n	8003a6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e0:	e043      	b.n	8003a6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039ea:	d140      	bne.n	8003a6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f0:	e03d      	b.n	8003a6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039fa:	d121      	bne.n	8003a40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d837      	bhi.n	8003a72 <DMA_CheckFifoParam+0xda>
 8003a02:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <DMA_CheckFifoParam+0x70>)
 8003a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a08:	08003a19 	.word	0x08003a19
 8003a0c:	08003a1f 	.word	0x08003a1f
 8003a10:	08003a19 	.word	0x08003a19
 8003a14:	08003a31 	.word	0x08003a31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a1c:	e030      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d025      	beq.n	8003a76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a2e:	e022      	b.n	8003a76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a38:	d11f      	bne.n	8003a7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a3e:	e01c      	b.n	8003a7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d903      	bls.n	8003a4e <DMA_CheckFifoParam+0xb6>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d003      	beq.n	8003a54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a4c:	e018      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
      break;
 8003a52:	e015      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00e      	beq.n	8003a7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
      break;
 8003a64:	e00b      	b.n	8003a7e <DMA_CheckFifoParam+0xe6>
      break;
 8003a66:	bf00      	nop
 8003a68:	e00a      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
      break;
 8003a6a:	bf00      	nop
 8003a6c:	e008      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
      break;
 8003a6e:	bf00      	nop
 8003a70:	e006      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
      break;
 8003a72:	bf00      	nop
 8003a74:	e004      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
      break;
 8003a76:	bf00      	nop
 8003a78:	e002      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <DMA_CheckFifoParam+0xe8>
      break;
 8003a7e:	bf00      	nop
    }
  } 
  
  return status; 
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop

08003a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b089      	sub	sp, #36	; 0x24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	e159      	b.n	8003d60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003aac:	2201      	movs	r2, #1
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4013      	ands	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	f040 8148 	bne.w	8003d5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d005      	beq.n	8003ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d130      	bne.n	8003b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	2203      	movs	r2, #3
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b18:	2201      	movs	r2, #1
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f003 0201 	and.w	r2, r3, #1
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d017      	beq.n	8003b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d123      	bne.n	8003bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	08da      	lsrs	r2, r3, #3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3208      	adds	r2, #8
 8003b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	220f      	movs	r2, #15
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	08da      	lsrs	r2, r3, #3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3208      	adds	r2, #8
 8003bce:	69b9      	ldr	r1, [r7, #24]
 8003bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	2203      	movs	r2, #3
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	4013      	ands	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 0203 	and.w	r2, r3, #3
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80a2 	beq.w	8003d5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	4b57      	ldr	r3, [pc, #348]	; (8003d78 <HAL_GPIO_Init+0x2e8>)
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	4a56      	ldr	r2, [pc, #344]	; (8003d78 <HAL_GPIO_Init+0x2e8>)
 8003c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c24:	6453      	str	r3, [r2, #68]	; 0x44
 8003c26:	4b54      	ldr	r3, [pc, #336]	; (8003d78 <HAL_GPIO_Init+0x2e8>)
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c32:	4a52      	ldr	r2, [pc, #328]	; (8003d7c <HAL_GPIO_Init+0x2ec>)
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	089b      	lsrs	r3, r3, #2
 8003c38:	3302      	adds	r3, #2
 8003c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	220f      	movs	r2, #15
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4013      	ands	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a49      	ldr	r2, [pc, #292]	; (8003d80 <HAL_GPIO_Init+0x2f0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d019      	beq.n	8003c92 <HAL_GPIO_Init+0x202>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a48      	ldr	r2, [pc, #288]	; (8003d84 <HAL_GPIO_Init+0x2f4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d013      	beq.n	8003c8e <HAL_GPIO_Init+0x1fe>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a47      	ldr	r2, [pc, #284]	; (8003d88 <HAL_GPIO_Init+0x2f8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00d      	beq.n	8003c8a <HAL_GPIO_Init+0x1fa>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a46      	ldr	r2, [pc, #280]	; (8003d8c <HAL_GPIO_Init+0x2fc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d007      	beq.n	8003c86 <HAL_GPIO_Init+0x1f6>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a45      	ldr	r2, [pc, #276]	; (8003d90 <HAL_GPIO_Init+0x300>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d101      	bne.n	8003c82 <HAL_GPIO_Init+0x1f2>
 8003c7e:	2304      	movs	r3, #4
 8003c80:	e008      	b.n	8003c94 <HAL_GPIO_Init+0x204>
 8003c82:	2307      	movs	r3, #7
 8003c84:	e006      	b.n	8003c94 <HAL_GPIO_Init+0x204>
 8003c86:	2303      	movs	r3, #3
 8003c88:	e004      	b.n	8003c94 <HAL_GPIO_Init+0x204>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e002      	b.n	8003c94 <HAL_GPIO_Init+0x204>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_GPIO_Init+0x204>
 8003c92:	2300      	movs	r3, #0
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	f002 0203 	and.w	r2, r2, #3
 8003c9a:	0092      	lsls	r2, r2, #2
 8003c9c:	4093      	lsls	r3, r2
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ca4:	4935      	ldr	r1, [pc, #212]	; (8003d7c <HAL_GPIO_Init+0x2ec>)
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	089b      	lsrs	r3, r3, #2
 8003caa:	3302      	adds	r3, #2
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cb2:	4b38      	ldr	r3, [pc, #224]	; (8003d94 <HAL_GPIO_Init+0x304>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cd6:	4a2f      	ldr	r2, [pc, #188]	; (8003d94 <HAL_GPIO_Init+0x304>)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cdc:	4b2d      	ldr	r3, [pc, #180]	; (8003d94 <HAL_GPIO_Init+0x304>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d00:	4a24      	ldr	r2, [pc, #144]	; (8003d94 <HAL_GPIO_Init+0x304>)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d06:	4b23      	ldr	r3, [pc, #140]	; (8003d94 <HAL_GPIO_Init+0x304>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d2a:	4a1a      	ldr	r2, [pc, #104]	; (8003d94 <HAL_GPIO_Init+0x304>)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d30:	4b18      	ldr	r3, [pc, #96]	; (8003d94 <HAL_GPIO_Init+0x304>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d54:	4a0f      	ldr	r2, [pc, #60]	; (8003d94 <HAL_GPIO_Init+0x304>)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	61fb      	str	r3, [r7, #28]
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b0f      	cmp	r3, #15
 8003d64:	f67f aea2 	bls.w	8003aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	3724      	adds	r7, #36	; 0x24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40013800 	.word	0x40013800
 8003d80:	40020000 	.word	0x40020000
 8003d84:	40020400 	.word	0x40020400
 8003d88:	40020800 	.word	0x40020800
 8003d8c:	40020c00 	.word	0x40020c00
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40013c00 	.word	0x40013c00

08003d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	807b      	strh	r3, [r7, #2]
 8003da4:	4613      	mov	r3, r2
 8003da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003da8:	787b      	ldrb	r3, [r7, #1]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dae:	887a      	ldrh	r2, [r7, #2]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003db4:	e003      	b.n	8003dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003db6:	887b      	ldrh	r3, [r7, #2]
 8003db8:	041a      	lsls	r2, r3, #16
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	619a      	str	r2, [r3, #24]
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ddc:	887a      	ldrh	r2, [r7, #2]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4013      	ands	r3, r2
 8003de2:	041a      	lsls	r2, r3, #16
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	43d9      	mvns	r1, r3
 8003de8:	887b      	ldrh	r3, [r7, #2]
 8003dea:	400b      	ands	r3, r1
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	619a      	str	r2, [r3, #24]
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003dfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e00:	b08f      	sub	sp, #60	; 0x3c
 8003e02:	af0a      	add	r7, sp, #40	; 0x28
 8003e04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e054      	b.n	8003eba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f007 fa54 	bl	800b2d8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2203      	movs	r2, #3
 8003e34:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d102      	bne.n	8003e4a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f004 fa82 	bl	8008358 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	687e      	ldr	r6, [r7, #4]
 8003e5c:	466d      	mov	r5, sp
 8003e5e:	f106 0410 	add.w	r4, r6, #16
 8003e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e72:	1d33      	adds	r3, r6, #4
 8003e74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e76:	6838      	ldr	r0, [r7, #0]
 8003e78:	f004 f9fc 	bl	8008274 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2101      	movs	r1, #1
 8003e82:	4618      	mov	r0, r3
 8003e84:	f004 fa79 	bl	800837a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	687e      	ldr	r6, [r7, #4]
 8003e90:	466d      	mov	r5, sp
 8003e92:	f106 0410 	add.w	r4, r6, #16
 8003e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ea2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ea6:	1d33      	adds	r3, r6, #4
 8003ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eaa:	6838      	ldr	r0, [r7, #0]
 8003eac:	f004 fc02 	bl	80086b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ec2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003ec2:	b590      	push	{r4, r7, lr}
 8003ec4:	b089      	sub	sp, #36	; 0x24
 8003ec6:	af04      	add	r7, sp, #16
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	4608      	mov	r0, r1
 8003ecc:	4611      	mov	r1, r2
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	70fb      	strb	r3, [r7, #3]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	70bb      	strb	r3, [r7, #2]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_HCD_HC_Init+0x28>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e076      	b.n	8003fd8 <HAL_HCD_HC_Init+0x116>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	212c      	movs	r1, #44	; 0x2c
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	4413      	add	r3, r2
 8003efe:	333d      	adds	r3, #61	; 0x3d
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	212c      	movs	r1, #44	; 0x2c
 8003f0a:	fb01 f303 	mul.w	r3, r1, r3
 8003f0e:	4413      	add	r3, r2
 8003f10:	3338      	adds	r3, #56	; 0x38
 8003f12:	787a      	ldrb	r2, [r7, #1]
 8003f14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	212c      	movs	r1, #44	; 0x2c
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	4413      	add	r3, r2
 8003f22:	3340      	adds	r3, #64	; 0x40
 8003f24:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003f26:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	212c      	movs	r1, #44	; 0x2c
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	4413      	add	r3, r2
 8003f34:	3339      	adds	r3, #57	; 0x39
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	212c      	movs	r1, #44	; 0x2c
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	333f      	adds	r3, #63	; 0x3f
 8003f48:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003f4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	78ba      	ldrb	r2, [r7, #2]
 8003f52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f56:	b2d0      	uxtb	r0, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	212c      	movs	r1, #44	; 0x2c
 8003f5c:	fb01 f303 	mul.w	r3, r1, r3
 8003f60:	4413      	add	r3, r2
 8003f62:	333a      	adds	r3, #58	; 0x3a
 8003f64:	4602      	mov	r2, r0
 8003f66:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003f68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	da09      	bge.n	8003f84 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	212c      	movs	r1, #44	; 0x2c
 8003f76:	fb01 f303 	mul.w	r3, r1, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	333b      	adds	r3, #59	; 0x3b
 8003f7e:	2201      	movs	r2, #1
 8003f80:	701a      	strb	r2, [r3, #0]
 8003f82:	e008      	b.n	8003f96 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	212c      	movs	r1, #44	; 0x2c
 8003f8a:	fb01 f303 	mul.w	r3, r1, r3
 8003f8e:	4413      	add	r3, r2
 8003f90:	333b      	adds	r3, #59	; 0x3b
 8003f92:	2200      	movs	r2, #0
 8003f94:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	212c      	movs	r1, #44	; 0x2c
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	333c      	adds	r3, #60	; 0x3c
 8003fa4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003fa8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	787c      	ldrb	r4, [r7, #1]
 8003fb0:	78ba      	ldrb	r2, [r7, #2]
 8003fb2:	78f9      	ldrb	r1, [r7, #3]
 8003fb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003fb6:	9302      	str	r3, [sp, #8]
 8003fb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	4623      	mov	r3, r4
 8003fc6:	f004 fcfb 	bl	80089c0 <USB_HC_Init>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd90      	pop	{r4, r7, pc}

08003fe0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_HCD_HC_Halt+0x1e>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e00f      	b.n	800401e <HAL_HCD_HC_Halt+0x3e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f004 ff4b 	bl	8008eaa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	4608      	mov	r0, r1
 8004032:	4611      	mov	r1, r2
 8004034:	461a      	mov	r2, r3
 8004036:	4603      	mov	r3, r0
 8004038:	70fb      	strb	r3, [r7, #3]
 800403a:	460b      	mov	r3, r1
 800403c:	70bb      	strb	r3, [r7, #2]
 800403e:	4613      	mov	r3, r2
 8004040:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	212c      	movs	r1, #44	; 0x2c
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	333b      	adds	r3, #59	; 0x3b
 8004050:	78ba      	ldrb	r2, [r7, #2]
 8004052:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	212c      	movs	r1, #44	; 0x2c
 800405a:	fb01 f303 	mul.w	r3, r1, r3
 800405e:	4413      	add	r3, r2
 8004060:	333f      	adds	r3, #63	; 0x3f
 8004062:	787a      	ldrb	r2, [r7, #1]
 8004064:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004066:	7c3b      	ldrb	r3, [r7, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d112      	bne.n	8004092 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	212c      	movs	r1, #44	; 0x2c
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	4413      	add	r3, r2
 8004078:	3342      	adds	r3, #66	; 0x42
 800407a:	2203      	movs	r2, #3
 800407c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800407e:	78fb      	ldrb	r3, [r7, #3]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	212c      	movs	r1, #44	; 0x2c
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	333d      	adds	r3, #61	; 0x3d
 800408c:	7f3a      	ldrb	r2, [r7, #28]
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	e008      	b.n	80040a4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	212c      	movs	r1, #44	; 0x2c
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	4413      	add	r3, r2
 800409e:	3342      	adds	r3, #66	; 0x42
 80040a0:	2202      	movs	r2, #2
 80040a2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80040a4:	787b      	ldrb	r3, [r7, #1]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	f200 80c6 	bhi.w	8004238 <HAL_HCD_HC_SubmitRequest+0x210>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	080040c5 	.word	0x080040c5
 80040b8:	08004225 	.word	0x08004225
 80040bc:	08004129 	.word	0x08004129
 80040c0:	080041a7 	.word	0x080041a7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80040c4:	7c3b      	ldrb	r3, [r7, #16]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	f040 80b8 	bne.w	800423c <HAL_HCD_HC_SubmitRequest+0x214>
 80040cc:	78bb      	ldrb	r3, [r7, #2]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f040 80b4 	bne.w	800423c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80040d4:	8b3b      	ldrh	r3, [r7, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d108      	bne.n	80040ec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	212c      	movs	r1, #44	; 0x2c
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	3355      	adds	r3, #85	; 0x55
 80040e8:	2201      	movs	r2, #1
 80040ea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	212c      	movs	r1, #44	; 0x2c
 80040f2:	fb01 f303 	mul.w	r3, r1, r3
 80040f6:	4413      	add	r3, r2
 80040f8:	3355      	adds	r3, #85	; 0x55
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d109      	bne.n	8004114 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	212c      	movs	r1, #44	; 0x2c
 8004106:	fb01 f303 	mul.w	r3, r1, r3
 800410a:	4413      	add	r3, r2
 800410c:	3342      	adds	r3, #66	; 0x42
 800410e:	2200      	movs	r2, #0
 8004110:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004112:	e093      	b.n	800423c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	212c      	movs	r1, #44	; 0x2c
 800411a:	fb01 f303 	mul.w	r3, r1, r3
 800411e:	4413      	add	r3, r2
 8004120:	3342      	adds	r3, #66	; 0x42
 8004122:	2202      	movs	r2, #2
 8004124:	701a      	strb	r2, [r3, #0]
      break;
 8004126:	e089      	b.n	800423c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004128:	78bb      	ldrb	r3, [r7, #2]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d11d      	bne.n	800416a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	212c      	movs	r1, #44	; 0x2c
 8004134:	fb01 f303 	mul.w	r3, r1, r3
 8004138:	4413      	add	r3, r2
 800413a:	3355      	adds	r3, #85	; 0x55
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004142:	78fb      	ldrb	r3, [r7, #3]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	212c      	movs	r1, #44	; 0x2c
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	3342      	adds	r3, #66	; 0x42
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004154:	e073      	b.n	800423e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	212c      	movs	r1, #44	; 0x2c
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	3342      	adds	r3, #66	; 0x42
 8004164:	2202      	movs	r2, #2
 8004166:	701a      	strb	r2, [r3, #0]
      break;
 8004168:	e069      	b.n	800423e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	212c      	movs	r1, #44	; 0x2c
 8004170:	fb01 f303 	mul.w	r3, r1, r3
 8004174:	4413      	add	r3, r2
 8004176:	3354      	adds	r3, #84	; 0x54
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800417e:	78fb      	ldrb	r3, [r7, #3]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	212c      	movs	r1, #44	; 0x2c
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	4413      	add	r3, r2
 800418a:	3342      	adds	r3, #66	; 0x42
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
      break;
 8004190:	e055      	b.n	800423e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	212c      	movs	r1, #44	; 0x2c
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	4413      	add	r3, r2
 800419e:	3342      	adds	r3, #66	; 0x42
 80041a0:	2202      	movs	r2, #2
 80041a2:	701a      	strb	r2, [r3, #0]
      break;
 80041a4:	e04b      	b.n	800423e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80041a6:	78bb      	ldrb	r3, [r7, #2]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d11d      	bne.n	80041e8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	212c      	movs	r1, #44	; 0x2c
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	3355      	adds	r3, #85	; 0x55
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	212c      	movs	r1, #44	; 0x2c
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	3342      	adds	r3, #66	; 0x42
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80041d2:	e034      	b.n	800423e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	212c      	movs	r1, #44	; 0x2c
 80041da:	fb01 f303 	mul.w	r3, r1, r3
 80041de:	4413      	add	r3, r2
 80041e0:	3342      	adds	r3, #66	; 0x42
 80041e2:	2202      	movs	r2, #2
 80041e4:	701a      	strb	r2, [r3, #0]
      break;
 80041e6:	e02a      	b.n	800423e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	212c      	movs	r1, #44	; 0x2c
 80041ee:	fb01 f303 	mul.w	r3, r1, r3
 80041f2:	4413      	add	r3, r2
 80041f4:	3354      	adds	r3, #84	; 0x54
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d109      	bne.n	8004210 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	212c      	movs	r1, #44	; 0x2c
 8004202:	fb01 f303 	mul.w	r3, r1, r3
 8004206:	4413      	add	r3, r2
 8004208:	3342      	adds	r3, #66	; 0x42
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
      break;
 800420e:	e016      	b.n	800423e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	212c      	movs	r1, #44	; 0x2c
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	4413      	add	r3, r2
 800421c:	3342      	adds	r3, #66	; 0x42
 800421e:	2202      	movs	r2, #2
 8004220:	701a      	strb	r2, [r3, #0]
      break;
 8004222:	e00c      	b.n	800423e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	212c      	movs	r1, #44	; 0x2c
 800422a:	fb01 f303 	mul.w	r3, r1, r3
 800422e:	4413      	add	r3, r2
 8004230:	3342      	adds	r3, #66	; 0x42
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
      break;
 8004236:	e002      	b.n	800423e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004238:	bf00      	nop
 800423a:	e000      	b.n	800423e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800423c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	212c      	movs	r1, #44	; 0x2c
 8004244:	fb01 f303 	mul.w	r3, r1, r3
 8004248:	4413      	add	r3, r2
 800424a:	3344      	adds	r3, #68	; 0x44
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	8b3a      	ldrh	r2, [r7, #24]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	202c      	movs	r0, #44	; 0x2c
 8004258:	fb00 f303 	mul.w	r3, r0, r3
 800425c:	440b      	add	r3, r1
 800425e:	334c      	adds	r3, #76	; 0x4c
 8004260:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	212c      	movs	r1, #44	; 0x2c
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	4413      	add	r3, r2
 800426e:	3360      	adds	r3, #96	; 0x60
 8004270:	2200      	movs	r2, #0
 8004272:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004274:	78fb      	ldrb	r3, [r7, #3]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	212c      	movs	r1, #44	; 0x2c
 800427a:	fb01 f303 	mul.w	r3, r1, r3
 800427e:	4413      	add	r3, r2
 8004280:	3350      	adds	r3, #80	; 0x50
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	212c      	movs	r1, #44	; 0x2c
 800428c:	fb01 f303 	mul.w	r3, r1, r3
 8004290:	4413      	add	r3, r2
 8004292:	3339      	adds	r3, #57	; 0x39
 8004294:	78fa      	ldrb	r2, [r7, #3]
 8004296:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	212c      	movs	r1, #44	; 0x2c
 800429e:	fb01 f303 	mul.w	r3, r1, r3
 80042a2:	4413      	add	r3, r2
 80042a4:	3361      	adds	r3, #97	; 0x61
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	222c      	movs	r2, #44	; 0x2c
 80042b2:	fb02 f303 	mul.w	r3, r2, r3
 80042b6:	3338      	adds	r3, #56	; 0x38
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	18d1      	adds	r1, r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	f004 fc9e 	bl	8008c04 <USB_HC_StartXfer>
 80042c8:	4603      	mov	r3, r0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop

080042d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f004 f99f 	bl	800862e <USB_GetMode>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	f040 80f6 	bne.w	80044e4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f004 f983 	bl	8008608 <USB_ReadInterrupts>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80ec 	beq.w	80044e2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f004 f97a 	bl	8008608 <USB_ReadInterrupts>
 8004314:	4603      	mov	r3, r0
 8004316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800431a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800431e:	d104      	bne.n	800432a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004328:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f004 f96a 	bl	8008608 <USB_ReadInterrupts>
 8004334:	4603      	mov	r3, r0
 8004336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800433a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800433e:	d104      	bne.n	800434a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004348:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f004 f95a 	bl	8008608 <USB_ReadInterrupts>
 8004354:	4603      	mov	r3, r0
 8004356:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800435a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800435e:	d104      	bne.n	800436a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004368:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f004 f94a 	bl	8008608 <USB_ReadInterrupts>
 8004374:	4603      	mov	r3, r0
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b02      	cmp	r3, #2
 800437c:	d103      	bne.n	8004386 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2202      	movs	r2, #2
 8004384:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f004 f93c 	bl	8008608 <USB_ReadInterrupts>
 8004390:	4603      	mov	r3, r0
 8004392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800439a:	d11c      	bne.n	80043d6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80043a4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10f      	bne.n	80043d6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80043b6:	2110      	movs	r1, #16
 80043b8:	6938      	ldr	r0, [r7, #16]
 80043ba:	f004 f82b 	bl	8008414 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80043be:	6938      	ldr	r0, [r7, #16]
 80043c0:	f004 f85c 	bl	800847c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2101      	movs	r1, #1
 80043ca:	4618      	mov	r0, r3
 80043cc:	f004 fa32 	bl	8008834 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f006 ffff 	bl	800b3d4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f004 f914 	bl	8008608 <USB_ReadInterrupts>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043ea:	d102      	bne.n	80043f2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f001 f89e 	bl	800552e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f004 f906 	bl	8008608 <USB_ReadInterrupts>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b08      	cmp	r3, #8
 8004404:	d106      	bne.n	8004414 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f006 ffc8 	bl	800b39c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2208      	movs	r2, #8
 8004412:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f004 f8f5 	bl	8008608 <USB_ReadInterrupts>
 800441e:	4603      	mov	r3, r0
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b10      	cmp	r3, #16
 8004426:	d101      	bne.n	800442c <HAL_HCD_IRQHandler+0x158>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <HAL_HCD_IRQHandler+0x15a>
 800442c:	2300      	movs	r3, #0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d012      	beq.n	8004458 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699a      	ldr	r2, [r3, #24]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0210 	bic.w	r2, r2, #16
 8004440:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 ffa1 	bl	800538a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699a      	ldr	r2, [r3, #24]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0210 	orr.w	r2, r2, #16
 8004456:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f004 f8d3 	bl	8008608 <USB_ReadInterrupts>
 8004462:	4603      	mov	r3, r0
 8004464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004468:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800446c:	d13a      	bne.n	80044e4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f004 fd08 	bl	8008e88 <USB_HC_ReadInterrupt>
 8004478:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	e025      	b.n	80044cc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d018      	beq.n	80044c6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044aa:	d106      	bne.n	80044ba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	4619      	mov	r1, r3
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f8ab 	bl	800460e <HCD_HC_IN_IRQHandler>
 80044b8:	e005      	b.n	80044c6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	4619      	mov	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fbf9 	bl	8004cb8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	3301      	adds	r3, #1
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d3d4      	bcc.n	8004480 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044de:	615a      	str	r2, [r3, #20]
 80044e0:	e000      	b.n	80044e4 <HAL_HCD_IRQHandler+0x210>
      return;
 80044e2:	bf00      	nop
    }
  }
}
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_HCD_Start+0x16>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e013      	b.n	8004528 <HAL_HCD_Start+0x3e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2101      	movs	r1, #1
 800450e:	4618      	mov	r0, r3
 8004510:	f004 f9f4 	bl	80088fc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f003 ff0c 	bl	8008336 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_HCD_Stop+0x16>
 8004542:	2302      	movs	r3, #2
 8004544:	e00d      	b.n	8004562 <HAL_HCD_Stop+0x32>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f004 fde2 	bl	800911c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f004 f996 	bl	80088a8 <USB_ResetPort>
 800457c:	4603      	mov	r3, r0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	460b      	mov	r3, r1
 8004590:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	212c      	movs	r1, #44	; 0x2c
 8004598:	fb01 f303 	mul.w	r3, r1, r3
 800459c:	4413      	add	r3, r2
 800459e:	3360      	adds	r3, #96	; 0x60
 80045a0:	781b      	ldrb	r3, [r3, #0]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	212c      	movs	r1, #44	; 0x2c
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	4413      	add	r3, r2
 80045c6:	3350      	adds	r3, #80	; 0x50
 80045c8:	681b      	ldr	r3, [r3, #0]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f004 f9da 	bl	800899c <USB_GetCurrentFrame>
 80045e8:	4603      	mov	r3, r0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f004 f9b5 	bl	800896e <USB_GetHostSpeed>
 8004604:	4603      	mov	r3, r0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b086      	sub	sp, #24
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4413      	add	r3, r2
 8004630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b04      	cmp	r3, #4
 800463c:	d11a      	bne.n	8004674 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4413      	add	r3, r2
 8004646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464a:	461a      	mov	r2, r3
 800464c:	2304      	movs	r3, #4
 800464e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	212c      	movs	r1, #44	; 0x2c
 8004656:	fb01 f303 	mul.w	r3, r1, r3
 800465a:	4413      	add	r3, r2
 800465c:	3361      	adds	r3, #97	; 0x61
 800465e:	2206      	movs	r2, #6
 8004660:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	4611      	mov	r1, r2
 800466c:	4618      	mov	r0, r3
 800466e:	f004 fc1c 	bl	8008eaa <USB_HC_Halt>
 8004672:	e0af      	b.n	80047d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4413      	add	r3, r2
 800467c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468a:	d11b      	bne.n	80046c4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4413      	add	r3, r2
 8004694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004698:	461a      	mov	r2, r3
 800469a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800469e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	212c      	movs	r1, #44	; 0x2c
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	4413      	add	r3, r2
 80046ac:	3361      	adds	r3, #97	; 0x61
 80046ae:	2207      	movs	r2, #7
 80046b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	4611      	mov	r1, r2
 80046bc:	4618      	mov	r0, r3
 80046be:	f004 fbf4 	bl	8008eaa <USB_HC_Halt>
 80046c2:	e087      	b.n	80047d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	d109      	bne.n	80046ee <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e6:	461a      	mov	r2, r3
 80046e8:	2320      	movs	r3, #32
 80046ea:	6093      	str	r3, [r2, #8]
 80046ec:	e072      	b.n	80047d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b08      	cmp	r3, #8
 8004702:	d11a      	bne.n	800473a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	4413      	add	r3, r2
 800470c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004710:	461a      	mov	r2, r3
 8004712:	2308      	movs	r3, #8
 8004714:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	212c      	movs	r1, #44	; 0x2c
 800471c:	fb01 f303 	mul.w	r3, r1, r3
 8004720:	4413      	add	r3, r2
 8004722:	3361      	adds	r3, #97	; 0x61
 8004724:	2205      	movs	r2, #5
 8004726:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	4611      	mov	r1, r2
 8004732:	4618      	mov	r0, r3
 8004734:	f004 fbb9 	bl	8008eaa <USB_HC_Halt>
 8004738:	e04c      	b.n	80047d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4413      	add	r3, r2
 8004742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004750:	d11b      	bne.n	800478a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4413      	add	r3, r2
 800475a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475e:	461a      	mov	r2, r3
 8004760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004764:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	212c      	movs	r1, #44	; 0x2c
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	4413      	add	r3, r2
 8004772:	3361      	adds	r3, #97	; 0x61
 8004774:	2208      	movs	r2, #8
 8004776:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f004 fb91 	bl	8008eaa <USB_HC_Halt>
 8004788:	e024      	b.n	80047d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4413      	add	r3, r2
 8004792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479c:	2b80      	cmp	r3, #128	; 0x80
 800479e:	d119      	bne.n	80047d4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ac:	461a      	mov	r2, r3
 80047ae:	2380      	movs	r3, #128	; 0x80
 80047b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	212c      	movs	r1, #44	; 0x2c
 80047b8:	fb01 f303 	mul.w	r3, r1, r3
 80047bc:	4413      	add	r3, r2
 80047be:	3361      	adds	r3, #97	; 0x61
 80047c0:	2206      	movs	r2, #6
 80047c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	4611      	mov	r1, r2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f004 fb6b 	bl	8008eaa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ea:	d112      	bne.n	8004812 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	4611      	mov	r1, r2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f004 fb57 	bl	8008eaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	4413      	add	r3, r2
 8004804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004808:	461a      	mov	r2, r3
 800480a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800480e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004810:	e24e      	b.n	8004cb0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	4413      	add	r3, r2
 800481a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b01      	cmp	r3, #1
 8004826:	f040 80df 	bne.w	80049e8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d019      	beq.n	8004866 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	212c      	movs	r1, #44	; 0x2c
 8004838:	fb01 f303 	mul.w	r3, r1, r3
 800483c:	4413      	add	r3, r2
 800483e:	3348      	adds	r3, #72	; 0x48
 8004840:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	0159      	lsls	r1, r3, #5
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	440b      	add	r3, r1
 800484a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004854:	1ad2      	subs	r2, r2, r3
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	202c      	movs	r0, #44	; 0x2c
 800485c:	fb00 f303 	mul.w	r3, r0, r3
 8004860:	440b      	add	r3, r1
 8004862:	3350      	adds	r3, #80	; 0x50
 8004864:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	212c      	movs	r1, #44	; 0x2c
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	4413      	add	r3, r2
 8004872:	3361      	adds	r3, #97	; 0x61
 8004874:	2201      	movs	r2, #1
 8004876:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	212c      	movs	r1, #44	; 0x2c
 800487e:	fb01 f303 	mul.w	r3, r1, r3
 8004882:	4413      	add	r3, r2
 8004884:	335c      	adds	r3, #92	; 0x5c
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	4413      	add	r3, r2
 8004892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004896:	461a      	mov	r2, r3
 8004898:	2301      	movs	r3, #1
 800489a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	212c      	movs	r1, #44	; 0x2c
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	333f      	adds	r3, #63	; 0x3f
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d009      	beq.n	80048c4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	212c      	movs	r1, #44	; 0x2c
 80048b6:	fb01 f303 	mul.w	r3, r1, r3
 80048ba:	4413      	add	r3, r2
 80048bc:	333f      	adds	r3, #63	; 0x3f
 80048be:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d111      	bne.n	80048e8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	4611      	mov	r1, r2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f004 faeb 	bl	8008eaa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e0:	461a      	mov	r2, r3
 80048e2:	2310      	movs	r3, #16
 80048e4:	6093      	str	r3, [r2, #8]
 80048e6:	e03a      	b.n	800495e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	212c      	movs	r1, #44	; 0x2c
 80048ee:	fb01 f303 	mul.w	r3, r1, r3
 80048f2:	4413      	add	r3, r2
 80048f4:	333f      	adds	r3, #63	; 0x3f
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d009      	beq.n	8004910 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	212c      	movs	r1, #44	; 0x2c
 8004902:	fb01 f303 	mul.w	r3, r1, r3
 8004906:	4413      	add	r3, r2
 8004908:	333f      	adds	r3, #63	; 0x3f
 800490a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800490c:	2b01      	cmp	r3, #1
 800490e:	d126      	bne.n	800495e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4413      	add	r3, r2
 8004918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	0151      	lsls	r1, r2, #5
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	440a      	add	r2, r1
 8004926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800492a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800492e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	212c      	movs	r1, #44	; 0x2c
 8004936:	fb01 f303 	mul.w	r3, r1, r3
 800493a:	4413      	add	r3, r2
 800493c:	3360      	adds	r3, #96	; 0x60
 800493e:	2201      	movs	r2, #1
 8004940:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	b2d9      	uxtb	r1, r3
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	202c      	movs	r0, #44	; 0x2c
 800494c:	fb00 f303 	mul.w	r3, r0, r3
 8004950:	4413      	add	r3, r2
 8004952:	3360      	adds	r3, #96	; 0x60
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f006 fd49 	bl	800b3f0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d12b      	bne.n	80049be <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	212c      	movs	r1, #44	; 0x2c
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	4413      	add	r3, r2
 8004972:	3348      	adds	r3, #72	; 0x48
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	202c      	movs	r0, #44	; 0x2c
 800497c:	fb00 f202 	mul.w	r2, r0, r2
 8004980:	440a      	add	r2, r1
 8004982:	3240      	adds	r2, #64	; 0x40
 8004984:	8812      	ldrh	r2, [r2, #0]
 8004986:	fbb3 f3f2 	udiv	r3, r3, r2
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 818e 	beq.w	8004cb0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	212c      	movs	r1, #44	; 0x2c
 800499a:	fb01 f303 	mul.w	r3, r1, r3
 800499e:	4413      	add	r3, r2
 80049a0:	3354      	adds	r3, #84	; 0x54
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	f083 0301 	eor.w	r3, r3, #1
 80049a8:	b2d8      	uxtb	r0, r3
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	212c      	movs	r1, #44	; 0x2c
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	4413      	add	r3, r2
 80049b6:	3354      	adds	r3, #84	; 0x54
 80049b8:	4602      	mov	r2, r0
 80049ba:	701a      	strb	r2, [r3, #0]
}
 80049bc:	e178      	b.n	8004cb0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	212c      	movs	r1, #44	; 0x2c
 80049c4:	fb01 f303 	mul.w	r3, r1, r3
 80049c8:	4413      	add	r3, r2
 80049ca:	3354      	adds	r3, #84	; 0x54
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	f083 0301 	eor.w	r3, r3, #1
 80049d2:	b2d8      	uxtb	r0, r3
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	212c      	movs	r1, #44	; 0x2c
 80049da:	fb01 f303 	mul.w	r3, r1, r3
 80049de:	4413      	add	r3, r2
 80049e0:	3354      	adds	r3, #84	; 0x54
 80049e2:	4602      	mov	r2, r0
 80049e4:	701a      	strb	r2, [r3, #0]
}
 80049e6:	e163      	b.n	8004cb0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	f040 80f6 	bne.w	8004bec <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	212c      	movs	r1, #44	; 0x2c
 8004a06:	fb01 f303 	mul.w	r3, r1, r3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3361      	adds	r3, #97	; 0x61
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d109      	bne.n	8004a28 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	212c      	movs	r1, #44	; 0x2c
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
 8004a1e:	4413      	add	r3, r2
 8004a20:	3360      	adds	r3, #96	; 0x60
 8004a22:	2201      	movs	r2, #1
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	e0c9      	b.n	8004bbc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	212c      	movs	r1, #44	; 0x2c
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	3361      	adds	r3, #97	; 0x61
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b05      	cmp	r3, #5
 8004a3a:	d109      	bne.n	8004a50 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	212c      	movs	r1, #44	; 0x2c
 8004a42:	fb01 f303 	mul.w	r3, r1, r3
 8004a46:	4413      	add	r3, r2
 8004a48:	3360      	adds	r3, #96	; 0x60
 8004a4a:	2205      	movs	r2, #5
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	e0b5      	b.n	8004bbc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	212c      	movs	r1, #44	; 0x2c
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3361      	adds	r3, #97	; 0x61
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b06      	cmp	r3, #6
 8004a62:	d009      	beq.n	8004a78 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	212c      	movs	r1, #44	; 0x2c
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	3361      	adds	r3, #97	; 0x61
 8004a72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d150      	bne.n	8004b1a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	212c      	movs	r1, #44	; 0x2c
 8004a7e:	fb01 f303 	mul.w	r3, r1, r3
 8004a82:	4413      	add	r3, r2
 8004a84:	335c      	adds	r3, #92	; 0x5c
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	202c      	movs	r0, #44	; 0x2c
 8004a90:	fb00 f303 	mul.w	r3, r0, r3
 8004a94:	440b      	add	r3, r1
 8004a96:	335c      	adds	r3, #92	; 0x5c
 8004a98:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	212c      	movs	r1, #44	; 0x2c
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	335c      	adds	r3, #92	; 0x5c
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d912      	bls.n	8004ad4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	212c      	movs	r1, #44	; 0x2c
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	4413      	add	r3, r2
 8004aba:	335c      	adds	r3, #92	; 0x5c
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	212c      	movs	r1, #44	; 0x2c
 8004ac6:	fb01 f303 	mul.w	r3, r1, r3
 8004aca:	4413      	add	r3, r2
 8004acc:	3360      	adds	r3, #96	; 0x60
 8004ace:	2204      	movs	r2, #4
 8004ad0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ad2:	e073      	b.n	8004bbc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	212c      	movs	r1, #44	; 0x2c
 8004ada:	fb01 f303 	mul.w	r3, r1, r3
 8004ade:	4413      	add	r3, r2
 8004ae0:	3360      	adds	r3, #96	; 0x60
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004afc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b04:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b12:	461a      	mov	r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b18:	e050      	b.n	8004bbc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	212c      	movs	r1, #44	; 0x2c
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	4413      	add	r3, r2
 8004b26:	3361      	adds	r3, #97	; 0x61
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d122      	bne.n	8004b74 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	212c      	movs	r1, #44	; 0x2c
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	4413      	add	r3, r2
 8004b3a:	3360      	adds	r3, #96	; 0x60
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b56:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b5e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e023      	b.n	8004bbc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	212c      	movs	r1, #44	; 0x2c
 8004b7a:	fb01 f303 	mul.w	r3, r1, r3
 8004b7e:	4413      	add	r3, r2
 8004b80:	3361      	adds	r3, #97	; 0x61
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b07      	cmp	r3, #7
 8004b86:	d119      	bne.n	8004bbc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	212c      	movs	r1, #44	; 0x2c
 8004b8e:	fb01 f303 	mul.w	r3, r1, r3
 8004b92:	4413      	add	r3, r2
 8004b94:	335c      	adds	r3, #92	; 0x5c
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	202c      	movs	r0, #44	; 0x2c
 8004ba0:	fb00 f303 	mul.w	r3, r0, r3
 8004ba4:	440b      	add	r3, r1
 8004ba6:	335c      	adds	r3, #92	; 0x5c
 8004ba8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	212c      	movs	r1, #44	; 0x2c
 8004bb0:	fb01 f303 	mul.w	r3, r1, r3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3360      	adds	r3, #96	; 0x60
 8004bb8:	2204      	movs	r2, #4
 8004bba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2302      	movs	r3, #2
 8004bcc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	b2d9      	uxtb	r1, r3
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	202c      	movs	r0, #44	; 0x2c
 8004bd8:	fb00 f303 	mul.w	r3, r0, r3
 8004bdc:	4413      	add	r3, r2
 8004bde:	3360      	adds	r3, #96	; 0x60
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f006 fc03 	bl	800b3f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004bea:	e061      	b.n	8004cb0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d156      	bne.n	8004cb0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	212c      	movs	r1, #44	; 0x2c
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	333f      	adds	r3, #63	; 0x3f
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	d111      	bne.n	8004c3a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	212c      	movs	r1, #44	; 0x2c
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	4413      	add	r3, r2
 8004c22:	335c      	adds	r3, #92	; 0x5c
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f004 f939 	bl	8008eaa <USB_HC_Halt>
 8004c38:	e031      	b.n	8004c9e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	212c      	movs	r1, #44	; 0x2c
 8004c40:	fb01 f303 	mul.w	r3, r1, r3
 8004c44:	4413      	add	r3, r2
 8004c46:	333f      	adds	r3, #63	; 0x3f
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d009      	beq.n	8004c62 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	212c      	movs	r1, #44	; 0x2c
 8004c54:	fb01 f303 	mul.w	r3, r1, r3
 8004c58:	4413      	add	r3, r2
 8004c5a:	333f      	adds	r3, #63	; 0x3f
 8004c5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d11d      	bne.n	8004c9e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	212c      	movs	r1, #44	; 0x2c
 8004c68:	fb01 f303 	mul.w	r3, r1, r3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	335c      	adds	r3, #92	; 0x5c
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d110      	bne.n	8004c9e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	212c      	movs	r1, #44	; 0x2c
 8004c82:	fb01 f303 	mul.w	r3, r1, r3
 8004c86:	4413      	add	r3, r2
 8004c88:	3361      	adds	r3, #97	; 0x61
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	4611      	mov	r1, r2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f004 f906 	bl	8008eaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004caa:	461a      	mov	r2, r3
 8004cac:	2310      	movs	r3, #16
 8004cae:	6093      	str	r3, [r2, #8]
}
 8004cb0:	bf00      	nop
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004cce:	78fb      	ldrb	r3, [r7, #3]
 8004cd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d11a      	bne.n	8004d1e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	2304      	movs	r3, #4
 8004cf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	212c      	movs	r1, #44	; 0x2c
 8004d00:	fb01 f303 	mul.w	r3, r1, r3
 8004d04:	4413      	add	r3, r2
 8004d06:	3361      	adds	r3, #97	; 0x61
 8004d08:	2206      	movs	r2, #6
 8004d0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	4611      	mov	r1, r2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f004 f8c7 	bl	8008eaa <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004d1c:	e331      	b.n	8005382 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d12e      	bne.n	8004d92 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d40:	461a      	mov	r2, r3
 8004d42:	2320      	movs	r3, #32
 8004d44:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	212c      	movs	r1, #44	; 0x2c
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	4413      	add	r3, r2
 8004d52:	333d      	adds	r3, #61	; 0x3d
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	f040 8313 	bne.w	8005382 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	212c      	movs	r1, #44	; 0x2c
 8004d62:	fb01 f303 	mul.w	r3, r1, r3
 8004d66:	4413      	add	r3, r2
 8004d68:	333d      	adds	r3, #61	; 0x3d
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	212c      	movs	r1, #44	; 0x2c
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	4413      	add	r3, r2
 8004d7a:	3360      	adds	r3, #96	; 0x60
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	4611      	mov	r1, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f004 f88d 	bl	8008eaa <USB_HC_Halt>
}
 8004d90:	e2f7      	b.n	8005382 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da8:	d112      	bne.n	8004dd0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db6:	461a      	mov	r2, r3
 8004db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dbc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f004 f86e 	bl	8008eaa <USB_HC_Halt>
}
 8004dce:	e2d8      	b.n	8005382 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d140      	bne.n	8004e68 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	212c      	movs	r1, #44	; 0x2c
 8004dec:	fb01 f303 	mul.w	r3, r1, r3
 8004df0:	4413      	add	r3, r2
 8004df2:	335c      	adds	r3, #92	; 0x5c
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b40      	cmp	r3, #64	; 0x40
 8004e0c:	d111      	bne.n	8004e32 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	212c      	movs	r1, #44	; 0x2c
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	4413      	add	r3, r2
 8004e1a:	333d      	adds	r3, #61	; 0x3d
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	2340      	movs	r3, #64	; 0x40
 8004e30:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3e:	461a      	mov	r2, r3
 8004e40:	2301      	movs	r3, #1
 8004e42:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	212c      	movs	r1, #44	; 0x2c
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	4413      	add	r3, r2
 8004e50:	3361      	adds	r3, #97	; 0x61
 8004e52:	2201      	movs	r2, #1
 8004e54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	4611      	mov	r1, r2
 8004e60:	4618      	mov	r0, r3
 8004e62:	f004 f822 	bl	8008eaa <USB_HC_Halt>
}
 8004e66:	e28c      	b.n	8005382 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d12c      	bne.n	8004ed8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	212c      	movs	r1, #44	; 0x2c
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	4413      	add	r3, r2
 8004e8a:	3361      	adds	r3, #97	; 0x61
 8004e8c:	2204      	movs	r2, #4
 8004e8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	212c      	movs	r1, #44	; 0x2c
 8004e96:	fb01 f303 	mul.w	r3, r1, r3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	333d      	adds	r3, #61	; 0x3d
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	212c      	movs	r1, #44	; 0x2c
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	4413      	add	r3, r2
 8004eae:	335c      	adds	r3, #92	; 0x5c
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f003 fff3 	bl	8008eaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	2340      	movs	r3, #64	; 0x40
 8004ed4:	6093      	str	r3, [r2, #8]
}
 8004ed6:	e254      	b.n	8005382 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d11a      	bne.n	8004f24 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efa:	461a      	mov	r2, r3
 8004efc:	2308      	movs	r3, #8
 8004efe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	212c      	movs	r1, #44	; 0x2c
 8004f06:	fb01 f303 	mul.w	r3, r1, r3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3361      	adds	r3, #97	; 0x61
 8004f0e:	2205      	movs	r2, #5
 8004f10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f003 ffc4 	bl	8008eaa <USB_HC_Halt>
}
 8004f22:	e22e      	b.n	8005382 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d140      	bne.n	8004fbc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	212c      	movs	r1, #44	; 0x2c
 8004f40:	fb01 f303 	mul.w	r3, r1, r3
 8004f44:	4413      	add	r3, r2
 8004f46:	335c      	adds	r3, #92	; 0x5c
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	212c      	movs	r1, #44	; 0x2c
 8004f52:	fb01 f303 	mul.w	r3, r1, r3
 8004f56:	4413      	add	r3, r2
 8004f58:	3361      	adds	r3, #97	; 0x61
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	212c      	movs	r1, #44	; 0x2c
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	4413      	add	r3, r2
 8004f6a:	333d      	adds	r3, #61	; 0x3d
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d112      	bne.n	8004f98 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	212c      	movs	r1, #44	; 0x2c
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	333c      	adds	r3, #60	; 0x3c
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d108      	bne.n	8004f98 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	212c      	movs	r1, #44	; 0x2c
 8004f8c:	fb01 f303 	mul.w	r3, r1, r3
 8004f90:	4413      	add	r3, r2
 8004f92:	333d      	adds	r3, #61	; 0x3d
 8004f94:	2201      	movs	r2, #1
 8004f96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f003 ff81 	bl	8008eaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	2310      	movs	r3, #16
 8004fb8:	6093      	str	r3, [r2, #8]
}
 8004fba:	e1e2      	b.n	8005382 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fce:	2b80      	cmp	r3, #128	; 0x80
 8004fd0:	d164      	bne.n	800509c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d111      	bne.n	8004ffe <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	212c      	movs	r1, #44	; 0x2c
 8004fe0:	fb01 f303 	mul.w	r3, r1, r3
 8004fe4:	4413      	add	r3, r2
 8004fe6:	3361      	adds	r3, #97	; 0x61
 8004fe8:	2206      	movs	r2, #6
 8004fea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f003 ff57 	bl	8008eaa <USB_HC_Halt>
 8004ffc:	e044      	b.n	8005088 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	212c      	movs	r1, #44	; 0x2c
 8005004:	fb01 f303 	mul.w	r3, r1, r3
 8005008:	4413      	add	r3, r2
 800500a:	335c      	adds	r3, #92	; 0x5c
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	202c      	movs	r0, #44	; 0x2c
 8005016:	fb00 f303 	mul.w	r3, r0, r3
 800501a:	440b      	add	r3, r1
 800501c:	335c      	adds	r3, #92	; 0x5c
 800501e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	212c      	movs	r1, #44	; 0x2c
 8005026:	fb01 f303 	mul.w	r3, r1, r3
 800502a:	4413      	add	r3, r2
 800502c:	335c      	adds	r3, #92	; 0x5c
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d920      	bls.n	8005076 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	212c      	movs	r1, #44	; 0x2c
 800503a:	fb01 f303 	mul.w	r3, r1, r3
 800503e:	4413      	add	r3, r2
 8005040:	335c      	adds	r3, #92	; 0x5c
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	212c      	movs	r1, #44	; 0x2c
 800504c:	fb01 f303 	mul.w	r3, r1, r3
 8005050:	4413      	add	r3, r2
 8005052:	3360      	adds	r3, #96	; 0x60
 8005054:	2204      	movs	r2, #4
 8005056:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	b2d9      	uxtb	r1, r3
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	202c      	movs	r0, #44	; 0x2c
 8005062:	fb00 f303 	mul.w	r3, r0, r3
 8005066:	4413      	add	r3, r2
 8005068:	3360      	adds	r3, #96	; 0x60
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f006 f9be 	bl	800b3f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005074:	e008      	b.n	8005088 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	212c      	movs	r1, #44	; 0x2c
 800507c:	fb01 f303 	mul.w	r3, r1, r3
 8005080:	4413      	add	r3, r2
 8005082:	3360      	adds	r3, #96	; 0x60
 8005084:	2202      	movs	r2, #2
 8005086:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	4413      	add	r3, r2
 8005090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005094:	461a      	mov	r2, r3
 8005096:	2380      	movs	r3, #128	; 0x80
 8005098:	6093      	str	r3, [r2, #8]
}
 800509a:	e172      	b.n	8005382 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b2:	d11b      	bne.n	80050ec <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	212c      	movs	r1, #44	; 0x2c
 80050ba:	fb01 f303 	mul.w	r3, r1, r3
 80050be:	4413      	add	r3, r2
 80050c0:	3361      	adds	r3, #97	; 0x61
 80050c2:	2208      	movs	r2, #8
 80050c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	4611      	mov	r1, r2
 80050d0:	4618      	mov	r0, r3
 80050d2:	f003 feea 	bl	8008eaa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e2:	461a      	mov	r2, r3
 80050e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050e8:	6093      	str	r3, [r2, #8]
}
 80050ea:	e14a      	b.n	8005382 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b02      	cmp	r3, #2
 8005100:	f040 813f 	bne.w	8005382 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	212c      	movs	r1, #44	; 0x2c
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	4413      	add	r3, r2
 8005110:	3361      	adds	r3, #97	; 0x61
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d17d      	bne.n	8005214 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	212c      	movs	r1, #44	; 0x2c
 800511e:	fb01 f303 	mul.w	r3, r1, r3
 8005122:	4413      	add	r3, r2
 8005124:	3360      	adds	r3, #96	; 0x60
 8005126:	2201      	movs	r2, #1
 8005128:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	212c      	movs	r1, #44	; 0x2c
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	4413      	add	r3, r2
 8005136:	333f      	adds	r3, #63	; 0x3f
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d00a      	beq.n	8005154 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	212c      	movs	r1, #44	; 0x2c
 8005144:	fb01 f303 	mul.w	r3, r1, r3
 8005148:	4413      	add	r3, r2
 800514a:	333f      	adds	r3, #63	; 0x3f
 800514c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800514e:	2b03      	cmp	r3, #3
 8005150:	f040 8100 	bne.w	8005354 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d113      	bne.n	8005184 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	212c      	movs	r1, #44	; 0x2c
 8005162:	fb01 f303 	mul.w	r3, r1, r3
 8005166:	4413      	add	r3, r2
 8005168:	3355      	adds	r3, #85	; 0x55
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	f083 0301 	eor.w	r3, r3, #1
 8005170:	b2d8      	uxtb	r0, r3
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	212c      	movs	r1, #44	; 0x2c
 8005178:	fb01 f303 	mul.w	r3, r1, r3
 800517c:	4413      	add	r3, r2
 800517e:	3355      	adds	r3, #85	; 0x55
 8005180:	4602      	mov	r2, r0
 8005182:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	2b01      	cmp	r3, #1
 800518a:	f040 80e3 	bne.w	8005354 <HCD_HC_OUT_IRQHandler+0x69c>
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	212c      	movs	r1, #44	; 0x2c
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	4413      	add	r3, r2
 800519a:	334c      	adds	r3, #76	; 0x4c
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 80d8 	beq.w	8005354 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	212c      	movs	r1, #44	; 0x2c
 80051aa:	fb01 f303 	mul.w	r3, r1, r3
 80051ae:	4413      	add	r3, r2
 80051b0:	334c      	adds	r3, #76	; 0x4c
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	202c      	movs	r0, #44	; 0x2c
 80051ba:	fb00 f202 	mul.w	r2, r0, r2
 80051be:	440a      	add	r2, r1
 80051c0:	3240      	adds	r2, #64	; 0x40
 80051c2:	8812      	ldrh	r2, [r2, #0]
 80051c4:	4413      	add	r3, r2
 80051c6:	3b01      	subs	r3, #1
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	202c      	movs	r0, #44	; 0x2c
 80051ce:	fb00 f202 	mul.w	r2, r0, r2
 80051d2:	440a      	add	r2, r1
 80051d4:	3240      	adds	r2, #64	; 0x40
 80051d6:	8812      	ldrh	r2, [r2, #0]
 80051d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80b5 	beq.w	8005354 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	212c      	movs	r1, #44	; 0x2c
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	4413      	add	r3, r2
 80051f6:	3355      	adds	r3, #85	; 0x55
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	f083 0301 	eor.w	r3, r3, #1
 80051fe:	b2d8      	uxtb	r0, r3
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	212c      	movs	r1, #44	; 0x2c
 8005206:	fb01 f303 	mul.w	r3, r1, r3
 800520a:	4413      	add	r3, r2
 800520c:	3355      	adds	r3, #85	; 0x55
 800520e:	4602      	mov	r2, r0
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	e09f      	b.n	8005354 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	212c      	movs	r1, #44	; 0x2c
 800521a:	fb01 f303 	mul.w	r3, r1, r3
 800521e:	4413      	add	r3, r2
 8005220:	3361      	adds	r3, #97	; 0x61
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b03      	cmp	r3, #3
 8005226:	d109      	bne.n	800523c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	212c      	movs	r1, #44	; 0x2c
 800522e:	fb01 f303 	mul.w	r3, r1, r3
 8005232:	4413      	add	r3, r2
 8005234:	3360      	adds	r3, #96	; 0x60
 8005236:	2202      	movs	r2, #2
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	e08b      	b.n	8005354 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	212c      	movs	r1, #44	; 0x2c
 8005242:	fb01 f303 	mul.w	r3, r1, r3
 8005246:	4413      	add	r3, r2
 8005248:	3361      	adds	r3, #97	; 0x61
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b04      	cmp	r3, #4
 800524e:	d109      	bne.n	8005264 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	212c      	movs	r1, #44	; 0x2c
 8005256:	fb01 f303 	mul.w	r3, r1, r3
 800525a:	4413      	add	r3, r2
 800525c:	3360      	adds	r3, #96	; 0x60
 800525e:	2202      	movs	r2, #2
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	e077      	b.n	8005354 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	212c      	movs	r1, #44	; 0x2c
 800526a:	fb01 f303 	mul.w	r3, r1, r3
 800526e:	4413      	add	r3, r2
 8005270:	3361      	adds	r3, #97	; 0x61
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b05      	cmp	r3, #5
 8005276:	d109      	bne.n	800528c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	212c      	movs	r1, #44	; 0x2c
 800527e:	fb01 f303 	mul.w	r3, r1, r3
 8005282:	4413      	add	r3, r2
 8005284:	3360      	adds	r3, #96	; 0x60
 8005286:	2205      	movs	r2, #5
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	e063      	b.n	8005354 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	212c      	movs	r1, #44	; 0x2c
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	4413      	add	r3, r2
 8005298:	3361      	adds	r3, #97	; 0x61
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b06      	cmp	r3, #6
 800529e:	d009      	beq.n	80052b4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	212c      	movs	r1, #44	; 0x2c
 80052a6:	fb01 f303 	mul.w	r3, r1, r3
 80052aa:	4413      	add	r3, r2
 80052ac:	3361      	adds	r3, #97	; 0x61
 80052ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d14f      	bne.n	8005354 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	212c      	movs	r1, #44	; 0x2c
 80052ba:	fb01 f303 	mul.w	r3, r1, r3
 80052be:	4413      	add	r3, r2
 80052c0:	335c      	adds	r3, #92	; 0x5c
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	202c      	movs	r0, #44	; 0x2c
 80052cc:	fb00 f303 	mul.w	r3, r0, r3
 80052d0:	440b      	add	r3, r1
 80052d2:	335c      	adds	r3, #92	; 0x5c
 80052d4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	212c      	movs	r1, #44	; 0x2c
 80052dc:	fb01 f303 	mul.w	r3, r1, r3
 80052e0:	4413      	add	r3, r2
 80052e2:	335c      	adds	r3, #92	; 0x5c
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d912      	bls.n	8005310 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	212c      	movs	r1, #44	; 0x2c
 80052f0:	fb01 f303 	mul.w	r3, r1, r3
 80052f4:	4413      	add	r3, r2
 80052f6:	335c      	adds	r3, #92	; 0x5c
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	212c      	movs	r1, #44	; 0x2c
 8005302:	fb01 f303 	mul.w	r3, r1, r3
 8005306:	4413      	add	r3, r2
 8005308:	3360      	adds	r3, #96	; 0x60
 800530a:	2204      	movs	r2, #4
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	e021      	b.n	8005354 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	212c      	movs	r1, #44	; 0x2c
 8005316:	fb01 f303 	mul.w	r3, r1, r3
 800531a:	4413      	add	r3, r2
 800531c:	3360      	adds	r3, #96	; 0x60
 800531e:	2202      	movs	r2, #2
 8005320:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	4413      	add	r3, r2
 800532a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005338:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005340:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	4413      	add	r3, r2
 800534a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534e:	461a      	mov	r2, r3
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	4413      	add	r3, r2
 800535c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005360:	461a      	mov	r2, r3
 8005362:	2302      	movs	r3, #2
 8005364:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	b2d9      	uxtb	r1, r3
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	202c      	movs	r0, #44	; 0x2c
 8005370:	fb00 f303 	mul.w	r3, r0, r3
 8005374:	4413      	add	r3, r2
 8005376:	3360      	adds	r3, #96	; 0x60
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f006 f837 	bl	800b3f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005382:	bf00      	nop
 8005384:	3720      	adds	r7, #32
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b08a      	sub	sp, #40	; 0x28
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	0c5b      	lsrs	r3, r3, #17
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	091b      	lsrs	r3, r3, #4
 80053ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053be:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d004      	beq.n	80053d0 <HCD_RXQLVL_IRQHandler+0x46>
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b05      	cmp	r3, #5
 80053ca:	f000 80a9 	beq.w	8005520 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80053ce:	e0aa      	b.n	8005526 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 80a6 	beq.w	8005524 <HCD_RXQLVL_IRQHandler+0x19a>
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	212c      	movs	r1, #44	; 0x2c
 80053de:	fb01 f303 	mul.w	r3, r1, r3
 80053e2:	4413      	add	r3, r2
 80053e4:	3344      	adds	r3, #68	; 0x44
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 809b 	beq.w	8005524 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	212c      	movs	r1, #44	; 0x2c
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	4413      	add	r3, r2
 80053fa:	3350      	adds	r3, #80	; 0x50
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	441a      	add	r2, r3
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	202c      	movs	r0, #44	; 0x2c
 8005408:	fb00 f303 	mul.w	r3, r0, r3
 800540c:	440b      	add	r3, r1
 800540e:	334c      	adds	r3, #76	; 0x4c
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d87a      	bhi.n	800550c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	212c      	movs	r1, #44	; 0x2c
 8005420:	fb01 f303 	mul.w	r3, r1, r3
 8005424:	4413      	add	r3, r2
 8005426:	3344      	adds	r3, #68	; 0x44
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	b292      	uxth	r2, r2
 800542e:	4619      	mov	r1, r3
 8005430:	f003 f892 	bl	8008558 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	212c      	movs	r1, #44	; 0x2c
 800543a:	fb01 f303 	mul.w	r3, r1, r3
 800543e:	4413      	add	r3, r2
 8005440:	3344      	adds	r3, #68	; 0x44
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	441a      	add	r2, r3
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	202c      	movs	r0, #44	; 0x2c
 800544e:	fb00 f303 	mul.w	r3, r0, r3
 8005452:	440b      	add	r3, r1
 8005454:	3344      	adds	r3, #68	; 0x44
 8005456:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	212c      	movs	r1, #44	; 0x2c
 800545e:	fb01 f303 	mul.w	r3, r1, r3
 8005462:	4413      	add	r3, r2
 8005464:	3350      	adds	r3, #80	; 0x50
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	441a      	add	r2, r3
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	202c      	movs	r0, #44	; 0x2c
 8005472:	fb00 f303 	mul.w	r3, r0, r3
 8005476:	440b      	add	r3, r1
 8005478:	3350      	adds	r3, #80	; 0x50
 800547a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	4413      	add	r3, r2
 8005484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	0cdb      	lsrs	r3, r3, #19
 800548c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005490:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	212c      	movs	r1, #44	; 0x2c
 8005498:	fb01 f303 	mul.w	r3, r1, r3
 800549c:	4413      	add	r3, r2
 800549e:	3340      	adds	r3, #64	; 0x40
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d13c      	bne.n	8005524 <HCD_RXQLVL_IRQHandler+0x19a>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d039      	beq.n	8005524 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054c6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054ce:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054dc:	461a      	mov	r2, r3
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	212c      	movs	r1, #44	; 0x2c
 80054e8:	fb01 f303 	mul.w	r3, r1, r3
 80054ec:	4413      	add	r3, r2
 80054ee:	3354      	adds	r3, #84	; 0x54
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	f083 0301 	eor.w	r3, r3, #1
 80054f6:	b2d8      	uxtb	r0, r3
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	212c      	movs	r1, #44	; 0x2c
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	4413      	add	r3, r2
 8005504:	3354      	adds	r3, #84	; 0x54
 8005506:	4602      	mov	r2, r0
 8005508:	701a      	strb	r2, [r3, #0]
      break;
 800550a:	e00b      	b.n	8005524 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	212c      	movs	r1, #44	; 0x2c
 8005512:	fb01 f303 	mul.w	r3, r1, r3
 8005516:	4413      	add	r3, r2
 8005518:	3360      	adds	r3, #96	; 0x60
 800551a:	2204      	movs	r2, #4
 800551c:	701a      	strb	r2, [r3, #0]
      break;
 800551e:	e001      	b.n	8005524 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005520:	bf00      	nop
 8005522:	e000      	b.n	8005526 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005524:	bf00      	nop
  }
}
 8005526:	bf00      	nop
 8005528:	3728      	adds	r7, #40	; 0x28
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b086      	sub	sp, #24
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800555a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b02      	cmp	r3, #2
 8005564:	d10b      	bne.n	800557e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b01      	cmp	r3, #1
 800556e:	d102      	bne.n	8005576 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f005 ff21 	bl	800b3b8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f043 0302 	orr.w	r3, r3, #2
 800557c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f003 0308 	and.w	r3, r3, #8
 8005584:	2b08      	cmp	r3, #8
 8005586:	d132      	bne.n	80055ee <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f043 0308 	orr.w	r3, r3, #8
 800558e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b04      	cmp	r3, #4
 8005598:	d126      	bne.n	80055e8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d113      	bne.n	80055ca <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80055a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055ac:	d106      	bne.n	80055bc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2102      	movs	r1, #2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f003 f93d 	bl	8008834 <USB_InitFSLSPClkSel>
 80055ba:	e011      	b.n	80055e0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2101      	movs	r1, #1
 80055c2:	4618      	mov	r0, r3
 80055c4:	f003 f936 	bl	8008834 <USB_InitFSLSPClkSel>
 80055c8:	e00a      	b.n	80055e0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d106      	bne.n	80055e0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d8:	461a      	mov	r2, r3
 80055da:	f64e 2360 	movw	r3, #60000	; 0xea60
 80055de:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f005 ff13 	bl	800b40c <HAL_HCD_PortEnabled_Callback>
 80055e6:	e002      	b.n	80055ee <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f005 ff1d 	bl	800b428 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d103      	bne.n	8005600 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f043 0320 	orr.w	r3, r3, #32
 80055fe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005606:	461a      	mov	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	6013      	str	r3, [r2, #0]
}
 800560c:	bf00      	nop
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e12b      	b.n	800587e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fd f936 	bl	80028ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2224      	movs	r2, #36	; 0x24
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0201 	bic.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005666:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005676:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005678:	f001 fa20 	bl	8006abc <HAL_RCC_GetPCLK1Freq>
 800567c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	4a81      	ldr	r2, [pc, #516]	; (8005888 <HAL_I2C_Init+0x274>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d807      	bhi.n	8005698 <HAL_I2C_Init+0x84>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4a80      	ldr	r2, [pc, #512]	; (800588c <HAL_I2C_Init+0x278>)
 800568c:	4293      	cmp	r3, r2
 800568e:	bf94      	ite	ls
 8005690:	2301      	movls	r3, #1
 8005692:	2300      	movhi	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	e006      	b.n	80056a6 <HAL_I2C_Init+0x92>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4a7d      	ldr	r2, [pc, #500]	; (8005890 <HAL_I2C_Init+0x27c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	bf94      	ite	ls
 80056a0:	2301      	movls	r3, #1
 80056a2:	2300      	movhi	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e0e7      	b.n	800587e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4a78      	ldr	r2, [pc, #480]	; (8005894 <HAL_I2C_Init+0x280>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	0c9b      	lsrs	r3, r3, #18
 80056b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4a6a      	ldr	r2, [pc, #424]	; (8005888 <HAL_I2C_Init+0x274>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d802      	bhi.n	80056e8 <HAL_I2C_Init+0xd4>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	3301      	adds	r3, #1
 80056e6:	e009      	b.n	80056fc <HAL_I2C_Init+0xe8>
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056ee:	fb02 f303 	mul.w	r3, r2, r3
 80056f2:	4a69      	ldr	r2, [pc, #420]	; (8005898 <HAL_I2C_Init+0x284>)
 80056f4:	fba2 2303 	umull	r2, r3, r2, r3
 80056f8:	099b      	lsrs	r3, r3, #6
 80056fa:	3301      	adds	r3, #1
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	430b      	orrs	r3, r1
 8005702:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800570e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	495c      	ldr	r1, [pc, #368]	; (8005888 <HAL_I2C_Init+0x274>)
 8005718:	428b      	cmp	r3, r1
 800571a:	d819      	bhi.n	8005750 <HAL_I2C_Init+0x13c>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	1e59      	subs	r1, r3, #1
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	fbb1 f3f3 	udiv	r3, r1, r3
 800572a:	1c59      	adds	r1, r3, #1
 800572c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005730:	400b      	ands	r3, r1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <HAL_I2C_Init+0x138>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	1e59      	subs	r1, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	fbb1 f3f3 	udiv	r3, r1, r3
 8005744:	3301      	adds	r3, #1
 8005746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800574a:	e051      	b.n	80057f0 <HAL_I2C_Init+0x1dc>
 800574c:	2304      	movs	r3, #4
 800574e:	e04f      	b.n	80057f0 <HAL_I2C_Init+0x1dc>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d111      	bne.n	800577c <HAL_I2C_Init+0x168>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	1e58      	subs	r0, r3, #1
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6859      	ldr	r1, [r3, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	440b      	add	r3, r1
 8005766:	fbb0 f3f3 	udiv	r3, r0, r3
 800576a:	3301      	adds	r3, #1
 800576c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005770:	2b00      	cmp	r3, #0
 8005772:	bf0c      	ite	eq
 8005774:	2301      	moveq	r3, #1
 8005776:	2300      	movne	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	e012      	b.n	80057a2 <HAL_I2C_Init+0x18e>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	1e58      	subs	r0, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6859      	ldr	r1, [r3, #4]
 8005784:	460b      	mov	r3, r1
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	0099      	lsls	r1, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005792:	3301      	adds	r3, #1
 8005794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005798:	2b00      	cmp	r3, #0
 800579a:	bf0c      	ite	eq
 800579c:	2301      	moveq	r3, #1
 800579e:	2300      	movne	r3, #0
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <HAL_I2C_Init+0x196>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e022      	b.n	80057f0 <HAL_I2C_Init+0x1dc>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10e      	bne.n	80057d0 <HAL_I2C_Init+0x1bc>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	1e58      	subs	r0, r3, #1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6859      	ldr	r1, [r3, #4]
 80057ba:	460b      	mov	r3, r1
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	440b      	add	r3, r1
 80057c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80057c4:	3301      	adds	r3, #1
 80057c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ce:	e00f      	b.n	80057f0 <HAL_I2C_Init+0x1dc>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	1e58      	subs	r0, r3, #1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6859      	ldr	r1, [r3, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	440b      	add	r3, r1
 80057de:	0099      	lsls	r1, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057e6:	3301      	adds	r3, #1
 80057e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	6809      	ldr	r1, [r1, #0]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69da      	ldr	r2, [r3, #28]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800581e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6911      	ldr	r1, [r2, #16]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	68d2      	ldr	r2, [r2, #12]
 800582a:	4311      	orrs	r1, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6812      	ldr	r2, [r2, #0]
 8005830:	430b      	orrs	r3, r1
 8005832:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	695a      	ldr	r2, [r3, #20]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	000186a0 	.word	0x000186a0
 800588c:	001e847f 	.word	0x001e847f
 8005890:	003d08ff 	.word	0x003d08ff
 8005894:	431bde83 	.word	0x431bde83
 8005898:	10624dd3 	.word	0x10624dd3

0800589c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e128      	b.n	8005b00 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d109      	bne.n	80058ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a90      	ldr	r2, [pc, #576]	; (8005b08 <HAL_I2S_Init+0x26c>)
 80058c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7fd f837 	bl	800293c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2202      	movs	r2, #2
 80058d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6812      	ldr	r2, [r2, #0]
 80058e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80058e4:	f023 030f 	bic.w	r3, r3, #15
 80058e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2202      	movs	r2, #2
 80058f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d060      	beq.n	80059bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d102      	bne.n	8005908 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005902:	2310      	movs	r3, #16
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e001      	b.n	800590c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005908:	2320      	movs	r3, #32
 800590a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2b20      	cmp	r3, #32
 8005912:	d802      	bhi.n	800591a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800591a:	2001      	movs	r0, #1
 800591c:	f001 f9e6 	bl	8006cec <HAL_RCCEx_GetPeriphCLKFreq>
 8005920:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800592a:	d125      	bne.n	8005978 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d010      	beq.n	8005956 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	fbb2 f2f3 	udiv	r2, r2, r3
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	461a      	mov	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005950:	3305      	adds	r3, #5
 8005952:	613b      	str	r3, [r7, #16]
 8005954:	e01f      	b.n	8005996 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005960:	4613      	mov	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	461a      	mov	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005972:	3305      	adds	r3, #5
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	e00e      	b.n	8005996 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	461a      	mov	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005992:	3305      	adds	r3, #5
 8005994:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	4a5c      	ldr	r2, [pc, #368]	; (8005b0c <HAL_I2S_Init+0x270>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	08db      	lsrs	r3, r3, #3
 80059a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	61bb      	str	r3, [r7, #24]
 80059ba:	e003      	b.n	80059c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80059bc:	2302      	movs	r3, #2
 80059be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d902      	bls.n	80059d0 <HAL_I2S_Init+0x134>
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	2bff      	cmp	r3, #255	; 0xff
 80059ce:	d907      	bls.n	80059e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d4:	f043 0210 	orr.w	r2, r3, #16
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e08f      	b.n	8005b00 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	ea42 0103 	orr.w	r1, r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80059fe:	f023 030f 	bic.w	r3, r3, #15
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6851      	ldr	r1, [r2, #4]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6892      	ldr	r2, [r2, #8]
 8005a0a:	4311      	orrs	r1, r2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	68d2      	ldr	r2, [r2, #12]
 8005a10:	4311      	orrs	r1, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6992      	ldr	r2, [r2, #24]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a22:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d161      	bne.n	8005af0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a38      	ldr	r2, [pc, #224]	; (8005b10 <HAL_I2S_Init+0x274>)
 8005a30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a37      	ldr	r2, [pc, #220]	; (8005b14 <HAL_I2S_Init+0x278>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d101      	bne.n	8005a40 <HAL_I2S_Init+0x1a4>
 8005a3c:	4b36      	ldr	r3, [pc, #216]	; (8005b18 <HAL_I2S_Init+0x27c>)
 8005a3e:	e001      	b.n	8005a44 <HAL_I2S_Init+0x1a8>
 8005a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	4932      	ldr	r1, [pc, #200]	; (8005b14 <HAL_I2S_Init+0x278>)
 8005a4c:	428a      	cmp	r2, r1
 8005a4e:	d101      	bne.n	8005a54 <HAL_I2S_Init+0x1b8>
 8005a50:	4a31      	ldr	r2, [pc, #196]	; (8005b18 <HAL_I2S_Init+0x27c>)
 8005a52:	e001      	b.n	8005a58 <HAL_I2S_Init+0x1bc>
 8005a54:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005a58:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a5c:	f023 030f 	bic.w	r3, r3, #15
 8005a60:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a2b      	ldr	r2, [pc, #172]	; (8005b14 <HAL_I2S_Init+0x278>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d101      	bne.n	8005a70 <HAL_I2S_Init+0x1d4>
 8005a6c:	4b2a      	ldr	r3, [pc, #168]	; (8005b18 <HAL_I2S_Init+0x27c>)
 8005a6e:	e001      	b.n	8005a74 <HAL_I2S_Init+0x1d8>
 8005a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a74:	2202      	movs	r2, #2
 8005a76:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a25      	ldr	r2, [pc, #148]	; (8005b14 <HAL_I2S_Init+0x278>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d101      	bne.n	8005a86 <HAL_I2S_Init+0x1ea>
 8005a82:	4b25      	ldr	r3, [pc, #148]	; (8005b18 <HAL_I2S_Init+0x27c>)
 8005a84:	e001      	b.n	8005a8a <HAL_I2S_Init+0x1ee>
 8005a86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a96:	d003      	beq.n	8005aa0 <HAL_I2S_Init+0x204>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d103      	bne.n	8005aa8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	e001      	b.n	8005aac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005aca:	4313      	orrs	r3, r2
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	897b      	ldrh	r3, [r7, #10]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ad8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a0d      	ldr	r2, [pc, #52]	; (8005b14 <HAL_I2S_Init+0x278>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d101      	bne.n	8005ae8 <HAL_I2S_Init+0x24c>
 8005ae4:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <HAL_I2S_Init+0x27c>)
 8005ae6:	e001      	b.n	8005aec <HAL_I2S_Init+0x250>
 8005ae8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aec:	897a      	ldrh	r2, [r7, #10]
 8005aee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3720      	adds	r7, #32
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	08005c13 	.word	0x08005c13
 8005b0c:	cccccccd 	.word	0xcccccccd
 8005b10:	08005d29 	.word	0x08005d29
 8005b14:	40003800 	.word	0x40003800
 8005b18:	40003400 	.word	0x40003400

08005b1c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	881a      	ldrh	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	1c9a      	adds	r2, r3, #2
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10e      	bne.n	8005bac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b9c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff ffb8 	bl	8005b1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005bac:	bf00      	nop
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	b292      	uxth	r2, r2
 8005bc8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	1c9a      	adds	r2, r3, #2
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10e      	bne.n	8005c0a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bfa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff ff93 	bl	8005b30 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b086      	sub	sp, #24
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d13a      	bne.n	8005ca4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d109      	bne.n	8005c4c <I2S_IRQHandler+0x3a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c42:	2b40      	cmp	r3, #64	; 0x40
 8005c44:	d102      	bne.n	8005c4c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff ffb4 	bl	8005bb4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c52:	2b40      	cmp	r3, #64	; 0x40
 8005c54:	d126      	bne.n	8005ca4 <I2S_IRQHandler+0x92>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f003 0320 	and.w	r3, r3, #32
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d11f      	bne.n	8005ca4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	613b      	str	r3, [r7, #16]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	613b      	str	r3, [r7, #16]
 8005c88:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c96:	f043 0202 	orr.w	r2, r3, #2
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff ff50 	bl	8005b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d136      	bne.n	8005d1e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d109      	bne.n	8005cce <I2S_IRQHandler+0xbc>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc4:	2b80      	cmp	r3, #128	; 0x80
 8005cc6:	d102      	bne.n	8005cce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff ff45 	bl	8005b58 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f003 0308 	and.w	r3, r3, #8
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	d122      	bne.n	8005d1e <I2S_IRQHandler+0x10c>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b20      	cmp	r3, #32
 8005ce4:	d11b      	bne.n	8005d1e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cf4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d10:	f043 0204 	orr.w	r2, r3, #4
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff ff13 	bl	8005b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d1e:	bf00      	nop
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a92      	ldr	r2, [pc, #584]	; (8005f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d101      	bne.n	8005d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005d42:	4b92      	ldr	r3, [pc, #584]	; (8005f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d44:	e001      	b.n	8005d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005d46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a8b      	ldr	r2, [pc, #556]	; (8005f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d101      	bne.n	8005d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005d60:	4b8a      	ldr	r3, [pc, #552]	; (8005f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d62:	e001      	b.n	8005d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005d64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d74:	d004      	beq.n	8005d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f040 8099 	bne.w	8005eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d107      	bne.n	8005d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f925 	bl	8005fe4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d107      	bne.n	8005db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f9c8 	bl	8006144 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dba:	2b40      	cmp	r3, #64	; 0x40
 8005dbc:	d13a      	bne.n	8005e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d035      	beq.n	8005e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a6e      	ldr	r2, [pc, #440]	; (8005f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d101      	bne.n	8005dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005dd2:	4b6e      	ldr	r3, [pc, #440]	; (8005f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dd4:	e001      	b.n	8005dda <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005dd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4969      	ldr	r1, [pc, #420]	; (8005f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005de2:	428b      	cmp	r3, r1
 8005de4:	d101      	bne.n	8005dea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005de6:	4b69      	ldr	r3, [pc, #420]	; (8005f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005de8:	e001      	b.n	8005dee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005dea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005df2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e02:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e04:	2300      	movs	r3, #0
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e26:	f043 0202 	orr.w	r2, r3, #2
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7ff fe88 	bl	8005b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	f040 80c3 	bne.w	8005fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 80bd 	beq.w	8005fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e5a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a49      	ldr	r2, [pc, #292]	; (8005f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d101      	bne.n	8005e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005e66:	4b49      	ldr	r3, [pc, #292]	; (8005f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e68:	e001      	b.n	8005e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005e6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4944      	ldr	r1, [pc, #272]	; (8005f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e76:	428b      	cmp	r3, r1
 8005e78:	d101      	bne.n	8005e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005e7a:	4b44      	ldr	r3, [pc, #272]	; (8005f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e7c:	e001      	b.n	8005e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005e7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e86:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60bb      	str	r3, [r7, #8]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	60bb      	str	r3, [r7, #8]
 8005e94:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea2:	f043 0204 	orr.w	r2, r3, #4
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff fe4a 	bl	8005b44 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005eb0:	e089      	b.n	8005fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d107      	bne.n	8005ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f8be 	bl	8006048 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d107      	bne.n	8005ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f8fd 	bl	80060e0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	d12f      	bne.n	8005f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d02a      	beq.n	8005f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f08:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1e      	ldr	r2, [pc, #120]	; (8005f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d101      	bne.n	8005f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005f14:	4b1d      	ldr	r3, [pc, #116]	; (8005f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f16:	e001      	b.n	8005f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4919      	ldr	r1, [pc, #100]	; (8005f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f24:	428b      	cmp	r3, r1
 8005f26:	d101      	bne.n	8005f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005f28:	4b18      	ldr	r3, [pc, #96]	; (8005f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f2a:	e001      	b.n	8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005f2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f42:	f043 0202 	orr.w	r2, r3, #2
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff fdfa 	bl	8005b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b08      	cmp	r3, #8
 8005f58:	d136      	bne.n	8005fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f003 0320 	and.w	r3, r3, #32
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d031      	beq.n	8005fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a07      	ldr	r2, [pc, #28]	; (8005f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d101      	bne.n	8005f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005f6e:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f70:	e001      	b.n	8005f76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005f72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4902      	ldr	r1, [pc, #8]	; (8005f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f7e:	428b      	cmp	r3, r1
 8005f80:	d106      	bne.n	8005f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005f82:	4b02      	ldr	r3, [pc, #8]	; (8005f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f84:	e006      	b.n	8005f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005f86:	bf00      	nop
 8005f88:	40003800 	.word	0x40003800
 8005f8c:	40003400 	.word	0x40003400
 8005f90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f98:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fa8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb6:	f043 0204 	orr.w	r2, r3, #4
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff fdc0 	bl	8005b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fc4:	e000      	b.n	8005fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fc6:	bf00      	nop
}
 8005fc8:	bf00      	nop
 8005fca:	3720      	adds	r7, #32
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	1c99      	adds	r1, r3, #2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6251      	str	r1, [r2, #36]	; 0x24
 8005ff6:	881a      	ldrh	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006002:	b29b      	uxth	r3, r3
 8006004:	3b01      	subs	r3, #1
 8006006:	b29a      	uxth	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d113      	bne.n	800603e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006024:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d106      	bne.n	800603e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff ffc9 	bl	8005fd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	1c99      	adds	r1, r3, #2
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6251      	str	r1, [r2, #36]	; 0x24
 800605a:	8819      	ldrh	r1, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1d      	ldr	r2, [pc, #116]	; (80060d8 <I2SEx_TxISR_I2SExt+0x90>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d101      	bne.n	800606a <I2SEx_TxISR_I2SExt+0x22>
 8006066:	4b1d      	ldr	r3, [pc, #116]	; (80060dc <I2SEx_TxISR_I2SExt+0x94>)
 8006068:	e001      	b.n	800606e <I2SEx_TxISR_I2SExt+0x26>
 800606a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800606e:	460a      	mov	r2, r1
 8006070:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d121      	bne.n	80060ce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a12      	ldr	r2, [pc, #72]	; (80060d8 <I2SEx_TxISR_I2SExt+0x90>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d101      	bne.n	8006098 <I2SEx_TxISR_I2SExt+0x50>
 8006094:	4b11      	ldr	r3, [pc, #68]	; (80060dc <I2SEx_TxISR_I2SExt+0x94>)
 8006096:	e001      	b.n	800609c <I2SEx_TxISR_I2SExt+0x54>
 8006098:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	490d      	ldr	r1, [pc, #52]	; (80060d8 <I2SEx_TxISR_I2SExt+0x90>)
 80060a4:	428b      	cmp	r3, r1
 80060a6:	d101      	bne.n	80060ac <I2SEx_TxISR_I2SExt+0x64>
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <I2SEx_TxISR_I2SExt+0x94>)
 80060aa:	e001      	b.n	80060b0 <I2SEx_TxISR_I2SExt+0x68>
 80060ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff ff81 	bl	8005fd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060ce:	bf00      	nop
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	40003800 	.word	0x40003800
 80060dc:	40003400 	.word	0x40003400

080060e0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68d8      	ldr	r0, [r3, #12]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	1c99      	adds	r1, r3, #2
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80060f8:	b282      	uxth	r2, r0
 80060fa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006100:	b29b      	uxth	r3, r3
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d113      	bne.n	800613c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006122:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d106      	bne.n	800613c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7ff ff4a 	bl	8005fd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800613c:	bf00      	nop
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a20      	ldr	r2, [pc, #128]	; (80061d4 <I2SEx_RxISR_I2SExt+0x90>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d101      	bne.n	800615a <I2SEx_RxISR_I2SExt+0x16>
 8006156:	4b20      	ldr	r3, [pc, #128]	; (80061d8 <I2SEx_RxISR_I2SExt+0x94>)
 8006158:	e001      	b.n	800615e <I2SEx_RxISR_I2SExt+0x1a>
 800615a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800615e:	68d8      	ldr	r0, [r3, #12]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	1c99      	adds	r1, r3, #2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	62d1      	str	r1, [r2, #44]	; 0x2c
 800616a:	b282      	uxth	r2, r0
 800616c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006172:	b29b      	uxth	r3, r3
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d121      	bne.n	80061ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a12      	ldr	r2, [pc, #72]	; (80061d4 <I2SEx_RxISR_I2SExt+0x90>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d101      	bne.n	8006194 <I2SEx_RxISR_I2SExt+0x50>
 8006190:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <I2SEx_RxISR_I2SExt+0x94>)
 8006192:	e001      	b.n	8006198 <I2SEx_RxISR_I2SExt+0x54>
 8006194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	490d      	ldr	r1, [pc, #52]	; (80061d4 <I2SEx_RxISR_I2SExt+0x90>)
 80061a0:	428b      	cmp	r3, r1
 80061a2:	d101      	bne.n	80061a8 <I2SEx_RxISR_I2SExt+0x64>
 80061a4:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <I2SEx_RxISR_I2SExt+0x94>)
 80061a6:	e001      	b.n	80061ac <I2SEx_RxISR_I2SExt+0x68>
 80061a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d106      	bne.n	80061ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff ff03 	bl	8005fd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	40003800 	.word	0x40003800
 80061d8:	40003400 	.word	0x40003400

080061dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e267      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d075      	beq.n	80062e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061fa:	4b88      	ldr	r3, [pc, #544]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	2b04      	cmp	r3, #4
 8006204:	d00c      	beq.n	8006220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006206:	4b85      	ldr	r3, [pc, #532]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800620e:	2b08      	cmp	r3, #8
 8006210:	d112      	bne.n	8006238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006212:	4b82      	ldr	r3, [pc, #520]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800621a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800621e:	d10b      	bne.n	8006238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006220:	4b7e      	ldr	r3, [pc, #504]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d05b      	beq.n	80062e4 <HAL_RCC_OscConfig+0x108>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d157      	bne.n	80062e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e242      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006240:	d106      	bne.n	8006250 <HAL_RCC_OscConfig+0x74>
 8006242:	4b76      	ldr	r3, [pc, #472]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a75      	ldr	r2, [pc, #468]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	e01d      	b.n	800628c <HAL_RCC_OscConfig+0xb0>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006258:	d10c      	bne.n	8006274 <HAL_RCC_OscConfig+0x98>
 800625a:	4b70      	ldr	r3, [pc, #448]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a6f      	ldr	r2, [pc, #444]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	4b6d      	ldr	r3, [pc, #436]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a6c      	ldr	r2, [pc, #432]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800626c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e00b      	b.n	800628c <HAL_RCC_OscConfig+0xb0>
 8006274:	4b69      	ldr	r3, [pc, #420]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a68      	ldr	r2, [pc, #416]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800627a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	4b66      	ldr	r3, [pc, #408]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a65      	ldr	r2, [pc, #404]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800628a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d013      	beq.n	80062bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006294:	f7fc feb8 	bl	8003008 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800629c:	f7fc feb4 	bl	8003008 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b64      	cmp	r3, #100	; 0x64
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e207      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ae:	4b5b      	ldr	r3, [pc, #364]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0f0      	beq.n	800629c <HAL_RCC_OscConfig+0xc0>
 80062ba:	e014      	b.n	80062e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062bc:	f7fc fea4 	bl	8003008 <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062c4:	f7fc fea0 	bl	8003008 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b64      	cmp	r3, #100	; 0x64
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e1f3      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062d6:	4b51      	ldr	r3, [pc, #324]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f0      	bne.n	80062c4 <HAL_RCC_OscConfig+0xe8>
 80062e2:	e000      	b.n	80062e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d063      	beq.n	80063ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062f2:	4b4a      	ldr	r3, [pc, #296]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 030c 	and.w	r3, r3, #12
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062fe:	4b47      	ldr	r3, [pc, #284]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006306:	2b08      	cmp	r3, #8
 8006308:	d11c      	bne.n	8006344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800630a:	4b44      	ldr	r3, [pc, #272]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d116      	bne.n	8006344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006316:	4b41      	ldr	r3, [pc, #260]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <HAL_RCC_OscConfig+0x152>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d001      	beq.n	800632e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e1c7      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632e:	4b3b      	ldr	r3, [pc, #236]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	4937      	ldr	r1, [pc, #220]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800633e:	4313      	orrs	r3, r2
 8006340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006342:	e03a      	b.n	80063ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d020      	beq.n	800638e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800634c:	4b34      	ldr	r3, [pc, #208]	; (8006420 <HAL_RCC_OscConfig+0x244>)
 800634e:	2201      	movs	r2, #1
 8006350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006352:	f7fc fe59 	bl	8003008 <HAL_GetTick>
 8006356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006358:	e008      	b.n	800636c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800635a:	f7fc fe55 	bl	8003008 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d901      	bls.n	800636c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e1a8      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800636c:	4b2b      	ldr	r3, [pc, #172]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0f0      	beq.n	800635a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006378:	4b28      	ldr	r3, [pc, #160]	; (800641c <HAL_RCC_OscConfig+0x240>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	4925      	ldr	r1, [pc, #148]	; (800641c <HAL_RCC_OscConfig+0x240>)
 8006388:	4313      	orrs	r3, r2
 800638a:	600b      	str	r3, [r1, #0]
 800638c:	e015      	b.n	80063ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800638e:	4b24      	ldr	r3, [pc, #144]	; (8006420 <HAL_RCC_OscConfig+0x244>)
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006394:	f7fc fe38 	bl	8003008 <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800639c:	f7fc fe34 	bl	8003008 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e187      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ae:	4b1b      	ldr	r3, [pc, #108]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1f0      	bne.n	800639c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0308 	and.w	r3, r3, #8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d036      	beq.n	8006434 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d016      	beq.n	80063fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ce:	4b15      	ldr	r3, [pc, #84]	; (8006424 <HAL_RCC_OscConfig+0x248>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d4:	f7fc fe18 	bl	8003008 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063dc:	f7fc fe14 	bl	8003008 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e167      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <HAL_RCC_OscConfig+0x240>)
 80063f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f0      	beq.n	80063dc <HAL_RCC_OscConfig+0x200>
 80063fa:	e01b      	b.n	8006434 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063fc:	4b09      	ldr	r3, [pc, #36]	; (8006424 <HAL_RCC_OscConfig+0x248>)
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006402:	f7fc fe01 	bl	8003008 <HAL_GetTick>
 8006406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006408:	e00e      	b.n	8006428 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800640a:	f7fc fdfd 	bl	8003008 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d907      	bls.n	8006428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e150      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
 800641c:	40023800 	.word	0x40023800
 8006420:	42470000 	.word	0x42470000
 8006424:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006428:	4b88      	ldr	r3, [pc, #544]	; (800664c <HAL_RCC_OscConfig+0x470>)
 800642a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1ea      	bne.n	800640a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 8097 	beq.w	8006570 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006442:	2300      	movs	r3, #0
 8006444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006446:	4b81      	ldr	r3, [pc, #516]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10f      	bne.n	8006472 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006452:	2300      	movs	r3, #0
 8006454:	60bb      	str	r3, [r7, #8]
 8006456:	4b7d      	ldr	r3, [pc, #500]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	4a7c      	ldr	r2, [pc, #496]	; (800664c <HAL_RCC_OscConfig+0x470>)
 800645c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006460:	6413      	str	r3, [r2, #64]	; 0x40
 8006462:	4b7a      	ldr	r3, [pc, #488]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646a:	60bb      	str	r3, [r7, #8]
 800646c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800646e:	2301      	movs	r3, #1
 8006470:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006472:	4b77      	ldr	r3, [pc, #476]	; (8006650 <HAL_RCC_OscConfig+0x474>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d118      	bne.n	80064b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800647e:	4b74      	ldr	r3, [pc, #464]	; (8006650 <HAL_RCC_OscConfig+0x474>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a73      	ldr	r2, [pc, #460]	; (8006650 <HAL_RCC_OscConfig+0x474>)
 8006484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800648a:	f7fc fdbd 	bl	8003008 <HAL_GetTick>
 800648e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006490:	e008      	b.n	80064a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006492:	f7fc fdb9 	bl	8003008 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e10c      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064a4:	4b6a      	ldr	r3, [pc, #424]	; (8006650 <HAL_RCC_OscConfig+0x474>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0f0      	beq.n	8006492 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d106      	bne.n	80064c6 <HAL_RCC_OscConfig+0x2ea>
 80064b8:	4b64      	ldr	r3, [pc, #400]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064bc:	4a63      	ldr	r2, [pc, #396]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	6713      	str	r3, [r2, #112]	; 0x70
 80064c4:	e01c      	b.n	8006500 <HAL_RCC_OscConfig+0x324>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2b05      	cmp	r3, #5
 80064cc:	d10c      	bne.n	80064e8 <HAL_RCC_OscConfig+0x30c>
 80064ce:	4b5f      	ldr	r3, [pc, #380]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d2:	4a5e      	ldr	r2, [pc, #376]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064d4:	f043 0304 	orr.w	r3, r3, #4
 80064d8:	6713      	str	r3, [r2, #112]	; 0x70
 80064da:	4b5c      	ldr	r3, [pc, #368]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064de:	4a5b      	ldr	r2, [pc, #364]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064e0:	f043 0301 	orr.w	r3, r3, #1
 80064e4:	6713      	str	r3, [r2, #112]	; 0x70
 80064e6:	e00b      	b.n	8006500 <HAL_RCC_OscConfig+0x324>
 80064e8:	4b58      	ldr	r3, [pc, #352]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ec:	4a57      	ldr	r2, [pc, #348]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064ee:	f023 0301 	bic.w	r3, r3, #1
 80064f2:	6713      	str	r3, [r2, #112]	; 0x70
 80064f4:	4b55      	ldr	r3, [pc, #340]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f8:	4a54      	ldr	r2, [pc, #336]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80064fa:	f023 0304 	bic.w	r3, r3, #4
 80064fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d015      	beq.n	8006534 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006508:	f7fc fd7e 	bl	8003008 <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800650e:	e00a      	b.n	8006526 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006510:	f7fc fd7a 	bl	8003008 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	f241 3288 	movw	r2, #5000	; 0x1388
 800651e:	4293      	cmp	r3, r2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e0cb      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006526:	4b49      	ldr	r3, [pc, #292]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0ee      	beq.n	8006510 <HAL_RCC_OscConfig+0x334>
 8006532:	e014      	b.n	800655e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006534:	f7fc fd68 	bl	8003008 <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800653a:	e00a      	b.n	8006552 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800653c:	f7fc fd64 	bl	8003008 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	f241 3288 	movw	r2, #5000	; 0x1388
 800654a:	4293      	cmp	r3, r2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e0b5      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006552:	4b3e      	ldr	r3, [pc, #248]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1ee      	bne.n	800653c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800655e:	7dfb      	ldrb	r3, [r7, #23]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d105      	bne.n	8006570 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006564:	4b39      	ldr	r3, [pc, #228]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006568:	4a38      	ldr	r2, [pc, #224]	; (800664c <HAL_RCC_OscConfig+0x470>)
 800656a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800656e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 80a1 	beq.w	80066bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800657a:	4b34      	ldr	r3, [pc, #208]	; (800664c <HAL_RCC_OscConfig+0x470>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 030c 	and.w	r3, r3, #12
 8006582:	2b08      	cmp	r3, #8
 8006584:	d05c      	beq.n	8006640 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d141      	bne.n	8006612 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800658e:	4b31      	ldr	r3, [pc, #196]	; (8006654 <HAL_RCC_OscConfig+0x478>)
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006594:	f7fc fd38 	bl	8003008 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800659c:	f7fc fd34 	bl	8003008 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e087      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ae:	4b27      	ldr	r3, [pc, #156]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f0      	bne.n	800659c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69da      	ldr	r2, [r3, #28]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	019b      	lsls	r3, r3, #6
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d0:	085b      	lsrs	r3, r3, #1
 80065d2:	3b01      	subs	r3, #1
 80065d4:	041b      	lsls	r3, r3, #16
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	061b      	lsls	r3, r3, #24
 80065de:	491b      	ldr	r1, [pc, #108]	; (800664c <HAL_RCC_OscConfig+0x470>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065e4:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <HAL_RCC_OscConfig+0x478>)
 80065e6:	2201      	movs	r2, #1
 80065e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ea:	f7fc fd0d 	bl	8003008 <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065f2:	f7fc fd09 	bl	8003008 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e05c      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006604:	4b11      	ldr	r3, [pc, #68]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0f0      	beq.n	80065f2 <HAL_RCC_OscConfig+0x416>
 8006610:	e054      	b.n	80066bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006612:	4b10      	ldr	r3, [pc, #64]	; (8006654 <HAL_RCC_OscConfig+0x478>)
 8006614:	2200      	movs	r2, #0
 8006616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006618:	f7fc fcf6 	bl	8003008 <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006620:	f7fc fcf2 	bl	8003008 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e045      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006632:	4b06      	ldr	r3, [pc, #24]	; (800664c <HAL_RCC_OscConfig+0x470>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1f0      	bne.n	8006620 <HAL_RCC_OscConfig+0x444>
 800663e:	e03d      	b.n	80066bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d107      	bne.n	8006658 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e038      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
 800664c:	40023800 	.word	0x40023800
 8006650:	40007000 	.word	0x40007000
 8006654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006658:	4b1b      	ldr	r3, [pc, #108]	; (80066c8 <HAL_RCC_OscConfig+0x4ec>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d028      	beq.n	80066b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006670:	429a      	cmp	r2, r3
 8006672:	d121      	bne.n	80066b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667e:	429a      	cmp	r2, r3
 8006680:	d11a      	bne.n	80066b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006688:	4013      	ands	r3, r2
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800668e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006690:	4293      	cmp	r3, r2
 8006692:	d111      	bne.n	80066b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669e:	085b      	lsrs	r3, r3, #1
 80066a0:	3b01      	subs	r3, #1
 80066a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d107      	bne.n	80066b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d001      	beq.n	80066bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e000      	b.n	80066be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40023800 	.word	0x40023800

080066cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e0cc      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066e0:	4b68      	ldr	r3, [pc, #416]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d90c      	bls.n	8006708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ee:	4b65      	ldr	r3, [pc, #404]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f6:	4b63      	ldr	r3, [pc, #396]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d001      	beq.n	8006708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e0b8      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d020      	beq.n	8006756 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006720:	4b59      	ldr	r3, [pc, #356]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	4a58      	ldr	r2, [pc, #352]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006726:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800672a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0308 	and.w	r3, r3, #8
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006738:	4b53      	ldr	r3, [pc, #332]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	4a52      	ldr	r2, [pc, #328]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800673e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006742:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006744:	4b50      	ldr	r3, [pc, #320]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	494d      	ldr	r1, [pc, #308]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006752:	4313      	orrs	r3, r2
 8006754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d044      	beq.n	80067ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d107      	bne.n	800677a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800676a:	4b47      	ldr	r3, [pc, #284]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d119      	bne.n	80067aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e07f      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d003      	beq.n	800678a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006786:	2b03      	cmp	r3, #3
 8006788:	d107      	bne.n	800679a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800678a:	4b3f      	ldr	r3, [pc, #252]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e06f      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800679a:	4b3b      	ldr	r3, [pc, #236]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e067      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067aa:	4b37      	ldr	r3, [pc, #220]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f023 0203 	bic.w	r2, r3, #3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	4934      	ldr	r1, [pc, #208]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067bc:	f7fc fc24 	bl	8003008 <HAL_GetTick>
 80067c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c2:	e00a      	b.n	80067da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067c4:	f7fc fc20 	bl	8003008 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e04f      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067da:	4b2b      	ldr	r3, [pc, #172]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 020c 	and.w	r2, r3, #12
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d1eb      	bne.n	80067c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067ec:	4b25      	ldr	r3, [pc, #148]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d20c      	bcs.n	8006814 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067fa:	4b22      	ldr	r3, [pc, #136]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006802:	4b20      	ldr	r3, [pc, #128]	; (8006884 <HAL_RCC_ClockConfig+0x1b8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	d001      	beq.n	8006814 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e032      	b.n	800687a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006820:	4b19      	ldr	r3, [pc, #100]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	4916      	ldr	r1, [pc, #88]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800682e:	4313      	orrs	r3, r2
 8006830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800683e:	4b12      	ldr	r3, [pc, #72]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	490e      	ldr	r1, [pc, #56]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800684e:	4313      	orrs	r3, r2
 8006850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006852:	f000 f821 	bl	8006898 <HAL_RCC_GetSysClockFreq>
 8006856:	4602      	mov	r2, r0
 8006858:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <HAL_RCC_ClockConfig+0x1bc>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	091b      	lsrs	r3, r3, #4
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	490a      	ldr	r1, [pc, #40]	; (800688c <HAL_RCC_ClockConfig+0x1c0>)
 8006864:	5ccb      	ldrb	r3, [r1, r3]
 8006866:	fa22 f303 	lsr.w	r3, r2, r3
 800686a:	4a09      	ldr	r2, [pc, #36]	; (8006890 <HAL_RCC_ClockConfig+0x1c4>)
 800686c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800686e:	4b09      	ldr	r3, [pc, #36]	; (8006894 <HAL_RCC_ClockConfig+0x1c8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f7fc fb84 	bl	8002f80 <HAL_InitTick>

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	40023c00 	.word	0x40023c00
 8006888:	40023800 	.word	0x40023800
 800688c:	0800be44 	.word	0x0800be44
 8006890:	20000010 	.word	0x20000010
 8006894:	20000014 	.word	0x20000014

08006898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800689c:	b094      	sub	sp, #80	; 0x50
 800689e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	647b      	str	r3, [r7, #68]	; 0x44
 80068a4:	2300      	movs	r3, #0
 80068a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068a8:	2300      	movs	r3, #0
 80068aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068b0:	4b79      	ldr	r3, [pc, #484]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 030c 	and.w	r3, r3, #12
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d00d      	beq.n	80068d8 <HAL_RCC_GetSysClockFreq+0x40>
 80068bc:	2b08      	cmp	r3, #8
 80068be:	f200 80e1 	bhi.w	8006a84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <HAL_RCC_GetSysClockFreq+0x34>
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d003      	beq.n	80068d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80068ca:	e0db      	b.n	8006a84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068cc:	4b73      	ldr	r3, [pc, #460]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x204>)
 80068ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80068d0:	e0db      	b.n	8006a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068d2:	4b73      	ldr	r3, [pc, #460]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x208>)
 80068d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068d6:	e0d8      	b.n	8006a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068d8:	4b6f      	ldr	r3, [pc, #444]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068e2:	4b6d      	ldr	r3, [pc, #436]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d063      	beq.n	80069b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068ee:	4b6a      	ldr	r3, [pc, #424]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	099b      	lsrs	r3, r3, #6
 80068f4:	2200      	movs	r2, #0
 80068f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80068f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006900:	633b      	str	r3, [r7, #48]	; 0x30
 8006902:	2300      	movs	r3, #0
 8006904:	637b      	str	r3, [r7, #52]	; 0x34
 8006906:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800690a:	4622      	mov	r2, r4
 800690c:	462b      	mov	r3, r5
 800690e:	f04f 0000 	mov.w	r0, #0
 8006912:	f04f 0100 	mov.w	r1, #0
 8006916:	0159      	lsls	r1, r3, #5
 8006918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800691c:	0150      	lsls	r0, r2, #5
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	4621      	mov	r1, r4
 8006924:	1a51      	subs	r1, r2, r1
 8006926:	6139      	str	r1, [r7, #16]
 8006928:	4629      	mov	r1, r5
 800692a:	eb63 0301 	sbc.w	r3, r3, r1
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	f04f 0200 	mov.w	r2, #0
 8006934:	f04f 0300 	mov.w	r3, #0
 8006938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800693c:	4659      	mov	r1, fp
 800693e:	018b      	lsls	r3, r1, #6
 8006940:	4651      	mov	r1, sl
 8006942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006946:	4651      	mov	r1, sl
 8006948:	018a      	lsls	r2, r1, #6
 800694a:	4651      	mov	r1, sl
 800694c:	ebb2 0801 	subs.w	r8, r2, r1
 8006950:	4659      	mov	r1, fp
 8006952:	eb63 0901 	sbc.w	r9, r3, r1
 8006956:	f04f 0200 	mov.w	r2, #0
 800695a:	f04f 0300 	mov.w	r3, #0
 800695e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800696a:	4690      	mov	r8, r2
 800696c:	4699      	mov	r9, r3
 800696e:	4623      	mov	r3, r4
 8006970:	eb18 0303 	adds.w	r3, r8, r3
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	462b      	mov	r3, r5
 8006978:	eb49 0303 	adc.w	r3, r9, r3
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	f04f 0200 	mov.w	r2, #0
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800698a:	4629      	mov	r1, r5
 800698c:	024b      	lsls	r3, r1, #9
 800698e:	4621      	mov	r1, r4
 8006990:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006994:	4621      	mov	r1, r4
 8006996:	024a      	lsls	r2, r1, #9
 8006998:	4610      	mov	r0, r2
 800699a:	4619      	mov	r1, r3
 800699c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800699e:	2200      	movs	r2, #0
 80069a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069a8:	f7f9 fc1e 	bl	80001e8 <__aeabi_uldivmod>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4613      	mov	r3, r2
 80069b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069b4:	e058      	b.n	8006a68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069b6:	4b38      	ldr	r3, [pc, #224]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	099b      	lsrs	r3, r3, #6
 80069bc:	2200      	movs	r2, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	4611      	mov	r1, r2
 80069c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069c6:	623b      	str	r3, [r7, #32]
 80069c8:	2300      	movs	r3, #0
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
 80069cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069d0:	4642      	mov	r2, r8
 80069d2:	464b      	mov	r3, r9
 80069d4:	f04f 0000 	mov.w	r0, #0
 80069d8:	f04f 0100 	mov.w	r1, #0
 80069dc:	0159      	lsls	r1, r3, #5
 80069de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069e2:	0150      	lsls	r0, r2, #5
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4641      	mov	r1, r8
 80069ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80069ee:	4649      	mov	r1, r9
 80069f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a08:	ebb2 040a 	subs.w	r4, r2, sl
 8006a0c:	eb63 050b 	sbc.w	r5, r3, fp
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	f04f 0300 	mov.w	r3, #0
 8006a18:	00eb      	lsls	r3, r5, #3
 8006a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a1e:	00e2      	lsls	r2, r4, #3
 8006a20:	4614      	mov	r4, r2
 8006a22:	461d      	mov	r5, r3
 8006a24:	4643      	mov	r3, r8
 8006a26:	18e3      	adds	r3, r4, r3
 8006a28:	603b      	str	r3, [r7, #0]
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	eb45 0303 	adc.w	r3, r5, r3
 8006a30:	607b      	str	r3, [r7, #4]
 8006a32:	f04f 0200 	mov.w	r2, #0
 8006a36:	f04f 0300 	mov.w	r3, #0
 8006a3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a3e:	4629      	mov	r1, r5
 8006a40:	028b      	lsls	r3, r1, #10
 8006a42:	4621      	mov	r1, r4
 8006a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a48:	4621      	mov	r1, r4
 8006a4a:	028a      	lsls	r2, r1, #10
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a52:	2200      	movs	r2, #0
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	61fa      	str	r2, [r7, #28]
 8006a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a5c:	f7f9 fbc4 	bl	80001e8 <__aeabi_uldivmod>
 8006a60:	4602      	mov	r2, r0
 8006a62:	460b      	mov	r3, r1
 8006a64:	4613      	mov	r3, r2
 8006a66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a68:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	0c1b      	lsrs	r3, r3, #16
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	3301      	adds	r3, #1
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a82:	e002      	b.n	8006a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a84:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x204>)
 8006a86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3750      	adds	r7, #80	; 0x50
 8006a90:	46bd      	mov	sp, r7
 8006a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a96:	bf00      	nop
 8006a98:	40023800 	.word	0x40023800
 8006a9c:	00f42400 	.word	0x00f42400
 8006aa0:	007a1200 	.word	0x007a1200

08006aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006aa8:	4b03      	ldr	r3, [pc, #12]	; (8006ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	20000010 	.word	0x20000010

08006abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ac0:	f7ff fff0 	bl	8006aa4 <HAL_RCC_GetHCLKFreq>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	4b05      	ldr	r3, [pc, #20]	; (8006adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	0a9b      	lsrs	r3, r3, #10
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	4903      	ldr	r1, [pc, #12]	; (8006ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ad2:	5ccb      	ldrb	r3, [r1, r3]
 8006ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	0800be54 	.word	0x0800be54

08006ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ae8:	f7ff ffdc 	bl	8006aa4 <HAL_RCC_GetHCLKFreq>
 8006aec:	4602      	mov	r2, r0
 8006aee:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	0b5b      	lsrs	r3, r3, #13
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	4903      	ldr	r1, [pc, #12]	; (8006b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006afa:	5ccb      	ldrb	r3, [r1, r3]
 8006afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40023800 	.word	0x40023800
 8006b08:	0800be54 	.word	0x0800be54

08006b0c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d105      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d038      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b34:	4b68      	ldr	r3, [pc, #416]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b3a:	f7fc fa65 	bl	8003008 <HAL_GetTick>
 8006b3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b40:	e008      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b42:	f7fc fa61 	bl	8003008 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e0bd      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b54:	4b61      	ldr	r3, [pc, #388]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1f0      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	019b      	lsls	r3, r3, #6
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	071b      	lsls	r3, r3, #28
 8006b72:	495a      	ldr	r1, [pc, #360]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b7a:	4b57      	ldr	r3, [pc, #348]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b80:	f7fc fa42 	bl	8003008 <HAL_GetTick>
 8006b84:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b86:	e008      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b88:	f7fc fa3e 	bl	8003008 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d901      	bls.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e09a      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b9a:	4b50      	ldr	r3, [pc, #320]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0f0      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 8083 	beq.w	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	4b48      	ldr	r3, [pc, #288]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbc:	4a47      	ldr	r2, [pc, #284]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8006bc4:	4b45      	ldr	r3, [pc, #276]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bcc:	60fb      	str	r3, [r7, #12]
 8006bce:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006bd0:	4b43      	ldr	r3, [pc, #268]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a42      	ldr	r2, [pc, #264]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bda:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bdc:	f7fc fa14 	bl	8003008 <HAL_GetTick>
 8006be0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006be4:	f7fc fa10 	bl	8003008 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e06c      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006bf6:	4b3a      	ldr	r3, [pc, #232]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0f0      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c02:	4b36      	ldr	r3, [pc, #216]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c0a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d02f      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d028      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c20:	4b2e      	ldr	r3, [pc, #184]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c28:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c30:	4b2c      	ldr	r3, [pc, #176]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c36:	4a29      	ldr	r2, [pc, #164]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c3c:	4b27      	ldr	r3, [pc, #156]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d114      	bne.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c48:	f7fc f9de 	bl	8003008 <HAL_GetTick>
 8006c4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c4e:	e00a      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c50:	f7fc f9da 	bl	8003008 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e034      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c66:	4b1d      	ldr	r3, [pc, #116]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0ee      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c7e:	d10d      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006c80:	4b16      	ldr	r3, [pc, #88]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c94:	4911      	ldr	r1, [pc, #68]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	608b      	str	r3, [r1, #8]
 8006c9a:	e005      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006c9c:	4b0f      	ldr	r3, [pc, #60]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	4a0e      	ldr	r2, [pc, #56]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ca2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ca6:	6093      	str	r3, [r2, #8]
 8006ca8:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006caa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cb4:	4909      	ldr	r1, [pc, #36]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0308 	and.w	r3, r3, #8
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	7d1a      	ldrb	r2, [r3, #20]
 8006cca:	4b07      	ldr	r3, [pc, #28]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006ccc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	42470068 	.word	0x42470068
 8006cdc:	40023800 	.word	0x40023800
 8006ce0:	40007000 	.word	0x40007000
 8006ce4:	42470e40 	.word	0x42470e40
 8006ce8:	424711e0 	.word	0x424711e0

08006cec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d140      	bne.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006d0a:	4b24      	ldr	r3, [pc, #144]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d005      	beq.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d131      	bne.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d20:	4b1f      	ldr	r3, [pc, #124]	; (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006d22:	617b      	str	r3, [r7, #20]
          break;
 8006d24:	e031      	b.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006d26:	4b1d      	ldr	r3, [pc, #116]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d32:	d109      	bne.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006d34:	4b19      	ldr	r3, [pc, #100]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d3e:	4a19      	ldr	r2, [pc, #100]	; (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d44:	613b      	str	r3, [r7, #16]
 8006d46:	e008      	b.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006d48:	4b14      	ldr	r3, [pc, #80]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d52:	4a15      	ldr	r2, [pc, #84]	; (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d58:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006d5a:	4b10      	ldr	r3, [pc, #64]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d60:	099b      	lsrs	r3, r3, #6
 8006d62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	fb02 f303 	mul.w	r3, r2, r3
 8006d6c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006d6e:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d74:	0f1b      	lsrs	r3, r3, #28
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d80:	617b      	str	r3, [r7, #20]
          break;
 8006d82:	e002      	b.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	617b      	str	r3, [r7, #20]
          break;
 8006d88:	bf00      	nop
        }
      }
      break;
 8006d8a:	bf00      	nop
    }
  }
  return frequency;
 8006d8c:	697b      	ldr	r3, [r7, #20]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40023800 	.word	0x40023800
 8006da0:	00bb8000 	.word	0x00bb8000
 8006da4:	007a1200 	.word	0x007a1200
 8006da8:	00f42400 	.word	0x00f42400

08006dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e07b      	b.n	8006eb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d108      	bne.n	8006dd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dce:	d009      	beq.n	8006de4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	61da      	str	r2, [r3, #28]
 8006dd6:	e005      	b.n	8006de4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d106      	bne.n	8006e04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7fb fe6a 	bl	8002ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e54:	431a      	orrs	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e68:	ea42 0103 	orr.w	r1, r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	0c1b      	lsrs	r3, r3, #16
 8006e82:	f003 0104 	and.w	r1, r3, #4
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8a:	f003 0210 	and.w	r2, r3, #16
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69da      	ldr	r2, [r3, #28]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ea4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b082      	sub	sp, #8
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e03f      	b.n	8006f50 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d106      	bne.n	8006eea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7fb fe3f 	bl	8002b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2224      	movs	r2, #36	; 0x24
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68da      	ldr	r2, [r3, #12]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 ff42 	bl	8007d8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691a      	ldr	r2, [r3, #16]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695a      	ldr	r2, [r3, #20]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08c      	sub	sp, #48	; 0x30
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	4613      	mov	r3, r2
 8006f64:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	d165      	bne.n	800703e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d002      	beq.n	8006f7e <HAL_UART_Transmit_DMA+0x26>
 8006f78:	88fb      	ldrh	r3, [r7, #6]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e05e      	b.n	8007040 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_UART_Transmit_DMA+0x38>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e057      	b.n	8007040 <HAL_UART_Transmit_DMA+0xe8>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	88fa      	ldrh	r2, [r7, #6]
 8006fa2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	88fa      	ldrh	r2, [r7, #6]
 8006fa8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2221      	movs	r2, #33	; 0x21
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbc:	4a22      	ldr	r2, [pc, #136]	; (8007048 <HAL_UART_Transmit_DMA+0xf0>)
 8006fbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc4:	4a21      	ldr	r2, [pc, #132]	; (800704c <HAL_UART_Transmit_DMA+0xf4>)
 8006fc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fcc:	4a20      	ldr	r2, [pc, #128]	; (8007050 <HAL_UART_Transmit_DMA+0xf8>)
 8006fce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006fd8:	f107 0308 	add.w	r3, r7, #8
 8006fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe4:	6819      	ldr	r1, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3304      	adds	r3, #4
 8006fec:	461a      	mov	r2, r3
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	f7fc f9fa 	bl	80033e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ffc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3314      	adds	r3, #20
 800700c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	617b      	str	r3, [r7, #20]
   return(result);
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701c:	62bb      	str	r3, [r7, #40]	; 0x28
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3314      	adds	r3, #20
 8007024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007026:	627a      	str	r2, [r7, #36]	; 0x24
 8007028:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	6a39      	ldr	r1, [r7, #32]
 800702c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	61fb      	str	r3, [r7, #28]
   return(result);
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e5      	bne.n	8007006 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	e000      	b.n	8007040 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800703e:	2302      	movs	r3, #2
  }
}
 8007040:	4618      	mov	r0, r3
 8007042:	3730      	adds	r7, #48	; 0x30
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	08007625 	.word	0x08007625
 800704c:	080076bf 	.word	0x080076bf
 8007050:	08007837 	.word	0x08007837

08007054 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	4613      	mov	r3, r2
 8007060:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b20      	cmp	r3, #32
 800706c:	d11d      	bne.n	80070aa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <HAL_UART_Receive_DMA+0x26>
 8007074:	88fb      	ldrh	r3, [r7, #6]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e016      	b.n	80070ac <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_UART_Receive_DMA+0x38>
 8007088:	2302      	movs	r3, #2
 800708a:	e00f      	b.n	80070ac <HAL_UART_Receive_DMA+0x58>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800709a:	88fb      	ldrh	r3, [r7, #6]
 800709c:	461a      	mov	r2, r3
 800709e:	68b9      	ldr	r1, [r7, #8]
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 fc13 	bl	80078cc <UART_Start_Receive_DMA>
 80070a6:	4603      	mov	r3, r0
 80070a8:	e000      	b.n	80070ac <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80070aa:	2302      	movs	r3, #2
  }
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b0ba      	sub	sp, #232	; 0xe8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80070da:	2300      	movs	r3, #0
 80070dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80070f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10f      	bne.n	800711a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b00      	cmp	r3, #0
 8007104:	d009      	beq.n	800711a <HAL_UART_IRQHandler+0x66>
 8007106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fd7f 	bl	8007c16 <UART_Receive_IT>
      return;
 8007118:	e256      	b.n	80075c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800711a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 80de 	beq.w	80072e0 <HAL_UART_IRQHandler+0x22c>
 8007124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d106      	bne.n	800713e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007134:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 80d1 	beq.w	80072e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800713e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00b      	beq.n	8007162 <HAL_UART_IRQHandler+0xae>
 800714a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800714e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715a:	f043 0201 	orr.w	r2, r3, #1
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007166:	f003 0304 	and.w	r3, r3, #4
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00b      	beq.n	8007186 <HAL_UART_IRQHandler+0xd2>
 800716e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d005      	beq.n	8007186 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	f043 0202 	orr.w	r2, r3, #2
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00b      	beq.n	80071aa <HAL_UART_IRQHandler+0xf6>
 8007192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	f043 0204 	orr.w	r2, r3, #4
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ae:	f003 0308 	and.w	r3, r3, #8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d011      	beq.n	80071da <HAL_UART_IRQHandler+0x126>
 80071b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d105      	bne.n	80071ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d005      	beq.n	80071da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	f043 0208 	orr.w	r2, r3, #8
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 81ed 	beq.w	80075be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e8:	f003 0320 	and.w	r3, r3, #32
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d008      	beq.n	8007202 <HAL_UART_IRQHandler+0x14e>
 80071f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f4:	f003 0320 	and.w	r3, r3, #32
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fd0a 	bl	8007c16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720c:	2b40      	cmp	r3, #64	; 0x40
 800720e:	bf0c      	ite	eq
 8007210:	2301      	moveq	r3, #1
 8007212:	2300      	movne	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d103      	bne.n	800722e <HAL_UART_IRQHandler+0x17a>
 8007226:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800722a:	2b00      	cmp	r3, #0
 800722c:	d04f      	beq.n	80072ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fc12 	bl	8007a58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723e:	2b40      	cmp	r3, #64	; 0x40
 8007240:	d141      	bne.n	80072c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3314      	adds	r3, #20
 8007248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007250:	e853 3f00 	ldrex	r3, [r3]
 8007254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800725c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3314      	adds	r3, #20
 800726a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800726e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800727a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800727e:	e841 2300 	strex	r3, r2, [r1]
 8007282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1d9      	bne.n	8007242 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007292:	2b00      	cmp	r3, #0
 8007294:	d013      	beq.n	80072be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	4a7d      	ldr	r2, [pc, #500]	; (8007490 <HAL_UART_IRQHandler+0x3dc>)
 800729c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fc f968 	bl	8003578 <HAL_DMA_Abort_IT>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d016      	beq.n	80072dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072b8:	4610      	mov	r0, r2
 80072ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072bc:	e00e      	b.n	80072dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f99a 	bl	80075f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c4:	e00a      	b.n	80072dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f996 	bl	80075f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072cc:	e006      	b.n	80072dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f992 	bl	80075f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80072da:	e170      	b.n	80075be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072dc:	bf00      	nop
    return;
 80072de:	e16e      	b.n	80075be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	f040 814a 	bne.w	800757e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ee:	f003 0310 	and.w	r3, r3, #16
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 8143 	beq.w	800757e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072fc:	f003 0310 	and.w	r3, r3, #16
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 813c 	beq.w	800757e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007306:	2300      	movs	r3, #0
 8007308:	60bb      	str	r3, [r7, #8]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	60bb      	str	r3, [r7, #8]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	60bb      	str	r3, [r7, #8]
 800731a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007326:	2b40      	cmp	r3, #64	; 0x40
 8007328:	f040 80b4 	bne.w	8007494 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007338:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 8140 	beq.w	80075c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800734a:	429a      	cmp	r2, r3
 800734c:	f080 8139 	bcs.w	80075c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007356:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007362:	f000 8088 	beq.w	8007476 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	330c      	adds	r3, #12
 800736c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800737c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007384:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	330c      	adds	r3, #12
 800738e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007392:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800739e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073a2:	e841 2300 	strex	r3, r2, [r1]
 80073a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1d9      	bne.n	8007366 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3314      	adds	r3, #20
 80073b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073bc:	e853 3f00 	ldrex	r3, [r3]
 80073c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073c4:	f023 0301 	bic.w	r3, r3, #1
 80073c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3314      	adds	r3, #20
 80073d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e1      	bne.n	80073b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3314      	adds	r3, #20
 80073f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073f8:	e853 3f00 	ldrex	r3, [r3]
 80073fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3314      	adds	r3, #20
 800740e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007412:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007414:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007416:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007418:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1e3      	bne.n	80073ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2220      	movs	r2, #32
 800742a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	330c      	adds	r3, #12
 800743a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007446:	f023 0310 	bic.w	r3, r3, #16
 800744a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	330c      	adds	r3, #12
 8007454:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007458:	65ba      	str	r2, [r7, #88]	; 0x58
 800745a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800745e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007460:	e841 2300 	strex	r3, r2, [r1]
 8007464:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1e3      	bne.n	8007434 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	4618      	mov	r0, r3
 8007472:	f7fc f811 	bl	8003498 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800747e:	b29b      	uxth	r3, r3
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	b29b      	uxth	r3, r3
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f8c0 	bl	800760c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800748c:	e099      	b.n	80075c2 <HAL_UART_IRQHandler+0x50e>
 800748e:	bf00      	nop
 8007490:	08007b1f 	.word	0x08007b1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800749c:	b29b      	uxth	r3, r3
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 808b 	beq.w	80075c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80074b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 8086 	beq.w	80075c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	330c      	adds	r3, #12
 80074c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	330c      	adds	r3, #12
 80074da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80074de:	647a      	str	r2, [r7, #68]	; 0x44
 80074e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e3      	bne.n	80074ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3314      	adds	r3, #20
 80074f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	623b      	str	r3, [r7, #32]
   return(result);
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	f023 0301 	bic.w	r3, r3, #1
 8007508:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3314      	adds	r3, #20
 8007512:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007516:	633a      	str	r2, [r7, #48]	; 0x30
 8007518:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800751c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e3      	bne.n	80074f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2220      	movs	r2, #32
 800752e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	330c      	adds	r3, #12
 800753e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	e853 3f00 	ldrex	r3, [r3]
 8007546:	60fb      	str	r3, [r7, #12]
   return(result);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f023 0310 	bic.w	r3, r3, #16
 800754e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	330c      	adds	r3, #12
 8007558:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800755c:	61fa      	str	r2, [r7, #28]
 800755e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	69b9      	ldr	r1, [r7, #24]
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	e841 2300 	strex	r3, r2, [r1]
 8007568:	617b      	str	r3, [r7, #20]
   return(result);
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e3      	bne.n	8007538 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f848 	bl	800760c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800757c:	e023      	b.n	80075c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800757e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007586:	2b00      	cmp	r3, #0
 8007588:	d009      	beq.n	800759e <HAL_UART_IRQHandler+0x4ea>
 800758a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800758e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fad5 	bl	8007b46 <UART_Transmit_IT>
    return;
 800759c:	e014      	b.n	80075c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800759e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00e      	beq.n	80075c8 <HAL_UART_IRQHandler+0x514>
 80075aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d008      	beq.n	80075c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fb15 	bl	8007be6 <UART_EndTransmit_IT>
    return;
 80075bc:	e004      	b.n	80075c8 <HAL_UART_IRQHandler+0x514>
    return;
 80075be:	bf00      	nop
 80075c0:	e002      	b.n	80075c8 <HAL_UART_IRQHandler+0x514>
      return;
 80075c2:	bf00      	nop
 80075c4:	e000      	b.n	80075c8 <HAL_UART_IRQHandler+0x514>
      return;
 80075c6:	bf00      	nop
  }
}
 80075c8:	37e8      	adds	r7, #232	; 0xe8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop

080075d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b090      	sub	sp, #64	; 0x40
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007630:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800763c:	2b00      	cmp	r3, #0
 800763e:	d137      	bne.n	80076b0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007642:	2200      	movs	r2, #0
 8007644:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3314      	adds	r3, #20
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	623b      	str	r3, [r7, #32]
   return(result);
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800765c:	63bb      	str	r3, [r7, #56]	; 0x38
 800765e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3314      	adds	r3, #20
 8007664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007666:	633a      	str	r2, [r7, #48]	; 0x30
 8007668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800766c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e5      	bne.n	8007646 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800767a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	330c      	adds	r3, #12
 8007680:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	e853 3f00 	ldrex	r3, [r3]
 8007688:	60fb      	str	r3, [r7, #12]
   return(result);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
 8007692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	330c      	adds	r3, #12
 8007698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800769a:	61fa      	str	r2, [r7, #28]
 800769c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769e:	69b9      	ldr	r1, [r7, #24]
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	617b      	str	r3, [r7, #20]
   return(result);
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e5      	bne.n	800767a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076ae:	e002      	b.n	80076b6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80076b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80076b2:	f7fa fadb 	bl	8001c6c <HAL_UART_TxCpltCallback>
}
 80076b6:	bf00      	nop
 80076b8:	3740      	adds	r7, #64	; 0x40
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f7ff ff7f 	bl	80075d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076d2:	bf00      	nop
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b09c      	sub	sp, #112	; 0x70
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d172      	bne.n	80077dc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80076f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f8:	2200      	movs	r2, #0
 80076fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007706:	e853 3f00 	ldrex	r3, [r3]
 800770a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800770c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800770e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007712:	66bb      	str	r3, [r7, #104]	; 0x68
 8007714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	330c      	adds	r3, #12
 800771a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800771c:	65ba      	str	r2, [r7, #88]	; 0x58
 800771e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007722:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007724:	e841 2300 	strex	r3, r2, [r1]
 8007728:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800772a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1e5      	bne.n	80076fc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3314      	adds	r3, #20
 8007736:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007742:	f023 0301 	bic.w	r3, r3, #1
 8007746:	667b      	str	r3, [r7, #100]	; 0x64
 8007748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3314      	adds	r3, #20
 800774e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007750:	647a      	str	r2, [r7, #68]	; 0x44
 8007752:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800775e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e5      	bne.n	8007730 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3314      	adds	r3, #20
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	e853 3f00 	ldrex	r3, [r3]
 8007772:	623b      	str	r3, [r7, #32]
   return(result);
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800777a:	663b      	str	r3, [r7, #96]	; 0x60
 800777c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3314      	adds	r3, #20
 8007782:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007784:	633a      	str	r2, [r7, #48]	; 0x30
 8007786:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800778a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e5      	bne.n	8007764 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800779a:	2220      	movs	r2, #32
 800779c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d119      	bne.n	80077dc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	330c      	adds	r3, #12
 80077ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f023 0310 	bic.w	r3, r3, #16
 80077be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	330c      	adds	r3, #12
 80077c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077c8:	61fa      	str	r2, [r7, #28]
 80077ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	69b9      	ldr	r1, [r7, #24]
 80077ce:	69fa      	ldr	r2, [r7, #28]
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	617b      	str	r3, [r7, #20]
   return(result);
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e5      	bne.n	80077a8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d106      	bne.n	80077f2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077e8:	4619      	mov	r1, r3
 80077ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80077ec:	f7ff ff0e 	bl	800760c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077f0:	e002      	b.n	80077f8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80077f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80077f4:	f7fa fa4c 	bl	8001c90 <HAL_UART_RxCpltCallback>
}
 80077f8:	bf00      	nop
 80077fa:	3770      	adds	r7, #112	; 0x70
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007812:	2b01      	cmp	r3, #1
 8007814:	d108      	bne.n	8007828 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800781a:	085b      	lsrs	r3, r3, #1
 800781c:	b29b      	uxth	r3, r3
 800781e:	4619      	mov	r1, r3
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f7ff fef3 	bl	800760c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007826:	e002      	b.n	800782e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7ff fedb 	bl	80075e4 <HAL_UART_RxHalfCpltCallback>
}
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800783e:	2300      	movs	r3, #0
 8007840:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007846:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007852:	2b80      	cmp	r3, #128	; 0x80
 8007854:	bf0c      	ite	eq
 8007856:	2301      	moveq	r3, #1
 8007858:	2300      	movne	r3, #0
 800785a:	b2db      	uxtb	r3, r3
 800785c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b21      	cmp	r3, #33	; 0x21
 8007868:	d108      	bne.n	800787c <UART_DMAError+0x46>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d005      	beq.n	800787c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2200      	movs	r2, #0
 8007874:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007876:	68b8      	ldr	r0, [r7, #8]
 8007878:	f000 f8c6 	bl	8007a08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007886:	2b40      	cmp	r3, #64	; 0x40
 8007888:	bf0c      	ite	eq
 800788a:	2301      	moveq	r3, #1
 800788c:	2300      	movne	r3, #0
 800788e:	b2db      	uxtb	r3, r3
 8007890:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b22      	cmp	r3, #34	; 0x22
 800789c:	d108      	bne.n	80078b0 <UART_DMAError+0x7a>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d005      	beq.n	80078b0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2200      	movs	r2, #0
 80078a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80078aa:	68b8      	ldr	r0, [r7, #8]
 80078ac:	f000 f8d4 	bl	8007a58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b4:	f043 0210 	orr.w	r2, r3, #16
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078bc:	68b8      	ldr	r0, [r7, #8]
 80078be:	f7ff fe9b 	bl	80075f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078c2:	bf00      	nop
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b098      	sub	sp, #96	; 0x60
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	4613      	mov	r3, r2
 80078d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	88fa      	ldrh	r2, [r7, #6]
 80078e4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2222      	movs	r2, #34	; 0x22
 80078f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	4a40      	ldr	r2, [pc, #256]	; (80079fc <UART_Start_Receive_DMA+0x130>)
 80078fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007900:	4a3f      	ldr	r2, [pc, #252]	; (8007a00 <UART_Start_Receive_DMA+0x134>)
 8007902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007908:	4a3e      	ldr	r2, [pc, #248]	; (8007a04 <UART_Start_Receive_DMA+0x138>)
 800790a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007910:	2200      	movs	r2, #0
 8007912:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007914:	f107 0308 	add.w	r3, r7, #8
 8007918:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3304      	adds	r3, #4
 8007924:	4619      	mov	r1, r3
 8007926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	88fb      	ldrh	r3, [r7, #6]
 800792c:	f7fb fd5c 	bl	80033e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007930:	2300      	movs	r3, #0
 8007932:	613b      	str	r3, [r7, #16]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	613b      	str	r3, [r7, #16]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	613b      	str	r3, [r7, #16]
 8007944:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d019      	beq.n	800798a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	330c      	adds	r3, #12
 800795c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800796c:	65bb      	str	r3, [r7, #88]	; 0x58
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	330c      	adds	r3, #12
 8007974:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007976:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007978:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800797c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800797e:	e841 2300 	strex	r3, r2, [r1]
 8007982:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1e5      	bne.n	8007956 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3314      	adds	r3, #20
 8007990:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007994:	e853 3f00 	ldrex	r3, [r3]
 8007998:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	f043 0301 	orr.w	r3, r3, #1
 80079a0:	657b      	str	r3, [r7, #84]	; 0x54
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3314      	adds	r3, #20
 80079a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079aa:	63ba      	str	r2, [r7, #56]	; 0x38
 80079ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80079b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079b2:	e841 2300 	strex	r3, r2, [r1]
 80079b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1e5      	bne.n	800798a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3314      	adds	r3, #20
 80079c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	e853 3f00 	ldrex	r3, [r3]
 80079cc:	617b      	str	r3, [r7, #20]
   return(result);
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079d4:	653b      	str	r3, [r7, #80]	; 0x50
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3314      	adds	r3, #20
 80079dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079de:	627a      	str	r2, [r7, #36]	; 0x24
 80079e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e2:	6a39      	ldr	r1, [r7, #32]
 80079e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e6:	e841 2300 	strex	r3, r2, [r1]
 80079ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1e5      	bne.n	80079be <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3760      	adds	r7, #96	; 0x60
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	080076db 	.word	0x080076db
 8007a00:	08007801 	.word	0x08007801
 8007a04:	08007837 	.word	0x08007837

08007a08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b089      	sub	sp, #36	; 0x24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	330c      	adds	r3, #12
 8007a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	e853 3f00 	ldrex	r3, [r3]
 8007a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a26:	61fb      	str	r3, [r7, #28]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	330c      	adds	r3, #12
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	61ba      	str	r2, [r7, #24]
 8007a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a34:	6979      	ldr	r1, [r7, #20]
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	e841 2300 	strex	r3, r2, [r1]
 8007a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1e5      	bne.n	8007a10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007a4c:	bf00      	nop
 8007a4e:	3724      	adds	r7, #36	; 0x24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b095      	sub	sp, #84	; 0x54
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	330c      	adds	r3, #12
 8007a66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	330c      	adds	r3, #12
 8007a7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a80:	643a      	str	r2, [r7, #64]	; 0x40
 8007a82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e5      	bne.n	8007a60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3314      	adds	r3, #20
 8007a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	f023 0301 	bic.w	r3, r3, #1
 8007aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3314      	adds	r3, #20
 8007ab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ab4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e5      	bne.n	8007a94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d119      	bne.n	8007b04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	330c      	adds	r3, #12
 8007ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	f023 0310 	bic.w	r3, r3, #16
 8007ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	330c      	adds	r3, #12
 8007aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007af0:	61ba      	str	r2, [r7, #24]
 8007af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	6979      	ldr	r1, [r7, #20]
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	613b      	str	r3, [r7, #16]
   return(result);
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e5      	bne.n	8007ad0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2220      	movs	r2, #32
 8007b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b12:	bf00      	nop
 8007b14:	3754      	adds	r7, #84	; 0x54
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f7ff fd5d 	bl	80075f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b3e:	bf00      	nop
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b46:	b480      	push	{r7}
 8007b48:	b085      	sub	sp, #20
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b21      	cmp	r3, #33	; 0x21
 8007b58:	d13e      	bne.n	8007bd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b62:	d114      	bne.n	8007b8e <UART_Transmit_IT+0x48>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d110      	bne.n	8007b8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	1c9a      	adds	r2, r3, #2
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	621a      	str	r2, [r3, #32]
 8007b8c:	e008      	b.n	8007ba0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	1c59      	adds	r1, r3, #1
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	6211      	str	r1, [r2, #32]
 8007b98:	781a      	ldrb	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	4619      	mov	r1, r3
 8007bae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10f      	bne.n	8007bd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68da      	ldr	r2, [r3, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	e000      	b.n	8007bda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007bd8:	2302      	movs	r3, #2
  }
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b082      	sub	sp, #8
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68da      	ldr	r2, [r3, #12]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bfc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7fa f830 	bl	8001c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b08c      	sub	sp, #48	; 0x30
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b22      	cmp	r3, #34	; 0x22
 8007c28:	f040 80ab 	bne.w	8007d82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c34:	d117      	bne.n	8007c66 <UART_Receive_IT+0x50>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d113      	bne.n	8007c66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5e:	1c9a      	adds	r2, r3, #2
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	629a      	str	r2, [r3, #40]	; 0x28
 8007c64:	e026      	b.n	8007cb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c78:	d007      	beq.n	8007c8a <UART_Receive_IT+0x74>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10a      	bne.n	8007c98 <UART_Receive_IT+0x82>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d106      	bne.n	8007c98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c94:	701a      	strb	r2, [r3, #0]
 8007c96:	e008      	b.n	8007caa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cae:	1c5a      	adds	r2, r3, #1
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d15a      	bne.n	8007d7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68da      	ldr	r2, [r3, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 0220 	bic.w	r2, r2, #32
 8007cd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ce6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	695a      	ldr	r2, [r3, #20]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 0201 	bic.w	r2, r2, #1
 8007cf6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d135      	bne.n	8007d74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	330c      	adds	r3, #12
 8007d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f023 0310 	bic.w	r3, r3, #16
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	330c      	adds	r3, #12
 8007d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d2e:	623a      	str	r2, [r7, #32]
 8007d30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	69f9      	ldr	r1, [r7, #28]
 8007d34:	6a3a      	ldr	r2, [r7, #32]
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e5      	bne.n	8007d0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0310 	and.w	r3, r3, #16
 8007d4c:	2b10      	cmp	r3, #16
 8007d4e:	d10a      	bne.n	8007d66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d50:	2300      	movs	r3, #0
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff fc4d 	bl	800760c <HAL_UARTEx_RxEventCallback>
 8007d72:	e002      	b.n	8007d7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7f9 ff8b 	bl	8001c90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	e002      	b.n	8007d84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	e000      	b.n	8007d84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007d82:	2302      	movs	r3, #2
  }
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3730      	adds	r7, #48	; 0x30
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d90:	b0c0      	sub	sp, #256	; 0x100
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da8:	68d9      	ldr	r1, [r3, #12]
 8007daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	ea40 0301 	orr.w	r3, r0, r1
 8007db4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dba:	689a      	ldr	r2, [r3, #8]
 8007dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	431a      	orrs	r2, r3
 8007dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007de4:	f021 010c 	bic.w	r1, r1, #12
 8007de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007df2:	430b      	orrs	r3, r1
 8007df4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e06:	6999      	ldr	r1, [r3, #24]
 8007e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	ea40 0301 	orr.w	r3, r0, r1
 8007e12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	4b8f      	ldr	r3, [pc, #572]	; (8008058 <UART_SetConfig+0x2cc>)
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d005      	beq.n	8007e2c <UART_SetConfig+0xa0>
 8007e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	4b8d      	ldr	r3, [pc, #564]	; (800805c <UART_SetConfig+0x2d0>)
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d104      	bne.n	8007e36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e2c:	f7fe fe5a 	bl	8006ae4 <HAL_RCC_GetPCLK2Freq>
 8007e30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007e34:	e003      	b.n	8007e3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e36:	f7fe fe41 	bl	8006abc <HAL_RCC_GetPCLK1Freq>
 8007e3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e48:	f040 810c 	bne.w	8008064 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e50:	2200      	movs	r2, #0
 8007e52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007e5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007e5e:	4622      	mov	r2, r4
 8007e60:	462b      	mov	r3, r5
 8007e62:	1891      	adds	r1, r2, r2
 8007e64:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e66:	415b      	adcs	r3, r3
 8007e68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e6e:	4621      	mov	r1, r4
 8007e70:	eb12 0801 	adds.w	r8, r2, r1
 8007e74:	4629      	mov	r1, r5
 8007e76:	eb43 0901 	adc.w	r9, r3, r1
 8007e7a:	f04f 0200 	mov.w	r2, #0
 8007e7e:	f04f 0300 	mov.w	r3, #0
 8007e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e8e:	4690      	mov	r8, r2
 8007e90:	4699      	mov	r9, r3
 8007e92:	4623      	mov	r3, r4
 8007e94:	eb18 0303 	adds.w	r3, r8, r3
 8007e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e9c:	462b      	mov	r3, r5
 8007e9e:	eb49 0303 	adc.w	r3, r9, r3
 8007ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007eb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007eb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007eba:	460b      	mov	r3, r1
 8007ebc:	18db      	adds	r3, r3, r3
 8007ebe:	653b      	str	r3, [r7, #80]	; 0x50
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	eb42 0303 	adc.w	r3, r2, r3
 8007ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ec8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ecc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ed0:	f7f8 f98a 	bl	80001e8 <__aeabi_uldivmod>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4b61      	ldr	r3, [pc, #388]	; (8008060 <UART_SetConfig+0x2d4>)
 8007eda:	fba3 2302 	umull	r2, r3, r3, r2
 8007ede:	095b      	lsrs	r3, r3, #5
 8007ee0:	011c      	lsls	r4, r3, #4
 8007ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007eec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ef0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	464b      	mov	r3, r9
 8007ef8:	1891      	adds	r1, r2, r2
 8007efa:	64b9      	str	r1, [r7, #72]	; 0x48
 8007efc:	415b      	adcs	r3, r3
 8007efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f04:	4641      	mov	r1, r8
 8007f06:	eb12 0a01 	adds.w	sl, r2, r1
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	eb43 0b01 	adc.w	fp, r3, r1
 8007f10:	f04f 0200 	mov.w	r2, #0
 8007f14:	f04f 0300 	mov.w	r3, #0
 8007f18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f24:	4692      	mov	sl, r2
 8007f26:	469b      	mov	fp, r3
 8007f28:	4643      	mov	r3, r8
 8007f2a:	eb1a 0303 	adds.w	r3, sl, r3
 8007f2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f32:	464b      	mov	r3, r9
 8007f34:	eb4b 0303 	adc.w	r3, fp, r3
 8007f38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007f4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007f50:	460b      	mov	r3, r1
 8007f52:	18db      	adds	r3, r3, r3
 8007f54:	643b      	str	r3, [r7, #64]	; 0x40
 8007f56:	4613      	mov	r3, r2
 8007f58:	eb42 0303 	adc.w	r3, r2, r3
 8007f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007f66:	f7f8 f93f 	bl	80001e8 <__aeabi_uldivmod>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	4611      	mov	r1, r2
 8007f70:	4b3b      	ldr	r3, [pc, #236]	; (8008060 <UART_SetConfig+0x2d4>)
 8007f72:	fba3 2301 	umull	r2, r3, r3, r1
 8007f76:	095b      	lsrs	r3, r3, #5
 8007f78:	2264      	movs	r2, #100	; 0x64
 8007f7a:	fb02 f303 	mul.w	r3, r2, r3
 8007f7e:	1acb      	subs	r3, r1, r3
 8007f80:	00db      	lsls	r3, r3, #3
 8007f82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f86:	4b36      	ldr	r3, [pc, #216]	; (8008060 <UART_SetConfig+0x2d4>)
 8007f88:	fba3 2302 	umull	r2, r3, r3, r2
 8007f8c:	095b      	lsrs	r3, r3, #5
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f94:	441c      	add	r4, r3
 8007f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fa0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007fa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007fa8:	4642      	mov	r2, r8
 8007faa:	464b      	mov	r3, r9
 8007fac:	1891      	adds	r1, r2, r2
 8007fae:	63b9      	str	r1, [r7, #56]	; 0x38
 8007fb0:	415b      	adcs	r3, r3
 8007fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007fb8:	4641      	mov	r1, r8
 8007fba:	1851      	adds	r1, r2, r1
 8007fbc:	6339      	str	r1, [r7, #48]	; 0x30
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	414b      	adcs	r3, r1
 8007fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007fd0:	4659      	mov	r1, fp
 8007fd2:	00cb      	lsls	r3, r1, #3
 8007fd4:	4651      	mov	r1, sl
 8007fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fda:	4651      	mov	r1, sl
 8007fdc:	00ca      	lsls	r2, r1, #3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	4642      	mov	r2, r8
 8007fe6:	189b      	adds	r3, r3, r2
 8007fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fec:	464b      	mov	r3, r9
 8007fee:	460a      	mov	r2, r1
 8007ff0:	eb42 0303 	adc.w	r3, r2, r3
 8007ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008004:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008008:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800800c:	460b      	mov	r3, r1
 800800e:	18db      	adds	r3, r3, r3
 8008010:	62bb      	str	r3, [r7, #40]	; 0x28
 8008012:	4613      	mov	r3, r2
 8008014:	eb42 0303 	adc.w	r3, r2, r3
 8008018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800801a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800801e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008022:	f7f8 f8e1 	bl	80001e8 <__aeabi_uldivmod>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4b0d      	ldr	r3, [pc, #52]	; (8008060 <UART_SetConfig+0x2d4>)
 800802c:	fba3 1302 	umull	r1, r3, r3, r2
 8008030:	095b      	lsrs	r3, r3, #5
 8008032:	2164      	movs	r1, #100	; 0x64
 8008034:	fb01 f303 	mul.w	r3, r1, r3
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	3332      	adds	r3, #50	; 0x32
 800803e:	4a08      	ldr	r2, [pc, #32]	; (8008060 <UART_SetConfig+0x2d4>)
 8008040:	fba2 2303 	umull	r2, r3, r2, r3
 8008044:	095b      	lsrs	r3, r3, #5
 8008046:	f003 0207 	and.w	r2, r3, #7
 800804a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4422      	add	r2, r4
 8008052:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008054:	e105      	b.n	8008262 <UART_SetConfig+0x4d6>
 8008056:	bf00      	nop
 8008058:	40011000 	.word	0x40011000
 800805c:	40011400 	.word	0x40011400
 8008060:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008068:	2200      	movs	r2, #0
 800806a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800806e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008072:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008076:	4642      	mov	r2, r8
 8008078:	464b      	mov	r3, r9
 800807a:	1891      	adds	r1, r2, r2
 800807c:	6239      	str	r1, [r7, #32]
 800807e:	415b      	adcs	r3, r3
 8008080:	627b      	str	r3, [r7, #36]	; 0x24
 8008082:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008086:	4641      	mov	r1, r8
 8008088:	1854      	adds	r4, r2, r1
 800808a:	4649      	mov	r1, r9
 800808c:	eb43 0501 	adc.w	r5, r3, r1
 8008090:	f04f 0200 	mov.w	r2, #0
 8008094:	f04f 0300 	mov.w	r3, #0
 8008098:	00eb      	lsls	r3, r5, #3
 800809a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800809e:	00e2      	lsls	r2, r4, #3
 80080a0:	4614      	mov	r4, r2
 80080a2:	461d      	mov	r5, r3
 80080a4:	4643      	mov	r3, r8
 80080a6:	18e3      	adds	r3, r4, r3
 80080a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080ac:	464b      	mov	r3, r9
 80080ae:	eb45 0303 	adc.w	r3, r5, r3
 80080b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80080b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80080c6:	f04f 0200 	mov.w	r2, #0
 80080ca:	f04f 0300 	mov.w	r3, #0
 80080ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80080d2:	4629      	mov	r1, r5
 80080d4:	008b      	lsls	r3, r1, #2
 80080d6:	4621      	mov	r1, r4
 80080d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080dc:	4621      	mov	r1, r4
 80080de:	008a      	lsls	r2, r1, #2
 80080e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80080e4:	f7f8 f880 	bl	80001e8 <__aeabi_uldivmod>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4b60      	ldr	r3, [pc, #384]	; (8008270 <UART_SetConfig+0x4e4>)
 80080ee:	fba3 2302 	umull	r2, r3, r3, r2
 80080f2:	095b      	lsrs	r3, r3, #5
 80080f4:	011c      	lsls	r4, r3, #4
 80080f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080fa:	2200      	movs	r2, #0
 80080fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008100:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008104:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008108:	4642      	mov	r2, r8
 800810a:	464b      	mov	r3, r9
 800810c:	1891      	adds	r1, r2, r2
 800810e:	61b9      	str	r1, [r7, #24]
 8008110:	415b      	adcs	r3, r3
 8008112:	61fb      	str	r3, [r7, #28]
 8008114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008118:	4641      	mov	r1, r8
 800811a:	1851      	adds	r1, r2, r1
 800811c:	6139      	str	r1, [r7, #16]
 800811e:	4649      	mov	r1, r9
 8008120:	414b      	adcs	r3, r1
 8008122:	617b      	str	r3, [r7, #20]
 8008124:	f04f 0200 	mov.w	r2, #0
 8008128:	f04f 0300 	mov.w	r3, #0
 800812c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008130:	4659      	mov	r1, fp
 8008132:	00cb      	lsls	r3, r1, #3
 8008134:	4651      	mov	r1, sl
 8008136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800813a:	4651      	mov	r1, sl
 800813c:	00ca      	lsls	r2, r1, #3
 800813e:	4610      	mov	r0, r2
 8008140:	4619      	mov	r1, r3
 8008142:	4603      	mov	r3, r0
 8008144:	4642      	mov	r2, r8
 8008146:	189b      	adds	r3, r3, r2
 8008148:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800814c:	464b      	mov	r3, r9
 800814e:	460a      	mov	r2, r1
 8008150:	eb42 0303 	adc.w	r3, r2, r3
 8008154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	67bb      	str	r3, [r7, #120]	; 0x78
 8008162:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	f04f 0300 	mov.w	r3, #0
 800816c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008170:	4649      	mov	r1, r9
 8008172:	008b      	lsls	r3, r1, #2
 8008174:	4641      	mov	r1, r8
 8008176:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800817a:	4641      	mov	r1, r8
 800817c:	008a      	lsls	r2, r1, #2
 800817e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008182:	f7f8 f831 	bl	80001e8 <__aeabi_uldivmod>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	4b39      	ldr	r3, [pc, #228]	; (8008270 <UART_SetConfig+0x4e4>)
 800818c:	fba3 1302 	umull	r1, r3, r3, r2
 8008190:	095b      	lsrs	r3, r3, #5
 8008192:	2164      	movs	r1, #100	; 0x64
 8008194:	fb01 f303 	mul.w	r3, r1, r3
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	011b      	lsls	r3, r3, #4
 800819c:	3332      	adds	r3, #50	; 0x32
 800819e:	4a34      	ldr	r2, [pc, #208]	; (8008270 <UART_SetConfig+0x4e4>)
 80081a0:	fba2 2303 	umull	r2, r3, r2, r3
 80081a4:	095b      	lsrs	r3, r3, #5
 80081a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081aa:	441c      	add	r4, r3
 80081ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081b0:	2200      	movs	r2, #0
 80081b2:	673b      	str	r3, [r7, #112]	; 0x70
 80081b4:	677a      	str	r2, [r7, #116]	; 0x74
 80081b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80081ba:	4642      	mov	r2, r8
 80081bc:	464b      	mov	r3, r9
 80081be:	1891      	adds	r1, r2, r2
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	415b      	adcs	r3, r3
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081ca:	4641      	mov	r1, r8
 80081cc:	1851      	adds	r1, r2, r1
 80081ce:	6039      	str	r1, [r7, #0]
 80081d0:	4649      	mov	r1, r9
 80081d2:	414b      	adcs	r3, r1
 80081d4:	607b      	str	r3, [r7, #4]
 80081d6:	f04f 0200 	mov.w	r2, #0
 80081da:	f04f 0300 	mov.w	r3, #0
 80081de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80081e2:	4659      	mov	r1, fp
 80081e4:	00cb      	lsls	r3, r1, #3
 80081e6:	4651      	mov	r1, sl
 80081e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081ec:	4651      	mov	r1, sl
 80081ee:	00ca      	lsls	r2, r1, #3
 80081f0:	4610      	mov	r0, r2
 80081f2:	4619      	mov	r1, r3
 80081f4:	4603      	mov	r3, r0
 80081f6:	4642      	mov	r2, r8
 80081f8:	189b      	adds	r3, r3, r2
 80081fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80081fc:	464b      	mov	r3, r9
 80081fe:	460a      	mov	r2, r1
 8008200:	eb42 0303 	adc.w	r3, r2, r3
 8008204:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	663b      	str	r3, [r7, #96]	; 0x60
 8008210:	667a      	str	r2, [r7, #100]	; 0x64
 8008212:	f04f 0200 	mov.w	r2, #0
 8008216:	f04f 0300 	mov.w	r3, #0
 800821a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800821e:	4649      	mov	r1, r9
 8008220:	008b      	lsls	r3, r1, #2
 8008222:	4641      	mov	r1, r8
 8008224:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008228:	4641      	mov	r1, r8
 800822a:	008a      	lsls	r2, r1, #2
 800822c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008230:	f7f7 ffda 	bl	80001e8 <__aeabi_uldivmod>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	4b0d      	ldr	r3, [pc, #52]	; (8008270 <UART_SetConfig+0x4e4>)
 800823a:	fba3 1302 	umull	r1, r3, r3, r2
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	2164      	movs	r1, #100	; 0x64
 8008242:	fb01 f303 	mul.w	r3, r1, r3
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	011b      	lsls	r3, r3, #4
 800824a:	3332      	adds	r3, #50	; 0x32
 800824c:	4a08      	ldr	r2, [pc, #32]	; (8008270 <UART_SetConfig+0x4e4>)
 800824e:	fba2 2303 	umull	r2, r3, r2, r3
 8008252:	095b      	lsrs	r3, r3, #5
 8008254:	f003 020f 	and.w	r2, r3, #15
 8008258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4422      	add	r2, r4
 8008260:	609a      	str	r2, [r3, #8]
}
 8008262:	bf00      	nop
 8008264:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008268:	46bd      	mov	sp, r7
 800826a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800826e:	bf00      	nop
 8008270:	51eb851f 	.word	0x51eb851f

08008274 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008274:	b084      	sub	sp, #16
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	f107 001c 	add.w	r0, r7, #28
 8008282:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	2b01      	cmp	r3, #1
 800828a:	d122      	bne.n	80082d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008290:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80082a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d105      	bne.n	80082c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f9c0 	bl	800864c <USB_CoreReset>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]
 80082d0:	e01a      	b.n	8008308 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f9b4 	bl	800864c <USB_CoreReset>
 80082e4:	4603      	mov	r3, r0
 80082e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80082e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d106      	bne.n	80082fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	639a      	str	r2, [r3, #56]	; 0x38
 80082fa:	e005      	b.n	8008308 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	2b01      	cmp	r3, #1
 800830c:	d10b      	bne.n	8008326 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f043 0206 	orr.w	r2, r3, #6
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f043 0220 	orr.w	r2, r3, #32
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008326:	7bfb      	ldrb	r3, [r7, #15]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008332:	b004      	add	sp, #16
 8008334:	4770      	bx	lr

08008336 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008336:	b480      	push	{r7}
 8008338:	b083      	sub	sp, #12
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f043 0201 	orr.w	r2, r3, #1
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f023 0201 	bic.w	r2, r3, #1
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b084      	sub	sp, #16
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	460b      	mov	r3, r1
 8008384:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008396:	78fb      	ldrb	r3, [r7, #3]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d115      	bne.n	80083c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80083a8:	2001      	movs	r0, #1
 80083aa:	f7fa fe39 	bl	8003020 <HAL_Delay>
      ms++;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3301      	adds	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f93a 	bl	800862e <USB_GetMode>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d01e      	beq.n	80083fe <USB_SetCurrentMode+0x84>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b31      	cmp	r3, #49	; 0x31
 80083c4:	d9f0      	bls.n	80083a8 <USB_SetCurrentMode+0x2e>
 80083c6:	e01a      	b.n	80083fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d115      	bne.n	80083fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80083da:	2001      	movs	r0, #1
 80083dc:	f7fa fe20 	bl	8003020 <HAL_Delay>
      ms++;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3301      	adds	r3, #1
 80083e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f921 	bl	800862e <USB_GetMode>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d005      	beq.n	80083fe <USB_SetCurrentMode+0x84>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2b31      	cmp	r3, #49	; 0x31
 80083f6:	d9f0      	bls.n	80083da <USB_SetCurrentMode+0x60>
 80083f8:	e001      	b.n	80083fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e005      	b.n	800840a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b32      	cmp	r3, #50	; 0x32
 8008402:	d101      	bne.n	8008408 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e000      	b.n	800840a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800841e:	2300      	movs	r3, #0
 8008420:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	3301      	adds	r3, #1
 8008426:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4a13      	ldr	r2, [pc, #76]	; (8008478 <USB_FlushTxFifo+0x64>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d901      	bls.n	8008434 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e01b      	b.n	800846c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	2b00      	cmp	r3, #0
 800843a:	daf2      	bge.n	8008422 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800843c:	2300      	movs	r3, #0
 800843e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	019b      	lsls	r3, r3, #6
 8008444:	f043 0220 	orr.w	r2, r3, #32
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3301      	adds	r3, #1
 8008450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	4a08      	ldr	r2, [pc, #32]	; (8008478 <USB_FlushTxFifo+0x64>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d901      	bls.n	800845e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e006      	b.n	800846c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	f003 0320 	and.w	r3, r3, #32
 8008466:	2b20      	cmp	r3, #32
 8008468:	d0f0      	beq.n	800844c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	00030d40 	.word	0x00030d40

0800847c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008484:	2300      	movs	r3, #0
 8008486:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3301      	adds	r3, #1
 800848c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4a11      	ldr	r2, [pc, #68]	; (80084d8 <USB_FlushRxFifo+0x5c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d901      	bls.n	800849a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e018      	b.n	80084cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	daf2      	bge.n	8008488 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80084a2:	2300      	movs	r3, #0
 80084a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2210      	movs	r2, #16
 80084aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3301      	adds	r3, #1
 80084b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	4a08      	ldr	r2, [pc, #32]	; (80084d8 <USB_FlushRxFifo+0x5c>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d901      	bls.n	80084be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e006      	b.n	80084cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	f003 0310 	and.w	r3, r3, #16
 80084c6:	2b10      	cmp	r3, #16
 80084c8:	d0f0      	beq.n	80084ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	00030d40 	.word	0x00030d40

080084dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80084dc:	b480      	push	{r7}
 80084de:	b089      	sub	sp, #36	; 0x24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	4611      	mov	r1, r2
 80084e8:	461a      	mov	r2, r3
 80084ea:	460b      	mov	r3, r1
 80084ec:	71fb      	strb	r3, [r7, #7]
 80084ee:	4613      	mov	r3, r2
 80084f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80084fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d123      	bne.n	800854a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008502:	88bb      	ldrh	r3, [r7, #4]
 8008504:	3303      	adds	r3, #3
 8008506:	089b      	lsrs	r3, r3, #2
 8008508:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800850a:	2300      	movs	r3, #0
 800850c:	61bb      	str	r3, [r7, #24]
 800850e:	e018      	b.n	8008542 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008510:	79fb      	ldrb	r3, [r7, #7]
 8008512:	031a      	lsls	r2, r3, #12
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	4413      	add	r3, r2
 8008518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800851c:	461a      	mov	r2, r3
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	3301      	adds	r3, #1
 8008528:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	3301      	adds	r3, #1
 800852e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	3301      	adds	r3, #1
 8008534:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	3301      	adds	r3, #1
 800853a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	3301      	adds	r3, #1
 8008540:	61bb      	str	r3, [r7, #24]
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	429a      	cmp	r2, r3
 8008548:	d3e2      	bcc.n	8008510 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3724      	adds	r7, #36	; 0x24
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008558:	b480      	push	{r7}
 800855a:	b08b      	sub	sp, #44	; 0x2c
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800856e:	88fb      	ldrh	r3, [r7, #6]
 8008570:	089b      	lsrs	r3, r3, #2
 8008572:	b29b      	uxth	r3, r3
 8008574:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	f003 0303 	and.w	r3, r3, #3
 800857c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800857e:	2300      	movs	r3, #0
 8008580:	623b      	str	r3, [r7, #32]
 8008582:	e014      	b.n	80085ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	3301      	adds	r3, #1
 8008594:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	3301      	adds	r3, #1
 800859a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	3301      	adds	r3, #1
 80085a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	3301      	adds	r3, #1
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80085a8:	6a3b      	ldr	r3, [r7, #32]
 80085aa:	3301      	adds	r3, #1
 80085ac:	623b      	str	r3, [r7, #32]
 80085ae:	6a3a      	ldr	r2, [r7, #32]
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d3e6      	bcc.n	8008584 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80085b6:	8bfb      	ldrh	r3, [r7, #30]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d01e      	beq.n	80085fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80085bc:	2300      	movs	r3, #0
 80085be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085c6:	461a      	mov	r2, r3
 80085c8:	f107 0310 	add.w	r3, r7, #16
 80085cc:	6812      	ldr	r2, [r2, #0]
 80085ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	fa22 f303 	lsr.w	r3, r2, r3
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e0:	701a      	strb	r2, [r3, #0]
      i++;
 80085e2:	6a3b      	ldr	r3, [r7, #32]
 80085e4:	3301      	adds	r3, #1
 80085e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	3301      	adds	r3, #1
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80085ee:	8bfb      	ldrh	r3, [r7, #30]
 80085f0:	3b01      	subs	r3, #1
 80085f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80085f4:	8bfb      	ldrh	r3, [r7, #30]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1ea      	bne.n	80085d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	372c      	adds	r7, #44	; 0x2c
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	4013      	ands	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008620:	68fb      	ldr	r3, [r7, #12]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800862e:	b480      	push	{r7}
 8008630:	b083      	sub	sp, #12
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	f003 0301 	and.w	r3, r3, #1
}
 800863e:	4618      	mov	r0, r3
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
	...

0800864c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3301      	adds	r3, #1
 800865c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	4a13      	ldr	r2, [pc, #76]	; (80086b0 <USB_CoreReset+0x64>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d901      	bls.n	800866a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e01b      	b.n	80086a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	2b00      	cmp	r3, #0
 8008670:	daf2      	bge.n	8008658 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	f043 0201 	orr.w	r2, r3, #1
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3301      	adds	r3, #1
 8008686:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4a09      	ldr	r2, [pc, #36]	; (80086b0 <USB_CoreReset+0x64>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d901      	bls.n	8008694 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e006      	b.n	80086a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b01      	cmp	r3, #1
 800869e:	d0f0      	beq.n	8008682 <USB_CoreReset+0x36>

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	00030d40 	.word	0x00030d40

080086b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086b4:	b084      	sub	sp, #16
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b086      	sub	sp, #24
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80086c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086d4:	461a      	mov	r2, r3
 80086d6:	2300      	movs	r3, #0
 80086d8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008706:	2b00      	cmp	r3, #0
 8008708:	d018      	beq.n	800873c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800870a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870c:	2b01      	cmp	r3, #1
 800870e:	d10a      	bne.n	8008726 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800871e:	f043 0304 	orr.w	r3, r3, #4
 8008722:	6013      	str	r3, [r2, #0]
 8008724:	e014      	b.n	8008750 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008734:	f023 0304 	bic.w	r3, r3, #4
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	e009      	b.n	8008750 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800874a:	f023 0304 	bic.w	r3, r3, #4
 800874e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008750:	2110      	movs	r1, #16
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7ff fe5e 	bl	8008414 <USB_FlushTxFifo>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff fe8a 	bl	800847c <USB_FlushRxFifo>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008772:	2300      	movs	r3, #0
 8008774:	613b      	str	r3, [r7, #16]
 8008776:	e015      	b.n	80087a4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008784:	461a      	mov	r2, r3
 8008786:	f04f 33ff 	mov.w	r3, #4294967295
 800878a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4413      	add	r3, r2
 8008794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008798:	461a      	mov	r2, r3
 800879a:	2300      	movs	r3, #0
 800879c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	3301      	adds	r3, #1
 80087a2:	613b      	str	r3, [r7, #16]
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d3e5      	bcc.n	8008778 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f04f 32ff 	mov.w	r2, #4294967295
 80087b8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00b      	beq.n	80087de <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087cc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a13      	ldr	r2, [pc, #76]	; (8008820 <USB_HostInit+0x16c>)
 80087d2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a13      	ldr	r2, [pc, #76]	; (8008824 <USB_HostInit+0x170>)
 80087d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80087dc:	e009      	b.n	80087f2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2280      	movs	r2, #128	; 0x80
 80087e2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a10      	ldr	r2, [pc, #64]	; (8008828 <USB_HostInit+0x174>)
 80087e8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a0f      	ldr	r2, [pc, #60]	; (800882c <USB_HostInit+0x178>)
 80087ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d105      	bne.n	8008804 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	f043 0210 	orr.w	r2, r3, #16
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699a      	ldr	r2, [r3, #24]
 8008808:	4b09      	ldr	r3, [pc, #36]	; (8008830 <USB_HostInit+0x17c>)
 800880a:	4313      	orrs	r3, r2
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008810:	7dfb      	ldrb	r3, [r7, #23]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3718      	adds	r7, #24
 8008816:	46bd      	mov	sp, r7
 8008818:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800881c:	b004      	add	sp, #16
 800881e:	4770      	bx	lr
 8008820:	01000200 	.word	0x01000200
 8008824:	00e00300 	.word	0x00e00300
 8008828:	00600080 	.word	0x00600080
 800882c:	004000e0 	.word	0x004000e0
 8008830:	a3200008 	.word	0xa3200008

08008834 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	460b      	mov	r3, r1
 800883e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008852:	f023 0303 	bic.w	r3, r3, #3
 8008856:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	78fb      	ldrb	r3, [r7, #3]
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	68f9      	ldr	r1, [r7, #12]
 8008868:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800886c:	4313      	orrs	r3, r2
 800886e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008870:	78fb      	ldrb	r3, [r7, #3]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d107      	bne.n	8008886 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800887c:	461a      	mov	r2, r3
 800887e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008882:	6053      	str	r3, [r2, #4]
 8008884:	e009      	b.n	800889a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008886:	78fb      	ldrb	r3, [r7, #3]
 8008888:	2b02      	cmp	r3, #2
 800888a:	d106      	bne.n	800889a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008892:	461a      	mov	r2, r3
 8008894:	f241 7370 	movw	r3, #6000	; 0x1770
 8008898:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80088c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80088d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80088d8:	2064      	movs	r0, #100	; 0x64
 80088da:	f7fa fba1 	bl	8003020 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80088e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80088ec:	200a      	movs	r0, #10
 80088ee:	f7fa fb97 	bl	8003020 <HAL_Delay>

  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800890c:	2300      	movs	r3, #0
 800890e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008920:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d109      	bne.n	8008940 <USB_DriveVbus+0x44>
 800892c:	78fb      	ldrb	r3, [r7, #3]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d106      	bne.n	8008940 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800893a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800893e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800894a:	d109      	bne.n	8008960 <USB_DriveVbus+0x64>
 800894c:	78fb      	ldrb	r3, [r7, #3]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d106      	bne.n	8008960 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800895a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800895e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800896e:	b480      	push	{r7}
 8008970:	b085      	sub	sp, #20
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	0c5b      	lsrs	r3, r3, #17
 800898c:	f003 0303 	and.w	r3, r3, #3
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	b29b      	uxth	r3, r3
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3714      	adds	r7, #20
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
	...

080089c0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	4608      	mov	r0, r1
 80089ca:	4611      	mov	r1, r2
 80089cc:	461a      	mov	r2, r3
 80089ce:	4603      	mov	r3, r0
 80089d0:	70fb      	strb	r3, [r7, #3]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70bb      	strb	r3, [r7, #2]
 80089d6:	4613      	mov	r3, r2
 80089d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80089e2:	78fb      	ldrb	r3, [r7, #3]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ee:	461a      	mov	r2, r3
 80089f0:	f04f 33ff 	mov.w	r3, #4294967295
 80089f4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80089f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d87e      	bhi.n	8008afc <USB_HC_Init+0x13c>
 80089fe:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <USB_HC_Init+0x44>)
 8008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a04:	08008a15 	.word	0x08008a15
 8008a08:	08008abf 	.word	0x08008abf
 8008a0c:	08008a15 	.word	0x08008a15
 8008a10:	08008a81 	.word	0x08008a81
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a20:	461a      	mov	r2, r3
 8008a22:	f240 439d 	movw	r3, #1181	; 0x49d
 8008a26:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008a28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	da10      	bge.n	8008a52 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008a30:	78fb      	ldrb	r3, [r7, #3]
 8008a32:	015a      	lsls	r2, r3, #5
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	4413      	add	r3, r2
 8008a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	78fa      	ldrb	r2, [r7, #3]
 8008a40:	0151      	lsls	r1, r2, #5
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	440a      	add	r2, r1
 8008a46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a4e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008a50:	e057      	b.n	8008b02 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d051      	beq.n	8008b02 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008a5e:	78fb      	ldrb	r3, [r7, #3]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	78fa      	ldrb	r2, [r7, #3]
 8008a6e:	0151      	lsls	r1, r2, #5
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	440a      	add	r2, r1
 8008a74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008a7c:	60d3      	str	r3, [r2, #12]
      break;
 8008a7e:	e040      	b.n	8008b02 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	f240 639d 	movw	r3, #1693	; 0x69d
 8008a92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008a94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	da34      	bge.n	8008b06 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008a9c:	78fb      	ldrb	r3, [r7, #3]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	78fa      	ldrb	r2, [r7, #3]
 8008aac:	0151      	lsls	r1, r2, #5
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	440a      	add	r2, r1
 8008ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008aba:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008abc:	e023      	b.n	8008b06 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008abe:	78fb      	ldrb	r3, [r7, #3]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aca:	461a      	mov	r2, r3
 8008acc:	f240 2325 	movw	r3, #549	; 0x225
 8008ad0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008ad2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	da17      	bge.n	8008b0a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008ada:	78fb      	ldrb	r3, [r7, #3]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	78fa      	ldrb	r2, [r7, #3]
 8008aea:	0151      	lsls	r1, r2, #5
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	440a      	add	r2, r1
 8008af0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008af4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008af8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008afa:	e006      	b.n	8008b0a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	77fb      	strb	r3, [r7, #31]
      break;
 8008b00:	e004      	b.n	8008b0c <USB_HC_Init+0x14c>
      break;
 8008b02:	bf00      	nop
 8008b04:	e002      	b.n	8008b0c <USB_HC_Init+0x14c>
      break;
 8008b06:	bf00      	nop
 8008b08:	e000      	b.n	8008b0c <USB_HC_Init+0x14c>
      break;
 8008b0a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008b0c:	78fb      	ldrb	r3, [r7, #3]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	78fa      	ldrb	r2, [r7, #3]
 8008b1c:	0151      	lsls	r1, r2, #5
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	440a      	add	r2, r1
 8008b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b26:	f043 0302 	orr.w	r3, r3, #2
 8008b2a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b32:	699a      	ldr	r2, [r3, #24]
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	f003 030f 	and.w	r3, r3, #15
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b40:	6939      	ldr	r1, [r7, #16]
 8008b42:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008b46:	4313      	orrs	r3, r2
 8008b48:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008b56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	da03      	bge.n	8008b66 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b62:	61bb      	str	r3, [r7, #24]
 8008b64:	e001      	b.n	8008b6a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7ff feff 	bl	800896e <USB_GetHostSpeed>
 8008b70:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008b72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d106      	bne.n	8008b88 <USB_HC_Init+0x1c8>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d003      	beq.n	8008b88 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008b80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	e001      	b.n	8008b8c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b8c:	787b      	ldrb	r3, [r7, #1]
 8008b8e:	059b      	lsls	r3, r3, #22
 8008b90:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008b94:	78bb      	ldrb	r3, [r7, #2]
 8008b96:	02db      	lsls	r3, r3, #11
 8008b98:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b9c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008b9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ba2:	049b      	lsls	r3, r3, #18
 8008ba4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008ba8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008baa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008bac:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008bb0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008bb6:	78fb      	ldrb	r3, [r7, #3]
 8008bb8:	0159      	lsls	r1, r3, #5
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	440b      	add	r3, r1
 8008bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bc2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008bc8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008bca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d003      	beq.n	8008bda <USB_HC_Init+0x21a>
 8008bd2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d10f      	bne.n	8008bfa <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008bda:	78fb      	ldrb	r3, [r7, #3]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	78fa      	ldrb	r2, [r7, #3]
 8008bea:	0151      	lsls	r1, r2, #5
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	440a      	add	r2, r1
 8008bf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bf8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008bfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3720      	adds	r7, #32
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b08c      	sub	sp, #48	; 0x30
 8008c08:	af02      	add	r7, sp, #8
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	785b      	ldrb	r3, [r3, #1]
 8008c1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008c1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c20:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d02d      	beq.n	8008c8a <USB_HC_StartXfer+0x86>
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	791b      	ldrb	r3, [r3, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d129      	bne.n	8008c8a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008c36:	79fb      	ldrb	r3, [r7, #7]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d117      	bne.n	8008c6c <USB_HC_StartXfer+0x68>
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	79db      	ldrb	r3, [r3, #7]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d003      	beq.n	8008c4c <USB_HC_StartXfer+0x48>
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	79db      	ldrb	r3, [r3, #7]
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d10f      	bne.n	8008c6c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	69fa      	ldr	r2, [r7, #28]
 8008c5c:	0151      	lsls	r1, r2, #5
 8008c5e:	6a3a      	ldr	r2, [r7, #32]
 8008c60:	440a      	add	r2, r1
 8008c62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c6a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008c6c:	79fb      	ldrb	r3, [r7, #7]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10b      	bne.n	8008c8a <USB_HC_StartXfer+0x86>
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	795b      	ldrb	r3, [r3, #5]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d107      	bne.n	8008c8a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	785b      	ldrb	r3, [r3, #1]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 fa0f 	bl	80090a4 <USB_DoPing>
      return HAL_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	e0f8      	b.n	8008e7c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d018      	beq.n	8008cc4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	68ba      	ldr	r2, [r7, #8]
 8008c98:	8912      	ldrh	r2, [r2, #8]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	8912      	ldrh	r2, [r2, #8]
 8008ca2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ca6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008ca8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008caa:	8b7b      	ldrh	r3, [r7, #26]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d90b      	bls.n	8008cc8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008cb0:	8b7b      	ldrh	r3, [r7, #26]
 8008cb2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008cb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	8912      	ldrh	r2, [r2, #8]
 8008cba:	fb03 f202 	mul.w	r2, r3, r2
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	611a      	str	r2, [r3, #16]
 8008cc2:	e001      	b.n	8008cc8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	78db      	ldrb	r3, [r3, #3]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d007      	beq.n	8008ce0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008cd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	8912      	ldrh	r2, [r2, #8]
 8008cd6:	fb03 f202 	mul.w	r2, r3, r2
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	611a      	str	r2, [r3, #16]
 8008cde:	e003      	b.n	8008ce8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	695a      	ldr	r2, [r3, #20]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008cf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cf2:	04d9      	lsls	r1, r3, #19
 8008cf4:	4b63      	ldr	r3, [pc, #396]	; (8008e84 <USB_HC_StartXfer+0x280>)
 8008cf6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008cf8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	7a9b      	ldrb	r3, [r3, #10]
 8008cfe:	075b      	lsls	r3, r3, #29
 8008d00:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d04:	69f9      	ldr	r1, [r7, #28]
 8008d06:	0148      	lsls	r0, r1, #5
 8008d08:	6a39      	ldr	r1, [r7, #32]
 8008d0a:	4401      	add	r1, r0
 8008d0c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d10:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d12:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008d14:	79fb      	ldrb	r3, [r7, #7]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d009      	beq.n	8008d2e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	68d9      	ldr	r1, [r3, #12]
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	015a      	lsls	r2, r3, #5
 8008d22:	6a3b      	ldr	r3, [r7, #32]
 8008d24:	4413      	add	r3, r2
 8008d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d2a:	460a      	mov	r2, r1
 8008d2c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008d2e:	6a3b      	ldr	r3, [r7, #32]
 8008d30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	bf0c      	ite	eq
 8008d3e:	2301      	moveq	r3, #1
 8008d40:	2300      	movne	r3, #0
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	69fa      	ldr	r2, [r7, #28]
 8008d56:	0151      	lsls	r1, r2, #5
 8008d58:	6a3a      	ldr	r2, [r7, #32]
 8008d5a:	440a      	add	r2, r1
 8008d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d64:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	7e7b      	ldrb	r3, [r7, #25]
 8008d76:	075b      	lsls	r3, r3, #29
 8008d78:	69f9      	ldr	r1, [r7, #28]
 8008d7a:	0148      	lsls	r0, r1, #5
 8008d7c:	6a39      	ldr	r1, [r7, #32]
 8008d7e:	4401      	add	r1, r0
 8008d80:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008d84:	4313      	orrs	r3, r2
 8008d86:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	015a      	lsls	r2, r3, #5
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	4413      	add	r3, r2
 8008d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d9e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	78db      	ldrb	r3, [r3, #3]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d004      	beq.n	8008db2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dae:	613b      	str	r3, [r7, #16]
 8008db0:	e003      	b.n	8008dba <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008db8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dc0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	6a3b      	ldr	r3, [r7, #32]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dce:	461a      	mov	r2, r3
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008dd4:	79fb      	ldrb	r3, [r7, #7]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	e04e      	b.n	8008e7c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	78db      	ldrb	r3, [r3, #3]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d149      	bne.n	8008e7a <USB_HC_StartXfer+0x276>
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d045      	beq.n	8008e7a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	79db      	ldrb	r3, [r3, #7]
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d830      	bhi.n	8008e58 <USB_HC_StartXfer+0x254>
 8008df6:	a201      	add	r2, pc, #4	; (adr r2, 8008dfc <USB_HC_StartXfer+0x1f8>)
 8008df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfc:	08008e0d 	.word	0x08008e0d
 8008e00:	08008e31 	.word	0x08008e31
 8008e04:	08008e0d 	.word	0x08008e0d
 8008e08:	08008e31 	.word	0x08008e31
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	3303      	adds	r3, #3
 8008e12:	089b      	lsrs	r3, r3, #2
 8008e14:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008e16:	8afa      	ldrh	r2, [r7, #22]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d91c      	bls.n	8008e5c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	f043 0220 	orr.w	r2, r3, #32
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008e2e:	e015      	b.n	8008e5c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	3303      	adds	r3, #3
 8008e36:	089b      	lsrs	r3, r3, #2
 8008e38:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008e3a:	8afa      	ldrh	r2, [r7, #22]
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d90a      	bls.n	8008e60 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	619a      	str	r2, [r3, #24]
        }
        break;
 8008e56:	e003      	b.n	8008e60 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008e58:	bf00      	nop
 8008e5a:	e002      	b.n	8008e62 <USB_HC_StartXfer+0x25e>
        break;
 8008e5c:	bf00      	nop
 8008e5e:	e000      	b.n	8008e62 <USB_HC_StartXfer+0x25e>
        break;
 8008e60:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	68d9      	ldr	r1, [r3, #12]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	785a      	ldrb	r2, [r3, #1]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	2000      	movs	r0, #0
 8008e72:	9000      	str	r0, [sp, #0]
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f7ff fb31 	bl	80084dc <USB_WritePacket>
  }

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3728      	adds	r7, #40	; 0x28
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	1ff80000 	.word	0x1ff80000

08008e88 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	b29b      	uxth	r3, r3
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b089      	sub	sp, #36	; 0x24
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	0c9b      	lsrs	r3, r3, #18
 8008ed2:	f003 0303 	and.w	r3, r3, #3
 8008ed6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	0fdb      	lsrs	r3, r3, #31
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f003 0320 	and.w	r3, r3, #32
 8008ef6:	2b20      	cmp	r3, #32
 8008ef8:	d104      	bne.n	8008f04 <USB_HC_Halt+0x5a>
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d101      	bne.n	8008f04 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	e0c8      	b.n	8009096 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d002      	beq.n	8008f10 <USB_HC_Halt+0x66>
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d163      	bne.n	8008fd8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	0151      	lsls	r1, r2, #5
 8008f22:	69fa      	ldr	r2, [r7, #28]
 8008f24:	440a      	add	r2, r1
 8008f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f2e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f003 0320 	and.w	r3, r3, #32
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f040 80ab 	bne.w	8009094 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d133      	bne.n	8008fb2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	0151      	lsls	r1, r2, #5
 8008f5c:	69fa      	ldr	r2, [r7, #28]
 8008f5e:	440a      	add	r2, r1
 8008f60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f68:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	0151      	lsls	r1, r2, #5
 8008f7c:	69fa      	ldr	r2, [r7, #28]
 8008f7e:	440a      	add	r2, r1
 8008f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f88:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f96:	d81d      	bhi.n	8008fd4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	015a      	lsls	r2, r3, #5
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008faa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fae:	d0ec      	beq.n	8008f8a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008fb0:	e070      	b.n	8009094 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	015a      	lsls	r2, r3, #5
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	4413      	add	r3, r2
 8008fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	69ba      	ldr	r2, [r7, #24]
 8008fc2:	0151      	lsls	r1, r2, #5
 8008fc4:	69fa      	ldr	r2, [r7, #28]
 8008fc6:	440a      	add	r2, r1
 8008fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fd0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008fd2:	e05f      	b.n	8009094 <USB_HC_Halt+0x1ea>
            break;
 8008fd4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008fd6:	e05d      	b.n	8009094 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	69ba      	ldr	r2, [r7, #24]
 8008fe8:	0151      	lsls	r1, r2, #5
 8008fea:	69fa      	ldr	r2, [r7, #28]
 8008fec:	440a      	add	r2, r1
 8008fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ff2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ff6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d133      	bne.n	8009070 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	4413      	add	r3, r2
 8009010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	0151      	lsls	r1, r2, #5
 800901a:	69fa      	ldr	r2, [r7, #28]
 800901c:	440a      	add	r2, r1
 800901e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009022:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009026:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	015a      	lsls	r2, r3, #5
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	4413      	add	r3, r2
 8009030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	69ba      	ldr	r2, [r7, #24]
 8009038:	0151      	lsls	r1, r2, #5
 800903a:	69fa      	ldr	r2, [r7, #28]
 800903c:	440a      	add	r2, r1
 800903e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009042:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009046:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	3301      	adds	r3, #1
 800904c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009054:	d81d      	bhi.n	8009092 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	015a      	lsls	r2, r3, #5
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	4413      	add	r3, r2
 800905e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800906c:	d0ec      	beq.n	8009048 <USB_HC_Halt+0x19e>
 800906e:	e011      	b.n	8009094 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	015a      	lsls	r2, r3, #5
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	4413      	add	r3, r2
 8009078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	0151      	lsls	r1, r2, #5
 8009082:	69fa      	ldr	r2, [r7, #28]
 8009084:	440a      	add	r2, r1
 8009086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800908a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	e000      	b.n	8009094 <USB_HC_Halt+0x1ea>
          break;
 8009092:	bf00      	nop
    }
  }

  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3724      	adds	r7, #36	; 0x24
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
	...

080090a4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	460b      	mov	r3, r1
 80090ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80090b4:	78fb      	ldrb	r3, [r7, #3]
 80090b6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80090b8:	2301      	movs	r3, #1
 80090ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	04da      	lsls	r2, r3, #19
 80090c0:	4b15      	ldr	r3, [pc, #84]	; (8009118 <USB_DoPing+0x74>)
 80090c2:	4013      	ands	r3, r2
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	0151      	lsls	r1, r2, #5
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	440a      	add	r2, r1
 80090cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090d4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80090ec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090f4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009102:	461a      	mov	r2, r3
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	371c      	adds	r7, #28
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	1ff80000 	.word	0x1ff80000

0800911c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b088      	sub	sp, #32
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff f911 	bl	8008358 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009136:	2110      	movs	r1, #16
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff f96b 	bl	8008414 <USB_FlushTxFifo>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d001      	beq.n	8009148 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff f997 	bl	800847c <USB_FlushRxFifo>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009158:	2300      	movs	r3, #0
 800915a:	61bb      	str	r3, [r7, #24]
 800915c:	e01f      	b.n	800919e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	015a      	lsls	r2, r3, #5
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	4413      	add	r3, r2
 8009166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009174:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800917c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009184:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	4413      	add	r3, r2
 800918e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009192:	461a      	mov	r2, r3
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	3301      	adds	r3, #1
 800919c:	61bb      	str	r3, [r7, #24]
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	2b0f      	cmp	r3, #15
 80091a2:	d9dc      	bls.n	800915e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80091a4:	2300      	movs	r3, #0
 80091a6:	61bb      	str	r3, [r7, #24]
 80091a8:	e034      	b.n	8009214 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	015a      	lsls	r2, r3, #5
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	4413      	add	r3, r2
 80091b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80091d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091de:	461a      	mov	r2, r3
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	3301      	adds	r3, #1
 80091e8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091f0:	d80c      	bhi.n	800920c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009208:	d0ec      	beq.n	80091e4 <USB_StopHost+0xc8>
 800920a:	e000      	b.n	800920e <USB_StopHost+0xf2>
        break;
 800920c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	3301      	adds	r3, #1
 8009212:	61bb      	str	r3, [r7, #24]
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	2b0f      	cmp	r3, #15
 8009218:	d9c7      	bls.n	80091aa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009220:	461a      	mov	r2, r3
 8009222:	f04f 33ff 	mov.w	r3, #4294967295
 8009226:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f04f 32ff 	mov.w	r2, #4294967295
 800922e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7ff f880 	bl	8008336 <USB_EnableGlobalInt>

  return ret;
 8009236:	7ffb      	ldrb	r3, [r7, #31]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3720      	adds	r7, #32
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009240:	b590      	push	{r4, r7, lr}
 8009242:	b089      	sub	sp, #36	; 0x24
 8009244:	af04      	add	r7, sp, #16
 8009246:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009248:	2301      	movs	r3, #1
 800924a:	2202      	movs	r2, #2
 800924c:	2102      	movs	r1, #2
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fc66 	bl	8009b20 <USBH_FindInterface>
 8009254:	4603      	mov	r3, r0
 8009256:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	2bff      	cmp	r3, #255	; 0xff
 800925c:	d002      	beq.n	8009264 <USBH_CDC_InterfaceInit+0x24>
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d901      	bls.n	8009268 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009264:	2302      	movs	r3, #2
 8009266:	e13d      	b.n	80094e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fc3b 	bl	8009ae8 <USBH_SelectInterface>
 8009272:	4603      	mov	r3, r0
 8009274:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009276:	7bbb      	ldrb	r3, [r7, #14]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d001      	beq.n	8009280 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800927c:	2302      	movs	r3, #2
 800927e:	e131      	b.n	80094e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009286:	2050      	movs	r0, #80	; 0x50
 8009288:	f002 fb16 	bl	800b8b8 <malloc>
 800928c:	4603      	mov	r3, r0
 800928e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80092a0:	2302      	movs	r3, #2
 80092a2:	e11f      	b.n	80094e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80092a4:	2250      	movs	r2, #80	; 0x50
 80092a6:	2100      	movs	r1, #0
 80092a8:	68b8      	ldr	r0, [r7, #8]
 80092aa:	f002 fb23 	bl	800b8f4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	211a      	movs	r1, #26
 80092b4:	fb01 f303 	mul.w	r3, r1, r3
 80092b8:	4413      	add	r3, r2
 80092ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	b25b      	sxtb	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	da15      	bge.n	80092f2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	211a      	movs	r1, #26
 80092cc:	fb01 f303 	mul.w	r3, r1, r3
 80092d0:	4413      	add	r3, r2
 80092d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80092d6:	781a      	ldrb	r2, [r3, #0]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	211a      	movs	r1, #26
 80092e2:	fb01 f303 	mul.w	r3, r1, r3
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80092ec:	881a      	ldrh	r2, [r3, #0]
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	785b      	ldrb	r3, [r3, #1]
 80092f6:	4619      	mov	r1, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f001 ff2c 	bl	800b156 <USBH_AllocPipe>
 80092fe:	4603      	mov	r3, r0
 8009300:	461a      	mov	r2, r3
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	7819      	ldrb	r1, [r3, #0]
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	7858      	ldrb	r0, [r3, #1]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	8952      	ldrh	r2, [r2, #10]
 800931e:	9202      	str	r2, [sp, #8]
 8009320:	2203      	movs	r2, #3
 8009322:	9201      	str	r2, [sp, #4]
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	4623      	mov	r3, r4
 8009328:	4602      	mov	r2, r0
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f001 fee4 	bl	800b0f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	2200      	movs	r2, #0
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f002 f9f3 	bl	800b724 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800933e:	2300      	movs	r3, #0
 8009340:	2200      	movs	r2, #0
 8009342:	210a      	movs	r1, #10
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 fbeb 	bl	8009b20 <USBH_FindInterface>
 800934a:	4603      	mov	r3, r0
 800934c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800934e:	7bfb      	ldrb	r3, [r7, #15]
 8009350:	2bff      	cmp	r3, #255	; 0xff
 8009352:	d002      	beq.n	800935a <USBH_CDC_InterfaceInit+0x11a>
 8009354:	7bfb      	ldrb	r3, [r7, #15]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d901      	bls.n	800935e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800935a:	2302      	movs	r3, #2
 800935c:	e0c2      	b.n	80094e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800935e:	7bfb      	ldrb	r3, [r7, #15]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	211a      	movs	r1, #26
 8009364:	fb01 f303 	mul.w	r3, r1, r3
 8009368:	4413      	add	r3, r2
 800936a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	b25b      	sxtb	r3, r3
 8009372:	2b00      	cmp	r3, #0
 8009374:	da16      	bge.n	80093a4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	211a      	movs	r1, #26
 800937c:	fb01 f303 	mul.w	r3, r1, r3
 8009380:	4413      	add	r3, r2
 8009382:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009386:	781a      	ldrb	r2, [r3, #0]
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800938c:	7bfb      	ldrb	r3, [r7, #15]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	211a      	movs	r1, #26
 8009392:	fb01 f303 	mul.w	r3, r1, r3
 8009396:	4413      	add	r3, r2
 8009398:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800939c:	881a      	ldrh	r2, [r3, #0]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	835a      	strh	r2, [r3, #26]
 80093a2:	e015      	b.n	80093d0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	211a      	movs	r1, #26
 80093aa:	fb01 f303 	mul.w	r3, r1, r3
 80093ae:	4413      	add	r3, r2
 80093b0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80093b4:	781a      	ldrb	r2, [r3, #0]
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	211a      	movs	r1, #26
 80093c0:	fb01 f303 	mul.w	r3, r1, r3
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80093ca:	881a      	ldrh	r2, [r3, #0]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	211a      	movs	r1, #26
 80093d6:	fb01 f303 	mul.w	r3, r1, r3
 80093da:	4413      	add	r3, r2
 80093dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	b25b      	sxtb	r3, r3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	da16      	bge.n	8009416 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	211a      	movs	r1, #26
 80093ee:	fb01 f303 	mul.w	r3, r1, r3
 80093f2:	4413      	add	r3, r2
 80093f4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80093f8:	781a      	ldrb	r2, [r3, #0]
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	211a      	movs	r1, #26
 8009404:	fb01 f303 	mul.w	r3, r1, r3
 8009408:	4413      	add	r3, r2
 800940a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800940e:	881a      	ldrh	r2, [r3, #0]
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	835a      	strh	r2, [r3, #26]
 8009414:	e015      	b.n	8009442 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	211a      	movs	r1, #26
 800941c:	fb01 f303 	mul.w	r3, r1, r3
 8009420:	4413      	add	r3, r2
 8009422:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009426:	781a      	ldrb	r2, [r3, #0]
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	211a      	movs	r1, #26
 8009432:	fb01 f303 	mul.w	r3, r1, r3
 8009436:	4413      	add	r3, r2
 8009438:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800943c:	881a      	ldrh	r2, [r3, #0]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	7b9b      	ldrb	r3, [r3, #14]
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f001 fe84 	bl	800b156 <USBH_AllocPipe>
 800944e:	4603      	mov	r3, r0
 8009450:	461a      	mov	r2, r3
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	7bdb      	ldrb	r3, [r3, #15]
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f001 fe7a 	bl	800b156 <USBH_AllocPipe>
 8009462:	4603      	mov	r3, r0
 8009464:	461a      	mov	r2, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	7b59      	ldrb	r1, [r3, #13]
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	7b98      	ldrb	r0, [r3, #14]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	8b12      	ldrh	r2, [r2, #24]
 8009482:	9202      	str	r2, [sp, #8]
 8009484:	2202      	movs	r2, #2
 8009486:	9201      	str	r2, [sp, #4]
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	4623      	mov	r3, r4
 800948c:	4602      	mov	r2, r0
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f001 fe32 	bl	800b0f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	7b19      	ldrb	r1, [r3, #12]
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	7bd8      	ldrb	r0, [r3, #15]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	8b52      	ldrh	r2, [r2, #26]
 80094ac:	9202      	str	r2, [sp, #8]
 80094ae:	2202      	movs	r2, #2
 80094b0:	9201      	str	r2, [sp, #4]
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	4623      	mov	r3, r4
 80094b6:	4602      	mov	r2, r0
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f001 fe1d 	bl	800b0f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	7b5b      	ldrb	r3, [r3, #13]
 80094ca:	2200      	movs	r2, #0
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f002 f928 	bl	800b724 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	7b1b      	ldrb	r3, [r3, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f002 f921 	bl	800b724 <USBH_LL_SetToggle>

  return USBH_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd90      	pop	{r4, r7, pc}

080094ec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094fa:	69db      	ldr	r3, [r3, #28]
 80094fc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00e      	beq.n	8009524 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f001 fe12 	bl	800b136 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f001 fe3d 	bl	800b198 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	7b1b      	ldrb	r3, [r3, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00e      	beq.n	800954a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	7b1b      	ldrb	r3, [r3, #12]
 8009530:	4619      	mov	r1, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f001 fdff 	bl	800b136 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	7b1b      	ldrb	r3, [r3, #12]
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f001 fe2a 	bl	800b198 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	7b5b      	ldrb	r3, [r3, #13]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00e      	beq.n	8009570 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	7b5b      	ldrb	r3, [r3, #13]
 8009556:	4619      	mov	r1, r3
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f001 fdec 	bl	800b136 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	7b5b      	ldrb	r3, [r3, #13]
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f001 fe17 	bl	800b198 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00b      	beq.n	8009594 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009582:	69db      	ldr	r3, [r3, #28]
 8009584:	4618      	mov	r0, r3
 8009586:	f002 f99f 	bl	800b8c8 <free>
    phost->pActiveClass->pData = 0U;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009590:	2200      	movs	r2, #0
 8009592:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	3340      	adds	r3, #64	; 0x40
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f8b1 	bl	800971e <GetLineCoding>
 80095bc:	4603      	mov	r3, r0
 80095be:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80095c0:	7afb      	ldrb	r3, [r7, #11]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d105      	bne.n	80095d2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095cc:	2102      	movs	r1, #2
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80095d2:	7afb      	ldrb	r3, [r7, #11]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80095e4:	2301      	movs	r3, #1
 80095e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80095fc:	2b04      	cmp	r3, #4
 80095fe:	d877      	bhi.n	80096f0 <USBH_CDC_Process+0x114>
 8009600:	a201      	add	r2, pc, #4	; (adr r2, 8009608 <USBH_CDC_Process+0x2c>)
 8009602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009606:	bf00      	nop
 8009608:	0800961d 	.word	0x0800961d
 800960c:	08009623 	.word	0x08009623
 8009610:	08009653 	.word	0x08009653
 8009614:	080096c7 	.word	0x080096c7
 8009618:	080096d5 	.word	0x080096d5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	73fb      	strb	r3, [r7, #15]
      break;
 8009620:	e06d      	b.n	80096fe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f897 	bl	800975c <SetLineCoding>
 800962e:	4603      	mov	r3, r0
 8009630:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d104      	bne.n	8009642 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	2202      	movs	r2, #2
 800963c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009640:	e058      	b.n	80096f4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009642:	7bbb      	ldrb	r3, [r7, #14]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d055      	beq.n	80096f4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2204      	movs	r2, #4
 800964c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009650:	e050      	b.n	80096f4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	3340      	adds	r3, #64	; 0x40
 8009656:	4619      	mov	r1, r3
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 f860 	bl	800971e <GetLineCoding>
 800965e:	4603      	mov	r3, r0
 8009660:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009662:	7bbb      	ldrb	r3, [r7, #14]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d126      	bne.n	80096b6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800967a:	791b      	ldrb	r3, [r3, #4]
 800967c:	429a      	cmp	r2, r3
 800967e:	d13b      	bne.n	80096f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800968a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800968c:	429a      	cmp	r2, r3
 800968e:	d133      	bne.n	80096f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800969a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800969c:	429a      	cmp	r2, r3
 800969e:	d12b      	bne.n	80096f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096a8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d124      	bne.n	80096f8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 f958 	bl	8009964 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80096b4:	e020      	b.n	80096f8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80096b6:	7bbb      	ldrb	r3, [r7, #14]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d01d      	beq.n	80096f8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	2204      	movs	r2, #4
 80096c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80096c4:	e018      	b.n	80096f8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f867 	bl	800979a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f8da 	bl	8009886 <CDC_ProcessReception>
      break;
 80096d2:	e014      	b.n	80096fe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80096d4:	2100      	movs	r1, #0
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 ffef 	bl	800a6ba <USBH_ClrFeature>
 80096dc:	4603      	mov	r3, r0
 80096de:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80096e0:	7bbb      	ldrb	r3, [r7, #14]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10a      	bne.n	80096fc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80096ee:	e005      	b.n	80096fc <USBH_CDC_Process+0x120>

    default:
      break;
 80096f0:	bf00      	nop
 80096f2:	e004      	b.n	80096fe <USBH_CDC_Process+0x122>
      break;
 80096f4:	bf00      	nop
 80096f6:	e002      	b.n	80096fe <USBH_CDC_Process+0x122>
      break;
 80096f8:	bf00      	nop
 80096fa:	e000      	b.n	80096fe <USBH_CDC_Process+0x122>
      break;
 80096fc:	bf00      	nop

  }

  return status;
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	370c      	adds	r7, #12
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	22a1      	movs	r2, #161	; 0xa1
 800972c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2221      	movs	r2, #33	; 0x21
 8009732:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2207      	movs	r2, #7
 8009744:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	2207      	movs	r2, #7
 800974a:	4619      	mov	r1, r3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f001 fa81 	bl	800ac54 <USBH_CtlReq>
 8009752:	4603      	mov	r3, r0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2221      	movs	r2, #33	; 0x21
 800976a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2220      	movs	r2, #32
 8009770:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2207      	movs	r2, #7
 8009782:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	2207      	movs	r2, #7
 8009788:	4619      	mov	r1, r3
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f001 fa62 	bl	800ac54 <USBH_CtlReq>
 8009790:	4603      	mov	r3, r0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b086      	sub	sp, #24
 800979e:	af02      	add	r7, sp, #8
 80097a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097a8:	69db      	ldr	r3, [r3, #28]
 80097aa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80097ac:	2300      	movs	r3, #0
 80097ae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d002      	beq.n	80097c0 <CDC_ProcessTransmission+0x26>
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d023      	beq.n	8009806 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80097be:	e05e      	b.n	800987e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	8b12      	ldrh	r2, [r2, #24]
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d90b      	bls.n	80097e4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	69d9      	ldr	r1, [r3, #28]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	8b1a      	ldrh	r2, [r3, #24]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	7b5b      	ldrb	r3, [r3, #13]
 80097d8:	2001      	movs	r0, #1
 80097da:	9000      	str	r0, [sp, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f001 fc48 	bl	800b072 <USBH_BulkSendData>
 80097e2:	e00b      	b.n	80097fc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	7b5b      	ldrb	r3, [r3, #13]
 80097f2:	2001      	movs	r0, #1
 80097f4:	9000      	str	r0, [sp, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f001 fc3b 	bl	800b072 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2202      	movs	r2, #2
 8009800:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009804:	e03b      	b.n	800987e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	7b5b      	ldrb	r3, [r3, #13]
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f001 ff5f 	bl	800b6d0 <USBH_LL_GetURBState>
 8009812:	4603      	mov	r3, r0
 8009814:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009816:	7afb      	ldrb	r3, [r7, #11]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d128      	bne.n	800986e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	8b12      	ldrh	r2, [r2, #24]
 8009824:	4293      	cmp	r3, r2
 8009826:	d90e      	bls.n	8009846 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	8b12      	ldrh	r2, [r2, #24]
 8009830:	1a9a      	subs	r2, r3, r2
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	8b12      	ldrh	r2, [r2, #24]
 800983e:	441a      	add	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	61da      	str	r2, [r3, #28]
 8009844:	e002      	b.n	800984c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009850:	2b00      	cmp	r3, #0
 8009852:	d004      	beq.n	800985e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800985c:	e00e      	b.n	800987c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f868 	bl	800993c <USBH_CDC_TransmitCallback>
      break;
 800986c:	e006      	b.n	800987c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800986e:	7afb      	ldrb	r3, [r7, #11]
 8009870:	2b02      	cmp	r3, #2
 8009872:	d103      	bne.n	800987c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800987c:	bf00      	nop
  }
}
 800987e:	bf00      	nop
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b086      	sub	sp, #24
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009894:	69db      	ldr	r3, [r3, #28]
 8009896:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009898:	2300      	movs	r3, #0
 800989a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	d002      	beq.n	80098ac <CDC_ProcessReception+0x26>
 80098a6:	2b04      	cmp	r3, #4
 80098a8:	d00e      	beq.n	80098c8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80098aa:	e043      	b.n	8009934 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	6a19      	ldr	r1, [r3, #32]
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	8b5a      	ldrh	r2, [r3, #26]
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	7b1b      	ldrb	r3, [r3, #12]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f001 fbff 	bl	800b0bc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2204      	movs	r2, #4
 80098c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80098c6:	e035      	b.n	8009934 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	7b1b      	ldrb	r3, [r3, #12]
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f001 fefe 	bl	800b6d0 <USBH_LL_GetURBState>
 80098d4:	4603      	mov	r3, r0
 80098d6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80098d8:	7cfb      	ldrb	r3, [r7, #19]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d129      	bne.n	8009932 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	7b1b      	ldrb	r3, [r3, #12]
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f001 fe61 	bl	800b5ac <USBH_LL_GetLastXferSize>
 80098ea:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d016      	beq.n	8009924 <CDC_ProcessReception+0x9e>
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	8b5b      	ldrh	r3, [r3, #26]
 80098fa:	461a      	mov	r2, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	4293      	cmp	r3, r2
 8009900:	d910      	bls.n	8009924 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	1ad2      	subs	r2, r2, r3
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	6a1a      	ldr	r2, [r3, #32]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	441a      	add	r2, r3
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	2203      	movs	r2, #3
 800991e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009922:	e006      	b.n	8009932 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f80f 	bl	8009950 <USBH_CDC_ReceiveCallback>
      break;
 8009932:	bf00      	nop
  }
}
 8009934:	bf00      	nop
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	4613      	mov	r3, r2
 8009984:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d101      	bne.n	8009990 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800998c:	2302      	movs	r3, #2
 800998e:	e029      	b.n	80099e4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	79fa      	ldrb	r2, [r7, #7]
 8009994:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2200      	movs	r2, #0
 800999c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f000 f81f 	bl	80099ec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f001 fd31 	bl	800b444 <USBH_LL_Init>

  return USBH_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80099f4:	2300      	movs	r3, #0
 80099f6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80099f8:	2300      	movs	r3, #0
 80099fa:	60fb      	str	r3, [r7, #12]
 80099fc:	e009      	b.n	8009a12 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	33e0      	adds	r3, #224	; 0xe0
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	4413      	add	r3, r2
 8009a08:	2200      	movs	r2, #0
 8009a0a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	60fb      	str	r3, [r7, #12]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2b0f      	cmp	r3, #15
 8009a16:	d9f2      	bls.n	80099fe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	e009      	b.n	8009a32 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009a28:	2200      	movs	r2, #0
 8009a2a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a38:	d3f1      	bcc.n	8009a1e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2240      	movs	r2, #64	; 0x40
 8009a5e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d016      	beq.n	8009ad6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10e      	bne.n	8009ad0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009ab8:	1c59      	adds	r1, r3, #1
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	33de      	adds	r3, #222	; 0xde
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009aca:	2300      	movs	r3, #0
 8009acc:	73fb      	strb	r3, [r7, #15]
 8009ace:	e004      	b.n	8009ada <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009ad0:	2302      	movs	r3, #2
 8009ad2:	73fb      	strb	r3, [r7, #15]
 8009ad4:	e001      	b.n	8009ada <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009afe:	78fa      	ldrb	r2, [r7, #3]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d204      	bcs.n	8009b0e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	78fa      	ldrb	r2, [r7, #3]
 8009b08:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009b0c:	e001      	b.n	8009b12 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009b0e:	2302      	movs	r3, #2
 8009b10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3714      	adds	r7, #20
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b087      	sub	sp, #28
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	4608      	mov	r0, r1
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	4603      	mov	r3, r0
 8009b30:	70fb      	strb	r3, [r7, #3]
 8009b32:	460b      	mov	r3, r1
 8009b34:	70bb      	strb	r3, [r7, #2]
 8009b36:	4613      	mov	r3, r2
 8009b38:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009b48:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009b4a:	e025      	b.n	8009b98 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009b4c:	7dfb      	ldrb	r3, [r7, #23]
 8009b4e:	221a      	movs	r2, #26
 8009b50:	fb02 f303 	mul.w	r3, r2, r3
 8009b54:	3308      	adds	r3, #8
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	4413      	add	r3, r2
 8009b5a:	3302      	adds	r3, #2
 8009b5c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	795b      	ldrb	r3, [r3, #5]
 8009b62:	78fa      	ldrb	r2, [r7, #3]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d002      	beq.n	8009b6e <USBH_FindInterface+0x4e>
 8009b68:	78fb      	ldrb	r3, [r7, #3]
 8009b6a:	2bff      	cmp	r3, #255	; 0xff
 8009b6c:	d111      	bne.n	8009b92 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009b72:	78ba      	ldrb	r2, [r7, #2]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d002      	beq.n	8009b7e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009b78:	78bb      	ldrb	r3, [r7, #2]
 8009b7a:	2bff      	cmp	r3, #255	; 0xff
 8009b7c:	d109      	bne.n	8009b92 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009b82:	787a      	ldrb	r2, [r7, #1]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d002      	beq.n	8009b8e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009b88:	787b      	ldrb	r3, [r7, #1]
 8009b8a:	2bff      	cmp	r3, #255	; 0xff
 8009b8c:	d101      	bne.n	8009b92 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
 8009b90:	e006      	b.n	8009ba0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009b92:	7dfb      	ldrb	r3, [r7, #23]
 8009b94:	3301      	adds	r3, #1
 8009b96:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d9d6      	bls.n	8009b4c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009b9e:	23ff      	movs	r3, #255	; 0xff
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	371c      	adds	r7, #28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f001 fc81 	bl	800b4bc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009bba:	2101      	movs	r1, #1
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f001 fd9a 	bl	800b6f6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af04      	add	r7, sp, #16
 8009bd2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d102      	bne.n	8009bee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2203      	movs	r2, #3
 8009bec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	2b0b      	cmp	r3, #11
 8009bf6:	f200 81be 	bhi.w	8009f76 <USBH_Process+0x3aa>
 8009bfa:	a201      	add	r2, pc, #4	; (adr r2, 8009c00 <USBH_Process+0x34>)
 8009bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c00:	08009c31 	.word	0x08009c31
 8009c04:	08009c63 	.word	0x08009c63
 8009c08:	08009ccb 	.word	0x08009ccb
 8009c0c:	08009f11 	.word	0x08009f11
 8009c10:	08009f77 	.word	0x08009f77
 8009c14:	08009d6f 	.word	0x08009d6f
 8009c18:	08009eb7 	.word	0x08009eb7
 8009c1c:	08009da5 	.word	0x08009da5
 8009c20:	08009dc5 	.word	0x08009dc5
 8009c24:	08009de5 	.word	0x08009de5
 8009c28:	08009e29 	.word	0x08009e29
 8009c2c:	08009ef9 	.word	0x08009ef9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f000 819e 	beq.w	8009f7a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2201      	movs	r2, #1
 8009c42:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009c44:	20c8      	movs	r0, #200	; 0xc8
 8009c46:	f001 fd9d 	bl	800b784 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f001 fc93 	bl	800b576 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009c60:	e18b      	b.n	8009f7a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d107      	bne.n	8009c7c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2202      	movs	r2, #2
 8009c78:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c7a:	e18d      	b.n	8009f98 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c86:	d914      	bls.n	8009cb2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009c8e:	3301      	adds	r3, #1
 8009c90:	b2da      	uxtb	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	d903      	bls.n	8009caa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	220d      	movs	r2, #13
 8009ca6:	701a      	strb	r2, [r3, #0]
      break;
 8009ca8:	e176      	b.n	8009f98 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	701a      	strb	r2, [r3, #0]
      break;
 8009cb0:	e172      	b.n	8009f98 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009cb8:	f103 020a 	add.w	r2, r3, #10
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009cc2:	200a      	movs	r0, #10
 8009cc4:	f001 fd5e 	bl	800b784 <USBH_Delay>
      break;
 8009cc8:	e166      	b.n	8009f98 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d005      	beq.n	8009ce0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009cda:	2104      	movs	r1, #4
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009ce0:	2064      	movs	r0, #100	; 0x64
 8009ce2:	f001 fd4f 	bl	800b784 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f001 fc1e 	bl	800b528 <USBH_LL_GetSpeed>
 8009cec:	4603      	mov	r3, r0
 8009cee:	461a      	mov	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2205      	movs	r2, #5
 8009cfa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f001 fa29 	bl	800b156 <USBH_AllocPipe>
 8009d04:	4603      	mov	r3, r0
 8009d06:	461a      	mov	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009d0c:	2180      	movs	r1, #128	; 0x80
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f001 fa21 	bl	800b156 <USBH_AllocPipe>
 8009d14:	4603      	mov	r3, r0
 8009d16:	461a      	mov	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	7919      	ldrb	r1, [r3, #4]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009d30:	b292      	uxth	r2, r2
 8009d32:	9202      	str	r2, [sp, #8]
 8009d34:	2200      	movs	r2, #0
 8009d36:	9201      	str	r2, [sp, #4]
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2280      	movs	r2, #128	; 0x80
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f001 f9da 	bl	800b0f8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	7959      	ldrb	r1, [r3, #5]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009d58:	b292      	uxth	r2, r2
 8009d5a:	9202      	str	r2, [sp, #8]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	9201      	str	r2, [sp, #4]
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	4603      	mov	r3, r0
 8009d64:	2200      	movs	r2, #0
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f001 f9c6 	bl	800b0f8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009d6c:	e114      	b.n	8009f98 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f918 	bl	8009fa4 <USBH_HandleEnum>
 8009d74:	4603      	mov	r3, r0
 8009d76:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f040 80fe 	bne.w	8009f7e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d103      	bne.n	8009d9c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2208      	movs	r2, #8
 8009d98:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009d9a:	e0f0      	b.n	8009f7e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2207      	movs	r2, #7
 8009da0:	701a      	strb	r2, [r3, #0]
      break;
 8009da2:	e0ec      	b.n	8009f7e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f000 80e9 	beq.w	8009f82 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009db6:	2101      	movs	r1, #1
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2208      	movs	r2, #8
 8009dc0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009dc2:	e0de      	b.n	8009f82 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fc2c 	bl	800a62c <USBH_SetCfg>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f040 80d5 	bne.w	8009f86 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2209      	movs	r2, #9
 8009de0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009de2:	e0d0      	b.n	8009f86 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009dea:	f003 0320 	and.w	r3, r3, #32
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d016      	beq.n	8009e20 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009df2:	2101      	movs	r1, #1
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fc3c 	bl	800a672 <USBH_SetFeature>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d103      	bne.n	8009e0e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	220a      	movs	r2, #10
 8009e0a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e0c:	e0bd      	b.n	8009f8a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009e0e:	7bbb      	ldrb	r3, [r7, #14]
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	f040 80b9 	bne.w	8009f8a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	220a      	movs	r2, #10
 8009e1c:	701a      	strb	r2, [r3, #0]
      break;
 8009e1e:	e0b4      	b.n	8009f8a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	220a      	movs	r2, #10
 8009e24:	701a      	strb	r2, [r3, #0]
      break;
 8009e26:	e0b0      	b.n	8009f8a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 80ad 	beq.w	8009f8e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73fb      	strb	r3, [r7, #15]
 8009e40:	e016      	b.n	8009e70 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009e42:	7bfa      	ldrb	r2, [r7, #15]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	32de      	adds	r2, #222	; 0xde
 8009e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e4c:	791a      	ldrb	r2, [r3, #4]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d108      	bne.n	8009e6a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009e58:	7bfa      	ldrb	r2, [r7, #15]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	32de      	adds	r2, #222	; 0xde
 8009e5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009e68:	e005      	b.n	8009e76 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	73fb      	strb	r3, [r7, #15]
 8009e70:	7bfb      	ldrb	r3, [r7, #15]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d0e5      	beq.n	8009e42 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d016      	beq.n	8009eae <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	4798      	blx	r3
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d109      	bne.n	8009ea6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2206      	movs	r2, #6
 8009e96:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e9e:	2103      	movs	r1, #3
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ea4:	e073      	b.n	8009f8e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	220d      	movs	r2, #13
 8009eaa:	701a      	strb	r2, [r3, #0]
      break;
 8009eac:	e06f      	b.n	8009f8e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	220d      	movs	r2, #13
 8009eb2:	701a      	strb	r2, [r3, #0]
      break;
 8009eb4:	e06b      	b.n	8009f8e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d017      	beq.n	8009ef0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	4798      	blx	r3
 8009ecc:	4603      	mov	r3, r0
 8009ece:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009ed0:	7bbb      	ldrb	r3, [r7, #14]
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d103      	bne.n	8009ee0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	220b      	movs	r2, #11
 8009edc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ede:	e058      	b.n	8009f92 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d154      	bne.n	8009f92 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	220d      	movs	r2, #13
 8009eec:	701a      	strb	r2, [r3, #0]
      break;
 8009eee:	e050      	b.n	8009f92 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	220d      	movs	r2, #13
 8009ef4:	701a      	strb	r2, [r3, #0]
      break;
 8009ef6:	e04c      	b.n	8009f92 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d049      	beq.n	8009f96 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	4798      	blx	r3
      }
      break;
 8009f0e:	e042      	b.n	8009f96 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f7ff fd67 	bl	80099ec <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d009      	beq.n	8009f3c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d005      	beq.n	8009f52 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f4c:	2105      	movs	r1, #5
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d107      	bne.n	8009f6e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7ff fe20 	bl	8009bac <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009f6c:	e014      	b.n	8009f98 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f001 faa4 	bl	800b4bc <USBH_LL_Start>
      break;
 8009f74:	e010      	b.n	8009f98 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009f76:	bf00      	nop
 8009f78:	e00e      	b.n	8009f98 <USBH_Process+0x3cc>
      break;
 8009f7a:	bf00      	nop
 8009f7c:	e00c      	b.n	8009f98 <USBH_Process+0x3cc>
      break;
 8009f7e:	bf00      	nop
 8009f80:	e00a      	b.n	8009f98 <USBH_Process+0x3cc>
    break;
 8009f82:	bf00      	nop
 8009f84:	e008      	b.n	8009f98 <USBH_Process+0x3cc>
      break;
 8009f86:	bf00      	nop
 8009f88:	e006      	b.n	8009f98 <USBH_Process+0x3cc>
      break;
 8009f8a:	bf00      	nop
 8009f8c:	e004      	b.n	8009f98 <USBH_Process+0x3cc>
      break;
 8009f8e:	bf00      	nop
 8009f90:	e002      	b.n	8009f98 <USBH_Process+0x3cc>
      break;
 8009f92:	bf00      	nop
 8009f94:	e000      	b.n	8009f98 <USBH_Process+0x3cc>
      break;
 8009f96:	bf00      	nop
  }
  return USBH_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop

08009fa4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b088      	sub	sp, #32
 8009fa8:	af04      	add	r7, sp, #16
 8009faa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009fac:	2301      	movs	r3, #1
 8009fae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	785b      	ldrb	r3, [r3, #1]
 8009fb8:	2b07      	cmp	r3, #7
 8009fba:	f200 81c1 	bhi.w	800a340 <USBH_HandleEnum+0x39c>
 8009fbe:	a201      	add	r2, pc, #4	; (adr r2, 8009fc4 <USBH_HandleEnum+0x20>)
 8009fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc4:	08009fe5 	.word	0x08009fe5
 8009fc8:	0800a0a3 	.word	0x0800a0a3
 8009fcc:	0800a10d 	.word	0x0800a10d
 8009fd0:	0800a19b 	.word	0x0800a19b
 8009fd4:	0800a205 	.word	0x0800a205
 8009fd8:	0800a275 	.word	0x0800a275
 8009fdc:	0800a2bb 	.word	0x0800a2bb
 8009fe0:	0800a301 	.word	0x0800a301
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009fe4:	2108      	movs	r1, #8
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 fa50 	bl	800a48c <USBH_Get_DevDesc>
 8009fec:	4603      	mov	r3, r0
 8009fee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d130      	bne.n	800a058 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	7919      	ldrb	r1, [r3, #4]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a01a:	b292      	uxth	r2, r2
 800a01c:	9202      	str	r2, [sp, #8]
 800a01e:	2200      	movs	r2, #0
 800a020:	9201      	str	r2, [sp, #4]
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	4603      	mov	r3, r0
 800a026:	2280      	movs	r2, #128	; 0x80
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f001 f865 	bl	800b0f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	7959      	ldrb	r1, [r3, #5]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a042:	b292      	uxth	r2, r2
 800a044:	9202      	str	r2, [sp, #8]
 800a046:	2200      	movs	r2, #0
 800a048:	9201      	str	r2, [sp, #4]
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	4603      	mov	r3, r0
 800a04e:	2200      	movs	r2, #0
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f001 f851 	bl	800b0f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a056:	e175      	b.n	800a344 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a058:	7bbb      	ldrb	r3, [r7, #14]
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	f040 8172 	bne.w	800a344 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a066:	3301      	adds	r3, #1
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a076:	2b03      	cmp	r3, #3
 800a078:	d903      	bls.n	800a082 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	220d      	movs	r2, #13
 800a07e:	701a      	strb	r2, [r3, #0]
      break;
 800a080:	e160      	b.n	800a344 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	795b      	ldrb	r3, [r3, #5]
 800a086:	4619      	mov	r1, r3
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f001 f885 	bl	800b198 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	791b      	ldrb	r3, [r3, #4]
 800a092:	4619      	mov	r1, r3
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f001 f87f 	bl	800b198 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	701a      	strb	r2, [r3, #0]
      break;
 800a0a0:	e150      	b.n	800a344 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a0a2:	2112      	movs	r1, #18
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 f9f1 	bl	800a48c <USBH_Get_DevDesc>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a0ae:	7bbb      	ldrb	r3, [r7, #14]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d103      	bne.n	800a0bc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2202      	movs	r2, #2
 800a0b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a0ba:	e145      	b.n	800a348 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0bc:	7bbb      	ldrb	r3, [r7, #14]
 800a0be:	2b03      	cmp	r3, #3
 800a0c0:	f040 8142 	bne.w	800a348 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a0da:	2b03      	cmp	r3, #3
 800a0dc:	d903      	bls.n	800a0e6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	220d      	movs	r2, #13
 800a0e2:	701a      	strb	r2, [r3, #0]
      break;
 800a0e4:	e130      	b.n	800a348 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	795b      	ldrb	r3, [r3, #5]
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f001 f853 	bl	800b198 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	791b      	ldrb	r3, [r3, #4]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f001 f84d 	bl	800b198 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	701a      	strb	r2, [r3, #0]
      break;
 800a10a:	e11d      	b.n	800a348 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a10c:	2101      	movs	r1, #1
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fa68 	bl	800a5e4 <USBH_SetAddress>
 800a114:	4603      	mov	r3, r0
 800a116:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a118:	7bbb      	ldrb	r3, [r7, #14]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d132      	bne.n	800a184 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a11e:	2002      	movs	r0, #2
 800a120:	f001 fb30 	bl	800b784 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2203      	movs	r2, #3
 800a130:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	7919      	ldrb	r1, [r3, #4]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a146:	b292      	uxth	r2, r2
 800a148:	9202      	str	r2, [sp, #8]
 800a14a:	2200      	movs	r2, #0
 800a14c:	9201      	str	r2, [sp, #4]
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	4603      	mov	r3, r0
 800a152:	2280      	movs	r2, #128	; 0x80
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 ffcf 	bl	800b0f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	7959      	ldrb	r1, [r3, #5]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a16e:	b292      	uxth	r2, r2
 800a170:	9202      	str	r2, [sp, #8]
 800a172:	2200      	movs	r2, #0
 800a174:	9201      	str	r2, [sp, #4]
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	4603      	mov	r3, r0
 800a17a:	2200      	movs	r2, #0
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 ffbb 	bl	800b0f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a182:	e0e3      	b.n	800a34c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a184:	7bbb      	ldrb	r3, [r7, #14]
 800a186:	2b03      	cmp	r3, #3
 800a188:	f040 80e0 	bne.w	800a34c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	220d      	movs	r2, #13
 800a190:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	705a      	strb	r2, [r3, #1]
      break;
 800a198:	e0d8      	b.n	800a34c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a19a:	2109      	movs	r1, #9
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f99d 	bl	800a4dc <USBH_Get_CfgDesc>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a1a6:	7bbb      	ldrb	r3, [r7, #14]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d103      	bne.n	800a1b4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2204      	movs	r2, #4
 800a1b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a1b2:	e0cd      	b.n	800a350 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1b4:	7bbb      	ldrb	r3, [r7, #14]
 800a1b6:	2b03      	cmp	r3, #3
 800a1b8:	f040 80ca 	bne.w	800a350 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	b2da      	uxtb	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a1d2:	2b03      	cmp	r3, #3
 800a1d4:	d903      	bls.n	800a1de <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	220d      	movs	r2, #13
 800a1da:	701a      	strb	r2, [r3, #0]
      break;
 800a1dc:	e0b8      	b.n	800a350 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	795b      	ldrb	r3, [r3, #5]
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 ffd7 	bl	800b198 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	791b      	ldrb	r3, [r3, #4]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 ffd1 	bl	800b198 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	701a      	strb	r2, [r3, #0]
      break;
 800a202:	e0a5      	b.n	800a350 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a20a:	4619      	mov	r1, r3
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 f965 	bl	800a4dc <USBH_Get_CfgDesc>
 800a212:	4603      	mov	r3, r0
 800a214:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a216:	7bbb      	ldrb	r3, [r7, #14]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d103      	bne.n	800a224 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2205      	movs	r2, #5
 800a220:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a222:	e097      	b.n	800a354 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a224:	7bbb      	ldrb	r3, [r7, #14]
 800a226:	2b03      	cmp	r3, #3
 800a228:	f040 8094 	bne.w	800a354 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a232:	3301      	adds	r3, #1
 800a234:	b2da      	uxtb	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a242:	2b03      	cmp	r3, #3
 800a244:	d903      	bls.n	800a24e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	220d      	movs	r2, #13
 800a24a:	701a      	strb	r2, [r3, #0]
      break;
 800a24c:	e082      	b.n	800a354 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	795b      	ldrb	r3, [r3, #5]
 800a252:	4619      	mov	r1, r3
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 ff9f 	bl	800b198 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	791b      	ldrb	r3, [r3, #4]
 800a25e:	4619      	mov	r1, r3
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 ff99 	bl	800b198 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	701a      	strb	r2, [r3, #0]
      break;
 800a272:	e06f      	b.n	800a354 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d019      	beq.n	800a2b2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a28a:	23ff      	movs	r3, #255	; 0xff
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f949 	bl	800a524 <USBH_Get_StringDesc>
 800a292:	4603      	mov	r3, r0
 800a294:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a296:	7bbb      	ldrb	r3, [r7, #14]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d103      	bne.n	800a2a4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2206      	movs	r2, #6
 800a2a0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a2a2:	e059      	b.n	800a358 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2a4:	7bbb      	ldrb	r3, [r7, #14]
 800a2a6:	2b03      	cmp	r3, #3
 800a2a8:	d156      	bne.n	800a358 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2206      	movs	r2, #6
 800a2ae:	705a      	strb	r2, [r3, #1]
      break;
 800a2b0:	e052      	b.n	800a358 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2206      	movs	r2, #6
 800a2b6:	705a      	strb	r2, [r3, #1]
      break;
 800a2b8:	e04e      	b.n	800a358 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d019      	beq.n	800a2f8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a2d0:	23ff      	movs	r3, #255	; 0xff
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 f926 	bl	800a524 <USBH_Get_StringDesc>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a2dc:	7bbb      	ldrb	r3, [r7, #14]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d103      	bne.n	800a2ea <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2207      	movs	r2, #7
 800a2e6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a2e8:	e038      	b.n	800a35c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2ea:	7bbb      	ldrb	r3, [r7, #14]
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	d135      	bne.n	800a35c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2207      	movs	r2, #7
 800a2f4:	705a      	strb	r2, [r3, #1]
      break;
 800a2f6:	e031      	b.n	800a35c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2207      	movs	r2, #7
 800a2fc:	705a      	strb	r2, [r3, #1]
      break;
 800a2fe:	e02d      	b.n	800a35c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a306:	2b00      	cmp	r3, #0
 800a308:	d017      	beq.n	800a33a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a316:	23ff      	movs	r3, #255	; 0xff
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f903 	bl	800a524 <USBH_Get_StringDesc>
 800a31e:	4603      	mov	r3, r0
 800a320:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a322:	7bbb      	ldrb	r3, [r7, #14]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d102      	bne.n	800a32e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a32c:	e018      	b.n	800a360 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a32e:	7bbb      	ldrb	r3, [r7, #14]
 800a330:	2b03      	cmp	r3, #3
 800a332:	d115      	bne.n	800a360 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a334:	2300      	movs	r3, #0
 800a336:	73fb      	strb	r3, [r7, #15]
      break;
 800a338:	e012      	b.n	800a360 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a33a:	2300      	movs	r3, #0
 800a33c:	73fb      	strb	r3, [r7, #15]
      break;
 800a33e:	e00f      	b.n	800a360 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a340:	bf00      	nop
 800a342:	e00e      	b.n	800a362 <USBH_HandleEnum+0x3be>
      break;
 800a344:	bf00      	nop
 800a346:	e00c      	b.n	800a362 <USBH_HandleEnum+0x3be>
      break;
 800a348:	bf00      	nop
 800a34a:	e00a      	b.n	800a362 <USBH_HandleEnum+0x3be>
      break;
 800a34c:	bf00      	nop
 800a34e:	e008      	b.n	800a362 <USBH_HandleEnum+0x3be>
      break;
 800a350:	bf00      	nop
 800a352:	e006      	b.n	800a362 <USBH_HandleEnum+0x3be>
      break;
 800a354:	bf00      	nop
 800a356:	e004      	b.n	800a362 <USBH_HandleEnum+0x3be>
      break;
 800a358:	bf00      	nop
 800a35a:	e002      	b.n	800a362 <USBH_HandleEnum+0x3be>
      break;
 800a35c:	bf00      	nop
 800a35e:	e000      	b.n	800a362 <USBH_HandleEnum+0x3be>
      break;
 800a360:	bf00      	nop
  }
  return Status;
 800a362:	7bfb      	ldrb	r3, [r7, #15]
}
 800a364:	4618      	mov	r0, r3
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a37e:	bf00      	nop
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b082      	sub	sp, #8
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f804 	bl	800a3ae <USBH_HandleSof>
}
 800a3a6:	bf00      	nop
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b082      	sub	sp, #8
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	2b0b      	cmp	r3, #11
 800a3be:	d10a      	bne.n	800a3d6 <USBH_HandleSof+0x28>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d005      	beq.n	800a3d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3d0:	699b      	ldr	r3, [r3, #24]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	4798      	blx	r3
  }
}
 800a3d6:	bf00      	nop
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b083      	sub	sp, #12
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a3ee:	bf00      	nop
}
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b083      	sub	sp, #12
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a40a:	bf00      	nop
}
 800a40c:	370c      	adds	r7, #12
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a416:	b480      	push	{r7}
 800a418:	b083      	sub	sp, #12
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f001 f844 	bl	800b4f2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	791b      	ldrb	r3, [r3, #4]
 800a46e:	4619      	mov	r1, r3
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fe91 	bl	800b198 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	795b      	ldrb	r3, [r3, #5]
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 fe8b 	bl	800b198 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af02      	add	r7, sp, #8
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a49e:	78fb      	ldrb	r3, [r7, #3]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f864 	bl	800a57a <USBH_GetDescriptor>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800a4b6:	7bfb      	ldrb	r3, [r7, #15]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10a      	bne.n	800a4d2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a4c8:	78fa      	ldrb	r2, [r7, #3]
 800a4ca:	b292      	uxth	r2, r2
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	f000 f918 	bl	800a702 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af02      	add	r7, sp, #8
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	331c      	adds	r3, #28
 800a4ec:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a4ee:	887b      	ldrh	r3, [r7, #2]
 800a4f0:	9300      	str	r3, [sp, #0]
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f83d 	bl	800a57a <USBH_GetDescriptor>
 800a500:	4603      	mov	r3, r0
 800a502:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a504:	7bfb      	ldrb	r3, [r7, #15]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d107      	bne.n	800a51a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a50a:	887b      	ldrh	r3, [r7, #2]
 800a50c:	461a      	mov	r2, r3
 800a50e:	68b9      	ldr	r1, [r7, #8]
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f987 	bl	800a824 <USBH_ParseCfgDesc>
 800a516:	4603      	mov	r3, r0
 800a518:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b088      	sub	sp, #32
 800a528:	af02      	add	r7, sp, #8
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	607a      	str	r2, [r7, #4]
 800a52e:	461a      	mov	r2, r3
 800a530:	460b      	mov	r3, r1
 800a532:	72fb      	strb	r3, [r7, #11]
 800a534:	4613      	mov	r3, r2
 800a536:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800a538:	7afb      	ldrb	r3, [r7, #11]
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a540:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a548:	893b      	ldrh	r3, [r7, #8]
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	460b      	mov	r3, r1
 800a54e:	2100      	movs	r1, #0
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f000 f812 	bl	800a57a <USBH_GetDescriptor>
 800a556:	4603      	mov	r3, r0
 800a558:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d107      	bne.n	800a570 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a566:	893a      	ldrh	r2, [r7, #8]
 800a568:	6879      	ldr	r1, [r7, #4]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f000 fb24 	bl	800abb8 <USBH_ParseStringDesc>
  }

  return status;
 800a570:	7dfb      	ldrb	r3, [r7, #23]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3718      	adds	r7, #24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b084      	sub	sp, #16
 800a57e:	af00      	add	r7, sp, #0
 800a580:	60f8      	str	r0, [r7, #12]
 800a582:	607b      	str	r3, [r7, #4]
 800a584:	460b      	mov	r3, r1
 800a586:	72fb      	strb	r3, [r7, #11]
 800a588:	4613      	mov	r3, r2
 800a58a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	789b      	ldrb	r3, [r3, #2]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d11c      	bne.n	800a5ce <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a594:	7afb      	ldrb	r3, [r7, #11]
 800a596:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2206      	movs	r2, #6
 800a5a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	893a      	ldrh	r2, [r7, #8]
 800a5aa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a5ac:	893b      	ldrh	r3, [r7, #8]
 800a5ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a5b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5b6:	d104      	bne.n	800a5c2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f240 4209 	movw	r2, #1033	; 0x409
 800a5be:	829a      	strh	r2, [r3, #20]
 800a5c0:	e002      	b.n	800a5c8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	8b3a      	ldrh	r2, [r7, #24]
 800a5cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a5ce:	8b3b      	ldrh	r3, [r7, #24]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	6879      	ldr	r1, [r7, #4]
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f000 fb3d 	bl	800ac54 <USBH_CtlReq>
 800a5da:	4603      	mov	r3, r0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	789b      	ldrb	r3, [r3, #2]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d10f      	bne.n	800a618 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2205      	movs	r2, #5
 800a602:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a604:	78fb      	ldrb	r3, [r7, #3]
 800a606:	b29a      	uxth	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a618:	2200      	movs	r2, #0
 800a61a:	2100      	movs	r1, #0
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 fb19 	bl	800ac54 <USBH_CtlReq>
 800a622:	4603      	mov	r3, r0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	460b      	mov	r3, r1
 800a636:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	789b      	ldrb	r3, [r3, #2]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d10e      	bne.n	800a65e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2209      	movs	r2, #9
 800a64a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	887a      	ldrh	r2, [r7, #2]
 800a650:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a65e:	2200      	movs	r2, #0
 800a660:	2100      	movs	r1, #0
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 faf6 	bl	800ac54 <USBH_CtlReq>
 800a668:	4603      	mov	r3, r0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b082      	sub	sp, #8
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	460b      	mov	r3, r1
 800a67c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	789b      	ldrb	r3, [r3, #2]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d10f      	bne.n	800a6a6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2203      	movs	r2, #3
 800a690:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a692:	78fb      	ldrb	r3, [r7, #3]
 800a694:	b29a      	uxth	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fad2 	bl	800ac54 <USBH_CtlReq>
 800a6b0:	4603      	mov	r3, r0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b082      	sub	sp, #8
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	789b      	ldrb	r3, [r3, #2]
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d10f      	bne.n	800a6ee <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a6e0:	78fb      	ldrb	r3, [r7, #3]
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 faae 	bl	800ac54 <USBH_CtlReq>
 800a6f8:	4603      	mov	r3, r0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a702:	b480      	push	{r7}
 800a704:	b085      	sub	sp, #20
 800a706:	af00      	add	r7, sp, #0
 800a708:	60f8      	str	r0, [r7, #12]
 800a70a:	60b9      	str	r1, [r7, #8]
 800a70c:	4613      	mov	r3, r2
 800a70e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	781a      	ldrb	r2, [r3, #0]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	785a      	ldrb	r2, [r3, #1]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	3302      	adds	r3, #2
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	b29a      	uxth	r2, r3
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	3303      	adds	r3, #3
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	b29b      	uxth	r3, r3
 800a730:	021b      	lsls	r3, r3, #8
 800a732:	b29b      	uxth	r3, r3
 800a734:	4313      	orrs	r3, r2
 800a736:	b29a      	uxth	r2, r3
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	791a      	ldrb	r2, [r3, #4]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	795a      	ldrb	r2, [r3, #5]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	799a      	ldrb	r2, [r3, #6]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	79da      	ldrb	r2, [r3, #7]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	79db      	ldrb	r3, [r3, #7]
 800a760:	2b20      	cmp	r3, #32
 800a762:	dc11      	bgt.n	800a788 <USBH_ParseDevDesc+0x86>
 800a764:	2b08      	cmp	r3, #8
 800a766:	db16      	blt.n	800a796 <USBH_ParseDevDesc+0x94>
 800a768:	3b08      	subs	r3, #8
 800a76a:	2201      	movs	r2, #1
 800a76c:	fa02 f303 	lsl.w	r3, r2, r3
 800a770:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800a774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	bf14      	ite	ne
 800a77c:	2301      	movne	r3, #1
 800a77e:	2300      	moveq	r3, #0
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b00      	cmp	r3, #0
 800a784:	d102      	bne.n	800a78c <USBH_ParseDevDesc+0x8a>
 800a786:	e006      	b.n	800a796 <USBH_ParseDevDesc+0x94>
 800a788:	2b40      	cmp	r3, #64	; 0x40
 800a78a:	d104      	bne.n	800a796 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	79da      	ldrb	r2, [r3, #7]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	71da      	strb	r2, [r3, #7]
      break;
 800a794:	e003      	b.n	800a79e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2240      	movs	r2, #64	; 0x40
 800a79a:	71da      	strb	r2, [r3, #7]
      break;
 800a79c:	bf00      	nop
  }

  if (length > 8U)
 800a79e:	88fb      	ldrh	r3, [r7, #6]
 800a7a0:	2b08      	cmp	r3, #8
 800a7a2:	d939      	bls.n	800a818 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	3308      	adds	r3, #8
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	3309      	adds	r3, #9
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	021b      	lsls	r3, r3, #8
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	330a      	adds	r3, #10
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	330b      	adds	r3, #11
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	021b      	lsls	r3, r3, #8
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	330c      	adds	r3, #12
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	330d      	adds	r3, #13
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	021b      	lsls	r3, r3, #8
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	b29a      	uxth	r2, r3
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	7b9a      	ldrb	r2, [r3, #14]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	7bda      	ldrb	r2, [r3, #15]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	7c1a      	ldrb	r2, [r3, #16]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	7c5a      	ldrb	r2, [r3, #17]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	745a      	strb	r2, [r3, #17]
  }
}
 800a818:	bf00      	nop
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b08c      	sub	sp, #48	; 0x30
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	4613      	mov	r3, r2
 800a830:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a838:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a844:	2300      	movs	r3, #0
 800a846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a84a:	2300      	movs	r3, #0
 800a84c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	781a      	ldrb	r2, [r3, #0]
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	785a      	ldrb	r2, [r3, #1]
 800a860:	6a3b      	ldr	r3, [r7, #32]
 800a862:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	3302      	adds	r3, #2
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	3303      	adds	r3, #3
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	b29b      	uxth	r3, r3
 800a874:	021b      	lsls	r3, r3, #8
 800a876:	b29b      	uxth	r3, r3
 800a878:	4313      	orrs	r3, r2
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a880:	bf28      	it	cs
 800a882:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a886:	b29a      	uxth	r2, r3
 800a888:	6a3b      	ldr	r3, [r7, #32]
 800a88a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	791a      	ldrb	r2, [r3, #4]
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	795a      	ldrb	r2, [r3, #5]
 800a898:	6a3b      	ldr	r3, [r7, #32]
 800a89a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	799a      	ldrb	r2, [r3, #6]
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
 800a8a2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	79da      	ldrb	r2, [r3, #7]
 800a8a8:	6a3b      	ldr	r3, [r7, #32]
 800a8aa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	7a1a      	ldrb	r2, [r3, #8]
 800a8b0:	6a3b      	ldr	r3, [r7, #32]
 800a8b2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	2b09      	cmp	r3, #9
 800a8ba:	d002      	beq.n	800a8c2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a8bc:	6a3b      	ldr	r3, [r7, #32]
 800a8be:	2209      	movs	r2, #9
 800a8c0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a8c2:	88fb      	ldrh	r3, [r7, #6]
 800a8c4:	2b09      	cmp	r3, #9
 800a8c6:	f240 809d 	bls.w	800aa04 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a8ca:	2309      	movs	r3, #9
 800a8cc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a8d2:	e081      	b.n	800a9d8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a8d4:	f107 0316 	add.w	r3, r7, #22
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8dc:	f000 f99f 	bl	800ac1e <USBH_GetNextDesc>
 800a8e0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e4:	785b      	ldrb	r3, [r3, #1]
 800a8e6:	2b04      	cmp	r3, #4
 800a8e8:	d176      	bne.n	800a9d8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	2b09      	cmp	r3, #9
 800a8f0:	d002      	beq.n	800a8f8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f4:	2209      	movs	r2, #9
 800a8f6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a8f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8fc:	221a      	movs	r2, #26
 800a8fe:	fb02 f303 	mul.w	r3, r2, r3
 800a902:	3308      	adds	r3, #8
 800a904:	6a3a      	ldr	r2, [r7, #32]
 800a906:	4413      	add	r3, r2
 800a908:	3302      	adds	r3, #2
 800a90a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a90c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a90e:	69f8      	ldr	r0, [r7, #28]
 800a910:	f000 f87e 	bl	800aa10 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a914:	2300      	movs	r3, #0
 800a916:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a91e:	e043      	b.n	800a9a8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a920:	f107 0316 	add.w	r3, r7, #22
 800a924:	4619      	mov	r1, r3
 800a926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a928:	f000 f979 	bl	800ac1e <USBH_GetNextDesc>
 800a92c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a930:	785b      	ldrb	r3, [r3, #1]
 800a932:	2b05      	cmp	r3, #5
 800a934:	d138      	bne.n	800a9a8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	795b      	ldrb	r3, [r3, #5]
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d10f      	bne.n	800a95e <USBH_ParseCfgDesc+0x13a>
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	799b      	ldrb	r3, [r3, #6]
 800a942:	2b02      	cmp	r3, #2
 800a944:	d10b      	bne.n	800a95e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	79db      	ldrb	r3, [r3, #7]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10f      	bne.n	800a96e <USBH_ParseCfgDesc+0x14a>
 800a94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	2b09      	cmp	r3, #9
 800a954:	d00b      	beq.n	800a96e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	2209      	movs	r2, #9
 800a95a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a95c:	e007      	b.n	800a96e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	2b07      	cmp	r3, #7
 800a964:	d004      	beq.n	800a970 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a968:	2207      	movs	r2, #7
 800a96a:	701a      	strb	r2, [r3, #0]
 800a96c:	e000      	b.n	800a970 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a96e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a974:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a978:	3201      	adds	r2, #1
 800a97a:	00d2      	lsls	r2, r2, #3
 800a97c:	211a      	movs	r1, #26
 800a97e:	fb01 f303 	mul.w	r3, r1, r3
 800a982:	4413      	add	r3, r2
 800a984:	3308      	adds	r3, #8
 800a986:	6a3a      	ldr	r2, [r7, #32]
 800a988:	4413      	add	r3, r2
 800a98a:	3304      	adds	r3, #4
 800a98c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a98e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a990:	69b9      	ldr	r1, [r7, #24]
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f000 f86b 	bl	800aa6e <USBH_ParseEPDesc>
 800a998:	4603      	mov	r3, r0
 800a99a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a99e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	791b      	ldrb	r3, [r3, #4]
 800a9ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d204      	bcs.n	800a9be <USBH_ParseCfgDesc+0x19a>
 800a9b4:	6a3b      	ldr	r3, [r7, #32]
 800a9b6:	885a      	ldrh	r2, [r3, #2]
 800a9b8:	8afb      	ldrh	r3, [r7, #22]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d8b0      	bhi.n	800a920 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	791b      	ldrb	r3, [r3, #4]
 800a9c2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d201      	bcs.n	800a9ce <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e01c      	b.n	800aa08 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a9ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a9d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d805      	bhi.n	800a9ec <USBH_ParseCfgDesc+0x1c8>
 800a9e0:	6a3b      	ldr	r3, [r7, #32]
 800a9e2:	885a      	ldrh	r2, [r3, #2]
 800a9e4:	8afb      	ldrh	r3, [r7, #22]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	f63f af74 	bhi.w	800a8d4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a9ec:	6a3b      	ldr	r3, [r7, #32]
 800a9ee:	791b      	ldrb	r3, [r3, #4]
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	bf28      	it	cs
 800a9f4:	2302      	movcs	r3, #2
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d201      	bcs.n	800aa04 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800aa00:	2303      	movs	r3, #3
 800aa02:	e001      	b.n	800aa08 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800aa04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3730      	adds	r7, #48	; 0x30
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	781a      	ldrb	r2, [r3, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	785a      	ldrb	r2, [r3, #1]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	789a      	ldrb	r2, [r3, #2]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	78da      	ldrb	r2, [r3, #3]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	791a      	ldrb	r2, [r3, #4]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	795a      	ldrb	r2, [r3, #5]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	799a      	ldrb	r2, [r3, #6]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	79da      	ldrb	r2, [r3, #7]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	7a1a      	ldrb	r2, [r3, #8]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	721a      	strb	r2, [r3, #8]
}
 800aa62:	bf00      	nop
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr

0800aa6e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800aa6e:	b480      	push	{r7}
 800aa70:	b087      	sub	sp, #28
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	60f8      	str	r0, [r7, #12]
 800aa76:	60b9      	str	r1, [r7, #8]
 800aa78:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	781a      	ldrb	r2, [r3, #0]
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	785a      	ldrb	r2, [r3, #1]
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	789a      	ldrb	r2, [r3, #2]
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	78da      	ldrb	r2, [r3, #3]
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	3305      	adds	r3, #5
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	021b      	lsls	r3, r3, #8
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	4313      	orrs	r3, r2
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	799a      	ldrb	r2, [r3, #6]
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	889b      	ldrh	r3, [r3, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d102      	bne.n	800aad0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800aaca:	2303      	movs	r3, #3
 800aacc:	75fb      	strb	r3, [r7, #23]
 800aace:	e033      	b.n	800ab38 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	889b      	ldrh	r3, [r3, #4]
 800aad4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aad8:	f023 0307 	bic.w	r3, r3, #7
 800aadc:	b29a      	uxth	r2, r3
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	889b      	ldrh	r3, [r3, #4]
 800aae6:	b21a      	sxth	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3304      	adds	r3, #4
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	b299      	uxth	r1, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	3305      	adds	r3, #5
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	021b      	lsls	r3, r3, #8
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	430b      	orrs	r3, r1
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d110      	bne.n	800ab2a <USBH_ParseEPDesc+0xbc>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	b299      	uxth	r1, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	3305      	adds	r3, #5
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	021b      	lsls	r3, r3, #8
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	430b      	orrs	r3, r1
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	b21b      	sxth	r3, r3
 800ab22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ab26:	b21b      	sxth	r3, r3
 800ab28:	e001      	b.n	800ab2e <USBH_ParseEPDesc+0xc0>
 800ab2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	b21b      	sxth	r3, r3
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d116      	bne.n	800ab70 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	78db      	ldrb	r3, [r3, #3]
 800ab46:	f003 0303 	and.w	r3, r3, #3
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d005      	beq.n	800ab5a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	78db      	ldrb	r3, [r3, #3]
 800ab52:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ab56:	2b03      	cmp	r3, #3
 800ab58:	d127      	bne.n	800abaa <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	799b      	ldrb	r3, [r3, #6]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <USBH_ParseEPDesc+0xfc>
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	799b      	ldrb	r3, [r3, #6]
 800ab66:	2b10      	cmp	r3, #16
 800ab68:	d91f      	bls.n	800abaa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	75fb      	strb	r3, [r7, #23]
 800ab6e:	e01c      	b.n	800abaa <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	78db      	ldrb	r3, [r3, #3]
 800ab74:	f003 0303 	and.w	r3, r3, #3
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d10a      	bne.n	800ab92 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	799b      	ldrb	r3, [r3, #6]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d003      	beq.n	800ab8c <USBH_ParseEPDesc+0x11e>
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	799b      	ldrb	r3, [r3, #6]
 800ab88:	2b10      	cmp	r3, #16
 800ab8a:	d90e      	bls.n	800abaa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	75fb      	strb	r3, [r7, #23]
 800ab90:	e00b      	b.n	800abaa <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	78db      	ldrb	r3, [r3, #3]
 800ab96:	f003 0303 	and.w	r3, r3, #3
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	d105      	bne.n	800abaa <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	799b      	ldrb	r3, [r3, #6]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800aba6:	2303      	movs	r3, #3
 800aba8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800abaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800abac:	4618      	mov	r0, r3
 800abae:	371c      	adds	r7, #28
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800abb8:	b480      	push	{r7}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	4613      	mov	r3, r2
 800abc4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	3301      	adds	r3, #1
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	2b03      	cmp	r3, #3
 800abce:	d120      	bne.n	800ac12 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	1e9a      	subs	r2, r3, #2
 800abd6:	88fb      	ldrh	r3, [r7, #6]
 800abd8:	4293      	cmp	r3, r2
 800abda:	bf28      	it	cs
 800abdc:	4613      	movcs	r3, r2
 800abde:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	3302      	adds	r3, #2
 800abe4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800abe6:	2300      	movs	r3, #0
 800abe8:	82fb      	strh	r3, [r7, #22]
 800abea:	e00b      	b.n	800ac04 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800abec:	8afb      	ldrh	r3, [r7, #22]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	4413      	add	r3, r2
 800abf2:	781a      	ldrb	r2, [r3, #0]
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	3301      	adds	r3, #1
 800abfc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800abfe:	8afb      	ldrh	r3, [r7, #22]
 800ac00:	3302      	adds	r3, #2
 800ac02:	82fb      	strh	r3, [r7, #22]
 800ac04:	8afa      	ldrh	r2, [r7, #22]
 800ac06:	8abb      	ldrh	r3, [r7, #20]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d3ef      	bcc.n	800abec <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	701a      	strb	r2, [r3, #0]
  }
}
 800ac12:	bf00      	nop
 800ac14:	371c      	adds	r7, #28
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b085      	sub	sp, #20
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	881a      	ldrh	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	4413      	add	r3, r2
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4413      	add	r3, r2
 800ac44:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac46:	68fb      	ldr	r3, [r7, #12]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3714      	adds	r7, #20
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b086      	sub	sp, #24
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	4613      	mov	r3, r2
 800ac60:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ac62:	2301      	movs	r3, #1
 800ac64:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	789b      	ldrb	r3, [r3, #2]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d002      	beq.n	800ac74 <USBH_CtlReq+0x20>
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d00f      	beq.n	800ac92 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ac72:	e027      	b.n	800acc4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	68ba      	ldr	r2, [r7, #8]
 800ac78:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	88fa      	ldrh	r2, [r7, #6]
 800ac7e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2201      	movs	r2, #1
 800ac84:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2202      	movs	r2, #2
 800ac8a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	75fb      	strb	r3, [r7, #23]
      break;
 800ac90:	e018      	b.n	800acc4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f000 f81c 	bl	800acd0 <USBH_HandleControl>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ac9c:	7dfb      	ldrb	r3, [r7, #23]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d002      	beq.n	800aca8 <USBH_CtlReq+0x54>
 800aca2:	7dfb      	ldrb	r3, [r7, #23]
 800aca4:	2b03      	cmp	r3, #3
 800aca6:	d106      	bne.n	800acb6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2201      	movs	r2, #1
 800acac:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	761a      	strb	r2, [r3, #24]
      break;
 800acb4:	e005      	b.n	800acc2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800acb6:	7dfb      	ldrb	r3, [r7, #23]
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d102      	bne.n	800acc2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2201      	movs	r2, #1
 800acc0:	709a      	strb	r2, [r3, #2]
      break;
 800acc2:	bf00      	nop
  }
  return status;
 800acc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
	...

0800acd0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af02      	add	r7, sp, #8
 800acd6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800acd8:	2301      	movs	r3, #1
 800acda:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800acdc:	2300      	movs	r3, #0
 800acde:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	7e1b      	ldrb	r3, [r3, #24]
 800ace4:	3b01      	subs	r3, #1
 800ace6:	2b0a      	cmp	r3, #10
 800ace8:	f200 8156 	bhi.w	800af98 <USBH_HandleControl+0x2c8>
 800acec:	a201      	add	r2, pc, #4	; (adr r2, 800acf4 <USBH_HandleControl+0x24>)
 800acee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf2:	bf00      	nop
 800acf4:	0800ad21 	.word	0x0800ad21
 800acf8:	0800ad3b 	.word	0x0800ad3b
 800acfc:	0800ada5 	.word	0x0800ada5
 800ad00:	0800adcb 	.word	0x0800adcb
 800ad04:	0800ae03 	.word	0x0800ae03
 800ad08:	0800ae2d 	.word	0x0800ae2d
 800ad0c:	0800ae7f 	.word	0x0800ae7f
 800ad10:	0800aea1 	.word	0x0800aea1
 800ad14:	0800aedd 	.word	0x0800aedd
 800ad18:	0800af03 	.word	0x0800af03
 800ad1c:	0800af41 	.word	0x0800af41
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f103 0110 	add.w	r1, r3, #16
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	795b      	ldrb	r3, [r3, #5]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 f943 	bl	800afb8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2202      	movs	r2, #2
 800ad36:	761a      	strb	r2, [r3, #24]
      break;
 800ad38:	e139      	b.n	800afae <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	795b      	ldrb	r3, [r3, #5]
 800ad3e:	4619      	mov	r1, r3
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 fcc5 	bl	800b6d0 <USBH_LL_GetURBState>
 800ad46:	4603      	mov	r3, r0
 800ad48:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ad4a:	7bbb      	ldrb	r3, [r7, #14]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d11e      	bne.n	800ad8e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	7c1b      	ldrb	r3, [r3, #16]
 800ad54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ad58:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	8adb      	ldrh	r3, [r3, #22]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00a      	beq.n	800ad78 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ad62:	7b7b      	ldrb	r3, [r7, #13]
 800ad64:	2b80      	cmp	r3, #128	; 0x80
 800ad66:	d103      	bne.n	800ad70 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2203      	movs	r2, #3
 800ad6c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ad6e:	e115      	b.n	800af9c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2205      	movs	r2, #5
 800ad74:	761a      	strb	r2, [r3, #24]
      break;
 800ad76:	e111      	b.n	800af9c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ad78:	7b7b      	ldrb	r3, [r7, #13]
 800ad7a:	2b80      	cmp	r3, #128	; 0x80
 800ad7c:	d103      	bne.n	800ad86 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2209      	movs	r2, #9
 800ad82:	761a      	strb	r2, [r3, #24]
      break;
 800ad84:	e10a      	b.n	800af9c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2207      	movs	r2, #7
 800ad8a:	761a      	strb	r2, [r3, #24]
      break;
 800ad8c:	e106      	b.n	800af9c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ad8e:	7bbb      	ldrb	r3, [r7, #14]
 800ad90:	2b04      	cmp	r3, #4
 800ad92:	d003      	beq.n	800ad9c <USBH_HandleControl+0xcc>
 800ad94:	7bbb      	ldrb	r3, [r7, #14]
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	f040 8100 	bne.w	800af9c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	220b      	movs	r2, #11
 800ada0:	761a      	strb	r2, [r3, #24]
      break;
 800ada2:	e0fb      	b.n	800af9c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800adaa:	b29a      	uxth	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6899      	ldr	r1, [r3, #8]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	899a      	ldrh	r2, [r3, #12]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	791b      	ldrb	r3, [r3, #4]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f93a 	bl	800b036 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2204      	movs	r2, #4
 800adc6:	761a      	strb	r2, [r3, #24]
      break;
 800adc8:	e0f1      	b.n	800afae <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	791b      	ldrb	r3, [r3, #4]
 800adce:	4619      	mov	r1, r3
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fc7d 	bl	800b6d0 <USBH_LL_GetURBState>
 800add6:	4603      	mov	r3, r0
 800add8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800adda:	7bbb      	ldrb	r3, [r7, #14]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d102      	bne.n	800ade6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2209      	movs	r2, #9
 800ade4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ade6:	7bbb      	ldrb	r3, [r7, #14]
 800ade8:	2b05      	cmp	r3, #5
 800adea:	d102      	bne.n	800adf2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800adec:	2303      	movs	r3, #3
 800adee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800adf0:	e0d6      	b.n	800afa0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800adf2:	7bbb      	ldrb	r3, [r7, #14]
 800adf4:	2b04      	cmp	r3, #4
 800adf6:	f040 80d3 	bne.w	800afa0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	220b      	movs	r2, #11
 800adfe:	761a      	strb	r2, [r3, #24]
      break;
 800ae00:	e0ce      	b.n	800afa0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6899      	ldr	r1, [r3, #8]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	899a      	ldrh	r2, [r3, #12]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	795b      	ldrb	r3, [r3, #5]
 800ae0e:	2001      	movs	r0, #1
 800ae10:	9000      	str	r0, [sp, #0]
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 f8ea 	bl	800afec <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2206      	movs	r2, #6
 800ae28:	761a      	strb	r2, [r3, #24]
      break;
 800ae2a:	e0c0      	b.n	800afae <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	795b      	ldrb	r3, [r3, #5]
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fc4c 	bl	800b6d0 <USBH_LL_GetURBState>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae3c:	7bbb      	ldrb	r3, [r7, #14]
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d103      	bne.n	800ae4a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2207      	movs	r2, #7
 800ae46:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ae48:	e0ac      	b.n	800afa4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ae4a:	7bbb      	ldrb	r3, [r7, #14]
 800ae4c:	2b05      	cmp	r3, #5
 800ae4e:	d105      	bne.n	800ae5c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	220c      	movs	r2, #12
 800ae54:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ae56:	2303      	movs	r3, #3
 800ae58:	73fb      	strb	r3, [r7, #15]
      break;
 800ae5a:	e0a3      	b.n	800afa4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ae5c:	7bbb      	ldrb	r3, [r7, #14]
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d103      	bne.n	800ae6a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2205      	movs	r2, #5
 800ae66:	761a      	strb	r2, [r3, #24]
      break;
 800ae68:	e09c      	b.n	800afa4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ae6a:	7bbb      	ldrb	r3, [r7, #14]
 800ae6c:	2b04      	cmp	r3, #4
 800ae6e:	f040 8099 	bne.w	800afa4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	220b      	movs	r2, #11
 800ae76:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ae78:	2302      	movs	r3, #2
 800ae7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae7c:	e092      	b.n	800afa4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	791b      	ldrb	r3, [r3, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	2100      	movs	r1, #0
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f8d5 	bl	800b036 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2208      	movs	r2, #8
 800ae9c:	761a      	strb	r2, [r3, #24]

      break;
 800ae9e:	e086      	b.n	800afae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	791b      	ldrb	r3, [r3, #4]
 800aea4:	4619      	mov	r1, r3
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fc12 	bl	800b6d0 <USBH_LL_GetURBState>
 800aeac:	4603      	mov	r3, r0
 800aeae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aeb0:	7bbb      	ldrb	r3, [r7, #14]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d105      	bne.n	800aec2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	220d      	movs	r2, #13
 800aeba:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800aebc:	2300      	movs	r3, #0
 800aebe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aec0:	e072      	b.n	800afa8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800aec2:	7bbb      	ldrb	r3, [r7, #14]
 800aec4:	2b04      	cmp	r3, #4
 800aec6:	d103      	bne.n	800aed0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	220b      	movs	r2, #11
 800aecc:	761a      	strb	r2, [r3, #24]
      break;
 800aece:	e06b      	b.n	800afa8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800aed0:	7bbb      	ldrb	r3, [r7, #14]
 800aed2:	2b05      	cmp	r3, #5
 800aed4:	d168      	bne.n	800afa8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800aed6:	2303      	movs	r3, #3
 800aed8:	73fb      	strb	r3, [r7, #15]
      break;
 800aeda:	e065      	b.n	800afa8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	795b      	ldrb	r3, [r3, #5]
 800aee0:	2201      	movs	r2, #1
 800aee2:	9200      	str	r2, [sp, #0]
 800aee4:	2200      	movs	r2, #0
 800aee6:	2100      	movs	r1, #0
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f87f 	bl	800afec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aef4:	b29a      	uxth	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	220a      	movs	r2, #10
 800aefe:	761a      	strb	r2, [r3, #24]
      break;
 800af00:	e055      	b.n	800afae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	795b      	ldrb	r3, [r3, #5]
 800af06:	4619      	mov	r1, r3
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fbe1 	bl	800b6d0 <USBH_LL_GetURBState>
 800af0e:	4603      	mov	r3, r0
 800af10:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800af12:	7bbb      	ldrb	r3, [r7, #14]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d105      	bne.n	800af24 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800af18:	2300      	movs	r3, #0
 800af1a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	220d      	movs	r2, #13
 800af20:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800af22:	e043      	b.n	800afac <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	2b02      	cmp	r3, #2
 800af28:	d103      	bne.n	800af32 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2209      	movs	r2, #9
 800af2e:	761a      	strb	r2, [r3, #24]
      break;
 800af30:	e03c      	b.n	800afac <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800af32:	7bbb      	ldrb	r3, [r7, #14]
 800af34:	2b04      	cmp	r3, #4
 800af36:	d139      	bne.n	800afac <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	220b      	movs	r2, #11
 800af3c:	761a      	strb	r2, [r3, #24]
      break;
 800af3e:	e035      	b.n	800afac <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	7e5b      	ldrb	r3, [r3, #25]
 800af44:	3301      	adds	r3, #1
 800af46:	b2da      	uxtb	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	765a      	strb	r2, [r3, #25]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	7e5b      	ldrb	r3, [r3, #25]
 800af50:	2b02      	cmp	r3, #2
 800af52:	d806      	bhi.n	800af62 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2201      	movs	r2, #1
 800af5e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800af60:	e025      	b.n	800afae <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af68:	2106      	movs	r1, #6
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	795b      	ldrb	r3, [r3, #5]
 800af78:	4619      	mov	r1, r3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 f90c 	bl	800b198 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	791b      	ldrb	r3, [r3, #4]
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f906 	bl	800b198 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800af92:	2302      	movs	r3, #2
 800af94:	73fb      	strb	r3, [r7, #15]
      break;
 800af96:	e00a      	b.n	800afae <USBH_HandleControl+0x2de>

    default:
      break;
 800af98:	bf00      	nop
 800af9a:	e008      	b.n	800afae <USBH_HandleControl+0x2de>
      break;
 800af9c:	bf00      	nop
 800af9e:	e006      	b.n	800afae <USBH_HandleControl+0x2de>
      break;
 800afa0:	bf00      	nop
 800afa2:	e004      	b.n	800afae <USBH_HandleControl+0x2de>
      break;
 800afa4:	bf00      	nop
 800afa6:	e002      	b.n	800afae <USBH_HandleControl+0x2de>
      break;
 800afa8:	bf00      	nop
 800afaa:	e000      	b.n	800afae <USBH_HandleControl+0x2de>
      break;
 800afac:	bf00      	nop
  }

  return status;
 800afae:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b088      	sub	sp, #32
 800afbc:	af04      	add	r7, sp, #16
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	4613      	mov	r3, r2
 800afc4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800afc6:	79f9      	ldrb	r1, [r7, #7]
 800afc8:	2300      	movs	r3, #0
 800afca:	9303      	str	r3, [sp, #12]
 800afcc:	2308      	movs	r3, #8
 800afce:	9302      	str	r3, [sp, #8]
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	9301      	str	r3, [sp, #4]
 800afd4:	2300      	movs	r3, #0
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	2300      	movs	r3, #0
 800afda:	2200      	movs	r2, #0
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f000 fb46 	bl	800b66e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b088      	sub	sp, #32
 800aff0:	af04      	add	r7, sp, #16
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	4611      	mov	r1, r2
 800aff8:	461a      	mov	r2, r3
 800affa:	460b      	mov	r3, r1
 800affc:	80fb      	strh	r3, [r7, #6]
 800affe:	4613      	mov	r3, r2
 800b000:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b00c:	2300      	movs	r3, #0
 800b00e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b010:	7979      	ldrb	r1, [r7, #5]
 800b012:	7e3b      	ldrb	r3, [r7, #24]
 800b014:	9303      	str	r3, [sp, #12]
 800b016:	88fb      	ldrh	r3, [r7, #6]
 800b018:	9302      	str	r3, [sp, #8]
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	9301      	str	r3, [sp, #4]
 800b01e:	2301      	movs	r3, #1
 800b020:	9300      	str	r3, [sp, #0]
 800b022:	2300      	movs	r3, #0
 800b024:	2200      	movs	r2, #0
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f000 fb21 	bl	800b66e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b088      	sub	sp, #32
 800b03a:	af04      	add	r7, sp, #16
 800b03c:	60f8      	str	r0, [r7, #12]
 800b03e:	60b9      	str	r1, [r7, #8]
 800b040:	4611      	mov	r1, r2
 800b042:	461a      	mov	r2, r3
 800b044:	460b      	mov	r3, r1
 800b046:	80fb      	strh	r3, [r7, #6]
 800b048:	4613      	mov	r3, r2
 800b04a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b04c:	7979      	ldrb	r1, [r7, #5]
 800b04e:	2300      	movs	r3, #0
 800b050:	9303      	str	r3, [sp, #12]
 800b052:	88fb      	ldrh	r3, [r7, #6]
 800b054:	9302      	str	r3, [sp, #8]
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	9301      	str	r3, [sp, #4]
 800b05a:	2301      	movs	r3, #1
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	2300      	movs	r3, #0
 800b060:	2201      	movs	r2, #1
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f000 fb03 	bl	800b66e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b068:	2300      	movs	r3, #0

}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b088      	sub	sp, #32
 800b076:	af04      	add	r7, sp, #16
 800b078:	60f8      	str	r0, [r7, #12]
 800b07a:	60b9      	str	r1, [r7, #8]
 800b07c:	4611      	mov	r1, r2
 800b07e:	461a      	mov	r2, r3
 800b080:	460b      	mov	r3, r1
 800b082:	80fb      	strh	r3, [r7, #6]
 800b084:	4613      	mov	r3, r2
 800b086:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d001      	beq.n	800b096 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b092:	2300      	movs	r3, #0
 800b094:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b096:	7979      	ldrb	r1, [r7, #5]
 800b098:	7e3b      	ldrb	r3, [r7, #24]
 800b09a:	9303      	str	r3, [sp, #12]
 800b09c:	88fb      	ldrh	r3, [r7, #6]
 800b09e:	9302      	str	r3, [sp, #8]
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	9301      	str	r3, [sp, #4]
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	9300      	str	r3, [sp, #0]
 800b0a8:	2302      	movs	r3, #2
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f000 fade 	bl	800b66e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b0b2:	2300      	movs	r3, #0
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3710      	adds	r7, #16
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b088      	sub	sp, #32
 800b0c0:	af04      	add	r7, sp, #16
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	4611      	mov	r1, r2
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	80fb      	strh	r3, [r7, #6]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b0d2:	7979      	ldrb	r1, [r7, #5]
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	9303      	str	r3, [sp, #12]
 800b0d8:	88fb      	ldrh	r3, [r7, #6]
 800b0da:	9302      	str	r3, [sp, #8]
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	9301      	str	r3, [sp, #4]
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f000 fac0 	bl	800b66e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af04      	add	r7, sp, #16
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	4608      	mov	r0, r1
 800b102:	4611      	mov	r1, r2
 800b104:	461a      	mov	r2, r3
 800b106:	4603      	mov	r3, r0
 800b108:	70fb      	strb	r3, [r7, #3]
 800b10a:	460b      	mov	r3, r1
 800b10c:	70bb      	strb	r3, [r7, #2]
 800b10e:	4613      	mov	r3, r2
 800b110:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b112:	7878      	ldrb	r0, [r7, #1]
 800b114:	78ba      	ldrb	r2, [r7, #2]
 800b116:	78f9      	ldrb	r1, [r7, #3]
 800b118:	8b3b      	ldrh	r3, [r7, #24]
 800b11a:	9302      	str	r3, [sp, #8]
 800b11c:	7d3b      	ldrb	r3, [r7, #20]
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	7c3b      	ldrb	r3, [r7, #16]
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	4603      	mov	r3, r0
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fa53 	bl	800b5d2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b082      	sub	sp, #8
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	460b      	mov	r3, r1
 800b140:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b142:	78fb      	ldrb	r3, [r7, #3]
 800b144:	4619      	mov	r1, r3
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fa72 	bl	800b630 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	460b      	mov	r3, r1
 800b160:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f836 	bl	800b1d4 <USBH_GetFreePipe>
 800b168:	4603      	mov	r3, r0
 800b16a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b16c:	89fb      	ldrh	r3, [r7, #14]
 800b16e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b172:	4293      	cmp	r3, r2
 800b174:	d00a      	beq.n	800b18c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b176:	78fa      	ldrb	r2, [r7, #3]
 800b178:	89fb      	ldrh	r3, [r7, #14]
 800b17a:	f003 030f 	and.w	r3, r3, #15
 800b17e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b182:	6879      	ldr	r1, [r7, #4]
 800b184:	33e0      	adds	r3, #224	; 0xe0
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	440b      	add	r3, r1
 800b18a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b18c:	89fb      	ldrh	r3, [r7, #14]
 800b18e:	b2db      	uxtb	r3, r3
}
 800b190:	4618      	mov	r0, r3
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b1a4:	78fb      	ldrb	r3, [r7, #3]
 800b1a6:	2b0f      	cmp	r3, #15
 800b1a8:	d80d      	bhi.n	800b1c6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b1aa:	78fb      	ldrb	r3, [r7, #3]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	33e0      	adds	r3, #224	; 0xe0
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	4413      	add	r3, r2
 800b1b4:	685a      	ldr	r2, [r3, #4]
 800b1b6:	78fb      	ldrb	r3, [r7, #3]
 800b1b8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b1bc:	6879      	ldr	r1, [r7, #4]
 800b1be:	33e0      	adds	r3, #224	; 0xe0
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	440b      	add	r3, r1
 800b1c4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	73fb      	strb	r3, [r7, #15]
 800b1e4:	e00f      	b.n	800b206 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	33e0      	adds	r3, #224	; 0xe0
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	4413      	add	r3, r2
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d102      	bne.n	800b200 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b1fa:	7bfb      	ldrb	r3, [r7, #15]
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	e007      	b.n	800b210 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b200:	7bfb      	ldrb	r3, [r7, #15]
 800b202:	3301      	adds	r3, #1
 800b204:	73fb      	strb	r3, [r7, #15]
 800b206:	7bfb      	ldrb	r3, [r7, #15]
 800b208:	2b0f      	cmp	r3, #15
 800b20a:	d9ec      	bls.n	800b1e6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b20c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b210:	4618      	mov	r0, r3
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b220:	2201      	movs	r2, #1
 800b222:	490e      	ldr	r1, [pc, #56]	; (800b25c <MX_USB_HOST_Init+0x40>)
 800b224:	480e      	ldr	r0, [pc, #56]	; (800b260 <MX_USB_HOST_Init+0x44>)
 800b226:	f7fe fba7 	bl	8009978 <USBH_Init>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d001      	beq.n	800b234 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b230:	f7f5 fc1c 	bl	8000a6c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b234:	490b      	ldr	r1, [pc, #44]	; (800b264 <MX_USB_HOST_Init+0x48>)
 800b236:	480a      	ldr	r0, [pc, #40]	; (800b260 <MX_USB_HOST_Init+0x44>)
 800b238:	f7fe fc2c 	bl	8009a94 <USBH_RegisterClass>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d001      	beq.n	800b246 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b242:	f7f5 fc13 	bl	8000a6c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b246:	4806      	ldr	r0, [pc, #24]	; (800b260 <MX_USB_HOST_Init+0x44>)
 800b248:	f7fe fcb0 	bl	8009bac <USBH_Start>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d001      	beq.n	800b256 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b252:	f7f5 fc0b 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b256:	bf00      	nop
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	0800b27d 	.word	0x0800b27d
 800b260:	20001464 	.word	0x20001464
 800b264:	2000001c 	.word	0x2000001c

0800b268 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b26c:	4802      	ldr	r0, [pc, #8]	; (800b278 <MX_USB_HOST_Process+0x10>)
 800b26e:	f7fe fcad 	bl	8009bcc <USBH_Process>
}
 800b272:	bf00      	nop
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	20001464 	.word	0x20001464

0800b27c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b288:	78fb      	ldrb	r3, [r7, #3]
 800b28a:	3b01      	subs	r3, #1
 800b28c:	2b04      	cmp	r3, #4
 800b28e:	d819      	bhi.n	800b2c4 <USBH_UserProcess+0x48>
 800b290:	a201      	add	r2, pc, #4	; (adr r2, 800b298 <USBH_UserProcess+0x1c>)
 800b292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b296:	bf00      	nop
 800b298:	0800b2c5 	.word	0x0800b2c5
 800b29c:	0800b2b5 	.word	0x0800b2b5
 800b2a0:	0800b2c5 	.word	0x0800b2c5
 800b2a4:	0800b2bd 	.word	0x0800b2bd
 800b2a8:	0800b2ad 	.word	0x0800b2ad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b2ac:	4b09      	ldr	r3, [pc, #36]	; (800b2d4 <USBH_UserProcess+0x58>)
 800b2ae:	2203      	movs	r2, #3
 800b2b0:	701a      	strb	r2, [r3, #0]
  break;
 800b2b2:	e008      	b.n	800b2c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b2b4:	4b07      	ldr	r3, [pc, #28]	; (800b2d4 <USBH_UserProcess+0x58>)
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	701a      	strb	r2, [r3, #0]
  break;
 800b2ba:	e004      	b.n	800b2c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b2bc:	4b05      	ldr	r3, [pc, #20]	; (800b2d4 <USBH_UserProcess+0x58>)
 800b2be:	2201      	movs	r2, #1
 800b2c0:	701a      	strb	r2, [r3, #0]
  break;
 800b2c2:	e000      	b.n	800b2c6 <USBH_UserProcess+0x4a>

  default:
  break;
 800b2c4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b2c6:	bf00      	nop
 800b2c8:	370c      	adds	r7, #12
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	2000183c 	.word	0x2000183c

0800b2d8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b08a      	sub	sp, #40	; 0x28
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2e0:	f107 0314 	add.w	r3, r7, #20
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	601a      	str	r2, [r3, #0]
 800b2e8:	605a      	str	r2, [r3, #4]
 800b2ea:	609a      	str	r2, [r3, #8]
 800b2ec:	60da      	str	r2, [r3, #12]
 800b2ee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2f8:	d147      	bne.n	800b38a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	613b      	str	r3, [r7, #16]
 800b2fe:	4b25      	ldr	r3, [pc, #148]	; (800b394 <HAL_HCD_MspInit+0xbc>)
 800b300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b302:	4a24      	ldr	r2, [pc, #144]	; (800b394 <HAL_HCD_MspInit+0xbc>)
 800b304:	f043 0301 	orr.w	r3, r3, #1
 800b308:	6313      	str	r3, [r2, #48]	; 0x30
 800b30a:	4b22      	ldr	r3, [pc, #136]	; (800b394 <HAL_HCD_MspInit+0xbc>)
 800b30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b30e:	f003 0301 	and.w	r3, r3, #1
 800b312:	613b      	str	r3, [r7, #16]
 800b314:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b31a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b31c:	2300      	movs	r3, #0
 800b31e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b320:	2300      	movs	r3, #0
 800b322:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b324:	f107 0314 	add.w	r3, r7, #20
 800b328:	4619      	mov	r1, r3
 800b32a:	481b      	ldr	r0, [pc, #108]	; (800b398 <HAL_HCD_MspInit+0xc0>)
 800b32c:	f7f8 fbb0 	bl	8003a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b330:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b336:	2302      	movs	r3, #2
 800b338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b33a:	2300      	movs	r3, #0
 800b33c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b33e:	2303      	movs	r3, #3
 800b340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b342:	230a      	movs	r3, #10
 800b344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b346:	f107 0314 	add.w	r3, r7, #20
 800b34a:	4619      	mov	r1, r3
 800b34c:	4812      	ldr	r0, [pc, #72]	; (800b398 <HAL_HCD_MspInit+0xc0>)
 800b34e:	f7f8 fb9f 	bl	8003a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b352:	4b10      	ldr	r3, [pc, #64]	; (800b394 <HAL_HCD_MspInit+0xbc>)
 800b354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b356:	4a0f      	ldr	r2, [pc, #60]	; (800b394 <HAL_HCD_MspInit+0xbc>)
 800b358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b35c:	6353      	str	r3, [r2, #52]	; 0x34
 800b35e:	2300      	movs	r3, #0
 800b360:	60fb      	str	r3, [r7, #12]
 800b362:	4b0c      	ldr	r3, [pc, #48]	; (800b394 <HAL_HCD_MspInit+0xbc>)
 800b364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b366:	4a0b      	ldr	r2, [pc, #44]	; (800b394 <HAL_HCD_MspInit+0xbc>)
 800b368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b36c:	6453      	str	r3, [r2, #68]	; 0x44
 800b36e:	4b09      	ldr	r3, [pc, #36]	; (800b394 <HAL_HCD_MspInit+0xbc>)
 800b370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b376:	60fb      	str	r3, [r7, #12]
 800b378:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b37a:	2200      	movs	r2, #0
 800b37c:	2100      	movs	r1, #0
 800b37e:	2043      	movs	r0, #67	; 0x43
 800b380:	f7f7 ff4d 	bl	800321e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b384:	2043      	movs	r0, #67	; 0x43
 800b386:	f7f7 ff66 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b38a:	bf00      	nop
 800b38c:	3728      	adds	r7, #40	; 0x28
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	40023800 	.word	0x40023800
 800b398:	40020000 	.word	0x40020000

0800b39c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fe ffed 	bl	800a38a <USBH_LL_IncTimer>
}
 800b3b0:	bf00      	nop
 800b3b2:	3708      	adds	r7, #8
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7ff f825 	bl	800a416 <USBH_LL_Connect>
}
 800b3cc:	bf00      	nop
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7ff f82e 	bl	800a444 <USBH_LL_Disconnect>
}
 800b3e8:	bf00      	nop
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	70fb      	strb	r3, [r7, #3]
 800b3fc:	4613      	mov	r3, r2
 800b3fe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7fe ffdf 	bl	800a3de <USBH_LL_PortEnabled>
}
 800b420:	bf00      	nop
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b436:	4618      	mov	r0, r3
 800b438:	f7fe ffdf 	bl	800a3fa <USBH_LL_PortDisabled>
}
 800b43c:	bf00      	nop
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b452:	2b01      	cmp	r3, #1
 800b454:	d12a      	bne.n	800b4ac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b456:	4a18      	ldr	r2, [pc, #96]	; (800b4b8 <USBH_LL_Init+0x74>)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a15      	ldr	r2, [pc, #84]	; (800b4b8 <USBH_LL_Init+0x74>)
 800b462:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b466:	4b14      	ldr	r3, [pc, #80]	; (800b4b8 <USBH_LL_Init+0x74>)
 800b468:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b46c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b46e:	4b12      	ldr	r3, [pc, #72]	; (800b4b8 <USBH_LL_Init+0x74>)
 800b470:	2208      	movs	r2, #8
 800b472:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b474:	4b10      	ldr	r3, [pc, #64]	; (800b4b8 <USBH_LL_Init+0x74>)
 800b476:	2201      	movs	r2, #1
 800b478:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b47a:	4b0f      	ldr	r3, [pc, #60]	; (800b4b8 <USBH_LL_Init+0x74>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b480:	4b0d      	ldr	r3, [pc, #52]	; (800b4b8 <USBH_LL_Init+0x74>)
 800b482:	2202      	movs	r2, #2
 800b484:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b486:	4b0c      	ldr	r3, [pc, #48]	; (800b4b8 <USBH_LL_Init+0x74>)
 800b488:	2200      	movs	r2, #0
 800b48a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b48c:	480a      	ldr	r0, [pc, #40]	; (800b4b8 <USBH_LL_Init+0x74>)
 800b48e:	f7f8 fcb6 	bl	8003dfe <HAL_HCD_Init>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d001      	beq.n	800b49c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b498:	f7f5 fae8 	bl	8000a6c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b49c:	4806      	ldr	r0, [pc, #24]	; (800b4b8 <USBH_LL_Init+0x74>)
 800b49e:	f7f9 f89a 	bl	80045d6 <HAL_HCD_GetCurrentFrame>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7fe ff60 	bl	800a36c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20001840 	.word	0x20001840

0800b4bc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7f9 f809 	bl	80044ea <HAL_HCD_Start>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 f95c 	bl	800b79c <USBH_Get_USB_Status>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b084      	sub	sp, #16
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4fe:	2300      	movs	r3, #0
 800b500:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b508:	4618      	mov	r0, r3
 800b50a:	f7f9 f811 	bl	8004530 <HAL_HCD_Stop>
 800b50e:	4603      	mov	r3, r0
 800b510:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b512:	7bfb      	ldrb	r3, [r7, #15]
 800b514:	4618      	mov	r0, r3
 800b516:	f000 f941 	bl	800b79c <USBH_Get_USB_Status>
 800b51a:	4603      	mov	r3, r0
 800b51c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b51e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b520:	4618      	mov	r0, r3
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b530:	2301      	movs	r3, #1
 800b532:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7f9 f859 	bl	80045f2 <HAL_HCD_GetCurrentSpeed>
 800b540:	4603      	mov	r3, r0
 800b542:	2b02      	cmp	r3, #2
 800b544:	d00c      	beq.n	800b560 <USBH_LL_GetSpeed+0x38>
 800b546:	2b02      	cmp	r3, #2
 800b548:	d80d      	bhi.n	800b566 <USBH_LL_GetSpeed+0x3e>
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d002      	beq.n	800b554 <USBH_LL_GetSpeed+0x2c>
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d003      	beq.n	800b55a <USBH_LL_GetSpeed+0x32>
 800b552:	e008      	b.n	800b566 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b554:	2300      	movs	r3, #0
 800b556:	73fb      	strb	r3, [r7, #15]
    break;
 800b558:	e008      	b.n	800b56c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b55a:	2301      	movs	r3, #1
 800b55c:	73fb      	strb	r3, [r7, #15]
    break;
 800b55e:	e005      	b.n	800b56c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b560:	2302      	movs	r3, #2
 800b562:	73fb      	strb	r3, [r7, #15]
    break;
 800b564:	e002      	b.n	800b56c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b566:	2301      	movs	r3, #1
 800b568:	73fb      	strb	r3, [r7, #15]
    break;
 800b56a:	bf00      	nop
  }
  return  speed;
 800b56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b084      	sub	sp, #16
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b582:	2300      	movs	r3, #0
 800b584:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7f8 ffec 	bl	800456a <HAL_HCD_ResetPort>
 800b592:	4603      	mov	r3, r0
 800b594:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b596:	7bfb      	ldrb	r3, [r7, #15]
 800b598:	4618      	mov	r0, r3
 800b59a:	f000 f8ff 	bl	800b79c <USBH_Get_USB_Status>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3710      	adds	r7, #16
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5be:	78fa      	ldrb	r2, [r7, #3]
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7f8 fff3 	bl	80045ae <HAL_HCD_HC_GetXferCount>
 800b5c8:	4603      	mov	r3, r0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b5d2:	b590      	push	{r4, r7, lr}
 800b5d4:	b089      	sub	sp, #36	; 0x24
 800b5d6:	af04      	add	r7, sp, #16
 800b5d8:	6078      	str	r0, [r7, #4]
 800b5da:	4608      	mov	r0, r1
 800b5dc:	4611      	mov	r1, r2
 800b5de:	461a      	mov	r2, r3
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	70fb      	strb	r3, [r7, #3]
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	70bb      	strb	r3, [r7, #2]
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b5fa:	787c      	ldrb	r4, [r7, #1]
 800b5fc:	78ba      	ldrb	r2, [r7, #2]
 800b5fe:	78f9      	ldrb	r1, [r7, #3]
 800b600:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b602:	9302      	str	r3, [sp, #8]
 800b604:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b608:	9301      	str	r3, [sp, #4]
 800b60a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	4623      	mov	r3, r4
 800b612:	f7f8 fc56 	bl	8003ec2 <HAL_HCD_HC_Init>
 800b616:	4603      	mov	r3, r0
 800b618:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b61a:	7bfb      	ldrb	r3, [r7, #15]
 800b61c:	4618      	mov	r0, r3
 800b61e:	f000 f8bd 	bl	800b79c <USBH_Get_USB_Status>
 800b622:	4603      	mov	r3, r0
 800b624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b626:	7bbb      	ldrb	r3, [r7, #14]
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3714      	adds	r7, #20
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd90      	pop	{r4, r7, pc}

0800b630 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	460b      	mov	r3, r1
 800b63a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b64a:	78fa      	ldrb	r2, [r7, #3]
 800b64c:	4611      	mov	r1, r2
 800b64e:	4618      	mov	r0, r3
 800b650:	f7f8 fcc6 	bl	8003fe0 <HAL_HCD_HC_Halt>
 800b654:	4603      	mov	r3, r0
 800b656:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b658:	7bfb      	ldrb	r3, [r7, #15]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 f89e 	bl	800b79c <USBH_Get_USB_Status>
 800b660:	4603      	mov	r3, r0
 800b662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b664:	7bbb      	ldrb	r3, [r7, #14]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b66e:	b590      	push	{r4, r7, lr}
 800b670:	b089      	sub	sp, #36	; 0x24
 800b672:	af04      	add	r7, sp, #16
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	4608      	mov	r0, r1
 800b678:	4611      	mov	r1, r2
 800b67a:	461a      	mov	r2, r3
 800b67c:	4603      	mov	r3, r0
 800b67e:	70fb      	strb	r3, [r7, #3]
 800b680:	460b      	mov	r3, r1
 800b682:	70bb      	strb	r3, [r7, #2]
 800b684:	4613      	mov	r3, r2
 800b686:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b688:	2300      	movs	r3, #0
 800b68a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b696:	787c      	ldrb	r4, [r7, #1]
 800b698:	78ba      	ldrb	r2, [r7, #2]
 800b69a:	78f9      	ldrb	r1, [r7, #3]
 800b69c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b6a0:	9303      	str	r3, [sp, #12]
 800b6a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b6a4:	9302      	str	r3, [sp, #8]
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a8:	9301      	str	r3, [sp, #4]
 800b6aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	4623      	mov	r3, r4
 800b6b2:	f7f8 fcb9 	bl	8004028 <HAL_HCD_HC_SubmitRequest>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b6ba:	7bfb      	ldrb	r3, [r7, #15]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f000 f86d 	bl	800b79c <USBH_Get_USB_Status>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3714      	adds	r7, #20
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd90      	pop	{r4, r7, pc}

0800b6d0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	460b      	mov	r3, r1
 800b6da:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b6e2:	78fa      	ldrb	r2, [r7, #3]
 800b6e4:	4611      	mov	r1, r2
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7f8 ff4d 	bl	8004586 <HAL_HCD_HC_GetURBState>
 800b6ec:	4603      	mov	r3, r0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b082      	sub	sp, #8
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	460b      	mov	r3, r1
 800b700:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d103      	bne.n	800b714 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b70c:	78fb      	ldrb	r3, [r7, #3]
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 f870 	bl	800b7f4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b714:	20c8      	movs	r0, #200	; 0xc8
 800b716:	f7f7 fc83 	bl	8003020 <HAL_Delay>
  return USBH_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	460b      	mov	r3, r1
 800b72e:	70fb      	strb	r3, [r7, #3]
 800b730:	4613      	mov	r3, r2
 800b732:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b73a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b73c:	78fb      	ldrb	r3, [r7, #3]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	212c      	movs	r1, #44	; 0x2c
 800b742:	fb01 f303 	mul.w	r3, r1, r3
 800b746:	4413      	add	r3, r2
 800b748:	333b      	adds	r3, #59	; 0x3b
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d009      	beq.n	800b764 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b750:	78fb      	ldrb	r3, [r7, #3]
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	212c      	movs	r1, #44	; 0x2c
 800b756:	fb01 f303 	mul.w	r3, r1, r3
 800b75a:	4413      	add	r3, r2
 800b75c:	3354      	adds	r3, #84	; 0x54
 800b75e:	78ba      	ldrb	r2, [r7, #2]
 800b760:	701a      	strb	r2, [r3, #0]
 800b762:	e008      	b.n	800b776 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b764:	78fb      	ldrb	r3, [r7, #3]
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	212c      	movs	r1, #44	; 0x2c
 800b76a:	fb01 f303 	mul.w	r3, r1, r3
 800b76e:	4413      	add	r3, r2
 800b770:	3355      	adds	r3, #85	; 0x55
 800b772:	78ba      	ldrb	r2, [r7, #2]
 800b774:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3714      	adds	r7, #20
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7f7 fc47 	bl	8003020 <HAL_Delay>
}
 800b792:	bf00      	nop
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
	...

0800b79c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b7aa:	79fb      	ldrb	r3, [r7, #7]
 800b7ac:	2b03      	cmp	r3, #3
 800b7ae:	d817      	bhi.n	800b7e0 <USBH_Get_USB_Status+0x44>
 800b7b0:	a201      	add	r2, pc, #4	; (adr r2, 800b7b8 <USBH_Get_USB_Status+0x1c>)
 800b7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b6:	bf00      	nop
 800b7b8:	0800b7c9 	.word	0x0800b7c9
 800b7bc:	0800b7cf 	.word	0x0800b7cf
 800b7c0:	0800b7d5 	.word	0x0800b7d5
 800b7c4:	0800b7db 	.word	0x0800b7db
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b7cc:	e00b      	b.n	800b7e6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	73fb      	strb	r3, [r7, #15]
    break;
 800b7d2:	e008      	b.n	800b7e6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b7d8:	e005      	b.n	800b7e6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b7da:	2302      	movs	r3, #2
 800b7dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b7de:	e002      	b.n	800b7e6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b7e0:	2302      	movs	r3, #2
 800b7e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b7e4:	bf00      	nop
  }
  return usb_status;
 800b7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3714      	adds	r7, #20
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b7fe:	79fb      	ldrb	r3, [r7, #7]
 800b800:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b802:	79fb      	ldrb	r3, [r7, #7]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d102      	bne.n	800b80e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b808:	2300      	movs	r3, #0
 800b80a:	73fb      	strb	r3, [r7, #15]
 800b80c:	e001      	b.n	800b812 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b80e:	2301      	movs	r3, #1
 800b810:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b812:	7bfb      	ldrb	r3, [r7, #15]
 800b814:	461a      	mov	r2, r3
 800b816:	2101      	movs	r1, #1
 800b818:	4803      	ldr	r0, [pc, #12]	; (800b828 <MX_DriverVbusFS+0x34>)
 800b81a:	f7f8 fabd 	bl	8003d98 <HAL_GPIO_WritePin>
}
 800b81e:	bf00      	nop
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	40020800 	.word	0x40020800

0800b82c <__cxa_pure_virtual>:
 800b82c:	b508      	push	{r3, lr}
 800b82e:	f000 f80d 	bl	800b84c <_ZSt9terminatev>

0800b832 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b832:	b508      	push	{r3, lr}
 800b834:	4780      	blx	r0
 800b836:	f000 f80e 	bl	800b856 <abort>
	...

0800b83c <_ZSt13get_terminatev>:
 800b83c:	4b02      	ldr	r3, [pc, #8]	; (800b848 <_ZSt13get_terminatev+0xc>)
 800b83e:	6818      	ldr	r0, [r3, #0]
 800b840:	f3bf 8f5b 	dmb	ish
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	2000003c 	.word	0x2000003c

0800b84c <_ZSt9terminatev>:
 800b84c:	b508      	push	{r3, lr}
 800b84e:	f7ff fff5 	bl	800b83c <_ZSt13get_terminatev>
 800b852:	f7ff ffee 	bl	800b832 <_ZN10__cxxabiv111__terminateEPFvvE>

0800b856 <abort>:
 800b856:	b508      	push	{r3, lr}
 800b858:	2006      	movs	r0, #6
 800b85a:	f000 f973 	bl	800bb44 <raise>
 800b85e:	2001      	movs	r0, #1
 800b860:	f7f7 fac4 	bl	8002dec <_exit>

0800b864 <__errno>:
 800b864:	4b01      	ldr	r3, [pc, #4]	; (800b86c <__errno+0x8>)
 800b866:	6818      	ldr	r0, [r3, #0]
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	20000040 	.word	0x20000040

0800b870 <__libc_init_array>:
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	4d0d      	ldr	r5, [pc, #52]	; (800b8a8 <__libc_init_array+0x38>)
 800b874:	4c0d      	ldr	r4, [pc, #52]	; (800b8ac <__libc_init_array+0x3c>)
 800b876:	1b64      	subs	r4, r4, r5
 800b878:	10a4      	asrs	r4, r4, #2
 800b87a:	2600      	movs	r6, #0
 800b87c:	42a6      	cmp	r6, r4
 800b87e:	d109      	bne.n	800b894 <__libc_init_array+0x24>
 800b880:	4d0b      	ldr	r5, [pc, #44]	; (800b8b0 <__libc_init_array+0x40>)
 800b882:	4c0c      	ldr	r4, [pc, #48]	; (800b8b4 <__libc_init_array+0x44>)
 800b884:	f000 f9c0 	bl	800bc08 <_init>
 800b888:	1b64      	subs	r4, r4, r5
 800b88a:	10a4      	asrs	r4, r4, #2
 800b88c:	2600      	movs	r6, #0
 800b88e:	42a6      	cmp	r6, r4
 800b890:	d105      	bne.n	800b89e <__libc_init_array+0x2e>
 800b892:	bd70      	pop	{r4, r5, r6, pc}
 800b894:	f855 3b04 	ldr.w	r3, [r5], #4
 800b898:	4798      	blx	r3
 800b89a:	3601      	adds	r6, #1
 800b89c:	e7ee      	b.n	800b87c <__libc_init_array+0xc>
 800b89e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8a2:	4798      	blx	r3
 800b8a4:	3601      	adds	r6, #1
 800b8a6:	e7f2      	b.n	800b88e <__libc_init_array+0x1e>
 800b8a8:	0800be6c 	.word	0x0800be6c
 800b8ac:	0800be6c 	.word	0x0800be6c
 800b8b0:	0800be6c 	.word	0x0800be6c
 800b8b4:	0800be74 	.word	0x0800be74

0800b8b8 <malloc>:
 800b8b8:	4b02      	ldr	r3, [pc, #8]	; (800b8c4 <malloc+0xc>)
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	6818      	ldr	r0, [r3, #0]
 800b8be:	f000 b88d 	b.w	800b9dc <_malloc_r>
 800b8c2:	bf00      	nop
 800b8c4:	20000040 	.word	0x20000040

0800b8c8 <free>:
 800b8c8:	4b02      	ldr	r3, [pc, #8]	; (800b8d4 <free+0xc>)
 800b8ca:	4601      	mov	r1, r0
 800b8cc:	6818      	ldr	r0, [r3, #0]
 800b8ce:	f000 b819 	b.w	800b904 <_free_r>
 800b8d2:	bf00      	nop
 800b8d4:	20000040 	.word	0x20000040

0800b8d8 <memcpy>:
 800b8d8:	440a      	add	r2, r1
 800b8da:	4291      	cmp	r1, r2
 800b8dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8e0:	d100      	bne.n	800b8e4 <memcpy+0xc>
 800b8e2:	4770      	bx	lr
 800b8e4:	b510      	push	{r4, lr}
 800b8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8ee:	4291      	cmp	r1, r2
 800b8f0:	d1f9      	bne.n	800b8e6 <memcpy+0xe>
 800b8f2:	bd10      	pop	{r4, pc}

0800b8f4 <memset>:
 800b8f4:	4402      	add	r2, r0
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d100      	bne.n	800b8fe <memset+0xa>
 800b8fc:	4770      	bx	lr
 800b8fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b902:	e7f9      	b.n	800b8f8 <memset+0x4>

0800b904 <_free_r>:
 800b904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b906:	2900      	cmp	r1, #0
 800b908:	d044      	beq.n	800b994 <_free_r+0x90>
 800b90a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b90e:	9001      	str	r0, [sp, #4]
 800b910:	2b00      	cmp	r3, #0
 800b912:	f1a1 0404 	sub.w	r4, r1, #4
 800b916:	bfb8      	it	lt
 800b918:	18e4      	addlt	r4, r4, r3
 800b91a:	f000 f92f 	bl	800bb7c <__malloc_lock>
 800b91e:	4a1e      	ldr	r2, [pc, #120]	; (800b998 <_free_r+0x94>)
 800b920:	9801      	ldr	r0, [sp, #4]
 800b922:	6813      	ldr	r3, [r2, #0]
 800b924:	b933      	cbnz	r3, 800b934 <_free_r+0x30>
 800b926:	6063      	str	r3, [r4, #4]
 800b928:	6014      	str	r4, [r2, #0]
 800b92a:	b003      	add	sp, #12
 800b92c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b930:	f000 b92a 	b.w	800bb88 <__malloc_unlock>
 800b934:	42a3      	cmp	r3, r4
 800b936:	d908      	bls.n	800b94a <_free_r+0x46>
 800b938:	6825      	ldr	r5, [r4, #0]
 800b93a:	1961      	adds	r1, r4, r5
 800b93c:	428b      	cmp	r3, r1
 800b93e:	bf01      	itttt	eq
 800b940:	6819      	ldreq	r1, [r3, #0]
 800b942:	685b      	ldreq	r3, [r3, #4]
 800b944:	1949      	addeq	r1, r1, r5
 800b946:	6021      	streq	r1, [r4, #0]
 800b948:	e7ed      	b.n	800b926 <_free_r+0x22>
 800b94a:	461a      	mov	r2, r3
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	b10b      	cbz	r3, 800b954 <_free_r+0x50>
 800b950:	42a3      	cmp	r3, r4
 800b952:	d9fa      	bls.n	800b94a <_free_r+0x46>
 800b954:	6811      	ldr	r1, [r2, #0]
 800b956:	1855      	adds	r5, r2, r1
 800b958:	42a5      	cmp	r5, r4
 800b95a:	d10b      	bne.n	800b974 <_free_r+0x70>
 800b95c:	6824      	ldr	r4, [r4, #0]
 800b95e:	4421      	add	r1, r4
 800b960:	1854      	adds	r4, r2, r1
 800b962:	42a3      	cmp	r3, r4
 800b964:	6011      	str	r1, [r2, #0]
 800b966:	d1e0      	bne.n	800b92a <_free_r+0x26>
 800b968:	681c      	ldr	r4, [r3, #0]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	6053      	str	r3, [r2, #4]
 800b96e:	4421      	add	r1, r4
 800b970:	6011      	str	r1, [r2, #0]
 800b972:	e7da      	b.n	800b92a <_free_r+0x26>
 800b974:	d902      	bls.n	800b97c <_free_r+0x78>
 800b976:	230c      	movs	r3, #12
 800b978:	6003      	str	r3, [r0, #0]
 800b97a:	e7d6      	b.n	800b92a <_free_r+0x26>
 800b97c:	6825      	ldr	r5, [r4, #0]
 800b97e:	1961      	adds	r1, r4, r5
 800b980:	428b      	cmp	r3, r1
 800b982:	bf04      	itt	eq
 800b984:	6819      	ldreq	r1, [r3, #0]
 800b986:	685b      	ldreq	r3, [r3, #4]
 800b988:	6063      	str	r3, [r4, #4]
 800b98a:	bf04      	itt	eq
 800b98c:	1949      	addeq	r1, r1, r5
 800b98e:	6021      	streq	r1, [r4, #0]
 800b990:	6054      	str	r4, [r2, #4]
 800b992:	e7ca      	b.n	800b92a <_free_r+0x26>
 800b994:	b003      	add	sp, #12
 800b996:	bd30      	pop	{r4, r5, pc}
 800b998:	20001b44 	.word	0x20001b44

0800b99c <sbrk_aligned>:
 800b99c:	b570      	push	{r4, r5, r6, lr}
 800b99e:	4e0e      	ldr	r6, [pc, #56]	; (800b9d8 <sbrk_aligned+0x3c>)
 800b9a0:	460c      	mov	r4, r1
 800b9a2:	6831      	ldr	r1, [r6, #0]
 800b9a4:	4605      	mov	r5, r0
 800b9a6:	b911      	cbnz	r1, 800b9ae <sbrk_aligned+0x12>
 800b9a8:	f000 f894 	bl	800bad4 <_sbrk_r>
 800b9ac:	6030      	str	r0, [r6, #0]
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	4628      	mov	r0, r5
 800b9b2:	f000 f88f 	bl	800bad4 <_sbrk_r>
 800b9b6:	1c43      	adds	r3, r0, #1
 800b9b8:	d00a      	beq.n	800b9d0 <sbrk_aligned+0x34>
 800b9ba:	1cc4      	adds	r4, r0, #3
 800b9bc:	f024 0403 	bic.w	r4, r4, #3
 800b9c0:	42a0      	cmp	r0, r4
 800b9c2:	d007      	beq.n	800b9d4 <sbrk_aligned+0x38>
 800b9c4:	1a21      	subs	r1, r4, r0
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	f000 f884 	bl	800bad4 <_sbrk_r>
 800b9cc:	3001      	adds	r0, #1
 800b9ce:	d101      	bne.n	800b9d4 <sbrk_aligned+0x38>
 800b9d0:	f04f 34ff 	mov.w	r4, #4294967295
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	bd70      	pop	{r4, r5, r6, pc}
 800b9d8:	20001b48 	.word	0x20001b48

0800b9dc <_malloc_r>:
 800b9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e0:	1ccd      	adds	r5, r1, #3
 800b9e2:	f025 0503 	bic.w	r5, r5, #3
 800b9e6:	3508      	adds	r5, #8
 800b9e8:	2d0c      	cmp	r5, #12
 800b9ea:	bf38      	it	cc
 800b9ec:	250c      	movcc	r5, #12
 800b9ee:	2d00      	cmp	r5, #0
 800b9f0:	4607      	mov	r7, r0
 800b9f2:	db01      	blt.n	800b9f8 <_malloc_r+0x1c>
 800b9f4:	42a9      	cmp	r1, r5
 800b9f6:	d905      	bls.n	800ba04 <_malloc_r+0x28>
 800b9f8:	230c      	movs	r3, #12
 800b9fa:	603b      	str	r3, [r7, #0]
 800b9fc:	2600      	movs	r6, #0
 800b9fe:	4630      	mov	r0, r6
 800ba00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba04:	4e2e      	ldr	r6, [pc, #184]	; (800bac0 <_malloc_r+0xe4>)
 800ba06:	f000 f8b9 	bl	800bb7c <__malloc_lock>
 800ba0a:	6833      	ldr	r3, [r6, #0]
 800ba0c:	461c      	mov	r4, r3
 800ba0e:	bb34      	cbnz	r4, 800ba5e <_malloc_r+0x82>
 800ba10:	4629      	mov	r1, r5
 800ba12:	4638      	mov	r0, r7
 800ba14:	f7ff ffc2 	bl	800b99c <sbrk_aligned>
 800ba18:	1c43      	adds	r3, r0, #1
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	d14d      	bne.n	800baba <_malloc_r+0xde>
 800ba1e:	6834      	ldr	r4, [r6, #0]
 800ba20:	4626      	mov	r6, r4
 800ba22:	2e00      	cmp	r6, #0
 800ba24:	d140      	bne.n	800baa8 <_malloc_r+0xcc>
 800ba26:	6823      	ldr	r3, [r4, #0]
 800ba28:	4631      	mov	r1, r6
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	eb04 0803 	add.w	r8, r4, r3
 800ba30:	f000 f850 	bl	800bad4 <_sbrk_r>
 800ba34:	4580      	cmp	r8, r0
 800ba36:	d13a      	bne.n	800baae <_malloc_r+0xd2>
 800ba38:	6821      	ldr	r1, [r4, #0]
 800ba3a:	3503      	adds	r5, #3
 800ba3c:	1a6d      	subs	r5, r5, r1
 800ba3e:	f025 0503 	bic.w	r5, r5, #3
 800ba42:	3508      	adds	r5, #8
 800ba44:	2d0c      	cmp	r5, #12
 800ba46:	bf38      	it	cc
 800ba48:	250c      	movcc	r5, #12
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	4638      	mov	r0, r7
 800ba4e:	f7ff ffa5 	bl	800b99c <sbrk_aligned>
 800ba52:	3001      	adds	r0, #1
 800ba54:	d02b      	beq.n	800baae <_malloc_r+0xd2>
 800ba56:	6823      	ldr	r3, [r4, #0]
 800ba58:	442b      	add	r3, r5
 800ba5a:	6023      	str	r3, [r4, #0]
 800ba5c:	e00e      	b.n	800ba7c <_malloc_r+0xa0>
 800ba5e:	6822      	ldr	r2, [r4, #0]
 800ba60:	1b52      	subs	r2, r2, r5
 800ba62:	d41e      	bmi.n	800baa2 <_malloc_r+0xc6>
 800ba64:	2a0b      	cmp	r2, #11
 800ba66:	d916      	bls.n	800ba96 <_malloc_r+0xba>
 800ba68:	1961      	adds	r1, r4, r5
 800ba6a:	42a3      	cmp	r3, r4
 800ba6c:	6025      	str	r5, [r4, #0]
 800ba6e:	bf18      	it	ne
 800ba70:	6059      	strne	r1, [r3, #4]
 800ba72:	6863      	ldr	r3, [r4, #4]
 800ba74:	bf08      	it	eq
 800ba76:	6031      	streq	r1, [r6, #0]
 800ba78:	5162      	str	r2, [r4, r5]
 800ba7a:	604b      	str	r3, [r1, #4]
 800ba7c:	4638      	mov	r0, r7
 800ba7e:	f104 060b 	add.w	r6, r4, #11
 800ba82:	f000 f881 	bl	800bb88 <__malloc_unlock>
 800ba86:	f026 0607 	bic.w	r6, r6, #7
 800ba8a:	1d23      	adds	r3, r4, #4
 800ba8c:	1af2      	subs	r2, r6, r3
 800ba8e:	d0b6      	beq.n	800b9fe <_malloc_r+0x22>
 800ba90:	1b9b      	subs	r3, r3, r6
 800ba92:	50a3      	str	r3, [r4, r2]
 800ba94:	e7b3      	b.n	800b9fe <_malloc_r+0x22>
 800ba96:	6862      	ldr	r2, [r4, #4]
 800ba98:	42a3      	cmp	r3, r4
 800ba9a:	bf0c      	ite	eq
 800ba9c:	6032      	streq	r2, [r6, #0]
 800ba9e:	605a      	strne	r2, [r3, #4]
 800baa0:	e7ec      	b.n	800ba7c <_malloc_r+0xa0>
 800baa2:	4623      	mov	r3, r4
 800baa4:	6864      	ldr	r4, [r4, #4]
 800baa6:	e7b2      	b.n	800ba0e <_malloc_r+0x32>
 800baa8:	4634      	mov	r4, r6
 800baaa:	6876      	ldr	r6, [r6, #4]
 800baac:	e7b9      	b.n	800ba22 <_malloc_r+0x46>
 800baae:	230c      	movs	r3, #12
 800bab0:	603b      	str	r3, [r7, #0]
 800bab2:	4638      	mov	r0, r7
 800bab4:	f000 f868 	bl	800bb88 <__malloc_unlock>
 800bab8:	e7a1      	b.n	800b9fe <_malloc_r+0x22>
 800baba:	6025      	str	r5, [r4, #0]
 800babc:	e7de      	b.n	800ba7c <_malloc_r+0xa0>
 800babe:	bf00      	nop
 800bac0:	20001b44 	.word	0x20001b44

0800bac4 <realloc>:
 800bac4:	4b02      	ldr	r3, [pc, #8]	; (800bad0 <realloc+0xc>)
 800bac6:	460a      	mov	r2, r1
 800bac8:	4601      	mov	r1, r0
 800baca:	6818      	ldr	r0, [r3, #0]
 800bacc:	f000 b862 	b.w	800bb94 <_realloc_r>
 800bad0:	20000040 	.word	0x20000040

0800bad4 <_sbrk_r>:
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	4d06      	ldr	r5, [pc, #24]	; (800baf0 <_sbrk_r+0x1c>)
 800bad8:	2300      	movs	r3, #0
 800bada:	4604      	mov	r4, r0
 800badc:	4608      	mov	r0, r1
 800bade:	602b      	str	r3, [r5, #0]
 800bae0:	f7f7 f98e 	bl	8002e00 <_sbrk>
 800bae4:	1c43      	adds	r3, r0, #1
 800bae6:	d102      	bne.n	800baee <_sbrk_r+0x1a>
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	b103      	cbz	r3, 800baee <_sbrk_r+0x1a>
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	bd38      	pop	{r3, r4, r5, pc}
 800baf0:	20001b4c 	.word	0x20001b4c

0800baf4 <_raise_r>:
 800baf4:	291f      	cmp	r1, #31
 800baf6:	b538      	push	{r3, r4, r5, lr}
 800baf8:	4604      	mov	r4, r0
 800bafa:	460d      	mov	r5, r1
 800bafc:	d904      	bls.n	800bb08 <_raise_r+0x14>
 800bafe:	2316      	movs	r3, #22
 800bb00:	6003      	str	r3, [r0, #0]
 800bb02:	f04f 30ff 	mov.w	r0, #4294967295
 800bb06:	bd38      	pop	{r3, r4, r5, pc}
 800bb08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb0a:	b112      	cbz	r2, 800bb12 <_raise_r+0x1e>
 800bb0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb10:	b94b      	cbnz	r3, 800bb26 <_raise_r+0x32>
 800bb12:	4620      	mov	r0, r4
 800bb14:	f000 f830 	bl	800bb78 <_getpid_r>
 800bb18:	462a      	mov	r2, r5
 800bb1a:	4601      	mov	r1, r0
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb22:	f000 b817 	b.w	800bb54 <_kill_r>
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d00a      	beq.n	800bb40 <_raise_r+0x4c>
 800bb2a:	1c59      	adds	r1, r3, #1
 800bb2c:	d103      	bne.n	800bb36 <_raise_r+0x42>
 800bb2e:	2316      	movs	r3, #22
 800bb30:	6003      	str	r3, [r0, #0]
 800bb32:	2001      	movs	r0, #1
 800bb34:	e7e7      	b.n	800bb06 <_raise_r+0x12>
 800bb36:	2400      	movs	r4, #0
 800bb38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	4798      	blx	r3
 800bb40:	2000      	movs	r0, #0
 800bb42:	e7e0      	b.n	800bb06 <_raise_r+0x12>

0800bb44 <raise>:
 800bb44:	4b02      	ldr	r3, [pc, #8]	; (800bb50 <raise+0xc>)
 800bb46:	4601      	mov	r1, r0
 800bb48:	6818      	ldr	r0, [r3, #0]
 800bb4a:	f7ff bfd3 	b.w	800baf4 <_raise_r>
 800bb4e:	bf00      	nop
 800bb50:	20000040 	.word	0x20000040

0800bb54 <_kill_r>:
 800bb54:	b538      	push	{r3, r4, r5, lr}
 800bb56:	4d07      	ldr	r5, [pc, #28]	; (800bb74 <_kill_r+0x20>)
 800bb58:	2300      	movs	r3, #0
 800bb5a:	4604      	mov	r4, r0
 800bb5c:	4608      	mov	r0, r1
 800bb5e:	4611      	mov	r1, r2
 800bb60:	602b      	str	r3, [r5, #0]
 800bb62:	f7f7 f933 	bl	8002dcc <_kill>
 800bb66:	1c43      	adds	r3, r0, #1
 800bb68:	d102      	bne.n	800bb70 <_kill_r+0x1c>
 800bb6a:	682b      	ldr	r3, [r5, #0]
 800bb6c:	b103      	cbz	r3, 800bb70 <_kill_r+0x1c>
 800bb6e:	6023      	str	r3, [r4, #0]
 800bb70:	bd38      	pop	{r3, r4, r5, pc}
 800bb72:	bf00      	nop
 800bb74:	20001b4c 	.word	0x20001b4c

0800bb78 <_getpid_r>:
 800bb78:	f7f7 b920 	b.w	8002dbc <_getpid>

0800bb7c <__malloc_lock>:
 800bb7c:	4801      	ldr	r0, [pc, #4]	; (800bb84 <__malloc_lock+0x8>)
 800bb7e:	f000 b838 	b.w	800bbf2 <__retarget_lock_acquire_recursive>
 800bb82:	bf00      	nop
 800bb84:	20001b50 	.word	0x20001b50

0800bb88 <__malloc_unlock>:
 800bb88:	4801      	ldr	r0, [pc, #4]	; (800bb90 <__malloc_unlock+0x8>)
 800bb8a:	f000 b833 	b.w	800bbf4 <__retarget_lock_release_recursive>
 800bb8e:	bf00      	nop
 800bb90:	20001b50 	.word	0x20001b50

0800bb94 <_realloc_r>:
 800bb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb98:	4680      	mov	r8, r0
 800bb9a:	4614      	mov	r4, r2
 800bb9c:	460e      	mov	r6, r1
 800bb9e:	b921      	cbnz	r1, 800bbaa <_realloc_r+0x16>
 800bba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bba4:	4611      	mov	r1, r2
 800bba6:	f7ff bf19 	b.w	800b9dc <_malloc_r>
 800bbaa:	b92a      	cbnz	r2, 800bbb8 <_realloc_r+0x24>
 800bbac:	f7ff feaa 	bl	800b904 <_free_r>
 800bbb0:	4625      	mov	r5, r4
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbb8:	f000 f81d 	bl	800bbf6 <_malloc_usable_size_r>
 800bbbc:	4284      	cmp	r4, r0
 800bbbe:	4607      	mov	r7, r0
 800bbc0:	d802      	bhi.n	800bbc8 <_realloc_r+0x34>
 800bbc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbc6:	d812      	bhi.n	800bbee <_realloc_r+0x5a>
 800bbc8:	4621      	mov	r1, r4
 800bbca:	4640      	mov	r0, r8
 800bbcc:	f7ff ff06 	bl	800b9dc <_malloc_r>
 800bbd0:	4605      	mov	r5, r0
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d0ed      	beq.n	800bbb2 <_realloc_r+0x1e>
 800bbd6:	42bc      	cmp	r4, r7
 800bbd8:	4622      	mov	r2, r4
 800bbda:	4631      	mov	r1, r6
 800bbdc:	bf28      	it	cs
 800bbde:	463a      	movcs	r2, r7
 800bbe0:	f7ff fe7a 	bl	800b8d8 <memcpy>
 800bbe4:	4631      	mov	r1, r6
 800bbe6:	4640      	mov	r0, r8
 800bbe8:	f7ff fe8c 	bl	800b904 <_free_r>
 800bbec:	e7e1      	b.n	800bbb2 <_realloc_r+0x1e>
 800bbee:	4635      	mov	r5, r6
 800bbf0:	e7df      	b.n	800bbb2 <_realloc_r+0x1e>

0800bbf2 <__retarget_lock_acquire_recursive>:
 800bbf2:	4770      	bx	lr

0800bbf4 <__retarget_lock_release_recursive>:
 800bbf4:	4770      	bx	lr

0800bbf6 <_malloc_usable_size_r>:
 800bbf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbfa:	1f18      	subs	r0, r3, #4
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	bfbc      	itt	lt
 800bc00:	580b      	ldrlt	r3, [r1, r0]
 800bc02:	18c0      	addlt	r0, r0, r3
 800bc04:	4770      	bx	lr
	...

0800bc08 <_init>:
 800bc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0a:	bf00      	nop
 800bc0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc0e:	bc08      	pop	{r3}
 800bc10:	469e      	mov	lr, r3
 800bc12:	4770      	bx	lr

0800bc14 <_fini>:
 800bc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc16:	bf00      	nop
 800bc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc1a:	bc08      	pop	{r3}
 800bc1c:	469e      	mov	lr, r3
 800bc1e:	4770      	bx	lr
