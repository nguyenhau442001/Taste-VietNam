
DCmotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800d030  0800d030  0001d030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d42c  0800d42c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800d42c  0800d42c  0001d42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d434  0800d434  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d434  0800d434  0001d434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d438  0800d438  0001d438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800d43c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000948  20000204  0800d640  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b4c  0800d640  00020b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c4ad  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000417d  00000000  00000000  0003c6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00040860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f0  00000000  00000000  00042000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b89c  00000000  00000000  000435f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df91  00000000  00000000  0005ee8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098dc6  00000000  00000000  0007ce1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115be3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007520  00000000  00000000  00115c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d014 	.word	0x0800d014

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	0800d014 	.word	0x0800d014

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <HAL_GPIO_EXTI_Callback>:
 */

#include "DCmotor.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
 static unsigned char state0,state1,state2,state3;
 static bool LEFT_ENCODER_A,RIGHT_ENCODER_A, LEFT_ENCODER_B,RIGHT_ENCODER_B;
 /* MOTOR A */
 if (GPIO_Pin == GPIO_PIN_12)
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fac:	f040 80a1 	bne.w	80010f2 <HAL_GPIO_EXTI_Callback+0x156>
 {
   // chương trình ngắt của chân 12

	 LEFT_ENCODER_A=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12);
 8000fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb4:	4892      	ldr	r0, [pc, #584]	; (8001200 <HAL_GPIO_EXTI_Callback+0x264>)
 8000fb6:	f001 ff4b 	bl	8002e50 <HAL_GPIO_ReadPin>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	bf14      	ite	ne
 8000fc0:	2301      	movne	r3, #1
 8000fc2:	2300      	moveq	r3, #0
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b8f      	ldr	r3, [pc, #572]	; (8001204 <HAL_GPIO_EXTI_Callback+0x268>)
 8000fc8:	701a      	strb	r2, [r3, #0]
	 state0=state0|LEFT_ENCODER_A;
 8000fca:	4b8e      	ldr	r3, [pc, #568]	; (8001204 <HAL_GPIO_EXTI_Callback+0x268>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b8d      	ldr	r3, [pc, #564]	; (8001208 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b8b      	ldr	r3, [pc, #556]	; (8001208 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fda:	701a      	strb	r2, [r3, #0]

	 state0=state0<<1;
 8000fdc:	4b8a      	ldr	r3, [pc, #552]	; (8001208 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b88      	ldr	r3, [pc, #544]	; (8001208 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fe6:	701a      	strb	r2, [r3, #0]
	 LEFT_ENCODER_B=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13);
 8000fe8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fec:	4884      	ldr	r0, [pc, #528]	; (8001200 <HAL_GPIO_EXTI_Callback+0x264>)
 8000fee:	f001 ff2f 	bl	8002e50 <HAL_GPIO_ReadPin>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf14      	ite	ne
 8000ff8:	2301      	movne	r3, #1
 8000ffa:	2300      	moveq	r3, #0
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b83      	ldr	r3, [pc, #524]	; (800120c <HAL_GPIO_EXTI_Callback+0x270>)
 8001000:	701a      	strb	r2, [r3, #0]
	 state0=state0|LEFT_ENCODER_B;
 8001002:	4b82      	ldr	r3, [pc, #520]	; (800120c <HAL_GPIO_EXTI_Callback+0x270>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	4b7f      	ldr	r3, [pc, #508]	; (8001208 <HAL_GPIO_EXTI_Callback+0x26c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4313      	orrs	r3, r2
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b7d      	ldr	r3, [pc, #500]	; (8001208 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001012:	701a      	strb	r2, [r3, #0]
	 state0=state0 & 0x03;
 8001014:	4b7c      	ldr	r3, [pc, #496]	; (8001208 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b7a      	ldr	r3, [pc, #488]	; (8001208 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001020:	701a      	strb	r2, [r3, #0]

	 switch(state0)
 8001022:	4b79      	ldr	r3, [pc, #484]	; (8001208 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b03      	cmp	r3, #3
 8001028:	d85d      	bhi.n	80010e6 <HAL_GPIO_EXTI_Callback+0x14a>
 800102a:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <HAL_GPIO_EXTI_Callback+0x94>)
 800102c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001030:	08001041 	.word	0x08001041
 8001034:	08001067 	.word	0x08001067
 8001038:	0800108d 	.word	0x0800108d
 800103c:	080010b3 	.word	0x080010b3
	 {
		 	 	 	 	 case 0:
							 	 if(left_previous==1){left_count++;}
 8001040:	4b73      	ldr	r3, [pc, #460]	; (8001210 <HAL_GPIO_EXTI_Callback+0x274>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d104      	bne.n	8001052 <HAL_GPIO_EXTI_Callback+0xb6>
 8001048:	4b72      	ldr	r3, [pc, #456]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a71      	ldr	r2, [pc, #452]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 8001050:	6013      	str	r3, [r2, #0]
							 	 if(left_previous==2) {left_count--;}
 8001052:	4b6f      	ldr	r3, [pc, #444]	; (8001210 <HAL_GPIO_EXTI_Callback+0x274>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d13e      	bne.n	80010d8 <HAL_GPIO_EXTI_Callback+0x13c>
 800105a:	4b6e      	ldr	r3, [pc, #440]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	4a6c      	ldr	r2, [pc, #432]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 8001062:	6013      	str	r3, [r2, #0]
							 	 break;
 8001064:	e038      	b.n	80010d8 <HAL_GPIO_EXTI_Callback+0x13c>
		 	 	 	 	 case 1:
		 	 	 	 		 	 if(left_previous==3){left_count++;}
 8001066:	4b6a      	ldr	r3, [pc, #424]	; (8001210 <HAL_GPIO_EXTI_Callback+0x274>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d104      	bne.n	8001078 <HAL_GPIO_EXTI_Callback+0xdc>
 800106e:	4b69      	ldr	r3, [pc, #420]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	4a67      	ldr	r2, [pc, #412]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 8001076:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==0){left_count--;}
 8001078:	4b65      	ldr	r3, [pc, #404]	; (8001210 <HAL_GPIO_EXTI_Callback+0x274>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d12d      	bne.n	80010dc <HAL_GPIO_EXTI_Callback+0x140>
 8001080:	4b64      	ldr	r3, [pc, #400]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3b01      	subs	r3, #1
 8001086:	4a63      	ldr	r2, [pc, #396]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 8001088:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 800108a:	e027      	b.n	80010dc <HAL_GPIO_EXTI_Callback+0x140>
		 	 	 	 	 case 2:
		 	 	 	 		 	 if(left_previous==0){left_count++;}
 800108c:	4b60      	ldr	r3, [pc, #384]	; (8001210 <HAL_GPIO_EXTI_Callback+0x274>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d104      	bne.n	800109e <HAL_GPIO_EXTI_Callback+0x102>
 8001094:	4b5f      	ldr	r3, [pc, #380]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	4a5e      	ldr	r2, [pc, #376]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 800109c:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==3) {left_count--;}
 800109e:	4b5c      	ldr	r3, [pc, #368]	; (8001210 <HAL_GPIO_EXTI_Callback+0x274>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d11c      	bne.n	80010e0 <HAL_GPIO_EXTI_Callback+0x144>
 80010a6:	4b5b      	ldr	r3, [pc, #364]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	4a59      	ldr	r2, [pc, #356]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 80010ae:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 80010b0:	e016      	b.n	80010e0 <HAL_GPIO_EXTI_Callback+0x144>
		 	 	 	 	 case 3:
		 	 	 	 		 	 if(left_previous==2){left_count++;}
 80010b2:	4b57      	ldr	r3, [pc, #348]	; (8001210 <HAL_GPIO_EXTI_Callback+0x274>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d104      	bne.n	80010c4 <HAL_GPIO_EXTI_Callback+0x128>
 80010ba:	4b56      	ldr	r3, [pc, #344]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a54      	ldr	r2, [pc, #336]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 80010c2:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==1) {left_count--;}
 80010c4:	4b52      	ldr	r3, [pc, #328]	; (8001210 <HAL_GPIO_EXTI_Callback+0x274>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d10b      	bne.n	80010e4 <HAL_GPIO_EXTI_Callback+0x148>
 80010cc:	4b51      	ldr	r3, [pc, #324]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	4a50      	ldr	r2, [pc, #320]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 80010d4:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 80010d6:	e005      	b.n	80010e4 <HAL_GPIO_EXTI_Callback+0x148>
							 	 break;
 80010d8:	bf00      	nop
 80010da:	e004      	b.n	80010e6 <HAL_GPIO_EXTI_Callback+0x14a>
		 	 	 	 		 	 break;
 80010dc:	bf00      	nop
 80010de:	e002      	b.n	80010e6 <HAL_GPIO_EXTI_Callback+0x14a>
		 	 	 	 		 	 break;
 80010e0:	bf00      	nop
 80010e2:	e000      	b.n	80010e6 <HAL_GPIO_EXTI_Callback+0x14a>
		 	 	 	 		 	 break;
 80010e4:	bf00      	nop
	 }
	 left_previous=state0;
 80010e6:	4b48      	ldr	r3, [pc, #288]	; (8001208 <HAL_GPIO_EXTI_Callback+0x26c>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b48      	ldr	r3, [pc, #288]	; (8001210 <HAL_GPIO_EXTI_Callback+0x274>)
 80010ee:	601a      	str	r2, [r3, #0]
		 	 	 	 		 	 if(right_previous==1) {right_count--;}
		 	 	 	 		 	 break;
		 }
		 right_previous=state3;
	 }
}
 80010f0:	e215      	b.n	800151e <HAL_GPIO_EXTI_Callback+0x582>
	 else if (GPIO_Pin == GPIO_PIN_13)
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010f8:	f040 80b0 	bne.w	800125c <HAL_GPIO_EXTI_Callback+0x2c0>
		 LEFT_ENCODER_A=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12);
 80010fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001100:	483f      	ldr	r0, [pc, #252]	; (8001200 <HAL_GPIO_EXTI_Callback+0x264>)
 8001102:	f001 fea5 	bl	8002e50 <HAL_GPIO_ReadPin>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf14      	ite	ne
 800110c:	2301      	movne	r3, #1
 800110e:	2300      	moveq	r3, #0
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b3c      	ldr	r3, [pc, #240]	; (8001204 <HAL_GPIO_EXTI_Callback+0x268>)
 8001114:	701a      	strb	r2, [r3, #0]
		 state1=state1|LEFT_ENCODER_A;
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <HAL_GPIO_EXTI_Callback+0x268>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	4b3e      	ldr	r3, [pc, #248]	; (8001218 <HAL_GPIO_EXTI_Callback+0x27c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4313      	orrs	r3, r2
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b3c      	ldr	r3, [pc, #240]	; (8001218 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001126:	701a      	strb	r2, [r3, #0]
		 state1=state1<<1;
 8001128:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <HAL_GPIO_EXTI_Callback+0x27c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b39      	ldr	r3, [pc, #228]	; (8001218 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001132:	701a      	strb	r2, [r3, #0]
		 LEFT_ENCODER_B=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13);
 8001134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001138:	4831      	ldr	r0, [pc, #196]	; (8001200 <HAL_GPIO_EXTI_Callback+0x264>)
 800113a:	f001 fe89 	bl	8002e50 <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	bf14      	ite	ne
 8001144:	2301      	movne	r3, #1
 8001146:	2300      	moveq	r3, #0
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b30      	ldr	r3, [pc, #192]	; (800120c <HAL_GPIO_EXTI_Callback+0x270>)
 800114c:	701a      	strb	r2, [r3, #0]
		 state1=state1|LEFT_ENCODER_B;
 800114e:	4b2f      	ldr	r3, [pc, #188]	; (800120c <HAL_GPIO_EXTI_Callback+0x270>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4313      	orrs	r3, r2
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <HAL_GPIO_EXTI_Callback+0x27c>)
 800115e:	701a      	strb	r2, [r3, #0]
		 state1=state1 & 0x03;
 8001160:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <HAL_GPIO_EXTI_Callback+0x27c>)
 800116c:	701a      	strb	r2, [r3, #0]
		 switch(state1)
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d86c      	bhi.n	8001250 <HAL_GPIO_EXTI_Callback+0x2b4>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	0800118d 	.word	0x0800118d
 8001180:	080011b3 	.word	0x080011b3
 8001184:	080011d9 	.word	0x080011d9
 8001188:	0800121d 	.word	0x0800121d
							 	 if(left_previous==1){left_count++;}
 800118c:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_GPIO_EXTI_Callback+0x274>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d104      	bne.n	800119e <HAL_GPIO_EXTI_Callback+0x202>
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 800119c:	6013      	str	r3, [r2, #0]
							 	 if(left_previous==2) {left_count--;}
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <HAL_GPIO_EXTI_Callback+0x274>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d14d      	bne.n	8001242 <HAL_GPIO_EXTI_Callback+0x2a6>
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	4a19      	ldr	r2, [pc, #100]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 80011ae:	6013      	str	r3, [r2, #0]
							 	 break;
 80011b0:	e047      	b.n	8001242 <HAL_GPIO_EXTI_Callback+0x2a6>
		 	 	 	 		 	 if(left_previous==3){left_count++;}
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_GPIO_EXTI_Callback+0x274>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d104      	bne.n	80011c4 <HAL_GPIO_EXTI_Callback+0x228>
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	4a14      	ldr	r2, [pc, #80]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 80011c2:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==0){left_count--;}
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_GPIO_EXTI_Callback+0x274>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d13c      	bne.n	8001246 <HAL_GPIO_EXTI_Callback+0x2aa>
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 80011d4:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 80011d6:	e036      	b.n	8001246 <HAL_GPIO_EXTI_Callback+0x2aa>
		 	 	 	 		 	 if(left_previous==0){left_count++;}
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_GPIO_EXTI_Callback+0x274>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d104      	bne.n	80011ea <HAL_GPIO_EXTI_Callback+0x24e>
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 80011e8:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==3) {left_count--;}
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_GPIO_EXTI_Callback+0x274>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d12b      	bne.n	800124a <HAL_GPIO_EXTI_Callback+0x2ae>
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_GPIO_EXTI_Callback+0x278>)
 80011fa:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 80011fc:	e025      	b.n	800124a <HAL_GPIO_EXTI_Callback+0x2ae>
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
 8001204:	20000220 	.word	0x20000220
 8001208:	20000221 	.word	0x20000221
 800120c:	20000222 	.word	0x20000222
 8001210:	20000244 	.word	0x20000244
 8001214:	20000294 	.word	0x20000294
 8001218:	20000223 	.word	0x20000223
		 	 	 	 		 	 if(left_previous==2){left_count++;}
 800121c:	4b93      	ldr	r3, [pc, #588]	; (800146c <HAL_GPIO_EXTI_Callback+0x4d0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d104      	bne.n	800122e <HAL_GPIO_EXTI_Callback+0x292>
 8001224:	4b92      	ldr	r3, [pc, #584]	; (8001470 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	4a91      	ldr	r2, [pc, #580]	; (8001470 <HAL_GPIO_EXTI_Callback+0x4d4>)
 800122c:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==1) {left_count--;}
 800122e:	4b8f      	ldr	r3, [pc, #572]	; (800146c <HAL_GPIO_EXTI_Callback+0x4d0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d10b      	bne.n	800124e <HAL_GPIO_EXTI_Callback+0x2b2>
 8001236:	4b8e      	ldr	r3, [pc, #568]	; (8001470 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3b01      	subs	r3, #1
 800123c:	4a8c      	ldr	r2, [pc, #560]	; (8001470 <HAL_GPIO_EXTI_Callback+0x4d4>)
 800123e:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001240:	e005      	b.n	800124e <HAL_GPIO_EXTI_Callback+0x2b2>
							 	 break;
 8001242:	bf00      	nop
 8001244:	e004      	b.n	8001250 <HAL_GPIO_EXTI_Callback+0x2b4>
		 	 	 	 		 	 break;
 8001246:	bf00      	nop
 8001248:	e002      	b.n	8001250 <HAL_GPIO_EXTI_Callback+0x2b4>
		 	 	 	 		 	 break;
 800124a:	bf00      	nop
 800124c:	e000      	b.n	8001250 <HAL_GPIO_EXTI_Callback+0x2b4>
		 	 	 	 		 	 break;
 800124e:	bf00      	nop
		 left_previous=state1;
 8001250:	4b88      	ldr	r3, [pc, #544]	; (8001474 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b85      	ldr	r3, [pc, #532]	; (800146c <HAL_GPIO_EXTI_Callback+0x4d0>)
 8001258:	601a      	str	r2, [r3, #0]
}
 800125a:	e160      	b.n	800151e <HAL_GPIO_EXTI_Callback+0x582>
	 else if (GPIO_Pin == GPIO_PIN_10)		 // LEFT CHANNEL B
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001262:	f040 80a2 	bne.w	80013aa <HAL_GPIO_EXTI_Callback+0x40e>
		 RIGHT_ENCODER_A=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10);
 8001266:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126a:	4883      	ldr	r0, [pc, #524]	; (8001478 <HAL_GPIO_EXTI_Callback+0x4dc>)
 800126c:	f001 fdf0 	bl	8002e50 <HAL_GPIO_ReadPin>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	bf14      	ite	ne
 8001276:	2301      	movne	r3, #1
 8001278:	2300      	moveq	r3, #0
 800127a:	b2da      	uxtb	r2, r3
 800127c:	4b7f      	ldr	r3, [pc, #508]	; (800147c <HAL_GPIO_EXTI_Callback+0x4e0>)
 800127e:	701a      	strb	r2, [r3, #0]
		 state2=state2|RIGHT_ENCODER_A;
 8001280:	4b7e      	ldr	r3, [pc, #504]	; (800147c <HAL_GPIO_EXTI_Callback+0x4e0>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b7e      	ldr	r3, [pc, #504]	; (8001480 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4313      	orrs	r3, r2
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b7c      	ldr	r3, [pc, #496]	; (8001480 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001290:	701a      	strb	r2, [r3, #0]
		 state2=state2<<1;
 8001292:	4b7b      	ldr	r3, [pc, #492]	; (8001480 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4b79      	ldr	r3, [pc, #484]	; (8001480 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800129c:	701a      	strb	r2, [r3, #0]
		 RIGHT_ENCODER_B=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_11);
 800129e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a2:	4875      	ldr	r0, [pc, #468]	; (8001478 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80012a4:	f001 fdd4 	bl	8002e50 <HAL_GPIO_ReadPin>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	bf14      	ite	ne
 80012ae:	2301      	movne	r3, #1
 80012b0:	2300      	moveq	r3, #0
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b73      	ldr	r3, [pc, #460]	; (8001484 <HAL_GPIO_EXTI_Callback+0x4e8>)
 80012b6:	701a      	strb	r2, [r3, #0]
		 state2=state2|RIGHT_ENCODER_B;
 80012b8:	4b72      	ldr	r3, [pc, #456]	; (8001484 <HAL_GPIO_EXTI_Callback+0x4e8>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b70      	ldr	r3, [pc, #448]	; (8001480 <HAL_GPIO_EXTI_Callback+0x4e4>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b6e      	ldr	r3, [pc, #440]	; (8001480 <HAL_GPIO_EXTI_Callback+0x4e4>)
 80012c8:	701a      	strb	r2, [r3, #0]
		 state2=state2 & 0x03;
 80012ca:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <HAL_GPIO_EXTI_Callback+0x4e4>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b6a      	ldr	r3, [pc, #424]	; (8001480 <HAL_GPIO_EXTI_Callback+0x4e4>)
 80012d6:	701a      	strb	r2, [r3, #0]
		 switch(state2)
 80012d8:	4b69      	ldr	r3, [pc, #420]	; (8001480 <HAL_GPIO_EXTI_Callback+0x4e4>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d85e      	bhi.n	800139e <HAL_GPIO_EXTI_Callback+0x402>
 80012e0:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <HAL_GPIO_EXTI_Callback+0x34c>)
 80012e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e6:	bf00      	nop
 80012e8:	080012f9 	.word	0x080012f9
 80012ec:	0800131f 	.word	0x0800131f
 80012f0:	08001345 	.word	0x08001345
 80012f4:	0800136b 	.word	0x0800136b
				 if(right_previous==1){right_count++;}
 80012f8:	4b63      	ldr	r3, [pc, #396]	; (8001488 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d104      	bne.n	800130a <HAL_GPIO_EXTI_Callback+0x36e>
 8001300:	4b62      	ldr	r3, [pc, #392]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	4a61      	ldr	r2, [pc, #388]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001308:	6013      	str	r3, [r2, #0]
				 if(right_previous==2){right_count--;}
 800130a:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d13e      	bne.n	8001390 <HAL_GPIO_EXTI_Callback+0x3f4>
 8001312:	4b5e      	ldr	r3, [pc, #376]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3b01      	subs	r3, #1
 8001318:	4a5c      	ldr	r2, [pc, #368]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800131a:	6013      	str	r3, [r2, #0]
				 break;
 800131c:	e038      	b.n	8001390 <HAL_GPIO_EXTI_Callback+0x3f4>
	 	 		 	 if(right_previous==3){right_count++;}
 800131e:	4b5a      	ldr	r3, [pc, #360]	; (8001488 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b03      	cmp	r3, #3
 8001324:	d104      	bne.n	8001330 <HAL_GPIO_EXTI_Callback+0x394>
 8001326:	4b59      	ldr	r3, [pc, #356]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	4a57      	ldr	r2, [pc, #348]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800132e:	6013      	str	r3, [r2, #0]
	 	 		 	 if(right_previous==0){right_count--;}
 8001330:	4b55      	ldr	r3, [pc, #340]	; (8001488 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d12d      	bne.n	8001394 <HAL_GPIO_EXTI_Callback+0x3f8>
 8001338:	4b54      	ldr	r3, [pc, #336]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3b01      	subs	r3, #1
 800133e:	4a53      	ldr	r2, [pc, #332]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001340:	6013      	str	r3, [r2, #0]
	 	 		 	 break;
 8001342:	e027      	b.n	8001394 <HAL_GPIO_EXTI_Callback+0x3f8>
	 	 		 	 if(right_previous==0){right_count++;}
 8001344:	4b50      	ldr	r3, [pc, #320]	; (8001488 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d104      	bne.n	8001356 <HAL_GPIO_EXTI_Callback+0x3ba>
 800134c:	4b4f      	ldr	r3, [pc, #316]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	4a4e      	ldr	r2, [pc, #312]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001354:	6013      	str	r3, [r2, #0]
	 	 		 	 if(right_previous==3) {right_count--;}
 8001356:	4b4c      	ldr	r3, [pc, #304]	; (8001488 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b03      	cmp	r3, #3
 800135c:	d11c      	bne.n	8001398 <HAL_GPIO_EXTI_Callback+0x3fc>
 800135e:	4b4b      	ldr	r3, [pc, #300]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3b01      	subs	r3, #1
 8001364:	4a49      	ldr	r2, [pc, #292]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001366:	6013      	str	r3, [r2, #0]
	 	 		 	 break;
 8001368:	e016      	b.n	8001398 <HAL_GPIO_EXTI_Callback+0x3fc>
	 	 		 	 if(right_previous==2){right_count++;}
 800136a:	4b47      	ldr	r3, [pc, #284]	; (8001488 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d104      	bne.n	800137c <HAL_GPIO_EXTI_Callback+0x3e0>
 8001372:	4b46      	ldr	r3, [pc, #280]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4a44      	ldr	r2, [pc, #272]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800137a:	6013      	str	r3, [r2, #0]
	 	 		 	 if(right_previous==1) {right_count--;}
 800137c:	4b42      	ldr	r3, [pc, #264]	; (8001488 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d10b      	bne.n	800139c <HAL_GPIO_EXTI_Callback+0x400>
 8001384:	4b41      	ldr	r3, [pc, #260]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	3b01      	subs	r3, #1
 800138a:	4a40      	ldr	r2, [pc, #256]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800138c:	6013      	str	r3, [r2, #0]
	 	 		 	 break;
 800138e:	e005      	b.n	800139c <HAL_GPIO_EXTI_Callback+0x400>
				 break;
 8001390:	bf00      	nop
 8001392:	e004      	b.n	800139e <HAL_GPIO_EXTI_Callback+0x402>
	 	 		 	 break;
 8001394:	bf00      	nop
 8001396:	e002      	b.n	800139e <HAL_GPIO_EXTI_Callback+0x402>
	 	 		 	 break;
 8001398:	bf00      	nop
 800139a:	e000      	b.n	800139e <HAL_GPIO_EXTI_Callback+0x402>
	 	 		 	 break;
 800139c:	bf00      	nop
		 right_previous=state2;
 800139e:	4b38      	ldr	r3, [pc, #224]	; (8001480 <HAL_GPIO_EXTI_Callback+0x4e4>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b38      	ldr	r3, [pc, #224]	; (8001488 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80013a6:	601a      	str	r2, [r3, #0]
}
 80013a8:	e0b9      	b.n	800151e <HAL_GPIO_EXTI_Callback+0x582>
	 else if (GPIO_Pin == GPIO_PIN_11)
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013b0:	f040 80b5 	bne.w	800151e <HAL_GPIO_EXTI_Callback+0x582>
		 RIGHT_ENCODER_A=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10);
 80013b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b8:	482f      	ldr	r0, [pc, #188]	; (8001478 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80013ba:	f001 fd49 	bl	8002e50 <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	bf14      	ite	ne
 80013c4:	2301      	movne	r3, #1
 80013c6:	2300      	moveq	r3, #0
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b2c      	ldr	r3, [pc, #176]	; (800147c <HAL_GPIO_EXTI_Callback+0x4e0>)
 80013cc:	701a      	strb	r2, [r3, #0]
		 state3=state3|RIGHT_ENCODER_A;
 80013ce:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_GPIO_EXTI_Callback+0x4e0>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4313      	orrs	r3, r2
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013de:	701a      	strb	r2, [r3, #0]
		 state3=state3<<1;
 80013e0:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b29      	ldr	r3, [pc, #164]	; (8001490 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013ea:	701a      	strb	r2, [r3, #0]
		 RIGHT_ENCODER_B=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_11);
 80013ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f0:	4821      	ldr	r0, [pc, #132]	; (8001478 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80013f2:	f001 fd2d 	bl	8002e50 <HAL_GPIO_ReadPin>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bf14      	ite	ne
 80013fc:	2301      	movne	r3, #1
 80013fe:	2300      	moveq	r3, #0
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_GPIO_EXTI_Callback+0x4e8>)
 8001404:	701a      	strb	r2, [r3, #0]
		 state3=state3|RIGHT_ENCODER_B;
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <HAL_GPIO_EXTI_Callback+0x4e8>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	4b20      	ldr	r3, [pc, #128]	; (8001490 <HAL_GPIO_EXTI_Callback+0x4f4>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4313      	orrs	r3, r2
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8001416:	701a      	strb	r2, [r3, #0]
		 state3=state3 & 0x03;
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <HAL_GPIO_EXTI_Callback+0x4f4>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8001424:	701a      	strb	r2, [r3, #0]
		 switch(state3)
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d872      	bhi.n	8001514 <HAL_GPIO_EXTI_Callback+0x578>
 800142e:	a201      	add	r2, pc, #4	; (adr r2, 8001434 <HAL_GPIO_EXTI_Callback+0x498>)
 8001430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001434:	08001445 	.word	0x08001445
 8001438:	08001495 	.word	0x08001495
 800143c:	080014bb 	.word	0x080014bb
 8001440:	080014e1 	.word	0x080014e1
								 if(right_previous==1){right_count++;}
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d104      	bne.n	8001456 <HAL_GPIO_EXTI_Callback+0x4ba>
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	4a0e      	ldr	r2, [pc, #56]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001454:	6013      	str	r3, [r2, #0]
								 if(right_previous==2){right_count--;}
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d153      	bne.n	8001506 <HAL_GPIO_EXTI_Callback+0x56a>
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	4a09      	ldr	r2, [pc, #36]	; (800148c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001466:	6013      	str	r3, [r2, #0]
								 break;
 8001468:	e04d      	b.n	8001506 <HAL_GPIO_EXTI_Callback+0x56a>
 800146a:	bf00      	nop
 800146c:	20000244 	.word	0x20000244
 8001470:	20000294 	.word	0x20000294
 8001474:	20000223 	.word	0x20000223
 8001478:	40021000 	.word	0x40021000
 800147c:	20000224 	.word	0x20000224
 8001480:	20000225 	.word	0x20000225
 8001484:	20000226 	.word	0x20000226
 8001488:	20000288 	.word	0x20000288
 800148c:	2000024c 	.word	0x2000024c
 8001490:	20000227 	.word	0x20000227
		 	 	 	 		 	 if(right_previous==3){right_count++;}
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <HAL_GPIO_EXTI_Callback+0x58c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b03      	cmp	r3, #3
 800149a:	d104      	bne.n	80014a6 <HAL_GPIO_EXTI_Callback+0x50a>
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_GPIO_EXTI_Callback+0x590>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	4a22      	ldr	r2, [pc, #136]	; (800152c <HAL_GPIO_EXTI_Callback+0x590>)
 80014a4:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(right_previous==0){right_count--;}
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d12d      	bne.n	800150a <HAL_GPIO_EXTI_Callback+0x56e>
 80014ae:	4b1f      	ldr	r3, [pc, #124]	; (800152c <HAL_GPIO_EXTI_Callback+0x590>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	4a1d      	ldr	r2, [pc, #116]	; (800152c <HAL_GPIO_EXTI_Callback+0x590>)
 80014b6:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 80014b8:	e027      	b.n	800150a <HAL_GPIO_EXTI_Callback+0x56e>
		 	 	 	 		 	 if(right_previous==0){right_count++;}
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d104      	bne.n	80014cc <HAL_GPIO_EXTI_Callback+0x530>
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_GPIO_EXTI_Callback+0x590>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	4a18      	ldr	r2, [pc, #96]	; (800152c <HAL_GPIO_EXTI_Callback+0x590>)
 80014ca:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(right_previous==3) {right_count--;}
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d11c      	bne.n	800150e <HAL_GPIO_EXTI_Callback+0x572>
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_GPIO_EXTI_Callback+0x590>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3b01      	subs	r3, #1
 80014da:	4a14      	ldr	r2, [pc, #80]	; (800152c <HAL_GPIO_EXTI_Callback+0x590>)
 80014dc:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 80014de:	e016      	b.n	800150e <HAL_GPIO_EXTI_Callback+0x572>
		 	 	 	 		 	 if(right_previous==2){right_count++;}
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d104      	bne.n	80014f2 <HAL_GPIO_EXTI_Callback+0x556>
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_GPIO_EXTI_Callback+0x590>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	4a0f      	ldr	r2, [pc, #60]	; (800152c <HAL_GPIO_EXTI_Callback+0x590>)
 80014f0:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(right_previous==1) {right_count--;}
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d10b      	bne.n	8001512 <HAL_GPIO_EXTI_Callback+0x576>
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_GPIO_EXTI_Callback+0x590>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3b01      	subs	r3, #1
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_GPIO_EXTI_Callback+0x590>)
 8001502:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001504:	e005      	b.n	8001512 <HAL_GPIO_EXTI_Callback+0x576>
								 break;
 8001506:	bf00      	nop
 8001508:	e004      	b.n	8001514 <HAL_GPIO_EXTI_Callback+0x578>
		 	 	 	 		 	 break;
 800150a:	bf00      	nop
 800150c:	e002      	b.n	8001514 <HAL_GPIO_EXTI_Callback+0x578>
		 	 	 	 		 	 break;
 800150e:	bf00      	nop
 8001510:	e000      	b.n	8001514 <HAL_GPIO_EXTI_Callback+0x578>
		 	 	 	 		 	 break;
 8001512:	bf00      	nop
		 right_previous=state3;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_GPIO_EXTI_Callback+0x594>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4b03      	ldr	r3, [pc, #12]	; (8001528 <HAL_GPIO_EXTI_Callback+0x58c>)
 800151c:	601a      	str	r2, [r3, #0]
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000288 	.word	0x20000288
 800152c:	2000024c 	.word	0x2000024c
 8001530:	20000227 	.word	0x20000227
 8001534:	00000000 	.word	0x00000000

08001538 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001538:	b5b0      	push	{r4, r5, r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	cnt++;
 8001540:	4b61      	ldr	r3, [pc, #388]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	4a60      	ldr	r2, [pc, #384]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001548:	6013      	str	r3, [r2, #0]
	if(cnt==100) //1 cnt = 0.001s, default:80 = 0.8s
 800154a:	4b5f      	ldr	r3, [pc, #380]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	f040 80ab 	bne.w	80016aa <HAL_TIM_PeriodElapsedCallback+0x172>
	{

		rads_left_velocity  = left_count*2*PI/(5376*0.001*cnt);
 8001554:	4b5d      	ldr	r3, [pc, #372]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ffea 	bl	8000534 <__aeabi_i2d>
 8001560:	a355      	add	r3, pc, #340	; (adr r3, 80016b8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7ff f84f 	bl	8000608 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4614      	mov	r4, r2
 8001570:	461d      	mov	r5, r3
 8001572:	4b55      	ldr	r3, [pc, #340]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ffdc 	bl	8000534 <__aeabi_i2d>
 800157c:	a350      	add	r3, pc, #320	; (adr r3, 80016c0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7ff f841 	bl	8000608 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4620      	mov	r0, r4
 800158c:	4629      	mov	r1, r5
 800158e:	f7ff f965 	bl	800085c <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff fb2d 	bl	8000bf8 <__aeabi_d2f>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a4b      	ldr	r2, [pc, #300]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80015a2:	6013      	str	r3, [r2, #0]
		rpm_left_velocity   = left_count*60/(5376*0.001*cnt);
 80015a4:	4b49      	ldr	r3, [pc, #292]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x194>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4613      	mov	r3, r2
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffbf 	bl	8000534 <__aeabi_i2d>
 80015b6:	4604      	mov	r4, r0
 80015b8:	460d      	mov	r5, r1
 80015ba:	4b43      	ldr	r3, [pc, #268]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ffb8 	bl	8000534 <__aeabi_i2d>
 80015c4:	a33e      	add	r3, pc, #248	; (adr r3, 80016c0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7ff f81d 	bl	8000608 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4620      	mov	r0, r4
 80015d4:	4629      	mov	r1, r5
 80015d6:	f7ff f941 	bl	800085c <__aeabi_ddiv>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff fb09 	bl	8000bf8 <__aeabi_d2f>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a3a      	ldr	r2, [pc, #232]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80015ea:	6013      	str	r3, [r2, #0]

		rads_right_velocity = right_count*2*PI/(5376*0.001*cnt);
 80015ec:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ff9e 	bl	8000534 <__aeabi_i2d>
 80015f8:	a32f      	add	r3, pc, #188	; (adr r3, 80016b8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7ff f803 	bl	8000608 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4614      	mov	r4, r2
 8001608:	461d      	mov	r5, r3
 800160a:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff90 	bl	8000534 <__aeabi_i2d>
 8001614:	a32a      	add	r3, pc, #168	; (adr r3, 80016c0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7fe fff5 	bl	8000608 <__aeabi_dmul>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4620      	mov	r0, r4
 8001624:	4629      	mov	r1, r5
 8001626:	f7ff f919 	bl	800085c <__aeabi_ddiv>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fae1 	bl	8000bf8 <__aeabi_d2f>
 8001636:	4603      	mov	r3, r0
 8001638:	4a28      	ldr	r2, [pc, #160]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800163a:	6013      	str	r3, [r2, #0]
		rpm_right_velocity  = right_count*60/(5376*0.001*cnt);
 800163c:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4613      	mov	r3, r2
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	1a9b      	subs	r3, r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff73 	bl	8000534 <__aeabi_i2d>
 800164e:	4604      	mov	r4, r0
 8001650:	460d      	mov	r5, r1
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff6c 	bl	8000534 <__aeabi_i2d>
 800165c:	a318      	add	r3, pc, #96	; (adr r3, 80016c0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7fe ffd1 	bl	8000608 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4620      	mov	r0, r4
 800166c:	4629      	mov	r1, r5
 800166e:	f7ff f8f5 	bl	800085c <__aeabi_ddiv>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff fabd 	bl	8000bf8 <__aeabi_d2f>
 800167e:	4603      	mov	r3, r0
 8001680:	4a17      	ldr	r2, [pc, #92]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001682:	6013      	str	r3, [r2, #0]

//		pos=previous_pos+right_count*360/5376;
//		previous_pos=pos;
		printf("%0.5f\n",rpm_right_velocity);
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff65 	bl	8000558 <__aeabi_f2d>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4814      	ldr	r0, [pc, #80]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001694:	f009 fc9c 	bl	800afd0 <iprintf>
		left_count=0;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x194>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
		right_count=0;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
		cnt=0;
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
	}
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bdb0      	pop	{r4, r5, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	f3af 8000 	nop.w
 80016b8:	54442d18 	.word	0x54442d18
 80016bc:	400921fb 	.word	0x400921fb
 80016c0:	24dd2f1b 	.word	0x24dd2f1b
 80016c4:	40158106 	.word	0x40158106
 80016c8:	20000258 	.word	0x20000258
 80016cc:	20000294 	.word	0x20000294
 80016d0:	20000280 	.word	0x20000280
 80016d4:	20000278 	.word	0x20000278
 80016d8:	2000024c 	.word	0x2000024c
 80016dc:	2000026c 	.word	0x2000026c
 80016e0:	20000290 	.word	0x20000290
 80016e4:	0800d030 	.word	0x0800d030

080016e8 <PID>:
float CurrentError;
void PID(float *SetPoint, float* ControlledVariable,float* PidOutput)
{
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
	// PWM mode has the range from 0 to 400.
	float HighLimit=400,ManipulatedVariable,ManipulatedVariableHat,uk,ui;
 80016f4:	4b6e      	ldr	r3, [pc, #440]	; (80018b0 <PID+0x1c8>)
 80016f6:	623b      	str	r3, [r7, #32]
	static float previous_ui;

	// Calculate the error
	CurrentError=*SetPoint-*ControlledVariable;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	ed93 7a00 	vldr	s14, [r3]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001708:	4b6a      	ldr	r3, [pc, #424]	; (80018b4 <PID+0x1cc>)
 800170a:	edc3 7a00 	vstr	s15, [r3]

	// Proportion
	uk=Kp*CurrentError;
 800170e:	4b69      	ldr	r3, [pc, #420]	; (80018b4 <PID+0x1cc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff20 	bl	8000558 <__aeabi_f2d>
 8001718:	a35d      	add	r3, pc, #372	; (adr r3, 8001890 <PID+0x1a8>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7fe ff73 	bl	8000608 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff fa65 	bl	8000bf8 <__aeabi_d2f>
 800172e:	4603      	mov	r3, r0
 8001730:	61fb      	str	r3, [r7, #28]

	// Integration
	ui=previous_ui+Ki*CurrentError*0.1;
 8001732:	4b61      	ldr	r3, [pc, #388]	; (80018b8 <PID+0x1d0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe ff0e 	bl	8000558 <__aeabi_f2d>
 800173c:	4604      	mov	r4, r0
 800173e:	460d      	mov	r5, r1
 8001740:	4b5c      	ldr	r3, [pc, #368]	; (80018b4 <PID+0x1cc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe ff07 	bl	8000558 <__aeabi_f2d>
 800174a:	a353      	add	r3, pc, #332	; (adr r3, 8001898 <PID+0x1b0>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe ff5a 	bl	8000608 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	a350      	add	r3, pc, #320	; (adr r3, 80018a0 <PID+0x1b8>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7fe ff51 	bl	8000608 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4620      	mov	r0, r4
 800176c:	4629      	mov	r1, r5
 800176e:	f7fe fd95 	bl	800029c <__adddf3>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff fa3d 	bl	8000bf8 <__aeabi_d2f>
 800177e:	4603      	mov	r3, r0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
	ManipulatedVariable=ui+uk;
 8001782:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001786:	edd7 7a07 	vldr	s15, [r7, #28]
 800178a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178e:	edc7 7a06 	vstr	s15, [r7, #24]

	if(ManipulatedVariable<HighLimit)
 8001792:	ed97 7a06 	vldr	s14, [r7, #24]
 8001796:	edd7 7a08 	vldr	s15, [r7, #32]
 800179a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a2:	d508      	bpl.n	80017b6 <PID+0xce>
	{
		ManipulatedVariableHat=ManipulatedVariable;
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	617b      	str	r3, [r7, #20]
		ResetError=0;
 80017a8:	4b44      	ldr	r3, [pc, #272]	; (80018bc <PID+0x1d4>)
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
		*PidOutput=ManipulatedVariable;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	601a      	str	r2, [r3, #0]
	}
	if(ManipulatedVariable>HighLimit)
 80017b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80017ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80017be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c6:	dd59      	ble.n	800187c <PID+0x194>
	{
		ManipulatedVariableHat=HighLimit;
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	617b      	str	r3, [r7, #20]
		ResetError=ManipulatedVariableHat-ManipulatedVariable;
 80017cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80017d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80017d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d8:	4b38      	ldr	r3, [pc, #224]	; (80018bc <PID+0x1d4>)
 80017da:	edc3 7a00 	vstr	s15, [r3]
		AntiWindupError=Ki*CurrentError+ResetError*Kb;
 80017de:	4b35      	ldr	r3, [pc, #212]	; (80018b4 <PID+0x1cc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe feb8 	bl	8000558 <__aeabi_f2d>
 80017e8:	a32b      	add	r3, pc, #172	; (adr r3, 8001898 <PID+0x1b0>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe ff0b 	bl	8000608 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4614      	mov	r4, r2
 80017f8:	461d      	mov	r5, r3
 80017fa:	4b30      	ldr	r3, [pc, #192]	; (80018bc <PID+0x1d4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feaa 	bl	8000558 <__aeabi_f2d>
 8001804:	a328      	add	r3, pc, #160	; (adr r3, 80018a8 <PID+0x1c0>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7fe fefd 	bl	8000608 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4620      	mov	r0, r4
 8001814:	4629      	mov	r1, r5
 8001816:	f7fe fd41 	bl	800029c <__adddf3>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f7ff f9e9 	bl	8000bf8 <__aeabi_d2f>
 8001826:	4603      	mov	r3, r0
 8001828:	4a25      	ldr	r2, [pc, #148]	; (80018c0 <PID+0x1d8>)
 800182a:	6013      	str	r3, [r2, #0]
		ui=previous_ui+AntiWindupError*0.1;
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <PID+0x1d0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fe91 	bl	8000558 <__aeabi_f2d>
 8001836:	4604      	mov	r4, r0
 8001838:	460d      	mov	r5, r1
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <PID+0x1d8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe8a 	bl	8000558 <__aeabi_f2d>
 8001844:	a316      	add	r3, pc, #88	; (adr r3, 80018a0 <PID+0x1b8>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7fe fedd 	bl	8000608 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4620      	mov	r0, r4
 8001854:	4629      	mov	r1, r5
 8001856:	f7fe fd21 	bl	800029c <__adddf3>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff f9c9 	bl	8000bf8 <__aeabi_d2f>
 8001866:	4603      	mov	r3, r0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
		*PidOutput=uk+ui;
 800186a:	ed97 7a07 	vldr	s14, [r7, #28]
 800186e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	edc3 7a00 	vstr	s15, [r3]
	}
	previous_ui=ui;
 800187c:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <PID+0x1d0>)
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	6013      	str	r3, [r2, #0]

}
 8001882:	bf00      	nop
 8001884:	3728      	adds	r7, #40	; 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bdb0      	pop	{r4, r5, r7, pc}
 800188a:	bf00      	nop
 800188c:	f3af 8000 	nop.w
 8001890:	3b645a1d 	.word	0x3b645a1d
 8001894:	3fcd4fdf 	.word	0x3fcd4fdf
 8001898:	9999999a 	.word	0x9999999a
 800189c:	402e9999 	.word	0x402e9999
 80018a0:	9999999a 	.word	0x9999999a
 80018a4:	3fb99999 	.word	0x3fb99999
 80018a8:	fdf3b646 	.word	0xfdf3b646
 80018ac:	403638d4 	.word	0x403638d4
 80018b0:	43c80000 	.word	0x43c80000
 80018b4:	2000027c 	.word	0x2000027c
 80018b8:	20000228 	.word	0x20000228
 80018bc:	2000028c 	.word	0x2000028c
 80018c0:	20000264 	.word	0x20000264

080018c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80018cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d013      	beq.n	8001904 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80018dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80018e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00b      	beq.n	8001904 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80018ec:	e000      	b.n	80018f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80018ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80018f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f9      	beq.n	80018ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80018fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001904:	687b      	ldr	r3, [r7, #4]
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_write>:

/* USER CODE BEGIN PFP */

/* We need data to calculate PID param, hence we write data into a file.txt */
int _write(int file, char *ptr, int len)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e009      	b.n	800193c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	60ba      	str	r2, [r7, #8]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ffc7 	bl	80018c4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	429a      	cmp	r2, r3
 8001942:	dbf1      	blt.n	8001928 <_write+0x16>
  return len;
 8001944:	687b      	ldr	r3, [r7, #4]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001956:	f000 ff4f 	bl	80027f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195a:	f000 f8a1 	bl	8001aa0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800195e:	f000 f907 	bl	8001b70 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001962:	f000 fab5 	bl	8001ed0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001966:	f000 f923 	bl	8001bb0 <MX_I2C1_Init>
  MX_I2S2_Init();
 800196a:	f000 f94f 	bl	8001c0c <MX_I2S2_Init>
  MX_I2S3_Init();
 800196e:	f000 f97b 	bl	8001c68 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001972:	f000 f9a9 	bl	8001cc8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001976:	f008 fa97 	bl	8009ea8 <MX_USB_HOST_Init>
  MX_TIM3_Init();
 800197a:	f000 fa27 	bl	8001dcc <MX_TIM3_Init>
  MX_TIM2_Init();
 800197e:	f000 f9d9 	bl	8001d34 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001982:	483a      	ldr	r0, [pc, #232]	; (8001a6c <main+0x11c>)
 8001984:	f004 fb48 	bl	8006018 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001988:	2100      	movs	r1, #0
 800198a:	4839      	ldr	r0, [pc, #228]	; (8001a70 <main+0x120>)
 800198c:	f004 fc00 	bl	8006190 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8001990:	2108      	movs	r1, #8
 8001992:	4837      	ldr	r0, [pc, #220]	; (8001a70 <main+0x120>)
 8001994:	f004 fbfc 	bl	8006190 <HAL_TIM_PWM_Start>

  // IN3,IN4 pin	(motor A)
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_RESET);    // (0,1): < 0: forward. (1,0): >0 : reverse.
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800199e:	4835      	ldr	r0, [pc, #212]	; (8001a74 <main+0x124>)
 80019a0:	f001 fa6e 	bl	8002e80 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019aa:	4832      	ldr	r0, [pc, #200]	; (8001a74 <main+0x124>)
 80019ac:	f001 fa68 	bl	8002e80 <HAL_GPIO_WritePin>

  // IN1,IN2 pin   (motor B)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2102      	movs	r1, #2
 80019b4:	4830      	ldr	r0, [pc, #192]	; (8001a78 <main+0x128>)
 80019b6:	f001 fa63 	bl	8002e80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 80019ba:	2201      	movs	r2, #1
 80019bc:	2104      	movs	r1, #4
 80019be:	482e      	ldr	r0, [pc, #184]	; (8001a78 <main+0x128>)
 80019c0:	f001 fa5e 	bl	8002e80 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80019c4:	f008 fa96 	bl	8009ef4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

//    ReadEncoder();
//    ComputeVelocity();
    previous_tick=HAL_GetTick();
 80019c8:	f000 ff7c 	bl	80028c4 <HAL_GetTick>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <main+0x12c>)
 80019d2:	601a      	str	r2, [r3, #0]


    PID(&left_vel,&rpm_left_velocity,&LeftPidOut);
 80019d4:	4a2a      	ldr	r2, [pc, #168]	; (8001a80 <main+0x130>)
 80019d6:	492b      	ldr	r1, [pc, #172]	; (8001a84 <main+0x134>)
 80019d8:	482b      	ldr	r0, [pc, #172]	; (8001a88 <main+0x138>)
 80019da:	f7ff fe85 	bl	80016e8 <PID>
    PID(&right_vel,&rpm_right_velocity,&RightPidOut);
 80019de:	4a2b      	ldr	r2, [pc, #172]	; (8001a8c <main+0x13c>)
 80019e0:	492b      	ldr	r1, [pc, #172]	; (8001a90 <main+0x140>)
 80019e2:	482c      	ldr	r0, [pc, #176]	; (8001a94 <main+0x144>)
 80019e4:	f7ff fe80 	bl	80016e8 <PID>
    HAL_Delay(100);
 80019e8:	2064      	movs	r0, #100	; 0x64
 80019ea:	f000 ff77 	bl	80028dc <HAL_Delay>
	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,fabs(round(LeftPidOut)));
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <main+0x130>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fdb0 	bl	8000558 <__aeabi_f2d>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	ec43 2b10 	vmov	d0, r2, r3
 8001a00:	f00b fac2 	bl	800cf88 <round>
 8001a04:	ec53 2b10 	vmov	r2, r3, d0
 8001a08:	4690      	mov	r8, r2
 8001a0a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <main+0x120>)
 8001a10:	681e      	ldr	r6, [r3, #0]
 8001a12:	4640      	mov	r0, r8
 8001a14:	4649      	mov	r1, r9
 8001a16:	f7ff f8cf 	bl	8000bb8 <__aeabi_d2uiz>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	63f3      	str	r3, [r6, #60]	; 0x3c
	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,fabs(round(RightPidOut)));
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <main+0x13c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd98 	bl	8000558 <__aeabi_f2d>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	ec43 2b10 	vmov	d0, r2, r3
 8001a30:	f00b faaa 	bl	800cf88 <round>
 8001a34:	ec53 2b10 	vmov	r2, r3, d0
 8001a38:	4614      	mov	r4, r2
 8001a3a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <main+0x120>)
 8001a40:	681e      	ldr	r6, [r3, #0]
 8001a42:	4620      	mov	r0, r4
 8001a44:	4629      	mov	r1, r5
 8001a46:	f7ff f8b7 	bl	8000bb8 <__aeabi_d2uiz>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6373      	str	r3, [r6, #52]	; 0x34
	current_tick=HAL_GetTick();
 8001a4e:	f000 ff39 	bl	80028c4 <HAL_GetTick>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <main+0x148>)
 8001a58:	601a      	str	r2, [r3, #0]
	diff_tick=current_tick-previous_tick;
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <main+0x148>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <main+0x12c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <main+0x14c>)
 8001a66:	6013      	str	r3, [r2, #0]
    MX_USB_HOST_Process();
 8001a68:	e7ac      	b.n	80019c4 <main+0x74>
 8001a6a:	bf00      	nop
 8001a6c:	20000390 	.word	0x20000390
 8001a70:	200002f0 	.word	0x200002f0
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	20000254 	.word	0x20000254
 8001a80:	20000298 	.word	0x20000298
 8001a84:	20000278 	.word	0x20000278
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	200003d8 	.word	0x200003d8
 8001a90:	20000290 	.word	0x20000290
 8001a94:	20000004 	.word	0x20000004
 8001a98:	2000025c 	.word	0x2000025c
 8001a9c:	20000268 	.word	0x20000268

08001aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b094      	sub	sp, #80	; 0x50
 8001aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa6:	f107 0320 	add.w	r3, r7, #32
 8001aaa:	2230      	movs	r2, #48	; 0x30
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f008 fd3c 	bl	800a52c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <SystemClock_Config+0xc8>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	4a26      	ldr	r2, [pc, #152]	; (8001b68 <SystemClock_Config+0xc8>)
 8001ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <SystemClock_Config+0xc8>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <SystemClock_Config+0xcc>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a20      	ldr	r2, [pc, #128]	; (8001b6c <SystemClock_Config+0xcc>)
 8001aea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <SystemClock_Config+0xcc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001afc:	2301      	movs	r3, #1
 8001afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b06:	2302      	movs	r3, #2
 8001b08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b10:	2304      	movs	r3, #4
 8001b12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001b14:	23c0      	movs	r3, #192	; 0xc0
 8001b16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b18:	2304      	movs	r3, #4
 8001b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b20:	f107 0320 	add.w	r3, r7, #32
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 fbcb 	bl	80052c0 <HAL_RCC_OscConfig>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b30:	f000 faf2 	bl	8002118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b34:	230f      	movs	r3, #15
 8001b36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	2103      	movs	r1, #3
 8001b50:	4618      	mov	r0, r3
 8001b52:	f003 fe2d 	bl	80057b0 <HAL_RCC_ClockConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b5c:	f000 fadc 	bl	8002118 <Error_Handler>
  }
}
 8001b60:	bf00      	nop
 8001b62:	3750      	adds	r7, #80	; 0x50
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40007000 	.word	0x40007000

08001b70 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b76:	463b      	mov	r3, r7
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
 8001b84:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b86:	2301      	movs	r3, #1
 8001b88:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001b8a:	23c8      	movs	r3, #200	; 0xc8
 8001b8c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001b8e:	2305      	movs	r3, #5
 8001b90:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b92:	2302      	movs	r3, #2
 8001b94:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b96:	463b      	mov	r3, r7
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f004 f815 	bl	8005bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001ba4:	f000 fab8 	bl	8002118 <Error_Handler>
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001bb6:	4a13      	ldr	r2, [pc, #76]	; (8001c04 <MX_I2C1_Init+0x54>)
 8001bb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001bbc:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <MX_I2C1_Init+0x58>)
 8001bbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_I2C1_Init+0x50>)
 8001bee:	f002 fd83 	bl	80046f8 <HAL_I2C_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bf8:	f000 fa8e 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	2000029c 	.word	0x2000029c
 8001c04:	40005400 	.word	0x40005400
 8001c08:	000186a0 	.word	0x000186a0

08001c0c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_I2S2_Init+0x50>)
 8001c12:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <MX_I2S2_Init+0x54>)
 8001c14:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_I2S2_Init+0x50>)
 8001c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_I2S2_Init+0x50>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <MX_I2S2_Init+0x50>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_I2S2_Init+0x50>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <MX_I2S2_Init+0x50>)
 8001c32:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <MX_I2S2_Init+0x58>)
 8001c34:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_I2S2_Init+0x50>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <MX_I2S2_Init+0x50>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_I2S2_Init+0x50>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_I2S2_Init+0x50>)
 8001c4a:	f002 fe99 	bl	8004980 <HAL_I2S_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001c54:	f000 fa60 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200003dc 	.word	0x200003dc
 8001c60:	40003800 	.word	0x40003800
 8001c64:	00017700 	.word	0x00017700

08001c68 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001c6e:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <MX_I2S3_Init+0x58>)
 8001c70:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c78:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001c90:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <MX_I2S3_Init+0x5c>)
 8001c92:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_I2S3_Init+0x54>)
 8001ca8:	f002 fe6a 	bl	8004980 <HAL_I2S_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001cb2:	f000 fa31 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000424 	.word	0x20000424
 8001cc0:	40003c00 	.word	0x40003c00
 8001cc4:	00017700 	.word	0x00017700

08001cc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001cce:	4a18      	ldr	r2, [pc, #96]	; (8001d30 <MX_SPI1_Init+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001cd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001d14:	220a      	movs	r2, #10
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001d1a:	f004 f8a5 	bl	8005e68 <HAL_SPI_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d24:	f000 f9f8 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000338 	.word	0x20000338
 8001d30:	40013000 	.word	0x40013000

08001d34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3a:	f107 0308 	add.w	r3, r7, #8
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d48:	463b      	mov	r3, r7
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001d52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001d5a:	222f      	movs	r2, #47	; 0x2f
 8001d5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001d64:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001d66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d78:	4813      	ldr	r0, [pc, #76]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001d7a:	f004 f8fe 	bl	8005f7a <HAL_TIM_Base_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d84:	f000 f9c8 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d8e:	f107 0308 	add.w	r3, r7, #8
 8001d92:	4619      	mov	r1, r3
 8001d94:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001d96:	f004 fc75 	bl	8006684 <HAL_TIM_ConfigClockSource>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001da0:	f000 f9ba 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dac:	463b      	mov	r3, r7
 8001dae:	4619      	mov	r1, r3
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_TIM2_Init+0x94>)
 8001db2:	f005 f823 	bl	8006dfc <HAL_TIMEx_MasterConfigSynchronization>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001dbc:	f000 f9ac 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000390 	.word	0x20000390

08001dcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08e      	sub	sp, #56	; 0x38
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de0:	f107 0320 	add.w	r3, r7, #32
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dfc:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <MX_TIM3_Init+0xfc>)
 8001dfe:	4a33      	ldr	r2, [pc, #204]	; (8001ecc <MX_TIM3_Init+0x100>)
 8001e00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 8001e02:	4b31      	ldr	r3, [pc, #196]	; (8001ec8 <MX_TIM3_Init+0xfc>)
 8001e04:	220b      	movs	r2, #11
 8001e06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <MX_TIM3_Init+0xfc>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 8001e0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <MX_TIM3_Init+0xfc>)
 8001e10:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001e14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e16:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <MX_TIM3_Init+0xfc>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <MX_TIM3_Init+0xfc>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e22:	4829      	ldr	r0, [pc, #164]	; (8001ec8 <MX_TIM3_Init+0xfc>)
 8001e24:	f004 f8a9 	bl	8005f7a <HAL_TIM_Base_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001e2e:	f000 f973 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4822      	ldr	r0, [pc, #136]	; (8001ec8 <MX_TIM3_Init+0xfc>)
 8001e40:	f004 fc20 	bl	8006684 <HAL_TIM_ConfigClockSource>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e4a:	f000 f965 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e4e:	481e      	ldr	r0, [pc, #120]	; (8001ec8 <MX_TIM3_Init+0xfc>)
 8001e50:	f004 f944 	bl	80060dc <HAL_TIM_PWM_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e5a:	f000 f95d 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e66:	f107 0320 	add.w	r3, r7, #32
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4816      	ldr	r0, [pc, #88]	; (8001ec8 <MX_TIM3_Init+0xfc>)
 8001e6e:	f004 ffc5 	bl	8006dfc <HAL_TIMEx_MasterConfigSynchronization>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e78:	f000 f94e 	bl	8002118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e7c:	2360      	movs	r3, #96	; 0x60
 8001e7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	2200      	movs	r2, #0
 8001e90:	4619      	mov	r1, r3
 8001e92:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <MX_TIM3_Init+0xfc>)
 8001e94:	f004 fb34 	bl	8006500 <HAL_TIM_PWM_ConfigChannel>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e9e:	f000 f93b 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4807      	ldr	r0, [pc, #28]	; (8001ec8 <MX_TIM3_Init+0xfc>)
 8001eaa:	f004 fb29 	bl	8006500 <HAL_TIM_PWM_ConfigChannel>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001eb4:	f000 f930 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <MX_TIM3_Init+0xfc>)
 8001eba:	f000 fafd 	bl	80024b8 <HAL_TIM_MspPostInit>

}
 8001ebe:	bf00      	nop
 8001ec0:	3738      	adds	r7, #56	; 0x38
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200002f0 	.word	0x200002f0
 8001ecc:	40000400 	.word	0x40000400

08001ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	; 0x30
 8001ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	4b85      	ldr	r3, [pc, #532]	; (8002100 <MX_GPIO_Init+0x230>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a84      	ldr	r2, [pc, #528]	; (8002100 <MX_GPIO_Init+0x230>)
 8001ef0:	f043 0310 	orr.w	r3, r3, #16
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b82      	ldr	r3, [pc, #520]	; (8002100 <MX_GPIO_Init+0x230>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	61bb      	str	r3, [r7, #24]
 8001f00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	4b7e      	ldr	r3, [pc, #504]	; (8002100 <MX_GPIO_Init+0x230>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a7d      	ldr	r2, [pc, #500]	; (8002100 <MX_GPIO_Init+0x230>)
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b7b      	ldr	r3, [pc, #492]	; (8002100 <MX_GPIO_Init+0x230>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	4b77      	ldr	r3, [pc, #476]	; (8002100 <MX_GPIO_Init+0x230>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a76      	ldr	r2, [pc, #472]	; (8002100 <MX_GPIO_Init+0x230>)
 8001f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b74      	ldr	r3, [pc, #464]	; (8002100 <MX_GPIO_Init+0x230>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b70      	ldr	r3, [pc, #448]	; (8002100 <MX_GPIO_Init+0x230>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a6f      	ldr	r2, [pc, #444]	; (8002100 <MX_GPIO_Init+0x230>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b6d      	ldr	r3, [pc, #436]	; (8002100 <MX_GPIO_Init+0x230>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	4b69      	ldr	r3, [pc, #420]	; (8002100 <MX_GPIO_Init+0x230>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a68      	ldr	r2, [pc, #416]	; (8002100 <MX_GPIO_Init+0x230>)
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b66      	ldr	r3, [pc, #408]	; (8002100 <MX_GPIO_Init+0x230>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	4b62      	ldr	r3, [pc, #392]	; (8002100 <MX_GPIO_Init+0x230>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a61      	ldr	r2, [pc, #388]	; (8002100 <MX_GPIO_Init+0x230>)
 8001f7c:	f043 0308 	orr.w	r3, r3, #8
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b5f      	ldr	r3, [pc, #380]	; (8002100 <MX_GPIO_Init+0x230>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 7142 	mov.w	r1, #776	; 0x308
 8001f94:	485b      	ldr	r0, [pc, #364]	; (8002104 <MX_GPIO_Init+0x234>)
 8001f96:	f000 ff73 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	485a      	ldr	r0, [pc, #360]	; (8002108 <MX_GPIO_Init+0x238>)
 8001fa0:	f000 ff6e 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2106      	movs	r1, #6
 8001fa8:	4858      	ldr	r0, [pc, #352]	; (800210c <MX_GPIO_Init+0x23c>)
 8001faa:	f000 ff69 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001fb4:	4856      	ldr	r0, [pc, #344]	; (8002110 <MX_GPIO_Init+0x240>)
 8001fb6:	f000 ff63 	bl	8002e80 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001fba:	2304      	movs	r3, #4
 8001fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	484d      	ldr	r0, [pc, #308]	; (8002104 <MX_GPIO_Init+0x234>)
 8001fce:	f000 fdbb 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|IN3_Pin|IN4_Pin;
 8001fd2:	f44f 7342 	mov.w	r3, #776	; 0x308
 8001fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4846      	ldr	r0, [pc, #280]	; (8002104 <MX_GPIO_Init+0x234>)
 8001fec:	f000 fdac 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001ff0:	2332      	movs	r3, #50	; 0x32
 8001ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ff4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4619      	mov	r1, r3
 8002004:	483f      	ldr	r0, [pc, #252]	; (8002104 <MX_GPIO_Init+0x234>)
 8002006:	f000 fd9f 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800200a:	2301      	movs	r3, #1
 800200c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2301      	movs	r3, #1
 8002010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	4839      	ldr	r0, [pc, #228]	; (8002108 <MX_GPIO_Init+0x238>)
 8002022:	f000 fd91 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002026:	2301      	movs	r3, #1
 8002028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800202a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800202e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	4836      	ldr	r0, [pc, #216]	; (8002114 <MX_GPIO_Init+0x244>)
 800203c:	f000 fd84 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8002040:	2306      	movs	r3, #6
 8002042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002044:	2301      	movs	r3, #1
 8002046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	482d      	ldr	r0, [pc, #180]	; (800210c <MX_GPIO_Init+0x23c>)
 8002058:	f000 fd76 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_ENCODER_A_Pin LEFT_ENCODER_B_Pin RIGHT_ENCODER_A_Pin RIGHT_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = LEFT_ENCODER_A_Pin|LEFT_ENCODER_B_Pin|RIGHT_ENCODER_A_Pin|RIGHT_ENCODER_B_Pin;
 800205c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002062:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	4619      	mov	r1, r3
 8002072:	4824      	ldr	r0, [pc, #144]	; (8002104 <MX_GPIO_Init+0x234>)
 8002074:	f000 fd68 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800207c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800207e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002088:	f107 031c 	add.w	r3, r7, #28
 800208c:	4619      	mov	r1, r3
 800208e:	481f      	ldr	r0, [pc, #124]	; (800210c <MX_GPIO_Init+0x23c>)
 8002090:	f000 fd5a 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800209a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800209e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	4619      	mov	r1, r3
 80020aa:	4819      	ldr	r0, [pc, #100]	; (8002110 <MX_GPIO_Init+0x240>)
 80020ac:	f000 fd4c 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80020b0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80020b4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b6:	2301      	movs	r3, #1
 80020b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	4619      	mov	r1, r3
 80020c8:	4811      	ldr	r0, [pc, #68]	; (8002110 <MX_GPIO_Init+0x240>)
 80020ca:	f000 fd3d 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80020ce:	2320      	movs	r3, #32
 80020d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	4619      	mov	r1, r3
 80020e0:	480b      	ldr	r0, [pc, #44]	; (8002110 <MX_GPIO_Init+0x240>)
 80020e2:	f000 fd31 	bl	8002b48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	2028      	movs	r0, #40	; 0x28
 80020ec:	f000 fcf5 	bl	8002ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020f0:	2028      	movs	r0, #40	; 0x28
 80020f2:	f000 fd0e 	bl	8002b12 <HAL_NVIC_EnableIRQ>

}
 80020f6:	bf00      	nop
 80020f8:	3730      	adds	r7, #48	; 0x30
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	40021000 	.word	0x40021000
 8002108:	40020800 	.word	0x40020800
 800210c:	40020400 	.word	0x40020400
 8002110:	40020c00 	.word	0x40020c00
 8002114:	40020000 	.word	0x40020000

08002118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800211c:	b672      	cpsid	i
}
 800211e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002120:	e7fe      	b.n	8002120 <Error_Handler+0x8>
	...

08002124 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_MspInit+0x4c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <HAL_MspInit+0x4c>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <HAL_MspInit+0x4c>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_MspInit+0x4c>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a08      	ldr	r2, [pc, #32]	; (8002170 <HAL_MspInit+0x4c>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_MspInit+0x4c>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002162:	2007      	movs	r0, #7
 8002164:	f000 fcae 	bl	8002ac4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40023800 	.word	0x40023800

08002174 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a19      	ldr	r2, [pc, #100]	; (80021f8 <HAL_I2C_MspInit+0x84>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d12c      	bne.n	80021f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	4b18      	ldr	r3, [pc, #96]	; (80021fc <HAL_I2C_MspInit+0x88>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a17      	ldr	r2, [pc, #92]	; (80021fc <HAL_I2C_MspInit+0x88>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <HAL_I2C_MspInit+0x88>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80021b2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80021b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021b8:	2312      	movs	r3, #18
 80021ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021bc:	2301      	movs	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021c4:	2304      	movs	r3, #4
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	4619      	mov	r1, r3
 80021ce:	480c      	ldr	r0, [pc, #48]	; (8002200 <HAL_I2C_MspInit+0x8c>)
 80021d0:	f000 fcba 	bl	8002b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <HAL_I2C_MspInit+0x88>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	4a07      	ldr	r2, [pc, #28]	; (80021fc <HAL_I2C_MspInit+0x88>)
 80021de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021e2:	6413      	str	r3, [r2, #64]	; 0x40
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_I2C_MspInit+0x88>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021f0:	bf00      	nop
 80021f2:	3728      	adds	r7, #40	; 0x28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40005400 	.word	0x40005400
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020400 	.word	0x40020400

08002204 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08e      	sub	sp, #56	; 0x38
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a59      	ldr	r2, [pc, #356]	; (8002388 <HAL_I2S_MspInit+0x184>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d15b      	bne.n	80022de <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
 800222a:	4b58      	ldr	r3, [pc, #352]	; (800238c <HAL_I2S_MspInit+0x188>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a57      	ldr	r2, [pc, #348]	; (800238c <HAL_I2S_MspInit+0x188>)
 8002230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b55      	ldr	r3, [pc, #340]	; (800238c <HAL_I2S_MspInit+0x188>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223e:	623b      	str	r3, [r7, #32]
 8002240:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	4b51      	ldr	r3, [pc, #324]	; (800238c <HAL_I2S_MspInit+0x188>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a50      	ldr	r2, [pc, #320]	; (800238c <HAL_I2S_MspInit+0x188>)
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b4e      	ldr	r3, [pc, #312]	; (800238c <HAL_I2S_MspInit+0x188>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	61fb      	str	r3, [r7, #28]
 800225c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	4b4a      	ldr	r3, [pc, #296]	; (800238c <HAL_I2S_MspInit+0x188>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a49      	ldr	r2, [pc, #292]	; (800238c <HAL_I2S_MspInit+0x188>)
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_I2S_MspInit+0x188>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	61bb      	str	r3, [r7, #24]
 8002278:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800227a:	2304      	movs	r3, #4
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800228a:	2306      	movs	r3, #6
 800228c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800228e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002292:	4619      	mov	r1, r3
 8002294:	483e      	ldr	r0, [pc, #248]	; (8002390 <HAL_I2S_MspInit+0x18c>)
 8002296:	f000 fc57 	bl	8002b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800229a:	2308      	movs	r3, #8
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022aa:	2305      	movs	r3, #5
 80022ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80022ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b2:	4619      	mov	r1, r3
 80022b4:	4836      	ldr	r0, [pc, #216]	; (8002390 <HAL_I2S_MspInit+0x18c>)
 80022b6:	f000 fc47 	bl	8002b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80022ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022cc:	2305      	movs	r3, #5
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d4:	4619      	mov	r1, r3
 80022d6:	482f      	ldr	r0, [pc, #188]	; (8002394 <HAL_I2S_MspInit+0x190>)
 80022d8:	f000 fc36 	bl	8002b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80022dc:	e04f      	b.n	800237e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2d      	ldr	r2, [pc, #180]	; (8002398 <HAL_I2S_MspInit+0x194>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d14a      	bne.n	800237e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_I2S_MspInit+0x188>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	4a26      	ldr	r2, [pc, #152]	; (800238c <HAL_I2S_MspInit+0x188>)
 80022f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f6:	6413      	str	r3, [r2, #64]	; 0x40
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_I2S_MspInit+0x188>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002304:	2300      	movs	r3, #0
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	4b20      	ldr	r3, [pc, #128]	; (800238c <HAL_I2S_MspInit+0x188>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	4a1f      	ldr	r2, [pc, #124]	; (800238c <HAL_I2S_MspInit+0x188>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6313      	str	r3, [r2, #48]	; 0x30
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_I2S_MspInit+0x188>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_I2S_MspInit+0x188>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	4a18      	ldr	r2, [pc, #96]	; (800238c <HAL_I2S_MspInit+0x188>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6313      	str	r3, [r2, #48]	; 0x30
 8002330:	4b16      	ldr	r3, [pc, #88]	; (800238c <HAL_I2S_MspInit+0x188>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800233c:	2310      	movs	r3, #16
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800234c:	2306      	movs	r3, #6
 800234e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002354:	4619      	mov	r1, r3
 8002356:	4811      	ldr	r0, [pc, #68]	; (800239c <HAL_I2S_MspInit+0x198>)
 8002358:	f000 fbf6 	bl	8002b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800235c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800236e:	2306      	movs	r3, #6
 8002370:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002376:	4619      	mov	r1, r3
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <HAL_I2S_MspInit+0x18c>)
 800237a:	f000 fbe5 	bl	8002b48 <HAL_GPIO_Init>
}
 800237e:	bf00      	nop
 8002380:	3738      	adds	r7, #56	; 0x38
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40003800 	.word	0x40003800
 800238c:	40023800 	.word	0x40023800
 8002390:	40020800 	.word	0x40020800
 8002394:	40020400 	.word	0x40020400
 8002398:	40003c00 	.word	0x40003c00
 800239c:	40020000 	.word	0x40020000

080023a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a19      	ldr	r2, [pc, #100]	; (8002424 <HAL_SPI_MspInit+0x84>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d12b      	bne.n	800241a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <HAL_SPI_MspInit+0x88>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	4a17      	ldr	r2, [pc, #92]	; (8002428 <HAL_SPI_MspInit+0x88>)
 80023cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023d0:	6453      	str	r3, [r2, #68]	; 0x44
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <HAL_SPI_MspInit+0x88>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_SPI_MspInit+0x88>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a10      	ldr	r2, [pc, #64]	; (8002428 <HAL_SPI_MspInit+0x88>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <HAL_SPI_MspInit+0x88>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80023fa:	23e0      	movs	r3, #224	; 0xe0
 80023fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002406:	2303      	movs	r3, #3
 8002408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800240a:	2305      	movs	r3, #5
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4619      	mov	r1, r3
 8002414:	4805      	ldr	r0, [pc, #20]	; (800242c <HAL_SPI_MspInit+0x8c>)
 8002416:	f000 fb97 	bl	8002b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800241a:	bf00      	nop
 800241c:	3728      	adds	r7, #40	; 0x28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40013000 	.word	0x40013000
 8002428:	40023800 	.word	0x40023800
 800242c:	40020000 	.word	0x40020000

08002430 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002440:	d116      	bne.n	8002470 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <HAL_TIM_Base_MspInit+0x80>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <HAL_TIM_Base_MspInit+0x80>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6413      	str	r3, [r2, #64]	; 0x40
 8002452:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <HAL_TIM_Base_MspInit+0x80>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800245e:	2202      	movs	r2, #2
 8002460:	2100      	movs	r1, #0
 8002462:	201c      	movs	r0, #28
 8002464:	f000 fb39 	bl	8002ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002468:	201c      	movs	r0, #28
 800246a:	f000 fb52 	bl	8002b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800246e:	e01a      	b.n	80024a6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0f      	ldr	r2, [pc, #60]	; (80024b4 <HAL_TIM_Base_MspInit+0x84>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d115      	bne.n	80024a6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <HAL_TIM_Base_MspInit+0x80>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <HAL_TIM_Base_MspInit+0x80>)
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_TIM_Base_MspInit+0x80>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 3);
 8002496:	2203      	movs	r2, #3
 8002498:	2100      	movs	r1, #0
 800249a:	201d      	movs	r0, #29
 800249c:	f000 fb1d 	bl	8002ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024a0:	201d      	movs	r0, #29
 80024a2:	f000 fb36 	bl	8002b12 <HAL_NVIC_EnableIRQ>
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40000400 	.word	0x40000400

080024b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a21      	ldr	r2, [pc, #132]	; (800255c <HAL_TIM_MspPostInit+0xa4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d13b      	bne.n	8002552 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <HAL_TIM_MspPostInit+0xa8>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a1f      	ldr	r2, [pc, #124]	; (8002560 <HAL_TIM_MspPostInit+0xa8>)
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_TIM_MspPostInit+0xa8>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_TIM_MspPostInit+0xa8>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a18      	ldr	r2, [pc, #96]	; (8002560 <HAL_TIM_MspPostInit+0xa8>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <HAL_TIM_MspPostInit+0xa8>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002512:	2301      	movs	r3, #1
 8002514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002522:	2302      	movs	r3, #2
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002526:	f107 0314 	add.w	r3, r7, #20
 800252a:	4619      	mov	r1, r3
 800252c:	480d      	ldr	r0, [pc, #52]	; (8002564 <HAL_TIM_MspPostInit+0xac>)
 800252e:	f000 fb0b 	bl	8002b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002532:	2340      	movs	r3, #64	; 0x40
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	2300      	movs	r3, #0
 8002540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002542:	2302      	movs	r3, #2
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4619      	mov	r1, r3
 800254c:	4806      	ldr	r0, [pc, #24]	; (8002568 <HAL_TIM_MspPostInit+0xb0>)
 800254e:	f000 fafb 	bl	8002b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002552:	bf00      	nop
 8002554:	3728      	adds	r7, #40	; 0x28
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40000400 	.word	0x40000400
 8002560:	40023800 	.word	0x40023800
 8002564:	40020400 	.word	0x40020400
 8002568:	40020800 	.word	0x40020800

0800256c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <NMI_Handler+0x4>

08002572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002576:	e7fe      	b.n	8002576 <HardFault_Handler+0x4>

08002578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800257c:	e7fe      	b.n	800257c <MemManage_Handler+0x4>

0800257e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002582:	e7fe      	b.n	8002582 <BusFault_Handler+0x4>

08002584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002588:	e7fe      	b.n	8002588 <UsageFault_Handler+0x4>

0800258a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b8:	f000 f970 	bl	800289c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}

080025c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025c4:	4802      	ldr	r0, [pc, #8]	; (80025d0 <TIM2_IRQHandler+0x10>)
 80025c6:	f003 fe93 	bl	80062f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000390 	.word	0x20000390

080025d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025d8:	4802      	ldr	r0, [pc, #8]	; (80025e4 <TIM3_IRQHandler+0x10>)
 80025da:	f003 fe89 	bl	80062f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	200002f0 	.word	0x200002f0

080025e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_ENCODER_A_Pin);
 80025ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025f0:	f000 fc60 	bl	8002eb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_ENCODER_B_Pin);
 80025f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80025f8:	f000 fc5c 	bl	8002eb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_ENCODER_A_Pin);
 80025fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002600:	f000 fc58 	bl	8002eb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_ENCODER_B_Pin);
 8002604:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002608:	f000 fc54 	bl	8002eb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800260c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002610:	f000 fc50 	bl	8002eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}

08002618 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <OTG_FS_IRQHandler+0x10>)
 800261e:	f000 fecb 	bl	80033b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000848 	.word	0x20000848

0800262c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
	return 1;
 8002630:	2301      	movs	r3, #1
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <_kill>:

int _kill(int pid, int sig)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002646:	f007 ff37 	bl	800a4b8 <__errno>
 800264a:	4603      	mov	r3, r0
 800264c:	2216      	movs	r2, #22
 800264e:	601a      	str	r2, [r3, #0]
	return -1;
 8002650:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <_exit>:

void _exit (int status)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ffe7 	bl	800263c <_kill>
	while (1) {}		/* Make sure we hang here */
 800266e:	e7fe      	b.n	800266e <_exit+0x12>

08002670 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	e00a      	b.n	8002698 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002682:	f3af 8000 	nop.w
 8002686:	4601      	mov	r1, r0
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	60ba      	str	r2, [r7, #8]
 800268e:	b2ca      	uxtb	r2, r1
 8002690:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3301      	adds	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	dbf0      	blt.n	8002682 <_read+0x12>
	}

return len;
 80026a0:	687b      	ldr	r3, [r7, #4]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <_close>:
	}
	return len;
}

int _close(int file)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
	return -1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026d2:	605a      	str	r2, [r3, #4]
	return 0;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <_isatty>:

int _isatty(int file)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
	return 1;
 80026ea:	2301      	movs	r3, #1
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
	return 0;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800271c:	4a14      	ldr	r2, [pc, #80]	; (8002770 <_sbrk+0x5c>)
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <_sbrk+0x60>)
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <_sbrk+0x64>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <_sbrk+0x64>)
 8002732:	4a12      	ldr	r2, [pc, #72]	; (800277c <_sbrk+0x68>)
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <_sbrk+0x64>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	429a      	cmp	r2, r3
 8002742:	d207      	bcs.n	8002754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002744:	f007 feb8 	bl	800a4b8 <__errno>
 8002748:	4603      	mov	r3, r0
 800274a:	220c      	movs	r2, #12
 800274c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
 8002752:	e009      	b.n	8002768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <_sbrk+0x64>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <_sbrk+0x64>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	4a05      	ldr	r2, [pc, #20]	; (8002778 <_sbrk+0x64>)
 8002764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002766:	68fb      	ldr	r3, [r7, #12]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20020000 	.word	0x20020000
 8002774:	00000400 	.word	0x00000400
 8002778:	2000022c 	.word	0x2000022c
 800277c:	20000b50 	.word	0x20000b50

08002780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <SystemInit+0x20>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <SystemInit+0x20>)
 800278c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027a8:	480d      	ldr	r0, [pc, #52]	; (80027e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027aa:	490e      	ldr	r1, [pc, #56]	; (80027e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027ac:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b0:	e002      	b.n	80027b8 <LoopCopyDataInit>

080027b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027b6:	3304      	adds	r3, #4

080027b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027bc:	d3f9      	bcc.n	80027b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027be:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027c0:	4c0b      	ldr	r4, [pc, #44]	; (80027f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c4:	e001      	b.n	80027ca <LoopFillZerobss>

080027c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c8:	3204      	adds	r2, #4

080027ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027cc:	d3fb      	bcc.n	80027c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027ce:	f7ff ffd7 	bl	8002780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027d2:	f007 fe77 	bl	800a4c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027d6:	f7ff f8bb 	bl	8001950 <main>
  bx  lr    
 80027da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e4:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80027e8:	0800d43c 	.word	0x0800d43c
  ldr r2, =_sbss
 80027ec:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80027f0:	20000b4c 	.word	0x20000b4c

080027f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027f4:	e7fe      	b.n	80027f4 <ADC_IRQHandler>
	...

080027f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <HAL_Init+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <HAL_Init+0x40>)
 8002802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_Init+0x40>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_Init+0x40>)
 800280e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_Init+0x40>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a07      	ldr	r2, [pc, #28]	; (8002838 <HAL_Init+0x40>)
 800281a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002820:	2003      	movs	r0, #3
 8002822:	f000 f94f 	bl	8002ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002826:	2000      	movs	r0, #0
 8002828:	f000 f808 	bl	800283c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800282c:	f7ff fc7a 	bl	8002124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023c00 	.word	0x40023c00

0800283c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_InitTick+0x54>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_InitTick+0x58>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002852:	fbb3 f3f1 	udiv	r3, r3, r1
 8002856:	fbb2 f3f3 	udiv	r3, r2, r3
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f967 	bl	8002b2e <HAL_SYSTICK_Config>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e00e      	b.n	8002888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b0f      	cmp	r3, #15
 800286e:	d80a      	bhi.n	8002886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002870:	2200      	movs	r2, #0
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	f04f 30ff 	mov.w	r0, #4294967295
 8002878:	f000 f92f 	bl	8002ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800287c:	4a06      	ldr	r2, [pc, #24]	; (8002898 <HAL_InitTick+0x5c>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	e000      	b.n	8002888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000008 	.word	0x20000008
 8002894:	20000010 	.word	0x20000010
 8002898:	2000000c 	.word	0x2000000c

0800289c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_IncTick+0x20>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_IncTick+0x24>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <HAL_IncTick+0x24>)
 80028ae:	6013      	str	r3, [r2, #0]
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	20000010 	.word	0x20000010
 80028c0:	2000046c 	.word	0x2000046c

080028c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return uwTick;
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <HAL_GetTick+0x14>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	2000046c 	.word	0x2000046c

080028dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e4:	f7ff ffee 	bl	80028c4 <HAL_GetTick>
 80028e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f4:	d005      	beq.n	8002902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_Delay+0x44>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002902:	bf00      	nop
 8002904:	f7ff ffde 	bl	80028c4 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	429a      	cmp	r2, r3
 8002912:	d8f7      	bhi.n	8002904 <HAL_Delay+0x28>
  {
  }
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000010 	.word	0x20000010

08002924 <__NVIC_SetPriorityGrouping>:
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <__NVIC_SetPriorityGrouping+0x44>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002940:	4013      	ands	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800294c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002956:	4a04      	ldr	r2, [pc, #16]	; (8002968 <__NVIC_SetPriorityGrouping+0x44>)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	60d3      	str	r3, [r2, #12]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <__NVIC_GetPriorityGrouping>:
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <__NVIC_GetPriorityGrouping+0x18>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	f003 0307 	and.w	r3, r3, #7
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <__NVIC_EnableIRQ>:
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	2b00      	cmp	r3, #0
 8002998:	db0b      	blt.n	80029b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	f003 021f 	and.w	r2, r3, #31
 80029a0:	4907      	ldr	r1, [pc, #28]	; (80029c0 <__NVIC_EnableIRQ+0x38>)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	2001      	movs	r0, #1
 80029aa:	fa00 f202 	lsl.w	r2, r0, r2
 80029ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	e000e100 	.word	0xe000e100

080029c4 <__NVIC_SetPriority>:
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	db0a      	blt.n	80029ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	490c      	ldr	r1, [pc, #48]	; (8002a10 <__NVIC_SetPriority+0x4c>)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	0112      	lsls	r2, r2, #4
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	440b      	add	r3, r1
 80029e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029ec:	e00a      	b.n	8002a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	4908      	ldr	r1, [pc, #32]	; (8002a14 <__NVIC_SetPriority+0x50>)
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	3b04      	subs	r3, #4
 80029fc:	0112      	lsls	r2, r2, #4
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	440b      	add	r3, r1
 8002a02:	761a      	strb	r2, [r3, #24]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000e100 	.word	0xe000e100
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <NVIC_EncodePriority>:
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	; 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f1c3 0307 	rsb	r3, r3, #7
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	bf28      	it	cs
 8002a36:	2304      	movcs	r3, #4
 8002a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d902      	bls.n	8002a48 <NVIC_EncodePriority+0x30>
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3b03      	subs	r3, #3
 8002a46:	e000      	b.n	8002a4a <NVIC_EncodePriority+0x32>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43da      	mvns	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a60:	f04f 31ff 	mov.w	r1, #4294967295
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6a:	43d9      	mvns	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	4313      	orrs	r3, r2
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3724      	adds	r7, #36	; 0x24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <SysTick_Config>:
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a90:	d301      	bcc.n	8002a96 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002a92:	2301      	movs	r3, #1
 8002a94:	e00f      	b.n	8002ab6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a96:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <SysTick_Config+0x40>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a9e:	210f      	movs	r1, #15
 8002aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa4:	f7ff ff8e 	bl	80029c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <SysTick_Config+0x40>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aae:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <SysTick_Config+0x40>)
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	e000e010 	.word	0xe000e010

08002ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff ff29 	bl	8002924 <__NVIC_SetPriorityGrouping>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b086      	sub	sp, #24
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aec:	f7ff ff3e 	bl	800296c <__NVIC_GetPriorityGrouping>
 8002af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	6978      	ldr	r0, [r7, #20]
 8002af8:	f7ff ff8e 	bl	8002a18 <NVIC_EncodePriority>
 8002afc:	4602      	mov	r2, r0
 8002afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b02:	4611      	mov	r1, r2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff5d 	bl	80029c4 <__NVIC_SetPriority>
}
 8002b0a:	bf00      	nop
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ff31 	bl	8002988 <__NVIC_EnableIRQ>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff ffa2 	bl	8002a80 <SysTick_Config>
 8002b3c:	4603      	mov	r3, r0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b089      	sub	sp, #36	; 0x24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	e159      	b.n	8002e18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b64:	2201      	movs	r2, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	f040 8148 	bne.w	8002e12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d005      	beq.n	8002b9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d130      	bne.n	8002bfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 0201 	and.w	r2, r3, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d017      	beq.n	8002c38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2203      	movs	r2, #3
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d123      	bne.n	8002c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	08da      	lsrs	r2, r3, #3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3208      	adds	r2, #8
 8002c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	220f      	movs	r2, #15
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	08da      	lsrs	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3208      	adds	r2, #8
 8002c86:	69b9      	ldr	r1, [r7, #24]
 8002c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0203 	and.w	r2, r3, #3
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80a2 	beq.w	8002e12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	4b57      	ldr	r3, [pc, #348]	; (8002e30 <HAL_GPIO_Init+0x2e8>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	4a56      	ldr	r2, [pc, #344]	; (8002e30 <HAL_GPIO_Init+0x2e8>)
 8002cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cde:	4b54      	ldr	r3, [pc, #336]	; (8002e30 <HAL_GPIO_Init+0x2e8>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cea:	4a52      	ldr	r2, [pc, #328]	; (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	220f      	movs	r2, #15
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a49      	ldr	r2, [pc, #292]	; (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d019      	beq.n	8002d4a <HAL_GPIO_Init+0x202>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a48      	ldr	r2, [pc, #288]	; (8002e3c <HAL_GPIO_Init+0x2f4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_GPIO_Init+0x1fe>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a47      	ldr	r2, [pc, #284]	; (8002e40 <HAL_GPIO_Init+0x2f8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00d      	beq.n	8002d42 <HAL_GPIO_Init+0x1fa>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a46      	ldr	r2, [pc, #280]	; (8002e44 <HAL_GPIO_Init+0x2fc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <HAL_GPIO_Init+0x1f6>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a45      	ldr	r2, [pc, #276]	; (8002e48 <HAL_GPIO_Init+0x300>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_GPIO_Init+0x1f2>
 8002d36:	2304      	movs	r3, #4
 8002d38:	e008      	b.n	8002d4c <HAL_GPIO_Init+0x204>
 8002d3a:	2307      	movs	r3, #7
 8002d3c:	e006      	b.n	8002d4c <HAL_GPIO_Init+0x204>
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e004      	b.n	8002d4c <HAL_GPIO_Init+0x204>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e002      	b.n	8002d4c <HAL_GPIO_Init+0x204>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_GPIO_Init+0x204>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	f002 0203 	and.w	r2, r2, #3
 8002d52:	0092      	lsls	r2, r2, #2
 8002d54:	4093      	lsls	r3, r2
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d5c:	4935      	ldr	r1, [pc, #212]	; (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	089b      	lsrs	r3, r3, #2
 8002d62:	3302      	adds	r3, #2
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d6a:	4b38      	ldr	r3, [pc, #224]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d8e:	4a2f      	ldr	r2, [pc, #188]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d94:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db8:	4a24      	ldr	r2, [pc, #144]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dbe:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002de2:	4a1a      	ldr	r2, [pc, #104]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002de8:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e0c:	4a0f      	ldr	r2, [pc, #60]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3301      	adds	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b0f      	cmp	r3, #15
 8002e1c:	f67f aea2 	bls.w	8002b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	3724      	adds	r7, #36	; 0x24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40013800 	.word	0x40013800
 8002e38:	40020000 	.word	0x40020000
 8002e3c:	40020400 	.word	0x40020400
 8002e40:	40020800 	.word	0x40020800
 8002e44:	40020c00 	.word	0x40020c00
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40013c00 	.word	0x40013c00

08002e50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	887b      	ldrh	r3, [r7, #2]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
 8002e6c:	e001      	b.n	8002e72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e90:	787b      	ldrb	r3, [r7, #1]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e96:	887a      	ldrh	r2, [r7, #2]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e9c:	e003      	b.n	8002ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	041a      	lsls	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	619a      	str	r2, [r3, #24]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ebe:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eca:	4a05      	ldr	r2, [pc, #20]	; (8002ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe f862 	bl	8000f9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40013c00 	.word	0x40013c00

08002ee4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee6:	b08f      	sub	sp, #60	; 0x3c
 8002ee8:	af0a      	add	r7, sp, #40	; 0x28
 8002eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e054      	b.n	8002fa0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d106      	bne.n	8002f16 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f007 f827 	bl	8009f64 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f004 f855 	bl	8006fe4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	687e      	ldr	r6, [r7, #4]
 8002f42:	466d      	mov	r5, sp
 8002f44:	f106 0410 	add.w	r4, r6, #16
 8002f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f54:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f58:	1d33      	adds	r3, r6, #4
 8002f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f5c:	6838      	ldr	r0, [r7, #0]
 8002f5e:	f003 ffcf 	bl	8006f00 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f004 f84c 	bl	8007006 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	687e      	ldr	r6, [r7, #4]
 8002f76:	466d      	mov	r5, sp
 8002f78:	f106 0410 	add.w	r4, r6, #16
 8002f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f88:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f8c:	1d33      	adds	r3, r6, #4
 8002f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f90:	6838      	ldr	r0, [r7, #0]
 8002f92:	f004 f9d5 	bl	8007340 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fa8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af04      	add	r7, sp, #16
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	4608      	mov	r0, r1
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	70fb      	strb	r3, [r7, #3]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	70bb      	strb	r3, [r7, #2]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_HCD_HC_Init+0x28>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e076      	b.n	80030be <HAL_HCD_HC_Init+0x116>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	333d      	adds	r3, #61	; 0x3d
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3338      	adds	r3, #56	; 0x38
 8002ff8:	787a      	ldrb	r2, [r7, #1]
 8002ffa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	212c      	movs	r1, #44	; 0x2c
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	3340      	adds	r3, #64	; 0x40
 800300a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800300c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	3339      	adds	r3, #57	; 0x39
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	333f      	adds	r3, #63	; 0x3f
 800302e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003032:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	78ba      	ldrb	r2, [r7, #2]
 8003038:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800303c:	b2d0      	uxtb	r0, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	333a      	adds	r3, #58	; 0x3a
 800304a:	4602      	mov	r2, r0
 800304c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800304e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003052:	2b00      	cmp	r3, #0
 8003054:	da09      	bge.n	800306a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	333b      	adds	r3, #59	; 0x3b
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
 8003068:	e008      	b.n	800307c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	333b      	adds	r3, #59	; 0x3b
 8003078:	2200      	movs	r2, #0
 800307a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	333c      	adds	r3, #60	; 0x3c
 800308a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800308e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	787c      	ldrb	r4, [r7, #1]
 8003096:	78ba      	ldrb	r2, [r7, #2]
 8003098:	78f9      	ldrb	r1, [r7, #3]
 800309a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800309c:	9302      	str	r3, [sp, #8]
 800309e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	4623      	mov	r3, r4
 80030ac:	f004 face 	bl	800764c <USB_HC_Init>
 80030b0:	4603      	mov	r3, r0
 80030b2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd90      	pop	{r4, r7, pc}

080030c6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_HCD_HC_Halt+0x1e>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e00f      	b.n	8003104 <HAL_HCD_HC_Halt+0x3e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f004 fd1e 	bl	8007b36 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003102:	7bfb      	ldrb	r3, [r7, #15]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	4608      	mov	r0, r1
 8003116:	4611      	mov	r1, r2
 8003118:	461a      	mov	r2, r3
 800311a:	4603      	mov	r3, r0
 800311c:	70fb      	strb	r3, [r7, #3]
 800311e:	460b      	mov	r3, r1
 8003120:	70bb      	strb	r3, [r7, #2]
 8003122:	4613      	mov	r3, r2
 8003124:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	212c      	movs	r1, #44	; 0x2c
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	4413      	add	r3, r2
 8003132:	333b      	adds	r3, #59	; 0x3b
 8003134:	78ba      	ldrb	r2, [r7, #2]
 8003136:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	212c      	movs	r1, #44	; 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	333f      	adds	r3, #63	; 0x3f
 8003146:	787a      	ldrb	r2, [r7, #1]
 8003148:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800314a:	7c3b      	ldrb	r3, [r7, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d112      	bne.n	8003176 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	3342      	adds	r3, #66	; 0x42
 800315e:	2203      	movs	r2, #3
 8003160:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	333d      	adds	r3, #61	; 0x3d
 8003170:	7f3a      	ldrb	r2, [r7, #28]
 8003172:	701a      	strb	r2, [r3, #0]
 8003174:	e008      	b.n	8003188 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	212c      	movs	r1, #44	; 0x2c
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	3342      	adds	r3, #66	; 0x42
 8003184:	2202      	movs	r2, #2
 8003186:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003188:	787b      	ldrb	r3, [r7, #1]
 800318a:	2b03      	cmp	r3, #3
 800318c:	f200 80c6 	bhi.w	800331c <HAL_HCD_HC_SubmitRequest+0x210>
 8003190:	a201      	add	r2, pc, #4	; (adr r2, 8003198 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003196:	bf00      	nop
 8003198:	080031a9 	.word	0x080031a9
 800319c:	08003309 	.word	0x08003309
 80031a0:	0800320d 	.word	0x0800320d
 80031a4:	0800328b 	.word	0x0800328b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80031a8:	7c3b      	ldrb	r3, [r7, #16]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	f040 80b8 	bne.w	8003320 <HAL_HCD_HC_SubmitRequest+0x214>
 80031b0:	78bb      	ldrb	r3, [r7, #2]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f040 80b4 	bne.w	8003320 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80031b8:	8b3b      	ldrh	r3, [r7, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d108      	bne.n	80031d0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	212c      	movs	r1, #44	; 0x2c
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	3355      	adds	r3, #85	; 0x55
 80031cc:	2201      	movs	r2, #1
 80031ce:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	212c      	movs	r1, #44	; 0x2c
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	4413      	add	r3, r2
 80031dc:	3355      	adds	r3, #85	; 0x55
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d109      	bne.n	80031f8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	212c      	movs	r1, #44	; 0x2c
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	3342      	adds	r3, #66	; 0x42
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80031f6:	e093      	b.n	8003320 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	212c      	movs	r1, #44	; 0x2c
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	4413      	add	r3, r2
 8003204:	3342      	adds	r3, #66	; 0x42
 8003206:	2202      	movs	r2, #2
 8003208:	701a      	strb	r2, [r3, #0]
      break;
 800320a:	e089      	b.n	8003320 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800320c:	78bb      	ldrb	r3, [r7, #2]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d11d      	bne.n	800324e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	212c      	movs	r1, #44	; 0x2c
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	3355      	adds	r3, #85	; 0x55
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	3342      	adds	r3, #66	; 0x42
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003238:	e073      	b.n	8003322 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	212c      	movs	r1, #44	; 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	3342      	adds	r3, #66	; 0x42
 8003248:	2202      	movs	r2, #2
 800324a:	701a      	strb	r2, [r3, #0]
      break;
 800324c:	e069      	b.n	8003322 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	212c      	movs	r1, #44	; 0x2c
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	3354      	adds	r3, #84	; 0x54
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	212c      	movs	r1, #44	; 0x2c
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	3342      	adds	r3, #66	; 0x42
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
      break;
 8003274:	e055      	b.n	8003322 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	3342      	adds	r3, #66	; 0x42
 8003284:	2202      	movs	r2, #2
 8003286:	701a      	strb	r2, [r3, #0]
      break;
 8003288:	e04b      	b.n	8003322 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800328a:	78bb      	ldrb	r3, [r7, #2]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d11d      	bne.n	80032cc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	3355      	adds	r3, #85	; 0x55
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d109      	bne.n	80032b8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	212c      	movs	r1, #44	; 0x2c
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	3342      	adds	r3, #66	; 0x42
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80032b6:	e034      	b.n	8003322 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	212c      	movs	r1, #44	; 0x2c
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	3342      	adds	r3, #66	; 0x42
 80032c6:	2202      	movs	r2, #2
 80032c8:	701a      	strb	r2, [r3, #0]
      break;
 80032ca:	e02a      	b.n	8003322 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	3354      	adds	r3, #84	; 0x54
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d109      	bne.n	80032f4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	212c      	movs	r1, #44	; 0x2c
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	3342      	adds	r3, #66	; 0x42
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]
      break;
 80032f2:	e016      	b.n	8003322 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	212c      	movs	r1, #44	; 0x2c
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	4413      	add	r3, r2
 8003300:	3342      	adds	r3, #66	; 0x42
 8003302:	2202      	movs	r2, #2
 8003304:	701a      	strb	r2, [r3, #0]
      break;
 8003306:	e00c      	b.n	8003322 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	212c      	movs	r1, #44	; 0x2c
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	4413      	add	r3, r2
 8003314:	3342      	adds	r3, #66	; 0x42
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
      break;
 800331a:	e002      	b.n	8003322 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800331c:	bf00      	nop
 800331e:	e000      	b.n	8003322 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003320:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	212c      	movs	r1, #44	; 0x2c
 8003328:	fb01 f303 	mul.w	r3, r1, r3
 800332c:	4413      	add	r3, r2
 800332e:	3344      	adds	r3, #68	; 0x44
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	8b3a      	ldrh	r2, [r7, #24]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	202c      	movs	r0, #44	; 0x2c
 800333c:	fb00 f303 	mul.w	r3, r0, r3
 8003340:	440b      	add	r3, r1
 8003342:	334c      	adds	r3, #76	; 0x4c
 8003344:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	212c      	movs	r1, #44	; 0x2c
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	4413      	add	r3, r2
 8003352:	3360      	adds	r3, #96	; 0x60
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	212c      	movs	r1, #44	; 0x2c
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	4413      	add	r3, r2
 8003364:	3350      	adds	r3, #80	; 0x50
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	3339      	adds	r3, #57	; 0x39
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	212c      	movs	r1, #44	; 0x2c
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	3361      	adds	r3, #97	; 0x61
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	222c      	movs	r2, #44	; 0x2c
 8003396:	fb02 f303 	mul.w	r3, r2, r3
 800339a:	3338      	adds	r3, #56	; 0x38
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	18d1      	adds	r1, r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	f004 fa72 	bl	8007890 <USB_HC_StartXfer>
 80033ac:	4603      	mov	r3, r0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop

080033b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f003 ff73 	bl	80072ba <USB_GetMode>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	f040 80f6 	bne.w	80035c8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f003 ff57 	bl	8007294 <USB_ReadInterrupts>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80ec 	beq.w	80035c6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f003 ff4e 	bl	8007294 <USB_ReadInterrupts>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003402:	d104      	bne.n	800340e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800340c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f003 ff3e 	bl	8007294 <USB_ReadInterrupts>
 8003418:	4603      	mov	r3, r0
 800341a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800341e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003422:	d104      	bne.n	800342e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800342c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f003 ff2e 	bl	8007294 <USB_ReadInterrupts>
 8003438:	4603      	mov	r3, r0
 800343a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800343e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003442:	d104      	bne.n	800344e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800344c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f003 ff1e 	bl	8007294 <USB_ReadInterrupts>
 8003458:	4603      	mov	r3, r0
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b02      	cmp	r3, #2
 8003460:	d103      	bne.n	800346a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2202      	movs	r2, #2
 8003468:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f003 ff10 	bl	8007294 <USB_ReadInterrupts>
 8003474:	4603      	mov	r3, r0
 8003476:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800347a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800347e:	d11c      	bne.n	80034ba <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003488:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10f      	bne.n	80034ba <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800349a:	2110      	movs	r1, #16
 800349c:	6938      	ldr	r0, [r7, #16]
 800349e:	f003 fdff 	bl	80070a0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80034a2:	6938      	ldr	r0, [r7, #16]
 80034a4:	f003 fe30 	bl	8007108 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2101      	movs	r1, #1
 80034ae:	4618      	mov	r0, r3
 80034b0:	f004 f806 	bl	80074c0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f006 fdd3 	bl	800a060 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f003 fee8 	bl	8007294 <USB_ReadInterrupts>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ce:	d102      	bne.n	80034d6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f001 f89e 	bl	8004612 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f003 feda 	bl	8007294 <USB_ReadInterrupts>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d106      	bne.n	80034f8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f006 fd9c 	bl	800a028 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2208      	movs	r2, #8
 80034f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f003 fec9 	bl	8007294 <USB_ReadInterrupts>
 8003502:	4603      	mov	r3, r0
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b10      	cmp	r3, #16
 800350a:	d101      	bne.n	8003510 <HAL_HCD_IRQHandler+0x158>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_HCD_IRQHandler+0x15a>
 8003510:	2300      	movs	r3, #0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d012      	beq.n	800353c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0210 	bic.w	r2, r2, #16
 8003524:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 ffa1 	bl	800446e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0210 	orr.w	r2, r2, #16
 800353a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f003 fea7 	bl	8007294 <USB_ReadInterrupts>
 8003546:	4603      	mov	r3, r0
 8003548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003550:	d13a      	bne.n	80035c8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f004 fadc 	bl	8007b14 <USB_HC_ReadInterrupt>
 800355c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	e025      	b.n	80035b0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d018      	beq.n	80035aa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800358a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800358e:	d106      	bne.n	800359e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f8ab 	bl	80036f2 <HCD_HC_IN_IRQHandler>
 800359c:	e005      	b.n	80035aa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	4619      	mov	r1, r3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fbf9 	bl	8003d9c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	3301      	adds	r3, #1
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d3d4      	bcc.n	8003564 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035c2:	615a      	str	r2, [r3, #20]
 80035c4:	e000      	b.n	80035c8 <HAL_HCD_IRQHandler+0x210>
      return;
 80035c6:	bf00      	nop
    }
  }
}
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_HCD_Start+0x16>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e013      	b.n	800360c <HAL_HCD_Start+0x3e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2101      	movs	r1, #1
 80035f2:	4618      	mov	r0, r3
 80035f4:	f003 ffc8 	bl	8007588 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f003 fce0 	bl	8006fc2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_HCD_Stop+0x16>
 8003626:	2302      	movs	r3, #2
 8003628:	e00d      	b.n	8003646 <HAL_HCD_Stop+0x32>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f004 fbb6 	bl	8007da8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f003 ff6a 	bl	8007534 <USB_ResetPort>
 8003660:	4603      	mov	r3, r0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	460b      	mov	r3, r1
 8003674:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	212c      	movs	r1, #44	; 0x2c
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	4413      	add	r3, r2
 8003682:	3360      	adds	r3, #96	; 0x60
 8003684:	781b      	ldrb	r3, [r3, #0]
}
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	460b      	mov	r3, r1
 800369c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	3350      	adds	r3, #80	; 0x50
 80036ac:	681b      	ldr	r3, [r3, #0]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f003 ffae 	bl	8007628 <USB_GetCurrentFrame>
 80036cc:	4603      	mov	r3, r0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f003 ff89 	bl	80075fa <USB_GetHostSpeed>
 80036e8:	4603      	mov	r3, r0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4413      	add	r3, r2
 8003714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b04      	cmp	r3, #4
 8003720:	d11a      	bne.n	8003758 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4413      	add	r3, r2
 800372a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372e:	461a      	mov	r2, r3
 8003730:	2304      	movs	r3, #4
 8003732:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	3361      	adds	r3, #97	; 0x61
 8003742:	2206      	movs	r2, #6
 8003744:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f004 f9f0 	bl	8007b36 <USB_HC_Halt>
 8003756:	e0af      	b.n	80038b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376e:	d11b      	bne.n	80037a8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4413      	add	r3, r2
 8003778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377c:	461a      	mov	r2, r3
 800377e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003782:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	212c      	movs	r1, #44	; 0x2c
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	3361      	adds	r3, #97	; 0x61
 8003792:	2207      	movs	r2, #7
 8003794:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	4611      	mov	r1, r2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f004 f9c8 	bl	8007b36 <USB_HC_Halt>
 80037a6:	e087      	b.n	80038b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d109      	bne.n	80037d2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ca:	461a      	mov	r2, r3
 80037cc:	2320      	movs	r3, #32
 80037ce:	6093      	str	r3, [r2, #8]
 80037d0:	e072      	b.n	80038b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d11a      	bne.n	800381e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f4:	461a      	mov	r2, r3
 80037f6:	2308      	movs	r3, #8
 80037f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	212c      	movs	r1, #44	; 0x2c
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	4413      	add	r3, r2
 8003806:	3361      	adds	r3, #97	; 0x61
 8003808:	2205      	movs	r2, #5
 800380a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f004 f98d 	bl	8007b36 <USB_HC_Halt>
 800381c:	e04c      	b.n	80038b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003834:	d11b      	bne.n	800386e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4413      	add	r3, r2
 800383e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003842:	461a      	mov	r2, r3
 8003844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003848:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	212c      	movs	r1, #44	; 0x2c
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	3361      	adds	r3, #97	; 0x61
 8003858:	2208      	movs	r2, #8
 800385a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	4611      	mov	r1, r2
 8003866:	4618      	mov	r0, r3
 8003868:	f004 f965 	bl	8007b36 <USB_HC_Halt>
 800386c:	e024      	b.n	80038b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003880:	2b80      	cmp	r3, #128	; 0x80
 8003882:	d119      	bne.n	80038b8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4413      	add	r3, r2
 800388c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003890:	461a      	mov	r2, r3
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	3361      	adds	r3, #97	; 0x61
 80038a4:	2206      	movs	r2, #6
 80038a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	4611      	mov	r1, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f004 f93f 	bl	8007b36 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ce:	d112      	bne.n	80038f6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	4611      	mov	r1, r2
 80038da:	4618      	mov	r0, r3
 80038dc:	f004 f92b 	bl	8007b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ec:	461a      	mov	r2, r3
 80038ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038f2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80038f4:	e24e      	b.n	8003d94 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	f040 80df 	bne.w	8003acc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d019      	beq.n	800394a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	212c      	movs	r1, #44	; 0x2c
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	4413      	add	r3, r2
 8003922:	3348      	adds	r3, #72	; 0x48
 8003924:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	0159      	lsls	r1, r3, #5
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	440b      	add	r3, r1
 800392e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003938:	1ad2      	subs	r2, r2, r3
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	202c      	movs	r0, #44	; 0x2c
 8003940:	fb00 f303 	mul.w	r3, r0, r3
 8003944:	440b      	add	r3, r1
 8003946:	3350      	adds	r3, #80	; 0x50
 8003948:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	212c      	movs	r1, #44	; 0x2c
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	4413      	add	r3, r2
 8003956:	3361      	adds	r3, #97	; 0x61
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	335c      	adds	r3, #92	; 0x5c
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4413      	add	r3, r2
 8003976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397a:	461a      	mov	r2, r3
 800397c:	2301      	movs	r3, #1
 800397e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	212c      	movs	r1, #44	; 0x2c
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	4413      	add	r3, r2
 800398c:	333f      	adds	r3, #63	; 0x3f
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d009      	beq.n	80039a8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	212c      	movs	r1, #44	; 0x2c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	333f      	adds	r3, #63	; 0x3f
 80039a2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d111      	bne.n	80039cc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f004 f8bf 	bl	8007b36 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c4:	461a      	mov	r2, r3
 80039c6:	2310      	movs	r3, #16
 80039c8:	6093      	str	r3, [r2, #8]
 80039ca:	e03a      	b.n	8003a42 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	212c      	movs	r1, #44	; 0x2c
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	333f      	adds	r3, #63	; 0x3f
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d009      	beq.n	80039f4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	212c      	movs	r1, #44	; 0x2c
 80039e6:	fb01 f303 	mul.w	r3, r1, r3
 80039ea:	4413      	add	r3, r2
 80039ec:	333f      	adds	r3, #63	; 0x3f
 80039ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d126      	bne.n	8003a42 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	0151      	lsls	r1, r2, #5
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	440a      	add	r2, r1
 8003a0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a12:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	212c      	movs	r1, #44	; 0x2c
 8003a1a:	fb01 f303 	mul.w	r3, r1, r3
 8003a1e:	4413      	add	r3, r2
 8003a20:	3360      	adds	r3, #96	; 0x60
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	b2d9      	uxtb	r1, r3
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	202c      	movs	r0, #44	; 0x2c
 8003a30:	fb00 f303 	mul.w	r3, r0, r3
 8003a34:	4413      	add	r3, r2
 8003a36:	3360      	adds	r3, #96	; 0x60
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f006 fb1d 	bl	800a07c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d12b      	bne.n	8003aa2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	3348      	adds	r3, #72	; 0x48
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	202c      	movs	r0, #44	; 0x2c
 8003a60:	fb00 f202 	mul.w	r2, r0, r2
 8003a64:	440a      	add	r2, r1
 8003a66:	3240      	adds	r2, #64	; 0x40
 8003a68:	8812      	ldrh	r2, [r2, #0]
 8003a6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 818e 	beq.w	8003d94 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	212c      	movs	r1, #44	; 0x2c
 8003a7e:	fb01 f303 	mul.w	r3, r1, r3
 8003a82:	4413      	add	r3, r2
 8003a84:	3354      	adds	r3, #84	; 0x54
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	f083 0301 	eor.w	r3, r3, #1
 8003a8c:	b2d8      	uxtb	r0, r3
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	212c      	movs	r1, #44	; 0x2c
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	4413      	add	r3, r2
 8003a9a:	3354      	adds	r3, #84	; 0x54
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	701a      	strb	r2, [r3, #0]
}
 8003aa0:	e178      	b.n	8003d94 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	212c      	movs	r1, #44	; 0x2c
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	4413      	add	r3, r2
 8003aae:	3354      	adds	r3, #84	; 0x54
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	f083 0301 	eor.w	r3, r3, #1
 8003ab6:	b2d8      	uxtb	r0, r3
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	212c      	movs	r1, #44	; 0x2c
 8003abe:	fb01 f303 	mul.w	r3, r1, r3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3354      	adds	r3, #84	; 0x54
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	701a      	strb	r2, [r3, #0]
}
 8003aca:	e163      	b.n	8003d94 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	f040 80f6 	bne.w	8003cd0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	212c      	movs	r1, #44	; 0x2c
 8003aea:	fb01 f303 	mul.w	r3, r1, r3
 8003aee:	4413      	add	r3, r2
 8003af0:	3361      	adds	r3, #97	; 0x61
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d109      	bne.n	8003b0c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	212c      	movs	r1, #44	; 0x2c
 8003afe:	fb01 f303 	mul.w	r3, r1, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	3360      	adds	r3, #96	; 0x60
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	e0c9      	b.n	8003ca0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	3361      	adds	r3, #97	; 0x61
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b05      	cmp	r3, #5
 8003b1e:	d109      	bne.n	8003b34 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	212c      	movs	r1, #44	; 0x2c
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3360      	adds	r3, #96	; 0x60
 8003b2e:	2205      	movs	r2, #5
 8003b30:	701a      	strb	r2, [r3, #0]
 8003b32:	e0b5      	b.n	8003ca0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	212c      	movs	r1, #44	; 0x2c
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	3361      	adds	r3, #97	; 0x61
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b06      	cmp	r3, #6
 8003b46:	d009      	beq.n	8003b5c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	212c      	movs	r1, #44	; 0x2c
 8003b4e:	fb01 f303 	mul.w	r3, r1, r3
 8003b52:	4413      	add	r3, r2
 8003b54:	3361      	adds	r3, #97	; 0x61
 8003b56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d150      	bne.n	8003bfe <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	212c      	movs	r1, #44	; 0x2c
 8003b62:	fb01 f303 	mul.w	r3, r1, r3
 8003b66:	4413      	add	r3, r2
 8003b68:	335c      	adds	r3, #92	; 0x5c
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	202c      	movs	r0, #44	; 0x2c
 8003b74:	fb00 f303 	mul.w	r3, r0, r3
 8003b78:	440b      	add	r3, r1
 8003b7a:	335c      	adds	r3, #92	; 0x5c
 8003b7c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	212c      	movs	r1, #44	; 0x2c
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	4413      	add	r3, r2
 8003b8a:	335c      	adds	r3, #92	; 0x5c
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d912      	bls.n	8003bb8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	212c      	movs	r1, #44	; 0x2c
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	335c      	adds	r3, #92	; 0x5c
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	212c      	movs	r1, #44	; 0x2c
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	3360      	adds	r3, #96	; 0x60
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bb6:	e073      	b.n	8003ca0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	212c      	movs	r1, #44	; 0x2c
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3360      	adds	r3, #96	; 0x60
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003be0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003be8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bfc:	e050      	b.n	8003ca0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	212c      	movs	r1, #44	; 0x2c
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	4413      	add	r3, r2
 8003c0a:	3361      	adds	r3, #97	; 0x61
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d122      	bne.n	8003c58 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	212c      	movs	r1, #44	; 0x2c
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3360      	adds	r3, #96	; 0x60
 8003c20:	2202      	movs	r2, #2
 8003c22:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c3a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c42:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c50:	461a      	mov	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e023      	b.n	8003ca0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	212c      	movs	r1, #44	; 0x2c
 8003c5e:	fb01 f303 	mul.w	r3, r1, r3
 8003c62:	4413      	add	r3, r2
 8003c64:	3361      	adds	r3, #97	; 0x61
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b07      	cmp	r3, #7
 8003c6a:	d119      	bne.n	8003ca0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	212c      	movs	r1, #44	; 0x2c
 8003c72:	fb01 f303 	mul.w	r3, r1, r3
 8003c76:	4413      	add	r3, r2
 8003c78:	335c      	adds	r3, #92	; 0x5c
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	202c      	movs	r0, #44	; 0x2c
 8003c84:	fb00 f303 	mul.w	r3, r0, r3
 8003c88:	440b      	add	r3, r1
 8003c8a:	335c      	adds	r3, #92	; 0x5c
 8003c8c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	212c      	movs	r1, #44	; 0x2c
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	4413      	add	r3, r2
 8003c9a:	3360      	adds	r3, #96	; 0x60
 8003c9c:	2204      	movs	r2, #4
 8003c9e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cac:	461a      	mov	r2, r3
 8003cae:	2302      	movs	r3, #2
 8003cb0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	b2d9      	uxtb	r1, r3
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	202c      	movs	r0, #44	; 0x2c
 8003cbc:	fb00 f303 	mul.w	r3, r0, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3360      	adds	r3, #96	; 0x60
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f006 f9d7 	bl	800a07c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003cce:	e061      	b.n	8003d94 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b10      	cmp	r3, #16
 8003ce4:	d156      	bne.n	8003d94 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	212c      	movs	r1, #44	; 0x2c
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	333f      	adds	r3, #63	; 0x3f
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d111      	bne.n	8003d1e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	212c      	movs	r1, #44	; 0x2c
 8003d00:	fb01 f303 	mul.w	r3, r1, r3
 8003d04:	4413      	add	r3, r2
 8003d06:	335c      	adds	r3, #92	; 0x5c
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	4611      	mov	r1, r2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f003 ff0d 	bl	8007b36 <USB_HC_Halt>
 8003d1c:	e031      	b.n	8003d82 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	212c      	movs	r1, #44	; 0x2c
 8003d24:	fb01 f303 	mul.w	r3, r1, r3
 8003d28:	4413      	add	r3, r2
 8003d2a:	333f      	adds	r3, #63	; 0x3f
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	212c      	movs	r1, #44	; 0x2c
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	333f      	adds	r3, #63	; 0x3f
 8003d40:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d11d      	bne.n	8003d82 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	212c      	movs	r1, #44	; 0x2c
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	4413      	add	r3, r2
 8003d52:	335c      	adds	r3, #92	; 0x5c
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d110      	bne.n	8003d82 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	212c      	movs	r1, #44	; 0x2c
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3361      	adds	r3, #97	; 0x61
 8003d6e:	2203      	movs	r2, #3
 8003d70:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f003 feda 	bl	8007b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2310      	movs	r3, #16
 8003d92:	6093      	str	r3, [r2, #8]
}
 8003d94:	bf00      	nop
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d11a      	bne.n	8003e02 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2304      	movs	r3, #4
 8003ddc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	212c      	movs	r1, #44	; 0x2c
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	4413      	add	r3, r2
 8003dea:	3361      	adds	r3, #97	; 0x61
 8003dec:	2206      	movs	r2, #6
 8003dee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	4611      	mov	r1, r2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f003 fe9b 	bl	8007b36 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003e00:	e331      	b.n	8004466 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d12e      	bne.n	8003e76 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e24:	461a      	mov	r2, r3
 8003e26:	2320      	movs	r3, #32
 8003e28:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	212c      	movs	r1, #44	; 0x2c
 8003e30:	fb01 f303 	mul.w	r3, r1, r3
 8003e34:	4413      	add	r3, r2
 8003e36:	333d      	adds	r3, #61	; 0x3d
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	f040 8313 	bne.w	8004466 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	212c      	movs	r1, #44	; 0x2c
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	333d      	adds	r3, #61	; 0x3d
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	212c      	movs	r1, #44	; 0x2c
 8003e58:	fb01 f303 	mul.w	r3, r1, r3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3360      	adds	r3, #96	; 0x60
 8003e60:	2202      	movs	r2, #2
 8003e62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f003 fe61 	bl	8007b36 <USB_HC_Halt>
}
 8003e74:	e2f7      	b.n	8004466 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e8c:	d112      	bne.n	8003eb4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ea0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f003 fe42 	bl	8007b36 <USB_HC_Halt>
}
 8003eb2:	e2d8      	b.n	8004466 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d140      	bne.n	8003f4c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	212c      	movs	r1, #44	; 0x2c
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	335c      	adds	r3, #92	; 0x5c
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eee:	2b40      	cmp	r3, #64	; 0x40
 8003ef0:	d111      	bne.n	8003f16 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	212c      	movs	r1, #44	; 0x2c
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	4413      	add	r3, r2
 8003efe:	333d      	adds	r3, #61	; 0x3d
 8003f00:	2201      	movs	r2, #1
 8003f02:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f10:	461a      	mov	r2, r3
 8003f12:	2340      	movs	r3, #64	; 0x40
 8003f14:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f22:	461a      	mov	r2, r3
 8003f24:	2301      	movs	r3, #1
 8003f26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	212c      	movs	r1, #44	; 0x2c
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	4413      	add	r3, r2
 8003f34:	3361      	adds	r3, #97	; 0x61
 8003f36:	2201      	movs	r2, #1
 8003f38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f003 fdf6 	bl	8007b36 <USB_HC_Halt>
}
 8003f4a:	e28c      	b.n	8004466 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	d12c      	bne.n	8003fbc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	212c      	movs	r1, #44	; 0x2c
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3361      	adds	r3, #97	; 0x61
 8003f70:	2204      	movs	r2, #4
 8003f72:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	212c      	movs	r1, #44	; 0x2c
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	4413      	add	r3, r2
 8003f80:	333d      	adds	r3, #61	; 0x3d
 8003f82:	2201      	movs	r2, #1
 8003f84:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	212c      	movs	r1, #44	; 0x2c
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	4413      	add	r3, r2
 8003f92:	335c      	adds	r3, #92	; 0x5c
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f003 fdc7 	bl	8007b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2340      	movs	r3, #64	; 0x40
 8003fb8:	6093      	str	r3, [r2, #8]
}
 8003fba:	e254      	b.n	8004466 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d11a      	bne.n	8004008 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2308      	movs	r3, #8
 8003fe2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	212c      	movs	r1, #44	; 0x2c
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	4413      	add	r3, r2
 8003ff0:	3361      	adds	r3, #97	; 0x61
 8003ff2:	2205      	movs	r2, #5
 8003ff4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	4611      	mov	r1, r2
 8004000:	4618      	mov	r0, r3
 8004002:	f003 fd98 	bl	8007b36 <USB_HC_Halt>
}
 8004006:	e22e      	b.n	8004466 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	4413      	add	r3, r2
 8004010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b10      	cmp	r3, #16
 800401c:	d140      	bne.n	80040a0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	212c      	movs	r1, #44	; 0x2c
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	4413      	add	r3, r2
 800402a:	335c      	adds	r3, #92	; 0x5c
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	212c      	movs	r1, #44	; 0x2c
 8004036:	fb01 f303 	mul.w	r3, r1, r3
 800403a:	4413      	add	r3, r2
 800403c:	3361      	adds	r3, #97	; 0x61
 800403e:	2203      	movs	r2, #3
 8004040:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	212c      	movs	r1, #44	; 0x2c
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	333d      	adds	r3, #61	; 0x3d
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d112      	bne.n	800407c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	212c      	movs	r1, #44	; 0x2c
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	4413      	add	r3, r2
 8004062:	333c      	adds	r3, #60	; 0x3c
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d108      	bne.n	800407c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	212c      	movs	r1, #44	; 0x2c
 8004070:	fb01 f303 	mul.w	r3, r1, r3
 8004074:	4413      	add	r3, r2
 8004076:	333d      	adds	r3, #61	; 0x3d
 8004078:	2201      	movs	r2, #1
 800407a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f003 fd55 	bl	8007b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	4413      	add	r3, r2
 8004094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004098:	461a      	mov	r2, r3
 800409a:	2310      	movs	r3, #16
 800409c:	6093      	str	r3, [r2, #8]
}
 800409e:	e1e2      	b.n	8004466 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b2:	2b80      	cmp	r3, #128	; 0x80
 80040b4:	d164      	bne.n	8004180 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d111      	bne.n	80040e2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	212c      	movs	r1, #44	; 0x2c
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	3361      	adds	r3, #97	; 0x61
 80040cc:	2206      	movs	r2, #6
 80040ce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	4611      	mov	r1, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	f003 fd2b 	bl	8007b36 <USB_HC_Halt>
 80040e0:	e044      	b.n	800416c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	212c      	movs	r1, #44	; 0x2c
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	4413      	add	r3, r2
 80040ee:	335c      	adds	r3, #92	; 0x5c
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	202c      	movs	r0, #44	; 0x2c
 80040fa:	fb00 f303 	mul.w	r3, r0, r3
 80040fe:	440b      	add	r3, r1
 8004100:	335c      	adds	r3, #92	; 0x5c
 8004102:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	212c      	movs	r1, #44	; 0x2c
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	4413      	add	r3, r2
 8004110:	335c      	adds	r3, #92	; 0x5c
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d920      	bls.n	800415a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	212c      	movs	r1, #44	; 0x2c
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	4413      	add	r3, r2
 8004124:	335c      	adds	r3, #92	; 0x5c
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	212c      	movs	r1, #44	; 0x2c
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	4413      	add	r3, r2
 8004136:	3360      	adds	r3, #96	; 0x60
 8004138:	2204      	movs	r2, #4
 800413a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	b2d9      	uxtb	r1, r3
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	202c      	movs	r0, #44	; 0x2c
 8004146:	fb00 f303 	mul.w	r3, r0, r3
 800414a:	4413      	add	r3, r2
 800414c:	3360      	adds	r3, #96	; 0x60
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f005 ff92 	bl	800a07c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004158:	e008      	b.n	800416c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	212c      	movs	r1, #44	; 0x2c
 8004160:	fb01 f303 	mul.w	r3, r1, r3
 8004164:	4413      	add	r3, r2
 8004166:	3360      	adds	r3, #96	; 0x60
 8004168:	2202      	movs	r2, #2
 800416a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	4413      	add	r3, r2
 8004174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004178:	461a      	mov	r2, r3
 800417a:	2380      	movs	r3, #128	; 0x80
 800417c:	6093      	str	r3, [r2, #8]
}
 800417e:	e172      	b.n	8004466 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	4413      	add	r3, r2
 8004188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004196:	d11b      	bne.n	80041d0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3361      	adds	r3, #97	; 0x61
 80041a6:	2208      	movs	r2, #8
 80041a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f003 fcbe 	bl	8007b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c6:	461a      	mov	r2, r3
 80041c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041cc:	6093      	str	r3, [r2, #8]
}
 80041ce:	e14a      	b.n	8004466 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	f040 813f 	bne.w	8004466 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	212c      	movs	r1, #44	; 0x2c
 80041ee:	fb01 f303 	mul.w	r3, r1, r3
 80041f2:	4413      	add	r3, r2
 80041f4:	3361      	adds	r3, #97	; 0x61
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d17d      	bne.n	80042f8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	212c      	movs	r1, #44	; 0x2c
 8004202:	fb01 f303 	mul.w	r3, r1, r3
 8004206:	4413      	add	r3, r2
 8004208:	3360      	adds	r3, #96	; 0x60
 800420a:	2201      	movs	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	212c      	movs	r1, #44	; 0x2c
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	4413      	add	r3, r2
 800421a:	333f      	adds	r3, #63	; 0x3f
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d00a      	beq.n	8004238 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	212c      	movs	r1, #44	; 0x2c
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	4413      	add	r3, r2
 800422e:	333f      	adds	r3, #63	; 0x3f
 8004230:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004232:	2b03      	cmp	r3, #3
 8004234:	f040 8100 	bne.w	8004438 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d113      	bne.n	8004268 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	212c      	movs	r1, #44	; 0x2c
 8004246:	fb01 f303 	mul.w	r3, r1, r3
 800424a:	4413      	add	r3, r2
 800424c:	3355      	adds	r3, #85	; 0x55
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	f083 0301 	eor.w	r3, r3, #1
 8004254:	b2d8      	uxtb	r0, r3
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	212c      	movs	r1, #44	; 0x2c
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	4413      	add	r3, r2
 8004262:	3355      	adds	r3, #85	; 0x55
 8004264:	4602      	mov	r2, r0
 8004266:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b01      	cmp	r3, #1
 800426e:	f040 80e3 	bne.w	8004438 <HCD_HC_OUT_IRQHandler+0x69c>
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	212c      	movs	r1, #44	; 0x2c
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	4413      	add	r3, r2
 800427e:	334c      	adds	r3, #76	; 0x4c
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80d8 	beq.w	8004438 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	212c      	movs	r1, #44	; 0x2c
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	4413      	add	r3, r2
 8004294:	334c      	adds	r3, #76	; 0x4c
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	202c      	movs	r0, #44	; 0x2c
 800429e:	fb00 f202 	mul.w	r2, r0, r2
 80042a2:	440a      	add	r2, r1
 80042a4:	3240      	adds	r2, #64	; 0x40
 80042a6:	8812      	ldrh	r2, [r2, #0]
 80042a8:	4413      	add	r3, r2
 80042aa:	3b01      	subs	r3, #1
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	202c      	movs	r0, #44	; 0x2c
 80042b2:	fb00 f202 	mul.w	r2, r0, r2
 80042b6:	440a      	add	r2, r1
 80042b8:	3240      	adds	r2, #64	; 0x40
 80042ba:	8812      	ldrh	r2, [r2, #0]
 80042bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80b5 	beq.w	8004438 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	212c      	movs	r1, #44	; 0x2c
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	4413      	add	r3, r2
 80042da:	3355      	adds	r3, #85	; 0x55
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	f083 0301 	eor.w	r3, r3, #1
 80042e2:	b2d8      	uxtb	r0, r3
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	212c      	movs	r1, #44	; 0x2c
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
 80042ee:	4413      	add	r3, r2
 80042f0:	3355      	adds	r3, #85	; 0x55
 80042f2:	4602      	mov	r2, r0
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	e09f      	b.n	8004438 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	212c      	movs	r1, #44	; 0x2c
 80042fe:	fb01 f303 	mul.w	r3, r1, r3
 8004302:	4413      	add	r3, r2
 8004304:	3361      	adds	r3, #97	; 0x61
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b03      	cmp	r3, #3
 800430a:	d109      	bne.n	8004320 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	212c      	movs	r1, #44	; 0x2c
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	3360      	adds	r3, #96	; 0x60
 800431a:	2202      	movs	r2, #2
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e08b      	b.n	8004438 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	212c      	movs	r1, #44	; 0x2c
 8004326:	fb01 f303 	mul.w	r3, r1, r3
 800432a:	4413      	add	r3, r2
 800432c:	3361      	adds	r3, #97	; 0x61
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b04      	cmp	r3, #4
 8004332:	d109      	bne.n	8004348 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	212c      	movs	r1, #44	; 0x2c
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	4413      	add	r3, r2
 8004340:	3360      	adds	r3, #96	; 0x60
 8004342:	2202      	movs	r2, #2
 8004344:	701a      	strb	r2, [r3, #0]
 8004346:	e077      	b.n	8004438 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	212c      	movs	r1, #44	; 0x2c
 800434e:	fb01 f303 	mul.w	r3, r1, r3
 8004352:	4413      	add	r3, r2
 8004354:	3361      	adds	r3, #97	; 0x61
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b05      	cmp	r3, #5
 800435a:	d109      	bne.n	8004370 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	212c      	movs	r1, #44	; 0x2c
 8004362:	fb01 f303 	mul.w	r3, r1, r3
 8004366:	4413      	add	r3, r2
 8004368:	3360      	adds	r3, #96	; 0x60
 800436a:	2205      	movs	r2, #5
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	e063      	b.n	8004438 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	212c      	movs	r1, #44	; 0x2c
 8004376:	fb01 f303 	mul.w	r3, r1, r3
 800437a:	4413      	add	r3, r2
 800437c:	3361      	adds	r3, #97	; 0x61
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b06      	cmp	r3, #6
 8004382:	d009      	beq.n	8004398 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	212c      	movs	r1, #44	; 0x2c
 800438a:	fb01 f303 	mul.w	r3, r1, r3
 800438e:	4413      	add	r3, r2
 8004390:	3361      	adds	r3, #97	; 0x61
 8004392:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004394:	2b08      	cmp	r3, #8
 8004396:	d14f      	bne.n	8004438 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	212c      	movs	r1, #44	; 0x2c
 800439e:	fb01 f303 	mul.w	r3, r1, r3
 80043a2:	4413      	add	r3, r2
 80043a4:	335c      	adds	r3, #92	; 0x5c
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	202c      	movs	r0, #44	; 0x2c
 80043b0:	fb00 f303 	mul.w	r3, r0, r3
 80043b4:	440b      	add	r3, r1
 80043b6:	335c      	adds	r3, #92	; 0x5c
 80043b8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	212c      	movs	r1, #44	; 0x2c
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	4413      	add	r3, r2
 80043c6:	335c      	adds	r3, #92	; 0x5c
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d912      	bls.n	80043f4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	212c      	movs	r1, #44	; 0x2c
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	4413      	add	r3, r2
 80043da:	335c      	adds	r3, #92	; 0x5c
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	212c      	movs	r1, #44	; 0x2c
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	3360      	adds	r3, #96	; 0x60
 80043ee:	2204      	movs	r2, #4
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	e021      	b.n	8004438 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	212c      	movs	r1, #44	; 0x2c
 80043fa:	fb01 f303 	mul.w	r3, r1, r3
 80043fe:	4413      	add	r3, r2
 8004400:	3360      	adds	r3, #96	; 0x60
 8004402:	2202      	movs	r2, #2
 8004404:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	4413      	add	r3, r2
 800440e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800441c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004424:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	4413      	add	r3, r2
 800442e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004432:	461a      	mov	r2, r3
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	4413      	add	r3, r2
 8004440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004444:	461a      	mov	r2, r3
 8004446:	2302      	movs	r3, #2
 8004448:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	b2d9      	uxtb	r1, r3
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	202c      	movs	r0, #44	; 0x2c
 8004454:	fb00 f303 	mul.w	r3, r0, r3
 8004458:	4413      	add	r3, r2
 800445a:	3360      	adds	r3, #96	; 0x60
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f005 fe0b 	bl	800a07c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004466:	bf00      	nop
 8004468:	3720      	adds	r7, #32
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b08a      	sub	sp, #40	; 0x28
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	0c5b      	lsrs	r3, r3, #17
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044a2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d004      	beq.n	80044b4 <HCD_RXQLVL_IRQHandler+0x46>
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b05      	cmp	r3, #5
 80044ae:	f000 80a9 	beq.w	8004604 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80044b2:	e0aa      	b.n	800460a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80a6 	beq.w	8004608 <HCD_RXQLVL_IRQHandler+0x19a>
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	212c      	movs	r1, #44	; 0x2c
 80044c2:	fb01 f303 	mul.w	r3, r1, r3
 80044c6:	4413      	add	r3, r2
 80044c8:	3344      	adds	r3, #68	; 0x44
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 809b 	beq.w	8004608 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	212c      	movs	r1, #44	; 0x2c
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	4413      	add	r3, r2
 80044de:	3350      	adds	r3, #80	; 0x50
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	441a      	add	r2, r3
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	202c      	movs	r0, #44	; 0x2c
 80044ec:	fb00 f303 	mul.w	r3, r0, r3
 80044f0:	440b      	add	r3, r1
 80044f2:	334c      	adds	r3, #76	; 0x4c
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d87a      	bhi.n	80045f0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	212c      	movs	r1, #44	; 0x2c
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	4413      	add	r3, r2
 800450a:	3344      	adds	r3, #68	; 0x44
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	b292      	uxth	r2, r2
 8004512:	4619      	mov	r1, r3
 8004514:	f002 fe66 	bl	80071e4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	212c      	movs	r1, #44	; 0x2c
 800451e:	fb01 f303 	mul.w	r3, r1, r3
 8004522:	4413      	add	r3, r2
 8004524:	3344      	adds	r3, #68	; 0x44
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	441a      	add	r2, r3
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	202c      	movs	r0, #44	; 0x2c
 8004532:	fb00 f303 	mul.w	r3, r0, r3
 8004536:	440b      	add	r3, r1
 8004538:	3344      	adds	r3, #68	; 0x44
 800453a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	212c      	movs	r1, #44	; 0x2c
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	4413      	add	r3, r2
 8004548:	3350      	adds	r3, #80	; 0x50
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	441a      	add	r2, r3
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	202c      	movs	r0, #44	; 0x2c
 8004556:	fb00 f303 	mul.w	r3, r0, r3
 800455a:	440b      	add	r3, r1
 800455c:	3350      	adds	r3, #80	; 0x50
 800455e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	4413      	add	r3, r2
 8004568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	0cdb      	lsrs	r3, r3, #19
 8004570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004574:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	212c      	movs	r1, #44	; 0x2c
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	4413      	add	r3, r2
 8004582:	3340      	adds	r3, #64	; 0x40
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4293      	cmp	r3, r2
 800458c:	d13c      	bne.n	8004608 <HCD_RXQLVL_IRQHandler+0x19a>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d039      	beq.n	8004608 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	4413      	add	r3, r2
 800459c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045aa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045b2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c0:	461a      	mov	r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	212c      	movs	r1, #44	; 0x2c
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	3354      	adds	r3, #84	; 0x54
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	f083 0301 	eor.w	r3, r3, #1
 80045da:	b2d8      	uxtb	r0, r3
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	212c      	movs	r1, #44	; 0x2c
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	4413      	add	r3, r2
 80045e8:	3354      	adds	r3, #84	; 0x54
 80045ea:	4602      	mov	r2, r0
 80045ec:	701a      	strb	r2, [r3, #0]
      break;
 80045ee:	e00b      	b.n	8004608 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	212c      	movs	r1, #44	; 0x2c
 80045f6:	fb01 f303 	mul.w	r3, r1, r3
 80045fa:	4413      	add	r3, r2
 80045fc:	3360      	adds	r3, #96	; 0x60
 80045fe:	2204      	movs	r2, #4
 8004600:	701a      	strb	r2, [r3, #0]
      break;
 8004602:	e001      	b.n	8004608 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004604:	bf00      	nop
 8004606:	e000      	b.n	800460a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004608:	bf00      	nop
  }
}
 800460a:	bf00      	nop
 800460c:	3728      	adds	r7, #40	; 0x28
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b086      	sub	sp, #24
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800463e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b02      	cmp	r3, #2
 8004648:	d10b      	bne.n	8004662 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d102      	bne.n	800465a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f005 fcf5 	bl	800a044 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f043 0302 	orr.w	r3, r3, #2
 8004660:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b08      	cmp	r3, #8
 800466a:	d132      	bne.n	80046d2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f043 0308 	orr.w	r3, r3, #8
 8004672:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b04      	cmp	r3, #4
 800467c:	d126      	bne.n	80046cc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2b02      	cmp	r3, #2
 8004684:	d113      	bne.n	80046ae <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800468c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004690:	d106      	bne.n	80046a0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2102      	movs	r1, #2
 8004698:	4618      	mov	r0, r3
 800469a:	f002 ff11 	bl	80074c0 <USB_InitFSLSPClkSel>
 800469e:	e011      	b.n	80046c4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2101      	movs	r1, #1
 80046a6:	4618      	mov	r0, r3
 80046a8:	f002 ff0a 	bl	80074c0 <USB_InitFSLSPClkSel>
 80046ac:	e00a      	b.n	80046c4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d106      	bne.n	80046c4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046bc:	461a      	mov	r2, r3
 80046be:	f64e 2360 	movw	r3, #60000	; 0xea60
 80046c2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f005 fce7 	bl	800a098 <HAL_HCD_PortEnabled_Callback>
 80046ca:	e002      	b.n	80046d2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f005 fcf1 	bl	800a0b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d103      	bne.n	80046e4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f043 0320 	orr.w	r3, r3, #32
 80046e2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046ea:	461a      	mov	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	6013      	str	r3, [r2, #0]
}
 80046f0:	bf00      	nop
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e12b      	b.n	8004962 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fd fd28 	bl	8002174 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2224      	movs	r2, #36	; 0x24
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0201 	bic.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800474a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800475a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800475c:	f001 fa20 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 8004760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4a81      	ldr	r2, [pc, #516]	; (800496c <HAL_I2C_Init+0x274>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d807      	bhi.n	800477c <HAL_I2C_Init+0x84>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4a80      	ldr	r2, [pc, #512]	; (8004970 <HAL_I2C_Init+0x278>)
 8004770:	4293      	cmp	r3, r2
 8004772:	bf94      	ite	ls
 8004774:	2301      	movls	r3, #1
 8004776:	2300      	movhi	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	e006      	b.n	800478a <HAL_I2C_Init+0x92>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4a7d      	ldr	r2, [pc, #500]	; (8004974 <HAL_I2C_Init+0x27c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	bf94      	ite	ls
 8004784:	2301      	movls	r3, #1
 8004786:	2300      	movhi	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e0e7      	b.n	8004962 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4a78      	ldr	r2, [pc, #480]	; (8004978 <HAL_I2C_Init+0x280>)
 8004796:	fba2 2303 	umull	r2, r3, r2, r3
 800479a:	0c9b      	lsrs	r3, r3, #18
 800479c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4a6a      	ldr	r2, [pc, #424]	; (800496c <HAL_I2C_Init+0x274>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d802      	bhi.n	80047cc <HAL_I2C_Init+0xd4>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	3301      	adds	r3, #1
 80047ca:	e009      	b.n	80047e0 <HAL_I2C_Init+0xe8>
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047d2:	fb02 f303 	mul.w	r3, r2, r3
 80047d6:	4a69      	ldr	r2, [pc, #420]	; (800497c <HAL_I2C_Init+0x284>)
 80047d8:	fba2 2303 	umull	r2, r3, r2, r3
 80047dc:	099b      	lsrs	r3, r3, #6
 80047de:	3301      	adds	r3, #1
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	430b      	orrs	r3, r1
 80047e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	495c      	ldr	r1, [pc, #368]	; (800496c <HAL_I2C_Init+0x274>)
 80047fc:	428b      	cmp	r3, r1
 80047fe:	d819      	bhi.n	8004834 <HAL_I2C_Init+0x13c>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	1e59      	subs	r1, r3, #1
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	fbb1 f3f3 	udiv	r3, r1, r3
 800480e:	1c59      	adds	r1, r3, #1
 8004810:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004814:	400b      	ands	r3, r1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <HAL_I2C_Init+0x138>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1e59      	subs	r1, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	fbb1 f3f3 	udiv	r3, r1, r3
 8004828:	3301      	adds	r3, #1
 800482a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800482e:	e051      	b.n	80048d4 <HAL_I2C_Init+0x1dc>
 8004830:	2304      	movs	r3, #4
 8004832:	e04f      	b.n	80048d4 <HAL_I2C_Init+0x1dc>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d111      	bne.n	8004860 <HAL_I2C_Init+0x168>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	1e58      	subs	r0, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6859      	ldr	r1, [r3, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	440b      	add	r3, r1
 800484a:	fbb0 f3f3 	udiv	r3, r0, r3
 800484e:	3301      	adds	r3, #1
 8004850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004854:	2b00      	cmp	r3, #0
 8004856:	bf0c      	ite	eq
 8004858:	2301      	moveq	r3, #1
 800485a:	2300      	movne	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	e012      	b.n	8004886 <HAL_I2C_Init+0x18e>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1e58      	subs	r0, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6859      	ldr	r1, [r3, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	0099      	lsls	r1, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	fbb0 f3f3 	udiv	r3, r0, r3
 8004876:	3301      	adds	r3, #1
 8004878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487c:	2b00      	cmp	r3, #0
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_Init+0x196>
 800488a:	2301      	movs	r3, #1
 800488c:	e022      	b.n	80048d4 <HAL_I2C_Init+0x1dc>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10e      	bne.n	80048b4 <HAL_I2C_Init+0x1bc>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1e58      	subs	r0, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6859      	ldr	r1, [r3, #4]
 800489e:	460b      	mov	r3, r1
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	440b      	add	r3, r1
 80048a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80048a8:	3301      	adds	r3, #1
 80048aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b2:	e00f      	b.n	80048d4 <HAL_I2C_Init+0x1dc>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	1e58      	subs	r0, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6859      	ldr	r1, [r3, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	0099      	lsls	r1, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ca:	3301      	adds	r3, #1
 80048cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	6809      	ldr	r1, [r1, #0]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69da      	ldr	r2, [r3, #28]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004902:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6911      	ldr	r1, [r2, #16]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	68d2      	ldr	r2, [r2, #12]
 800490e:	4311      	orrs	r1, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6812      	ldr	r2, [r2, #0]
 8004914:	430b      	orrs	r3, r1
 8004916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	000186a0 	.word	0x000186a0
 8004970:	001e847f 	.word	0x001e847f
 8004974:	003d08ff 	.word	0x003d08ff
 8004978:	431bde83 	.word	0x431bde83
 800497c:	10624dd3 	.word	0x10624dd3

08004980 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e128      	b.n	8004be4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a90      	ldr	r2, [pc, #576]	; (8004bec <HAL_I2S_Init+0x26c>)
 80049aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7fd fc29 	bl	8002204 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80049c8:	f023 030f 	bic.w	r3, r3, #15
 80049cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2202      	movs	r2, #2
 80049d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d060      	beq.n	8004aa0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80049e6:	2310      	movs	r3, #16
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	e001      	b.n	80049f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80049ec:	2320      	movs	r3, #32
 80049ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d802      	bhi.n	80049fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80049fe:	2001      	movs	r0, #1
 8004a00:	f001 f9d2 	bl	8005da8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a04:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a0e:	d125      	bne.n	8004a5c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d010      	beq.n	8004a3a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a34:	3305      	adds	r3, #5
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	e01f      	b.n	8004a7a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	3305      	adds	r3, #5
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	e00e      	b.n	8004a7a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a64:	4613      	mov	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	3305      	adds	r3, #5
 8004a78:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4a5c      	ldr	r2, [pc, #368]	; (8004bf0 <HAL_I2S_Init+0x270>)
 8004a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a82:	08db      	lsrs	r3, r3, #3
 8004a84:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	021b      	lsls	r3, r3, #8
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	e003      	b.n	8004aa8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d902      	bls.n	8004ab4 <HAL_I2S_Init+0x134>
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	2bff      	cmp	r3, #255	; 0xff
 8004ab2:	d907      	bls.n	8004ac4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab8:	f043 0210 	orr.w	r2, r3, #16
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e08f      	b.n	8004be4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	ea42 0103 	orr.w	r1, r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ae2:	f023 030f 	bic.w	r3, r3, #15
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6851      	ldr	r1, [r2, #4]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6892      	ldr	r2, [r2, #8]
 8004aee:	4311      	orrs	r1, r2
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	68d2      	ldr	r2, [r2, #12]
 8004af4:	4311      	orrs	r1, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6992      	ldr	r2, [r2, #24]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b06:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d161      	bne.n	8004bd4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a38      	ldr	r2, [pc, #224]	; (8004bf4 <HAL_I2S_Init+0x274>)
 8004b14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a37      	ldr	r2, [pc, #220]	; (8004bf8 <HAL_I2S_Init+0x278>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d101      	bne.n	8004b24 <HAL_I2S_Init+0x1a4>
 8004b20:	4b36      	ldr	r3, [pc, #216]	; (8004bfc <HAL_I2S_Init+0x27c>)
 8004b22:	e001      	b.n	8004b28 <HAL_I2S_Init+0x1a8>
 8004b24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	4932      	ldr	r1, [pc, #200]	; (8004bf8 <HAL_I2S_Init+0x278>)
 8004b30:	428a      	cmp	r2, r1
 8004b32:	d101      	bne.n	8004b38 <HAL_I2S_Init+0x1b8>
 8004b34:	4a31      	ldr	r2, [pc, #196]	; (8004bfc <HAL_I2S_Init+0x27c>)
 8004b36:	e001      	b.n	8004b3c <HAL_I2S_Init+0x1bc>
 8004b38:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004b3c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b40:	f023 030f 	bic.w	r3, r3, #15
 8004b44:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2b      	ldr	r2, [pc, #172]	; (8004bf8 <HAL_I2S_Init+0x278>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d101      	bne.n	8004b54 <HAL_I2S_Init+0x1d4>
 8004b50:	4b2a      	ldr	r3, [pc, #168]	; (8004bfc <HAL_I2S_Init+0x27c>)
 8004b52:	e001      	b.n	8004b58 <HAL_I2S_Init+0x1d8>
 8004b54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b58:	2202      	movs	r2, #2
 8004b5a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a25      	ldr	r2, [pc, #148]	; (8004bf8 <HAL_I2S_Init+0x278>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d101      	bne.n	8004b6a <HAL_I2S_Init+0x1ea>
 8004b66:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <HAL_I2S_Init+0x27c>)
 8004b68:	e001      	b.n	8004b6e <HAL_I2S_Init+0x1ee>
 8004b6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b7a:	d003      	beq.n	8004b84 <HAL_I2S_Init+0x204>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d103      	bne.n	8004b8c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	e001      	b.n	8004b90 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	897b      	ldrh	r3, [r7, #10]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bbc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a0d      	ldr	r2, [pc, #52]	; (8004bf8 <HAL_I2S_Init+0x278>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d101      	bne.n	8004bcc <HAL_I2S_Init+0x24c>
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <HAL_I2S_Init+0x27c>)
 8004bca:	e001      	b.n	8004bd0 <HAL_I2S_Init+0x250>
 8004bcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd0:	897a      	ldrh	r2, [r7, #10]
 8004bd2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3720      	adds	r7, #32
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	08004cf7 	.word	0x08004cf7
 8004bf0:	cccccccd 	.word	0xcccccccd
 8004bf4:	08004e0d 	.word	0x08004e0d
 8004bf8:	40003800 	.word	0x40003800
 8004bfc:	40003400 	.word	0x40003400

08004c00 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	881a      	ldrh	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	1c9a      	adds	r2, r3, #2
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10e      	bne.n	8004c90 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c80:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff ffb8 	bl	8004c00 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c90:	bf00      	nop
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	b292      	uxth	r2, r2
 8004cac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	1c9a      	adds	r2, r3, #2
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10e      	bne.n	8004cee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cde:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff ff93 	bl	8004c14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b086      	sub	sp, #24
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d13a      	bne.n	8004d88 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d109      	bne.n	8004d30 <I2S_IRQHandler+0x3a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d26:	2b40      	cmp	r3, #64	; 0x40
 8004d28:	d102      	bne.n	8004d30 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff ffb4 	bl	8004c98 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d36:	2b40      	cmp	r3, #64	; 0x40
 8004d38:	d126      	bne.n	8004d88 <I2S_IRQHandler+0x92>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d11f      	bne.n	8004d88 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d58:	2300      	movs	r3, #0
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	f043 0202 	orr.w	r2, r3, #2
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff ff50 	bl	8004c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d136      	bne.n	8004e02 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d109      	bne.n	8004db2 <I2S_IRQHandler+0xbc>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da8:	2b80      	cmp	r3, #128	; 0x80
 8004daa:	d102      	bne.n	8004db2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff ff45 	bl	8004c3c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d122      	bne.n	8004e02 <I2S_IRQHandler+0x10c>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d11b      	bne.n	8004e02 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dd8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df4:	f043 0204 	orr.w	r2, r3, #4
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff ff13 	bl	8004c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e02:	bf00      	nop
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a92      	ldr	r2, [pc, #584]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d101      	bne.n	8004e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004e26:	4b92      	ldr	r3, [pc, #584]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e28:	e001      	b.n	8004e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a8b      	ldr	r2, [pc, #556]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d101      	bne.n	8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004e44:	4b8a      	ldr	r3, [pc, #552]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e46:	e001      	b.n	8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004e48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e58:	d004      	beq.n	8004e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f040 8099 	bne.w	8004f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d107      	bne.n	8004e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f925 	bl	80050c8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d107      	bne.n	8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f9c8 	bl	8005228 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d13a      	bne.n	8004f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d035      	beq.n	8004f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a6e      	ldr	r2, [pc, #440]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d101      	bne.n	8004eba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004eb6:	4b6e      	ldr	r3, [pc, #440]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004eb8:	e001      	b.n	8004ebe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4969      	ldr	r1, [pc, #420]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ec6:	428b      	cmp	r3, r1
 8004ec8:	d101      	bne.n	8004ece <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004eca:	4b69      	ldr	r3, [pc, #420]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ecc:	e001      	b.n	8004ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ed2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ed6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ee6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	f043 0202 	orr.w	r2, r3, #2
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fe88 	bl	8004c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	f040 80c3 	bne.w	80050aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80bd 	beq.w	80050aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a49      	ldr	r2, [pc, #292]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d101      	bne.n	8004f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004f4a:	4b49      	ldr	r3, [pc, #292]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f4c:	e001      	b.n	8004f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004f4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4944      	ldr	r1, [pc, #272]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f5a:	428b      	cmp	r3, r1
 8004f5c:	d101      	bne.n	8004f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004f5e:	4b44      	ldr	r3, [pc, #272]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f60:	e001      	b.n	8004f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004f62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f6a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f86:	f043 0204 	orr.w	r2, r3, #4
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff fe4a 	bl	8004c28 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f94:	e089      	b.n	80050aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d107      	bne.n	8004fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f8be 	bl	800512c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d107      	bne.n	8004fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f8fd 	bl	80051c4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	d12f      	bne.n	8005034 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d02a      	beq.n	8005034 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a1e      	ldr	r2, [pc, #120]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d101      	bne.n	8004ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004ff8:	4b1d      	ldr	r3, [pc, #116]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ffa:	e001      	b.n	8005000 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004ffc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4919      	ldr	r1, [pc, #100]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005008:	428b      	cmp	r3, r1
 800500a:	d101      	bne.n	8005010 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800500c:	4b18      	ldr	r3, [pc, #96]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800500e:	e001      	b.n	8005014 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005010:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005014:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005018:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005026:	f043 0202 	orr.w	r2, r3, #2
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff fdfa 	bl	8004c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b08      	cmp	r3, #8
 800503c:	d136      	bne.n	80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b00      	cmp	r3, #0
 8005046:	d031      	beq.n	80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a07      	ldr	r2, [pc, #28]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d101      	bne.n	8005056 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005052:	4b07      	ldr	r3, [pc, #28]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005054:	e001      	b.n	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005056:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4902      	ldr	r1, [pc, #8]	; (800506c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005062:	428b      	cmp	r3, r1
 8005064:	d106      	bne.n	8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005066:	4b02      	ldr	r3, [pc, #8]	; (8005070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005068:	e006      	b.n	8005078 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800506a:	bf00      	nop
 800506c:	40003800 	.word	0x40003800
 8005070:	40003400 	.word	0x40003400
 8005074:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005078:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800507c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800508c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	f043 0204 	orr.w	r2, r3, #4
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff fdc0 	bl	8004c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050a8:	e000      	b.n	80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050aa:	bf00      	nop
}
 80050ac:	bf00      	nop
 80050ae:	3720      	adds	r7, #32
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	1c99      	adds	r1, r3, #2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6251      	str	r1, [r2, #36]	; 0x24
 80050da:	881a      	ldrh	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d113      	bne.n	8005122 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005108:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d106      	bne.n	8005122 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff ffc9 	bl	80050b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	1c99      	adds	r1, r3, #2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6251      	str	r1, [r2, #36]	; 0x24
 800513e:	8819      	ldrh	r1, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1d      	ldr	r2, [pc, #116]	; (80051bc <I2SEx_TxISR_I2SExt+0x90>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d101      	bne.n	800514e <I2SEx_TxISR_I2SExt+0x22>
 800514a:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <I2SEx_TxISR_I2SExt+0x94>)
 800514c:	e001      	b.n	8005152 <I2SEx_TxISR_I2SExt+0x26>
 800514e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005152:	460a      	mov	r2, r1
 8005154:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d121      	bne.n	80051b2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a12      	ldr	r2, [pc, #72]	; (80051bc <I2SEx_TxISR_I2SExt+0x90>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d101      	bne.n	800517c <I2SEx_TxISR_I2SExt+0x50>
 8005178:	4b11      	ldr	r3, [pc, #68]	; (80051c0 <I2SEx_TxISR_I2SExt+0x94>)
 800517a:	e001      	b.n	8005180 <I2SEx_TxISR_I2SExt+0x54>
 800517c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	490d      	ldr	r1, [pc, #52]	; (80051bc <I2SEx_TxISR_I2SExt+0x90>)
 8005188:	428b      	cmp	r3, r1
 800518a:	d101      	bne.n	8005190 <I2SEx_TxISR_I2SExt+0x64>
 800518c:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <I2SEx_TxISR_I2SExt+0x94>)
 800518e:	e001      	b.n	8005194 <I2SEx_TxISR_I2SExt+0x68>
 8005190:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005194:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005198:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f7ff ff81 	bl	80050b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40003800 	.word	0x40003800
 80051c0:	40003400 	.word	0x40003400

080051c4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68d8      	ldr	r0, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	1c99      	adds	r1, r3, #2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	62d1      	str	r1, [r2, #44]	; 0x2c
 80051dc:	b282      	uxth	r2, r0
 80051de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d113      	bne.n	8005220 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005206:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff ff4a 	bl	80050b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a20      	ldr	r2, [pc, #128]	; (80052b8 <I2SEx_RxISR_I2SExt+0x90>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d101      	bne.n	800523e <I2SEx_RxISR_I2SExt+0x16>
 800523a:	4b20      	ldr	r3, [pc, #128]	; (80052bc <I2SEx_RxISR_I2SExt+0x94>)
 800523c:	e001      	b.n	8005242 <I2SEx_RxISR_I2SExt+0x1a>
 800523e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005242:	68d8      	ldr	r0, [r3, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005248:	1c99      	adds	r1, r3, #2
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800524e:	b282      	uxth	r2, r0
 8005250:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d121      	bne.n	80052ae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a12      	ldr	r2, [pc, #72]	; (80052b8 <I2SEx_RxISR_I2SExt+0x90>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d101      	bne.n	8005278 <I2SEx_RxISR_I2SExt+0x50>
 8005274:	4b11      	ldr	r3, [pc, #68]	; (80052bc <I2SEx_RxISR_I2SExt+0x94>)
 8005276:	e001      	b.n	800527c <I2SEx_RxISR_I2SExt+0x54>
 8005278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	490d      	ldr	r1, [pc, #52]	; (80052b8 <I2SEx_RxISR_I2SExt+0x90>)
 8005284:	428b      	cmp	r3, r1
 8005286:	d101      	bne.n	800528c <I2SEx_RxISR_I2SExt+0x64>
 8005288:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <I2SEx_RxISR_I2SExt+0x94>)
 800528a:	e001      	b.n	8005290 <I2SEx_RxISR_I2SExt+0x68>
 800528c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005290:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005294:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff ff03 	bl	80050b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40003800 	.word	0x40003800
 80052bc:	40003400 	.word	0x40003400

080052c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e267      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d075      	beq.n	80053ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052de:	4b88      	ldr	r3, [pc, #544]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d00c      	beq.n	8005304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ea:	4b85      	ldr	r3, [pc, #532]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d112      	bne.n	800531c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052f6:	4b82      	ldr	r3, [pc, #520]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005302:	d10b      	bne.n	800531c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005304:	4b7e      	ldr	r3, [pc, #504]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d05b      	beq.n	80053c8 <HAL_RCC_OscConfig+0x108>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d157      	bne.n	80053c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e242      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005324:	d106      	bne.n	8005334 <HAL_RCC_OscConfig+0x74>
 8005326:	4b76      	ldr	r3, [pc, #472]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a75      	ldr	r2, [pc, #468]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 800532c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	e01d      	b.n	8005370 <HAL_RCC_OscConfig+0xb0>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800533c:	d10c      	bne.n	8005358 <HAL_RCC_OscConfig+0x98>
 800533e:	4b70      	ldr	r3, [pc, #448]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a6f      	ldr	r2, [pc, #444]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 8005344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	4b6d      	ldr	r3, [pc, #436]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a6c      	ldr	r2, [pc, #432]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 8005350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	e00b      	b.n	8005370 <HAL_RCC_OscConfig+0xb0>
 8005358:	4b69      	ldr	r3, [pc, #420]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a68      	ldr	r2, [pc, #416]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 800535e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	4b66      	ldr	r3, [pc, #408]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a65      	ldr	r2, [pc, #404]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 800536a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800536e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d013      	beq.n	80053a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005378:	f7fd faa4 	bl	80028c4 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005380:	f7fd faa0 	bl	80028c4 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b64      	cmp	r3, #100	; 0x64
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e207      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005392:	4b5b      	ldr	r3, [pc, #364]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f0      	beq.n	8005380 <HAL_RCC_OscConfig+0xc0>
 800539e:	e014      	b.n	80053ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a0:	f7fd fa90 	bl	80028c4 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053a8:	f7fd fa8c 	bl	80028c4 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b64      	cmp	r3, #100	; 0x64
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e1f3      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ba:	4b51      	ldr	r3, [pc, #324]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f0      	bne.n	80053a8 <HAL_RCC_OscConfig+0xe8>
 80053c6:	e000      	b.n	80053ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d063      	beq.n	800549e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053d6:	4b4a      	ldr	r3, [pc, #296]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 030c 	and.w	r3, r3, #12
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00b      	beq.n	80053fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053e2:	4b47      	ldr	r3, [pc, #284]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d11c      	bne.n	8005428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ee:	4b44      	ldr	r3, [pc, #272]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d116      	bne.n	8005428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053fa:	4b41      	ldr	r3, [pc, #260]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <HAL_RCC_OscConfig+0x152>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d001      	beq.n	8005412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e1c7      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005412:	4b3b      	ldr	r3, [pc, #236]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	4937      	ldr	r1, [pc, #220]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 8005422:	4313      	orrs	r3, r2
 8005424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005426:	e03a      	b.n	800549e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d020      	beq.n	8005472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005430:	4b34      	ldr	r3, [pc, #208]	; (8005504 <HAL_RCC_OscConfig+0x244>)
 8005432:	2201      	movs	r2, #1
 8005434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005436:	f7fd fa45 	bl	80028c4 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800543e:	f7fd fa41 	bl	80028c4 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e1a8      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005450:	4b2b      	ldr	r3, [pc, #172]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0f0      	beq.n	800543e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800545c:	4b28      	ldr	r3, [pc, #160]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	4925      	ldr	r1, [pc, #148]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 800546c:	4313      	orrs	r3, r2
 800546e:	600b      	str	r3, [r1, #0]
 8005470:	e015      	b.n	800549e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005472:	4b24      	ldr	r3, [pc, #144]	; (8005504 <HAL_RCC_OscConfig+0x244>)
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005478:	f7fd fa24 	bl	80028c4 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005480:	f7fd fa20 	bl	80028c4 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e187      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005492:	4b1b      	ldr	r3, [pc, #108]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f0      	bne.n	8005480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d036      	beq.n	8005518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d016      	beq.n	80054e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054b2:	4b15      	ldr	r3, [pc, #84]	; (8005508 <HAL_RCC_OscConfig+0x248>)
 80054b4:	2201      	movs	r2, #1
 80054b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b8:	f7fd fa04 	bl	80028c4 <HAL_GetTick>
 80054bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054c0:	f7fd fa00 	bl	80028c4 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e167      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054d2:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <HAL_RCC_OscConfig+0x240>)
 80054d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f0      	beq.n	80054c0 <HAL_RCC_OscConfig+0x200>
 80054de:	e01b      	b.n	8005518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054e0:	4b09      	ldr	r3, [pc, #36]	; (8005508 <HAL_RCC_OscConfig+0x248>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e6:	f7fd f9ed 	bl	80028c4 <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054ec:	e00e      	b.n	800550c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ee:	f7fd f9e9 	bl	80028c4 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d907      	bls.n	800550c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e150      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
 8005500:	40023800 	.word	0x40023800
 8005504:	42470000 	.word	0x42470000
 8005508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800550c:	4b88      	ldr	r3, [pc, #544]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 800550e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1ea      	bne.n	80054ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8097 	beq.w	8005654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005526:	2300      	movs	r3, #0
 8005528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800552a:	4b81      	ldr	r3, [pc, #516]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10f      	bne.n	8005556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005536:	2300      	movs	r3, #0
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	4b7d      	ldr	r3, [pc, #500]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	4a7c      	ldr	r2, [pc, #496]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 8005540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005544:	6413      	str	r3, [r2, #64]	; 0x40
 8005546:	4b7a      	ldr	r3, [pc, #488]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554e:	60bb      	str	r3, [r7, #8]
 8005550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005552:	2301      	movs	r3, #1
 8005554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005556:	4b77      	ldr	r3, [pc, #476]	; (8005734 <HAL_RCC_OscConfig+0x474>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d118      	bne.n	8005594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005562:	4b74      	ldr	r3, [pc, #464]	; (8005734 <HAL_RCC_OscConfig+0x474>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a73      	ldr	r2, [pc, #460]	; (8005734 <HAL_RCC_OscConfig+0x474>)
 8005568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800556c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800556e:	f7fd f9a9 	bl	80028c4 <HAL_GetTick>
 8005572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005576:	f7fd f9a5 	bl	80028c4 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e10c      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005588:	4b6a      	ldr	r3, [pc, #424]	; (8005734 <HAL_RCC_OscConfig+0x474>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0f0      	beq.n	8005576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d106      	bne.n	80055aa <HAL_RCC_OscConfig+0x2ea>
 800559c:	4b64      	ldr	r3, [pc, #400]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 800559e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a0:	4a63      	ldr	r2, [pc, #396]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	6713      	str	r3, [r2, #112]	; 0x70
 80055a8:	e01c      	b.n	80055e4 <HAL_RCC_OscConfig+0x324>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b05      	cmp	r3, #5
 80055b0:	d10c      	bne.n	80055cc <HAL_RCC_OscConfig+0x30c>
 80055b2:	4b5f      	ldr	r3, [pc, #380]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 80055b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b6:	4a5e      	ldr	r2, [pc, #376]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 80055b8:	f043 0304 	orr.w	r3, r3, #4
 80055bc:	6713      	str	r3, [r2, #112]	; 0x70
 80055be:	4b5c      	ldr	r3, [pc, #368]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 80055c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c2:	4a5b      	ldr	r2, [pc, #364]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	6713      	str	r3, [r2, #112]	; 0x70
 80055ca:	e00b      	b.n	80055e4 <HAL_RCC_OscConfig+0x324>
 80055cc:	4b58      	ldr	r3, [pc, #352]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 80055ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d0:	4a57      	ldr	r2, [pc, #348]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 80055d2:	f023 0301 	bic.w	r3, r3, #1
 80055d6:	6713      	str	r3, [r2, #112]	; 0x70
 80055d8:	4b55      	ldr	r3, [pc, #340]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 80055da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055dc:	4a54      	ldr	r2, [pc, #336]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 80055de:	f023 0304 	bic.w	r3, r3, #4
 80055e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d015      	beq.n	8005618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ec:	f7fd f96a 	bl	80028c4 <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f2:	e00a      	b.n	800560a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f4:	f7fd f966 	bl	80028c4 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005602:	4293      	cmp	r3, r2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e0cb      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800560a:	4b49      	ldr	r3, [pc, #292]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 800560c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0ee      	beq.n	80055f4 <HAL_RCC_OscConfig+0x334>
 8005616:	e014      	b.n	8005642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005618:	f7fd f954 	bl	80028c4 <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800561e:	e00a      	b.n	8005636 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005620:	f7fd f950 	bl	80028c4 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	f241 3288 	movw	r2, #5000	; 0x1388
 800562e:	4293      	cmp	r3, r2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e0b5      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005636:	4b3e      	ldr	r3, [pc, #248]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 8005638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1ee      	bne.n	8005620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005642:	7dfb      	ldrb	r3, [r7, #23]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d105      	bne.n	8005654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005648:	4b39      	ldr	r3, [pc, #228]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	4a38      	ldr	r2, [pc, #224]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 800564e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005652:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80a1 	beq.w	80057a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800565e:	4b34      	ldr	r3, [pc, #208]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 030c 	and.w	r3, r3, #12
 8005666:	2b08      	cmp	r3, #8
 8005668:	d05c      	beq.n	8005724 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d141      	bne.n	80056f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005672:	4b31      	ldr	r3, [pc, #196]	; (8005738 <HAL_RCC_OscConfig+0x478>)
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005678:	f7fd f924 	bl	80028c4 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005680:	f7fd f920 	bl	80028c4 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e087      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005692:	4b27      	ldr	r3, [pc, #156]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1f0      	bne.n	8005680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69da      	ldr	r2, [r3, #28]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	019b      	lsls	r3, r3, #6
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	085b      	lsrs	r3, r3, #1
 80056b6:	3b01      	subs	r3, #1
 80056b8:	041b      	lsls	r3, r3, #16
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	061b      	lsls	r3, r3, #24
 80056c2:	491b      	ldr	r1, [pc, #108]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056c8:	4b1b      	ldr	r3, [pc, #108]	; (8005738 <HAL_RCC_OscConfig+0x478>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ce:	f7fd f8f9 	bl	80028c4 <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d6:	f7fd f8f5 	bl	80028c4 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e05c      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e8:	4b11      	ldr	r3, [pc, #68]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0f0      	beq.n	80056d6 <HAL_RCC_OscConfig+0x416>
 80056f4:	e054      	b.n	80057a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f6:	4b10      	ldr	r3, [pc, #64]	; (8005738 <HAL_RCC_OscConfig+0x478>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056fc:	f7fd f8e2 	bl	80028c4 <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005704:	f7fd f8de 	bl	80028c4 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e045      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005716:	4b06      	ldr	r3, [pc, #24]	; (8005730 <HAL_RCC_OscConfig+0x470>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f0      	bne.n	8005704 <HAL_RCC_OscConfig+0x444>
 8005722:	e03d      	b.n	80057a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d107      	bne.n	800573c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e038      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
 8005730:	40023800 	.word	0x40023800
 8005734:	40007000 	.word	0x40007000
 8005738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800573c:	4b1b      	ldr	r3, [pc, #108]	; (80057ac <HAL_RCC_OscConfig+0x4ec>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d028      	beq.n	800579c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005754:	429a      	cmp	r2, r3
 8005756:	d121      	bne.n	800579c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005762:	429a      	cmp	r2, r3
 8005764:	d11a      	bne.n	800579c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800576c:	4013      	ands	r3, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005774:	4293      	cmp	r3, r2
 8005776:	d111      	bne.n	800579c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	085b      	lsrs	r3, r3, #1
 8005784:	3b01      	subs	r3, #1
 8005786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005788:	429a      	cmp	r2, r3
 800578a:	d107      	bne.n	800579c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005798:	429a      	cmp	r2, r3
 800579a:	d001      	beq.n	80057a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e000      	b.n	80057a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40023800 	.word	0x40023800

080057b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0cc      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057c4:	4b68      	ldr	r3, [pc, #416]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d90c      	bls.n	80057ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d2:	4b65      	ldr	r3, [pc, #404]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057da:	4b63      	ldr	r3, [pc, #396]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d001      	beq.n	80057ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0b8      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d020      	beq.n	800583a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005804:	4b59      	ldr	r3, [pc, #356]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	4a58      	ldr	r2, [pc, #352]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 800580a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800580e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800581c:	4b53      	ldr	r3, [pc, #332]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	4a52      	ldr	r2, [pc, #328]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005828:	4b50      	ldr	r3, [pc, #320]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	494d      	ldr	r1, [pc, #308]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	4313      	orrs	r3, r2
 8005838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d044      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d107      	bne.n	800585e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584e:	4b47      	ldr	r3, [pc, #284]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d119      	bne.n	800588e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e07f      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d003      	beq.n	800586e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800586a:	2b03      	cmp	r3, #3
 800586c:	d107      	bne.n	800587e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800586e:	4b3f      	ldr	r3, [pc, #252]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d109      	bne.n	800588e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e06f      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587e:	4b3b      	ldr	r3, [pc, #236]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e067      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800588e:	4b37      	ldr	r3, [pc, #220]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f023 0203 	bic.w	r2, r3, #3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	4934      	ldr	r1, [pc, #208]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 800589c:	4313      	orrs	r3, r2
 800589e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058a0:	f7fd f810 	bl	80028c4 <HAL_GetTick>
 80058a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058a6:	e00a      	b.n	80058be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058a8:	f7fd f80c 	bl	80028c4 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e04f      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058be:	4b2b      	ldr	r3, [pc, #172]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 020c 	and.w	r2, r3, #12
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d1eb      	bne.n	80058a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058d0:	4b25      	ldr	r3, [pc, #148]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d20c      	bcs.n	80058f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058de:	4b22      	ldr	r3, [pc, #136]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e6:	4b20      	ldr	r3, [pc, #128]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e032      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d008      	beq.n	8005916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005904:	4b19      	ldr	r3, [pc, #100]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4916      	ldr	r1, [pc, #88]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	4313      	orrs	r3, r2
 8005914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005922:	4b12      	ldr	r3, [pc, #72]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	490e      	ldr	r1, [pc, #56]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	4313      	orrs	r3, r2
 8005934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005936:	f000 f821 	bl	800597c <HAL_RCC_GetSysClockFreq>
 800593a:	4602      	mov	r2, r0
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	490a      	ldr	r1, [pc, #40]	; (8005970 <HAL_RCC_ClockConfig+0x1c0>)
 8005948:	5ccb      	ldrb	r3, [r1, r3]
 800594a:	fa22 f303 	lsr.w	r3, r2, r3
 800594e:	4a09      	ldr	r2, [pc, #36]	; (8005974 <HAL_RCC_ClockConfig+0x1c4>)
 8005950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005952:	4b09      	ldr	r3, [pc, #36]	; (8005978 <HAL_RCC_ClockConfig+0x1c8>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f7fc ff70 	bl	800283c <HAL_InitTick>

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40023c00 	.word	0x40023c00
 800596c:	40023800 	.word	0x40023800
 8005970:	0800d03c 	.word	0x0800d03c
 8005974:	20000008 	.word	0x20000008
 8005978:	2000000c 	.word	0x2000000c

0800597c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800597c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005980:	b094      	sub	sp, #80	; 0x50
 8005982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	647b      	str	r3, [r7, #68]	; 0x44
 8005988:	2300      	movs	r3, #0
 800598a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800598c:	2300      	movs	r3, #0
 800598e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005994:	4b79      	ldr	r3, [pc, #484]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 030c 	and.w	r3, r3, #12
 800599c:	2b08      	cmp	r3, #8
 800599e:	d00d      	beq.n	80059bc <HAL_RCC_GetSysClockFreq+0x40>
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	f200 80e1 	bhi.w	8005b68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <HAL_RCC_GetSysClockFreq+0x34>
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d003      	beq.n	80059b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80059ae:	e0db      	b.n	8005b68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059b0:	4b73      	ldr	r3, [pc, #460]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x204>)
 80059b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80059b4:	e0db      	b.n	8005b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059b6:	4b73      	ldr	r3, [pc, #460]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x208>)
 80059b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059ba:	e0d8      	b.n	8005b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059bc:	4b6f      	ldr	r3, [pc, #444]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059c6:	4b6d      	ldr	r3, [pc, #436]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d063      	beq.n	8005a9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059d2:	4b6a      	ldr	r3, [pc, #424]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	099b      	lsrs	r3, r3, #6
 80059d8:	2200      	movs	r2, #0
 80059da:	63bb      	str	r3, [r7, #56]	; 0x38
 80059dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e4:	633b      	str	r3, [r7, #48]	; 0x30
 80059e6:	2300      	movs	r3, #0
 80059e8:	637b      	str	r3, [r7, #52]	; 0x34
 80059ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059ee:	4622      	mov	r2, r4
 80059f0:	462b      	mov	r3, r5
 80059f2:	f04f 0000 	mov.w	r0, #0
 80059f6:	f04f 0100 	mov.w	r1, #0
 80059fa:	0159      	lsls	r1, r3, #5
 80059fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a00:	0150      	lsls	r0, r2, #5
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	4621      	mov	r1, r4
 8005a08:	1a51      	subs	r1, r2, r1
 8005a0a:	6139      	str	r1, [r7, #16]
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a20:	4659      	mov	r1, fp
 8005a22:	018b      	lsls	r3, r1, #6
 8005a24:	4651      	mov	r1, sl
 8005a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a2a:	4651      	mov	r1, sl
 8005a2c:	018a      	lsls	r2, r1, #6
 8005a2e:	4651      	mov	r1, sl
 8005a30:	ebb2 0801 	subs.w	r8, r2, r1
 8005a34:	4659      	mov	r1, fp
 8005a36:	eb63 0901 	sbc.w	r9, r3, r1
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a4e:	4690      	mov	r8, r2
 8005a50:	4699      	mov	r9, r3
 8005a52:	4623      	mov	r3, r4
 8005a54:	eb18 0303 	adds.w	r3, r8, r3
 8005a58:	60bb      	str	r3, [r7, #8]
 8005a5a:	462b      	mov	r3, r5
 8005a5c:	eb49 0303 	adc.w	r3, r9, r3
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a6e:	4629      	mov	r1, r5
 8005a70:	024b      	lsls	r3, r1, #9
 8005a72:	4621      	mov	r1, r4
 8005a74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a78:	4621      	mov	r1, r4
 8005a7a:	024a      	lsls	r2, r1, #9
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a82:	2200      	movs	r2, #0
 8005a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a8c:	f7fb f904 	bl	8000c98 <__aeabi_uldivmod>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4613      	mov	r3, r2
 8005a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a98:	e058      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a9a:	4b38      	ldr	r3, [pc, #224]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	099b      	lsrs	r3, r3, #6
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005aaa:	623b      	str	r3, [r7, #32]
 8005aac:	2300      	movs	r3, #0
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ab4:	4642      	mov	r2, r8
 8005ab6:	464b      	mov	r3, r9
 8005ab8:	f04f 0000 	mov.w	r0, #0
 8005abc:	f04f 0100 	mov.w	r1, #0
 8005ac0:	0159      	lsls	r1, r3, #5
 8005ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ac6:	0150      	lsls	r0, r2, #5
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4641      	mov	r1, r8
 8005ace:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ad8:	f04f 0200 	mov.w	r2, #0
 8005adc:	f04f 0300 	mov.w	r3, #0
 8005ae0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ae4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ae8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005aec:	ebb2 040a 	subs.w	r4, r2, sl
 8005af0:	eb63 050b 	sbc.w	r5, r3, fp
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	f04f 0300 	mov.w	r3, #0
 8005afc:	00eb      	lsls	r3, r5, #3
 8005afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b02:	00e2      	lsls	r2, r4, #3
 8005b04:	4614      	mov	r4, r2
 8005b06:	461d      	mov	r5, r3
 8005b08:	4643      	mov	r3, r8
 8005b0a:	18e3      	adds	r3, r4, r3
 8005b0c:	603b      	str	r3, [r7, #0]
 8005b0e:	464b      	mov	r3, r9
 8005b10:	eb45 0303 	adc.w	r3, r5, r3
 8005b14:	607b      	str	r3, [r7, #4]
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b22:	4629      	mov	r1, r5
 8005b24:	028b      	lsls	r3, r1, #10
 8005b26:	4621      	mov	r1, r4
 8005b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	028a      	lsls	r2, r1, #10
 8005b30:	4610      	mov	r0, r2
 8005b32:	4619      	mov	r1, r3
 8005b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b36:	2200      	movs	r2, #0
 8005b38:	61bb      	str	r3, [r7, #24]
 8005b3a:	61fa      	str	r2, [r7, #28]
 8005b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b40:	f7fb f8aa 	bl	8000c98 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4613      	mov	r3, r2
 8005b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	0c1b      	lsrs	r3, r3, #16
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	3301      	adds	r3, #1
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b66:	e002      	b.n	8005b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b68:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3750      	adds	r7, #80	; 0x50
 8005b74:	46bd      	mov	sp, r7
 8005b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	00f42400 	.word	0x00f42400
 8005b84:	007a1200 	.word	0x007a1200

08005b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b8c:	4b03      	ldr	r3, [pc, #12]	; (8005b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	20000008 	.word	0x20000008

08005ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ba4:	f7ff fff0 	bl	8005b88 <HAL_RCC_GetHCLKFreq>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	0a9b      	lsrs	r3, r3, #10
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	4903      	ldr	r1, [pc, #12]	; (8005bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bb6:	5ccb      	ldrb	r3, [r1, r3]
 8005bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	40023800 	.word	0x40023800
 8005bc4:	0800d04c 	.word	0x0800d04c

08005bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d038      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bf0:	4b68      	ldr	r3, [pc, #416]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bf6:	f7fc fe65 	bl	80028c4 <HAL_GetTick>
 8005bfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bfc:	e008      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bfe:	f7fc fe61 	bl	80028c4 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e0bd      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c10:	4b61      	ldr	r3, [pc, #388]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1f0      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	019b      	lsls	r3, r3, #6
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	071b      	lsls	r3, r3, #28
 8005c2e:	495a      	ldr	r1, [pc, #360]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c36:	4b57      	ldr	r3, [pc, #348]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c3c:	f7fc fe42 	bl	80028c4 <HAL_GetTick>
 8005c40:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c42:	e008      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c44:	f7fc fe3e 	bl	80028c4 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e09a      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c56:	4b50      	ldr	r3, [pc, #320]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0f0      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8083 	beq.w	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c70:	2300      	movs	r3, #0
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	4b48      	ldr	r3, [pc, #288]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	4a47      	ldr	r2, [pc, #284]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8005c80:	4b45      	ldr	r3, [pc, #276]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c8c:	4b43      	ldr	r3, [pc, #268]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a42      	ldr	r2, [pc, #264]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c96:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c98:	f7fc fe14 	bl	80028c4 <HAL_GetTick>
 8005c9c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ca0:	f7fc fe10 	bl	80028c4 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e06c      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cb2:	4b3a      	ldr	r3, [pc, #232]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cbe:	4b36      	ldr	r3, [pc, #216]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d02f      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d028      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cdc:	4b2e      	ldr	r3, [pc, #184]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ce6:	4b2e      	ldr	r3, [pc, #184]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005ce8:	2201      	movs	r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cec:	4b2c      	ldr	r3, [pc, #176]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005cf2:	4a29      	ldr	r2, [pc, #164]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005cf8:	4b27      	ldr	r3, [pc, #156]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d114      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d04:	f7fc fdde 	bl	80028c4 <HAL_GetTick>
 8005d08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d0a:	e00a      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d0c:	f7fc fdda 	bl	80028c4 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e034      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d22:	4b1d      	ldr	r3, [pc, #116]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0ee      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d3a:	d10d      	bne.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005d3c:	4b16      	ldr	r3, [pc, #88]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d50:	4911      	ldr	r1, [pc, #68]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	608b      	str	r3, [r1, #8]
 8005d56:	e005      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005d58:	4b0f      	ldr	r3, [pc, #60]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	4a0e      	ldr	r2, [pc, #56]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d62:	6093      	str	r3, [r2, #8]
 8005d64:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d70:	4909      	ldr	r1, [pc, #36]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	7d1a      	ldrb	r2, [r3, #20]
 8005d86:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005d88:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	42470068 	.word	0x42470068
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	40007000 	.word	0x40007000
 8005da0:	42470e40 	.word	0x42470e40
 8005da4:	424711e0 	.word	0x424711e0

08005da8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d140      	bne.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005dc6:	4b24      	ldr	r3, [pc, #144]	; (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d131      	bne.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ddc:	4b1f      	ldr	r3, [pc, #124]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005dde:	617b      	str	r3, [r7, #20]
          break;
 8005de0:	e031      	b.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005de2:	4b1d      	ldr	r3, [pc, #116]	; (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dee:	d109      	bne.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005df0:	4b19      	ldr	r3, [pc, #100]	; (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dfa:	4a19      	ldr	r2, [pc, #100]	; (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	e008      	b.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005e04:	4b14      	ldr	r3, [pc, #80]	; (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e0e:	4a15      	ldr	r2, [pc, #84]	; (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005e16:	4b10      	ldr	r3, [pc, #64]	; (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e1c:	099b      	lsrs	r3, r3, #6
 8005e1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	fb02 f303 	mul.w	r3, r2, r3
 8005e28:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005e2a:	4b0b      	ldr	r3, [pc, #44]	; (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e30:	0f1b      	lsrs	r3, r3, #28
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e3c:	617b      	str	r3, [r7, #20]
          break;
 8005e3e:	e002      	b.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]
          break;
 8005e44:	bf00      	nop
        }
      }
      break;
 8005e46:	bf00      	nop
    }
  }
  return frequency;
 8005e48:	697b      	ldr	r3, [r7, #20]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	00bb8000 	.word	0x00bb8000
 8005e60:	007a1200 	.word	0x007a1200
 8005e64:	00f42400 	.word	0x00f42400

08005e68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e07b      	b.n	8005f72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d108      	bne.n	8005e94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8a:	d009      	beq.n	8005ea0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	61da      	str	r2, [r3, #28]
 8005e92:	e005      	b.n	8005ea0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d106      	bne.n	8005ec0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7fc fa70 	bl	80023a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	431a      	orrs	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	431a      	orrs	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f24:	ea42 0103 	orr.w	r1, r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	0c1b      	lsrs	r3, r3, #16
 8005f3e:	f003 0104 	and.w	r1, r3, #4
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	f003 0210 	and.w	r2, r3, #16
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69da      	ldr	r2, [r3, #28]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e041      	b.n	8006010 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d106      	bne.n	8005fa6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7fc fa45 	bl	8002430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f000 fc53 	bl	8006864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b01      	cmp	r3, #1
 800602a:	d001      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e044      	b.n	80060ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1e      	ldr	r2, [pc, #120]	; (80060c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d018      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x6c>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605a:	d013      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x6c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1a      	ldr	r2, [pc, #104]	; (80060cc <HAL_TIM_Base_Start_IT+0xb4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00e      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x6c>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a19      	ldr	r2, [pc, #100]	; (80060d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d009      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x6c>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a17      	ldr	r2, [pc, #92]	; (80060d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d004      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x6c>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a16      	ldr	r2, [pc, #88]	; (80060d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d111      	bne.n	80060a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b06      	cmp	r3, #6
 8006094:	d010      	beq.n	80060b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0201 	orr.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a6:	e007      	b.n	80060b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0201 	orr.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40010000 	.word	0x40010000
 80060cc:	40000400 	.word	0x40000400
 80060d0:	40000800 	.word	0x40000800
 80060d4:	40000c00 	.word	0x40000c00
 80060d8:	40014000 	.word	0x40014000

080060dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e041      	b.n	8006172 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f839 	bl	800617a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3304      	adds	r3, #4
 8006118:	4619      	mov	r1, r3
 800611a:	4610      	mov	r0, r2
 800611c:	f000 fba2 	bl	8006864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
	...

08006190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d109      	bne.n	80061b4 <HAL_TIM_PWM_Start+0x24>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	bf14      	ite	ne
 80061ac:	2301      	movne	r3, #1
 80061ae:	2300      	moveq	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	e022      	b.n	80061fa <HAL_TIM_PWM_Start+0x6a>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d109      	bne.n	80061ce <HAL_TIM_PWM_Start+0x3e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	bf14      	ite	ne
 80061c6:	2301      	movne	r3, #1
 80061c8:	2300      	moveq	r3, #0
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	e015      	b.n	80061fa <HAL_TIM_PWM_Start+0x6a>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d109      	bne.n	80061e8 <HAL_TIM_PWM_Start+0x58>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	bf14      	ite	ne
 80061e0:	2301      	movne	r3, #1
 80061e2:	2300      	moveq	r3, #0
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	e008      	b.n	80061fa <HAL_TIM_PWM_Start+0x6a>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	bf14      	ite	ne
 80061f4:	2301      	movne	r3, #1
 80061f6:	2300      	moveq	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e068      	b.n	80062d4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d104      	bne.n	8006212 <HAL_TIM_PWM_Start+0x82>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006210:	e013      	b.n	800623a <HAL_TIM_PWM_Start+0xaa>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b04      	cmp	r3, #4
 8006216:	d104      	bne.n	8006222 <HAL_TIM_PWM_Start+0x92>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006220:	e00b      	b.n	800623a <HAL_TIM_PWM_Start+0xaa>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b08      	cmp	r3, #8
 8006226:	d104      	bne.n	8006232 <HAL_TIM_PWM_Start+0xa2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006230:	e003      	b.n	800623a <HAL_TIM_PWM_Start+0xaa>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2202      	movs	r2, #2
 8006236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2201      	movs	r2, #1
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fdb4 	bl	8006db0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a23      	ldr	r2, [pc, #140]	; (80062dc <HAL_TIM_PWM_Start+0x14c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d107      	bne.n	8006262 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006260:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1d      	ldr	r2, [pc, #116]	; (80062dc <HAL_TIM_PWM_Start+0x14c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d018      	beq.n	800629e <HAL_TIM_PWM_Start+0x10e>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006274:	d013      	beq.n	800629e <HAL_TIM_PWM_Start+0x10e>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a19      	ldr	r2, [pc, #100]	; (80062e0 <HAL_TIM_PWM_Start+0x150>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00e      	beq.n	800629e <HAL_TIM_PWM_Start+0x10e>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a17      	ldr	r2, [pc, #92]	; (80062e4 <HAL_TIM_PWM_Start+0x154>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d009      	beq.n	800629e <HAL_TIM_PWM_Start+0x10e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a16      	ldr	r2, [pc, #88]	; (80062e8 <HAL_TIM_PWM_Start+0x158>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d004      	beq.n	800629e <HAL_TIM_PWM_Start+0x10e>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a14      	ldr	r2, [pc, #80]	; (80062ec <HAL_TIM_PWM_Start+0x15c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d111      	bne.n	80062c2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b06      	cmp	r3, #6
 80062ae:	d010      	beq.n	80062d2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c0:	e007      	b.n	80062d2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f042 0201 	orr.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40010000 	.word	0x40010000
 80062e0:	40000400 	.word	0x40000400
 80062e4:	40000800 	.word	0x40000800
 80062e8:	40000c00 	.word	0x40000c00
 80062ec:	40014000 	.word	0x40014000

080062f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b02      	cmp	r3, #2
 8006304:	d122      	bne.n	800634c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b02      	cmp	r3, #2
 8006312:	d11b      	bne.n	800634c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f06f 0202 	mvn.w	r2, #2
 800631c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	f003 0303 	and.w	r3, r3, #3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fa77 	bl	8006826 <HAL_TIM_IC_CaptureCallback>
 8006338:	e005      	b.n	8006346 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa69 	bl	8006812 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fa7a 	bl	800683a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	2b04      	cmp	r3, #4
 8006358:	d122      	bne.n	80063a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b04      	cmp	r3, #4
 8006366:	d11b      	bne.n	80063a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f06f 0204 	mvn.w	r2, #4
 8006370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fa4d 	bl	8006826 <HAL_TIM_IC_CaptureCallback>
 800638c:	e005      	b.n	800639a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fa3f 	bl	8006812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fa50 	bl	800683a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d122      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f003 0308 	and.w	r3, r3, #8
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d11b      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0208 	mvn.w	r2, #8
 80063c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2204      	movs	r2, #4
 80063ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa23 	bl	8006826 <HAL_TIM_IC_CaptureCallback>
 80063e0:	e005      	b.n	80063ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa15 	bl	8006812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fa26 	bl	800683a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f003 0310 	and.w	r3, r3, #16
 80063fe:	2b10      	cmp	r3, #16
 8006400:	d122      	bne.n	8006448 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	2b10      	cmp	r3, #16
 800640e:	d11b      	bne.n	8006448 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0210 	mvn.w	r2, #16
 8006418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2208      	movs	r2, #8
 800641e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f9f9 	bl	8006826 <HAL_TIM_IC_CaptureCallback>
 8006434:	e005      	b.n	8006442 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f9eb 	bl	8006812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f9fc 	bl	800683a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b01      	cmp	r3, #1
 8006454:	d10e      	bne.n	8006474 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b01      	cmp	r3, #1
 8006462:	d107      	bne.n	8006474 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0201 	mvn.w	r2, #1
 800646c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fb f862 	bl	8001538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647e:	2b80      	cmp	r3, #128	; 0x80
 8006480:	d10e      	bne.n	80064a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648c:	2b80      	cmp	r3, #128	; 0x80
 800648e:	d107      	bne.n	80064a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fd26 	bl	8006eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064aa:	2b40      	cmp	r3, #64	; 0x40
 80064ac:	d10e      	bne.n	80064cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b8:	2b40      	cmp	r3, #64	; 0x40
 80064ba:	d107      	bne.n	80064cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f9c1 	bl	800684e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	d10e      	bne.n	80064f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f003 0320 	and.w	r3, r3, #32
 80064e4:	2b20      	cmp	r3, #32
 80064e6:	d107      	bne.n	80064f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f06f 0220 	mvn.w	r2, #32
 80064f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fcf0 	bl	8006ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064f8:	bf00      	nop
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800651a:	2302      	movs	r3, #2
 800651c:	e0ae      	b.n	800667c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b0c      	cmp	r3, #12
 800652a:	f200 809f 	bhi.w	800666c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800652e:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006534:	08006569 	.word	0x08006569
 8006538:	0800666d 	.word	0x0800666d
 800653c:	0800666d 	.word	0x0800666d
 8006540:	0800666d 	.word	0x0800666d
 8006544:	080065a9 	.word	0x080065a9
 8006548:	0800666d 	.word	0x0800666d
 800654c:	0800666d 	.word	0x0800666d
 8006550:	0800666d 	.word	0x0800666d
 8006554:	080065eb 	.word	0x080065eb
 8006558:	0800666d 	.word	0x0800666d
 800655c:	0800666d 	.word	0x0800666d
 8006560:	0800666d 	.word	0x0800666d
 8006564:	0800662b 	.word	0x0800662b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	4618      	mov	r0, r3
 8006570:	f000 f9f8 	bl	8006964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0208 	orr.w	r2, r2, #8
 8006582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0204 	bic.w	r2, r2, #4
 8006592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6999      	ldr	r1, [r3, #24]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	619a      	str	r2, [r3, #24]
      break;
 80065a6:	e064      	b.n	8006672 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fa3e 	bl	8006a30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699a      	ldr	r2, [r3, #24]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6999      	ldr	r1, [r3, #24]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	021a      	lsls	r2, r3, #8
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	619a      	str	r2, [r3, #24]
      break;
 80065e8:	e043      	b.n	8006672 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fa89 	bl	8006b08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69da      	ldr	r2, [r3, #28]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f042 0208 	orr.w	r2, r2, #8
 8006604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0204 	bic.w	r2, r2, #4
 8006614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69d9      	ldr	r1, [r3, #28]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	691a      	ldr	r2, [r3, #16]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	61da      	str	r2, [r3, #28]
      break;
 8006628:	e023      	b.n	8006672 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68b9      	ldr	r1, [r7, #8]
 8006630:	4618      	mov	r0, r3
 8006632:	f000 fad3 	bl	8006bdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	69da      	ldr	r2, [r3, #28]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69da      	ldr	r2, [r3, #28]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69d9      	ldr	r1, [r3, #28]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	021a      	lsls	r2, r3, #8
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	61da      	str	r2, [r3, #28]
      break;
 800666a:	e002      	b.n	8006672 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	75fb      	strb	r3, [r7, #23]
      break;
 8006670:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800667a:	7dfb      	ldrb	r3, [r7, #23]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_TIM_ConfigClockSource+0x1c>
 800669c:	2302      	movs	r3, #2
 800669e:	e0b4      	b.n	800680a <HAL_TIM_ConfigClockSource+0x186>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d8:	d03e      	beq.n	8006758 <HAL_TIM_ConfigClockSource+0xd4>
 80066da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066de:	f200 8087 	bhi.w	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
 80066e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e6:	f000 8086 	beq.w	80067f6 <HAL_TIM_ConfigClockSource+0x172>
 80066ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ee:	d87f      	bhi.n	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
 80066f0:	2b70      	cmp	r3, #112	; 0x70
 80066f2:	d01a      	beq.n	800672a <HAL_TIM_ConfigClockSource+0xa6>
 80066f4:	2b70      	cmp	r3, #112	; 0x70
 80066f6:	d87b      	bhi.n	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
 80066f8:	2b60      	cmp	r3, #96	; 0x60
 80066fa:	d050      	beq.n	800679e <HAL_TIM_ConfigClockSource+0x11a>
 80066fc:	2b60      	cmp	r3, #96	; 0x60
 80066fe:	d877      	bhi.n	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006700:	2b50      	cmp	r3, #80	; 0x50
 8006702:	d03c      	beq.n	800677e <HAL_TIM_ConfigClockSource+0xfa>
 8006704:	2b50      	cmp	r3, #80	; 0x50
 8006706:	d873      	bhi.n	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006708:	2b40      	cmp	r3, #64	; 0x40
 800670a:	d058      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x13a>
 800670c:	2b40      	cmp	r3, #64	; 0x40
 800670e:	d86f      	bhi.n	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006710:	2b30      	cmp	r3, #48	; 0x30
 8006712:	d064      	beq.n	80067de <HAL_TIM_ConfigClockSource+0x15a>
 8006714:	2b30      	cmp	r3, #48	; 0x30
 8006716:	d86b      	bhi.n	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006718:	2b20      	cmp	r3, #32
 800671a:	d060      	beq.n	80067de <HAL_TIM_ConfigClockSource+0x15a>
 800671c:	2b20      	cmp	r3, #32
 800671e:	d867      	bhi.n	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006720:	2b00      	cmp	r3, #0
 8006722:	d05c      	beq.n	80067de <HAL_TIM_ConfigClockSource+0x15a>
 8006724:	2b10      	cmp	r3, #16
 8006726:	d05a      	beq.n	80067de <HAL_TIM_ConfigClockSource+0x15a>
 8006728:	e062      	b.n	80067f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6818      	ldr	r0, [r3, #0]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	6899      	ldr	r1, [r3, #8]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f000 fb19 	bl	8006d70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800674c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	609a      	str	r2, [r3, #8]
      break;
 8006756:	e04f      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	6899      	ldr	r1, [r3, #8]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f000 fb02 	bl	8006d70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800677a:	609a      	str	r2, [r3, #8]
      break;
 800677c:	e03c      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	6859      	ldr	r1, [r3, #4]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	461a      	mov	r2, r3
 800678c:	f000 fa76 	bl	8006c7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2150      	movs	r1, #80	; 0x50
 8006796:	4618      	mov	r0, r3
 8006798:	f000 facf 	bl	8006d3a <TIM_ITRx_SetConfig>
      break;
 800679c:	e02c      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	6859      	ldr	r1, [r3, #4]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	461a      	mov	r2, r3
 80067ac:	f000 fa95 	bl	8006cda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2160      	movs	r1, #96	; 0x60
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fabf 	bl	8006d3a <TIM_ITRx_SetConfig>
      break;
 80067bc:	e01c      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	6859      	ldr	r1, [r3, #4]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	461a      	mov	r2, r3
 80067cc:	f000 fa56 	bl	8006c7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2140      	movs	r1, #64	; 0x40
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 faaf 	bl	8006d3a <TIM_ITRx_SetConfig>
      break;
 80067dc:	e00c      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4619      	mov	r1, r3
 80067e8:	4610      	mov	r0, r2
 80067ea:	f000 faa6 	bl	8006d3a <TIM_ITRx_SetConfig>
      break;
 80067ee:	e003      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	73fb      	strb	r3, [r7, #15]
      break;
 80067f4:	e000      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a34      	ldr	r2, [pc, #208]	; (8006948 <TIM_Base_SetConfig+0xe4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00f      	beq.n	800689c <TIM_Base_SetConfig+0x38>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006882:	d00b      	beq.n	800689c <TIM_Base_SetConfig+0x38>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a31      	ldr	r2, [pc, #196]	; (800694c <TIM_Base_SetConfig+0xe8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d007      	beq.n	800689c <TIM_Base_SetConfig+0x38>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a30      	ldr	r2, [pc, #192]	; (8006950 <TIM_Base_SetConfig+0xec>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d003      	beq.n	800689c <TIM_Base_SetConfig+0x38>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a2f      	ldr	r2, [pc, #188]	; (8006954 <TIM_Base_SetConfig+0xf0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d108      	bne.n	80068ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a25      	ldr	r2, [pc, #148]	; (8006948 <TIM_Base_SetConfig+0xe4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d01b      	beq.n	80068ee <TIM_Base_SetConfig+0x8a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068bc:	d017      	beq.n	80068ee <TIM_Base_SetConfig+0x8a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a22      	ldr	r2, [pc, #136]	; (800694c <TIM_Base_SetConfig+0xe8>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <TIM_Base_SetConfig+0x8a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a21      	ldr	r2, [pc, #132]	; (8006950 <TIM_Base_SetConfig+0xec>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d00f      	beq.n	80068ee <TIM_Base_SetConfig+0x8a>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a20      	ldr	r2, [pc, #128]	; (8006954 <TIM_Base_SetConfig+0xf0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00b      	beq.n	80068ee <TIM_Base_SetConfig+0x8a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a1f      	ldr	r2, [pc, #124]	; (8006958 <TIM_Base_SetConfig+0xf4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d007      	beq.n	80068ee <TIM_Base_SetConfig+0x8a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a1e      	ldr	r2, [pc, #120]	; (800695c <TIM_Base_SetConfig+0xf8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d003      	beq.n	80068ee <TIM_Base_SetConfig+0x8a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a1d      	ldr	r2, [pc, #116]	; (8006960 <TIM_Base_SetConfig+0xfc>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d108      	bne.n	8006900 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	4313      	orrs	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a08      	ldr	r2, [pc, #32]	; (8006948 <TIM_Base_SetConfig+0xe4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d103      	bne.n	8006934 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	615a      	str	r2, [r3, #20]
}
 800693a:	bf00      	nop
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	40010000 	.word	0x40010000
 800694c:	40000400 	.word	0x40000400
 8006950:	40000800 	.word	0x40000800
 8006954:	40000c00 	.word	0x40000c00
 8006958:	40014000 	.word	0x40014000
 800695c:	40014400 	.word	0x40014400
 8006960:	40014800 	.word	0x40014800

08006964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	f023 0201 	bic.w	r2, r3, #1
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0303 	bic.w	r3, r3, #3
 800699a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f023 0302 	bic.w	r3, r3, #2
 80069ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a1c      	ldr	r2, [pc, #112]	; (8006a2c <TIM_OC1_SetConfig+0xc8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d10c      	bne.n	80069da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f023 0308 	bic.w	r3, r3, #8
 80069c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f023 0304 	bic.w	r3, r3, #4
 80069d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a13      	ldr	r2, [pc, #76]	; (8006a2c <TIM_OC1_SetConfig+0xc8>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d111      	bne.n	8006a06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	621a      	str	r2, [r3, #32]
}
 8006a20:	bf00      	nop
 8006a22:	371c      	adds	r7, #28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	40010000 	.word	0x40010000

08006a30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	f023 0210 	bic.w	r2, r3, #16
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	021b      	lsls	r3, r3, #8
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f023 0320 	bic.w	r3, r3, #32
 8006a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a1e      	ldr	r2, [pc, #120]	; (8006b04 <TIM_OC2_SetConfig+0xd4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d10d      	bne.n	8006aac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a15      	ldr	r2, [pc, #84]	; (8006b04 <TIM_OC2_SetConfig+0xd4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d113      	bne.n	8006adc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	621a      	str	r2, [r3, #32]
}
 8006af6:	bf00      	nop
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	40010000 	.word	0x40010000

08006b08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f023 0303 	bic.w	r3, r3, #3
 8006b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	021b      	lsls	r3, r3, #8
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a1d      	ldr	r2, [pc, #116]	; (8006bd8 <TIM_OC3_SetConfig+0xd0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d10d      	bne.n	8006b82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	021b      	lsls	r3, r3, #8
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a14      	ldr	r2, [pc, #80]	; (8006bd8 <TIM_OC3_SetConfig+0xd0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d113      	bne.n	8006bb2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	621a      	str	r2, [r3, #32]
}
 8006bcc:	bf00      	nop
 8006bce:	371c      	adds	r7, #28
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	40010000 	.word	0x40010000

08006bdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	021b      	lsls	r3, r3, #8
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	031b      	lsls	r3, r3, #12
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a10      	ldr	r2, [pc, #64]	; (8006c78 <TIM_OC4_SetConfig+0x9c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d109      	bne.n	8006c50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	019b      	lsls	r3, r3, #6
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40010000 	.word	0x40010000

08006c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	f023 0201 	bic.w	r2, r3, #1
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	011b      	lsls	r3, r3, #4
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f023 030a 	bic.w	r3, r3, #10
 8006cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	621a      	str	r2, [r3, #32]
}
 8006cce:	bf00      	nop
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b087      	sub	sp, #28
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	60f8      	str	r0, [r7, #12]
 8006ce2:	60b9      	str	r1, [r7, #8]
 8006ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f023 0210 	bic.w	r2, r3, #16
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	031b      	lsls	r3, r3, #12
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	011b      	lsls	r3, r3, #4
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	621a      	str	r2, [r3, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	f043 0307 	orr.w	r3, r3, #7
 8006d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	609a      	str	r2, [r3, #8]
}
 8006d64:	bf00      	nop
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
 8006d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	021a      	lsls	r2, r3, #8
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	431a      	orrs	r2, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	609a      	str	r2, [r3, #8]
}
 8006da4:	bf00      	nop
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f003 031f 	and.w	r3, r3, #31
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a1a      	ldr	r2, [r3, #32]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	43db      	mvns	r3, r3
 8006dd2:	401a      	ands	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a1a      	ldr	r2, [r3, #32]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f003 031f 	and.w	r3, r3, #31
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	fa01 f303 	lsl.w	r3, r1, r3
 8006de8:	431a      	orrs	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	621a      	str	r2, [r3, #32]
}
 8006dee:	bf00      	nop
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
	...

08006dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e10:	2302      	movs	r3, #2
 8006e12:	e050      	b.n	8006eb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a1c      	ldr	r2, [pc, #112]	; (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d018      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e60:	d013      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a18      	ldr	r2, [pc, #96]	; (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00e      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a16      	ldr	r2, [pc, #88]	; (8006ecc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d009      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a15      	ldr	r2, [pc, #84]	; (8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d004      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a13      	ldr	r2, [pc, #76]	; (8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d10c      	bne.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40010000 	.word	0x40010000
 8006ec8:	40000400 	.word	0x40000400
 8006ecc:	40000800 	.word	0x40000800
 8006ed0:	40000c00 	.word	0x40000c00
 8006ed4:	40014000 	.word	0x40014000

08006ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f00:	b084      	sub	sp, #16
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	f107 001c 	add.w	r0, r7, #28
 8006f0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d122      	bne.n	8006f5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d105      	bne.n	8006f52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f9c0 	bl	80072d8 <USB_CoreReset>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]
 8006f5c:	e01a      	b.n	8006f94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f9b4 	bl	80072d8 <USB_CoreReset>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38
 8006f86:	e005      	b.n	8006f94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d10b      	bne.n	8006fb2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f043 0206 	orr.w	r2, r3, #6
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f043 0220 	orr.w	r2, r3, #32
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fbe:	b004      	add	sp, #16
 8006fc0:	4770      	bx	lr

08006fc2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f043 0201 	orr.w	r2, r3, #1
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f023 0201 	bic.w	r2, r3, #1
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007022:	78fb      	ldrb	r3, [r7, #3]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d115      	bne.n	8007054 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007034:	2001      	movs	r0, #1
 8007036:	f7fb fc51 	bl	80028dc <HAL_Delay>
      ms++;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3301      	adds	r3, #1
 800703e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f93a 	bl	80072ba <USB_GetMode>
 8007046:	4603      	mov	r3, r0
 8007048:	2b01      	cmp	r3, #1
 800704a:	d01e      	beq.n	800708a <USB_SetCurrentMode+0x84>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b31      	cmp	r3, #49	; 0x31
 8007050:	d9f0      	bls.n	8007034 <USB_SetCurrentMode+0x2e>
 8007052:	e01a      	b.n	800708a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d115      	bne.n	8007086 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007066:	2001      	movs	r0, #1
 8007068:	f7fb fc38 	bl	80028dc <HAL_Delay>
      ms++;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3301      	adds	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f921 	bl	80072ba <USB_GetMode>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d005      	beq.n	800708a <USB_SetCurrentMode+0x84>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b31      	cmp	r3, #49	; 0x31
 8007082:	d9f0      	bls.n	8007066 <USB_SetCurrentMode+0x60>
 8007084:	e001      	b.n	800708a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e005      	b.n	8007096 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b32      	cmp	r3, #50	; 0x32
 800708e:	d101      	bne.n	8007094 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e000      	b.n	8007096 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3301      	adds	r3, #1
 80070b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4a13      	ldr	r2, [pc, #76]	; (8007104 <USB_FlushTxFifo+0x64>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d901      	bls.n	80070c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e01b      	b.n	80070f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	daf2      	bge.n	80070ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	019b      	lsls	r3, r3, #6
 80070d0:	f043 0220 	orr.w	r2, r3, #32
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	3301      	adds	r3, #1
 80070dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4a08      	ldr	r2, [pc, #32]	; (8007104 <USB_FlushTxFifo+0x64>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d901      	bls.n	80070ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e006      	b.n	80070f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b20      	cmp	r3, #32
 80070f4:	d0f0      	beq.n	80070d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	00030d40 	.word	0x00030d40

08007108 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	3301      	adds	r3, #1
 8007118:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	4a11      	ldr	r2, [pc, #68]	; (8007164 <USB_FlushRxFifo+0x5c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d901      	bls.n	8007126 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e018      	b.n	8007158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	daf2      	bge.n	8007114 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2210      	movs	r2, #16
 8007136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4a08      	ldr	r2, [pc, #32]	; (8007164 <USB_FlushRxFifo+0x5c>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d901      	bls.n	800714a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e006      	b.n	8007158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	f003 0310 	and.w	r3, r3, #16
 8007152:	2b10      	cmp	r3, #16
 8007154:	d0f0      	beq.n	8007138 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	00030d40 	.word	0x00030d40

08007168 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007168:	b480      	push	{r7}
 800716a:	b089      	sub	sp, #36	; 0x24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	4611      	mov	r1, r2
 8007174:	461a      	mov	r2, r3
 8007176:	460b      	mov	r3, r1
 8007178:	71fb      	strb	r3, [r7, #7]
 800717a:	4613      	mov	r3, r2
 800717c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007186:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800718a:	2b00      	cmp	r3, #0
 800718c:	d123      	bne.n	80071d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800718e:	88bb      	ldrh	r3, [r7, #4]
 8007190:	3303      	adds	r3, #3
 8007192:	089b      	lsrs	r3, r3, #2
 8007194:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007196:	2300      	movs	r3, #0
 8007198:	61bb      	str	r3, [r7, #24]
 800719a:	e018      	b.n	80071ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	031a      	lsls	r2, r3, #12
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a8:	461a      	mov	r2, r3
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	3301      	adds	r3, #1
 80071b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	3301      	adds	r3, #1
 80071ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	3301      	adds	r3, #1
 80071c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	3301      	adds	r3, #1
 80071c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	3301      	adds	r3, #1
 80071cc:	61bb      	str	r3, [r7, #24]
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d3e2      	bcc.n	800719c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3724      	adds	r7, #36	; 0x24
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b08b      	sub	sp, #44	; 0x2c
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	4613      	mov	r3, r2
 80071f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80071fa:	88fb      	ldrh	r3, [r7, #6]
 80071fc:	089b      	lsrs	r3, r3, #2
 80071fe:	b29b      	uxth	r3, r3
 8007200:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007202:	88fb      	ldrh	r3, [r7, #6]
 8007204:	f003 0303 	and.w	r3, r3, #3
 8007208:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800720a:	2300      	movs	r3, #0
 800720c:	623b      	str	r3, [r7, #32]
 800720e:	e014      	b.n	800723a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	601a      	str	r2, [r3, #0]
    pDest++;
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	3301      	adds	r3, #1
 8007220:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	3301      	adds	r3, #1
 8007226:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722a:	3301      	adds	r3, #1
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	3301      	adds	r3, #1
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	3301      	adds	r3, #1
 8007238:	623b      	str	r3, [r7, #32]
 800723a:	6a3a      	ldr	r2, [r7, #32]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	429a      	cmp	r2, r3
 8007240:	d3e6      	bcc.n	8007210 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007242:	8bfb      	ldrh	r3, [r7, #30]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01e      	beq.n	8007286 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007252:	461a      	mov	r2, r3
 8007254:	f107 0310 	add.w	r3, r7, #16
 8007258:	6812      	ldr	r2, [r2, #0]
 800725a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	b2db      	uxtb	r3, r3
 8007262:	00db      	lsls	r3, r3, #3
 8007264:	fa22 f303 	lsr.w	r3, r2, r3
 8007268:	b2da      	uxtb	r2, r3
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	701a      	strb	r2, [r3, #0]
      i++;
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	3301      	adds	r3, #1
 8007272:	623b      	str	r3, [r7, #32]
      pDest++;
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	3301      	adds	r3, #1
 8007278:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800727a:	8bfb      	ldrh	r3, [r7, #30]
 800727c:	3b01      	subs	r3, #1
 800727e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007280:	8bfb      	ldrh	r3, [r7, #30]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1ea      	bne.n	800725c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007288:	4618      	mov	r0, r3
 800728a:	372c      	adds	r7, #44	; 0x2c
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	4013      	ands	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80072ac:	68fb      	ldr	r3, [r7, #12]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	f003 0301 	and.w	r3, r3, #1
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
	...

080072d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3301      	adds	r3, #1
 80072e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4a13      	ldr	r2, [pc, #76]	; (800733c <USB_CoreReset+0x64>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d901      	bls.n	80072f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e01b      	b.n	800732e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	daf2      	bge.n	80072e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	f043 0201 	orr.w	r2, r3, #1
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3301      	adds	r3, #1
 8007312:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4a09      	ldr	r2, [pc, #36]	; (800733c <USB_CoreReset+0x64>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d901      	bls.n	8007320 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e006      	b.n	800732e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b01      	cmp	r3, #1
 800732a:	d0f0      	beq.n	800730e <USB_CoreReset+0x36>

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	00030d40 	.word	0x00030d40

08007340 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007340:	b084      	sub	sp, #16
 8007342:	b580      	push	{r7, lr}
 8007344:	b086      	sub	sp, #24
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800734e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007360:	461a      	mov	r2, r3
 8007362:	2300      	movs	r3, #0
 8007364:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007392:	2b00      	cmp	r3, #0
 8007394:	d018      	beq.n	80073c8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	2b01      	cmp	r3, #1
 800739a:	d10a      	bne.n	80073b2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073aa:	f043 0304 	orr.w	r3, r3, #4
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	e014      	b.n	80073dc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073c0:	f023 0304 	bic.w	r3, r3, #4
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	e009      	b.n	80073dc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073d6:	f023 0304 	bic.w	r3, r3, #4
 80073da:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073dc:	2110      	movs	r1, #16
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff fe5e 	bl	80070a0 <USB_FlushTxFifo>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7ff fe8a 	bl	8007108 <USB_FlushRxFifo>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80073fe:	2300      	movs	r3, #0
 8007400:	613b      	str	r3, [r7, #16]
 8007402:	e015      	b.n	8007430 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4413      	add	r3, r2
 800740c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007410:	461a      	mov	r2, r3
 8007412:	f04f 33ff 	mov.w	r3, #4294967295
 8007416:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4413      	add	r3, r2
 8007420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007424:	461a      	mov	r2, r3
 8007426:	2300      	movs	r3, #0
 8007428:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	3301      	adds	r3, #1
 800742e:	613b      	str	r3, [r7, #16]
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	429a      	cmp	r2, r3
 8007436:	d3e5      	bcc.n	8007404 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f04f 32ff 	mov.w	r2, #4294967295
 8007444:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00b      	beq.n	800746a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007458:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a13      	ldr	r2, [pc, #76]	; (80074ac <USB_HostInit+0x16c>)
 800745e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a13      	ldr	r2, [pc, #76]	; (80074b0 <USB_HostInit+0x170>)
 8007464:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007468:	e009      	b.n	800747e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2280      	movs	r2, #128	; 0x80
 800746e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a10      	ldr	r2, [pc, #64]	; (80074b4 <USB_HostInit+0x174>)
 8007474:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a0f      	ldr	r2, [pc, #60]	; (80074b8 <USB_HostInit+0x178>)
 800747a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	2b00      	cmp	r3, #0
 8007482:	d105      	bne.n	8007490 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	f043 0210 	orr.w	r2, r3, #16
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699a      	ldr	r2, [r3, #24]
 8007494:	4b09      	ldr	r3, [pc, #36]	; (80074bc <USB_HostInit+0x17c>)
 8007496:	4313      	orrs	r3, r2
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800749c:	7dfb      	ldrb	r3, [r7, #23]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074a8:	b004      	add	sp, #16
 80074aa:	4770      	bx	lr
 80074ac:	01000200 	.word	0x01000200
 80074b0:	00e00300 	.word	0x00e00300
 80074b4:	00600080 	.word	0x00600080
 80074b8:	004000e0 	.word	0x004000e0
 80074bc:	a3200008 	.word	0xa3200008

080074c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074de:	f023 0303 	bic.w	r3, r3, #3
 80074e2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	78fb      	ldrb	r3, [r7, #3]
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	68f9      	ldr	r1, [r7, #12]
 80074f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80074f8:	4313      	orrs	r3, r2
 80074fa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80074fc:	78fb      	ldrb	r3, [r7, #3]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d107      	bne.n	8007512 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007508:	461a      	mov	r2, r3
 800750a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800750e:	6053      	str	r3, [r2, #4]
 8007510:	e009      	b.n	8007526 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	2b02      	cmp	r3, #2
 8007516:	d106      	bne.n	8007526 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800751e:	461a      	mov	r2, r3
 8007520:	f241 7370 	movw	r3, #6000	; 0x1770
 8007524:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007540:	2300      	movs	r3, #0
 8007542:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007554:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800755e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007562:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007564:	2064      	movs	r0, #100	; 0x64
 8007566:	f7fb f9b9 	bl	80028dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007576:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007578:	200a      	movs	r0, #10
 800757a:	f7fb f9af 	bl	80028dc <HAL_Delay>

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80075ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d109      	bne.n	80075cc <USB_DriveVbus+0x44>
 80075b8:	78fb      	ldrb	r3, [r7, #3]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d106      	bne.n	80075cc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80075c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80075ca:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d6:	d109      	bne.n	80075ec <USB_DriveVbus+0x64>
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d106      	bne.n	80075ec <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80075e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075ea:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b085      	sub	sp, #20
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007606:	2300      	movs	r3, #0
 8007608:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	0c5b      	lsrs	r3, r3, #17
 8007618:	f003 0303 	and.w	r3, r3, #3
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	b29b      	uxth	r3, r3
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
	...

0800764c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	4608      	mov	r0, r1
 8007656:	4611      	mov	r1, r2
 8007658:	461a      	mov	r2, r3
 800765a:	4603      	mov	r3, r0
 800765c:	70fb      	strb	r3, [r7, #3]
 800765e:	460b      	mov	r3, r1
 8007660:	70bb      	strb	r3, [r7, #2]
 8007662:	4613      	mov	r3, r2
 8007664:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	4413      	add	r3, r2
 8007676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800767a:	461a      	mov	r2, r3
 800767c:	f04f 33ff 	mov.w	r3, #4294967295
 8007680:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007682:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007686:	2b03      	cmp	r3, #3
 8007688:	d87e      	bhi.n	8007788 <USB_HC_Init+0x13c>
 800768a:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <USB_HC_Init+0x44>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076a1 	.word	0x080076a1
 8007694:	0800774b 	.word	0x0800774b
 8007698:	080076a1 	.word	0x080076a1
 800769c:	0800770d 	.word	0x0800770d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ac:	461a      	mov	r2, r3
 80076ae:	f240 439d 	movw	r3, #1181	; 0x49d
 80076b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80076b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	da10      	bge.n	80076de <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80076bc:	78fb      	ldrb	r3, [r7, #3]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	78fa      	ldrb	r2, [r7, #3]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076da:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80076dc:	e057      	b.n	800778e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d051      	beq.n	800778e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80076ea:	78fb      	ldrb	r3, [r7, #3]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	78fa      	ldrb	r2, [r7, #3]
 80076fa:	0151      	lsls	r1, r2, #5
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	440a      	add	r2, r1
 8007700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007704:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007708:	60d3      	str	r3, [r2, #12]
      break;
 800770a:	e040      	b.n	800778e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	4413      	add	r3, r2
 8007714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007718:	461a      	mov	r2, r3
 800771a:	f240 639d 	movw	r3, #1693	; 0x69d
 800771e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007720:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007724:	2b00      	cmp	r3, #0
 8007726:	da34      	bge.n	8007792 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007728:	78fb      	ldrb	r3, [r7, #3]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	4413      	add	r3, r2
 8007730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	78fa      	ldrb	r2, [r7, #3]
 8007738:	0151      	lsls	r1, r2, #5
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	440a      	add	r2, r1
 800773e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007746:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007748:	e023      	b.n	8007792 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800774a:	78fb      	ldrb	r3, [r7, #3]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	4413      	add	r3, r2
 8007752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007756:	461a      	mov	r2, r3
 8007758:	f240 2325 	movw	r3, #549	; 0x225
 800775c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800775e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007762:	2b00      	cmp	r3, #0
 8007764:	da17      	bge.n	8007796 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007766:	78fb      	ldrb	r3, [r7, #3]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	4413      	add	r3, r2
 800776e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	78fa      	ldrb	r2, [r7, #3]
 8007776:	0151      	lsls	r1, r2, #5
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	440a      	add	r2, r1
 800777c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007780:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007784:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007786:	e006      	b.n	8007796 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	77fb      	strb	r3, [r7, #31]
      break;
 800778c:	e004      	b.n	8007798 <USB_HC_Init+0x14c>
      break;
 800778e:	bf00      	nop
 8007790:	e002      	b.n	8007798 <USB_HC_Init+0x14c>
      break;
 8007792:	bf00      	nop
 8007794:	e000      	b.n	8007798 <USB_HC_Init+0x14c>
      break;
 8007796:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007798:	78fb      	ldrb	r3, [r7, #3]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	78fa      	ldrb	r2, [r7, #3]
 80077a8:	0151      	lsls	r1, r2, #5
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	440a      	add	r2, r1
 80077ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077b2:	f043 0302 	orr.w	r3, r3, #2
 80077b6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077be:	699a      	ldr	r2, [r3, #24]
 80077c0:	78fb      	ldrb	r3, [r7, #3]
 80077c2:	f003 030f 	and.w	r3, r3, #15
 80077c6:	2101      	movs	r1, #1
 80077c8:	fa01 f303 	lsl.w	r3, r1, r3
 80077cc:	6939      	ldr	r1, [r7, #16]
 80077ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80077d2:	4313      	orrs	r3, r2
 80077d4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80077e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	da03      	bge.n	80077f2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80077ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ee:	61bb      	str	r3, [r7, #24]
 80077f0:	e001      	b.n	80077f6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff feff 	bl	80075fa <USB_GetHostSpeed>
 80077fc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80077fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007802:	2b02      	cmp	r3, #2
 8007804:	d106      	bne.n	8007814 <USB_HC_Init+0x1c8>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b02      	cmp	r3, #2
 800780a:	d003      	beq.n	8007814 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800780c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007810:	617b      	str	r3, [r7, #20]
 8007812:	e001      	b.n	8007818 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007818:	787b      	ldrb	r3, [r7, #1]
 800781a:	059b      	lsls	r3, r3, #22
 800781c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007820:	78bb      	ldrb	r3, [r7, #2]
 8007822:	02db      	lsls	r3, r3, #11
 8007824:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007828:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800782a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800782e:	049b      	lsls	r3, r3, #18
 8007830:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007834:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007836:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007838:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800783c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007842:	78fb      	ldrb	r3, [r7, #3]
 8007844:	0159      	lsls	r1, r3, #5
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	440b      	add	r3, r1
 800784a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800784e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007854:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007856:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800785a:	2b03      	cmp	r3, #3
 800785c:	d003      	beq.n	8007866 <USB_HC_Init+0x21a>
 800785e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007862:	2b01      	cmp	r3, #1
 8007864:	d10f      	bne.n	8007886 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	4413      	add	r3, r2
 800786e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	78fa      	ldrb	r2, [r7, #3]
 8007876:	0151      	lsls	r1, r2, #5
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	440a      	add	r2, r1
 800787c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007880:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007884:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007886:	7ffb      	ldrb	r3, [r7, #31]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3720      	adds	r7, #32
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08c      	sub	sp, #48	; 0x30
 8007894:	af02      	add	r7, sp, #8
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	4613      	mov	r3, r2
 800789c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	785b      	ldrb	r3, [r3, #1]
 80078a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80078a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078ac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d02d      	beq.n	8007916 <USB_HC_StartXfer+0x86>
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	791b      	ldrb	r3, [r3, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d129      	bne.n	8007916 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80078c2:	79fb      	ldrb	r3, [r7, #7]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d117      	bne.n	80078f8 <USB_HC_StartXfer+0x68>
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	79db      	ldrb	r3, [r3, #7]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <USB_HC_StartXfer+0x48>
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	79db      	ldrb	r3, [r3, #7]
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d10f      	bne.n	80078f8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	69fa      	ldr	r2, [r7, #28]
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	6a3a      	ldr	r2, [r7, #32]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80078f8:	79fb      	ldrb	r3, [r7, #7]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10b      	bne.n	8007916 <USB_HC_StartXfer+0x86>
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	795b      	ldrb	r3, [r3, #5]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d107      	bne.n	8007916 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	785b      	ldrb	r3, [r3, #1]
 800790a:	4619      	mov	r1, r3
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 fa0f 	bl	8007d30 <USB_DoPing>
      return HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	e0f8      	b.n	8007b08 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d018      	beq.n	8007950 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	8912      	ldrh	r2, [r2, #8]
 8007926:	4413      	add	r3, r2
 8007928:	3b01      	subs	r3, #1
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	8912      	ldrh	r2, [r2, #8]
 800792e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007932:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007934:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007936:	8b7b      	ldrh	r3, [r7, #26]
 8007938:	429a      	cmp	r2, r3
 800793a:	d90b      	bls.n	8007954 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800793c:	8b7b      	ldrh	r3, [r7, #26]
 800793e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007940:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	8912      	ldrh	r2, [r2, #8]
 8007946:	fb03 f202 	mul.w	r2, r3, r2
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	611a      	str	r2, [r3, #16]
 800794e:	e001      	b.n	8007954 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007950:	2301      	movs	r3, #1
 8007952:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	78db      	ldrb	r3, [r3, #3]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d007      	beq.n	800796c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800795c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	8912      	ldrh	r2, [r2, #8]
 8007962:	fb03 f202 	mul.w	r2, r3, r2
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	611a      	str	r2, [r3, #16]
 800796a:	e003      	b.n	8007974 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	695a      	ldr	r2, [r3, #20]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800797c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800797e:	04d9      	lsls	r1, r3, #19
 8007980:	4b63      	ldr	r3, [pc, #396]	; (8007b10 <USB_HC_StartXfer+0x280>)
 8007982:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007984:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	7a9b      	ldrb	r3, [r3, #10]
 800798a:	075b      	lsls	r3, r3, #29
 800798c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007990:	69f9      	ldr	r1, [r7, #28]
 8007992:	0148      	lsls	r0, r1, #5
 8007994:	6a39      	ldr	r1, [r7, #32]
 8007996:	4401      	add	r1, r0
 8007998:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800799c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800799e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80079a0:	79fb      	ldrb	r3, [r7, #7]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d009      	beq.n	80079ba <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	68d9      	ldr	r1, [r3, #12]
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b6:	460a      	mov	r2, r1
 80079b8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	bf0c      	ite	eq
 80079ca:	2301      	moveq	r3, #1
 80079cc:	2300      	movne	r3, #0
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	69fa      	ldr	r2, [r7, #28]
 80079e2:	0151      	lsls	r1, r2, #5
 80079e4:	6a3a      	ldr	r2, [r7, #32]
 80079e6:	440a      	add	r2, r1
 80079e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80079f0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	7e7b      	ldrb	r3, [r7, #25]
 8007a02:	075b      	lsls	r3, r3, #29
 8007a04:	69f9      	ldr	r1, [r7, #28]
 8007a06:	0148      	lsls	r0, r1, #5
 8007a08:	6a39      	ldr	r1, [r7, #32]
 8007a0a:	4401      	add	r1, r0
 8007a0c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007a10:	4313      	orrs	r3, r2
 8007a12:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a2a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	78db      	ldrb	r3, [r3, #3]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d004      	beq.n	8007a3e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a3a:	613b      	str	r3, [r7, #16]
 8007a3c:	e003      	b.n	8007a46 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a44:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a4c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007a60:	79fb      	ldrb	r3, [r7, #7]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	e04e      	b.n	8007b08 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	78db      	ldrb	r3, [r3, #3]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d149      	bne.n	8007b06 <USB_HC_StartXfer+0x276>
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d045      	beq.n	8007b06 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	79db      	ldrb	r3, [r3, #7]
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	d830      	bhi.n	8007ae4 <USB_HC_StartXfer+0x254>
 8007a82:	a201      	add	r2, pc, #4	; (adr r2, 8007a88 <USB_HC_StartXfer+0x1f8>)
 8007a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a88:	08007a99 	.word	0x08007a99
 8007a8c:	08007abd 	.word	0x08007abd
 8007a90:	08007a99 	.word	0x08007a99
 8007a94:	08007abd 	.word	0x08007abd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	3303      	adds	r3, #3
 8007a9e:	089b      	lsrs	r3, r3, #2
 8007aa0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007aa2:	8afa      	ldrh	r2, [r7, #22]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d91c      	bls.n	8007ae8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	f043 0220 	orr.w	r2, r3, #32
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	619a      	str	r2, [r3, #24]
        }
        break;
 8007aba:	e015      	b.n	8007ae8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	3303      	adds	r3, #3
 8007ac2:	089b      	lsrs	r3, r3, #2
 8007ac4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007ac6:	8afa      	ldrh	r2, [r7, #22]
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d90a      	bls.n	8007aec <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007ae2:	e003      	b.n	8007aec <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007ae4:	bf00      	nop
 8007ae6:	e002      	b.n	8007aee <USB_HC_StartXfer+0x25e>
        break;
 8007ae8:	bf00      	nop
 8007aea:	e000      	b.n	8007aee <USB_HC_StartXfer+0x25e>
        break;
 8007aec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	68d9      	ldr	r1, [r3, #12]
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	785a      	ldrb	r2, [r3, #1]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	2000      	movs	r0, #0
 8007afe:	9000      	str	r0, [sp, #0]
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f7ff fb31 	bl	8007168 <USB_WritePacket>
  }

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3728      	adds	r7, #40	; 0x28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	1ff80000 	.word	0x1ff80000

08007b14 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	b29b      	uxth	r3, r3
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b089      	sub	sp, #36	; 0x24
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007b46:	78fb      	ldrb	r3, [r7, #3]
 8007b48:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	0c9b      	lsrs	r3, r3, #18
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	0fdb      	lsrs	r3, r3, #31
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f003 0320 	and.w	r3, r3, #32
 8007b82:	2b20      	cmp	r3, #32
 8007b84:	d104      	bne.n	8007b90 <USB_HC_Halt+0x5a>
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	e0c8      	b.n	8007d22 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <USB_HC_Halt+0x66>
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d163      	bne.n	8007c64 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	0151      	lsls	r1, r2, #5
 8007bae:	69fa      	ldr	r2, [r7, #28]
 8007bb0:	440a      	add	r2, r1
 8007bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f003 0320 	and.w	r3, r3, #32
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f040 80ab 	bne.w	8007d20 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d133      	bne.n	8007c3e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	0151      	lsls	r1, r2, #5
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	440a      	add	r2, r1
 8007bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bf4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	0151      	lsls	r1, r2, #5
 8007c08:	69fa      	ldr	r2, [r7, #28]
 8007c0a:	440a      	add	r2, r1
 8007c0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c14:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c22:	d81d      	bhi.n	8007c60 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c3a:	d0ec      	beq.n	8007c16 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c3c:	e070      	b.n	8007d20 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	0151      	lsls	r1, r2, #5
 8007c50:	69fa      	ldr	r2, [r7, #28]
 8007c52:	440a      	add	r2, r1
 8007c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c5c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c5e:	e05f      	b.n	8007d20 <USB_HC_Halt+0x1ea>
            break;
 8007c60:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c62:	e05d      	b.n	8007d20 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	0151      	lsls	r1, r2, #5
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	440a      	add	r2, r1
 8007c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c82:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d133      	bne.n	8007cfc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	0151      	lsls	r1, r2, #5
 8007ca6:	69fa      	ldr	r2, [r7, #28]
 8007ca8:	440a      	add	r2, r1
 8007caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cb2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	0151      	lsls	r1, r2, #5
 8007cc6:	69fa      	ldr	r2, [r7, #28]
 8007cc8:	440a      	add	r2, r1
 8007cca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cd2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ce0:	d81d      	bhi.n	8007d1e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cf8:	d0ec      	beq.n	8007cd4 <USB_HC_Halt+0x19e>
 8007cfa:	e011      	b.n	8007d20 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	0151      	lsls	r1, r2, #5
 8007d0e:	69fa      	ldr	r2, [r7, #28]
 8007d10:	440a      	add	r2, r1
 8007d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	e000      	b.n	8007d20 <USB_HC_Halt+0x1ea>
          break;
 8007d1e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3724      	adds	r7, #36	; 0x24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
	...

08007d30 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007d44:	2301      	movs	r3, #1
 8007d46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	04da      	lsls	r2, r3, #19
 8007d4c:	4b15      	ldr	r3, [pc, #84]	; (8007da4 <USB_DoPing+0x74>)
 8007d4e:	4013      	ands	r3, r2
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	0151      	lsls	r1, r2, #5
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	440a      	add	r2, r1
 8007d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d60:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d78:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d80:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	015a      	lsls	r2, r3, #5
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	4413      	add	r3, r2
 8007d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d8e:	461a      	mov	r2, r3
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	1ff80000 	.word	0x1ff80000

08007da8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7ff f911 	bl	8006fe4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007dc2:	2110      	movs	r1, #16
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7ff f96b 	bl	80070a0 <USB_FlushTxFifo>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7ff f997 	bl	8007108 <USB_FlushRxFifo>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007de4:	2300      	movs	r3, #0
 8007de6:	61bb      	str	r3, [r7, #24]
 8007de8:	e01f      	b.n	8007e2a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e1e:	461a      	mov	r2, r3
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	3301      	adds	r3, #1
 8007e28:	61bb      	str	r3, [r7, #24]
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	2b0f      	cmp	r3, #15
 8007e2e:	d9dc      	bls.n	8007dea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007e30:	2300      	movs	r3, #0
 8007e32:	61bb      	str	r3, [r7, #24]
 8007e34:	e034      	b.n	8007ea0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e4c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e5c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	3301      	adds	r3, #1
 8007e74:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e7c:	d80c      	bhi.n	8007e98 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e94:	d0ec      	beq.n	8007e70 <USB_StopHost+0xc8>
 8007e96:	e000      	b.n	8007e9a <USB_StopHost+0xf2>
        break;
 8007e98:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	61bb      	str	r3, [r7, #24]
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	2b0f      	cmp	r3, #15
 8007ea4:	d9c7      	bls.n	8007e36 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eac:	461a      	mov	r2, r3
 8007eae:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7ff f880 	bl	8006fc2 <USB_EnableGlobalInt>

  return ret;
 8007ec2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3720      	adds	r7, #32
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007ecc:	b590      	push	{r4, r7, lr}
 8007ece:	b089      	sub	sp, #36	; 0x24
 8007ed0:	af04      	add	r7, sp, #16
 8007ed2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	2102      	movs	r1, #2
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fc66 	bl	80087ac <USBH_FindInterface>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	2bff      	cmp	r3, #255	; 0xff
 8007ee8:	d002      	beq.n	8007ef0 <USBH_CDC_InterfaceInit+0x24>
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d901      	bls.n	8007ef4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e13d      	b.n	8008170 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fc3b 	bl	8008774 <USBH_SelectInterface>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007f08:	2302      	movs	r3, #2
 8007f0a:	e131      	b.n	8008170 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007f12:	2050      	movs	r0, #80	; 0x50
 8007f14:	f002 fafa 	bl	800a50c <malloc>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e11f      	b.n	8008170 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007f30:	2250      	movs	r2, #80	; 0x50
 8007f32:	2100      	movs	r1, #0
 8007f34:	68b8      	ldr	r0, [r7, #8]
 8007f36:	f002 faf9 	bl	800a52c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	211a      	movs	r1, #26
 8007f40:	fb01 f303 	mul.w	r3, r1, r3
 8007f44:	4413      	add	r3, r2
 8007f46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	b25b      	sxtb	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	da15      	bge.n	8007f7e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	211a      	movs	r1, #26
 8007f58:	fb01 f303 	mul.w	r3, r1, r3
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f62:	781a      	ldrb	r2, [r3, #0]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	211a      	movs	r1, #26
 8007f6e:	fb01 f303 	mul.w	r3, r1, r3
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007f78:	881a      	ldrh	r2, [r3, #0]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	785b      	ldrb	r3, [r3, #1]
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f001 ff2c 	bl	8009de2 <USBH_AllocPipe>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	7819      	ldrb	r1, [r3, #0]
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	7858      	ldrb	r0, [r3, #1]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	8952      	ldrh	r2, [r2, #10]
 8007faa:	9202      	str	r2, [sp, #8]
 8007fac:	2203      	movs	r2, #3
 8007fae:	9201      	str	r2, [sp, #4]
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	4623      	mov	r3, r4
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 fee4 	bl	8009d84 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f002 f9f3 	bl	800a3b0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007fca:	2300      	movs	r3, #0
 8007fcc:	2200      	movs	r2, #0
 8007fce:	210a      	movs	r1, #10
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fbeb 	bl	80087ac <USBH_FindInterface>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
 8007fdc:	2bff      	cmp	r3, #255	; 0xff
 8007fde:	d002      	beq.n	8007fe6 <USBH_CDC_InterfaceInit+0x11a>
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d901      	bls.n	8007fea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e0c2      	b.n	8008170 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	211a      	movs	r1, #26
 8007ff0:	fb01 f303 	mul.w	r3, r1, r3
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	b25b      	sxtb	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	da16      	bge.n	8008030 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	211a      	movs	r1, #26
 8008008:	fb01 f303 	mul.w	r3, r1, r3
 800800c:	4413      	add	r3, r2
 800800e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008012:	781a      	ldrb	r2, [r3, #0]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	211a      	movs	r1, #26
 800801e:	fb01 f303 	mul.w	r3, r1, r3
 8008022:	4413      	add	r3, r2
 8008024:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008028:	881a      	ldrh	r2, [r3, #0]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	835a      	strh	r2, [r3, #26]
 800802e:	e015      	b.n	800805c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	211a      	movs	r1, #26
 8008036:	fb01 f303 	mul.w	r3, r1, r3
 800803a:	4413      	add	r3, r2
 800803c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008040:	781a      	ldrb	r2, [r3, #0]
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008046:	7bfb      	ldrb	r3, [r7, #15]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	211a      	movs	r1, #26
 800804c:	fb01 f303 	mul.w	r3, r1, r3
 8008050:	4413      	add	r3, r2
 8008052:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008056:	881a      	ldrh	r2, [r3, #0]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800805c:	7bfb      	ldrb	r3, [r7, #15]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	211a      	movs	r1, #26
 8008062:	fb01 f303 	mul.w	r3, r1, r3
 8008066:	4413      	add	r3, r2
 8008068:	f203 3356 	addw	r3, r3, #854	; 0x356
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	b25b      	sxtb	r3, r3
 8008070:	2b00      	cmp	r3, #0
 8008072:	da16      	bge.n	80080a2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008074:	7bfb      	ldrb	r3, [r7, #15]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	211a      	movs	r1, #26
 800807a:	fb01 f303 	mul.w	r3, r1, r3
 800807e:	4413      	add	r3, r2
 8008080:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008084:	781a      	ldrb	r2, [r3, #0]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	211a      	movs	r1, #26
 8008090:	fb01 f303 	mul.w	r3, r1, r3
 8008094:	4413      	add	r3, r2
 8008096:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800809a:	881a      	ldrh	r2, [r3, #0]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	835a      	strh	r2, [r3, #26]
 80080a0:	e015      	b.n	80080ce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80080a2:	7bfb      	ldrb	r3, [r7, #15]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	211a      	movs	r1, #26
 80080a8:	fb01 f303 	mul.w	r3, r1, r3
 80080ac:	4413      	add	r3, r2
 80080ae:	f203 3356 	addw	r3, r3, #854	; 0x356
 80080b2:	781a      	ldrb	r2, [r3, #0]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	211a      	movs	r1, #26
 80080be:	fb01 f303 	mul.w	r3, r1, r3
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80080c8:	881a      	ldrh	r2, [r3, #0]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	7b9b      	ldrb	r3, [r3, #14]
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f001 fe84 	bl	8009de2 <USBH_AllocPipe>
 80080da:	4603      	mov	r3, r0
 80080dc:	461a      	mov	r2, r3
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	7bdb      	ldrb	r3, [r3, #15]
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 fe7a 	bl	8009de2 <USBH_AllocPipe>
 80080ee:	4603      	mov	r3, r0
 80080f0:	461a      	mov	r2, r3
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	7b59      	ldrb	r1, [r3, #13]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	7b98      	ldrb	r0, [r3, #14]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	8b12      	ldrh	r2, [r2, #24]
 800810e:	9202      	str	r2, [sp, #8]
 8008110:	2202      	movs	r2, #2
 8008112:	9201      	str	r2, [sp, #4]
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	4623      	mov	r3, r4
 8008118:	4602      	mov	r2, r0
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f001 fe32 	bl	8009d84 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	7b19      	ldrb	r1, [r3, #12]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	7bd8      	ldrb	r0, [r3, #15]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	8b52      	ldrh	r2, [r2, #26]
 8008138:	9202      	str	r2, [sp, #8]
 800813a:	2202      	movs	r2, #2
 800813c:	9201      	str	r2, [sp, #4]
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	4623      	mov	r3, r4
 8008142:	4602      	mov	r2, r0
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f001 fe1d 	bl	8009d84 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	7b5b      	ldrb	r3, [r3, #13]
 8008156:	2200      	movs	r2, #0
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f002 f928 	bl	800a3b0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	7b1b      	ldrb	r3, [r3, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f002 f921 	bl	800a3b0 <USBH_LL_SetToggle>

  return USBH_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3714      	adds	r7, #20
 8008174:	46bd      	mov	sp, r7
 8008176:	bd90      	pop	{r4, r7, pc}

08008178 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00e      	beq.n	80081b0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 fe12 	bl	8009dc2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 fe3d 	bl	8009e24 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	7b1b      	ldrb	r3, [r3, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00e      	beq.n	80081d6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	7b1b      	ldrb	r3, [r3, #12]
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f001 fdff 	bl	8009dc2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	7b1b      	ldrb	r3, [r3, #12]
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 fe2a 	bl	8009e24 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	7b5b      	ldrb	r3, [r3, #13]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00e      	beq.n	80081fc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	7b5b      	ldrb	r3, [r3, #13]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f001 fdec 	bl	8009dc2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	7b5b      	ldrb	r3, [r3, #13]
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 fe17 	bl	8009e24 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00b      	beq.n	8008220 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	4618      	mov	r0, r3
 8008212:	f002 f983 	bl	800a51c <free>
    phost->pActiveClass->pData = 0U;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800821c:	2200      	movs	r2, #0
 800821e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	3340      	adds	r3, #64	; 0x40
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f8b1 	bl	80083aa <GetLineCoding>
 8008248:	4603      	mov	r3, r0
 800824a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800824c:	7afb      	ldrb	r3, [r7, #11]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d105      	bne.n	800825e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008258:	2102      	movs	r1, #2
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800825e:	7afb      	ldrb	r3, [r7, #11]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008270:	2301      	movs	r3, #1
 8008272:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800827e:	69db      	ldr	r3, [r3, #28]
 8008280:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008288:	2b04      	cmp	r3, #4
 800828a:	d877      	bhi.n	800837c <USBH_CDC_Process+0x114>
 800828c:	a201      	add	r2, pc, #4	; (adr r2, 8008294 <USBH_CDC_Process+0x2c>)
 800828e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008292:	bf00      	nop
 8008294:	080082a9 	.word	0x080082a9
 8008298:	080082af 	.word	0x080082af
 800829c:	080082df 	.word	0x080082df
 80082a0:	08008353 	.word	0x08008353
 80082a4:	08008361 	.word	0x08008361
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	73fb      	strb	r3, [r7, #15]
      break;
 80082ac:	e06d      	b.n	800838a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f897 	bl	80083e8 <SetLineCoding>
 80082ba:	4603      	mov	r3, r0
 80082bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80082be:	7bbb      	ldrb	r3, [r7, #14]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d104      	bne.n	80082ce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80082cc:	e058      	b.n	8008380 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d055      	beq.n	8008380 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2204      	movs	r2, #4
 80082d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80082dc:	e050      	b.n	8008380 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	3340      	adds	r3, #64	; 0x40
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f860 	bl	80083aa <GetLineCoding>
 80082ea:	4603      	mov	r3, r0
 80082ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d126      	bne.n	8008342 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008306:	791b      	ldrb	r3, [r3, #4]
 8008308:	429a      	cmp	r2, r3
 800830a:	d13b      	bne.n	8008384 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008316:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008318:	429a      	cmp	r2, r3
 800831a:	d133      	bne.n	8008384 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008326:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008328:	429a      	cmp	r2, r3
 800832a:	d12b      	bne.n	8008384 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008334:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008336:	429a      	cmp	r2, r3
 8008338:	d124      	bne.n	8008384 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f958 	bl	80085f0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008340:	e020      	b.n	8008384 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008342:	7bbb      	ldrb	r3, [r7, #14]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d01d      	beq.n	8008384 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2204      	movs	r2, #4
 800834c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008350:	e018      	b.n	8008384 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f867 	bl	8008426 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f8da 	bl	8008512 <CDC_ProcessReception>
      break;
 800835e:	e014      	b.n	800838a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008360:	2100      	movs	r1, #0
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 ffef 	bl	8009346 <USBH_ClrFeature>
 8008368:	4603      	mov	r3, r0
 800836a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800837a:	e005      	b.n	8008388 <USBH_CDC_Process+0x120>

    default:
      break;
 800837c:	bf00      	nop
 800837e:	e004      	b.n	800838a <USBH_CDC_Process+0x122>
      break;
 8008380:	bf00      	nop
 8008382:	e002      	b.n	800838a <USBH_CDC_Process+0x122>
      break;
 8008384:	bf00      	nop
 8008386:	e000      	b.n	800838a <USBH_CDC_Process+0x122>
      break;
 8008388:	bf00      	nop

  }

  return status;
 800838a:	7bfb      	ldrb	r3, [r7, #15]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b082      	sub	sp, #8
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	22a1      	movs	r2, #161	; 0xa1
 80083b8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2221      	movs	r2, #33	; 0x21
 80083be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2207      	movs	r2, #7
 80083d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2207      	movs	r2, #7
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f001 fa81 	bl	80098e0 <USBH_CtlReq>
 80083de:	4603      	mov	r3, r0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2221      	movs	r2, #33	; 0x21
 80083f6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2220      	movs	r2, #32
 80083fc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2207      	movs	r2, #7
 800840e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2207      	movs	r2, #7
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f001 fa62 	bl	80098e0 <USBH_CtlReq>
 800841c:	4603      	mov	r3, r0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b086      	sub	sp, #24
 800842a:	af02      	add	r7, sp, #8
 800842c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008438:	2300      	movs	r3, #0
 800843a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008442:	2b01      	cmp	r3, #1
 8008444:	d002      	beq.n	800844c <CDC_ProcessTransmission+0x26>
 8008446:	2b02      	cmp	r3, #2
 8008448:	d023      	beq.n	8008492 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800844a:	e05e      	b.n	800850a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	8b12      	ldrh	r2, [r2, #24]
 8008454:	4293      	cmp	r3, r2
 8008456:	d90b      	bls.n	8008470 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	69d9      	ldr	r1, [r3, #28]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	8b1a      	ldrh	r2, [r3, #24]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	7b5b      	ldrb	r3, [r3, #13]
 8008464:	2001      	movs	r0, #1
 8008466:	9000      	str	r0, [sp, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f001 fc48 	bl	8009cfe <USBH_BulkSendData>
 800846e:	e00b      	b.n	8008488 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008478:	b29a      	uxth	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	7b5b      	ldrb	r3, [r3, #13]
 800847e:	2001      	movs	r0, #1
 8008480:	9000      	str	r0, [sp, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f001 fc3b 	bl	8009cfe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2202      	movs	r2, #2
 800848c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008490:	e03b      	b.n	800850a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	7b5b      	ldrb	r3, [r3, #13]
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 ff5f 	bl	800a35c <USBH_LL_GetURBState>
 800849e:	4603      	mov	r3, r0
 80084a0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80084a2:	7afb      	ldrb	r3, [r7, #11]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d128      	bne.n	80084fa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	8b12      	ldrh	r2, [r2, #24]
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d90e      	bls.n	80084d2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	8b12      	ldrh	r2, [r2, #24]
 80084bc:	1a9a      	subs	r2, r3, r2
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	8b12      	ldrh	r2, [r2, #24]
 80084ca:	441a      	add	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	61da      	str	r2, [r3, #28]
 80084d0:	e002      	b.n	80084d8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d004      	beq.n	80084ea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80084e8:	e00e      	b.n	8008508 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f868 	bl	80085c8 <USBH_CDC_TransmitCallback>
      break;
 80084f8:	e006      	b.n	8008508 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80084fa:	7afb      	ldrb	r3, [r7, #11]
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d103      	bne.n	8008508 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008508:	bf00      	nop
  }
}
 800850a:	bf00      	nop
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b086      	sub	sp, #24
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008520:	69db      	ldr	r3, [r3, #28]
 8008522:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008524:	2300      	movs	r3, #0
 8008526:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800852e:	2b03      	cmp	r3, #3
 8008530:	d002      	beq.n	8008538 <CDC_ProcessReception+0x26>
 8008532:	2b04      	cmp	r3, #4
 8008534:	d00e      	beq.n	8008554 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008536:	e043      	b.n	80085c0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	6a19      	ldr	r1, [r3, #32]
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	8b5a      	ldrh	r2, [r3, #26]
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	7b1b      	ldrb	r3, [r3, #12]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 fbff 	bl	8009d48 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	2204      	movs	r2, #4
 800854e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008552:	e035      	b.n	80085c0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	7b1b      	ldrb	r3, [r3, #12]
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f001 fefe 	bl	800a35c <USBH_LL_GetURBState>
 8008560:	4603      	mov	r3, r0
 8008562:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008564:	7cfb      	ldrb	r3, [r7, #19]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d129      	bne.n	80085be <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	7b1b      	ldrb	r3, [r3, #12]
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f001 fe61 	bl	800a238 <USBH_LL_GetLastXferSize>
 8008576:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	429a      	cmp	r2, r3
 8008580:	d016      	beq.n	80085b0 <CDC_ProcessReception+0x9e>
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	8b5b      	ldrh	r3, [r3, #26]
 8008586:	461a      	mov	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4293      	cmp	r3, r2
 800858c:	d910      	bls.n	80085b0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	1ad2      	subs	r2, r2, r3
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	6a1a      	ldr	r2, [r3, #32]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	441a      	add	r2, r3
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2203      	movs	r2, #3
 80085aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80085ae:	e006      	b.n	80085be <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f80f 	bl	80085dc <USBH_CDC_ReceiveCallback>
      break;
 80085be:	bf00      	nop
  }
}
 80085c0:	bf00      	nop
 80085c2:	3718      	adds	r7, #24
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	4613      	mov	r3, r2
 8008610:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008618:	2302      	movs	r3, #2
 800861a:	e029      	b.n	8008670 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	79fa      	ldrb	r2, [r7, #7]
 8008620:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f000 f81f 	bl	8008678 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d003      	beq.n	8008668 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f001 fd31 	bl	800a0d0 <USBH_LL_Init>

  return USBH_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008684:	2300      	movs	r3, #0
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	e009      	b.n	800869e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	33e0      	adds	r3, #224	; 0xe0
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	2200      	movs	r2, #0
 8008696:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3301      	adds	r3, #1
 800869c:	60fb      	str	r3, [r7, #12]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b0f      	cmp	r3, #15
 80086a2:	d9f2      	bls.n	800868a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]
 80086a8:	e009      	b.n	80086be <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80086b4:	2200      	movs	r2, #0
 80086b6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3301      	adds	r3, #1
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086c4:	d3f1      	bcc.n	80086aa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2240      	movs	r2, #64	; 0x40
 80086ea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d016      	beq.n	8008762 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10e      	bne.n	800875c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008744:	1c59      	adds	r1, r3, #1
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	33de      	adds	r3, #222	; 0xde
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]
 800875a:	e004      	b.n	8008766 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800875c:	2302      	movs	r3, #2
 800875e:	73fb      	strb	r3, [r7, #15]
 8008760:	e001      	b.n	8008766 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008762:	2302      	movs	r3, #2
 8008764:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008766:	7bfb      	ldrb	r3, [r7, #15]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008780:	2300      	movs	r3, #0
 8008782:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800878a:	78fa      	ldrb	r2, [r7, #3]
 800878c:	429a      	cmp	r2, r3
 800878e:	d204      	bcs.n	800879a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	78fa      	ldrb	r2, [r7, #3]
 8008794:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008798:	e001      	b.n	800879e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800879a:	2302      	movs	r3, #2
 800879c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800879e:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b087      	sub	sp, #28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	4608      	mov	r0, r1
 80087b6:	4611      	mov	r1, r2
 80087b8:	461a      	mov	r2, r3
 80087ba:	4603      	mov	r3, r0
 80087bc:	70fb      	strb	r3, [r7, #3]
 80087be:	460b      	mov	r3, r1
 80087c0:	70bb      	strb	r3, [r7, #2]
 80087c2:	4613      	mov	r3, r2
 80087c4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80087ca:	2300      	movs	r3, #0
 80087cc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80087d4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80087d6:	e025      	b.n	8008824 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80087d8:	7dfb      	ldrb	r3, [r7, #23]
 80087da:	221a      	movs	r2, #26
 80087dc:	fb02 f303 	mul.w	r3, r2, r3
 80087e0:	3308      	adds	r3, #8
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	4413      	add	r3, r2
 80087e6:	3302      	adds	r3, #2
 80087e8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	795b      	ldrb	r3, [r3, #5]
 80087ee:	78fa      	ldrb	r2, [r7, #3]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d002      	beq.n	80087fa <USBH_FindInterface+0x4e>
 80087f4:	78fb      	ldrb	r3, [r7, #3]
 80087f6:	2bff      	cmp	r3, #255	; 0xff
 80087f8:	d111      	bne.n	800881e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80087fe:	78ba      	ldrb	r2, [r7, #2]
 8008800:	429a      	cmp	r2, r3
 8008802:	d002      	beq.n	800880a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008804:	78bb      	ldrb	r3, [r7, #2]
 8008806:	2bff      	cmp	r3, #255	; 0xff
 8008808:	d109      	bne.n	800881e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800880e:	787a      	ldrb	r2, [r7, #1]
 8008810:	429a      	cmp	r2, r3
 8008812:	d002      	beq.n	800881a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008814:	787b      	ldrb	r3, [r7, #1]
 8008816:	2bff      	cmp	r3, #255	; 0xff
 8008818:	d101      	bne.n	800881e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	e006      	b.n	800882c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	3301      	adds	r3, #1
 8008822:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008824:	7dfb      	ldrb	r3, [r7, #23]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d9d6      	bls.n	80087d8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800882a:	23ff      	movs	r3, #255	; 0xff
}
 800882c:	4618      	mov	r0, r3
 800882e:	371c      	adds	r7, #28
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 fc81 	bl	800a148 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008846:	2101      	movs	r1, #1
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f001 fd9a 	bl	800a382 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b088      	sub	sp, #32
 800885c:	af04      	add	r7, sp, #16
 800885e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008860:	2302      	movs	r3, #2
 8008862:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008864:	2300      	movs	r3, #0
 8008866:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800886e:	b2db      	uxtb	r3, r3
 8008870:	2b01      	cmp	r3, #1
 8008872:	d102      	bne.n	800887a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2203      	movs	r2, #3
 8008878:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b0b      	cmp	r3, #11
 8008882:	f200 81be 	bhi.w	8008c02 <USBH_Process+0x3aa>
 8008886:	a201      	add	r2, pc, #4	; (adr r2, 800888c <USBH_Process+0x34>)
 8008888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888c:	080088bd 	.word	0x080088bd
 8008890:	080088ef 	.word	0x080088ef
 8008894:	08008957 	.word	0x08008957
 8008898:	08008b9d 	.word	0x08008b9d
 800889c:	08008c03 	.word	0x08008c03
 80088a0:	080089fb 	.word	0x080089fb
 80088a4:	08008b43 	.word	0x08008b43
 80088a8:	08008a31 	.word	0x08008a31
 80088ac:	08008a51 	.word	0x08008a51
 80088b0:	08008a71 	.word	0x08008a71
 80088b4:	08008ab5 	.word	0x08008ab5
 80088b8:	08008b85 	.word	0x08008b85
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 819e 	beq.w	8008c06 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80088d0:	20c8      	movs	r0, #200	; 0xc8
 80088d2:	f001 fd9d 	bl	800a410 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 fc93 	bl	800a202 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80088ec:	e18b      	b.n	8008c06 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d107      	bne.n	8008908 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2202      	movs	r2, #2
 8008904:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008906:	e18d      	b.n	8008c24 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800890e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008912:	d914      	bls.n	800893e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800891a:	3301      	adds	r3, #1
 800891c:	b2da      	uxtb	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800892a:	2b03      	cmp	r3, #3
 800892c:	d903      	bls.n	8008936 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	220d      	movs	r2, #13
 8008932:	701a      	strb	r2, [r3, #0]
      break;
 8008934:	e176      	b.n	8008c24 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	701a      	strb	r2, [r3, #0]
      break;
 800893c:	e172      	b.n	8008c24 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008944:	f103 020a 	add.w	r2, r3, #10
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800894e:	200a      	movs	r0, #10
 8008950:	f001 fd5e 	bl	800a410 <USBH_Delay>
      break;
 8008954:	e166      	b.n	8008c24 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800895c:	2b00      	cmp	r3, #0
 800895e:	d005      	beq.n	800896c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008966:	2104      	movs	r1, #4
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800896c:	2064      	movs	r0, #100	; 0x64
 800896e:	f001 fd4f 	bl	800a410 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f001 fc1e 	bl	800a1b4 <USBH_LL_GetSpeed>
 8008978:	4603      	mov	r3, r0
 800897a:	461a      	mov	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2205      	movs	r2, #5
 8008986:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008988:	2100      	movs	r1, #0
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f001 fa29 	bl	8009de2 <USBH_AllocPipe>
 8008990:	4603      	mov	r3, r0
 8008992:	461a      	mov	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008998:	2180      	movs	r1, #128	; 0x80
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f001 fa21 	bl	8009de2 <USBH_AllocPipe>
 80089a0:	4603      	mov	r3, r0
 80089a2:	461a      	mov	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	7919      	ldrb	r1, [r3, #4]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80089bc:	b292      	uxth	r2, r2
 80089be:	9202      	str	r2, [sp, #8]
 80089c0:	2200      	movs	r2, #0
 80089c2:	9201      	str	r2, [sp, #4]
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	4603      	mov	r3, r0
 80089c8:	2280      	movs	r2, #128	; 0x80
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f001 f9da 	bl	8009d84 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	7959      	ldrb	r1, [r3, #5]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80089e4:	b292      	uxth	r2, r2
 80089e6:	9202      	str	r2, [sp, #8]
 80089e8:	2200      	movs	r2, #0
 80089ea:	9201      	str	r2, [sp, #4]
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	4603      	mov	r3, r0
 80089f0:	2200      	movs	r2, #0
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f001 f9c6 	bl	8009d84 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089f8:	e114      	b.n	8008c24 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f918 	bl	8008c30 <USBH_HandleEnum>
 8008a00:	4603      	mov	r3, r0
 8008a02:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008a04:	7bbb      	ldrb	r3, [r7, #14]
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f040 80fe 	bne.w	8008c0a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d103      	bne.n	8008a28 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2208      	movs	r2, #8
 8008a24:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008a26:	e0f0      	b.n	8008c0a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2207      	movs	r2, #7
 8008a2c:	701a      	strb	r2, [r3, #0]
      break;
 8008a2e:	e0ec      	b.n	8008c0a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 80e9 	beq.w	8008c0e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a42:	2101      	movs	r1, #1
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2208      	movs	r2, #8
 8008a4c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008a4e:	e0de      	b.n	8008c0e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fc2c 	bl	80092b8 <USBH_SetCfg>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f040 80d5 	bne.w	8008c12 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2209      	movs	r2, #9
 8008a6c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a6e:	e0d0      	b.n	8008c12 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008a76:	f003 0320 	and.w	r3, r3, #32
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d016      	beq.n	8008aac <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008a7e:	2101      	movs	r1, #1
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fc3c 	bl	80092fe <USBH_SetFeature>
 8008a86:	4603      	mov	r3, r0
 8008a88:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d103      	bne.n	8008a9a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	220a      	movs	r2, #10
 8008a96:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a98:	e0bd      	b.n	8008c16 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008a9a:	7bbb      	ldrb	r3, [r7, #14]
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	f040 80b9 	bne.w	8008c16 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	220a      	movs	r2, #10
 8008aa8:	701a      	strb	r2, [r3, #0]
      break;
 8008aaa:	e0b4      	b.n	8008c16 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	220a      	movs	r2, #10
 8008ab0:	701a      	strb	r2, [r3, #0]
      break;
 8008ab2:	e0b0      	b.n	8008c16 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f000 80ad 	beq.w	8008c1a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]
 8008acc:	e016      	b.n	8008afc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008ace:	7bfa      	ldrb	r2, [r7, #15]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	32de      	adds	r2, #222	; 0xde
 8008ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad8:	791a      	ldrb	r2, [r3, #4]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d108      	bne.n	8008af6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008ae4:	7bfa      	ldrb	r2, [r7, #15]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	32de      	adds	r2, #222	; 0xde
 8008aea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008af4:	e005      	b.n	8008b02 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
 8008af8:	3301      	adds	r3, #1
 8008afa:	73fb      	strb	r3, [r7, #15]
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0e5      	beq.n	8008ace <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d016      	beq.n	8008b3a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	4798      	blx	r3
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d109      	bne.n	8008b32 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2206      	movs	r2, #6
 8008b22:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b2a:	2103      	movs	r1, #3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b30:	e073      	b.n	8008c1a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	220d      	movs	r2, #13
 8008b36:	701a      	strb	r2, [r3, #0]
      break;
 8008b38:	e06f      	b.n	8008c1a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	220d      	movs	r2, #13
 8008b3e:	701a      	strb	r2, [r3, #0]
      break;
 8008b40:	e06b      	b.n	8008c1a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d017      	beq.n	8008b7c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	4798      	blx	r3
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d103      	bne.n	8008b6c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	220b      	movs	r2, #11
 8008b68:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b6a:	e058      	b.n	8008c1e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d154      	bne.n	8008c1e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	220d      	movs	r2, #13
 8008b78:	701a      	strb	r2, [r3, #0]
      break;
 8008b7a:	e050      	b.n	8008c1e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	220d      	movs	r2, #13
 8008b80:	701a      	strb	r2, [r3, #0]
      break;
 8008b82:	e04c      	b.n	8008c1e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d049      	beq.n	8008c22 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	4798      	blx	r3
      }
      break;
 8008b9a:	e042      	b.n	8008c22 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7ff fd67 	bl	8008678 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d009      	beq.n	8008bc8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d005      	beq.n	8008bde <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008bd8:	2105      	movs	r1, #5
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d107      	bne.n	8008bfa <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff fe20 	bl	8008838 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008bf8:	e014      	b.n	8008c24 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f001 faa4 	bl	800a148 <USBH_LL_Start>
      break;
 8008c00:	e010      	b.n	8008c24 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008c02:	bf00      	nop
 8008c04:	e00e      	b.n	8008c24 <USBH_Process+0x3cc>
      break;
 8008c06:	bf00      	nop
 8008c08:	e00c      	b.n	8008c24 <USBH_Process+0x3cc>
      break;
 8008c0a:	bf00      	nop
 8008c0c:	e00a      	b.n	8008c24 <USBH_Process+0x3cc>
    break;
 8008c0e:	bf00      	nop
 8008c10:	e008      	b.n	8008c24 <USBH_Process+0x3cc>
      break;
 8008c12:	bf00      	nop
 8008c14:	e006      	b.n	8008c24 <USBH_Process+0x3cc>
      break;
 8008c16:	bf00      	nop
 8008c18:	e004      	b.n	8008c24 <USBH_Process+0x3cc>
      break;
 8008c1a:	bf00      	nop
 8008c1c:	e002      	b.n	8008c24 <USBH_Process+0x3cc>
      break;
 8008c1e:	bf00      	nop
 8008c20:	e000      	b.n	8008c24 <USBH_Process+0x3cc>
      break;
 8008c22:	bf00      	nop
  }
  return USBH_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop

08008c30 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b088      	sub	sp, #32
 8008c34:	af04      	add	r7, sp, #16
 8008c36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	785b      	ldrb	r3, [r3, #1]
 8008c44:	2b07      	cmp	r3, #7
 8008c46:	f200 81c1 	bhi.w	8008fcc <USBH_HandleEnum+0x39c>
 8008c4a:	a201      	add	r2, pc, #4	; (adr r2, 8008c50 <USBH_HandleEnum+0x20>)
 8008c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c50:	08008c71 	.word	0x08008c71
 8008c54:	08008d2f 	.word	0x08008d2f
 8008c58:	08008d99 	.word	0x08008d99
 8008c5c:	08008e27 	.word	0x08008e27
 8008c60:	08008e91 	.word	0x08008e91
 8008c64:	08008f01 	.word	0x08008f01
 8008c68:	08008f47 	.word	0x08008f47
 8008c6c:	08008f8d 	.word	0x08008f8d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008c70:	2108      	movs	r1, #8
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fa50 	bl	8009118 <USBH_Get_DevDesc>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d130      	bne.n	8008ce4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	7919      	ldrb	r1, [r3, #4]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ca6:	b292      	uxth	r2, r2
 8008ca8:	9202      	str	r2, [sp, #8]
 8008caa:	2200      	movs	r2, #0
 8008cac:	9201      	str	r2, [sp, #4]
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2280      	movs	r2, #128	; 0x80
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f001 f865 	bl	8009d84 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	7959      	ldrb	r1, [r3, #5]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008cce:	b292      	uxth	r2, r2
 8008cd0:	9202      	str	r2, [sp, #8]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	9201      	str	r2, [sp, #4]
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2200      	movs	r2, #0
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f001 f851 	bl	8009d84 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008ce2:	e175      	b.n	8008fd0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	f040 8172 	bne.w	8008fd0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	b2da      	uxtb	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d903      	bls.n	8008d0e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	220d      	movs	r2, #13
 8008d0a:	701a      	strb	r2, [r3, #0]
      break;
 8008d0c:	e160      	b.n	8008fd0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	795b      	ldrb	r3, [r3, #5]
 8008d12:	4619      	mov	r1, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f001 f885 	bl	8009e24 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	791b      	ldrb	r3, [r3, #4]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 f87f 	bl	8009e24 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	701a      	strb	r2, [r3, #0]
      break;
 8008d2c:	e150      	b.n	8008fd0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008d2e:	2112      	movs	r1, #18
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f9f1 	bl	8009118 <USBH_Get_DevDesc>
 8008d36:	4603      	mov	r3, r0
 8008d38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d103      	bne.n	8008d48 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008d46:	e145      	b.n	8008fd4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	f040 8142 	bne.w	8008fd4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d56:	3301      	adds	r3, #1
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	d903      	bls.n	8008d72 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	220d      	movs	r2, #13
 8008d6e:	701a      	strb	r2, [r3, #0]
      break;
 8008d70:	e130      	b.n	8008fd4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	795b      	ldrb	r3, [r3, #5]
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f001 f853 	bl	8009e24 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	791b      	ldrb	r3, [r3, #4]
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f001 f84d 	bl	8009e24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	701a      	strb	r2, [r3, #0]
      break;
 8008d96:	e11d      	b.n	8008fd4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008d98:	2101      	movs	r1, #1
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fa68 	bl	8009270 <USBH_SetAddress>
 8008da0:	4603      	mov	r3, r0
 8008da2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d132      	bne.n	8008e10 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008daa:	2002      	movs	r0, #2
 8008dac:	f001 fb30 	bl	800a410 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2203      	movs	r2, #3
 8008dbc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	7919      	ldrb	r1, [r3, #4]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008dd2:	b292      	uxth	r2, r2
 8008dd4:	9202      	str	r2, [sp, #8]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	9201      	str	r2, [sp, #4]
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2280      	movs	r2, #128	; 0x80
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 ffcf 	bl	8009d84 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	7959      	ldrb	r1, [r3, #5]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008dfa:	b292      	uxth	r2, r2
 8008dfc:	9202      	str	r2, [sp, #8]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	9201      	str	r2, [sp, #4]
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	4603      	mov	r3, r0
 8008e06:	2200      	movs	r2, #0
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 ffbb 	bl	8009d84 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008e0e:	e0e3      	b.n	8008fd8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	f040 80e0 	bne.w	8008fd8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	220d      	movs	r2, #13
 8008e1c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	705a      	strb	r2, [r3, #1]
      break;
 8008e24:	e0d8      	b.n	8008fd8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008e26:	2109      	movs	r1, #9
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f99d 	bl	8009168 <USBH_Get_CfgDesc>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e32:	7bbb      	ldrb	r3, [r7, #14]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d103      	bne.n	8008e40 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2204      	movs	r2, #4
 8008e3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e3e:	e0cd      	b.n	8008fdc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e40:	7bbb      	ldrb	r3, [r7, #14]
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	f040 80ca 	bne.w	8008fdc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e4e:	3301      	adds	r3, #1
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d903      	bls.n	8008e6a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	220d      	movs	r2, #13
 8008e66:	701a      	strb	r2, [r3, #0]
      break;
 8008e68:	e0b8      	b.n	8008fdc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	795b      	ldrb	r3, [r3, #5]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 ffd7 	bl	8009e24 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	791b      	ldrb	r3, [r3, #4]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 ffd1 	bl	8009e24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	701a      	strb	r2, [r3, #0]
      break;
 8008e8e:	e0a5      	b.n	8008fdc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f965 	bl	8009168 <USBH_Get_CfgDesc>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ea2:	7bbb      	ldrb	r3, [r7, #14]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d103      	bne.n	8008eb0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2205      	movs	r2, #5
 8008eac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008eae:	e097      	b.n	8008fe0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008eb0:	7bbb      	ldrb	r3, [r7, #14]
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	f040 8094 	bne.w	8008fe0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d903      	bls.n	8008eda <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	220d      	movs	r2, #13
 8008ed6:	701a      	strb	r2, [r3, #0]
      break;
 8008ed8:	e082      	b.n	8008fe0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	795b      	ldrb	r3, [r3, #5]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 ff9f 	bl	8009e24 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	791b      	ldrb	r3, [r3, #4]
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 ff99 	bl	8009e24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	701a      	strb	r2, [r3, #0]
      break;
 8008efe:	e06f      	b.n	8008fe0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d019      	beq.n	8008f3e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008f16:	23ff      	movs	r3, #255	; 0xff
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f949 	bl	80091b0 <USBH_Get_StringDesc>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f22:	7bbb      	ldrb	r3, [r7, #14]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d103      	bne.n	8008f30 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2206      	movs	r2, #6
 8008f2c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f2e:	e059      	b.n	8008fe4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f30:	7bbb      	ldrb	r3, [r7, #14]
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d156      	bne.n	8008fe4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2206      	movs	r2, #6
 8008f3a:	705a      	strb	r2, [r3, #1]
      break;
 8008f3c:	e052      	b.n	8008fe4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2206      	movs	r2, #6
 8008f42:	705a      	strb	r2, [r3, #1]
      break;
 8008f44:	e04e      	b.n	8008fe4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d019      	beq.n	8008f84 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008f5c:	23ff      	movs	r3, #255	; 0xff
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f926 	bl	80091b0 <USBH_Get_StringDesc>
 8008f64:	4603      	mov	r3, r0
 8008f66:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f68:	7bbb      	ldrb	r3, [r7, #14]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d103      	bne.n	8008f76 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2207      	movs	r2, #7
 8008f72:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f74:	e038      	b.n	8008fe8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d135      	bne.n	8008fe8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2207      	movs	r2, #7
 8008f80:	705a      	strb	r2, [r3, #1]
      break;
 8008f82:	e031      	b.n	8008fe8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2207      	movs	r2, #7
 8008f88:	705a      	strb	r2, [r3, #1]
      break;
 8008f8a:	e02d      	b.n	8008fe8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d017      	beq.n	8008fc6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008fa2:	23ff      	movs	r3, #255	; 0xff
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f903 	bl	80091b0 <USBH_Get_StringDesc>
 8008faa:	4603      	mov	r3, r0
 8008fac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008fae:	7bbb      	ldrb	r3, [r7, #14]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d102      	bne.n	8008fba <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008fb8:	e018      	b.n	8008fec <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fba:	7bbb      	ldrb	r3, [r7, #14]
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d115      	bne.n	8008fec <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8008fc4:	e012      	b.n	8008fec <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8008fca:	e00f      	b.n	8008fec <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008fcc:	bf00      	nop
 8008fce:	e00e      	b.n	8008fee <USBH_HandleEnum+0x3be>
      break;
 8008fd0:	bf00      	nop
 8008fd2:	e00c      	b.n	8008fee <USBH_HandleEnum+0x3be>
      break;
 8008fd4:	bf00      	nop
 8008fd6:	e00a      	b.n	8008fee <USBH_HandleEnum+0x3be>
      break;
 8008fd8:	bf00      	nop
 8008fda:	e008      	b.n	8008fee <USBH_HandleEnum+0x3be>
      break;
 8008fdc:	bf00      	nop
 8008fde:	e006      	b.n	8008fee <USBH_HandleEnum+0x3be>
      break;
 8008fe0:	bf00      	nop
 8008fe2:	e004      	b.n	8008fee <USBH_HandleEnum+0x3be>
      break;
 8008fe4:	bf00      	nop
 8008fe6:	e002      	b.n	8008fee <USBH_HandleEnum+0x3be>
      break;
 8008fe8:	bf00      	nop
 8008fea:	e000      	b.n	8008fee <USBH_HandleEnum+0x3be>
      break;
 8008fec:	bf00      	nop
  }
  return Status;
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	683a      	ldr	r2, [r7, #0]
 8009006:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800900a:	bf00      	nop
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009024:	1c5a      	adds	r2, r3, #1
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f804 	bl	800903a <USBH_HandleSof>
}
 8009032:	bf00      	nop
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b082      	sub	sp, #8
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b0b      	cmp	r3, #11
 800904a:	d10a      	bne.n	8009062 <USBH_HandleSof+0x28>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009052:	2b00      	cmp	r3, #0
 8009054:	d005      	beq.n	8009062 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	4798      	blx	r3
  }
}
 8009062:	bf00      	nop
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800906a:	b480      	push	{r7}
 800906c:	b083      	sub	sp, #12
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800907a:	bf00      	nop
}
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009086:	b480      	push	{r7}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009096:	bf00      	nop
}
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f001 f844 	bl	800a17e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	791b      	ldrb	r3, [r3, #4]
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fe91 	bl	8009e24 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	795b      	ldrb	r3, [r3, #5]
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fe8b 	bl	8009e24 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af02      	add	r7, sp, #8
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800912a:	78fb      	ldrb	r3, [r7, #3]
 800912c:	b29b      	uxth	r3, r3
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	4613      	mov	r3, r2
 8009132:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009136:	2100      	movs	r1, #0
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f864 	bl	8009206 <USBH_GetDescriptor>
 800913e:	4603      	mov	r3, r0
 8009140:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009142:	7bfb      	ldrb	r3, [r7, #15]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d10a      	bne.n	800915e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009154:	78fa      	ldrb	r2, [r7, #3]
 8009156:	b292      	uxth	r2, r2
 8009158:	4619      	mov	r1, r3
 800915a:	f000 f918 	bl	800938e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800915e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af02      	add	r7, sp, #8
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	331c      	adds	r3, #28
 8009178:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800917a:	887b      	ldrh	r3, [r7, #2]
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009184:	2100      	movs	r1, #0
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f83d 	bl	8009206 <USBH_GetDescriptor>
 800918c:	4603      	mov	r3, r0
 800918e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009190:	7bfb      	ldrb	r3, [r7, #15]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d107      	bne.n	80091a6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009196:	887b      	ldrh	r3, [r7, #2]
 8009198:	461a      	mov	r2, r3
 800919a:	68b9      	ldr	r1, [r7, #8]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f987 	bl	80094b0 <USBH_ParseCfgDesc>
 80091a2:	4603      	mov	r3, r0
 80091a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b088      	sub	sp, #32
 80091b4:	af02      	add	r7, sp, #8
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	607a      	str	r2, [r7, #4]
 80091ba:	461a      	mov	r2, r3
 80091bc:	460b      	mov	r3, r1
 80091be:	72fb      	strb	r3, [r7, #11]
 80091c0:	4613      	mov	r3, r2
 80091c2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80091c4:	7afb      	ldrb	r3, [r7, #11]
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80091cc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80091d4:	893b      	ldrh	r3, [r7, #8]
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	460b      	mov	r3, r1
 80091da:	2100      	movs	r1, #0
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f000 f812 	bl	8009206 <USBH_GetDescriptor>
 80091e2:	4603      	mov	r3, r0
 80091e4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d107      	bne.n	80091fc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80091f2:	893a      	ldrh	r2, [r7, #8]
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fb24 	bl	8009844 <USBH_ParseStringDesc>
  }

  return status;
 80091fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3718      	adds	r7, #24
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	60f8      	str	r0, [r7, #12]
 800920e:	607b      	str	r3, [r7, #4]
 8009210:	460b      	mov	r3, r1
 8009212:	72fb      	strb	r3, [r7, #11]
 8009214:	4613      	mov	r3, r2
 8009216:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	789b      	ldrb	r3, [r3, #2]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d11c      	bne.n	800925a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009220:	7afb      	ldrb	r3, [r7, #11]
 8009222:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009226:	b2da      	uxtb	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2206      	movs	r2, #6
 8009230:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	893a      	ldrh	r2, [r7, #8]
 8009236:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009238:	893b      	ldrh	r3, [r7, #8]
 800923a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800923e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009242:	d104      	bne.n	800924e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f240 4209 	movw	r2, #1033	; 0x409
 800924a:	829a      	strh	r2, [r3, #20]
 800924c:	e002      	b.n	8009254 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	8b3a      	ldrh	r2, [r7, #24]
 8009258:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800925a:	8b3b      	ldrh	r3, [r7, #24]
 800925c:	461a      	mov	r2, r3
 800925e:	6879      	ldr	r1, [r7, #4]
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f000 fb3d 	bl	80098e0 <USBH_CtlReq>
 8009266:	4603      	mov	r3, r0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	789b      	ldrb	r3, [r3, #2]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d10f      	bne.n	80092a4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2205      	movs	r2, #5
 800928e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009290:	78fb      	ldrb	r3, [r7, #3]
 8009292:	b29a      	uxth	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80092a4:	2200      	movs	r2, #0
 80092a6:	2100      	movs	r1, #0
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fb19 	bl	80098e0 <USBH_CtlReq>
 80092ae:	4603      	mov	r3, r0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	460b      	mov	r3, r1
 80092c2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	789b      	ldrb	r3, [r3, #2]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d10e      	bne.n	80092ea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2209      	movs	r2, #9
 80092d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	887a      	ldrh	r2, [r7, #2]
 80092dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80092ea:	2200      	movs	r2, #0
 80092ec:	2100      	movs	r1, #0
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 faf6 	bl	80098e0 <USBH_CtlReq>
 80092f4:	4603      	mov	r3, r0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	460b      	mov	r3, r1
 8009308:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	789b      	ldrb	r3, [r3, #2]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d10f      	bne.n	8009332 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2203      	movs	r2, #3
 800931c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800931e:	78fb      	ldrb	r3, [r7, #3]
 8009320:	b29a      	uxth	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009332:	2200      	movs	r2, #0
 8009334:	2100      	movs	r1, #0
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fad2 	bl	80098e0 <USBH_CtlReq>
 800933c:	4603      	mov	r3, r0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	789b      	ldrb	r3, [r3, #2]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d10f      	bne.n	800937a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2202      	movs	r2, #2
 800935e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800936c:	78fb      	ldrb	r3, [r7, #3]
 800936e:	b29a      	uxth	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800937a:	2200      	movs	r2, #0
 800937c:	2100      	movs	r1, #0
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 faae 	bl	80098e0 <USBH_CtlReq>
 8009384:	4603      	mov	r3, r0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800938e:	b480      	push	{r7}
 8009390:	b085      	sub	sp, #20
 8009392:	af00      	add	r7, sp, #0
 8009394:	60f8      	str	r0, [r7, #12]
 8009396:	60b9      	str	r1, [r7, #8]
 8009398:	4613      	mov	r3, r2
 800939a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	781a      	ldrb	r2, [r3, #0]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	785a      	ldrb	r2, [r3, #1]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	3302      	adds	r3, #2
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	3303      	adds	r3, #3
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	021b      	lsls	r3, r3, #8
 80093be:	b29b      	uxth	r3, r3
 80093c0:	4313      	orrs	r3, r2
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	791a      	ldrb	r2, [r3, #4]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	795a      	ldrb	r2, [r3, #5]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	799a      	ldrb	r2, [r3, #6]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	79da      	ldrb	r2, [r3, #7]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	79db      	ldrb	r3, [r3, #7]
 80093ec:	2b20      	cmp	r3, #32
 80093ee:	dc11      	bgt.n	8009414 <USBH_ParseDevDesc+0x86>
 80093f0:	2b08      	cmp	r3, #8
 80093f2:	db16      	blt.n	8009422 <USBH_ParseDevDesc+0x94>
 80093f4:	3b08      	subs	r3, #8
 80093f6:	2201      	movs	r2, #1
 80093f8:	fa02 f303 	lsl.w	r3, r2, r3
 80093fc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009404:	2b00      	cmp	r3, #0
 8009406:	bf14      	ite	ne
 8009408:	2301      	movne	r3, #1
 800940a:	2300      	moveq	r3, #0
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d102      	bne.n	8009418 <USBH_ParseDevDesc+0x8a>
 8009412:	e006      	b.n	8009422 <USBH_ParseDevDesc+0x94>
 8009414:	2b40      	cmp	r3, #64	; 0x40
 8009416:	d104      	bne.n	8009422 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	79da      	ldrb	r2, [r3, #7]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	71da      	strb	r2, [r3, #7]
      break;
 8009420:	e003      	b.n	800942a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2240      	movs	r2, #64	; 0x40
 8009426:	71da      	strb	r2, [r3, #7]
      break;
 8009428:	bf00      	nop
  }

  if (length > 8U)
 800942a:	88fb      	ldrh	r3, [r7, #6]
 800942c:	2b08      	cmp	r3, #8
 800942e:	d939      	bls.n	80094a4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	3308      	adds	r3, #8
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	b29a      	uxth	r2, r3
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	3309      	adds	r3, #9
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	b29b      	uxth	r3, r3
 8009440:	021b      	lsls	r3, r3, #8
 8009442:	b29b      	uxth	r3, r3
 8009444:	4313      	orrs	r3, r2
 8009446:	b29a      	uxth	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	330a      	adds	r3, #10
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	b29a      	uxth	r2, r3
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	330b      	adds	r3, #11
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	b29b      	uxth	r3, r3
 800945c:	021b      	lsls	r3, r3, #8
 800945e:	b29b      	uxth	r3, r3
 8009460:	4313      	orrs	r3, r2
 8009462:	b29a      	uxth	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	330c      	adds	r3, #12
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	b29a      	uxth	r2, r3
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	330d      	adds	r3, #13
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	b29b      	uxth	r3, r3
 8009478:	021b      	lsls	r3, r3, #8
 800947a:	b29b      	uxth	r3, r3
 800947c:	4313      	orrs	r3, r2
 800947e:	b29a      	uxth	r2, r3
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	7b9a      	ldrb	r2, [r3, #14]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	7bda      	ldrb	r2, [r3, #15]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	7c1a      	ldrb	r2, [r3, #16]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	7c5a      	ldrb	r2, [r3, #17]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	745a      	strb	r2, [r3, #17]
  }
}
 80094a4:	bf00      	nop
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b08c      	sub	sp, #48	; 0x30
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	4613      	mov	r3, r2
 80094bc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80094c4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80094d0:	2300      	movs	r3, #0
 80094d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80094d6:	2300      	movs	r3, #0
 80094d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	781a      	ldrb	r2, [r3, #0]
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	785a      	ldrb	r2, [r3, #1]
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	3302      	adds	r3, #2
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	3303      	adds	r3, #3
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	b29b      	uxth	r3, r3
 8009500:	021b      	lsls	r3, r3, #8
 8009502:	b29b      	uxth	r3, r3
 8009504:	4313      	orrs	r3, r2
 8009506:	b29b      	uxth	r3, r3
 8009508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950c:	bf28      	it	cs
 800950e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009512:	b29a      	uxth	r2, r3
 8009514:	6a3b      	ldr	r3, [r7, #32]
 8009516:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	791a      	ldrb	r2, [r3, #4]
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	795a      	ldrb	r2, [r3, #5]
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	799a      	ldrb	r2, [r3, #6]
 800952c:	6a3b      	ldr	r3, [r7, #32]
 800952e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	79da      	ldrb	r2, [r3, #7]
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	7a1a      	ldrb	r2, [r3, #8]
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009540:	6a3b      	ldr	r3, [r7, #32]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2b09      	cmp	r3, #9
 8009546:	d002      	beq.n	800954e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	2209      	movs	r2, #9
 800954c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800954e:	88fb      	ldrh	r3, [r7, #6]
 8009550:	2b09      	cmp	r3, #9
 8009552:	f240 809d 	bls.w	8009690 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009556:	2309      	movs	r3, #9
 8009558:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800955a:	2300      	movs	r3, #0
 800955c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800955e:	e081      	b.n	8009664 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009560:	f107 0316 	add.w	r3, r7, #22
 8009564:	4619      	mov	r1, r3
 8009566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009568:	f000 f99f 	bl	80098aa <USBH_GetNextDesc>
 800956c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800956e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009570:	785b      	ldrb	r3, [r3, #1]
 8009572:	2b04      	cmp	r3, #4
 8009574:	d176      	bne.n	8009664 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	2b09      	cmp	r3, #9
 800957c:	d002      	beq.n	8009584 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800957e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009580:	2209      	movs	r2, #9
 8009582:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009588:	221a      	movs	r2, #26
 800958a:	fb02 f303 	mul.w	r3, r2, r3
 800958e:	3308      	adds	r3, #8
 8009590:	6a3a      	ldr	r2, [r7, #32]
 8009592:	4413      	add	r3, r2
 8009594:	3302      	adds	r3, #2
 8009596:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800959a:	69f8      	ldr	r0, [r7, #28]
 800959c:	f000 f87e 	bl	800969c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80095a6:	2300      	movs	r3, #0
 80095a8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80095aa:	e043      	b.n	8009634 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80095ac:	f107 0316 	add.w	r3, r7, #22
 80095b0:	4619      	mov	r1, r3
 80095b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095b4:	f000 f979 	bl	80098aa <USBH_GetNextDesc>
 80095b8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80095ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095bc:	785b      	ldrb	r3, [r3, #1]
 80095be:	2b05      	cmp	r3, #5
 80095c0:	d138      	bne.n	8009634 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	795b      	ldrb	r3, [r3, #5]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d10f      	bne.n	80095ea <USBH_ParseCfgDesc+0x13a>
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	799b      	ldrb	r3, [r3, #6]
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d10b      	bne.n	80095ea <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	79db      	ldrb	r3, [r3, #7]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10f      	bne.n	80095fa <USBH_ParseCfgDesc+0x14a>
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	2b09      	cmp	r3, #9
 80095e0:	d00b      	beq.n	80095fa <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80095e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e4:	2209      	movs	r2, #9
 80095e6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80095e8:	e007      	b.n	80095fa <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80095ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	2b07      	cmp	r3, #7
 80095f0:	d004      	beq.n	80095fc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80095f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f4:	2207      	movs	r2, #7
 80095f6:	701a      	strb	r2, [r3, #0]
 80095f8:	e000      	b.n	80095fc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80095fa:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80095fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009600:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009604:	3201      	adds	r2, #1
 8009606:	00d2      	lsls	r2, r2, #3
 8009608:	211a      	movs	r1, #26
 800960a:	fb01 f303 	mul.w	r3, r1, r3
 800960e:	4413      	add	r3, r2
 8009610:	3308      	adds	r3, #8
 8009612:	6a3a      	ldr	r2, [r7, #32]
 8009614:	4413      	add	r3, r2
 8009616:	3304      	adds	r3, #4
 8009618:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800961a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800961c:	69b9      	ldr	r1, [r7, #24]
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 f86b 	bl	80096fa <USBH_ParseEPDesc>
 8009624:	4603      	mov	r3, r0
 8009626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800962a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800962e:	3301      	adds	r3, #1
 8009630:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	791b      	ldrb	r3, [r3, #4]
 8009638:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800963c:	429a      	cmp	r2, r3
 800963e:	d204      	bcs.n	800964a <USBH_ParseCfgDesc+0x19a>
 8009640:	6a3b      	ldr	r3, [r7, #32]
 8009642:	885a      	ldrh	r2, [r3, #2]
 8009644:	8afb      	ldrh	r3, [r7, #22]
 8009646:	429a      	cmp	r2, r3
 8009648:	d8b0      	bhi.n	80095ac <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	791b      	ldrb	r3, [r3, #4]
 800964e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009652:	429a      	cmp	r2, r3
 8009654:	d201      	bcs.n	800965a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009656:	2303      	movs	r3, #3
 8009658:	e01c      	b.n	8009694 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800965a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800965e:	3301      	adds	r3, #1
 8009660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009668:	2b01      	cmp	r3, #1
 800966a:	d805      	bhi.n	8009678 <USBH_ParseCfgDesc+0x1c8>
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	885a      	ldrh	r2, [r3, #2]
 8009670:	8afb      	ldrh	r3, [r7, #22]
 8009672:	429a      	cmp	r2, r3
 8009674:	f63f af74 	bhi.w	8009560 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	791b      	ldrb	r3, [r3, #4]
 800967c:	2b02      	cmp	r3, #2
 800967e:	bf28      	it	cs
 8009680:	2302      	movcs	r3, #2
 8009682:	b2db      	uxtb	r3, r3
 8009684:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009688:	429a      	cmp	r2, r3
 800968a:	d201      	bcs.n	8009690 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800968c:	2303      	movs	r3, #3
 800968e:	e001      	b.n	8009694 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009690:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009694:	4618      	mov	r0, r3
 8009696:	3730      	adds	r7, #48	; 0x30
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	781a      	ldrb	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	785a      	ldrb	r2, [r3, #1]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	789a      	ldrb	r2, [r3, #2]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	78da      	ldrb	r2, [r3, #3]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	791a      	ldrb	r2, [r3, #4]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	795a      	ldrb	r2, [r3, #5]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	799a      	ldrb	r2, [r3, #6]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	79da      	ldrb	r2, [r3, #7]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	7a1a      	ldrb	r2, [r3, #8]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	721a      	strb	r2, [r3, #8]
}
 80096ee:	bf00      	nop
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b087      	sub	sp, #28
 80096fe:	af00      	add	r7, sp, #0
 8009700:	60f8      	str	r0, [r7, #12]
 8009702:	60b9      	str	r1, [r7, #8]
 8009704:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	781a      	ldrb	r2, [r3, #0]
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	785a      	ldrb	r2, [r3, #1]
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	789a      	ldrb	r2, [r3, #2]
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	78da      	ldrb	r2, [r3, #3]
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	3304      	adds	r3, #4
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	b29a      	uxth	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	3305      	adds	r3, #5
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	b29b      	uxth	r3, r3
 800973a:	021b      	lsls	r3, r3, #8
 800973c:	b29b      	uxth	r3, r3
 800973e:	4313      	orrs	r3, r2
 8009740:	b29a      	uxth	r2, r3
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	799a      	ldrb	r2, [r3, #6]
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	889b      	ldrh	r3, [r3, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d102      	bne.n	800975c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009756:	2303      	movs	r3, #3
 8009758:	75fb      	strb	r3, [r7, #23]
 800975a:	e033      	b.n	80097c4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	889b      	ldrh	r3, [r3, #4]
 8009760:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009764:	f023 0307 	bic.w	r3, r3, #7
 8009768:	b29a      	uxth	r2, r3
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	889b      	ldrh	r3, [r3, #4]
 8009772:	b21a      	sxth	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3304      	adds	r3, #4
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	b299      	uxth	r1, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	3305      	adds	r3, #5
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	b29b      	uxth	r3, r3
 8009784:	021b      	lsls	r3, r3, #8
 8009786:	b29b      	uxth	r3, r3
 8009788:	430b      	orrs	r3, r1
 800978a:	b29b      	uxth	r3, r3
 800978c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009790:	2b00      	cmp	r3, #0
 8009792:	d110      	bne.n	80097b6 <USBH_ParseEPDesc+0xbc>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	3304      	adds	r3, #4
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	b299      	uxth	r1, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3305      	adds	r3, #5
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	021b      	lsls	r3, r3, #8
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	430b      	orrs	r3, r1
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	b21b      	sxth	r3, r3
 80097ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097b2:	b21b      	sxth	r3, r3
 80097b4:	e001      	b.n	80097ba <USBH_ParseEPDesc+0xc0>
 80097b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097ba:	4313      	orrs	r3, r2
 80097bc:	b21b      	sxth	r3, r3
 80097be:	b29a      	uxth	r2, r3
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d116      	bne.n	80097fc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	78db      	ldrb	r3, [r3, #3]
 80097d2:	f003 0303 	and.w	r3, r3, #3
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d005      	beq.n	80097e6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	78db      	ldrb	r3, [r3, #3]
 80097de:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80097e2:	2b03      	cmp	r3, #3
 80097e4:	d127      	bne.n	8009836 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	799b      	ldrb	r3, [r3, #6]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <USBH_ParseEPDesc+0xfc>
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	799b      	ldrb	r3, [r3, #6]
 80097f2:	2b10      	cmp	r3, #16
 80097f4:	d91f      	bls.n	8009836 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80097f6:	2303      	movs	r3, #3
 80097f8:	75fb      	strb	r3, [r7, #23]
 80097fa:	e01c      	b.n	8009836 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	78db      	ldrb	r3, [r3, #3]
 8009800:	f003 0303 	and.w	r3, r3, #3
 8009804:	2b01      	cmp	r3, #1
 8009806:	d10a      	bne.n	800981e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	799b      	ldrb	r3, [r3, #6]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d003      	beq.n	8009818 <USBH_ParseEPDesc+0x11e>
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	799b      	ldrb	r3, [r3, #6]
 8009814:	2b10      	cmp	r3, #16
 8009816:	d90e      	bls.n	8009836 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009818:	2303      	movs	r3, #3
 800981a:	75fb      	strb	r3, [r7, #23]
 800981c:	e00b      	b.n	8009836 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	78db      	ldrb	r3, [r3, #3]
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	2b03      	cmp	r3, #3
 8009828:	d105      	bne.n	8009836 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	799b      	ldrb	r3, [r3, #6]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d101      	bne.n	8009836 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009832:	2303      	movs	r3, #3
 8009834:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009836:	7dfb      	ldrb	r3, [r7, #23]
}
 8009838:	4618      	mov	r0, r3
 800983a:	371c      	adds	r7, #28
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	4613      	mov	r3, r2
 8009850:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3301      	adds	r3, #1
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	2b03      	cmp	r3, #3
 800985a:	d120      	bne.n	800989e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	1e9a      	subs	r2, r3, #2
 8009862:	88fb      	ldrh	r3, [r7, #6]
 8009864:	4293      	cmp	r3, r2
 8009866:	bf28      	it	cs
 8009868:	4613      	movcs	r3, r2
 800986a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	3302      	adds	r3, #2
 8009870:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009872:	2300      	movs	r3, #0
 8009874:	82fb      	strh	r3, [r7, #22]
 8009876:	e00b      	b.n	8009890 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009878:	8afb      	ldrh	r3, [r7, #22]
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	4413      	add	r3, r2
 800987e:	781a      	ldrb	r2, [r3, #0]
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	3301      	adds	r3, #1
 8009888:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800988a:	8afb      	ldrh	r3, [r7, #22]
 800988c:	3302      	adds	r3, #2
 800988e:	82fb      	strh	r3, [r7, #22]
 8009890:	8afa      	ldrh	r2, [r7, #22]
 8009892:	8abb      	ldrh	r3, [r7, #20]
 8009894:	429a      	cmp	r2, r3
 8009896:	d3ef      	bcc.n	8009878 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	2200      	movs	r2, #0
 800989c:	701a      	strb	r2, [r3, #0]
  }
}
 800989e:	bf00      	nop
 80098a0:	371c      	adds	r7, #28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b085      	sub	sp, #20
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	881a      	ldrh	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	b29b      	uxth	r3, r3
 80098be:	4413      	add	r3, r2
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4413      	add	r3, r2
 80098d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80098d2:	68fb      	ldr	r3, [r7, #12]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	4613      	mov	r3, r2
 80098ec:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80098ee:	2301      	movs	r3, #1
 80098f0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	789b      	ldrb	r3, [r3, #2]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d002      	beq.n	8009900 <USBH_CtlReq+0x20>
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d00f      	beq.n	800991e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80098fe:	e027      	b.n	8009950 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	88fa      	ldrh	r2, [r7, #6]
 800990a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2201      	movs	r2, #1
 8009910:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2202      	movs	r2, #2
 8009916:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009918:	2301      	movs	r3, #1
 800991a:	75fb      	strb	r3, [r7, #23]
      break;
 800991c:	e018      	b.n	8009950 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f000 f81c 	bl	800995c <USBH_HandleControl>
 8009924:	4603      	mov	r3, r0
 8009926:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009928:	7dfb      	ldrb	r3, [r7, #23]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d002      	beq.n	8009934 <USBH_CtlReq+0x54>
 800992e:	7dfb      	ldrb	r3, [r7, #23]
 8009930:	2b03      	cmp	r3, #3
 8009932:	d106      	bne.n	8009942 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2201      	movs	r2, #1
 8009938:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	761a      	strb	r2, [r3, #24]
      break;
 8009940:	e005      	b.n	800994e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009942:	7dfb      	ldrb	r3, [r7, #23]
 8009944:	2b02      	cmp	r3, #2
 8009946:	d102      	bne.n	800994e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2201      	movs	r2, #1
 800994c:	709a      	strb	r2, [r3, #2]
      break;
 800994e:	bf00      	nop
  }
  return status;
 8009950:	7dfb      	ldrb	r3, [r7, #23]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
	...

0800995c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b086      	sub	sp, #24
 8009960:	af02      	add	r7, sp, #8
 8009962:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009964:	2301      	movs	r3, #1
 8009966:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009968:	2300      	movs	r3, #0
 800996a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	7e1b      	ldrb	r3, [r3, #24]
 8009970:	3b01      	subs	r3, #1
 8009972:	2b0a      	cmp	r3, #10
 8009974:	f200 8156 	bhi.w	8009c24 <USBH_HandleControl+0x2c8>
 8009978:	a201      	add	r2, pc, #4	; (adr r2, 8009980 <USBH_HandleControl+0x24>)
 800997a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997e:	bf00      	nop
 8009980:	080099ad 	.word	0x080099ad
 8009984:	080099c7 	.word	0x080099c7
 8009988:	08009a31 	.word	0x08009a31
 800998c:	08009a57 	.word	0x08009a57
 8009990:	08009a8f 	.word	0x08009a8f
 8009994:	08009ab9 	.word	0x08009ab9
 8009998:	08009b0b 	.word	0x08009b0b
 800999c:	08009b2d 	.word	0x08009b2d
 80099a0:	08009b69 	.word	0x08009b69
 80099a4:	08009b8f 	.word	0x08009b8f
 80099a8:	08009bcd 	.word	0x08009bcd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f103 0110 	add.w	r1, r3, #16
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	795b      	ldrb	r3, [r3, #5]
 80099b6:	461a      	mov	r2, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f943 	bl	8009c44 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2202      	movs	r2, #2
 80099c2:	761a      	strb	r2, [r3, #24]
      break;
 80099c4:	e139      	b.n	8009c3a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	795b      	ldrb	r3, [r3, #5]
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fcc5 	bl	800a35c <USBH_LL_GetURBState>
 80099d2:	4603      	mov	r3, r0
 80099d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80099d6:	7bbb      	ldrb	r3, [r7, #14]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d11e      	bne.n	8009a1a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	7c1b      	ldrb	r3, [r3, #16]
 80099e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80099e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	8adb      	ldrh	r3, [r3, #22]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00a      	beq.n	8009a04 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80099ee:	7b7b      	ldrb	r3, [r7, #13]
 80099f0:	2b80      	cmp	r3, #128	; 0x80
 80099f2:	d103      	bne.n	80099fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2203      	movs	r2, #3
 80099f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80099fa:	e115      	b.n	8009c28 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2205      	movs	r2, #5
 8009a00:	761a      	strb	r2, [r3, #24]
      break;
 8009a02:	e111      	b.n	8009c28 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009a04:	7b7b      	ldrb	r3, [r7, #13]
 8009a06:	2b80      	cmp	r3, #128	; 0x80
 8009a08:	d103      	bne.n	8009a12 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2209      	movs	r2, #9
 8009a0e:	761a      	strb	r2, [r3, #24]
      break;
 8009a10:	e10a      	b.n	8009c28 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2207      	movs	r2, #7
 8009a16:	761a      	strb	r2, [r3, #24]
      break;
 8009a18:	e106      	b.n	8009c28 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009a1a:	7bbb      	ldrb	r3, [r7, #14]
 8009a1c:	2b04      	cmp	r3, #4
 8009a1e:	d003      	beq.n	8009a28 <USBH_HandleControl+0xcc>
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	f040 8100 	bne.w	8009c28 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	220b      	movs	r2, #11
 8009a2c:	761a      	strb	r2, [r3, #24]
      break;
 8009a2e:	e0fb      	b.n	8009c28 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6899      	ldr	r1, [r3, #8]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	899a      	ldrh	r2, [r3, #12]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	791b      	ldrb	r3, [r3, #4]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f93a 	bl	8009cc2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2204      	movs	r2, #4
 8009a52:	761a      	strb	r2, [r3, #24]
      break;
 8009a54:	e0f1      	b.n	8009c3a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	791b      	ldrb	r3, [r3, #4]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fc7d 	bl	800a35c <USBH_LL_GetURBState>
 8009a62:	4603      	mov	r3, r0
 8009a64:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d102      	bne.n	8009a72 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2209      	movs	r2, #9
 8009a70:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009a72:	7bbb      	ldrb	r3, [r7, #14]
 8009a74:	2b05      	cmp	r3, #5
 8009a76:	d102      	bne.n	8009a7e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a7c:	e0d6      	b.n	8009c2c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009a7e:	7bbb      	ldrb	r3, [r7, #14]
 8009a80:	2b04      	cmp	r3, #4
 8009a82:	f040 80d3 	bne.w	8009c2c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	220b      	movs	r2, #11
 8009a8a:	761a      	strb	r2, [r3, #24]
      break;
 8009a8c:	e0ce      	b.n	8009c2c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6899      	ldr	r1, [r3, #8]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	899a      	ldrh	r2, [r3, #12]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	795b      	ldrb	r3, [r3, #5]
 8009a9a:	2001      	movs	r0, #1
 8009a9c:	9000      	str	r0, [sp, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f8ea 	bl	8009c78 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2206      	movs	r2, #6
 8009ab4:	761a      	strb	r2, [r3, #24]
      break;
 8009ab6:	e0c0      	b.n	8009c3a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	795b      	ldrb	r3, [r3, #5]
 8009abc:	4619      	mov	r1, r3
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fc4c 	bl	800a35c <USBH_LL_GetURBState>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d103      	bne.n	8009ad6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2207      	movs	r2, #7
 8009ad2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ad4:	e0ac      	b.n	8009c30 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
 8009ad8:	2b05      	cmp	r3, #5
 8009ada:	d105      	bne.n	8009ae8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	220c      	movs	r2, #12
 8009ae0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ae6:	e0a3      	b.n	8009c30 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ae8:	7bbb      	ldrb	r3, [r7, #14]
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d103      	bne.n	8009af6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2205      	movs	r2, #5
 8009af2:	761a      	strb	r2, [r3, #24]
      break;
 8009af4:	e09c      	b.n	8009c30 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009af6:	7bbb      	ldrb	r3, [r7, #14]
 8009af8:	2b04      	cmp	r3, #4
 8009afa:	f040 8099 	bne.w	8009c30 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	220b      	movs	r2, #11
 8009b02:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009b04:	2302      	movs	r3, #2
 8009b06:	73fb      	strb	r3, [r7, #15]
      break;
 8009b08:	e092      	b.n	8009c30 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	791b      	ldrb	r3, [r3, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	2100      	movs	r1, #0
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f8d5 	bl	8009cc2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2208      	movs	r2, #8
 8009b28:	761a      	strb	r2, [r3, #24]

      break;
 8009b2a:	e086      	b.n	8009c3a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	791b      	ldrb	r3, [r3, #4]
 8009b30:	4619      	mov	r1, r3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fc12 	bl	800a35c <USBH_LL_GetURBState>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009b3c:	7bbb      	ldrb	r3, [r7, #14]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d105      	bne.n	8009b4e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	220d      	movs	r2, #13
 8009b46:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b4c:	e072      	b.n	8009c34 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009b4e:	7bbb      	ldrb	r3, [r7, #14]
 8009b50:	2b04      	cmp	r3, #4
 8009b52:	d103      	bne.n	8009b5c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	220b      	movs	r2, #11
 8009b58:	761a      	strb	r2, [r3, #24]
      break;
 8009b5a:	e06b      	b.n	8009c34 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009b5c:	7bbb      	ldrb	r3, [r7, #14]
 8009b5e:	2b05      	cmp	r3, #5
 8009b60:	d168      	bne.n	8009c34 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009b62:	2303      	movs	r3, #3
 8009b64:	73fb      	strb	r3, [r7, #15]
      break;
 8009b66:	e065      	b.n	8009c34 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	795b      	ldrb	r3, [r3, #5]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	9200      	str	r2, [sp, #0]
 8009b70:	2200      	movs	r2, #0
 8009b72:	2100      	movs	r1, #0
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f87f 	bl	8009c78 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	220a      	movs	r2, #10
 8009b8a:	761a      	strb	r2, [r3, #24]
      break;
 8009b8c:	e055      	b.n	8009c3a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	795b      	ldrb	r3, [r3, #5]
 8009b92:	4619      	mov	r1, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fbe1 	bl	800a35c <USBH_LL_GetURBState>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009b9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d105      	bne.n	8009bb0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	220d      	movs	r2, #13
 8009bac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009bae:	e043      	b.n	8009c38 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009bb0:	7bbb      	ldrb	r3, [r7, #14]
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d103      	bne.n	8009bbe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2209      	movs	r2, #9
 8009bba:	761a      	strb	r2, [r3, #24]
      break;
 8009bbc:	e03c      	b.n	8009c38 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009bbe:	7bbb      	ldrb	r3, [r7, #14]
 8009bc0:	2b04      	cmp	r3, #4
 8009bc2:	d139      	bne.n	8009c38 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	220b      	movs	r2, #11
 8009bc8:	761a      	strb	r2, [r3, #24]
      break;
 8009bca:	e035      	b.n	8009c38 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	7e5b      	ldrb	r3, [r3, #25]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	765a      	strb	r2, [r3, #25]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	7e5b      	ldrb	r3, [r3, #25]
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d806      	bhi.n	8009bee <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2201      	movs	r2, #1
 8009bea:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009bec:	e025      	b.n	8009c3a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009bf4:	2106      	movs	r1, #6
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	795b      	ldrb	r3, [r3, #5]
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f90c 	bl	8009e24 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	791b      	ldrb	r3, [r3, #4]
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f906 	bl	8009e24 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009c1e:	2302      	movs	r3, #2
 8009c20:	73fb      	strb	r3, [r7, #15]
      break;
 8009c22:	e00a      	b.n	8009c3a <USBH_HandleControl+0x2de>

    default:
      break;
 8009c24:	bf00      	nop
 8009c26:	e008      	b.n	8009c3a <USBH_HandleControl+0x2de>
      break;
 8009c28:	bf00      	nop
 8009c2a:	e006      	b.n	8009c3a <USBH_HandleControl+0x2de>
      break;
 8009c2c:	bf00      	nop
 8009c2e:	e004      	b.n	8009c3a <USBH_HandleControl+0x2de>
      break;
 8009c30:	bf00      	nop
 8009c32:	e002      	b.n	8009c3a <USBH_HandleControl+0x2de>
      break;
 8009c34:	bf00      	nop
 8009c36:	e000      	b.n	8009c3a <USBH_HandleControl+0x2de>
      break;
 8009c38:	bf00      	nop
  }

  return status;
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b088      	sub	sp, #32
 8009c48:	af04      	add	r7, sp, #16
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c52:	79f9      	ldrb	r1, [r7, #7]
 8009c54:	2300      	movs	r3, #0
 8009c56:	9303      	str	r3, [sp, #12]
 8009c58:	2308      	movs	r3, #8
 8009c5a:	9302      	str	r3, [sp, #8]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	9301      	str	r3, [sp, #4]
 8009c60:	2300      	movs	r3, #0
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	2300      	movs	r3, #0
 8009c66:	2200      	movs	r2, #0
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f000 fb46 	bl	800a2fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b088      	sub	sp, #32
 8009c7c:	af04      	add	r7, sp, #16
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	4611      	mov	r1, r2
 8009c84:	461a      	mov	r2, r3
 8009c86:	460b      	mov	r3, r1
 8009c88:	80fb      	strh	r3, [r7, #6]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d001      	beq.n	8009c9c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c9c:	7979      	ldrb	r1, [r7, #5]
 8009c9e:	7e3b      	ldrb	r3, [r7, #24]
 8009ca0:	9303      	str	r3, [sp, #12]
 8009ca2:	88fb      	ldrh	r3, [r7, #6]
 8009ca4:	9302      	str	r3, [sp, #8]
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	9301      	str	r3, [sp, #4]
 8009caa:	2301      	movs	r3, #1
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 fb21 	bl	800a2fa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b088      	sub	sp, #32
 8009cc6:	af04      	add	r7, sp, #16
 8009cc8:	60f8      	str	r0, [r7, #12]
 8009cca:	60b9      	str	r1, [r7, #8]
 8009ccc:	4611      	mov	r1, r2
 8009cce:	461a      	mov	r2, r3
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	80fb      	strh	r3, [r7, #6]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009cd8:	7979      	ldrb	r1, [r7, #5]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	9303      	str	r3, [sp, #12]
 8009cde:	88fb      	ldrh	r3, [r7, #6]
 8009ce0:	9302      	str	r3, [sp, #8]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	9301      	str	r3, [sp, #4]
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	2300      	movs	r3, #0
 8009cec:	2201      	movs	r2, #1
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f000 fb03 	bl	800a2fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009cf4:	2300      	movs	r3, #0

}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b088      	sub	sp, #32
 8009d02:	af04      	add	r7, sp, #16
 8009d04:	60f8      	str	r0, [r7, #12]
 8009d06:	60b9      	str	r1, [r7, #8]
 8009d08:	4611      	mov	r1, r2
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	80fb      	strh	r3, [r7, #6]
 8009d10:	4613      	mov	r3, r2
 8009d12:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d001      	beq.n	8009d22 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d22:	7979      	ldrb	r1, [r7, #5]
 8009d24:	7e3b      	ldrb	r3, [r7, #24]
 8009d26:	9303      	str	r3, [sp, #12]
 8009d28:	88fb      	ldrh	r3, [r7, #6]
 8009d2a:	9302      	str	r3, [sp, #8]
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	9301      	str	r3, [sp, #4]
 8009d30:	2301      	movs	r3, #1
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	2302      	movs	r3, #2
 8009d36:	2200      	movs	r2, #0
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 fade 	bl	800a2fa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b088      	sub	sp, #32
 8009d4c:	af04      	add	r7, sp, #16
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	4611      	mov	r1, r2
 8009d54:	461a      	mov	r2, r3
 8009d56:	460b      	mov	r3, r1
 8009d58:	80fb      	strh	r3, [r7, #6]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d5e:	7979      	ldrb	r1, [r7, #5]
 8009d60:	2300      	movs	r3, #0
 8009d62:	9303      	str	r3, [sp, #12]
 8009d64:	88fb      	ldrh	r3, [r7, #6]
 8009d66:	9302      	str	r3, [sp, #8]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	9301      	str	r3, [sp, #4]
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	2302      	movs	r3, #2
 8009d72:	2201      	movs	r2, #1
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f000 fac0 	bl	800a2fa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b086      	sub	sp, #24
 8009d88:	af04      	add	r7, sp, #16
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	4608      	mov	r0, r1
 8009d8e:	4611      	mov	r1, r2
 8009d90:	461a      	mov	r2, r3
 8009d92:	4603      	mov	r3, r0
 8009d94:	70fb      	strb	r3, [r7, #3]
 8009d96:	460b      	mov	r3, r1
 8009d98:	70bb      	strb	r3, [r7, #2]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009d9e:	7878      	ldrb	r0, [r7, #1]
 8009da0:	78ba      	ldrb	r2, [r7, #2]
 8009da2:	78f9      	ldrb	r1, [r7, #3]
 8009da4:	8b3b      	ldrh	r3, [r7, #24]
 8009da6:	9302      	str	r3, [sp, #8]
 8009da8:	7d3b      	ldrb	r3, [r7, #20]
 8009daa:	9301      	str	r3, [sp, #4]
 8009dac:	7c3b      	ldrb	r3, [r7, #16]
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	4603      	mov	r3, r0
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 fa53 	bl	800a25e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b082      	sub	sp, #8
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	460b      	mov	r3, r1
 8009dcc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009dce:	78fb      	ldrb	r3, [r7, #3]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fa72 	bl	800a2bc <USBH_LL_ClosePipe>

  return USBH_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b084      	sub	sp, #16
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	460b      	mov	r3, r1
 8009dec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f836 	bl	8009e60 <USBH_GetFreePipe>
 8009df4:	4603      	mov	r3, r0
 8009df6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009df8:	89fb      	ldrh	r3, [r7, #14]
 8009dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d00a      	beq.n	8009e18 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009e02:	78fa      	ldrb	r2, [r7, #3]
 8009e04:	89fb      	ldrh	r3, [r7, #14]
 8009e06:	f003 030f 	and.w	r3, r3, #15
 8009e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e0e:	6879      	ldr	r1, [r7, #4]
 8009e10:	33e0      	adds	r3, #224	; 0xe0
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	440b      	add	r3, r1
 8009e16:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009e18:	89fb      	ldrh	r3, [r7, #14]
 8009e1a:	b2db      	uxtb	r3, r3
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009e30:	78fb      	ldrb	r3, [r7, #3]
 8009e32:	2b0f      	cmp	r3, #15
 8009e34:	d80d      	bhi.n	8009e52 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009e36:	78fb      	ldrb	r3, [r7, #3]
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	33e0      	adds	r3, #224	; 0xe0
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	4413      	add	r3, r2
 8009e40:	685a      	ldr	r2, [r3, #4]
 8009e42:	78fb      	ldrb	r3, [r7, #3]
 8009e44:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009e48:	6879      	ldr	r1, [r7, #4]
 8009e4a:	33e0      	adds	r3, #224	; 0xe0
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	440b      	add	r3, r1
 8009e50:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	73fb      	strb	r3, [r7, #15]
 8009e70:	e00f      	b.n	8009e92 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	33e0      	adds	r3, #224	; 0xe0
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d102      	bne.n	8009e8c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	e007      	b.n	8009e9c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	73fb      	strb	r3, [r7, #15]
 8009e92:	7bfb      	ldrb	r3, [r7, #15]
 8009e94:	2b0f      	cmp	r3, #15
 8009e96:	d9ec      	bls.n	8009e72 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009eac:	2201      	movs	r2, #1
 8009eae:	490e      	ldr	r1, [pc, #56]	; (8009ee8 <MX_USB_HOST_Init+0x40>)
 8009eb0:	480e      	ldr	r0, [pc, #56]	; (8009eec <MX_USB_HOST_Init+0x44>)
 8009eb2:	f7fe fba7 	bl	8008604 <USBH_Init>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d001      	beq.n	8009ec0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009ebc:	f7f8 f92c 	bl	8002118 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009ec0:	490b      	ldr	r1, [pc, #44]	; (8009ef0 <MX_USB_HOST_Init+0x48>)
 8009ec2:	480a      	ldr	r0, [pc, #40]	; (8009eec <MX_USB_HOST_Init+0x44>)
 8009ec4:	f7fe fc2c 	bl	8008720 <USBH_RegisterClass>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009ece:	f7f8 f923 	bl	8002118 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009ed2:	4806      	ldr	r0, [pc, #24]	; (8009eec <MX_USB_HOST_Init+0x44>)
 8009ed4:	f7fe fcb0 	bl	8008838 <USBH_Start>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009ede:	f7f8 f91b 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009ee2:	bf00      	nop
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	08009f09 	.word	0x08009f09
 8009eec:	20000470 	.word	0x20000470
 8009ef0:	20000014 	.word	0x20000014

08009ef4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009ef8:	4802      	ldr	r0, [pc, #8]	; (8009f04 <MX_USB_HOST_Process+0x10>)
 8009efa:	f7fe fcad 	bl	8008858 <USBH_Process>
}
 8009efe:	bf00      	nop
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	20000470 	.word	0x20000470

08009f08 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	460b      	mov	r3, r1
 8009f12:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009f14:	78fb      	ldrb	r3, [r7, #3]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	2b04      	cmp	r3, #4
 8009f1a:	d819      	bhi.n	8009f50 <USBH_UserProcess+0x48>
 8009f1c:	a201      	add	r2, pc, #4	; (adr r2, 8009f24 <USBH_UserProcess+0x1c>)
 8009f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f22:	bf00      	nop
 8009f24:	08009f51 	.word	0x08009f51
 8009f28:	08009f41 	.word	0x08009f41
 8009f2c:	08009f51 	.word	0x08009f51
 8009f30:	08009f49 	.word	0x08009f49
 8009f34:	08009f39 	.word	0x08009f39
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009f38:	4b09      	ldr	r3, [pc, #36]	; (8009f60 <USBH_UserProcess+0x58>)
 8009f3a:	2203      	movs	r2, #3
 8009f3c:	701a      	strb	r2, [r3, #0]
  break;
 8009f3e:	e008      	b.n	8009f52 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009f40:	4b07      	ldr	r3, [pc, #28]	; (8009f60 <USBH_UserProcess+0x58>)
 8009f42:	2202      	movs	r2, #2
 8009f44:	701a      	strb	r2, [r3, #0]
  break;
 8009f46:	e004      	b.n	8009f52 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009f48:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <USBH_UserProcess+0x58>)
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	701a      	strb	r2, [r3, #0]
  break;
 8009f4e:	e000      	b.n	8009f52 <USBH_UserProcess+0x4a>

  default:
  break;
 8009f50:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009f52:	bf00      	nop
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	20000230 	.word	0x20000230

08009f64 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b08a      	sub	sp, #40	; 0x28
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f6c:	f107 0314 	add.w	r3, r7, #20
 8009f70:	2200      	movs	r2, #0
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	605a      	str	r2, [r3, #4]
 8009f76:	609a      	str	r2, [r3, #8]
 8009f78:	60da      	str	r2, [r3, #12]
 8009f7a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f84:	d147      	bne.n	800a016 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f86:	2300      	movs	r3, #0
 8009f88:	613b      	str	r3, [r7, #16]
 8009f8a:	4b25      	ldr	r3, [pc, #148]	; (800a020 <HAL_HCD_MspInit+0xbc>)
 8009f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8e:	4a24      	ldr	r2, [pc, #144]	; (800a020 <HAL_HCD_MspInit+0xbc>)
 8009f90:	f043 0301 	orr.w	r3, r3, #1
 8009f94:	6313      	str	r3, [r2, #48]	; 0x30
 8009f96:	4b22      	ldr	r3, [pc, #136]	; (800a020 <HAL_HCD_MspInit+0xbc>)
 8009f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	613b      	str	r3, [r7, #16]
 8009fa0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fac:	2300      	movs	r3, #0
 8009fae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009fb0:	f107 0314 	add.w	r3, r7, #20
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	481b      	ldr	r0, [pc, #108]	; (800a024 <HAL_HCD_MspInit+0xc0>)
 8009fb8:	f7f8 fdc6 	bl	8002b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009fbc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009fce:	230a      	movs	r3, #10
 8009fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fd2:	f107 0314 	add.w	r3, r7, #20
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	4812      	ldr	r0, [pc, #72]	; (800a024 <HAL_HCD_MspInit+0xc0>)
 8009fda:	f7f8 fdb5 	bl	8002b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009fde:	4b10      	ldr	r3, [pc, #64]	; (800a020 <HAL_HCD_MspInit+0xbc>)
 8009fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe2:	4a0f      	ldr	r2, [pc, #60]	; (800a020 <HAL_HCD_MspInit+0xbc>)
 8009fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fe8:	6353      	str	r3, [r2, #52]	; 0x34
 8009fea:	2300      	movs	r3, #0
 8009fec:	60fb      	str	r3, [r7, #12]
 8009fee:	4b0c      	ldr	r3, [pc, #48]	; (800a020 <HAL_HCD_MspInit+0xbc>)
 8009ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ff2:	4a0b      	ldr	r2, [pc, #44]	; (800a020 <HAL_HCD_MspInit+0xbc>)
 8009ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8009ffa:	4b09      	ldr	r3, [pc, #36]	; (800a020 <HAL_HCD_MspInit+0xbc>)
 8009ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a002:	60fb      	str	r3, [r7, #12]
 800a004:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a006:	2200      	movs	r2, #0
 800a008:	2100      	movs	r1, #0
 800a00a:	2043      	movs	r0, #67	; 0x43
 800a00c:	f7f8 fd65 	bl	8002ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a010:	2043      	movs	r0, #67	; 0x43
 800a012:	f7f8 fd7e 	bl	8002b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a016:	bf00      	nop
 800a018:	3728      	adds	r7, #40	; 0x28
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	40023800 	.word	0x40023800
 800a024:	40020000 	.word	0x40020000

0800a028 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a036:	4618      	mov	r0, r3
 800a038:	f7fe ffed 	bl	8009016 <USBH_LL_IncTimer>
}
 800a03c:	bf00      	nop
 800a03e:	3708      	adds	r7, #8
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a052:	4618      	mov	r0, r3
 800a054:	f7ff f825 	bl	80090a2 <USBH_LL_Connect>
}
 800a058:	bf00      	nop
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a06e:	4618      	mov	r0, r3
 800a070:	f7ff f82e 	bl	80090d0 <USBH_LL_Disconnect>
}
 800a074:	bf00      	nop
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	460b      	mov	r3, r1
 800a086:	70fb      	strb	r3, [r7, #3]
 800a088:	4613      	mov	r3, r2
 800a08a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fe ffdf 	bl	800906a <USBH_LL_PortEnabled>
}
 800a0ac:	bf00      	nop
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fe ffdf 	bl	8009086 <USBH_LL_PortDisabled>
}
 800a0c8:	bf00      	nop
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d12a      	bne.n	800a138 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a0e2:	4a18      	ldr	r2, [pc, #96]	; (800a144 <USBH_LL_Init+0x74>)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a15      	ldr	r2, [pc, #84]	; (800a144 <USBH_LL_Init+0x74>)
 800a0ee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a0f2:	4b14      	ldr	r3, [pc, #80]	; (800a144 <USBH_LL_Init+0x74>)
 800a0f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a0f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a0fa:	4b12      	ldr	r3, [pc, #72]	; (800a144 <USBH_LL_Init+0x74>)
 800a0fc:	2208      	movs	r2, #8
 800a0fe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a100:	4b10      	ldr	r3, [pc, #64]	; (800a144 <USBH_LL_Init+0x74>)
 800a102:	2201      	movs	r2, #1
 800a104:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a106:	4b0f      	ldr	r3, [pc, #60]	; (800a144 <USBH_LL_Init+0x74>)
 800a108:	2200      	movs	r2, #0
 800a10a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a10c:	4b0d      	ldr	r3, [pc, #52]	; (800a144 <USBH_LL_Init+0x74>)
 800a10e:	2202      	movs	r2, #2
 800a110:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a112:	4b0c      	ldr	r3, [pc, #48]	; (800a144 <USBH_LL_Init+0x74>)
 800a114:	2200      	movs	r2, #0
 800a116:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a118:	480a      	ldr	r0, [pc, #40]	; (800a144 <USBH_LL_Init+0x74>)
 800a11a:	f7f8 fee3 	bl	8002ee4 <HAL_HCD_Init>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d001      	beq.n	800a128 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a124:	f7f7 fff8 	bl	8002118 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a128:	4806      	ldr	r0, [pc, #24]	; (800a144 <USBH_LL_Init+0x74>)
 800a12a:	f7f9 fac6 	bl	80036ba <HAL_HCD_GetCurrentFrame>
 800a12e:	4603      	mov	r3, r0
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7fe ff60 	bl	8008ff8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	20000848 	.word	0x20000848

0800a148 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a150:	2300      	movs	r3, #0
 800a152:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a15e:	4618      	mov	r0, r3
 800a160:	f7f9 fa35 	bl	80035ce <HAL_HCD_Start>
 800a164:	4603      	mov	r3, r0
 800a166:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 f95c 	bl	800a428 <USBH_Get_USB_Status>
 800a170:	4603      	mov	r3, r0
 800a172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a174:	7bbb      	ldrb	r3, [r7, #14]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b084      	sub	sp, #16
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a186:	2300      	movs	r3, #0
 800a188:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a18a:	2300      	movs	r3, #0
 800a18c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a194:	4618      	mov	r0, r3
 800a196:	f7f9 fa3d 	bl	8003614 <HAL_HCD_Stop>
 800a19a:	4603      	mov	r3, r0
 800a19c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a19e:	7bfb      	ldrb	r3, [r7, #15]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 f941 	bl	800a428 <USBH_Get_USB_Status>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7f9 fa85 	bl	80036d6 <HAL_HCD_GetCurrentSpeed>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d00c      	beq.n	800a1ec <USBH_LL_GetSpeed+0x38>
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d80d      	bhi.n	800a1f2 <USBH_LL_GetSpeed+0x3e>
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d002      	beq.n	800a1e0 <USBH_LL_GetSpeed+0x2c>
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d003      	beq.n	800a1e6 <USBH_LL_GetSpeed+0x32>
 800a1de:	e008      	b.n	800a1f2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1e4:	e008      	b.n	800a1f8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a1ea:	e005      	b.n	800a1f8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a1f0:	e002      	b.n	800a1f8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a1f6:	bf00      	nop
  }
  return  speed;
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a20e:	2300      	movs	r3, #0
 800a210:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a218:	4618      	mov	r0, r3
 800a21a:	f7f9 fa18 	bl	800364e <HAL_HCD_ResetPort>
 800a21e:	4603      	mov	r3, r0
 800a220:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a222:	7bfb      	ldrb	r3, [r7, #15]
 800a224:	4618      	mov	r0, r3
 800a226:	f000 f8ff 	bl	800a428 <USBH_Get_USB_Status>
 800a22a:	4603      	mov	r3, r0
 800a22c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a22e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	460b      	mov	r3, r1
 800a242:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a24a:	78fa      	ldrb	r2, [r7, #3]
 800a24c:	4611      	mov	r1, r2
 800a24e:	4618      	mov	r0, r3
 800a250:	f7f9 fa1f 	bl	8003692 <HAL_HCD_HC_GetXferCount>
 800a254:	4603      	mov	r3, r0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a25e:	b590      	push	{r4, r7, lr}
 800a260:	b089      	sub	sp, #36	; 0x24
 800a262:	af04      	add	r7, sp, #16
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	4608      	mov	r0, r1
 800a268:	4611      	mov	r1, r2
 800a26a:	461a      	mov	r2, r3
 800a26c:	4603      	mov	r3, r0
 800a26e:	70fb      	strb	r3, [r7, #3]
 800a270:	460b      	mov	r3, r1
 800a272:	70bb      	strb	r3, [r7, #2]
 800a274:	4613      	mov	r3, r2
 800a276:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a286:	787c      	ldrb	r4, [r7, #1]
 800a288:	78ba      	ldrb	r2, [r7, #2]
 800a28a:	78f9      	ldrb	r1, [r7, #3]
 800a28c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a28e:	9302      	str	r3, [sp, #8]
 800a290:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	4623      	mov	r3, r4
 800a29e:	f7f8 fe83 	bl	8002fa8 <HAL_HCD_HC_Init>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f000 f8bd 	bl	800a428 <USBH_Get_USB_Status>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd90      	pop	{r4, r7, pc}

0800a2bc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a2d6:	78fa      	ldrb	r2, [r7, #3]
 800a2d8:	4611      	mov	r1, r2
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7f8 fef3 	bl	80030c6 <HAL_HCD_HC_Halt>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 f89e 	bl	800a428 <USBH_Get_USB_Status>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a2fa:	b590      	push	{r4, r7, lr}
 800a2fc:	b089      	sub	sp, #36	; 0x24
 800a2fe:	af04      	add	r7, sp, #16
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	4608      	mov	r0, r1
 800a304:	4611      	mov	r1, r2
 800a306:	461a      	mov	r2, r3
 800a308:	4603      	mov	r3, r0
 800a30a:	70fb      	strb	r3, [r7, #3]
 800a30c:	460b      	mov	r3, r1
 800a30e:	70bb      	strb	r3, [r7, #2]
 800a310:	4613      	mov	r3, r2
 800a312:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a322:	787c      	ldrb	r4, [r7, #1]
 800a324:	78ba      	ldrb	r2, [r7, #2]
 800a326:	78f9      	ldrb	r1, [r7, #3]
 800a328:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a32c:	9303      	str	r3, [sp, #12]
 800a32e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a330:	9302      	str	r3, [sp, #8]
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a334:	9301      	str	r3, [sp, #4]
 800a336:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	4623      	mov	r3, r4
 800a33e:	f7f8 fee5 	bl	800310c <HAL_HCD_HC_SubmitRequest>
 800a342:	4603      	mov	r3, r0
 800a344:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a346:	7bfb      	ldrb	r3, [r7, #15]
 800a348:	4618      	mov	r0, r3
 800a34a:	f000 f86d 	bl	800a428 <USBH_Get_USB_Status>
 800a34e:	4603      	mov	r3, r0
 800a350:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a352:	7bbb      	ldrb	r3, [r7, #14]
}
 800a354:	4618      	mov	r0, r3
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd90      	pop	{r4, r7, pc}

0800a35c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	460b      	mov	r3, r1
 800a366:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a36e:	78fa      	ldrb	r2, [r7, #3]
 800a370:	4611      	mov	r1, r2
 800a372:	4618      	mov	r0, r3
 800a374:	f7f9 f979 	bl	800366a <HAL_HCD_HC_GetURBState>
 800a378:	4603      	mov	r3, r0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b082      	sub	sp, #8
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
 800a38a:	460b      	mov	r3, r1
 800a38c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a394:	2b01      	cmp	r3, #1
 800a396:	d103      	bne.n	800a3a0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a398:	78fb      	ldrb	r3, [r7, #3]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 f870 	bl	800a480 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a3a0:	20c8      	movs	r0, #200	; 0xc8
 800a3a2:	f7f8 fa9b 	bl	80028dc <HAL_Delay>
  return USBH_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	70fb      	strb	r3, [r7, #3]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a3c6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a3c8:	78fb      	ldrb	r3, [r7, #3]
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	212c      	movs	r1, #44	; 0x2c
 800a3ce:	fb01 f303 	mul.w	r3, r1, r3
 800a3d2:	4413      	add	r3, r2
 800a3d4:	333b      	adds	r3, #59	; 0x3b
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d009      	beq.n	800a3f0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a3dc:	78fb      	ldrb	r3, [r7, #3]
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	212c      	movs	r1, #44	; 0x2c
 800a3e2:	fb01 f303 	mul.w	r3, r1, r3
 800a3e6:	4413      	add	r3, r2
 800a3e8:	3354      	adds	r3, #84	; 0x54
 800a3ea:	78ba      	ldrb	r2, [r7, #2]
 800a3ec:	701a      	strb	r2, [r3, #0]
 800a3ee:	e008      	b.n	800a402 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a3f0:	78fb      	ldrb	r3, [r7, #3]
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	212c      	movs	r1, #44	; 0x2c
 800a3f6:	fb01 f303 	mul.w	r3, r1, r3
 800a3fa:	4413      	add	r3, r2
 800a3fc:	3355      	adds	r3, #85	; 0x55
 800a3fe:	78ba      	ldrb	r2, [r7, #2]
 800a400:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7f8 fa5f 	bl	80028dc <HAL_Delay>
}
 800a41e:	bf00      	nop
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
	...

0800a428 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	4603      	mov	r3, r0
 800a430:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a436:	79fb      	ldrb	r3, [r7, #7]
 800a438:	2b03      	cmp	r3, #3
 800a43a:	d817      	bhi.n	800a46c <USBH_Get_USB_Status+0x44>
 800a43c:	a201      	add	r2, pc, #4	; (adr r2, 800a444 <USBH_Get_USB_Status+0x1c>)
 800a43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a442:	bf00      	nop
 800a444:	0800a455 	.word	0x0800a455
 800a448:	0800a45b 	.word	0x0800a45b
 800a44c:	0800a461 	.word	0x0800a461
 800a450:	0800a467 	.word	0x0800a467
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a454:	2300      	movs	r3, #0
 800a456:	73fb      	strb	r3, [r7, #15]
    break;
 800a458:	e00b      	b.n	800a472 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a45a:	2302      	movs	r3, #2
 800a45c:	73fb      	strb	r3, [r7, #15]
    break;
 800a45e:	e008      	b.n	800a472 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a460:	2301      	movs	r3, #1
 800a462:	73fb      	strb	r3, [r7, #15]
    break;
 800a464:	e005      	b.n	800a472 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a466:	2302      	movs	r3, #2
 800a468:	73fb      	strb	r3, [r7, #15]
    break;
 800a46a:	e002      	b.n	800a472 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a46c:	2302      	movs	r3, #2
 800a46e:	73fb      	strb	r3, [r7, #15]
    break;
 800a470:	bf00      	nop
  }
  return usb_status;
 800a472:	7bfb      	ldrb	r3, [r7, #15]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a48a:	79fb      	ldrb	r3, [r7, #7]
 800a48c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a48e:	79fb      	ldrb	r3, [r7, #7]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d102      	bne.n	800a49a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a494:	2300      	movs	r3, #0
 800a496:	73fb      	strb	r3, [r7, #15]
 800a498:	e001      	b.n	800a49e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a49a:	2301      	movs	r3, #1
 800a49c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	2101      	movs	r1, #1
 800a4a4:	4803      	ldr	r0, [pc, #12]	; (800a4b4 <MX_DriverVbusFS+0x34>)
 800a4a6:	f7f8 fceb 	bl	8002e80 <HAL_GPIO_WritePin>
}
 800a4aa:	bf00      	nop
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	40020800 	.word	0x40020800

0800a4b8 <__errno>:
 800a4b8:	4b01      	ldr	r3, [pc, #4]	; (800a4c0 <__errno+0x8>)
 800a4ba:	6818      	ldr	r0, [r3, #0]
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	20000034 	.word	0x20000034

0800a4c4 <__libc_init_array>:
 800a4c4:	b570      	push	{r4, r5, r6, lr}
 800a4c6:	4d0d      	ldr	r5, [pc, #52]	; (800a4fc <__libc_init_array+0x38>)
 800a4c8:	4c0d      	ldr	r4, [pc, #52]	; (800a500 <__libc_init_array+0x3c>)
 800a4ca:	1b64      	subs	r4, r4, r5
 800a4cc:	10a4      	asrs	r4, r4, #2
 800a4ce:	2600      	movs	r6, #0
 800a4d0:	42a6      	cmp	r6, r4
 800a4d2:	d109      	bne.n	800a4e8 <__libc_init_array+0x24>
 800a4d4:	4d0b      	ldr	r5, [pc, #44]	; (800a504 <__libc_init_array+0x40>)
 800a4d6:	4c0c      	ldr	r4, [pc, #48]	; (800a508 <__libc_init_array+0x44>)
 800a4d8:	f002 fd9c 	bl	800d014 <_init>
 800a4dc:	1b64      	subs	r4, r4, r5
 800a4de:	10a4      	asrs	r4, r4, #2
 800a4e0:	2600      	movs	r6, #0
 800a4e2:	42a6      	cmp	r6, r4
 800a4e4:	d105      	bne.n	800a4f2 <__libc_init_array+0x2e>
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}
 800a4e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ec:	4798      	blx	r3
 800a4ee:	3601      	adds	r6, #1
 800a4f0:	e7ee      	b.n	800a4d0 <__libc_init_array+0xc>
 800a4f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4f6:	4798      	blx	r3
 800a4f8:	3601      	adds	r6, #1
 800a4fa:	e7f2      	b.n	800a4e2 <__libc_init_array+0x1e>
 800a4fc:	0800d434 	.word	0x0800d434
 800a500:	0800d434 	.word	0x0800d434
 800a504:	0800d434 	.word	0x0800d434
 800a508:	0800d438 	.word	0x0800d438

0800a50c <malloc>:
 800a50c:	4b02      	ldr	r3, [pc, #8]	; (800a518 <malloc+0xc>)
 800a50e:	4601      	mov	r1, r0
 800a510:	6818      	ldr	r0, [r3, #0]
 800a512:	f000 b87f 	b.w	800a614 <_malloc_r>
 800a516:	bf00      	nop
 800a518:	20000034 	.word	0x20000034

0800a51c <free>:
 800a51c:	4b02      	ldr	r3, [pc, #8]	; (800a528 <free+0xc>)
 800a51e:	4601      	mov	r1, r0
 800a520:	6818      	ldr	r0, [r3, #0]
 800a522:	f000 b80b 	b.w	800a53c <_free_r>
 800a526:	bf00      	nop
 800a528:	20000034 	.word	0x20000034

0800a52c <memset>:
 800a52c:	4402      	add	r2, r0
 800a52e:	4603      	mov	r3, r0
 800a530:	4293      	cmp	r3, r2
 800a532:	d100      	bne.n	800a536 <memset+0xa>
 800a534:	4770      	bx	lr
 800a536:	f803 1b01 	strb.w	r1, [r3], #1
 800a53a:	e7f9      	b.n	800a530 <memset+0x4>

0800a53c <_free_r>:
 800a53c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a53e:	2900      	cmp	r1, #0
 800a540:	d044      	beq.n	800a5cc <_free_r+0x90>
 800a542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a546:	9001      	str	r0, [sp, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f1a1 0404 	sub.w	r4, r1, #4
 800a54e:	bfb8      	it	lt
 800a550:	18e4      	addlt	r4, r4, r3
 800a552:	f001 fceb 	bl	800bf2c <__malloc_lock>
 800a556:	4a1e      	ldr	r2, [pc, #120]	; (800a5d0 <_free_r+0x94>)
 800a558:	9801      	ldr	r0, [sp, #4]
 800a55a:	6813      	ldr	r3, [r2, #0]
 800a55c:	b933      	cbnz	r3, 800a56c <_free_r+0x30>
 800a55e:	6063      	str	r3, [r4, #4]
 800a560:	6014      	str	r4, [r2, #0]
 800a562:	b003      	add	sp, #12
 800a564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a568:	f001 bce6 	b.w	800bf38 <__malloc_unlock>
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	d908      	bls.n	800a582 <_free_r+0x46>
 800a570:	6825      	ldr	r5, [r4, #0]
 800a572:	1961      	adds	r1, r4, r5
 800a574:	428b      	cmp	r3, r1
 800a576:	bf01      	itttt	eq
 800a578:	6819      	ldreq	r1, [r3, #0]
 800a57a:	685b      	ldreq	r3, [r3, #4]
 800a57c:	1949      	addeq	r1, r1, r5
 800a57e:	6021      	streq	r1, [r4, #0]
 800a580:	e7ed      	b.n	800a55e <_free_r+0x22>
 800a582:	461a      	mov	r2, r3
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	b10b      	cbz	r3, 800a58c <_free_r+0x50>
 800a588:	42a3      	cmp	r3, r4
 800a58a:	d9fa      	bls.n	800a582 <_free_r+0x46>
 800a58c:	6811      	ldr	r1, [r2, #0]
 800a58e:	1855      	adds	r5, r2, r1
 800a590:	42a5      	cmp	r5, r4
 800a592:	d10b      	bne.n	800a5ac <_free_r+0x70>
 800a594:	6824      	ldr	r4, [r4, #0]
 800a596:	4421      	add	r1, r4
 800a598:	1854      	adds	r4, r2, r1
 800a59a:	42a3      	cmp	r3, r4
 800a59c:	6011      	str	r1, [r2, #0]
 800a59e:	d1e0      	bne.n	800a562 <_free_r+0x26>
 800a5a0:	681c      	ldr	r4, [r3, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	6053      	str	r3, [r2, #4]
 800a5a6:	4421      	add	r1, r4
 800a5a8:	6011      	str	r1, [r2, #0]
 800a5aa:	e7da      	b.n	800a562 <_free_r+0x26>
 800a5ac:	d902      	bls.n	800a5b4 <_free_r+0x78>
 800a5ae:	230c      	movs	r3, #12
 800a5b0:	6003      	str	r3, [r0, #0]
 800a5b2:	e7d6      	b.n	800a562 <_free_r+0x26>
 800a5b4:	6825      	ldr	r5, [r4, #0]
 800a5b6:	1961      	adds	r1, r4, r5
 800a5b8:	428b      	cmp	r3, r1
 800a5ba:	bf04      	itt	eq
 800a5bc:	6819      	ldreq	r1, [r3, #0]
 800a5be:	685b      	ldreq	r3, [r3, #4]
 800a5c0:	6063      	str	r3, [r4, #4]
 800a5c2:	bf04      	itt	eq
 800a5c4:	1949      	addeq	r1, r1, r5
 800a5c6:	6021      	streq	r1, [r4, #0]
 800a5c8:	6054      	str	r4, [r2, #4]
 800a5ca:	e7ca      	b.n	800a562 <_free_r+0x26>
 800a5cc:	b003      	add	sp, #12
 800a5ce:	bd30      	pop	{r4, r5, pc}
 800a5d0:	20000234 	.word	0x20000234

0800a5d4 <sbrk_aligned>:
 800a5d4:	b570      	push	{r4, r5, r6, lr}
 800a5d6:	4e0e      	ldr	r6, [pc, #56]	; (800a610 <sbrk_aligned+0x3c>)
 800a5d8:	460c      	mov	r4, r1
 800a5da:	6831      	ldr	r1, [r6, #0]
 800a5dc:	4605      	mov	r5, r0
 800a5de:	b911      	cbnz	r1, 800a5e6 <sbrk_aligned+0x12>
 800a5e0:	f000 fd0e 	bl	800b000 <_sbrk_r>
 800a5e4:	6030      	str	r0, [r6, #0]
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f000 fd09 	bl	800b000 <_sbrk_r>
 800a5ee:	1c43      	adds	r3, r0, #1
 800a5f0:	d00a      	beq.n	800a608 <sbrk_aligned+0x34>
 800a5f2:	1cc4      	adds	r4, r0, #3
 800a5f4:	f024 0403 	bic.w	r4, r4, #3
 800a5f8:	42a0      	cmp	r0, r4
 800a5fa:	d007      	beq.n	800a60c <sbrk_aligned+0x38>
 800a5fc:	1a21      	subs	r1, r4, r0
 800a5fe:	4628      	mov	r0, r5
 800a600:	f000 fcfe 	bl	800b000 <_sbrk_r>
 800a604:	3001      	adds	r0, #1
 800a606:	d101      	bne.n	800a60c <sbrk_aligned+0x38>
 800a608:	f04f 34ff 	mov.w	r4, #4294967295
 800a60c:	4620      	mov	r0, r4
 800a60e:	bd70      	pop	{r4, r5, r6, pc}
 800a610:	20000238 	.word	0x20000238

0800a614 <_malloc_r>:
 800a614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a618:	1ccd      	adds	r5, r1, #3
 800a61a:	f025 0503 	bic.w	r5, r5, #3
 800a61e:	3508      	adds	r5, #8
 800a620:	2d0c      	cmp	r5, #12
 800a622:	bf38      	it	cc
 800a624:	250c      	movcc	r5, #12
 800a626:	2d00      	cmp	r5, #0
 800a628:	4607      	mov	r7, r0
 800a62a:	db01      	blt.n	800a630 <_malloc_r+0x1c>
 800a62c:	42a9      	cmp	r1, r5
 800a62e:	d905      	bls.n	800a63c <_malloc_r+0x28>
 800a630:	230c      	movs	r3, #12
 800a632:	603b      	str	r3, [r7, #0]
 800a634:	2600      	movs	r6, #0
 800a636:	4630      	mov	r0, r6
 800a638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a63c:	4e2e      	ldr	r6, [pc, #184]	; (800a6f8 <_malloc_r+0xe4>)
 800a63e:	f001 fc75 	bl	800bf2c <__malloc_lock>
 800a642:	6833      	ldr	r3, [r6, #0]
 800a644:	461c      	mov	r4, r3
 800a646:	bb34      	cbnz	r4, 800a696 <_malloc_r+0x82>
 800a648:	4629      	mov	r1, r5
 800a64a:	4638      	mov	r0, r7
 800a64c:	f7ff ffc2 	bl	800a5d4 <sbrk_aligned>
 800a650:	1c43      	adds	r3, r0, #1
 800a652:	4604      	mov	r4, r0
 800a654:	d14d      	bne.n	800a6f2 <_malloc_r+0xde>
 800a656:	6834      	ldr	r4, [r6, #0]
 800a658:	4626      	mov	r6, r4
 800a65a:	2e00      	cmp	r6, #0
 800a65c:	d140      	bne.n	800a6e0 <_malloc_r+0xcc>
 800a65e:	6823      	ldr	r3, [r4, #0]
 800a660:	4631      	mov	r1, r6
 800a662:	4638      	mov	r0, r7
 800a664:	eb04 0803 	add.w	r8, r4, r3
 800a668:	f000 fcca 	bl	800b000 <_sbrk_r>
 800a66c:	4580      	cmp	r8, r0
 800a66e:	d13a      	bne.n	800a6e6 <_malloc_r+0xd2>
 800a670:	6821      	ldr	r1, [r4, #0]
 800a672:	3503      	adds	r5, #3
 800a674:	1a6d      	subs	r5, r5, r1
 800a676:	f025 0503 	bic.w	r5, r5, #3
 800a67a:	3508      	adds	r5, #8
 800a67c:	2d0c      	cmp	r5, #12
 800a67e:	bf38      	it	cc
 800a680:	250c      	movcc	r5, #12
 800a682:	4629      	mov	r1, r5
 800a684:	4638      	mov	r0, r7
 800a686:	f7ff ffa5 	bl	800a5d4 <sbrk_aligned>
 800a68a:	3001      	adds	r0, #1
 800a68c:	d02b      	beq.n	800a6e6 <_malloc_r+0xd2>
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	442b      	add	r3, r5
 800a692:	6023      	str	r3, [r4, #0]
 800a694:	e00e      	b.n	800a6b4 <_malloc_r+0xa0>
 800a696:	6822      	ldr	r2, [r4, #0]
 800a698:	1b52      	subs	r2, r2, r5
 800a69a:	d41e      	bmi.n	800a6da <_malloc_r+0xc6>
 800a69c:	2a0b      	cmp	r2, #11
 800a69e:	d916      	bls.n	800a6ce <_malloc_r+0xba>
 800a6a0:	1961      	adds	r1, r4, r5
 800a6a2:	42a3      	cmp	r3, r4
 800a6a4:	6025      	str	r5, [r4, #0]
 800a6a6:	bf18      	it	ne
 800a6a8:	6059      	strne	r1, [r3, #4]
 800a6aa:	6863      	ldr	r3, [r4, #4]
 800a6ac:	bf08      	it	eq
 800a6ae:	6031      	streq	r1, [r6, #0]
 800a6b0:	5162      	str	r2, [r4, r5]
 800a6b2:	604b      	str	r3, [r1, #4]
 800a6b4:	4638      	mov	r0, r7
 800a6b6:	f104 060b 	add.w	r6, r4, #11
 800a6ba:	f001 fc3d 	bl	800bf38 <__malloc_unlock>
 800a6be:	f026 0607 	bic.w	r6, r6, #7
 800a6c2:	1d23      	adds	r3, r4, #4
 800a6c4:	1af2      	subs	r2, r6, r3
 800a6c6:	d0b6      	beq.n	800a636 <_malloc_r+0x22>
 800a6c8:	1b9b      	subs	r3, r3, r6
 800a6ca:	50a3      	str	r3, [r4, r2]
 800a6cc:	e7b3      	b.n	800a636 <_malloc_r+0x22>
 800a6ce:	6862      	ldr	r2, [r4, #4]
 800a6d0:	42a3      	cmp	r3, r4
 800a6d2:	bf0c      	ite	eq
 800a6d4:	6032      	streq	r2, [r6, #0]
 800a6d6:	605a      	strne	r2, [r3, #4]
 800a6d8:	e7ec      	b.n	800a6b4 <_malloc_r+0xa0>
 800a6da:	4623      	mov	r3, r4
 800a6dc:	6864      	ldr	r4, [r4, #4]
 800a6de:	e7b2      	b.n	800a646 <_malloc_r+0x32>
 800a6e0:	4634      	mov	r4, r6
 800a6e2:	6876      	ldr	r6, [r6, #4]
 800a6e4:	e7b9      	b.n	800a65a <_malloc_r+0x46>
 800a6e6:	230c      	movs	r3, #12
 800a6e8:	603b      	str	r3, [r7, #0]
 800a6ea:	4638      	mov	r0, r7
 800a6ec:	f001 fc24 	bl	800bf38 <__malloc_unlock>
 800a6f0:	e7a1      	b.n	800a636 <_malloc_r+0x22>
 800a6f2:	6025      	str	r5, [r4, #0]
 800a6f4:	e7de      	b.n	800a6b4 <_malloc_r+0xa0>
 800a6f6:	bf00      	nop
 800a6f8:	20000234 	.word	0x20000234

0800a6fc <__cvt>:
 800a6fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a700:	ec55 4b10 	vmov	r4, r5, d0
 800a704:	2d00      	cmp	r5, #0
 800a706:	460e      	mov	r6, r1
 800a708:	4619      	mov	r1, r3
 800a70a:	462b      	mov	r3, r5
 800a70c:	bfbb      	ittet	lt
 800a70e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a712:	461d      	movlt	r5, r3
 800a714:	2300      	movge	r3, #0
 800a716:	232d      	movlt	r3, #45	; 0x2d
 800a718:	700b      	strb	r3, [r1, #0]
 800a71a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a71c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a720:	4691      	mov	r9, r2
 800a722:	f023 0820 	bic.w	r8, r3, #32
 800a726:	bfbc      	itt	lt
 800a728:	4622      	movlt	r2, r4
 800a72a:	4614      	movlt	r4, r2
 800a72c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a730:	d005      	beq.n	800a73e <__cvt+0x42>
 800a732:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a736:	d100      	bne.n	800a73a <__cvt+0x3e>
 800a738:	3601      	adds	r6, #1
 800a73a:	2102      	movs	r1, #2
 800a73c:	e000      	b.n	800a740 <__cvt+0x44>
 800a73e:	2103      	movs	r1, #3
 800a740:	ab03      	add	r3, sp, #12
 800a742:	9301      	str	r3, [sp, #4]
 800a744:	ab02      	add	r3, sp, #8
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	ec45 4b10 	vmov	d0, r4, r5
 800a74c:	4653      	mov	r3, sl
 800a74e:	4632      	mov	r2, r6
 800a750:	f000 fcf2 	bl	800b138 <_dtoa_r>
 800a754:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a758:	4607      	mov	r7, r0
 800a75a:	d102      	bne.n	800a762 <__cvt+0x66>
 800a75c:	f019 0f01 	tst.w	r9, #1
 800a760:	d022      	beq.n	800a7a8 <__cvt+0xac>
 800a762:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a766:	eb07 0906 	add.w	r9, r7, r6
 800a76a:	d110      	bne.n	800a78e <__cvt+0x92>
 800a76c:	783b      	ldrb	r3, [r7, #0]
 800a76e:	2b30      	cmp	r3, #48	; 0x30
 800a770:	d10a      	bne.n	800a788 <__cvt+0x8c>
 800a772:	2200      	movs	r2, #0
 800a774:	2300      	movs	r3, #0
 800a776:	4620      	mov	r0, r4
 800a778:	4629      	mov	r1, r5
 800a77a:	f7f6 f9ad 	bl	8000ad8 <__aeabi_dcmpeq>
 800a77e:	b918      	cbnz	r0, 800a788 <__cvt+0x8c>
 800a780:	f1c6 0601 	rsb	r6, r6, #1
 800a784:	f8ca 6000 	str.w	r6, [sl]
 800a788:	f8da 3000 	ldr.w	r3, [sl]
 800a78c:	4499      	add	r9, r3
 800a78e:	2200      	movs	r2, #0
 800a790:	2300      	movs	r3, #0
 800a792:	4620      	mov	r0, r4
 800a794:	4629      	mov	r1, r5
 800a796:	f7f6 f99f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a79a:	b108      	cbz	r0, 800a7a0 <__cvt+0xa4>
 800a79c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a7a0:	2230      	movs	r2, #48	; 0x30
 800a7a2:	9b03      	ldr	r3, [sp, #12]
 800a7a4:	454b      	cmp	r3, r9
 800a7a6:	d307      	bcc.n	800a7b8 <__cvt+0xbc>
 800a7a8:	9b03      	ldr	r3, [sp, #12]
 800a7aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7ac:	1bdb      	subs	r3, r3, r7
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	b004      	add	sp, #16
 800a7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7b8:	1c59      	adds	r1, r3, #1
 800a7ba:	9103      	str	r1, [sp, #12]
 800a7bc:	701a      	strb	r2, [r3, #0]
 800a7be:	e7f0      	b.n	800a7a2 <__cvt+0xa6>

0800a7c0 <__exponent>:
 800a7c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2900      	cmp	r1, #0
 800a7c6:	bfb8      	it	lt
 800a7c8:	4249      	neglt	r1, r1
 800a7ca:	f803 2b02 	strb.w	r2, [r3], #2
 800a7ce:	bfb4      	ite	lt
 800a7d0:	222d      	movlt	r2, #45	; 0x2d
 800a7d2:	222b      	movge	r2, #43	; 0x2b
 800a7d4:	2909      	cmp	r1, #9
 800a7d6:	7042      	strb	r2, [r0, #1]
 800a7d8:	dd2a      	ble.n	800a830 <__exponent+0x70>
 800a7da:	f10d 0407 	add.w	r4, sp, #7
 800a7de:	46a4      	mov	ip, r4
 800a7e0:	270a      	movs	r7, #10
 800a7e2:	46a6      	mov	lr, r4
 800a7e4:	460a      	mov	r2, r1
 800a7e6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a7ea:	fb07 1516 	mls	r5, r7, r6, r1
 800a7ee:	3530      	adds	r5, #48	; 0x30
 800a7f0:	2a63      	cmp	r2, #99	; 0x63
 800a7f2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a7f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	dcf1      	bgt.n	800a7e2 <__exponent+0x22>
 800a7fe:	3130      	adds	r1, #48	; 0x30
 800a800:	f1ae 0502 	sub.w	r5, lr, #2
 800a804:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a808:	1c44      	adds	r4, r0, #1
 800a80a:	4629      	mov	r1, r5
 800a80c:	4561      	cmp	r1, ip
 800a80e:	d30a      	bcc.n	800a826 <__exponent+0x66>
 800a810:	f10d 0209 	add.w	r2, sp, #9
 800a814:	eba2 020e 	sub.w	r2, r2, lr
 800a818:	4565      	cmp	r5, ip
 800a81a:	bf88      	it	hi
 800a81c:	2200      	movhi	r2, #0
 800a81e:	4413      	add	r3, r2
 800a820:	1a18      	subs	r0, r3, r0
 800a822:	b003      	add	sp, #12
 800a824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a82a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a82e:	e7ed      	b.n	800a80c <__exponent+0x4c>
 800a830:	2330      	movs	r3, #48	; 0x30
 800a832:	3130      	adds	r1, #48	; 0x30
 800a834:	7083      	strb	r3, [r0, #2]
 800a836:	70c1      	strb	r1, [r0, #3]
 800a838:	1d03      	adds	r3, r0, #4
 800a83a:	e7f1      	b.n	800a820 <__exponent+0x60>

0800a83c <_printf_float>:
 800a83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a840:	ed2d 8b02 	vpush	{d8}
 800a844:	b08d      	sub	sp, #52	; 0x34
 800a846:	460c      	mov	r4, r1
 800a848:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a84c:	4616      	mov	r6, r2
 800a84e:	461f      	mov	r7, r3
 800a850:	4605      	mov	r5, r0
 800a852:	f001 fb55 	bl	800bf00 <_localeconv_r>
 800a856:	f8d0 a000 	ldr.w	sl, [r0]
 800a85a:	4650      	mov	r0, sl
 800a85c:	f7f5 fcc0 	bl	80001e0 <strlen>
 800a860:	2300      	movs	r3, #0
 800a862:	930a      	str	r3, [sp, #40]	; 0x28
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	9305      	str	r3, [sp, #20]
 800a868:	f8d8 3000 	ldr.w	r3, [r8]
 800a86c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a870:	3307      	adds	r3, #7
 800a872:	f023 0307 	bic.w	r3, r3, #7
 800a876:	f103 0208 	add.w	r2, r3, #8
 800a87a:	f8c8 2000 	str.w	r2, [r8]
 800a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a882:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a886:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a88a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a88e:	9307      	str	r3, [sp, #28]
 800a890:	f8cd 8018 	str.w	r8, [sp, #24]
 800a894:	ee08 0a10 	vmov	s16, r0
 800a898:	4b9f      	ldr	r3, [pc, #636]	; (800ab18 <_printf_float+0x2dc>)
 800a89a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a89e:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a2:	f7f6 f94b 	bl	8000b3c <__aeabi_dcmpun>
 800a8a6:	bb88      	cbnz	r0, 800a90c <_printf_float+0xd0>
 800a8a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8ac:	4b9a      	ldr	r3, [pc, #616]	; (800ab18 <_printf_float+0x2dc>)
 800a8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b2:	f7f6 f925 	bl	8000b00 <__aeabi_dcmple>
 800a8b6:	bb48      	cbnz	r0, 800a90c <_printf_float+0xd0>
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	4640      	mov	r0, r8
 800a8be:	4649      	mov	r1, r9
 800a8c0:	f7f6 f914 	bl	8000aec <__aeabi_dcmplt>
 800a8c4:	b110      	cbz	r0, 800a8cc <_printf_float+0x90>
 800a8c6:	232d      	movs	r3, #45	; 0x2d
 800a8c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8cc:	4b93      	ldr	r3, [pc, #588]	; (800ab1c <_printf_float+0x2e0>)
 800a8ce:	4894      	ldr	r0, [pc, #592]	; (800ab20 <_printf_float+0x2e4>)
 800a8d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a8d4:	bf94      	ite	ls
 800a8d6:	4698      	movls	r8, r3
 800a8d8:	4680      	movhi	r8, r0
 800a8da:	2303      	movs	r3, #3
 800a8dc:	6123      	str	r3, [r4, #16]
 800a8de:	9b05      	ldr	r3, [sp, #20]
 800a8e0:	f023 0204 	bic.w	r2, r3, #4
 800a8e4:	6022      	str	r2, [r4, #0]
 800a8e6:	f04f 0900 	mov.w	r9, #0
 800a8ea:	9700      	str	r7, [sp, #0]
 800a8ec:	4633      	mov	r3, r6
 800a8ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	f000 f9d8 	bl	800aca8 <_printf_common>
 800a8f8:	3001      	adds	r0, #1
 800a8fa:	f040 8090 	bne.w	800aa1e <_printf_float+0x1e2>
 800a8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a902:	b00d      	add	sp, #52	; 0x34
 800a904:	ecbd 8b02 	vpop	{d8}
 800a908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90c:	4642      	mov	r2, r8
 800a90e:	464b      	mov	r3, r9
 800a910:	4640      	mov	r0, r8
 800a912:	4649      	mov	r1, r9
 800a914:	f7f6 f912 	bl	8000b3c <__aeabi_dcmpun>
 800a918:	b140      	cbz	r0, 800a92c <_printf_float+0xf0>
 800a91a:	464b      	mov	r3, r9
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	bfbc      	itt	lt
 800a920:	232d      	movlt	r3, #45	; 0x2d
 800a922:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a926:	487f      	ldr	r0, [pc, #508]	; (800ab24 <_printf_float+0x2e8>)
 800a928:	4b7f      	ldr	r3, [pc, #508]	; (800ab28 <_printf_float+0x2ec>)
 800a92a:	e7d1      	b.n	800a8d0 <_printf_float+0x94>
 800a92c:	6863      	ldr	r3, [r4, #4]
 800a92e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a932:	9206      	str	r2, [sp, #24]
 800a934:	1c5a      	adds	r2, r3, #1
 800a936:	d13f      	bne.n	800a9b8 <_printf_float+0x17c>
 800a938:	2306      	movs	r3, #6
 800a93a:	6063      	str	r3, [r4, #4]
 800a93c:	9b05      	ldr	r3, [sp, #20]
 800a93e:	6861      	ldr	r1, [r4, #4]
 800a940:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a944:	2300      	movs	r3, #0
 800a946:	9303      	str	r3, [sp, #12]
 800a948:	ab0a      	add	r3, sp, #40	; 0x28
 800a94a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a94e:	ab09      	add	r3, sp, #36	; 0x24
 800a950:	ec49 8b10 	vmov	d0, r8, r9
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	6022      	str	r2, [r4, #0]
 800a958:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a95c:	4628      	mov	r0, r5
 800a95e:	f7ff fecd 	bl	800a6fc <__cvt>
 800a962:	9b06      	ldr	r3, [sp, #24]
 800a964:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a966:	2b47      	cmp	r3, #71	; 0x47
 800a968:	4680      	mov	r8, r0
 800a96a:	d108      	bne.n	800a97e <_printf_float+0x142>
 800a96c:	1cc8      	adds	r0, r1, #3
 800a96e:	db02      	blt.n	800a976 <_printf_float+0x13a>
 800a970:	6863      	ldr	r3, [r4, #4]
 800a972:	4299      	cmp	r1, r3
 800a974:	dd41      	ble.n	800a9fa <_printf_float+0x1be>
 800a976:	f1ab 0b02 	sub.w	fp, fp, #2
 800a97a:	fa5f fb8b 	uxtb.w	fp, fp
 800a97e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a982:	d820      	bhi.n	800a9c6 <_printf_float+0x18a>
 800a984:	3901      	subs	r1, #1
 800a986:	465a      	mov	r2, fp
 800a988:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a98c:	9109      	str	r1, [sp, #36]	; 0x24
 800a98e:	f7ff ff17 	bl	800a7c0 <__exponent>
 800a992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a994:	1813      	adds	r3, r2, r0
 800a996:	2a01      	cmp	r2, #1
 800a998:	4681      	mov	r9, r0
 800a99a:	6123      	str	r3, [r4, #16]
 800a99c:	dc02      	bgt.n	800a9a4 <_printf_float+0x168>
 800a99e:	6822      	ldr	r2, [r4, #0]
 800a9a0:	07d2      	lsls	r2, r2, #31
 800a9a2:	d501      	bpl.n	800a9a8 <_printf_float+0x16c>
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	6123      	str	r3, [r4, #16]
 800a9a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d09c      	beq.n	800a8ea <_printf_float+0xae>
 800a9b0:	232d      	movs	r3, #45	; 0x2d
 800a9b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9b6:	e798      	b.n	800a8ea <_printf_float+0xae>
 800a9b8:	9a06      	ldr	r2, [sp, #24]
 800a9ba:	2a47      	cmp	r2, #71	; 0x47
 800a9bc:	d1be      	bne.n	800a93c <_printf_float+0x100>
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d1bc      	bne.n	800a93c <_printf_float+0x100>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e7b9      	b.n	800a93a <_printf_float+0xfe>
 800a9c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a9ca:	d118      	bne.n	800a9fe <_printf_float+0x1c2>
 800a9cc:	2900      	cmp	r1, #0
 800a9ce:	6863      	ldr	r3, [r4, #4]
 800a9d0:	dd0b      	ble.n	800a9ea <_printf_float+0x1ae>
 800a9d2:	6121      	str	r1, [r4, #16]
 800a9d4:	b913      	cbnz	r3, 800a9dc <_printf_float+0x1a0>
 800a9d6:	6822      	ldr	r2, [r4, #0]
 800a9d8:	07d0      	lsls	r0, r2, #31
 800a9da:	d502      	bpl.n	800a9e2 <_printf_float+0x1a6>
 800a9dc:	3301      	adds	r3, #1
 800a9de:	440b      	add	r3, r1
 800a9e0:	6123      	str	r3, [r4, #16]
 800a9e2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a9e4:	f04f 0900 	mov.w	r9, #0
 800a9e8:	e7de      	b.n	800a9a8 <_printf_float+0x16c>
 800a9ea:	b913      	cbnz	r3, 800a9f2 <_printf_float+0x1b6>
 800a9ec:	6822      	ldr	r2, [r4, #0]
 800a9ee:	07d2      	lsls	r2, r2, #31
 800a9f0:	d501      	bpl.n	800a9f6 <_printf_float+0x1ba>
 800a9f2:	3302      	adds	r3, #2
 800a9f4:	e7f4      	b.n	800a9e0 <_printf_float+0x1a4>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e7f2      	b.n	800a9e0 <_printf_float+0x1a4>
 800a9fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a9fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa00:	4299      	cmp	r1, r3
 800aa02:	db05      	blt.n	800aa10 <_printf_float+0x1d4>
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	6121      	str	r1, [r4, #16]
 800aa08:	07d8      	lsls	r0, r3, #31
 800aa0a:	d5ea      	bpl.n	800a9e2 <_printf_float+0x1a6>
 800aa0c:	1c4b      	adds	r3, r1, #1
 800aa0e:	e7e7      	b.n	800a9e0 <_printf_float+0x1a4>
 800aa10:	2900      	cmp	r1, #0
 800aa12:	bfd4      	ite	le
 800aa14:	f1c1 0202 	rsble	r2, r1, #2
 800aa18:	2201      	movgt	r2, #1
 800aa1a:	4413      	add	r3, r2
 800aa1c:	e7e0      	b.n	800a9e0 <_printf_float+0x1a4>
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	055a      	lsls	r2, r3, #21
 800aa22:	d407      	bmi.n	800aa34 <_printf_float+0x1f8>
 800aa24:	6923      	ldr	r3, [r4, #16]
 800aa26:	4642      	mov	r2, r8
 800aa28:	4631      	mov	r1, r6
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	47b8      	blx	r7
 800aa2e:	3001      	adds	r0, #1
 800aa30:	d12c      	bne.n	800aa8c <_printf_float+0x250>
 800aa32:	e764      	b.n	800a8fe <_printf_float+0xc2>
 800aa34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa38:	f240 80e0 	bls.w	800abfc <_printf_float+0x3c0>
 800aa3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa40:	2200      	movs	r2, #0
 800aa42:	2300      	movs	r3, #0
 800aa44:	f7f6 f848 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d034      	beq.n	800aab6 <_printf_float+0x27a>
 800aa4c:	4a37      	ldr	r2, [pc, #220]	; (800ab2c <_printf_float+0x2f0>)
 800aa4e:	2301      	movs	r3, #1
 800aa50:	4631      	mov	r1, r6
 800aa52:	4628      	mov	r0, r5
 800aa54:	47b8      	blx	r7
 800aa56:	3001      	adds	r0, #1
 800aa58:	f43f af51 	beq.w	800a8fe <_printf_float+0xc2>
 800aa5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa60:	429a      	cmp	r2, r3
 800aa62:	db02      	blt.n	800aa6a <_printf_float+0x22e>
 800aa64:	6823      	ldr	r3, [r4, #0]
 800aa66:	07d8      	lsls	r0, r3, #31
 800aa68:	d510      	bpl.n	800aa8c <_printf_float+0x250>
 800aa6a:	ee18 3a10 	vmov	r3, s16
 800aa6e:	4652      	mov	r2, sl
 800aa70:	4631      	mov	r1, r6
 800aa72:	4628      	mov	r0, r5
 800aa74:	47b8      	blx	r7
 800aa76:	3001      	adds	r0, #1
 800aa78:	f43f af41 	beq.w	800a8fe <_printf_float+0xc2>
 800aa7c:	f04f 0800 	mov.w	r8, #0
 800aa80:	f104 091a 	add.w	r9, r4, #26
 800aa84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa86:	3b01      	subs	r3, #1
 800aa88:	4543      	cmp	r3, r8
 800aa8a:	dc09      	bgt.n	800aaa0 <_printf_float+0x264>
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	079b      	lsls	r3, r3, #30
 800aa90:	f100 8105 	bmi.w	800ac9e <_printf_float+0x462>
 800aa94:	68e0      	ldr	r0, [r4, #12]
 800aa96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa98:	4298      	cmp	r0, r3
 800aa9a:	bfb8      	it	lt
 800aa9c:	4618      	movlt	r0, r3
 800aa9e:	e730      	b.n	800a902 <_printf_float+0xc6>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	464a      	mov	r2, r9
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	47b8      	blx	r7
 800aaaa:	3001      	adds	r0, #1
 800aaac:	f43f af27 	beq.w	800a8fe <_printf_float+0xc2>
 800aab0:	f108 0801 	add.w	r8, r8, #1
 800aab4:	e7e6      	b.n	800aa84 <_printf_float+0x248>
 800aab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	dc39      	bgt.n	800ab30 <_printf_float+0x2f4>
 800aabc:	4a1b      	ldr	r2, [pc, #108]	; (800ab2c <_printf_float+0x2f0>)
 800aabe:	2301      	movs	r3, #1
 800aac0:	4631      	mov	r1, r6
 800aac2:	4628      	mov	r0, r5
 800aac4:	47b8      	blx	r7
 800aac6:	3001      	adds	r0, #1
 800aac8:	f43f af19 	beq.w	800a8fe <_printf_float+0xc2>
 800aacc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aad0:	4313      	orrs	r3, r2
 800aad2:	d102      	bne.n	800aada <_printf_float+0x29e>
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	07d9      	lsls	r1, r3, #31
 800aad8:	d5d8      	bpl.n	800aa8c <_printf_float+0x250>
 800aada:	ee18 3a10 	vmov	r3, s16
 800aade:	4652      	mov	r2, sl
 800aae0:	4631      	mov	r1, r6
 800aae2:	4628      	mov	r0, r5
 800aae4:	47b8      	blx	r7
 800aae6:	3001      	adds	r0, #1
 800aae8:	f43f af09 	beq.w	800a8fe <_printf_float+0xc2>
 800aaec:	f04f 0900 	mov.w	r9, #0
 800aaf0:	f104 0a1a 	add.w	sl, r4, #26
 800aaf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaf6:	425b      	negs	r3, r3
 800aaf8:	454b      	cmp	r3, r9
 800aafa:	dc01      	bgt.n	800ab00 <_printf_float+0x2c4>
 800aafc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aafe:	e792      	b.n	800aa26 <_printf_float+0x1ea>
 800ab00:	2301      	movs	r3, #1
 800ab02:	4652      	mov	r2, sl
 800ab04:	4631      	mov	r1, r6
 800ab06:	4628      	mov	r0, r5
 800ab08:	47b8      	blx	r7
 800ab0a:	3001      	adds	r0, #1
 800ab0c:	f43f aef7 	beq.w	800a8fe <_printf_float+0xc2>
 800ab10:	f109 0901 	add.w	r9, r9, #1
 800ab14:	e7ee      	b.n	800aaf4 <_printf_float+0x2b8>
 800ab16:	bf00      	nop
 800ab18:	7fefffff 	.word	0x7fefffff
 800ab1c:	0800d058 	.word	0x0800d058
 800ab20:	0800d05c 	.word	0x0800d05c
 800ab24:	0800d064 	.word	0x0800d064
 800ab28:	0800d060 	.word	0x0800d060
 800ab2c:	0800d068 	.word	0x0800d068
 800ab30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab34:	429a      	cmp	r2, r3
 800ab36:	bfa8      	it	ge
 800ab38:	461a      	movge	r2, r3
 800ab3a:	2a00      	cmp	r2, #0
 800ab3c:	4691      	mov	r9, r2
 800ab3e:	dc37      	bgt.n	800abb0 <_printf_float+0x374>
 800ab40:	f04f 0b00 	mov.w	fp, #0
 800ab44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab48:	f104 021a 	add.w	r2, r4, #26
 800ab4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab4e:	9305      	str	r3, [sp, #20]
 800ab50:	eba3 0309 	sub.w	r3, r3, r9
 800ab54:	455b      	cmp	r3, fp
 800ab56:	dc33      	bgt.n	800abc0 <_printf_float+0x384>
 800ab58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	db3b      	blt.n	800abd8 <_printf_float+0x39c>
 800ab60:	6823      	ldr	r3, [r4, #0]
 800ab62:	07da      	lsls	r2, r3, #31
 800ab64:	d438      	bmi.n	800abd8 <_printf_float+0x39c>
 800ab66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab68:	9a05      	ldr	r2, [sp, #20]
 800ab6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab6c:	1a9a      	subs	r2, r3, r2
 800ab6e:	eba3 0901 	sub.w	r9, r3, r1
 800ab72:	4591      	cmp	r9, r2
 800ab74:	bfa8      	it	ge
 800ab76:	4691      	movge	r9, r2
 800ab78:	f1b9 0f00 	cmp.w	r9, #0
 800ab7c:	dc35      	bgt.n	800abea <_printf_float+0x3ae>
 800ab7e:	f04f 0800 	mov.w	r8, #0
 800ab82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab86:	f104 0a1a 	add.w	sl, r4, #26
 800ab8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab8e:	1a9b      	subs	r3, r3, r2
 800ab90:	eba3 0309 	sub.w	r3, r3, r9
 800ab94:	4543      	cmp	r3, r8
 800ab96:	f77f af79 	ble.w	800aa8c <_printf_float+0x250>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	4652      	mov	r2, sl
 800ab9e:	4631      	mov	r1, r6
 800aba0:	4628      	mov	r0, r5
 800aba2:	47b8      	blx	r7
 800aba4:	3001      	adds	r0, #1
 800aba6:	f43f aeaa 	beq.w	800a8fe <_printf_float+0xc2>
 800abaa:	f108 0801 	add.w	r8, r8, #1
 800abae:	e7ec      	b.n	800ab8a <_printf_float+0x34e>
 800abb0:	4613      	mov	r3, r2
 800abb2:	4631      	mov	r1, r6
 800abb4:	4642      	mov	r2, r8
 800abb6:	4628      	mov	r0, r5
 800abb8:	47b8      	blx	r7
 800abba:	3001      	adds	r0, #1
 800abbc:	d1c0      	bne.n	800ab40 <_printf_float+0x304>
 800abbe:	e69e      	b.n	800a8fe <_printf_float+0xc2>
 800abc0:	2301      	movs	r3, #1
 800abc2:	4631      	mov	r1, r6
 800abc4:	4628      	mov	r0, r5
 800abc6:	9205      	str	r2, [sp, #20]
 800abc8:	47b8      	blx	r7
 800abca:	3001      	adds	r0, #1
 800abcc:	f43f ae97 	beq.w	800a8fe <_printf_float+0xc2>
 800abd0:	9a05      	ldr	r2, [sp, #20]
 800abd2:	f10b 0b01 	add.w	fp, fp, #1
 800abd6:	e7b9      	b.n	800ab4c <_printf_float+0x310>
 800abd8:	ee18 3a10 	vmov	r3, s16
 800abdc:	4652      	mov	r2, sl
 800abde:	4631      	mov	r1, r6
 800abe0:	4628      	mov	r0, r5
 800abe2:	47b8      	blx	r7
 800abe4:	3001      	adds	r0, #1
 800abe6:	d1be      	bne.n	800ab66 <_printf_float+0x32a>
 800abe8:	e689      	b.n	800a8fe <_printf_float+0xc2>
 800abea:	9a05      	ldr	r2, [sp, #20]
 800abec:	464b      	mov	r3, r9
 800abee:	4442      	add	r2, r8
 800abf0:	4631      	mov	r1, r6
 800abf2:	4628      	mov	r0, r5
 800abf4:	47b8      	blx	r7
 800abf6:	3001      	adds	r0, #1
 800abf8:	d1c1      	bne.n	800ab7e <_printf_float+0x342>
 800abfa:	e680      	b.n	800a8fe <_printf_float+0xc2>
 800abfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abfe:	2a01      	cmp	r2, #1
 800ac00:	dc01      	bgt.n	800ac06 <_printf_float+0x3ca>
 800ac02:	07db      	lsls	r3, r3, #31
 800ac04:	d538      	bpl.n	800ac78 <_printf_float+0x43c>
 800ac06:	2301      	movs	r3, #1
 800ac08:	4642      	mov	r2, r8
 800ac0a:	4631      	mov	r1, r6
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	47b8      	blx	r7
 800ac10:	3001      	adds	r0, #1
 800ac12:	f43f ae74 	beq.w	800a8fe <_printf_float+0xc2>
 800ac16:	ee18 3a10 	vmov	r3, s16
 800ac1a:	4652      	mov	r2, sl
 800ac1c:	4631      	mov	r1, r6
 800ac1e:	4628      	mov	r0, r5
 800ac20:	47b8      	blx	r7
 800ac22:	3001      	adds	r0, #1
 800ac24:	f43f ae6b 	beq.w	800a8fe <_printf_float+0xc2>
 800ac28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	2300      	movs	r3, #0
 800ac30:	f7f5 ff52 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac34:	b9d8      	cbnz	r0, 800ac6e <_printf_float+0x432>
 800ac36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac38:	f108 0201 	add.w	r2, r8, #1
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	4631      	mov	r1, r6
 800ac40:	4628      	mov	r0, r5
 800ac42:	47b8      	blx	r7
 800ac44:	3001      	adds	r0, #1
 800ac46:	d10e      	bne.n	800ac66 <_printf_float+0x42a>
 800ac48:	e659      	b.n	800a8fe <_printf_float+0xc2>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	4652      	mov	r2, sl
 800ac4e:	4631      	mov	r1, r6
 800ac50:	4628      	mov	r0, r5
 800ac52:	47b8      	blx	r7
 800ac54:	3001      	adds	r0, #1
 800ac56:	f43f ae52 	beq.w	800a8fe <_printf_float+0xc2>
 800ac5a:	f108 0801 	add.w	r8, r8, #1
 800ac5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac60:	3b01      	subs	r3, #1
 800ac62:	4543      	cmp	r3, r8
 800ac64:	dcf1      	bgt.n	800ac4a <_printf_float+0x40e>
 800ac66:	464b      	mov	r3, r9
 800ac68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac6c:	e6dc      	b.n	800aa28 <_printf_float+0x1ec>
 800ac6e:	f04f 0800 	mov.w	r8, #0
 800ac72:	f104 0a1a 	add.w	sl, r4, #26
 800ac76:	e7f2      	b.n	800ac5e <_printf_float+0x422>
 800ac78:	2301      	movs	r3, #1
 800ac7a:	4642      	mov	r2, r8
 800ac7c:	e7df      	b.n	800ac3e <_printf_float+0x402>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	464a      	mov	r2, r9
 800ac82:	4631      	mov	r1, r6
 800ac84:	4628      	mov	r0, r5
 800ac86:	47b8      	blx	r7
 800ac88:	3001      	adds	r0, #1
 800ac8a:	f43f ae38 	beq.w	800a8fe <_printf_float+0xc2>
 800ac8e:	f108 0801 	add.w	r8, r8, #1
 800ac92:	68e3      	ldr	r3, [r4, #12]
 800ac94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac96:	1a5b      	subs	r3, r3, r1
 800ac98:	4543      	cmp	r3, r8
 800ac9a:	dcf0      	bgt.n	800ac7e <_printf_float+0x442>
 800ac9c:	e6fa      	b.n	800aa94 <_printf_float+0x258>
 800ac9e:	f04f 0800 	mov.w	r8, #0
 800aca2:	f104 0919 	add.w	r9, r4, #25
 800aca6:	e7f4      	b.n	800ac92 <_printf_float+0x456>

0800aca8 <_printf_common>:
 800aca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acac:	4616      	mov	r6, r2
 800acae:	4699      	mov	r9, r3
 800acb0:	688a      	ldr	r2, [r1, #8]
 800acb2:	690b      	ldr	r3, [r1, #16]
 800acb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acb8:	4293      	cmp	r3, r2
 800acba:	bfb8      	it	lt
 800acbc:	4613      	movlt	r3, r2
 800acbe:	6033      	str	r3, [r6, #0]
 800acc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acc4:	4607      	mov	r7, r0
 800acc6:	460c      	mov	r4, r1
 800acc8:	b10a      	cbz	r2, 800acce <_printf_common+0x26>
 800acca:	3301      	adds	r3, #1
 800accc:	6033      	str	r3, [r6, #0]
 800acce:	6823      	ldr	r3, [r4, #0]
 800acd0:	0699      	lsls	r1, r3, #26
 800acd2:	bf42      	ittt	mi
 800acd4:	6833      	ldrmi	r3, [r6, #0]
 800acd6:	3302      	addmi	r3, #2
 800acd8:	6033      	strmi	r3, [r6, #0]
 800acda:	6825      	ldr	r5, [r4, #0]
 800acdc:	f015 0506 	ands.w	r5, r5, #6
 800ace0:	d106      	bne.n	800acf0 <_printf_common+0x48>
 800ace2:	f104 0a19 	add.w	sl, r4, #25
 800ace6:	68e3      	ldr	r3, [r4, #12]
 800ace8:	6832      	ldr	r2, [r6, #0]
 800acea:	1a9b      	subs	r3, r3, r2
 800acec:	42ab      	cmp	r3, r5
 800acee:	dc26      	bgt.n	800ad3e <_printf_common+0x96>
 800acf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800acf4:	1e13      	subs	r3, r2, #0
 800acf6:	6822      	ldr	r2, [r4, #0]
 800acf8:	bf18      	it	ne
 800acfa:	2301      	movne	r3, #1
 800acfc:	0692      	lsls	r2, r2, #26
 800acfe:	d42b      	bmi.n	800ad58 <_printf_common+0xb0>
 800ad00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad04:	4649      	mov	r1, r9
 800ad06:	4638      	mov	r0, r7
 800ad08:	47c0      	blx	r8
 800ad0a:	3001      	adds	r0, #1
 800ad0c:	d01e      	beq.n	800ad4c <_printf_common+0xa4>
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	68e5      	ldr	r5, [r4, #12]
 800ad12:	6832      	ldr	r2, [r6, #0]
 800ad14:	f003 0306 	and.w	r3, r3, #6
 800ad18:	2b04      	cmp	r3, #4
 800ad1a:	bf08      	it	eq
 800ad1c:	1aad      	subeq	r5, r5, r2
 800ad1e:	68a3      	ldr	r3, [r4, #8]
 800ad20:	6922      	ldr	r2, [r4, #16]
 800ad22:	bf0c      	ite	eq
 800ad24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad28:	2500      	movne	r5, #0
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	bfc4      	itt	gt
 800ad2e:	1a9b      	subgt	r3, r3, r2
 800ad30:	18ed      	addgt	r5, r5, r3
 800ad32:	2600      	movs	r6, #0
 800ad34:	341a      	adds	r4, #26
 800ad36:	42b5      	cmp	r5, r6
 800ad38:	d11a      	bne.n	800ad70 <_printf_common+0xc8>
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	e008      	b.n	800ad50 <_printf_common+0xa8>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	4652      	mov	r2, sl
 800ad42:	4649      	mov	r1, r9
 800ad44:	4638      	mov	r0, r7
 800ad46:	47c0      	blx	r8
 800ad48:	3001      	adds	r0, #1
 800ad4a:	d103      	bne.n	800ad54 <_printf_common+0xac>
 800ad4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad54:	3501      	adds	r5, #1
 800ad56:	e7c6      	b.n	800ace6 <_printf_common+0x3e>
 800ad58:	18e1      	adds	r1, r4, r3
 800ad5a:	1c5a      	adds	r2, r3, #1
 800ad5c:	2030      	movs	r0, #48	; 0x30
 800ad5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad62:	4422      	add	r2, r4
 800ad64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad6c:	3302      	adds	r3, #2
 800ad6e:	e7c7      	b.n	800ad00 <_printf_common+0x58>
 800ad70:	2301      	movs	r3, #1
 800ad72:	4622      	mov	r2, r4
 800ad74:	4649      	mov	r1, r9
 800ad76:	4638      	mov	r0, r7
 800ad78:	47c0      	blx	r8
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	d0e6      	beq.n	800ad4c <_printf_common+0xa4>
 800ad7e:	3601      	adds	r6, #1
 800ad80:	e7d9      	b.n	800ad36 <_printf_common+0x8e>
	...

0800ad84 <_printf_i>:
 800ad84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad88:	7e0f      	ldrb	r7, [r1, #24]
 800ad8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad8c:	2f78      	cmp	r7, #120	; 0x78
 800ad8e:	4691      	mov	r9, r2
 800ad90:	4680      	mov	r8, r0
 800ad92:	460c      	mov	r4, r1
 800ad94:	469a      	mov	sl, r3
 800ad96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad9a:	d807      	bhi.n	800adac <_printf_i+0x28>
 800ad9c:	2f62      	cmp	r7, #98	; 0x62
 800ad9e:	d80a      	bhi.n	800adb6 <_printf_i+0x32>
 800ada0:	2f00      	cmp	r7, #0
 800ada2:	f000 80d8 	beq.w	800af56 <_printf_i+0x1d2>
 800ada6:	2f58      	cmp	r7, #88	; 0x58
 800ada8:	f000 80a3 	beq.w	800aef2 <_printf_i+0x16e>
 800adac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800adb4:	e03a      	b.n	800ae2c <_printf_i+0xa8>
 800adb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800adba:	2b15      	cmp	r3, #21
 800adbc:	d8f6      	bhi.n	800adac <_printf_i+0x28>
 800adbe:	a101      	add	r1, pc, #4	; (adr r1, 800adc4 <_printf_i+0x40>)
 800adc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800adc4:	0800ae1d 	.word	0x0800ae1d
 800adc8:	0800ae31 	.word	0x0800ae31
 800adcc:	0800adad 	.word	0x0800adad
 800add0:	0800adad 	.word	0x0800adad
 800add4:	0800adad 	.word	0x0800adad
 800add8:	0800adad 	.word	0x0800adad
 800addc:	0800ae31 	.word	0x0800ae31
 800ade0:	0800adad 	.word	0x0800adad
 800ade4:	0800adad 	.word	0x0800adad
 800ade8:	0800adad 	.word	0x0800adad
 800adec:	0800adad 	.word	0x0800adad
 800adf0:	0800af3d 	.word	0x0800af3d
 800adf4:	0800ae61 	.word	0x0800ae61
 800adf8:	0800af1f 	.word	0x0800af1f
 800adfc:	0800adad 	.word	0x0800adad
 800ae00:	0800adad 	.word	0x0800adad
 800ae04:	0800af5f 	.word	0x0800af5f
 800ae08:	0800adad 	.word	0x0800adad
 800ae0c:	0800ae61 	.word	0x0800ae61
 800ae10:	0800adad 	.word	0x0800adad
 800ae14:	0800adad 	.word	0x0800adad
 800ae18:	0800af27 	.word	0x0800af27
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	1d1a      	adds	r2, r3, #4
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	602a      	str	r2, [r5, #0]
 800ae24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e0a3      	b.n	800af78 <_printf_i+0x1f4>
 800ae30:	6820      	ldr	r0, [r4, #0]
 800ae32:	6829      	ldr	r1, [r5, #0]
 800ae34:	0606      	lsls	r6, r0, #24
 800ae36:	f101 0304 	add.w	r3, r1, #4
 800ae3a:	d50a      	bpl.n	800ae52 <_printf_i+0xce>
 800ae3c:	680e      	ldr	r6, [r1, #0]
 800ae3e:	602b      	str	r3, [r5, #0]
 800ae40:	2e00      	cmp	r6, #0
 800ae42:	da03      	bge.n	800ae4c <_printf_i+0xc8>
 800ae44:	232d      	movs	r3, #45	; 0x2d
 800ae46:	4276      	negs	r6, r6
 800ae48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae4c:	485e      	ldr	r0, [pc, #376]	; (800afc8 <_printf_i+0x244>)
 800ae4e:	230a      	movs	r3, #10
 800ae50:	e019      	b.n	800ae86 <_printf_i+0x102>
 800ae52:	680e      	ldr	r6, [r1, #0]
 800ae54:	602b      	str	r3, [r5, #0]
 800ae56:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae5a:	bf18      	it	ne
 800ae5c:	b236      	sxthne	r6, r6
 800ae5e:	e7ef      	b.n	800ae40 <_printf_i+0xbc>
 800ae60:	682b      	ldr	r3, [r5, #0]
 800ae62:	6820      	ldr	r0, [r4, #0]
 800ae64:	1d19      	adds	r1, r3, #4
 800ae66:	6029      	str	r1, [r5, #0]
 800ae68:	0601      	lsls	r1, r0, #24
 800ae6a:	d501      	bpl.n	800ae70 <_printf_i+0xec>
 800ae6c:	681e      	ldr	r6, [r3, #0]
 800ae6e:	e002      	b.n	800ae76 <_printf_i+0xf2>
 800ae70:	0646      	lsls	r6, r0, #25
 800ae72:	d5fb      	bpl.n	800ae6c <_printf_i+0xe8>
 800ae74:	881e      	ldrh	r6, [r3, #0]
 800ae76:	4854      	ldr	r0, [pc, #336]	; (800afc8 <_printf_i+0x244>)
 800ae78:	2f6f      	cmp	r7, #111	; 0x6f
 800ae7a:	bf0c      	ite	eq
 800ae7c:	2308      	moveq	r3, #8
 800ae7e:	230a      	movne	r3, #10
 800ae80:	2100      	movs	r1, #0
 800ae82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae86:	6865      	ldr	r5, [r4, #4]
 800ae88:	60a5      	str	r5, [r4, #8]
 800ae8a:	2d00      	cmp	r5, #0
 800ae8c:	bfa2      	ittt	ge
 800ae8e:	6821      	ldrge	r1, [r4, #0]
 800ae90:	f021 0104 	bicge.w	r1, r1, #4
 800ae94:	6021      	strge	r1, [r4, #0]
 800ae96:	b90e      	cbnz	r6, 800ae9c <_printf_i+0x118>
 800ae98:	2d00      	cmp	r5, #0
 800ae9a:	d04d      	beq.n	800af38 <_printf_i+0x1b4>
 800ae9c:	4615      	mov	r5, r2
 800ae9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800aea2:	fb03 6711 	mls	r7, r3, r1, r6
 800aea6:	5dc7      	ldrb	r7, [r0, r7]
 800aea8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aeac:	4637      	mov	r7, r6
 800aeae:	42bb      	cmp	r3, r7
 800aeb0:	460e      	mov	r6, r1
 800aeb2:	d9f4      	bls.n	800ae9e <_printf_i+0x11a>
 800aeb4:	2b08      	cmp	r3, #8
 800aeb6:	d10b      	bne.n	800aed0 <_printf_i+0x14c>
 800aeb8:	6823      	ldr	r3, [r4, #0]
 800aeba:	07de      	lsls	r6, r3, #31
 800aebc:	d508      	bpl.n	800aed0 <_printf_i+0x14c>
 800aebe:	6923      	ldr	r3, [r4, #16]
 800aec0:	6861      	ldr	r1, [r4, #4]
 800aec2:	4299      	cmp	r1, r3
 800aec4:	bfde      	ittt	le
 800aec6:	2330      	movle	r3, #48	; 0x30
 800aec8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aecc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aed0:	1b52      	subs	r2, r2, r5
 800aed2:	6122      	str	r2, [r4, #16]
 800aed4:	f8cd a000 	str.w	sl, [sp]
 800aed8:	464b      	mov	r3, r9
 800aeda:	aa03      	add	r2, sp, #12
 800aedc:	4621      	mov	r1, r4
 800aede:	4640      	mov	r0, r8
 800aee0:	f7ff fee2 	bl	800aca8 <_printf_common>
 800aee4:	3001      	adds	r0, #1
 800aee6:	d14c      	bne.n	800af82 <_printf_i+0x1fe>
 800aee8:	f04f 30ff 	mov.w	r0, #4294967295
 800aeec:	b004      	add	sp, #16
 800aeee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef2:	4835      	ldr	r0, [pc, #212]	; (800afc8 <_printf_i+0x244>)
 800aef4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aef8:	6829      	ldr	r1, [r5, #0]
 800aefa:	6823      	ldr	r3, [r4, #0]
 800aefc:	f851 6b04 	ldr.w	r6, [r1], #4
 800af00:	6029      	str	r1, [r5, #0]
 800af02:	061d      	lsls	r5, r3, #24
 800af04:	d514      	bpl.n	800af30 <_printf_i+0x1ac>
 800af06:	07df      	lsls	r7, r3, #31
 800af08:	bf44      	itt	mi
 800af0a:	f043 0320 	orrmi.w	r3, r3, #32
 800af0e:	6023      	strmi	r3, [r4, #0]
 800af10:	b91e      	cbnz	r6, 800af1a <_printf_i+0x196>
 800af12:	6823      	ldr	r3, [r4, #0]
 800af14:	f023 0320 	bic.w	r3, r3, #32
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	2310      	movs	r3, #16
 800af1c:	e7b0      	b.n	800ae80 <_printf_i+0xfc>
 800af1e:	6823      	ldr	r3, [r4, #0]
 800af20:	f043 0320 	orr.w	r3, r3, #32
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	2378      	movs	r3, #120	; 0x78
 800af28:	4828      	ldr	r0, [pc, #160]	; (800afcc <_printf_i+0x248>)
 800af2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af2e:	e7e3      	b.n	800aef8 <_printf_i+0x174>
 800af30:	0659      	lsls	r1, r3, #25
 800af32:	bf48      	it	mi
 800af34:	b2b6      	uxthmi	r6, r6
 800af36:	e7e6      	b.n	800af06 <_printf_i+0x182>
 800af38:	4615      	mov	r5, r2
 800af3a:	e7bb      	b.n	800aeb4 <_printf_i+0x130>
 800af3c:	682b      	ldr	r3, [r5, #0]
 800af3e:	6826      	ldr	r6, [r4, #0]
 800af40:	6961      	ldr	r1, [r4, #20]
 800af42:	1d18      	adds	r0, r3, #4
 800af44:	6028      	str	r0, [r5, #0]
 800af46:	0635      	lsls	r5, r6, #24
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	d501      	bpl.n	800af50 <_printf_i+0x1cc>
 800af4c:	6019      	str	r1, [r3, #0]
 800af4e:	e002      	b.n	800af56 <_printf_i+0x1d2>
 800af50:	0670      	lsls	r0, r6, #25
 800af52:	d5fb      	bpl.n	800af4c <_printf_i+0x1c8>
 800af54:	8019      	strh	r1, [r3, #0]
 800af56:	2300      	movs	r3, #0
 800af58:	6123      	str	r3, [r4, #16]
 800af5a:	4615      	mov	r5, r2
 800af5c:	e7ba      	b.n	800aed4 <_printf_i+0x150>
 800af5e:	682b      	ldr	r3, [r5, #0]
 800af60:	1d1a      	adds	r2, r3, #4
 800af62:	602a      	str	r2, [r5, #0]
 800af64:	681d      	ldr	r5, [r3, #0]
 800af66:	6862      	ldr	r2, [r4, #4]
 800af68:	2100      	movs	r1, #0
 800af6a:	4628      	mov	r0, r5
 800af6c:	f7f5 f940 	bl	80001f0 <memchr>
 800af70:	b108      	cbz	r0, 800af76 <_printf_i+0x1f2>
 800af72:	1b40      	subs	r0, r0, r5
 800af74:	6060      	str	r0, [r4, #4]
 800af76:	6863      	ldr	r3, [r4, #4]
 800af78:	6123      	str	r3, [r4, #16]
 800af7a:	2300      	movs	r3, #0
 800af7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af80:	e7a8      	b.n	800aed4 <_printf_i+0x150>
 800af82:	6923      	ldr	r3, [r4, #16]
 800af84:	462a      	mov	r2, r5
 800af86:	4649      	mov	r1, r9
 800af88:	4640      	mov	r0, r8
 800af8a:	47d0      	blx	sl
 800af8c:	3001      	adds	r0, #1
 800af8e:	d0ab      	beq.n	800aee8 <_printf_i+0x164>
 800af90:	6823      	ldr	r3, [r4, #0]
 800af92:	079b      	lsls	r3, r3, #30
 800af94:	d413      	bmi.n	800afbe <_printf_i+0x23a>
 800af96:	68e0      	ldr	r0, [r4, #12]
 800af98:	9b03      	ldr	r3, [sp, #12]
 800af9a:	4298      	cmp	r0, r3
 800af9c:	bfb8      	it	lt
 800af9e:	4618      	movlt	r0, r3
 800afa0:	e7a4      	b.n	800aeec <_printf_i+0x168>
 800afa2:	2301      	movs	r3, #1
 800afa4:	4632      	mov	r2, r6
 800afa6:	4649      	mov	r1, r9
 800afa8:	4640      	mov	r0, r8
 800afaa:	47d0      	blx	sl
 800afac:	3001      	adds	r0, #1
 800afae:	d09b      	beq.n	800aee8 <_printf_i+0x164>
 800afb0:	3501      	adds	r5, #1
 800afb2:	68e3      	ldr	r3, [r4, #12]
 800afb4:	9903      	ldr	r1, [sp, #12]
 800afb6:	1a5b      	subs	r3, r3, r1
 800afb8:	42ab      	cmp	r3, r5
 800afba:	dcf2      	bgt.n	800afa2 <_printf_i+0x21e>
 800afbc:	e7eb      	b.n	800af96 <_printf_i+0x212>
 800afbe:	2500      	movs	r5, #0
 800afc0:	f104 0619 	add.w	r6, r4, #25
 800afc4:	e7f5      	b.n	800afb2 <_printf_i+0x22e>
 800afc6:	bf00      	nop
 800afc8:	0800d06a 	.word	0x0800d06a
 800afcc:	0800d07b 	.word	0x0800d07b

0800afd0 <iprintf>:
 800afd0:	b40f      	push	{r0, r1, r2, r3}
 800afd2:	4b0a      	ldr	r3, [pc, #40]	; (800affc <iprintf+0x2c>)
 800afd4:	b513      	push	{r0, r1, r4, lr}
 800afd6:	681c      	ldr	r4, [r3, #0]
 800afd8:	b124      	cbz	r4, 800afe4 <iprintf+0x14>
 800afda:	69a3      	ldr	r3, [r4, #24]
 800afdc:	b913      	cbnz	r3, 800afe4 <iprintf+0x14>
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 fef0 	bl	800bdc4 <__sinit>
 800afe4:	ab05      	add	r3, sp, #20
 800afe6:	9a04      	ldr	r2, [sp, #16]
 800afe8:	68a1      	ldr	r1, [r4, #8]
 800afea:	9301      	str	r3, [sp, #4]
 800afec:	4620      	mov	r0, r4
 800afee:	f001 fb6d 	bl	800c6cc <_vfiprintf_r>
 800aff2:	b002      	add	sp, #8
 800aff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aff8:	b004      	add	sp, #16
 800affa:	4770      	bx	lr
 800affc:	20000034 	.word	0x20000034

0800b000 <_sbrk_r>:
 800b000:	b538      	push	{r3, r4, r5, lr}
 800b002:	4d06      	ldr	r5, [pc, #24]	; (800b01c <_sbrk_r+0x1c>)
 800b004:	2300      	movs	r3, #0
 800b006:	4604      	mov	r4, r0
 800b008:	4608      	mov	r0, r1
 800b00a:	602b      	str	r3, [r5, #0]
 800b00c:	f7f7 fb82 	bl	8002714 <_sbrk>
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	d102      	bne.n	800b01a <_sbrk_r+0x1a>
 800b014:	682b      	ldr	r3, [r5, #0]
 800b016:	b103      	cbz	r3, 800b01a <_sbrk_r+0x1a>
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
 800b01c:	20000240 	.word	0x20000240

0800b020 <quorem>:
 800b020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	6903      	ldr	r3, [r0, #16]
 800b026:	690c      	ldr	r4, [r1, #16]
 800b028:	42a3      	cmp	r3, r4
 800b02a:	4607      	mov	r7, r0
 800b02c:	f2c0 8081 	blt.w	800b132 <quorem+0x112>
 800b030:	3c01      	subs	r4, #1
 800b032:	f101 0814 	add.w	r8, r1, #20
 800b036:	f100 0514 	add.w	r5, r0, #20
 800b03a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b03e:	9301      	str	r3, [sp, #4]
 800b040:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b044:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b048:	3301      	adds	r3, #1
 800b04a:	429a      	cmp	r2, r3
 800b04c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b050:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b054:	fbb2 f6f3 	udiv	r6, r2, r3
 800b058:	d331      	bcc.n	800b0be <quorem+0x9e>
 800b05a:	f04f 0e00 	mov.w	lr, #0
 800b05e:	4640      	mov	r0, r8
 800b060:	46ac      	mov	ip, r5
 800b062:	46f2      	mov	sl, lr
 800b064:	f850 2b04 	ldr.w	r2, [r0], #4
 800b068:	b293      	uxth	r3, r2
 800b06a:	fb06 e303 	mla	r3, r6, r3, lr
 800b06e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b072:	b29b      	uxth	r3, r3
 800b074:	ebaa 0303 	sub.w	r3, sl, r3
 800b078:	f8dc a000 	ldr.w	sl, [ip]
 800b07c:	0c12      	lsrs	r2, r2, #16
 800b07e:	fa13 f38a 	uxtah	r3, r3, sl
 800b082:	fb06 e202 	mla	r2, r6, r2, lr
 800b086:	9300      	str	r3, [sp, #0]
 800b088:	9b00      	ldr	r3, [sp, #0]
 800b08a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b08e:	b292      	uxth	r2, r2
 800b090:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b094:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b098:	f8bd 3000 	ldrh.w	r3, [sp]
 800b09c:	4581      	cmp	r9, r0
 800b09e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0a2:	f84c 3b04 	str.w	r3, [ip], #4
 800b0a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b0aa:	d2db      	bcs.n	800b064 <quorem+0x44>
 800b0ac:	f855 300b 	ldr.w	r3, [r5, fp]
 800b0b0:	b92b      	cbnz	r3, 800b0be <quorem+0x9e>
 800b0b2:	9b01      	ldr	r3, [sp, #4]
 800b0b4:	3b04      	subs	r3, #4
 800b0b6:	429d      	cmp	r5, r3
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	d32e      	bcc.n	800b11a <quorem+0xfa>
 800b0bc:	613c      	str	r4, [r7, #16]
 800b0be:	4638      	mov	r0, r7
 800b0c0:	f001 f9c2 	bl	800c448 <__mcmp>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	db24      	blt.n	800b112 <quorem+0xf2>
 800b0c8:	3601      	adds	r6, #1
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	f04f 0c00 	mov.w	ip, #0
 800b0d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0d4:	f8d0 e000 	ldr.w	lr, [r0]
 800b0d8:	b293      	uxth	r3, r2
 800b0da:	ebac 0303 	sub.w	r3, ip, r3
 800b0de:	0c12      	lsrs	r2, r2, #16
 800b0e0:	fa13 f38e 	uxtah	r3, r3, lr
 800b0e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b0e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0f2:	45c1      	cmp	r9, r8
 800b0f4:	f840 3b04 	str.w	r3, [r0], #4
 800b0f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b0fc:	d2e8      	bcs.n	800b0d0 <quorem+0xb0>
 800b0fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b102:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b106:	b922      	cbnz	r2, 800b112 <quorem+0xf2>
 800b108:	3b04      	subs	r3, #4
 800b10a:	429d      	cmp	r5, r3
 800b10c:	461a      	mov	r2, r3
 800b10e:	d30a      	bcc.n	800b126 <quorem+0x106>
 800b110:	613c      	str	r4, [r7, #16]
 800b112:	4630      	mov	r0, r6
 800b114:	b003      	add	sp, #12
 800b116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11a:	6812      	ldr	r2, [r2, #0]
 800b11c:	3b04      	subs	r3, #4
 800b11e:	2a00      	cmp	r2, #0
 800b120:	d1cc      	bne.n	800b0bc <quorem+0x9c>
 800b122:	3c01      	subs	r4, #1
 800b124:	e7c7      	b.n	800b0b6 <quorem+0x96>
 800b126:	6812      	ldr	r2, [r2, #0]
 800b128:	3b04      	subs	r3, #4
 800b12a:	2a00      	cmp	r2, #0
 800b12c:	d1f0      	bne.n	800b110 <quorem+0xf0>
 800b12e:	3c01      	subs	r4, #1
 800b130:	e7eb      	b.n	800b10a <quorem+0xea>
 800b132:	2000      	movs	r0, #0
 800b134:	e7ee      	b.n	800b114 <quorem+0xf4>
	...

0800b138 <_dtoa_r>:
 800b138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b13c:	ed2d 8b04 	vpush	{d8-d9}
 800b140:	ec57 6b10 	vmov	r6, r7, d0
 800b144:	b093      	sub	sp, #76	; 0x4c
 800b146:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b148:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b14c:	9106      	str	r1, [sp, #24]
 800b14e:	ee10 aa10 	vmov	sl, s0
 800b152:	4604      	mov	r4, r0
 800b154:	9209      	str	r2, [sp, #36]	; 0x24
 800b156:	930c      	str	r3, [sp, #48]	; 0x30
 800b158:	46bb      	mov	fp, r7
 800b15a:	b975      	cbnz	r5, 800b17a <_dtoa_r+0x42>
 800b15c:	2010      	movs	r0, #16
 800b15e:	f7ff f9d5 	bl	800a50c <malloc>
 800b162:	4602      	mov	r2, r0
 800b164:	6260      	str	r0, [r4, #36]	; 0x24
 800b166:	b920      	cbnz	r0, 800b172 <_dtoa_r+0x3a>
 800b168:	4ba7      	ldr	r3, [pc, #668]	; (800b408 <_dtoa_r+0x2d0>)
 800b16a:	21ea      	movs	r1, #234	; 0xea
 800b16c:	48a7      	ldr	r0, [pc, #668]	; (800b40c <_dtoa_r+0x2d4>)
 800b16e:	f001 fcf3 	bl	800cb58 <__assert_func>
 800b172:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b176:	6005      	str	r5, [r0, #0]
 800b178:	60c5      	str	r5, [r0, #12]
 800b17a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b17c:	6819      	ldr	r1, [r3, #0]
 800b17e:	b151      	cbz	r1, 800b196 <_dtoa_r+0x5e>
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	604a      	str	r2, [r1, #4]
 800b184:	2301      	movs	r3, #1
 800b186:	4093      	lsls	r3, r2
 800b188:	608b      	str	r3, [r1, #8]
 800b18a:	4620      	mov	r0, r4
 800b18c:	f000 ff1a 	bl	800bfc4 <_Bfree>
 800b190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b192:	2200      	movs	r2, #0
 800b194:	601a      	str	r2, [r3, #0]
 800b196:	1e3b      	subs	r3, r7, #0
 800b198:	bfaa      	itet	ge
 800b19a:	2300      	movge	r3, #0
 800b19c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b1a0:	f8c8 3000 	strge.w	r3, [r8]
 800b1a4:	4b9a      	ldr	r3, [pc, #616]	; (800b410 <_dtoa_r+0x2d8>)
 800b1a6:	bfbc      	itt	lt
 800b1a8:	2201      	movlt	r2, #1
 800b1aa:	f8c8 2000 	strlt.w	r2, [r8]
 800b1ae:	ea33 030b 	bics.w	r3, r3, fp
 800b1b2:	d11b      	bne.n	800b1ec <_dtoa_r+0xb4>
 800b1b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1b6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b1ba:	6013      	str	r3, [r2, #0]
 800b1bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1c0:	4333      	orrs	r3, r6
 800b1c2:	f000 8592 	beq.w	800bcea <_dtoa_r+0xbb2>
 800b1c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1c8:	b963      	cbnz	r3, 800b1e4 <_dtoa_r+0xac>
 800b1ca:	4b92      	ldr	r3, [pc, #584]	; (800b414 <_dtoa_r+0x2dc>)
 800b1cc:	e022      	b.n	800b214 <_dtoa_r+0xdc>
 800b1ce:	4b92      	ldr	r3, [pc, #584]	; (800b418 <_dtoa_r+0x2e0>)
 800b1d0:	9301      	str	r3, [sp, #4]
 800b1d2:	3308      	adds	r3, #8
 800b1d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1d6:	6013      	str	r3, [r2, #0]
 800b1d8:	9801      	ldr	r0, [sp, #4]
 800b1da:	b013      	add	sp, #76	; 0x4c
 800b1dc:	ecbd 8b04 	vpop	{d8-d9}
 800b1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e4:	4b8b      	ldr	r3, [pc, #556]	; (800b414 <_dtoa_r+0x2dc>)
 800b1e6:	9301      	str	r3, [sp, #4]
 800b1e8:	3303      	adds	r3, #3
 800b1ea:	e7f3      	b.n	800b1d4 <_dtoa_r+0x9c>
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	4650      	mov	r0, sl
 800b1f2:	4659      	mov	r1, fp
 800b1f4:	f7f5 fc70 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1f8:	ec4b ab19 	vmov	d9, sl, fp
 800b1fc:	4680      	mov	r8, r0
 800b1fe:	b158      	cbz	r0, 800b218 <_dtoa_r+0xe0>
 800b200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b202:	2301      	movs	r3, #1
 800b204:	6013      	str	r3, [r2, #0]
 800b206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b208:	2b00      	cmp	r3, #0
 800b20a:	f000 856b 	beq.w	800bce4 <_dtoa_r+0xbac>
 800b20e:	4883      	ldr	r0, [pc, #524]	; (800b41c <_dtoa_r+0x2e4>)
 800b210:	6018      	str	r0, [r3, #0]
 800b212:	1e43      	subs	r3, r0, #1
 800b214:	9301      	str	r3, [sp, #4]
 800b216:	e7df      	b.n	800b1d8 <_dtoa_r+0xa0>
 800b218:	ec4b ab10 	vmov	d0, sl, fp
 800b21c:	aa10      	add	r2, sp, #64	; 0x40
 800b21e:	a911      	add	r1, sp, #68	; 0x44
 800b220:	4620      	mov	r0, r4
 800b222:	f001 f9b7 	bl	800c594 <__d2b>
 800b226:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b22a:	ee08 0a10 	vmov	s16, r0
 800b22e:	2d00      	cmp	r5, #0
 800b230:	f000 8084 	beq.w	800b33c <_dtoa_r+0x204>
 800b234:	ee19 3a90 	vmov	r3, s19
 800b238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b23c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b240:	4656      	mov	r6, sl
 800b242:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b246:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b24a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b24e:	4b74      	ldr	r3, [pc, #464]	; (800b420 <_dtoa_r+0x2e8>)
 800b250:	2200      	movs	r2, #0
 800b252:	4630      	mov	r0, r6
 800b254:	4639      	mov	r1, r7
 800b256:	f7f5 f81f 	bl	8000298 <__aeabi_dsub>
 800b25a:	a365      	add	r3, pc, #404	; (adr r3, 800b3f0 <_dtoa_r+0x2b8>)
 800b25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b260:	f7f5 f9d2 	bl	8000608 <__aeabi_dmul>
 800b264:	a364      	add	r3, pc, #400	; (adr r3, 800b3f8 <_dtoa_r+0x2c0>)
 800b266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26a:	f7f5 f817 	bl	800029c <__adddf3>
 800b26e:	4606      	mov	r6, r0
 800b270:	4628      	mov	r0, r5
 800b272:	460f      	mov	r7, r1
 800b274:	f7f5 f95e 	bl	8000534 <__aeabi_i2d>
 800b278:	a361      	add	r3, pc, #388	; (adr r3, 800b400 <_dtoa_r+0x2c8>)
 800b27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27e:	f7f5 f9c3 	bl	8000608 <__aeabi_dmul>
 800b282:	4602      	mov	r2, r0
 800b284:	460b      	mov	r3, r1
 800b286:	4630      	mov	r0, r6
 800b288:	4639      	mov	r1, r7
 800b28a:	f7f5 f807 	bl	800029c <__adddf3>
 800b28e:	4606      	mov	r6, r0
 800b290:	460f      	mov	r7, r1
 800b292:	f7f5 fc69 	bl	8000b68 <__aeabi_d2iz>
 800b296:	2200      	movs	r2, #0
 800b298:	9000      	str	r0, [sp, #0]
 800b29a:	2300      	movs	r3, #0
 800b29c:	4630      	mov	r0, r6
 800b29e:	4639      	mov	r1, r7
 800b2a0:	f7f5 fc24 	bl	8000aec <__aeabi_dcmplt>
 800b2a4:	b150      	cbz	r0, 800b2bc <_dtoa_r+0x184>
 800b2a6:	9800      	ldr	r0, [sp, #0]
 800b2a8:	f7f5 f944 	bl	8000534 <__aeabi_i2d>
 800b2ac:	4632      	mov	r2, r6
 800b2ae:	463b      	mov	r3, r7
 800b2b0:	f7f5 fc12 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2b4:	b910      	cbnz	r0, 800b2bc <_dtoa_r+0x184>
 800b2b6:	9b00      	ldr	r3, [sp, #0]
 800b2b8:	3b01      	subs	r3, #1
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	9b00      	ldr	r3, [sp, #0]
 800b2be:	2b16      	cmp	r3, #22
 800b2c0:	d85a      	bhi.n	800b378 <_dtoa_r+0x240>
 800b2c2:	9a00      	ldr	r2, [sp, #0]
 800b2c4:	4b57      	ldr	r3, [pc, #348]	; (800b424 <_dtoa_r+0x2ec>)
 800b2c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ce:	ec51 0b19 	vmov	r0, r1, d9
 800b2d2:	f7f5 fc0b 	bl	8000aec <__aeabi_dcmplt>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d050      	beq.n	800b37c <_dtoa_r+0x244>
 800b2da:	9b00      	ldr	r3, [sp, #0]
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2e6:	1b5d      	subs	r5, r3, r5
 800b2e8:	1e6b      	subs	r3, r5, #1
 800b2ea:	9305      	str	r3, [sp, #20]
 800b2ec:	bf45      	ittet	mi
 800b2ee:	f1c5 0301 	rsbmi	r3, r5, #1
 800b2f2:	9304      	strmi	r3, [sp, #16]
 800b2f4:	2300      	movpl	r3, #0
 800b2f6:	2300      	movmi	r3, #0
 800b2f8:	bf4c      	ite	mi
 800b2fa:	9305      	strmi	r3, [sp, #20]
 800b2fc:	9304      	strpl	r3, [sp, #16]
 800b2fe:	9b00      	ldr	r3, [sp, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	db3d      	blt.n	800b380 <_dtoa_r+0x248>
 800b304:	9b05      	ldr	r3, [sp, #20]
 800b306:	9a00      	ldr	r2, [sp, #0]
 800b308:	920a      	str	r2, [sp, #40]	; 0x28
 800b30a:	4413      	add	r3, r2
 800b30c:	9305      	str	r3, [sp, #20]
 800b30e:	2300      	movs	r3, #0
 800b310:	9307      	str	r3, [sp, #28]
 800b312:	9b06      	ldr	r3, [sp, #24]
 800b314:	2b09      	cmp	r3, #9
 800b316:	f200 8089 	bhi.w	800b42c <_dtoa_r+0x2f4>
 800b31a:	2b05      	cmp	r3, #5
 800b31c:	bfc4      	itt	gt
 800b31e:	3b04      	subgt	r3, #4
 800b320:	9306      	strgt	r3, [sp, #24]
 800b322:	9b06      	ldr	r3, [sp, #24]
 800b324:	f1a3 0302 	sub.w	r3, r3, #2
 800b328:	bfcc      	ite	gt
 800b32a:	2500      	movgt	r5, #0
 800b32c:	2501      	movle	r5, #1
 800b32e:	2b03      	cmp	r3, #3
 800b330:	f200 8087 	bhi.w	800b442 <_dtoa_r+0x30a>
 800b334:	e8df f003 	tbb	[pc, r3]
 800b338:	59383a2d 	.word	0x59383a2d
 800b33c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b340:	441d      	add	r5, r3
 800b342:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b346:	2b20      	cmp	r3, #32
 800b348:	bfc1      	itttt	gt
 800b34a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b34e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b352:	fa0b f303 	lslgt.w	r3, fp, r3
 800b356:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b35a:	bfda      	itte	le
 800b35c:	f1c3 0320 	rsble	r3, r3, #32
 800b360:	fa06 f003 	lslle.w	r0, r6, r3
 800b364:	4318      	orrgt	r0, r3
 800b366:	f7f5 f8d5 	bl	8000514 <__aeabi_ui2d>
 800b36a:	2301      	movs	r3, #1
 800b36c:	4606      	mov	r6, r0
 800b36e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b372:	3d01      	subs	r5, #1
 800b374:	930e      	str	r3, [sp, #56]	; 0x38
 800b376:	e76a      	b.n	800b24e <_dtoa_r+0x116>
 800b378:	2301      	movs	r3, #1
 800b37a:	e7b2      	b.n	800b2e2 <_dtoa_r+0x1aa>
 800b37c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b37e:	e7b1      	b.n	800b2e4 <_dtoa_r+0x1ac>
 800b380:	9b04      	ldr	r3, [sp, #16]
 800b382:	9a00      	ldr	r2, [sp, #0]
 800b384:	1a9b      	subs	r3, r3, r2
 800b386:	9304      	str	r3, [sp, #16]
 800b388:	4253      	negs	r3, r2
 800b38a:	9307      	str	r3, [sp, #28]
 800b38c:	2300      	movs	r3, #0
 800b38e:	930a      	str	r3, [sp, #40]	; 0x28
 800b390:	e7bf      	b.n	800b312 <_dtoa_r+0x1da>
 800b392:	2300      	movs	r3, #0
 800b394:	9308      	str	r3, [sp, #32]
 800b396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b398:	2b00      	cmp	r3, #0
 800b39a:	dc55      	bgt.n	800b448 <_dtoa_r+0x310>
 800b39c:	2301      	movs	r3, #1
 800b39e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	9209      	str	r2, [sp, #36]	; 0x24
 800b3a6:	e00c      	b.n	800b3c2 <_dtoa_r+0x28a>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e7f3      	b.n	800b394 <_dtoa_r+0x25c>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3b0:	9308      	str	r3, [sp, #32]
 800b3b2:	9b00      	ldr	r3, [sp, #0]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	9302      	str	r3, [sp, #8]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	9303      	str	r3, [sp, #12]
 800b3be:	bfb8      	it	lt
 800b3c0:	2301      	movlt	r3, #1
 800b3c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	6042      	str	r2, [r0, #4]
 800b3c8:	2204      	movs	r2, #4
 800b3ca:	f102 0614 	add.w	r6, r2, #20
 800b3ce:	429e      	cmp	r6, r3
 800b3d0:	6841      	ldr	r1, [r0, #4]
 800b3d2:	d93d      	bls.n	800b450 <_dtoa_r+0x318>
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f000 fdb5 	bl	800bf44 <_Balloc>
 800b3da:	9001      	str	r0, [sp, #4]
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d13b      	bne.n	800b458 <_dtoa_r+0x320>
 800b3e0:	4b11      	ldr	r3, [pc, #68]	; (800b428 <_dtoa_r+0x2f0>)
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b3e8:	e6c0      	b.n	800b16c <_dtoa_r+0x34>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e7df      	b.n	800b3ae <_dtoa_r+0x276>
 800b3ee:	bf00      	nop
 800b3f0:	636f4361 	.word	0x636f4361
 800b3f4:	3fd287a7 	.word	0x3fd287a7
 800b3f8:	8b60c8b3 	.word	0x8b60c8b3
 800b3fc:	3fc68a28 	.word	0x3fc68a28
 800b400:	509f79fb 	.word	0x509f79fb
 800b404:	3fd34413 	.word	0x3fd34413
 800b408:	0800d099 	.word	0x0800d099
 800b40c:	0800d0b0 	.word	0x0800d0b0
 800b410:	7ff00000 	.word	0x7ff00000
 800b414:	0800d095 	.word	0x0800d095
 800b418:	0800d08c 	.word	0x0800d08c
 800b41c:	0800d069 	.word	0x0800d069
 800b420:	3ff80000 	.word	0x3ff80000
 800b424:	0800d200 	.word	0x0800d200
 800b428:	0800d10b 	.word	0x0800d10b
 800b42c:	2501      	movs	r5, #1
 800b42e:	2300      	movs	r3, #0
 800b430:	9306      	str	r3, [sp, #24]
 800b432:	9508      	str	r5, [sp, #32]
 800b434:	f04f 33ff 	mov.w	r3, #4294967295
 800b438:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b43c:	2200      	movs	r2, #0
 800b43e:	2312      	movs	r3, #18
 800b440:	e7b0      	b.n	800b3a4 <_dtoa_r+0x26c>
 800b442:	2301      	movs	r3, #1
 800b444:	9308      	str	r3, [sp, #32]
 800b446:	e7f5      	b.n	800b434 <_dtoa_r+0x2fc>
 800b448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b44a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b44e:	e7b8      	b.n	800b3c2 <_dtoa_r+0x28a>
 800b450:	3101      	adds	r1, #1
 800b452:	6041      	str	r1, [r0, #4]
 800b454:	0052      	lsls	r2, r2, #1
 800b456:	e7b8      	b.n	800b3ca <_dtoa_r+0x292>
 800b458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b45a:	9a01      	ldr	r2, [sp, #4]
 800b45c:	601a      	str	r2, [r3, #0]
 800b45e:	9b03      	ldr	r3, [sp, #12]
 800b460:	2b0e      	cmp	r3, #14
 800b462:	f200 809d 	bhi.w	800b5a0 <_dtoa_r+0x468>
 800b466:	2d00      	cmp	r5, #0
 800b468:	f000 809a 	beq.w	800b5a0 <_dtoa_r+0x468>
 800b46c:	9b00      	ldr	r3, [sp, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	dd32      	ble.n	800b4d8 <_dtoa_r+0x3a0>
 800b472:	4ab7      	ldr	r2, [pc, #732]	; (800b750 <_dtoa_r+0x618>)
 800b474:	f003 030f 	and.w	r3, r3, #15
 800b478:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b47c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b480:	9b00      	ldr	r3, [sp, #0]
 800b482:	05d8      	lsls	r0, r3, #23
 800b484:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b488:	d516      	bpl.n	800b4b8 <_dtoa_r+0x380>
 800b48a:	4bb2      	ldr	r3, [pc, #712]	; (800b754 <_dtoa_r+0x61c>)
 800b48c:	ec51 0b19 	vmov	r0, r1, d9
 800b490:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b494:	f7f5 f9e2 	bl	800085c <__aeabi_ddiv>
 800b498:	f007 070f 	and.w	r7, r7, #15
 800b49c:	4682      	mov	sl, r0
 800b49e:	468b      	mov	fp, r1
 800b4a0:	2503      	movs	r5, #3
 800b4a2:	4eac      	ldr	r6, [pc, #688]	; (800b754 <_dtoa_r+0x61c>)
 800b4a4:	b957      	cbnz	r7, 800b4bc <_dtoa_r+0x384>
 800b4a6:	4642      	mov	r2, r8
 800b4a8:	464b      	mov	r3, r9
 800b4aa:	4650      	mov	r0, sl
 800b4ac:	4659      	mov	r1, fp
 800b4ae:	f7f5 f9d5 	bl	800085c <__aeabi_ddiv>
 800b4b2:	4682      	mov	sl, r0
 800b4b4:	468b      	mov	fp, r1
 800b4b6:	e028      	b.n	800b50a <_dtoa_r+0x3d2>
 800b4b8:	2502      	movs	r5, #2
 800b4ba:	e7f2      	b.n	800b4a2 <_dtoa_r+0x36a>
 800b4bc:	07f9      	lsls	r1, r7, #31
 800b4be:	d508      	bpl.n	800b4d2 <_dtoa_r+0x39a>
 800b4c0:	4640      	mov	r0, r8
 800b4c2:	4649      	mov	r1, r9
 800b4c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b4c8:	f7f5 f89e 	bl	8000608 <__aeabi_dmul>
 800b4cc:	3501      	adds	r5, #1
 800b4ce:	4680      	mov	r8, r0
 800b4d0:	4689      	mov	r9, r1
 800b4d2:	107f      	asrs	r7, r7, #1
 800b4d4:	3608      	adds	r6, #8
 800b4d6:	e7e5      	b.n	800b4a4 <_dtoa_r+0x36c>
 800b4d8:	f000 809b 	beq.w	800b612 <_dtoa_r+0x4da>
 800b4dc:	9b00      	ldr	r3, [sp, #0]
 800b4de:	4f9d      	ldr	r7, [pc, #628]	; (800b754 <_dtoa_r+0x61c>)
 800b4e0:	425e      	negs	r6, r3
 800b4e2:	4b9b      	ldr	r3, [pc, #620]	; (800b750 <_dtoa_r+0x618>)
 800b4e4:	f006 020f 	and.w	r2, r6, #15
 800b4e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f0:	ec51 0b19 	vmov	r0, r1, d9
 800b4f4:	f7f5 f888 	bl	8000608 <__aeabi_dmul>
 800b4f8:	1136      	asrs	r6, r6, #4
 800b4fa:	4682      	mov	sl, r0
 800b4fc:	468b      	mov	fp, r1
 800b4fe:	2300      	movs	r3, #0
 800b500:	2502      	movs	r5, #2
 800b502:	2e00      	cmp	r6, #0
 800b504:	d17a      	bne.n	800b5fc <_dtoa_r+0x4c4>
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1d3      	bne.n	800b4b2 <_dtoa_r+0x37a>
 800b50a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f000 8082 	beq.w	800b616 <_dtoa_r+0x4de>
 800b512:	4b91      	ldr	r3, [pc, #580]	; (800b758 <_dtoa_r+0x620>)
 800b514:	2200      	movs	r2, #0
 800b516:	4650      	mov	r0, sl
 800b518:	4659      	mov	r1, fp
 800b51a:	f7f5 fae7 	bl	8000aec <__aeabi_dcmplt>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d079      	beq.n	800b616 <_dtoa_r+0x4de>
 800b522:	9b03      	ldr	r3, [sp, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d076      	beq.n	800b616 <_dtoa_r+0x4de>
 800b528:	9b02      	ldr	r3, [sp, #8]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	dd36      	ble.n	800b59c <_dtoa_r+0x464>
 800b52e:	9b00      	ldr	r3, [sp, #0]
 800b530:	4650      	mov	r0, sl
 800b532:	4659      	mov	r1, fp
 800b534:	1e5f      	subs	r7, r3, #1
 800b536:	2200      	movs	r2, #0
 800b538:	4b88      	ldr	r3, [pc, #544]	; (800b75c <_dtoa_r+0x624>)
 800b53a:	f7f5 f865 	bl	8000608 <__aeabi_dmul>
 800b53e:	9e02      	ldr	r6, [sp, #8]
 800b540:	4682      	mov	sl, r0
 800b542:	468b      	mov	fp, r1
 800b544:	3501      	adds	r5, #1
 800b546:	4628      	mov	r0, r5
 800b548:	f7f4 fff4 	bl	8000534 <__aeabi_i2d>
 800b54c:	4652      	mov	r2, sl
 800b54e:	465b      	mov	r3, fp
 800b550:	f7f5 f85a 	bl	8000608 <__aeabi_dmul>
 800b554:	4b82      	ldr	r3, [pc, #520]	; (800b760 <_dtoa_r+0x628>)
 800b556:	2200      	movs	r2, #0
 800b558:	f7f4 fea0 	bl	800029c <__adddf3>
 800b55c:	46d0      	mov	r8, sl
 800b55e:	46d9      	mov	r9, fp
 800b560:	4682      	mov	sl, r0
 800b562:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b566:	2e00      	cmp	r6, #0
 800b568:	d158      	bne.n	800b61c <_dtoa_r+0x4e4>
 800b56a:	4b7e      	ldr	r3, [pc, #504]	; (800b764 <_dtoa_r+0x62c>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	4640      	mov	r0, r8
 800b570:	4649      	mov	r1, r9
 800b572:	f7f4 fe91 	bl	8000298 <__aeabi_dsub>
 800b576:	4652      	mov	r2, sl
 800b578:	465b      	mov	r3, fp
 800b57a:	4680      	mov	r8, r0
 800b57c:	4689      	mov	r9, r1
 800b57e:	f7f5 fad3 	bl	8000b28 <__aeabi_dcmpgt>
 800b582:	2800      	cmp	r0, #0
 800b584:	f040 8295 	bne.w	800bab2 <_dtoa_r+0x97a>
 800b588:	4652      	mov	r2, sl
 800b58a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b58e:	4640      	mov	r0, r8
 800b590:	4649      	mov	r1, r9
 800b592:	f7f5 faab 	bl	8000aec <__aeabi_dcmplt>
 800b596:	2800      	cmp	r0, #0
 800b598:	f040 8289 	bne.w	800baae <_dtoa_r+0x976>
 800b59c:	ec5b ab19 	vmov	sl, fp, d9
 800b5a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f2c0 8148 	blt.w	800b838 <_dtoa_r+0x700>
 800b5a8:	9a00      	ldr	r2, [sp, #0]
 800b5aa:	2a0e      	cmp	r2, #14
 800b5ac:	f300 8144 	bgt.w	800b838 <_dtoa_r+0x700>
 800b5b0:	4b67      	ldr	r3, [pc, #412]	; (800b750 <_dtoa_r+0x618>)
 800b5b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f280 80d5 	bge.w	800b76c <_dtoa_r+0x634>
 800b5c2:	9b03      	ldr	r3, [sp, #12]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f300 80d1 	bgt.w	800b76c <_dtoa_r+0x634>
 800b5ca:	f040 826f 	bne.w	800baac <_dtoa_r+0x974>
 800b5ce:	4b65      	ldr	r3, [pc, #404]	; (800b764 <_dtoa_r+0x62c>)
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	4649      	mov	r1, r9
 800b5d6:	f7f5 f817 	bl	8000608 <__aeabi_dmul>
 800b5da:	4652      	mov	r2, sl
 800b5dc:	465b      	mov	r3, fp
 800b5de:	f7f5 fa99 	bl	8000b14 <__aeabi_dcmpge>
 800b5e2:	9e03      	ldr	r6, [sp, #12]
 800b5e4:	4637      	mov	r7, r6
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	f040 8245 	bne.w	800ba76 <_dtoa_r+0x93e>
 800b5ec:	9d01      	ldr	r5, [sp, #4]
 800b5ee:	2331      	movs	r3, #49	; 0x31
 800b5f0:	f805 3b01 	strb.w	r3, [r5], #1
 800b5f4:	9b00      	ldr	r3, [sp, #0]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	e240      	b.n	800ba7e <_dtoa_r+0x946>
 800b5fc:	07f2      	lsls	r2, r6, #31
 800b5fe:	d505      	bpl.n	800b60c <_dtoa_r+0x4d4>
 800b600:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b604:	f7f5 f800 	bl	8000608 <__aeabi_dmul>
 800b608:	3501      	adds	r5, #1
 800b60a:	2301      	movs	r3, #1
 800b60c:	1076      	asrs	r6, r6, #1
 800b60e:	3708      	adds	r7, #8
 800b610:	e777      	b.n	800b502 <_dtoa_r+0x3ca>
 800b612:	2502      	movs	r5, #2
 800b614:	e779      	b.n	800b50a <_dtoa_r+0x3d2>
 800b616:	9f00      	ldr	r7, [sp, #0]
 800b618:	9e03      	ldr	r6, [sp, #12]
 800b61a:	e794      	b.n	800b546 <_dtoa_r+0x40e>
 800b61c:	9901      	ldr	r1, [sp, #4]
 800b61e:	4b4c      	ldr	r3, [pc, #304]	; (800b750 <_dtoa_r+0x618>)
 800b620:	4431      	add	r1, r6
 800b622:	910d      	str	r1, [sp, #52]	; 0x34
 800b624:	9908      	ldr	r1, [sp, #32]
 800b626:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b62a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b62e:	2900      	cmp	r1, #0
 800b630:	d043      	beq.n	800b6ba <_dtoa_r+0x582>
 800b632:	494d      	ldr	r1, [pc, #308]	; (800b768 <_dtoa_r+0x630>)
 800b634:	2000      	movs	r0, #0
 800b636:	f7f5 f911 	bl	800085c <__aeabi_ddiv>
 800b63a:	4652      	mov	r2, sl
 800b63c:	465b      	mov	r3, fp
 800b63e:	f7f4 fe2b 	bl	8000298 <__aeabi_dsub>
 800b642:	9d01      	ldr	r5, [sp, #4]
 800b644:	4682      	mov	sl, r0
 800b646:	468b      	mov	fp, r1
 800b648:	4649      	mov	r1, r9
 800b64a:	4640      	mov	r0, r8
 800b64c:	f7f5 fa8c 	bl	8000b68 <__aeabi_d2iz>
 800b650:	4606      	mov	r6, r0
 800b652:	f7f4 ff6f 	bl	8000534 <__aeabi_i2d>
 800b656:	4602      	mov	r2, r0
 800b658:	460b      	mov	r3, r1
 800b65a:	4640      	mov	r0, r8
 800b65c:	4649      	mov	r1, r9
 800b65e:	f7f4 fe1b 	bl	8000298 <__aeabi_dsub>
 800b662:	3630      	adds	r6, #48	; 0x30
 800b664:	f805 6b01 	strb.w	r6, [r5], #1
 800b668:	4652      	mov	r2, sl
 800b66a:	465b      	mov	r3, fp
 800b66c:	4680      	mov	r8, r0
 800b66e:	4689      	mov	r9, r1
 800b670:	f7f5 fa3c 	bl	8000aec <__aeabi_dcmplt>
 800b674:	2800      	cmp	r0, #0
 800b676:	d163      	bne.n	800b740 <_dtoa_r+0x608>
 800b678:	4642      	mov	r2, r8
 800b67a:	464b      	mov	r3, r9
 800b67c:	4936      	ldr	r1, [pc, #216]	; (800b758 <_dtoa_r+0x620>)
 800b67e:	2000      	movs	r0, #0
 800b680:	f7f4 fe0a 	bl	8000298 <__aeabi_dsub>
 800b684:	4652      	mov	r2, sl
 800b686:	465b      	mov	r3, fp
 800b688:	f7f5 fa30 	bl	8000aec <__aeabi_dcmplt>
 800b68c:	2800      	cmp	r0, #0
 800b68e:	f040 80b5 	bne.w	800b7fc <_dtoa_r+0x6c4>
 800b692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b694:	429d      	cmp	r5, r3
 800b696:	d081      	beq.n	800b59c <_dtoa_r+0x464>
 800b698:	4b30      	ldr	r3, [pc, #192]	; (800b75c <_dtoa_r+0x624>)
 800b69a:	2200      	movs	r2, #0
 800b69c:	4650      	mov	r0, sl
 800b69e:	4659      	mov	r1, fp
 800b6a0:	f7f4 ffb2 	bl	8000608 <__aeabi_dmul>
 800b6a4:	4b2d      	ldr	r3, [pc, #180]	; (800b75c <_dtoa_r+0x624>)
 800b6a6:	4682      	mov	sl, r0
 800b6a8:	468b      	mov	fp, r1
 800b6aa:	4640      	mov	r0, r8
 800b6ac:	4649      	mov	r1, r9
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f7f4 ffaa 	bl	8000608 <__aeabi_dmul>
 800b6b4:	4680      	mov	r8, r0
 800b6b6:	4689      	mov	r9, r1
 800b6b8:	e7c6      	b.n	800b648 <_dtoa_r+0x510>
 800b6ba:	4650      	mov	r0, sl
 800b6bc:	4659      	mov	r1, fp
 800b6be:	f7f4 ffa3 	bl	8000608 <__aeabi_dmul>
 800b6c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6c4:	9d01      	ldr	r5, [sp, #4]
 800b6c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6c8:	4682      	mov	sl, r0
 800b6ca:	468b      	mov	fp, r1
 800b6cc:	4649      	mov	r1, r9
 800b6ce:	4640      	mov	r0, r8
 800b6d0:	f7f5 fa4a 	bl	8000b68 <__aeabi_d2iz>
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	f7f4 ff2d 	bl	8000534 <__aeabi_i2d>
 800b6da:	3630      	adds	r6, #48	; 0x30
 800b6dc:	4602      	mov	r2, r0
 800b6de:	460b      	mov	r3, r1
 800b6e0:	4640      	mov	r0, r8
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	f7f4 fdd8 	bl	8000298 <__aeabi_dsub>
 800b6e8:	f805 6b01 	strb.w	r6, [r5], #1
 800b6ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6ee:	429d      	cmp	r5, r3
 800b6f0:	4680      	mov	r8, r0
 800b6f2:	4689      	mov	r9, r1
 800b6f4:	f04f 0200 	mov.w	r2, #0
 800b6f8:	d124      	bne.n	800b744 <_dtoa_r+0x60c>
 800b6fa:	4b1b      	ldr	r3, [pc, #108]	; (800b768 <_dtoa_r+0x630>)
 800b6fc:	4650      	mov	r0, sl
 800b6fe:	4659      	mov	r1, fp
 800b700:	f7f4 fdcc 	bl	800029c <__adddf3>
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	4640      	mov	r0, r8
 800b70a:	4649      	mov	r1, r9
 800b70c:	f7f5 fa0c 	bl	8000b28 <__aeabi_dcmpgt>
 800b710:	2800      	cmp	r0, #0
 800b712:	d173      	bne.n	800b7fc <_dtoa_r+0x6c4>
 800b714:	4652      	mov	r2, sl
 800b716:	465b      	mov	r3, fp
 800b718:	4913      	ldr	r1, [pc, #76]	; (800b768 <_dtoa_r+0x630>)
 800b71a:	2000      	movs	r0, #0
 800b71c:	f7f4 fdbc 	bl	8000298 <__aeabi_dsub>
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	4640      	mov	r0, r8
 800b726:	4649      	mov	r1, r9
 800b728:	f7f5 f9e0 	bl	8000aec <__aeabi_dcmplt>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	f43f af35 	beq.w	800b59c <_dtoa_r+0x464>
 800b732:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b734:	1e6b      	subs	r3, r5, #1
 800b736:	930f      	str	r3, [sp, #60]	; 0x3c
 800b738:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b73c:	2b30      	cmp	r3, #48	; 0x30
 800b73e:	d0f8      	beq.n	800b732 <_dtoa_r+0x5fa>
 800b740:	9700      	str	r7, [sp, #0]
 800b742:	e049      	b.n	800b7d8 <_dtoa_r+0x6a0>
 800b744:	4b05      	ldr	r3, [pc, #20]	; (800b75c <_dtoa_r+0x624>)
 800b746:	f7f4 ff5f 	bl	8000608 <__aeabi_dmul>
 800b74a:	4680      	mov	r8, r0
 800b74c:	4689      	mov	r9, r1
 800b74e:	e7bd      	b.n	800b6cc <_dtoa_r+0x594>
 800b750:	0800d200 	.word	0x0800d200
 800b754:	0800d1d8 	.word	0x0800d1d8
 800b758:	3ff00000 	.word	0x3ff00000
 800b75c:	40240000 	.word	0x40240000
 800b760:	401c0000 	.word	0x401c0000
 800b764:	40140000 	.word	0x40140000
 800b768:	3fe00000 	.word	0x3fe00000
 800b76c:	9d01      	ldr	r5, [sp, #4]
 800b76e:	4656      	mov	r6, sl
 800b770:	465f      	mov	r7, fp
 800b772:	4642      	mov	r2, r8
 800b774:	464b      	mov	r3, r9
 800b776:	4630      	mov	r0, r6
 800b778:	4639      	mov	r1, r7
 800b77a:	f7f5 f86f 	bl	800085c <__aeabi_ddiv>
 800b77e:	f7f5 f9f3 	bl	8000b68 <__aeabi_d2iz>
 800b782:	4682      	mov	sl, r0
 800b784:	f7f4 fed6 	bl	8000534 <__aeabi_i2d>
 800b788:	4642      	mov	r2, r8
 800b78a:	464b      	mov	r3, r9
 800b78c:	f7f4 ff3c 	bl	8000608 <__aeabi_dmul>
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	4630      	mov	r0, r6
 800b796:	4639      	mov	r1, r7
 800b798:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b79c:	f7f4 fd7c 	bl	8000298 <__aeabi_dsub>
 800b7a0:	f805 6b01 	strb.w	r6, [r5], #1
 800b7a4:	9e01      	ldr	r6, [sp, #4]
 800b7a6:	9f03      	ldr	r7, [sp, #12]
 800b7a8:	1bae      	subs	r6, r5, r6
 800b7aa:	42b7      	cmp	r7, r6
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	d135      	bne.n	800b81e <_dtoa_r+0x6e6>
 800b7b2:	f7f4 fd73 	bl	800029c <__adddf3>
 800b7b6:	4642      	mov	r2, r8
 800b7b8:	464b      	mov	r3, r9
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	460f      	mov	r7, r1
 800b7be:	f7f5 f9b3 	bl	8000b28 <__aeabi_dcmpgt>
 800b7c2:	b9d0      	cbnz	r0, 800b7fa <_dtoa_r+0x6c2>
 800b7c4:	4642      	mov	r2, r8
 800b7c6:	464b      	mov	r3, r9
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	4639      	mov	r1, r7
 800b7cc:	f7f5 f984 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7d0:	b110      	cbz	r0, 800b7d8 <_dtoa_r+0x6a0>
 800b7d2:	f01a 0f01 	tst.w	sl, #1
 800b7d6:	d110      	bne.n	800b7fa <_dtoa_r+0x6c2>
 800b7d8:	4620      	mov	r0, r4
 800b7da:	ee18 1a10 	vmov	r1, s16
 800b7de:	f000 fbf1 	bl	800bfc4 <_Bfree>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	9800      	ldr	r0, [sp, #0]
 800b7e6:	702b      	strb	r3, [r5, #0]
 800b7e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7ea:	3001      	adds	r0, #1
 800b7ec:	6018      	str	r0, [r3, #0]
 800b7ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f43f acf1 	beq.w	800b1d8 <_dtoa_r+0xa0>
 800b7f6:	601d      	str	r5, [r3, #0]
 800b7f8:	e4ee      	b.n	800b1d8 <_dtoa_r+0xa0>
 800b7fa:	9f00      	ldr	r7, [sp, #0]
 800b7fc:	462b      	mov	r3, r5
 800b7fe:	461d      	mov	r5, r3
 800b800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b804:	2a39      	cmp	r2, #57	; 0x39
 800b806:	d106      	bne.n	800b816 <_dtoa_r+0x6de>
 800b808:	9a01      	ldr	r2, [sp, #4]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d1f7      	bne.n	800b7fe <_dtoa_r+0x6c6>
 800b80e:	9901      	ldr	r1, [sp, #4]
 800b810:	2230      	movs	r2, #48	; 0x30
 800b812:	3701      	adds	r7, #1
 800b814:	700a      	strb	r2, [r1, #0]
 800b816:	781a      	ldrb	r2, [r3, #0]
 800b818:	3201      	adds	r2, #1
 800b81a:	701a      	strb	r2, [r3, #0]
 800b81c:	e790      	b.n	800b740 <_dtoa_r+0x608>
 800b81e:	4ba6      	ldr	r3, [pc, #664]	; (800bab8 <_dtoa_r+0x980>)
 800b820:	2200      	movs	r2, #0
 800b822:	f7f4 fef1 	bl	8000608 <__aeabi_dmul>
 800b826:	2200      	movs	r2, #0
 800b828:	2300      	movs	r3, #0
 800b82a:	4606      	mov	r6, r0
 800b82c:	460f      	mov	r7, r1
 800b82e:	f7f5 f953 	bl	8000ad8 <__aeabi_dcmpeq>
 800b832:	2800      	cmp	r0, #0
 800b834:	d09d      	beq.n	800b772 <_dtoa_r+0x63a>
 800b836:	e7cf      	b.n	800b7d8 <_dtoa_r+0x6a0>
 800b838:	9a08      	ldr	r2, [sp, #32]
 800b83a:	2a00      	cmp	r2, #0
 800b83c:	f000 80d7 	beq.w	800b9ee <_dtoa_r+0x8b6>
 800b840:	9a06      	ldr	r2, [sp, #24]
 800b842:	2a01      	cmp	r2, #1
 800b844:	f300 80ba 	bgt.w	800b9bc <_dtoa_r+0x884>
 800b848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b84a:	2a00      	cmp	r2, #0
 800b84c:	f000 80b2 	beq.w	800b9b4 <_dtoa_r+0x87c>
 800b850:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b854:	9e07      	ldr	r6, [sp, #28]
 800b856:	9d04      	ldr	r5, [sp, #16]
 800b858:	9a04      	ldr	r2, [sp, #16]
 800b85a:	441a      	add	r2, r3
 800b85c:	9204      	str	r2, [sp, #16]
 800b85e:	9a05      	ldr	r2, [sp, #20]
 800b860:	2101      	movs	r1, #1
 800b862:	441a      	add	r2, r3
 800b864:	4620      	mov	r0, r4
 800b866:	9205      	str	r2, [sp, #20]
 800b868:	f000 fc64 	bl	800c134 <__i2b>
 800b86c:	4607      	mov	r7, r0
 800b86e:	2d00      	cmp	r5, #0
 800b870:	dd0c      	ble.n	800b88c <_dtoa_r+0x754>
 800b872:	9b05      	ldr	r3, [sp, #20]
 800b874:	2b00      	cmp	r3, #0
 800b876:	dd09      	ble.n	800b88c <_dtoa_r+0x754>
 800b878:	42ab      	cmp	r3, r5
 800b87a:	9a04      	ldr	r2, [sp, #16]
 800b87c:	bfa8      	it	ge
 800b87e:	462b      	movge	r3, r5
 800b880:	1ad2      	subs	r2, r2, r3
 800b882:	9204      	str	r2, [sp, #16]
 800b884:	9a05      	ldr	r2, [sp, #20]
 800b886:	1aed      	subs	r5, r5, r3
 800b888:	1ad3      	subs	r3, r2, r3
 800b88a:	9305      	str	r3, [sp, #20]
 800b88c:	9b07      	ldr	r3, [sp, #28]
 800b88e:	b31b      	cbz	r3, 800b8d8 <_dtoa_r+0x7a0>
 800b890:	9b08      	ldr	r3, [sp, #32]
 800b892:	2b00      	cmp	r3, #0
 800b894:	f000 80af 	beq.w	800b9f6 <_dtoa_r+0x8be>
 800b898:	2e00      	cmp	r6, #0
 800b89a:	dd13      	ble.n	800b8c4 <_dtoa_r+0x78c>
 800b89c:	4639      	mov	r1, r7
 800b89e:	4632      	mov	r2, r6
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f000 fd07 	bl	800c2b4 <__pow5mult>
 800b8a6:	ee18 2a10 	vmov	r2, s16
 800b8aa:	4601      	mov	r1, r0
 800b8ac:	4607      	mov	r7, r0
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f000 fc56 	bl	800c160 <__multiply>
 800b8b4:	ee18 1a10 	vmov	r1, s16
 800b8b8:	4680      	mov	r8, r0
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f000 fb82 	bl	800bfc4 <_Bfree>
 800b8c0:	ee08 8a10 	vmov	s16, r8
 800b8c4:	9b07      	ldr	r3, [sp, #28]
 800b8c6:	1b9a      	subs	r2, r3, r6
 800b8c8:	d006      	beq.n	800b8d8 <_dtoa_r+0x7a0>
 800b8ca:	ee18 1a10 	vmov	r1, s16
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f000 fcf0 	bl	800c2b4 <__pow5mult>
 800b8d4:	ee08 0a10 	vmov	s16, r0
 800b8d8:	2101      	movs	r1, #1
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f000 fc2a 	bl	800c134 <__i2b>
 800b8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	f340 8088 	ble.w	800b9fa <_dtoa_r+0x8c2>
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	4601      	mov	r1, r0
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f000 fce0 	bl	800c2b4 <__pow5mult>
 800b8f4:	9b06      	ldr	r3, [sp, #24]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	f340 8081 	ble.w	800ba00 <_dtoa_r+0x8c8>
 800b8fe:	f04f 0800 	mov.w	r8, #0
 800b902:	6933      	ldr	r3, [r6, #16]
 800b904:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b908:	6918      	ldr	r0, [r3, #16]
 800b90a:	f000 fbc3 	bl	800c094 <__hi0bits>
 800b90e:	f1c0 0020 	rsb	r0, r0, #32
 800b912:	9b05      	ldr	r3, [sp, #20]
 800b914:	4418      	add	r0, r3
 800b916:	f010 001f 	ands.w	r0, r0, #31
 800b91a:	f000 8092 	beq.w	800ba42 <_dtoa_r+0x90a>
 800b91e:	f1c0 0320 	rsb	r3, r0, #32
 800b922:	2b04      	cmp	r3, #4
 800b924:	f340 808a 	ble.w	800ba3c <_dtoa_r+0x904>
 800b928:	f1c0 001c 	rsb	r0, r0, #28
 800b92c:	9b04      	ldr	r3, [sp, #16]
 800b92e:	4403      	add	r3, r0
 800b930:	9304      	str	r3, [sp, #16]
 800b932:	9b05      	ldr	r3, [sp, #20]
 800b934:	4403      	add	r3, r0
 800b936:	4405      	add	r5, r0
 800b938:	9305      	str	r3, [sp, #20]
 800b93a:	9b04      	ldr	r3, [sp, #16]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	dd07      	ble.n	800b950 <_dtoa_r+0x818>
 800b940:	ee18 1a10 	vmov	r1, s16
 800b944:	461a      	mov	r2, r3
 800b946:	4620      	mov	r0, r4
 800b948:	f000 fd0e 	bl	800c368 <__lshift>
 800b94c:	ee08 0a10 	vmov	s16, r0
 800b950:	9b05      	ldr	r3, [sp, #20]
 800b952:	2b00      	cmp	r3, #0
 800b954:	dd05      	ble.n	800b962 <_dtoa_r+0x82a>
 800b956:	4631      	mov	r1, r6
 800b958:	461a      	mov	r2, r3
 800b95a:	4620      	mov	r0, r4
 800b95c:	f000 fd04 	bl	800c368 <__lshift>
 800b960:	4606      	mov	r6, r0
 800b962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b964:	2b00      	cmp	r3, #0
 800b966:	d06e      	beq.n	800ba46 <_dtoa_r+0x90e>
 800b968:	ee18 0a10 	vmov	r0, s16
 800b96c:	4631      	mov	r1, r6
 800b96e:	f000 fd6b 	bl	800c448 <__mcmp>
 800b972:	2800      	cmp	r0, #0
 800b974:	da67      	bge.n	800ba46 <_dtoa_r+0x90e>
 800b976:	9b00      	ldr	r3, [sp, #0]
 800b978:	3b01      	subs	r3, #1
 800b97a:	ee18 1a10 	vmov	r1, s16
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	220a      	movs	r2, #10
 800b982:	2300      	movs	r3, #0
 800b984:	4620      	mov	r0, r4
 800b986:	f000 fb3f 	bl	800c008 <__multadd>
 800b98a:	9b08      	ldr	r3, [sp, #32]
 800b98c:	ee08 0a10 	vmov	s16, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	f000 81b1 	beq.w	800bcf8 <_dtoa_r+0xbc0>
 800b996:	2300      	movs	r3, #0
 800b998:	4639      	mov	r1, r7
 800b99a:	220a      	movs	r2, #10
 800b99c:	4620      	mov	r0, r4
 800b99e:	f000 fb33 	bl	800c008 <__multadd>
 800b9a2:	9b02      	ldr	r3, [sp, #8]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	4607      	mov	r7, r0
 800b9a8:	f300 808e 	bgt.w	800bac8 <_dtoa_r+0x990>
 800b9ac:	9b06      	ldr	r3, [sp, #24]
 800b9ae:	2b02      	cmp	r3, #2
 800b9b0:	dc51      	bgt.n	800ba56 <_dtoa_r+0x91e>
 800b9b2:	e089      	b.n	800bac8 <_dtoa_r+0x990>
 800b9b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b9ba:	e74b      	b.n	800b854 <_dtoa_r+0x71c>
 800b9bc:	9b03      	ldr	r3, [sp, #12]
 800b9be:	1e5e      	subs	r6, r3, #1
 800b9c0:	9b07      	ldr	r3, [sp, #28]
 800b9c2:	42b3      	cmp	r3, r6
 800b9c4:	bfbf      	itttt	lt
 800b9c6:	9b07      	ldrlt	r3, [sp, #28]
 800b9c8:	9607      	strlt	r6, [sp, #28]
 800b9ca:	1af2      	sublt	r2, r6, r3
 800b9cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b9ce:	bfb6      	itet	lt
 800b9d0:	189b      	addlt	r3, r3, r2
 800b9d2:	1b9e      	subge	r6, r3, r6
 800b9d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b9d6:	9b03      	ldr	r3, [sp, #12]
 800b9d8:	bfb8      	it	lt
 800b9da:	2600      	movlt	r6, #0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	bfb7      	itett	lt
 800b9e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b9e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b9e8:	1a9d      	sublt	r5, r3, r2
 800b9ea:	2300      	movlt	r3, #0
 800b9ec:	e734      	b.n	800b858 <_dtoa_r+0x720>
 800b9ee:	9e07      	ldr	r6, [sp, #28]
 800b9f0:	9d04      	ldr	r5, [sp, #16]
 800b9f2:	9f08      	ldr	r7, [sp, #32]
 800b9f4:	e73b      	b.n	800b86e <_dtoa_r+0x736>
 800b9f6:	9a07      	ldr	r2, [sp, #28]
 800b9f8:	e767      	b.n	800b8ca <_dtoa_r+0x792>
 800b9fa:	9b06      	ldr	r3, [sp, #24]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	dc18      	bgt.n	800ba32 <_dtoa_r+0x8fa>
 800ba00:	f1ba 0f00 	cmp.w	sl, #0
 800ba04:	d115      	bne.n	800ba32 <_dtoa_r+0x8fa>
 800ba06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba0a:	b993      	cbnz	r3, 800ba32 <_dtoa_r+0x8fa>
 800ba0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba10:	0d1b      	lsrs	r3, r3, #20
 800ba12:	051b      	lsls	r3, r3, #20
 800ba14:	b183      	cbz	r3, 800ba38 <_dtoa_r+0x900>
 800ba16:	9b04      	ldr	r3, [sp, #16]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	9304      	str	r3, [sp, #16]
 800ba1c:	9b05      	ldr	r3, [sp, #20]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	9305      	str	r3, [sp, #20]
 800ba22:	f04f 0801 	mov.w	r8, #1
 800ba26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f47f af6a 	bne.w	800b902 <_dtoa_r+0x7ca>
 800ba2e:	2001      	movs	r0, #1
 800ba30:	e76f      	b.n	800b912 <_dtoa_r+0x7da>
 800ba32:	f04f 0800 	mov.w	r8, #0
 800ba36:	e7f6      	b.n	800ba26 <_dtoa_r+0x8ee>
 800ba38:	4698      	mov	r8, r3
 800ba3a:	e7f4      	b.n	800ba26 <_dtoa_r+0x8ee>
 800ba3c:	f43f af7d 	beq.w	800b93a <_dtoa_r+0x802>
 800ba40:	4618      	mov	r0, r3
 800ba42:	301c      	adds	r0, #28
 800ba44:	e772      	b.n	800b92c <_dtoa_r+0x7f4>
 800ba46:	9b03      	ldr	r3, [sp, #12]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	dc37      	bgt.n	800babc <_dtoa_r+0x984>
 800ba4c:	9b06      	ldr	r3, [sp, #24]
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	dd34      	ble.n	800babc <_dtoa_r+0x984>
 800ba52:	9b03      	ldr	r3, [sp, #12]
 800ba54:	9302      	str	r3, [sp, #8]
 800ba56:	9b02      	ldr	r3, [sp, #8]
 800ba58:	b96b      	cbnz	r3, 800ba76 <_dtoa_r+0x93e>
 800ba5a:	4631      	mov	r1, r6
 800ba5c:	2205      	movs	r2, #5
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f000 fad2 	bl	800c008 <__multadd>
 800ba64:	4601      	mov	r1, r0
 800ba66:	4606      	mov	r6, r0
 800ba68:	ee18 0a10 	vmov	r0, s16
 800ba6c:	f000 fcec 	bl	800c448 <__mcmp>
 800ba70:	2800      	cmp	r0, #0
 800ba72:	f73f adbb 	bgt.w	800b5ec <_dtoa_r+0x4b4>
 800ba76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba78:	9d01      	ldr	r5, [sp, #4]
 800ba7a:	43db      	mvns	r3, r3
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	f04f 0800 	mov.w	r8, #0
 800ba82:	4631      	mov	r1, r6
 800ba84:	4620      	mov	r0, r4
 800ba86:	f000 fa9d 	bl	800bfc4 <_Bfree>
 800ba8a:	2f00      	cmp	r7, #0
 800ba8c:	f43f aea4 	beq.w	800b7d8 <_dtoa_r+0x6a0>
 800ba90:	f1b8 0f00 	cmp.w	r8, #0
 800ba94:	d005      	beq.n	800baa2 <_dtoa_r+0x96a>
 800ba96:	45b8      	cmp	r8, r7
 800ba98:	d003      	beq.n	800baa2 <_dtoa_r+0x96a>
 800ba9a:	4641      	mov	r1, r8
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	f000 fa91 	bl	800bfc4 <_Bfree>
 800baa2:	4639      	mov	r1, r7
 800baa4:	4620      	mov	r0, r4
 800baa6:	f000 fa8d 	bl	800bfc4 <_Bfree>
 800baaa:	e695      	b.n	800b7d8 <_dtoa_r+0x6a0>
 800baac:	2600      	movs	r6, #0
 800baae:	4637      	mov	r7, r6
 800bab0:	e7e1      	b.n	800ba76 <_dtoa_r+0x93e>
 800bab2:	9700      	str	r7, [sp, #0]
 800bab4:	4637      	mov	r7, r6
 800bab6:	e599      	b.n	800b5ec <_dtoa_r+0x4b4>
 800bab8:	40240000 	.word	0x40240000
 800babc:	9b08      	ldr	r3, [sp, #32]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f000 80ca 	beq.w	800bc58 <_dtoa_r+0xb20>
 800bac4:	9b03      	ldr	r3, [sp, #12]
 800bac6:	9302      	str	r3, [sp, #8]
 800bac8:	2d00      	cmp	r5, #0
 800baca:	dd05      	ble.n	800bad8 <_dtoa_r+0x9a0>
 800bacc:	4639      	mov	r1, r7
 800bace:	462a      	mov	r2, r5
 800bad0:	4620      	mov	r0, r4
 800bad2:	f000 fc49 	bl	800c368 <__lshift>
 800bad6:	4607      	mov	r7, r0
 800bad8:	f1b8 0f00 	cmp.w	r8, #0
 800badc:	d05b      	beq.n	800bb96 <_dtoa_r+0xa5e>
 800bade:	6879      	ldr	r1, [r7, #4]
 800bae0:	4620      	mov	r0, r4
 800bae2:	f000 fa2f 	bl	800bf44 <_Balloc>
 800bae6:	4605      	mov	r5, r0
 800bae8:	b928      	cbnz	r0, 800baf6 <_dtoa_r+0x9be>
 800baea:	4b87      	ldr	r3, [pc, #540]	; (800bd08 <_dtoa_r+0xbd0>)
 800baec:	4602      	mov	r2, r0
 800baee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800baf2:	f7ff bb3b 	b.w	800b16c <_dtoa_r+0x34>
 800baf6:	693a      	ldr	r2, [r7, #16]
 800baf8:	3202      	adds	r2, #2
 800bafa:	0092      	lsls	r2, r2, #2
 800bafc:	f107 010c 	add.w	r1, r7, #12
 800bb00:	300c      	adds	r0, #12
 800bb02:	f000 fa04 	bl	800bf0e <memcpy>
 800bb06:	2201      	movs	r2, #1
 800bb08:	4629      	mov	r1, r5
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f000 fc2c 	bl	800c368 <__lshift>
 800bb10:	9b01      	ldr	r3, [sp, #4]
 800bb12:	f103 0901 	add.w	r9, r3, #1
 800bb16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	9305      	str	r3, [sp, #20]
 800bb1e:	f00a 0301 	and.w	r3, sl, #1
 800bb22:	46b8      	mov	r8, r7
 800bb24:	9304      	str	r3, [sp, #16]
 800bb26:	4607      	mov	r7, r0
 800bb28:	4631      	mov	r1, r6
 800bb2a:	ee18 0a10 	vmov	r0, s16
 800bb2e:	f7ff fa77 	bl	800b020 <quorem>
 800bb32:	4641      	mov	r1, r8
 800bb34:	9002      	str	r0, [sp, #8]
 800bb36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb3a:	ee18 0a10 	vmov	r0, s16
 800bb3e:	f000 fc83 	bl	800c448 <__mcmp>
 800bb42:	463a      	mov	r2, r7
 800bb44:	9003      	str	r0, [sp, #12]
 800bb46:	4631      	mov	r1, r6
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f000 fc99 	bl	800c480 <__mdiff>
 800bb4e:	68c2      	ldr	r2, [r0, #12]
 800bb50:	f109 3bff 	add.w	fp, r9, #4294967295
 800bb54:	4605      	mov	r5, r0
 800bb56:	bb02      	cbnz	r2, 800bb9a <_dtoa_r+0xa62>
 800bb58:	4601      	mov	r1, r0
 800bb5a:	ee18 0a10 	vmov	r0, s16
 800bb5e:	f000 fc73 	bl	800c448 <__mcmp>
 800bb62:	4602      	mov	r2, r0
 800bb64:	4629      	mov	r1, r5
 800bb66:	4620      	mov	r0, r4
 800bb68:	9207      	str	r2, [sp, #28]
 800bb6a:	f000 fa2b 	bl	800bfc4 <_Bfree>
 800bb6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bb72:	ea43 0102 	orr.w	r1, r3, r2
 800bb76:	9b04      	ldr	r3, [sp, #16]
 800bb78:	430b      	orrs	r3, r1
 800bb7a:	464d      	mov	r5, r9
 800bb7c:	d10f      	bne.n	800bb9e <_dtoa_r+0xa66>
 800bb7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb82:	d02a      	beq.n	800bbda <_dtoa_r+0xaa2>
 800bb84:	9b03      	ldr	r3, [sp, #12]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	dd02      	ble.n	800bb90 <_dtoa_r+0xa58>
 800bb8a:	9b02      	ldr	r3, [sp, #8]
 800bb8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bb90:	f88b a000 	strb.w	sl, [fp]
 800bb94:	e775      	b.n	800ba82 <_dtoa_r+0x94a>
 800bb96:	4638      	mov	r0, r7
 800bb98:	e7ba      	b.n	800bb10 <_dtoa_r+0x9d8>
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	e7e2      	b.n	800bb64 <_dtoa_r+0xa2c>
 800bb9e:	9b03      	ldr	r3, [sp, #12]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	db04      	blt.n	800bbae <_dtoa_r+0xa76>
 800bba4:	9906      	ldr	r1, [sp, #24]
 800bba6:	430b      	orrs	r3, r1
 800bba8:	9904      	ldr	r1, [sp, #16]
 800bbaa:	430b      	orrs	r3, r1
 800bbac:	d122      	bne.n	800bbf4 <_dtoa_r+0xabc>
 800bbae:	2a00      	cmp	r2, #0
 800bbb0:	ddee      	ble.n	800bb90 <_dtoa_r+0xa58>
 800bbb2:	ee18 1a10 	vmov	r1, s16
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f000 fbd5 	bl	800c368 <__lshift>
 800bbbe:	4631      	mov	r1, r6
 800bbc0:	ee08 0a10 	vmov	s16, r0
 800bbc4:	f000 fc40 	bl	800c448 <__mcmp>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	dc03      	bgt.n	800bbd4 <_dtoa_r+0xa9c>
 800bbcc:	d1e0      	bne.n	800bb90 <_dtoa_r+0xa58>
 800bbce:	f01a 0f01 	tst.w	sl, #1
 800bbd2:	d0dd      	beq.n	800bb90 <_dtoa_r+0xa58>
 800bbd4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbd8:	d1d7      	bne.n	800bb8a <_dtoa_r+0xa52>
 800bbda:	2339      	movs	r3, #57	; 0x39
 800bbdc:	f88b 3000 	strb.w	r3, [fp]
 800bbe0:	462b      	mov	r3, r5
 800bbe2:	461d      	mov	r5, r3
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bbea:	2a39      	cmp	r2, #57	; 0x39
 800bbec:	d071      	beq.n	800bcd2 <_dtoa_r+0xb9a>
 800bbee:	3201      	adds	r2, #1
 800bbf0:	701a      	strb	r2, [r3, #0]
 800bbf2:	e746      	b.n	800ba82 <_dtoa_r+0x94a>
 800bbf4:	2a00      	cmp	r2, #0
 800bbf6:	dd07      	ble.n	800bc08 <_dtoa_r+0xad0>
 800bbf8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbfc:	d0ed      	beq.n	800bbda <_dtoa_r+0xaa2>
 800bbfe:	f10a 0301 	add.w	r3, sl, #1
 800bc02:	f88b 3000 	strb.w	r3, [fp]
 800bc06:	e73c      	b.n	800ba82 <_dtoa_r+0x94a>
 800bc08:	9b05      	ldr	r3, [sp, #20]
 800bc0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bc0e:	4599      	cmp	r9, r3
 800bc10:	d047      	beq.n	800bca2 <_dtoa_r+0xb6a>
 800bc12:	ee18 1a10 	vmov	r1, s16
 800bc16:	2300      	movs	r3, #0
 800bc18:	220a      	movs	r2, #10
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f000 f9f4 	bl	800c008 <__multadd>
 800bc20:	45b8      	cmp	r8, r7
 800bc22:	ee08 0a10 	vmov	s16, r0
 800bc26:	f04f 0300 	mov.w	r3, #0
 800bc2a:	f04f 020a 	mov.w	r2, #10
 800bc2e:	4641      	mov	r1, r8
 800bc30:	4620      	mov	r0, r4
 800bc32:	d106      	bne.n	800bc42 <_dtoa_r+0xb0a>
 800bc34:	f000 f9e8 	bl	800c008 <__multadd>
 800bc38:	4680      	mov	r8, r0
 800bc3a:	4607      	mov	r7, r0
 800bc3c:	f109 0901 	add.w	r9, r9, #1
 800bc40:	e772      	b.n	800bb28 <_dtoa_r+0x9f0>
 800bc42:	f000 f9e1 	bl	800c008 <__multadd>
 800bc46:	4639      	mov	r1, r7
 800bc48:	4680      	mov	r8, r0
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	220a      	movs	r2, #10
 800bc4e:	4620      	mov	r0, r4
 800bc50:	f000 f9da 	bl	800c008 <__multadd>
 800bc54:	4607      	mov	r7, r0
 800bc56:	e7f1      	b.n	800bc3c <_dtoa_r+0xb04>
 800bc58:	9b03      	ldr	r3, [sp, #12]
 800bc5a:	9302      	str	r3, [sp, #8]
 800bc5c:	9d01      	ldr	r5, [sp, #4]
 800bc5e:	ee18 0a10 	vmov	r0, s16
 800bc62:	4631      	mov	r1, r6
 800bc64:	f7ff f9dc 	bl	800b020 <quorem>
 800bc68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc6c:	9b01      	ldr	r3, [sp, #4]
 800bc6e:	f805 ab01 	strb.w	sl, [r5], #1
 800bc72:	1aea      	subs	r2, r5, r3
 800bc74:	9b02      	ldr	r3, [sp, #8]
 800bc76:	4293      	cmp	r3, r2
 800bc78:	dd09      	ble.n	800bc8e <_dtoa_r+0xb56>
 800bc7a:	ee18 1a10 	vmov	r1, s16
 800bc7e:	2300      	movs	r3, #0
 800bc80:	220a      	movs	r2, #10
 800bc82:	4620      	mov	r0, r4
 800bc84:	f000 f9c0 	bl	800c008 <__multadd>
 800bc88:	ee08 0a10 	vmov	s16, r0
 800bc8c:	e7e7      	b.n	800bc5e <_dtoa_r+0xb26>
 800bc8e:	9b02      	ldr	r3, [sp, #8]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	bfc8      	it	gt
 800bc94:	461d      	movgt	r5, r3
 800bc96:	9b01      	ldr	r3, [sp, #4]
 800bc98:	bfd8      	it	le
 800bc9a:	2501      	movle	r5, #1
 800bc9c:	441d      	add	r5, r3
 800bc9e:	f04f 0800 	mov.w	r8, #0
 800bca2:	ee18 1a10 	vmov	r1, s16
 800bca6:	2201      	movs	r2, #1
 800bca8:	4620      	mov	r0, r4
 800bcaa:	f000 fb5d 	bl	800c368 <__lshift>
 800bcae:	4631      	mov	r1, r6
 800bcb0:	ee08 0a10 	vmov	s16, r0
 800bcb4:	f000 fbc8 	bl	800c448 <__mcmp>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	dc91      	bgt.n	800bbe0 <_dtoa_r+0xaa8>
 800bcbc:	d102      	bne.n	800bcc4 <_dtoa_r+0xb8c>
 800bcbe:	f01a 0f01 	tst.w	sl, #1
 800bcc2:	d18d      	bne.n	800bbe0 <_dtoa_r+0xaa8>
 800bcc4:	462b      	mov	r3, r5
 800bcc6:	461d      	mov	r5, r3
 800bcc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bccc:	2a30      	cmp	r2, #48	; 0x30
 800bcce:	d0fa      	beq.n	800bcc6 <_dtoa_r+0xb8e>
 800bcd0:	e6d7      	b.n	800ba82 <_dtoa_r+0x94a>
 800bcd2:	9a01      	ldr	r2, [sp, #4]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d184      	bne.n	800bbe2 <_dtoa_r+0xaaa>
 800bcd8:	9b00      	ldr	r3, [sp, #0]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	2331      	movs	r3, #49	; 0x31
 800bce0:	7013      	strb	r3, [r2, #0]
 800bce2:	e6ce      	b.n	800ba82 <_dtoa_r+0x94a>
 800bce4:	4b09      	ldr	r3, [pc, #36]	; (800bd0c <_dtoa_r+0xbd4>)
 800bce6:	f7ff ba95 	b.w	800b214 <_dtoa_r+0xdc>
 800bcea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f47f aa6e 	bne.w	800b1ce <_dtoa_r+0x96>
 800bcf2:	4b07      	ldr	r3, [pc, #28]	; (800bd10 <_dtoa_r+0xbd8>)
 800bcf4:	f7ff ba8e 	b.w	800b214 <_dtoa_r+0xdc>
 800bcf8:	9b02      	ldr	r3, [sp, #8]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	dcae      	bgt.n	800bc5c <_dtoa_r+0xb24>
 800bcfe:	9b06      	ldr	r3, [sp, #24]
 800bd00:	2b02      	cmp	r3, #2
 800bd02:	f73f aea8 	bgt.w	800ba56 <_dtoa_r+0x91e>
 800bd06:	e7a9      	b.n	800bc5c <_dtoa_r+0xb24>
 800bd08:	0800d10b 	.word	0x0800d10b
 800bd0c:	0800d068 	.word	0x0800d068
 800bd10:	0800d08c 	.word	0x0800d08c

0800bd14 <std>:
 800bd14:	2300      	movs	r3, #0
 800bd16:	b510      	push	{r4, lr}
 800bd18:	4604      	mov	r4, r0
 800bd1a:	e9c0 3300 	strd	r3, r3, [r0]
 800bd1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd22:	6083      	str	r3, [r0, #8]
 800bd24:	8181      	strh	r1, [r0, #12]
 800bd26:	6643      	str	r3, [r0, #100]	; 0x64
 800bd28:	81c2      	strh	r2, [r0, #14]
 800bd2a:	6183      	str	r3, [r0, #24]
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	2208      	movs	r2, #8
 800bd30:	305c      	adds	r0, #92	; 0x5c
 800bd32:	f7fe fbfb 	bl	800a52c <memset>
 800bd36:	4b05      	ldr	r3, [pc, #20]	; (800bd4c <std+0x38>)
 800bd38:	6263      	str	r3, [r4, #36]	; 0x24
 800bd3a:	4b05      	ldr	r3, [pc, #20]	; (800bd50 <std+0x3c>)
 800bd3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd3e:	4b05      	ldr	r3, [pc, #20]	; (800bd54 <std+0x40>)
 800bd40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd42:	4b05      	ldr	r3, [pc, #20]	; (800bd58 <std+0x44>)
 800bd44:	6224      	str	r4, [r4, #32]
 800bd46:	6323      	str	r3, [r4, #48]	; 0x30
 800bd48:	bd10      	pop	{r4, pc}
 800bd4a:	bf00      	nop
 800bd4c:	0800c92d 	.word	0x0800c92d
 800bd50:	0800c94f 	.word	0x0800c94f
 800bd54:	0800c987 	.word	0x0800c987
 800bd58:	0800c9ab 	.word	0x0800c9ab

0800bd5c <_cleanup_r>:
 800bd5c:	4901      	ldr	r1, [pc, #4]	; (800bd64 <_cleanup_r+0x8>)
 800bd5e:	f000 b8af 	b.w	800bec0 <_fwalk_reent>
 800bd62:	bf00      	nop
 800bd64:	0800ccc1 	.word	0x0800ccc1

0800bd68 <__sfmoreglue>:
 800bd68:	b570      	push	{r4, r5, r6, lr}
 800bd6a:	2268      	movs	r2, #104	; 0x68
 800bd6c:	1e4d      	subs	r5, r1, #1
 800bd6e:	4355      	muls	r5, r2
 800bd70:	460e      	mov	r6, r1
 800bd72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd76:	f7fe fc4d 	bl	800a614 <_malloc_r>
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	b140      	cbz	r0, 800bd90 <__sfmoreglue+0x28>
 800bd7e:	2100      	movs	r1, #0
 800bd80:	e9c0 1600 	strd	r1, r6, [r0]
 800bd84:	300c      	adds	r0, #12
 800bd86:	60a0      	str	r0, [r4, #8]
 800bd88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd8c:	f7fe fbce 	bl	800a52c <memset>
 800bd90:	4620      	mov	r0, r4
 800bd92:	bd70      	pop	{r4, r5, r6, pc}

0800bd94 <__sfp_lock_acquire>:
 800bd94:	4801      	ldr	r0, [pc, #4]	; (800bd9c <__sfp_lock_acquire+0x8>)
 800bd96:	f000 b8b8 	b.w	800bf0a <__retarget_lock_acquire_recursive>
 800bd9a:	bf00      	nop
 800bd9c:	2000023d 	.word	0x2000023d

0800bda0 <__sfp_lock_release>:
 800bda0:	4801      	ldr	r0, [pc, #4]	; (800bda8 <__sfp_lock_release+0x8>)
 800bda2:	f000 b8b3 	b.w	800bf0c <__retarget_lock_release_recursive>
 800bda6:	bf00      	nop
 800bda8:	2000023d 	.word	0x2000023d

0800bdac <__sinit_lock_acquire>:
 800bdac:	4801      	ldr	r0, [pc, #4]	; (800bdb4 <__sinit_lock_acquire+0x8>)
 800bdae:	f000 b8ac 	b.w	800bf0a <__retarget_lock_acquire_recursive>
 800bdb2:	bf00      	nop
 800bdb4:	2000023e 	.word	0x2000023e

0800bdb8 <__sinit_lock_release>:
 800bdb8:	4801      	ldr	r0, [pc, #4]	; (800bdc0 <__sinit_lock_release+0x8>)
 800bdba:	f000 b8a7 	b.w	800bf0c <__retarget_lock_release_recursive>
 800bdbe:	bf00      	nop
 800bdc0:	2000023e 	.word	0x2000023e

0800bdc4 <__sinit>:
 800bdc4:	b510      	push	{r4, lr}
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	f7ff fff0 	bl	800bdac <__sinit_lock_acquire>
 800bdcc:	69a3      	ldr	r3, [r4, #24]
 800bdce:	b11b      	cbz	r3, 800bdd8 <__sinit+0x14>
 800bdd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdd4:	f7ff bff0 	b.w	800bdb8 <__sinit_lock_release>
 800bdd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bddc:	6523      	str	r3, [r4, #80]	; 0x50
 800bdde:	4b13      	ldr	r3, [pc, #76]	; (800be2c <__sinit+0x68>)
 800bde0:	4a13      	ldr	r2, [pc, #76]	; (800be30 <__sinit+0x6c>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	62a2      	str	r2, [r4, #40]	; 0x28
 800bde6:	42a3      	cmp	r3, r4
 800bde8:	bf04      	itt	eq
 800bdea:	2301      	moveq	r3, #1
 800bdec:	61a3      	streq	r3, [r4, #24]
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f000 f820 	bl	800be34 <__sfp>
 800bdf4:	6060      	str	r0, [r4, #4]
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f000 f81c 	bl	800be34 <__sfp>
 800bdfc:	60a0      	str	r0, [r4, #8]
 800bdfe:	4620      	mov	r0, r4
 800be00:	f000 f818 	bl	800be34 <__sfp>
 800be04:	2200      	movs	r2, #0
 800be06:	60e0      	str	r0, [r4, #12]
 800be08:	2104      	movs	r1, #4
 800be0a:	6860      	ldr	r0, [r4, #4]
 800be0c:	f7ff ff82 	bl	800bd14 <std>
 800be10:	68a0      	ldr	r0, [r4, #8]
 800be12:	2201      	movs	r2, #1
 800be14:	2109      	movs	r1, #9
 800be16:	f7ff ff7d 	bl	800bd14 <std>
 800be1a:	68e0      	ldr	r0, [r4, #12]
 800be1c:	2202      	movs	r2, #2
 800be1e:	2112      	movs	r1, #18
 800be20:	f7ff ff78 	bl	800bd14 <std>
 800be24:	2301      	movs	r3, #1
 800be26:	61a3      	str	r3, [r4, #24]
 800be28:	e7d2      	b.n	800bdd0 <__sinit+0xc>
 800be2a:	bf00      	nop
 800be2c:	0800d054 	.word	0x0800d054
 800be30:	0800bd5d 	.word	0x0800bd5d

0800be34 <__sfp>:
 800be34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be36:	4607      	mov	r7, r0
 800be38:	f7ff ffac 	bl	800bd94 <__sfp_lock_acquire>
 800be3c:	4b1e      	ldr	r3, [pc, #120]	; (800beb8 <__sfp+0x84>)
 800be3e:	681e      	ldr	r6, [r3, #0]
 800be40:	69b3      	ldr	r3, [r6, #24]
 800be42:	b913      	cbnz	r3, 800be4a <__sfp+0x16>
 800be44:	4630      	mov	r0, r6
 800be46:	f7ff ffbd 	bl	800bdc4 <__sinit>
 800be4a:	3648      	adds	r6, #72	; 0x48
 800be4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be50:	3b01      	subs	r3, #1
 800be52:	d503      	bpl.n	800be5c <__sfp+0x28>
 800be54:	6833      	ldr	r3, [r6, #0]
 800be56:	b30b      	cbz	r3, 800be9c <__sfp+0x68>
 800be58:	6836      	ldr	r6, [r6, #0]
 800be5a:	e7f7      	b.n	800be4c <__sfp+0x18>
 800be5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be60:	b9d5      	cbnz	r5, 800be98 <__sfp+0x64>
 800be62:	4b16      	ldr	r3, [pc, #88]	; (800bebc <__sfp+0x88>)
 800be64:	60e3      	str	r3, [r4, #12]
 800be66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be6a:	6665      	str	r5, [r4, #100]	; 0x64
 800be6c:	f000 f84c 	bl	800bf08 <__retarget_lock_init_recursive>
 800be70:	f7ff ff96 	bl	800bda0 <__sfp_lock_release>
 800be74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be7c:	6025      	str	r5, [r4, #0]
 800be7e:	61a5      	str	r5, [r4, #24]
 800be80:	2208      	movs	r2, #8
 800be82:	4629      	mov	r1, r5
 800be84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be88:	f7fe fb50 	bl	800a52c <memset>
 800be8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be94:	4620      	mov	r0, r4
 800be96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be98:	3468      	adds	r4, #104	; 0x68
 800be9a:	e7d9      	b.n	800be50 <__sfp+0x1c>
 800be9c:	2104      	movs	r1, #4
 800be9e:	4638      	mov	r0, r7
 800bea0:	f7ff ff62 	bl	800bd68 <__sfmoreglue>
 800bea4:	4604      	mov	r4, r0
 800bea6:	6030      	str	r0, [r6, #0]
 800bea8:	2800      	cmp	r0, #0
 800beaa:	d1d5      	bne.n	800be58 <__sfp+0x24>
 800beac:	f7ff ff78 	bl	800bda0 <__sfp_lock_release>
 800beb0:	230c      	movs	r3, #12
 800beb2:	603b      	str	r3, [r7, #0]
 800beb4:	e7ee      	b.n	800be94 <__sfp+0x60>
 800beb6:	bf00      	nop
 800beb8:	0800d054 	.word	0x0800d054
 800bebc:	ffff0001 	.word	0xffff0001

0800bec0 <_fwalk_reent>:
 800bec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bec4:	4606      	mov	r6, r0
 800bec6:	4688      	mov	r8, r1
 800bec8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800becc:	2700      	movs	r7, #0
 800bece:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bed2:	f1b9 0901 	subs.w	r9, r9, #1
 800bed6:	d505      	bpl.n	800bee4 <_fwalk_reent+0x24>
 800bed8:	6824      	ldr	r4, [r4, #0]
 800beda:	2c00      	cmp	r4, #0
 800bedc:	d1f7      	bne.n	800bece <_fwalk_reent+0xe>
 800bede:	4638      	mov	r0, r7
 800bee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bee4:	89ab      	ldrh	r3, [r5, #12]
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d907      	bls.n	800befa <_fwalk_reent+0x3a>
 800beea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800beee:	3301      	adds	r3, #1
 800bef0:	d003      	beq.n	800befa <_fwalk_reent+0x3a>
 800bef2:	4629      	mov	r1, r5
 800bef4:	4630      	mov	r0, r6
 800bef6:	47c0      	blx	r8
 800bef8:	4307      	orrs	r7, r0
 800befa:	3568      	adds	r5, #104	; 0x68
 800befc:	e7e9      	b.n	800bed2 <_fwalk_reent+0x12>
	...

0800bf00 <_localeconv_r>:
 800bf00:	4800      	ldr	r0, [pc, #0]	; (800bf04 <_localeconv_r+0x4>)
 800bf02:	4770      	bx	lr
 800bf04:	20000188 	.word	0x20000188

0800bf08 <__retarget_lock_init_recursive>:
 800bf08:	4770      	bx	lr

0800bf0a <__retarget_lock_acquire_recursive>:
 800bf0a:	4770      	bx	lr

0800bf0c <__retarget_lock_release_recursive>:
 800bf0c:	4770      	bx	lr

0800bf0e <memcpy>:
 800bf0e:	440a      	add	r2, r1
 800bf10:	4291      	cmp	r1, r2
 800bf12:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf16:	d100      	bne.n	800bf1a <memcpy+0xc>
 800bf18:	4770      	bx	lr
 800bf1a:	b510      	push	{r4, lr}
 800bf1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf20:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf24:	4291      	cmp	r1, r2
 800bf26:	d1f9      	bne.n	800bf1c <memcpy+0xe>
 800bf28:	bd10      	pop	{r4, pc}
	...

0800bf2c <__malloc_lock>:
 800bf2c:	4801      	ldr	r0, [pc, #4]	; (800bf34 <__malloc_lock+0x8>)
 800bf2e:	f7ff bfec 	b.w	800bf0a <__retarget_lock_acquire_recursive>
 800bf32:	bf00      	nop
 800bf34:	2000023c 	.word	0x2000023c

0800bf38 <__malloc_unlock>:
 800bf38:	4801      	ldr	r0, [pc, #4]	; (800bf40 <__malloc_unlock+0x8>)
 800bf3a:	f7ff bfe7 	b.w	800bf0c <__retarget_lock_release_recursive>
 800bf3e:	bf00      	nop
 800bf40:	2000023c 	.word	0x2000023c

0800bf44 <_Balloc>:
 800bf44:	b570      	push	{r4, r5, r6, lr}
 800bf46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf48:	4604      	mov	r4, r0
 800bf4a:	460d      	mov	r5, r1
 800bf4c:	b976      	cbnz	r6, 800bf6c <_Balloc+0x28>
 800bf4e:	2010      	movs	r0, #16
 800bf50:	f7fe fadc 	bl	800a50c <malloc>
 800bf54:	4602      	mov	r2, r0
 800bf56:	6260      	str	r0, [r4, #36]	; 0x24
 800bf58:	b920      	cbnz	r0, 800bf64 <_Balloc+0x20>
 800bf5a:	4b18      	ldr	r3, [pc, #96]	; (800bfbc <_Balloc+0x78>)
 800bf5c:	4818      	ldr	r0, [pc, #96]	; (800bfc0 <_Balloc+0x7c>)
 800bf5e:	2166      	movs	r1, #102	; 0x66
 800bf60:	f000 fdfa 	bl	800cb58 <__assert_func>
 800bf64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf68:	6006      	str	r6, [r0, #0]
 800bf6a:	60c6      	str	r6, [r0, #12]
 800bf6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf6e:	68f3      	ldr	r3, [r6, #12]
 800bf70:	b183      	cbz	r3, 800bf94 <_Balloc+0x50>
 800bf72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf7a:	b9b8      	cbnz	r0, 800bfac <_Balloc+0x68>
 800bf7c:	2101      	movs	r1, #1
 800bf7e:	fa01 f605 	lsl.w	r6, r1, r5
 800bf82:	1d72      	adds	r2, r6, #5
 800bf84:	0092      	lsls	r2, r2, #2
 800bf86:	4620      	mov	r0, r4
 800bf88:	f000 fb60 	bl	800c64c <_calloc_r>
 800bf8c:	b160      	cbz	r0, 800bfa8 <_Balloc+0x64>
 800bf8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf92:	e00e      	b.n	800bfb2 <_Balloc+0x6e>
 800bf94:	2221      	movs	r2, #33	; 0x21
 800bf96:	2104      	movs	r1, #4
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f000 fb57 	bl	800c64c <_calloc_r>
 800bf9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfa0:	60f0      	str	r0, [r6, #12]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1e4      	bne.n	800bf72 <_Balloc+0x2e>
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	bd70      	pop	{r4, r5, r6, pc}
 800bfac:	6802      	ldr	r2, [r0, #0]
 800bfae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bfb8:	e7f7      	b.n	800bfaa <_Balloc+0x66>
 800bfba:	bf00      	nop
 800bfbc:	0800d099 	.word	0x0800d099
 800bfc0:	0800d17c 	.word	0x0800d17c

0800bfc4 <_Bfree>:
 800bfc4:	b570      	push	{r4, r5, r6, lr}
 800bfc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bfc8:	4605      	mov	r5, r0
 800bfca:	460c      	mov	r4, r1
 800bfcc:	b976      	cbnz	r6, 800bfec <_Bfree+0x28>
 800bfce:	2010      	movs	r0, #16
 800bfd0:	f7fe fa9c 	bl	800a50c <malloc>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	6268      	str	r0, [r5, #36]	; 0x24
 800bfd8:	b920      	cbnz	r0, 800bfe4 <_Bfree+0x20>
 800bfda:	4b09      	ldr	r3, [pc, #36]	; (800c000 <_Bfree+0x3c>)
 800bfdc:	4809      	ldr	r0, [pc, #36]	; (800c004 <_Bfree+0x40>)
 800bfde:	218a      	movs	r1, #138	; 0x8a
 800bfe0:	f000 fdba 	bl	800cb58 <__assert_func>
 800bfe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfe8:	6006      	str	r6, [r0, #0]
 800bfea:	60c6      	str	r6, [r0, #12]
 800bfec:	b13c      	cbz	r4, 800bffe <_Bfree+0x3a>
 800bfee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bff0:	6862      	ldr	r2, [r4, #4]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bff8:	6021      	str	r1, [r4, #0]
 800bffa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bffe:	bd70      	pop	{r4, r5, r6, pc}
 800c000:	0800d099 	.word	0x0800d099
 800c004:	0800d17c 	.word	0x0800d17c

0800c008 <__multadd>:
 800c008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c00c:	690d      	ldr	r5, [r1, #16]
 800c00e:	4607      	mov	r7, r0
 800c010:	460c      	mov	r4, r1
 800c012:	461e      	mov	r6, r3
 800c014:	f101 0c14 	add.w	ip, r1, #20
 800c018:	2000      	movs	r0, #0
 800c01a:	f8dc 3000 	ldr.w	r3, [ip]
 800c01e:	b299      	uxth	r1, r3
 800c020:	fb02 6101 	mla	r1, r2, r1, r6
 800c024:	0c1e      	lsrs	r6, r3, #16
 800c026:	0c0b      	lsrs	r3, r1, #16
 800c028:	fb02 3306 	mla	r3, r2, r6, r3
 800c02c:	b289      	uxth	r1, r1
 800c02e:	3001      	adds	r0, #1
 800c030:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c034:	4285      	cmp	r5, r0
 800c036:	f84c 1b04 	str.w	r1, [ip], #4
 800c03a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c03e:	dcec      	bgt.n	800c01a <__multadd+0x12>
 800c040:	b30e      	cbz	r6, 800c086 <__multadd+0x7e>
 800c042:	68a3      	ldr	r3, [r4, #8]
 800c044:	42ab      	cmp	r3, r5
 800c046:	dc19      	bgt.n	800c07c <__multadd+0x74>
 800c048:	6861      	ldr	r1, [r4, #4]
 800c04a:	4638      	mov	r0, r7
 800c04c:	3101      	adds	r1, #1
 800c04e:	f7ff ff79 	bl	800bf44 <_Balloc>
 800c052:	4680      	mov	r8, r0
 800c054:	b928      	cbnz	r0, 800c062 <__multadd+0x5a>
 800c056:	4602      	mov	r2, r0
 800c058:	4b0c      	ldr	r3, [pc, #48]	; (800c08c <__multadd+0x84>)
 800c05a:	480d      	ldr	r0, [pc, #52]	; (800c090 <__multadd+0x88>)
 800c05c:	21b5      	movs	r1, #181	; 0xb5
 800c05e:	f000 fd7b 	bl	800cb58 <__assert_func>
 800c062:	6922      	ldr	r2, [r4, #16]
 800c064:	3202      	adds	r2, #2
 800c066:	f104 010c 	add.w	r1, r4, #12
 800c06a:	0092      	lsls	r2, r2, #2
 800c06c:	300c      	adds	r0, #12
 800c06e:	f7ff ff4e 	bl	800bf0e <memcpy>
 800c072:	4621      	mov	r1, r4
 800c074:	4638      	mov	r0, r7
 800c076:	f7ff ffa5 	bl	800bfc4 <_Bfree>
 800c07a:	4644      	mov	r4, r8
 800c07c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c080:	3501      	adds	r5, #1
 800c082:	615e      	str	r6, [r3, #20]
 800c084:	6125      	str	r5, [r4, #16]
 800c086:	4620      	mov	r0, r4
 800c088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c08c:	0800d10b 	.word	0x0800d10b
 800c090:	0800d17c 	.word	0x0800d17c

0800c094 <__hi0bits>:
 800c094:	0c03      	lsrs	r3, r0, #16
 800c096:	041b      	lsls	r3, r3, #16
 800c098:	b9d3      	cbnz	r3, 800c0d0 <__hi0bits+0x3c>
 800c09a:	0400      	lsls	r0, r0, #16
 800c09c:	2310      	movs	r3, #16
 800c09e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c0a2:	bf04      	itt	eq
 800c0a4:	0200      	lsleq	r0, r0, #8
 800c0a6:	3308      	addeq	r3, #8
 800c0a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c0ac:	bf04      	itt	eq
 800c0ae:	0100      	lsleq	r0, r0, #4
 800c0b0:	3304      	addeq	r3, #4
 800c0b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c0b6:	bf04      	itt	eq
 800c0b8:	0080      	lsleq	r0, r0, #2
 800c0ba:	3302      	addeq	r3, #2
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	db05      	blt.n	800c0cc <__hi0bits+0x38>
 800c0c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c0c4:	f103 0301 	add.w	r3, r3, #1
 800c0c8:	bf08      	it	eq
 800c0ca:	2320      	moveq	r3, #32
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	4770      	bx	lr
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	e7e4      	b.n	800c09e <__hi0bits+0xa>

0800c0d4 <__lo0bits>:
 800c0d4:	6803      	ldr	r3, [r0, #0]
 800c0d6:	f013 0207 	ands.w	r2, r3, #7
 800c0da:	4601      	mov	r1, r0
 800c0dc:	d00b      	beq.n	800c0f6 <__lo0bits+0x22>
 800c0de:	07da      	lsls	r2, r3, #31
 800c0e0:	d423      	bmi.n	800c12a <__lo0bits+0x56>
 800c0e2:	0798      	lsls	r0, r3, #30
 800c0e4:	bf49      	itett	mi
 800c0e6:	085b      	lsrmi	r3, r3, #1
 800c0e8:	089b      	lsrpl	r3, r3, #2
 800c0ea:	2001      	movmi	r0, #1
 800c0ec:	600b      	strmi	r3, [r1, #0]
 800c0ee:	bf5c      	itt	pl
 800c0f0:	600b      	strpl	r3, [r1, #0]
 800c0f2:	2002      	movpl	r0, #2
 800c0f4:	4770      	bx	lr
 800c0f6:	b298      	uxth	r0, r3
 800c0f8:	b9a8      	cbnz	r0, 800c126 <__lo0bits+0x52>
 800c0fa:	0c1b      	lsrs	r3, r3, #16
 800c0fc:	2010      	movs	r0, #16
 800c0fe:	b2da      	uxtb	r2, r3
 800c100:	b90a      	cbnz	r2, 800c106 <__lo0bits+0x32>
 800c102:	3008      	adds	r0, #8
 800c104:	0a1b      	lsrs	r3, r3, #8
 800c106:	071a      	lsls	r2, r3, #28
 800c108:	bf04      	itt	eq
 800c10a:	091b      	lsreq	r3, r3, #4
 800c10c:	3004      	addeq	r0, #4
 800c10e:	079a      	lsls	r2, r3, #30
 800c110:	bf04      	itt	eq
 800c112:	089b      	lsreq	r3, r3, #2
 800c114:	3002      	addeq	r0, #2
 800c116:	07da      	lsls	r2, r3, #31
 800c118:	d403      	bmi.n	800c122 <__lo0bits+0x4e>
 800c11a:	085b      	lsrs	r3, r3, #1
 800c11c:	f100 0001 	add.w	r0, r0, #1
 800c120:	d005      	beq.n	800c12e <__lo0bits+0x5a>
 800c122:	600b      	str	r3, [r1, #0]
 800c124:	4770      	bx	lr
 800c126:	4610      	mov	r0, r2
 800c128:	e7e9      	b.n	800c0fe <__lo0bits+0x2a>
 800c12a:	2000      	movs	r0, #0
 800c12c:	4770      	bx	lr
 800c12e:	2020      	movs	r0, #32
 800c130:	4770      	bx	lr
	...

0800c134 <__i2b>:
 800c134:	b510      	push	{r4, lr}
 800c136:	460c      	mov	r4, r1
 800c138:	2101      	movs	r1, #1
 800c13a:	f7ff ff03 	bl	800bf44 <_Balloc>
 800c13e:	4602      	mov	r2, r0
 800c140:	b928      	cbnz	r0, 800c14e <__i2b+0x1a>
 800c142:	4b05      	ldr	r3, [pc, #20]	; (800c158 <__i2b+0x24>)
 800c144:	4805      	ldr	r0, [pc, #20]	; (800c15c <__i2b+0x28>)
 800c146:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c14a:	f000 fd05 	bl	800cb58 <__assert_func>
 800c14e:	2301      	movs	r3, #1
 800c150:	6144      	str	r4, [r0, #20]
 800c152:	6103      	str	r3, [r0, #16]
 800c154:	bd10      	pop	{r4, pc}
 800c156:	bf00      	nop
 800c158:	0800d10b 	.word	0x0800d10b
 800c15c:	0800d17c 	.word	0x0800d17c

0800c160 <__multiply>:
 800c160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c164:	4691      	mov	r9, r2
 800c166:	690a      	ldr	r2, [r1, #16]
 800c168:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	bfb8      	it	lt
 800c170:	460b      	movlt	r3, r1
 800c172:	460c      	mov	r4, r1
 800c174:	bfbc      	itt	lt
 800c176:	464c      	movlt	r4, r9
 800c178:	4699      	movlt	r9, r3
 800c17a:	6927      	ldr	r7, [r4, #16]
 800c17c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c180:	68a3      	ldr	r3, [r4, #8]
 800c182:	6861      	ldr	r1, [r4, #4]
 800c184:	eb07 060a 	add.w	r6, r7, sl
 800c188:	42b3      	cmp	r3, r6
 800c18a:	b085      	sub	sp, #20
 800c18c:	bfb8      	it	lt
 800c18e:	3101      	addlt	r1, #1
 800c190:	f7ff fed8 	bl	800bf44 <_Balloc>
 800c194:	b930      	cbnz	r0, 800c1a4 <__multiply+0x44>
 800c196:	4602      	mov	r2, r0
 800c198:	4b44      	ldr	r3, [pc, #272]	; (800c2ac <__multiply+0x14c>)
 800c19a:	4845      	ldr	r0, [pc, #276]	; (800c2b0 <__multiply+0x150>)
 800c19c:	f240 115d 	movw	r1, #349	; 0x15d
 800c1a0:	f000 fcda 	bl	800cb58 <__assert_func>
 800c1a4:	f100 0514 	add.w	r5, r0, #20
 800c1a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1ac:	462b      	mov	r3, r5
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	4543      	cmp	r3, r8
 800c1b2:	d321      	bcc.n	800c1f8 <__multiply+0x98>
 800c1b4:	f104 0314 	add.w	r3, r4, #20
 800c1b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c1bc:	f109 0314 	add.w	r3, r9, #20
 800c1c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c1c4:	9202      	str	r2, [sp, #8]
 800c1c6:	1b3a      	subs	r2, r7, r4
 800c1c8:	3a15      	subs	r2, #21
 800c1ca:	f022 0203 	bic.w	r2, r2, #3
 800c1ce:	3204      	adds	r2, #4
 800c1d0:	f104 0115 	add.w	r1, r4, #21
 800c1d4:	428f      	cmp	r7, r1
 800c1d6:	bf38      	it	cc
 800c1d8:	2204      	movcc	r2, #4
 800c1da:	9201      	str	r2, [sp, #4]
 800c1dc:	9a02      	ldr	r2, [sp, #8]
 800c1de:	9303      	str	r3, [sp, #12]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d80c      	bhi.n	800c1fe <__multiply+0x9e>
 800c1e4:	2e00      	cmp	r6, #0
 800c1e6:	dd03      	ble.n	800c1f0 <__multiply+0x90>
 800c1e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d05a      	beq.n	800c2a6 <__multiply+0x146>
 800c1f0:	6106      	str	r6, [r0, #16]
 800c1f2:	b005      	add	sp, #20
 800c1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f8:	f843 2b04 	str.w	r2, [r3], #4
 800c1fc:	e7d8      	b.n	800c1b0 <__multiply+0x50>
 800c1fe:	f8b3 a000 	ldrh.w	sl, [r3]
 800c202:	f1ba 0f00 	cmp.w	sl, #0
 800c206:	d024      	beq.n	800c252 <__multiply+0xf2>
 800c208:	f104 0e14 	add.w	lr, r4, #20
 800c20c:	46a9      	mov	r9, r5
 800c20e:	f04f 0c00 	mov.w	ip, #0
 800c212:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c216:	f8d9 1000 	ldr.w	r1, [r9]
 800c21a:	fa1f fb82 	uxth.w	fp, r2
 800c21e:	b289      	uxth	r1, r1
 800c220:	fb0a 110b 	mla	r1, sl, fp, r1
 800c224:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c228:	f8d9 2000 	ldr.w	r2, [r9]
 800c22c:	4461      	add	r1, ip
 800c22e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c232:	fb0a c20b 	mla	r2, sl, fp, ip
 800c236:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c23a:	b289      	uxth	r1, r1
 800c23c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c240:	4577      	cmp	r7, lr
 800c242:	f849 1b04 	str.w	r1, [r9], #4
 800c246:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c24a:	d8e2      	bhi.n	800c212 <__multiply+0xb2>
 800c24c:	9a01      	ldr	r2, [sp, #4]
 800c24e:	f845 c002 	str.w	ip, [r5, r2]
 800c252:	9a03      	ldr	r2, [sp, #12]
 800c254:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c258:	3304      	adds	r3, #4
 800c25a:	f1b9 0f00 	cmp.w	r9, #0
 800c25e:	d020      	beq.n	800c2a2 <__multiply+0x142>
 800c260:	6829      	ldr	r1, [r5, #0]
 800c262:	f104 0c14 	add.w	ip, r4, #20
 800c266:	46ae      	mov	lr, r5
 800c268:	f04f 0a00 	mov.w	sl, #0
 800c26c:	f8bc b000 	ldrh.w	fp, [ip]
 800c270:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c274:	fb09 220b 	mla	r2, r9, fp, r2
 800c278:	4492      	add	sl, r2
 800c27a:	b289      	uxth	r1, r1
 800c27c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c280:	f84e 1b04 	str.w	r1, [lr], #4
 800c284:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c288:	f8be 1000 	ldrh.w	r1, [lr]
 800c28c:	0c12      	lsrs	r2, r2, #16
 800c28e:	fb09 1102 	mla	r1, r9, r2, r1
 800c292:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c296:	4567      	cmp	r7, ip
 800c298:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c29c:	d8e6      	bhi.n	800c26c <__multiply+0x10c>
 800c29e:	9a01      	ldr	r2, [sp, #4]
 800c2a0:	50a9      	str	r1, [r5, r2]
 800c2a2:	3504      	adds	r5, #4
 800c2a4:	e79a      	b.n	800c1dc <__multiply+0x7c>
 800c2a6:	3e01      	subs	r6, #1
 800c2a8:	e79c      	b.n	800c1e4 <__multiply+0x84>
 800c2aa:	bf00      	nop
 800c2ac:	0800d10b 	.word	0x0800d10b
 800c2b0:	0800d17c 	.word	0x0800d17c

0800c2b4 <__pow5mult>:
 800c2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2b8:	4615      	mov	r5, r2
 800c2ba:	f012 0203 	ands.w	r2, r2, #3
 800c2be:	4606      	mov	r6, r0
 800c2c0:	460f      	mov	r7, r1
 800c2c2:	d007      	beq.n	800c2d4 <__pow5mult+0x20>
 800c2c4:	4c25      	ldr	r4, [pc, #148]	; (800c35c <__pow5mult+0xa8>)
 800c2c6:	3a01      	subs	r2, #1
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2ce:	f7ff fe9b 	bl	800c008 <__multadd>
 800c2d2:	4607      	mov	r7, r0
 800c2d4:	10ad      	asrs	r5, r5, #2
 800c2d6:	d03d      	beq.n	800c354 <__pow5mult+0xa0>
 800c2d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c2da:	b97c      	cbnz	r4, 800c2fc <__pow5mult+0x48>
 800c2dc:	2010      	movs	r0, #16
 800c2de:	f7fe f915 	bl	800a50c <malloc>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	6270      	str	r0, [r6, #36]	; 0x24
 800c2e6:	b928      	cbnz	r0, 800c2f4 <__pow5mult+0x40>
 800c2e8:	4b1d      	ldr	r3, [pc, #116]	; (800c360 <__pow5mult+0xac>)
 800c2ea:	481e      	ldr	r0, [pc, #120]	; (800c364 <__pow5mult+0xb0>)
 800c2ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c2f0:	f000 fc32 	bl	800cb58 <__assert_func>
 800c2f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2f8:	6004      	str	r4, [r0, #0]
 800c2fa:	60c4      	str	r4, [r0, #12]
 800c2fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c300:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c304:	b94c      	cbnz	r4, 800c31a <__pow5mult+0x66>
 800c306:	f240 2171 	movw	r1, #625	; 0x271
 800c30a:	4630      	mov	r0, r6
 800c30c:	f7ff ff12 	bl	800c134 <__i2b>
 800c310:	2300      	movs	r3, #0
 800c312:	f8c8 0008 	str.w	r0, [r8, #8]
 800c316:	4604      	mov	r4, r0
 800c318:	6003      	str	r3, [r0, #0]
 800c31a:	f04f 0900 	mov.w	r9, #0
 800c31e:	07eb      	lsls	r3, r5, #31
 800c320:	d50a      	bpl.n	800c338 <__pow5mult+0x84>
 800c322:	4639      	mov	r1, r7
 800c324:	4622      	mov	r2, r4
 800c326:	4630      	mov	r0, r6
 800c328:	f7ff ff1a 	bl	800c160 <__multiply>
 800c32c:	4639      	mov	r1, r7
 800c32e:	4680      	mov	r8, r0
 800c330:	4630      	mov	r0, r6
 800c332:	f7ff fe47 	bl	800bfc4 <_Bfree>
 800c336:	4647      	mov	r7, r8
 800c338:	106d      	asrs	r5, r5, #1
 800c33a:	d00b      	beq.n	800c354 <__pow5mult+0xa0>
 800c33c:	6820      	ldr	r0, [r4, #0]
 800c33e:	b938      	cbnz	r0, 800c350 <__pow5mult+0x9c>
 800c340:	4622      	mov	r2, r4
 800c342:	4621      	mov	r1, r4
 800c344:	4630      	mov	r0, r6
 800c346:	f7ff ff0b 	bl	800c160 <__multiply>
 800c34a:	6020      	str	r0, [r4, #0]
 800c34c:	f8c0 9000 	str.w	r9, [r0]
 800c350:	4604      	mov	r4, r0
 800c352:	e7e4      	b.n	800c31e <__pow5mult+0x6a>
 800c354:	4638      	mov	r0, r7
 800c356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c35a:	bf00      	nop
 800c35c:	0800d2c8 	.word	0x0800d2c8
 800c360:	0800d099 	.word	0x0800d099
 800c364:	0800d17c 	.word	0x0800d17c

0800c368 <__lshift>:
 800c368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c36c:	460c      	mov	r4, r1
 800c36e:	6849      	ldr	r1, [r1, #4]
 800c370:	6923      	ldr	r3, [r4, #16]
 800c372:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c376:	68a3      	ldr	r3, [r4, #8]
 800c378:	4607      	mov	r7, r0
 800c37a:	4691      	mov	r9, r2
 800c37c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c380:	f108 0601 	add.w	r6, r8, #1
 800c384:	42b3      	cmp	r3, r6
 800c386:	db0b      	blt.n	800c3a0 <__lshift+0x38>
 800c388:	4638      	mov	r0, r7
 800c38a:	f7ff fddb 	bl	800bf44 <_Balloc>
 800c38e:	4605      	mov	r5, r0
 800c390:	b948      	cbnz	r0, 800c3a6 <__lshift+0x3e>
 800c392:	4602      	mov	r2, r0
 800c394:	4b2a      	ldr	r3, [pc, #168]	; (800c440 <__lshift+0xd8>)
 800c396:	482b      	ldr	r0, [pc, #172]	; (800c444 <__lshift+0xdc>)
 800c398:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c39c:	f000 fbdc 	bl	800cb58 <__assert_func>
 800c3a0:	3101      	adds	r1, #1
 800c3a2:	005b      	lsls	r3, r3, #1
 800c3a4:	e7ee      	b.n	800c384 <__lshift+0x1c>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	f100 0114 	add.w	r1, r0, #20
 800c3ac:	f100 0210 	add.w	r2, r0, #16
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	4553      	cmp	r3, sl
 800c3b4:	db37      	blt.n	800c426 <__lshift+0xbe>
 800c3b6:	6920      	ldr	r0, [r4, #16]
 800c3b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3bc:	f104 0314 	add.w	r3, r4, #20
 800c3c0:	f019 091f 	ands.w	r9, r9, #31
 800c3c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c3cc:	d02f      	beq.n	800c42e <__lshift+0xc6>
 800c3ce:	f1c9 0e20 	rsb	lr, r9, #32
 800c3d2:	468a      	mov	sl, r1
 800c3d4:	f04f 0c00 	mov.w	ip, #0
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	fa02 f209 	lsl.w	r2, r2, r9
 800c3de:	ea42 020c 	orr.w	r2, r2, ip
 800c3e2:	f84a 2b04 	str.w	r2, [sl], #4
 800c3e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3ea:	4298      	cmp	r0, r3
 800c3ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c3f0:	d8f2      	bhi.n	800c3d8 <__lshift+0x70>
 800c3f2:	1b03      	subs	r3, r0, r4
 800c3f4:	3b15      	subs	r3, #21
 800c3f6:	f023 0303 	bic.w	r3, r3, #3
 800c3fa:	3304      	adds	r3, #4
 800c3fc:	f104 0215 	add.w	r2, r4, #21
 800c400:	4290      	cmp	r0, r2
 800c402:	bf38      	it	cc
 800c404:	2304      	movcc	r3, #4
 800c406:	f841 c003 	str.w	ip, [r1, r3]
 800c40a:	f1bc 0f00 	cmp.w	ip, #0
 800c40e:	d001      	beq.n	800c414 <__lshift+0xac>
 800c410:	f108 0602 	add.w	r6, r8, #2
 800c414:	3e01      	subs	r6, #1
 800c416:	4638      	mov	r0, r7
 800c418:	612e      	str	r6, [r5, #16]
 800c41a:	4621      	mov	r1, r4
 800c41c:	f7ff fdd2 	bl	800bfc4 <_Bfree>
 800c420:	4628      	mov	r0, r5
 800c422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c426:	f842 0f04 	str.w	r0, [r2, #4]!
 800c42a:	3301      	adds	r3, #1
 800c42c:	e7c1      	b.n	800c3b2 <__lshift+0x4a>
 800c42e:	3904      	subs	r1, #4
 800c430:	f853 2b04 	ldr.w	r2, [r3], #4
 800c434:	f841 2f04 	str.w	r2, [r1, #4]!
 800c438:	4298      	cmp	r0, r3
 800c43a:	d8f9      	bhi.n	800c430 <__lshift+0xc8>
 800c43c:	e7ea      	b.n	800c414 <__lshift+0xac>
 800c43e:	bf00      	nop
 800c440:	0800d10b 	.word	0x0800d10b
 800c444:	0800d17c 	.word	0x0800d17c

0800c448 <__mcmp>:
 800c448:	b530      	push	{r4, r5, lr}
 800c44a:	6902      	ldr	r2, [r0, #16]
 800c44c:	690c      	ldr	r4, [r1, #16]
 800c44e:	1b12      	subs	r2, r2, r4
 800c450:	d10e      	bne.n	800c470 <__mcmp+0x28>
 800c452:	f100 0314 	add.w	r3, r0, #20
 800c456:	3114      	adds	r1, #20
 800c458:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c45c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c460:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c464:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c468:	42a5      	cmp	r5, r4
 800c46a:	d003      	beq.n	800c474 <__mcmp+0x2c>
 800c46c:	d305      	bcc.n	800c47a <__mcmp+0x32>
 800c46e:	2201      	movs	r2, #1
 800c470:	4610      	mov	r0, r2
 800c472:	bd30      	pop	{r4, r5, pc}
 800c474:	4283      	cmp	r3, r0
 800c476:	d3f3      	bcc.n	800c460 <__mcmp+0x18>
 800c478:	e7fa      	b.n	800c470 <__mcmp+0x28>
 800c47a:	f04f 32ff 	mov.w	r2, #4294967295
 800c47e:	e7f7      	b.n	800c470 <__mcmp+0x28>

0800c480 <__mdiff>:
 800c480:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c484:	460c      	mov	r4, r1
 800c486:	4606      	mov	r6, r0
 800c488:	4611      	mov	r1, r2
 800c48a:	4620      	mov	r0, r4
 800c48c:	4690      	mov	r8, r2
 800c48e:	f7ff ffdb 	bl	800c448 <__mcmp>
 800c492:	1e05      	subs	r5, r0, #0
 800c494:	d110      	bne.n	800c4b8 <__mdiff+0x38>
 800c496:	4629      	mov	r1, r5
 800c498:	4630      	mov	r0, r6
 800c49a:	f7ff fd53 	bl	800bf44 <_Balloc>
 800c49e:	b930      	cbnz	r0, 800c4ae <__mdiff+0x2e>
 800c4a0:	4b3a      	ldr	r3, [pc, #232]	; (800c58c <__mdiff+0x10c>)
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	f240 2132 	movw	r1, #562	; 0x232
 800c4a8:	4839      	ldr	r0, [pc, #228]	; (800c590 <__mdiff+0x110>)
 800c4aa:	f000 fb55 	bl	800cb58 <__assert_func>
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b8:	bfa4      	itt	ge
 800c4ba:	4643      	movge	r3, r8
 800c4bc:	46a0      	movge	r8, r4
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c4c4:	bfa6      	itte	ge
 800c4c6:	461c      	movge	r4, r3
 800c4c8:	2500      	movge	r5, #0
 800c4ca:	2501      	movlt	r5, #1
 800c4cc:	f7ff fd3a 	bl	800bf44 <_Balloc>
 800c4d0:	b920      	cbnz	r0, 800c4dc <__mdiff+0x5c>
 800c4d2:	4b2e      	ldr	r3, [pc, #184]	; (800c58c <__mdiff+0x10c>)
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c4da:	e7e5      	b.n	800c4a8 <__mdiff+0x28>
 800c4dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c4e0:	6926      	ldr	r6, [r4, #16]
 800c4e2:	60c5      	str	r5, [r0, #12]
 800c4e4:	f104 0914 	add.w	r9, r4, #20
 800c4e8:	f108 0514 	add.w	r5, r8, #20
 800c4ec:	f100 0e14 	add.w	lr, r0, #20
 800c4f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c4f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c4f8:	f108 0210 	add.w	r2, r8, #16
 800c4fc:	46f2      	mov	sl, lr
 800c4fe:	2100      	movs	r1, #0
 800c500:	f859 3b04 	ldr.w	r3, [r9], #4
 800c504:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c508:	fa1f f883 	uxth.w	r8, r3
 800c50c:	fa11 f18b 	uxtah	r1, r1, fp
 800c510:	0c1b      	lsrs	r3, r3, #16
 800c512:	eba1 0808 	sub.w	r8, r1, r8
 800c516:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c51a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c51e:	fa1f f888 	uxth.w	r8, r8
 800c522:	1419      	asrs	r1, r3, #16
 800c524:	454e      	cmp	r6, r9
 800c526:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c52a:	f84a 3b04 	str.w	r3, [sl], #4
 800c52e:	d8e7      	bhi.n	800c500 <__mdiff+0x80>
 800c530:	1b33      	subs	r3, r6, r4
 800c532:	3b15      	subs	r3, #21
 800c534:	f023 0303 	bic.w	r3, r3, #3
 800c538:	3304      	adds	r3, #4
 800c53a:	3415      	adds	r4, #21
 800c53c:	42a6      	cmp	r6, r4
 800c53e:	bf38      	it	cc
 800c540:	2304      	movcc	r3, #4
 800c542:	441d      	add	r5, r3
 800c544:	4473      	add	r3, lr
 800c546:	469e      	mov	lr, r3
 800c548:	462e      	mov	r6, r5
 800c54a:	4566      	cmp	r6, ip
 800c54c:	d30e      	bcc.n	800c56c <__mdiff+0xec>
 800c54e:	f10c 0203 	add.w	r2, ip, #3
 800c552:	1b52      	subs	r2, r2, r5
 800c554:	f022 0203 	bic.w	r2, r2, #3
 800c558:	3d03      	subs	r5, #3
 800c55a:	45ac      	cmp	ip, r5
 800c55c:	bf38      	it	cc
 800c55e:	2200      	movcc	r2, #0
 800c560:	441a      	add	r2, r3
 800c562:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c566:	b17b      	cbz	r3, 800c588 <__mdiff+0x108>
 800c568:	6107      	str	r7, [r0, #16]
 800c56a:	e7a3      	b.n	800c4b4 <__mdiff+0x34>
 800c56c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c570:	fa11 f288 	uxtah	r2, r1, r8
 800c574:	1414      	asrs	r4, r2, #16
 800c576:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c57a:	b292      	uxth	r2, r2
 800c57c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c580:	f84e 2b04 	str.w	r2, [lr], #4
 800c584:	1421      	asrs	r1, r4, #16
 800c586:	e7e0      	b.n	800c54a <__mdiff+0xca>
 800c588:	3f01      	subs	r7, #1
 800c58a:	e7ea      	b.n	800c562 <__mdiff+0xe2>
 800c58c:	0800d10b 	.word	0x0800d10b
 800c590:	0800d17c 	.word	0x0800d17c

0800c594 <__d2b>:
 800c594:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c598:	4689      	mov	r9, r1
 800c59a:	2101      	movs	r1, #1
 800c59c:	ec57 6b10 	vmov	r6, r7, d0
 800c5a0:	4690      	mov	r8, r2
 800c5a2:	f7ff fccf 	bl	800bf44 <_Balloc>
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	b930      	cbnz	r0, 800c5b8 <__d2b+0x24>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	4b25      	ldr	r3, [pc, #148]	; (800c644 <__d2b+0xb0>)
 800c5ae:	4826      	ldr	r0, [pc, #152]	; (800c648 <__d2b+0xb4>)
 800c5b0:	f240 310a 	movw	r1, #778	; 0x30a
 800c5b4:	f000 fad0 	bl	800cb58 <__assert_func>
 800c5b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c5bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c5c0:	bb35      	cbnz	r5, 800c610 <__d2b+0x7c>
 800c5c2:	2e00      	cmp	r6, #0
 800c5c4:	9301      	str	r3, [sp, #4]
 800c5c6:	d028      	beq.n	800c61a <__d2b+0x86>
 800c5c8:	4668      	mov	r0, sp
 800c5ca:	9600      	str	r6, [sp, #0]
 800c5cc:	f7ff fd82 	bl	800c0d4 <__lo0bits>
 800c5d0:	9900      	ldr	r1, [sp, #0]
 800c5d2:	b300      	cbz	r0, 800c616 <__d2b+0x82>
 800c5d4:	9a01      	ldr	r2, [sp, #4]
 800c5d6:	f1c0 0320 	rsb	r3, r0, #32
 800c5da:	fa02 f303 	lsl.w	r3, r2, r3
 800c5de:	430b      	orrs	r3, r1
 800c5e0:	40c2      	lsrs	r2, r0
 800c5e2:	6163      	str	r3, [r4, #20]
 800c5e4:	9201      	str	r2, [sp, #4]
 800c5e6:	9b01      	ldr	r3, [sp, #4]
 800c5e8:	61a3      	str	r3, [r4, #24]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	bf14      	ite	ne
 800c5ee:	2202      	movne	r2, #2
 800c5f0:	2201      	moveq	r2, #1
 800c5f2:	6122      	str	r2, [r4, #16]
 800c5f4:	b1d5      	cbz	r5, 800c62c <__d2b+0x98>
 800c5f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c5fa:	4405      	add	r5, r0
 800c5fc:	f8c9 5000 	str.w	r5, [r9]
 800c600:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c604:	f8c8 0000 	str.w	r0, [r8]
 800c608:	4620      	mov	r0, r4
 800c60a:	b003      	add	sp, #12
 800c60c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c610:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c614:	e7d5      	b.n	800c5c2 <__d2b+0x2e>
 800c616:	6161      	str	r1, [r4, #20]
 800c618:	e7e5      	b.n	800c5e6 <__d2b+0x52>
 800c61a:	a801      	add	r0, sp, #4
 800c61c:	f7ff fd5a 	bl	800c0d4 <__lo0bits>
 800c620:	9b01      	ldr	r3, [sp, #4]
 800c622:	6163      	str	r3, [r4, #20]
 800c624:	2201      	movs	r2, #1
 800c626:	6122      	str	r2, [r4, #16]
 800c628:	3020      	adds	r0, #32
 800c62a:	e7e3      	b.n	800c5f4 <__d2b+0x60>
 800c62c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c630:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c634:	f8c9 0000 	str.w	r0, [r9]
 800c638:	6918      	ldr	r0, [r3, #16]
 800c63a:	f7ff fd2b 	bl	800c094 <__hi0bits>
 800c63e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c642:	e7df      	b.n	800c604 <__d2b+0x70>
 800c644:	0800d10b 	.word	0x0800d10b
 800c648:	0800d17c 	.word	0x0800d17c

0800c64c <_calloc_r>:
 800c64c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c64e:	fba1 2402 	umull	r2, r4, r1, r2
 800c652:	b94c      	cbnz	r4, 800c668 <_calloc_r+0x1c>
 800c654:	4611      	mov	r1, r2
 800c656:	9201      	str	r2, [sp, #4]
 800c658:	f7fd ffdc 	bl	800a614 <_malloc_r>
 800c65c:	9a01      	ldr	r2, [sp, #4]
 800c65e:	4605      	mov	r5, r0
 800c660:	b930      	cbnz	r0, 800c670 <_calloc_r+0x24>
 800c662:	4628      	mov	r0, r5
 800c664:	b003      	add	sp, #12
 800c666:	bd30      	pop	{r4, r5, pc}
 800c668:	220c      	movs	r2, #12
 800c66a:	6002      	str	r2, [r0, #0]
 800c66c:	2500      	movs	r5, #0
 800c66e:	e7f8      	b.n	800c662 <_calloc_r+0x16>
 800c670:	4621      	mov	r1, r4
 800c672:	f7fd ff5b 	bl	800a52c <memset>
 800c676:	e7f4      	b.n	800c662 <_calloc_r+0x16>

0800c678 <__sfputc_r>:
 800c678:	6893      	ldr	r3, [r2, #8]
 800c67a:	3b01      	subs	r3, #1
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	b410      	push	{r4}
 800c680:	6093      	str	r3, [r2, #8]
 800c682:	da08      	bge.n	800c696 <__sfputc_r+0x1e>
 800c684:	6994      	ldr	r4, [r2, #24]
 800c686:	42a3      	cmp	r3, r4
 800c688:	db01      	blt.n	800c68e <__sfputc_r+0x16>
 800c68a:	290a      	cmp	r1, #10
 800c68c:	d103      	bne.n	800c696 <__sfputc_r+0x1e>
 800c68e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c692:	f000 b98f 	b.w	800c9b4 <__swbuf_r>
 800c696:	6813      	ldr	r3, [r2, #0]
 800c698:	1c58      	adds	r0, r3, #1
 800c69a:	6010      	str	r0, [r2, #0]
 800c69c:	7019      	strb	r1, [r3, #0]
 800c69e:	4608      	mov	r0, r1
 800c6a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6a4:	4770      	bx	lr

0800c6a6 <__sfputs_r>:
 800c6a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6a8:	4606      	mov	r6, r0
 800c6aa:	460f      	mov	r7, r1
 800c6ac:	4614      	mov	r4, r2
 800c6ae:	18d5      	adds	r5, r2, r3
 800c6b0:	42ac      	cmp	r4, r5
 800c6b2:	d101      	bne.n	800c6b8 <__sfputs_r+0x12>
 800c6b4:	2000      	movs	r0, #0
 800c6b6:	e007      	b.n	800c6c8 <__sfputs_r+0x22>
 800c6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6bc:	463a      	mov	r2, r7
 800c6be:	4630      	mov	r0, r6
 800c6c0:	f7ff ffda 	bl	800c678 <__sfputc_r>
 800c6c4:	1c43      	adds	r3, r0, #1
 800c6c6:	d1f3      	bne.n	800c6b0 <__sfputs_r+0xa>
 800c6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6cc <_vfiprintf_r>:
 800c6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d0:	460d      	mov	r5, r1
 800c6d2:	b09d      	sub	sp, #116	; 0x74
 800c6d4:	4614      	mov	r4, r2
 800c6d6:	4698      	mov	r8, r3
 800c6d8:	4606      	mov	r6, r0
 800c6da:	b118      	cbz	r0, 800c6e4 <_vfiprintf_r+0x18>
 800c6dc:	6983      	ldr	r3, [r0, #24]
 800c6de:	b90b      	cbnz	r3, 800c6e4 <_vfiprintf_r+0x18>
 800c6e0:	f7ff fb70 	bl	800bdc4 <__sinit>
 800c6e4:	4b89      	ldr	r3, [pc, #548]	; (800c90c <_vfiprintf_r+0x240>)
 800c6e6:	429d      	cmp	r5, r3
 800c6e8:	d11b      	bne.n	800c722 <_vfiprintf_r+0x56>
 800c6ea:	6875      	ldr	r5, [r6, #4]
 800c6ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6ee:	07d9      	lsls	r1, r3, #31
 800c6f0:	d405      	bmi.n	800c6fe <_vfiprintf_r+0x32>
 800c6f2:	89ab      	ldrh	r3, [r5, #12]
 800c6f4:	059a      	lsls	r2, r3, #22
 800c6f6:	d402      	bmi.n	800c6fe <_vfiprintf_r+0x32>
 800c6f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6fa:	f7ff fc06 	bl	800bf0a <__retarget_lock_acquire_recursive>
 800c6fe:	89ab      	ldrh	r3, [r5, #12]
 800c700:	071b      	lsls	r3, r3, #28
 800c702:	d501      	bpl.n	800c708 <_vfiprintf_r+0x3c>
 800c704:	692b      	ldr	r3, [r5, #16]
 800c706:	b9eb      	cbnz	r3, 800c744 <_vfiprintf_r+0x78>
 800c708:	4629      	mov	r1, r5
 800c70a:	4630      	mov	r0, r6
 800c70c:	f000 f9b6 	bl	800ca7c <__swsetup_r>
 800c710:	b1c0      	cbz	r0, 800c744 <_vfiprintf_r+0x78>
 800c712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c714:	07dc      	lsls	r4, r3, #31
 800c716:	d50e      	bpl.n	800c736 <_vfiprintf_r+0x6a>
 800c718:	f04f 30ff 	mov.w	r0, #4294967295
 800c71c:	b01d      	add	sp, #116	; 0x74
 800c71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c722:	4b7b      	ldr	r3, [pc, #492]	; (800c910 <_vfiprintf_r+0x244>)
 800c724:	429d      	cmp	r5, r3
 800c726:	d101      	bne.n	800c72c <_vfiprintf_r+0x60>
 800c728:	68b5      	ldr	r5, [r6, #8]
 800c72a:	e7df      	b.n	800c6ec <_vfiprintf_r+0x20>
 800c72c:	4b79      	ldr	r3, [pc, #484]	; (800c914 <_vfiprintf_r+0x248>)
 800c72e:	429d      	cmp	r5, r3
 800c730:	bf08      	it	eq
 800c732:	68f5      	ldreq	r5, [r6, #12]
 800c734:	e7da      	b.n	800c6ec <_vfiprintf_r+0x20>
 800c736:	89ab      	ldrh	r3, [r5, #12]
 800c738:	0598      	lsls	r0, r3, #22
 800c73a:	d4ed      	bmi.n	800c718 <_vfiprintf_r+0x4c>
 800c73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c73e:	f7ff fbe5 	bl	800bf0c <__retarget_lock_release_recursive>
 800c742:	e7e9      	b.n	800c718 <_vfiprintf_r+0x4c>
 800c744:	2300      	movs	r3, #0
 800c746:	9309      	str	r3, [sp, #36]	; 0x24
 800c748:	2320      	movs	r3, #32
 800c74a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c74e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c752:	2330      	movs	r3, #48	; 0x30
 800c754:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c918 <_vfiprintf_r+0x24c>
 800c758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c75c:	f04f 0901 	mov.w	r9, #1
 800c760:	4623      	mov	r3, r4
 800c762:	469a      	mov	sl, r3
 800c764:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c768:	b10a      	cbz	r2, 800c76e <_vfiprintf_r+0xa2>
 800c76a:	2a25      	cmp	r2, #37	; 0x25
 800c76c:	d1f9      	bne.n	800c762 <_vfiprintf_r+0x96>
 800c76e:	ebba 0b04 	subs.w	fp, sl, r4
 800c772:	d00b      	beq.n	800c78c <_vfiprintf_r+0xc0>
 800c774:	465b      	mov	r3, fp
 800c776:	4622      	mov	r2, r4
 800c778:	4629      	mov	r1, r5
 800c77a:	4630      	mov	r0, r6
 800c77c:	f7ff ff93 	bl	800c6a6 <__sfputs_r>
 800c780:	3001      	adds	r0, #1
 800c782:	f000 80aa 	beq.w	800c8da <_vfiprintf_r+0x20e>
 800c786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c788:	445a      	add	r2, fp
 800c78a:	9209      	str	r2, [sp, #36]	; 0x24
 800c78c:	f89a 3000 	ldrb.w	r3, [sl]
 800c790:	2b00      	cmp	r3, #0
 800c792:	f000 80a2 	beq.w	800c8da <_vfiprintf_r+0x20e>
 800c796:	2300      	movs	r3, #0
 800c798:	f04f 32ff 	mov.w	r2, #4294967295
 800c79c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7a0:	f10a 0a01 	add.w	sl, sl, #1
 800c7a4:	9304      	str	r3, [sp, #16]
 800c7a6:	9307      	str	r3, [sp, #28]
 800c7a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7ac:	931a      	str	r3, [sp, #104]	; 0x68
 800c7ae:	4654      	mov	r4, sl
 800c7b0:	2205      	movs	r2, #5
 800c7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7b6:	4858      	ldr	r0, [pc, #352]	; (800c918 <_vfiprintf_r+0x24c>)
 800c7b8:	f7f3 fd1a 	bl	80001f0 <memchr>
 800c7bc:	9a04      	ldr	r2, [sp, #16]
 800c7be:	b9d8      	cbnz	r0, 800c7f8 <_vfiprintf_r+0x12c>
 800c7c0:	06d1      	lsls	r1, r2, #27
 800c7c2:	bf44      	itt	mi
 800c7c4:	2320      	movmi	r3, #32
 800c7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ca:	0713      	lsls	r3, r2, #28
 800c7cc:	bf44      	itt	mi
 800c7ce:	232b      	movmi	r3, #43	; 0x2b
 800c7d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c7da:	d015      	beq.n	800c808 <_vfiprintf_r+0x13c>
 800c7dc:	9a07      	ldr	r2, [sp, #28]
 800c7de:	4654      	mov	r4, sl
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	f04f 0c0a 	mov.w	ip, #10
 800c7e6:	4621      	mov	r1, r4
 800c7e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7ec:	3b30      	subs	r3, #48	; 0x30
 800c7ee:	2b09      	cmp	r3, #9
 800c7f0:	d94e      	bls.n	800c890 <_vfiprintf_r+0x1c4>
 800c7f2:	b1b0      	cbz	r0, 800c822 <_vfiprintf_r+0x156>
 800c7f4:	9207      	str	r2, [sp, #28]
 800c7f6:	e014      	b.n	800c822 <_vfiprintf_r+0x156>
 800c7f8:	eba0 0308 	sub.w	r3, r0, r8
 800c7fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c800:	4313      	orrs	r3, r2
 800c802:	9304      	str	r3, [sp, #16]
 800c804:	46a2      	mov	sl, r4
 800c806:	e7d2      	b.n	800c7ae <_vfiprintf_r+0xe2>
 800c808:	9b03      	ldr	r3, [sp, #12]
 800c80a:	1d19      	adds	r1, r3, #4
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	9103      	str	r1, [sp, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	bfbb      	ittet	lt
 800c814:	425b      	neglt	r3, r3
 800c816:	f042 0202 	orrlt.w	r2, r2, #2
 800c81a:	9307      	strge	r3, [sp, #28]
 800c81c:	9307      	strlt	r3, [sp, #28]
 800c81e:	bfb8      	it	lt
 800c820:	9204      	strlt	r2, [sp, #16]
 800c822:	7823      	ldrb	r3, [r4, #0]
 800c824:	2b2e      	cmp	r3, #46	; 0x2e
 800c826:	d10c      	bne.n	800c842 <_vfiprintf_r+0x176>
 800c828:	7863      	ldrb	r3, [r4, #1]
 800c82a:	2b2a      	cmp	r3, #42	; 0x2a
 800c82c:	d135      	bne.n	800c89a <_vfiprintf_r+0x1ce>
 800c82e:	9b03      	ldr	r3, [sp, #12]
 800c830:	1d1a      	adds	r2, r3, #4
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	9203      	str	r2, [sp, #12]
 800c836:	2b00      	cmp	r3, #0
 800c838:	bfb8      	it	lt
 800c83a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c83e:	3402      	adds	r4, #2
 800c840:	9305      	str	r3, [sp, #20]
 800c842:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c928 <_vfiprintf_r+0x25c>
 800c846:	7821      	ldrb	r1, [r4, #0]
 800c848:	2203      	movs	r2, #3
 800c84a:	4650      	mov	r0, sl
 800c84c:	f7f3 fcd0 	bl	80001f0 <memchr>
 800c850:	b140      	cbz	r0, 800c864 <_vfiprintf_r+0x198>
 800c852:	2340      	movs	r3, #64	; 0x40
 800c854:	eba0 000a 	sub.w	r0, r0, sl
 800c858:	fa03 f000 	lsl.w	r0, r3, r0
 800c85c:	9b04      	ldr	r3, [sp, #16]
 800c85e:	4303      	orrs	r3, r0
 800c860:	3401      	adds	r4, #1
 800c862:	9304      	str	r3, [sp, #16]
 800c864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c868:	482c      	ldr	r0, [pc, #176]	; (800c91c <_vfiprintf_r+0x250>)
 800c86a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c86e:	2206      	movs	r2, #6
 800c870:	f7f3 fcbe 	bl	80001f0 <memchr>
 800c874:	2800      	cmp	r0, #0
 800c876:	d03f      	beq.n	800c8f8 <_vfiprintf_r+0x22c>
 800c878:	4b29      	ldr	r3, [pc, #164]	; (800c920 <_vfiprintf_r+0x254>)
 800c87a:	bb1b      	cbnz	r3, 800c8c4 <_vfiprintf_r+0x1f8>
 800c87c:	9b03      	ldr	r3, [sp, #12]
 800c87e:	3307      	adds	r3, #7
 800c880:	f023 0307 	bic.w	r3, r3, #7
 800c884:	3308      	adds	r3, #8
 800c886:	9303      	str	r3, [sp, #12]
 800c888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c88a:	443b      	add	r3, r7
 800c88c:	9309      	str	r3, [sp, #36]	; 0x24
 800c88e:	e767      	b.n	800c760 <_vfiprintf_r+0x94>
 800c890:	fb0c 3202 	mla	r2, ip, r2, r3
 800c894:	460c      	mov	r4, r1
 800c896:	2001      	movs	r0, #1
 800c898:	e7a5      	b.n	800c7e6 <_vfiprintf_r+0x11a>
 800c89a:	2300      	movs	r3, #0
 800c89c:	3401      	adds	r4, #1
 800c89e:	9305      	str	r3, [sp, #20]
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	f04f 0c0a 	mov.w	ip, #10
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8ac:	3a30      	subs	r2, #48	; 0x30
 800c8ae:	2a09      	cmp	r2, #9
 800c8b0:	d903      	bls.n	800c8ba <_vfiprintf_r+0x1ee>
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d0c5      	beq.n	800c842 <_vfiprintf_r+0x176>
 800c8b6:	9105      	str	r1, [sp, #20]
 800c8b8:	e7c3      	b.n	800c842 <_vfiprintf_r+0x176>
 800c8ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8be:	4604      	mov	r4, r0
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	e7f0      	b.n	800c8a6 <_vfiprintf_r+0x1da>
 800c8c4:	ab03      	add	r3, sp, #12
 800c8c6:	9300      	str	r3, [sp, #0]
 800c8c8:	462a      	mov	r2, r5
 800c8ca:	4b16      	ldr	r3, [pc, #88]	; (800c924 <_vfiprintf_r+0x258>)
 800c8cc:	a904      	add	r1, sp, #16
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f7fd ffb4 	bl	800a83c <_printf_float>
 800c8d4:	4607      	mov	r7, r0
 800c8d6:	1c78      	adds	r0, r7, #1
 800c8d8:	d1d6      	bne.n	800c888 <_vfiprintf_r+0x1bc>
 800c8da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8dc:	07d9      	lsls	r1, r3, #31
 800c8de:	d405      	bmi.n	800c8ec <_vfiprintf_r+0x220>
 800c8e0:	89ab      	ldrh	r3, [r5, #12]
 800c8e2:	059a      	lsls	r2, r3, #22
 800c8e4:	d402      	bmi.n	800c8ec <_vfiprintf_r+0x220>
 800c8e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8e8:	f7ff fb10 	bl	800bf0c <__retarget_lock_release_recursive>
 800c8ec:	89ab      	ldrh	r3, [r5, #12]
 800c8ee:	065b      	lsls	r3, r3, #25
 800c8f0:	f53f af12 	bmi.w	800c718 <_vfiprintf_r+0x4c>
 800c8f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8f6:	e711      	b.n	800c71c <_vfiprintf_r+0x50>
 800c8f8:	ab03      	add	r3, sp, #12
 800c8fa:	9300      	str	r3, [sp, #0]
 800c8fc:	462a      	mov	r2, r5
 800c8fe:	4b09      	ldr	r3, [pc, #36]	; (800c924 <_vfiprintf_r+0x258>)
 800c900:	a904      	add	r1, sp, #16
 800c902:	4630      	mov	r0, r6
 800c904:	f7fe fa3e 	bl	800ad84 <_printf_i>
 800c908:	e7e4      	b.n	800c8d4 <_vfiprintf_r+0x208>
 800c90a:	bf00      	nop
 800c90c:	0800d13c 	.word	0x0800d13c
 800c910:	0800d15c 	.word	0x0800d15c
 800c914:	0800d11c 	.word	0x0800d11c
 800c918:	0800d2d4 	.word	0x0800d2d4
 800c91c:	0800d2de 	.word	0x0800d2de
 800c920:	0800a83d 	.word	0x0800a83d
 800c924:	0800c6a7 	.word	0x0800c6a7
 800c928:	0800d2da 	.word	0x0800d2da

0800c92c <__sread>:
 800c92c:	b510      	push	{r4, lr}
 800c92e:	460c      	mov	r4, r1
 800c930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c934:	f000 fa9c 	bl	800ce70 <_read_r>
 800c938:	2800      	cmp	r0, #0
 800c93a:	bfab      	itete	ge
 800c93c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c93e:	89a3      	ldrhlt	r3, [r4, #12]
 800c940:	181b      	addge	r3, r3, r0
 800c942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c946:	bfac      	ite	ge
 800c948:	6563      	strge	r3, [r4, #84]	; 0x54
 800c94a:	81a3      	strhlt	r3, [r4, #12]
 800c94c:	bd10      	pop	{r4, pc}

0800c94e <__swrite>:
 800c94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c952:	461f      	mov	r7, r3
 800c954:	898b      	ldrh	r3, [r1, #12]
 800c956:	05db      	lsls	r3, r3, #23
 800c958:	4605      	mov	r5, r0
 800c95a:	460c      	mov	r4, r1
 800c95c:	4616      	mov	r6, r2
 800c95e:	d505      	bpl.n	800c96c <__swrite+0x1e>
 800c960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c964:	2302      	movs	r3, #2
 800c966:	2200      	movs	r2, #0
 800c968:	f000 f9f8 	bl	800cd5c <_lseek_r>
 800c96c:	89a3      	ldrh	r3, [r4, #12]
 800c96e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c976:	81a3      	strh	r3, [r4, #12]
 800c978:	4632      	mov	r2, r6
 800c97a:	463b      	mov	r3, r7
 800c97c:	4628      	mov	r0, r5
 800c97e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c982:	f000 b869 	b.w	800ca58 <_write_r>

0800c986 <__sseek>:
 800c986:	b510      	push	{r4, lr}
 800c988:	460c      	mov	r4, r1
 800c98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c98e:	f000 f9e5 	bl	800cd5c <_lseek_r>
 800c992:	1c43      	adds	r3, r0, #1
 800c994:	89a3      	ldrh	r3, [r4, #12]
 800c996:	bf15      	itete	ne
 800c998:	6560      	strne	r0, [r4, #84]	; 0x54
 800c99a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c99e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c9a2:	81a3      	strheq	r3, [r4, #12]
 800c9a4:	bf18      	it	ne
 800c9a6:	81a3      	strhne	r3, [r4, #12]
 800c9a8:	bd10      	pop	{r4, pc}

0800c9aa <__sclose>:
 800c9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ae:	f000 b8f1 	b.w	800cb94 <_close_r>
	...

0800c9b4 <__swbuf_r>:
 800c9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9b6:	460e      	mov	r6, r1
 800c9b8:	4614      	mov	r4, r2
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	b118      	cbz	r0, 800c9c6 <__swbuf_r+0x12>
 800c9be:	6983      	ldr	r3, [r0, #24]
 800c9c0:	b90b      	cbnz	r3, 800c9c6 <__swbuf_r+0x12>
 800c9c2:	f7ff f9ff 	bl	800bdc4 <__sinit>
 800c9c6:	4b21      	ldr	r3, [pc, #132]	; (800ca4c <__swbuf_r+0x98>)
 800c9c8:	429c      	cmp	r4, r3
 800c9ca:	d12b      	bne.n	800ca24 <__swbuf_r+0x70>
 800c9cc:	686c      	ldr	r4, [r5, #4]
 800c9ce:	69a3      	ldr	r3, [r4, #24]
 800c9d0:	60a3      	str	r3, [r4, #8]
 800c9d2:	89a3      	ldrh	r3, [r4, #12]
 800c9d4:	071a      	lsls	r2, r3, #28
 800c9d6:	d52f      	bpl.n	800ca38 <__swbuf_r+0x84>
 800c9d8:	6923      	ldr	r3, [r4, #16]
 800c9da:	b36b      	cbz	r3, 800ca38 <__swbuf_r+0x84>
 800c9dc:	6923      	ldr	r3, [r4, #16]
 800c9de:	6820      	ldr	r0, [r4, #0]
 800c9e0:	1ac0      	subs	r0, r0, r3
 800c9e2:	6963      	ldr	r3, [r4, #20]
 800c9e4:	b2f6      	uxtb	r6, r6
 800c9e6:	4283      	cmp	r3, r0
 800c9e8:	4637      	mov	r7, r6
 800c9ea:	dc04      	bgt.n	800c9f6 <__swbuf_r+0x42>
 800c9ec:	4621      	mov	r1, r4
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	f000 f966 	bl	800ccc0 <_fflush_r>
 800c9f4:	bb30      	cbnz	r0, 800ca44 <__swbuf_r+0x90>
 800c9f6:	68a3      	ldr	r3, [r4, #8]
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	60a3      	str	r3, [r4, #8]
 800c9fc:	6823      	ldr	r3, [r4, #0]
 800c9fe:	1c5a      	adds	r2, r3, #1
 800ca00:	6022      	str	r2, [r4, #0]
 800ca02:	701e      	strb	r6, [r3, #0]
 800ca04:	6963      	ldr	r3, [r4, #20]
 800ca06:	3001      	adds	r0, #1
 800ca08:	4283      	cmp	r3, r0
 800ca0a:	d004      	beq.n	800ca16 <__swbuf_r+0x62>
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	07db      	lsls	r3, r3, #31
 800ca10:	d506      	bpl.n	800ca20 <__swbuf_r+0x6c>
 800ca12:	2e0a      	cmp	r6, #10
 800ca14:	d104      	bne.n	800ca20 <__swbuf_r+0x6c>
 800ca16:	4621      	mov	r1, r4
 800ca18:	4628      	mov	r0, r5
 800ca1a:	f000 f951 	bl	800ccc0 <_fflush_r>
 800ca1e:	b988      	cbnz	r0, 800ca44 <__swbuf_r+0x90>
 800ca20:	4638      	mov	r0, r7
 800ca22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca24:	4b0a      	ldr	r3, [pc, #40]	; (800ca50 <__swbuf_r+0x9c>)
 800ca26:	429c      	cmp	r4, r3
 800ca28:	d101      	bne.n	800ca2e <__swbuf_r+0x7a>
 800ca2a:	68ac      	ldr	r4, [r5, #8]
 800ca2c:	e7cf      	b.n	800c9ce <__swbuf_r+0x1a>
 800ca2e:	4b09      	ldr	r3, [pc, #36]	; (800ca54 <__swbuf_r+0xa0>)
 800ca30:	429c      	cmp	r4, r3
 800ca32:	bf08      	it	eq
 800ca34:	68ec      	ldreq	r4, [r5, #12]
 800ca36:	e7ca      	b.n	800c9ce <__swbuf_r+0x1a>
 800ca38:	4621      	mov	r1, r4
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	f000 f81e 	bl	800ca7c <__swsetup_r>
 800ca40:	2800      	cmp	r0, #0
 800ca42:	d0cb      	beq.n	800c9dc <__swbuf_r+0x28>
 800ca44:	f04f 37ff 	mov.w	r7, #4294967295
 800ca48:	e7ea      	b.n	800ca20 <__swbuf_r+0x6c>
 800ca4a:	bf00      	nop
 800ca4c:	0800d13c 	.word	0x0800d13c
 800ca50:	0800d15c 	.word	0x0800d15c
 800ca54:	0800d11c 	.word	0x0800d11c

0800ca58 <_write_r>:
 800ca58:	b538      	push	{r3, r4, r5, lr}
 800ca5a:	4d07      	ldr	r5, [pc, #28]	; (800ca78 <_write_r+0x20>)
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	4608      	mov	r0, r1
 800ca60:	4611      	mov	r1, r2
 800ca62:	2200      	movs	r2, #0
 800ca64:	602a      	str	r2, [r5, #0]
 800ca66:	461a      	mov	r2, r3
 800ca68:	f7f4 ff53 	bl	8001912 <_write>
 800ca6c:	1c43      	adds	r3, r0, #1
 800ca6e:	d102      	bne.n	800ca76 <_write_r+0x1e>
 800ca70:	682b      	ldr	r3, [r5, #0]
 800ca72:	b103      	cbz	r3, 800ca76 <_write_r+0x1e>
 800ca74:	6023      	str	r3, [r4, #0]
 800ca76:	bd38      	pop	{r3, r4, r5, pc}
 800ca78:	20000240 	.word	0x20000240

0800ca7c <__swsetup_r>:
 800ca7c:	4b32      	ldr	r3, [pc, #200]	; (800cb48 <__swsetup_r+0xcc>)
 800ca7e:	b570      	push	{r4, r5, r6, lr}
 800ca80:	681d      	ldr	r5, [r3, #0]
 800ca82:	4606      	mov	r6, r0
 800ca84:	460c      	mov	r4, r1
 800ca86:	b125      	cbz	r5, 800ca92 <__swsetup_r+0x16>
 800ca88:	69ab      	ldr	r3, [r5, #24]
 800ca8a:	b913      	cbnz	r3, 800ca92 <__swsetup_r+0x16>
 800ca8c:	4628      	mov	r0, r5
 800ca8e:	f7ff f999 	bl	800bdc4 <__sinit>
 800ca92:	4b2e      	ldr	r3, [pc, #184]	; (800cb4c <__swsetup_r+0xd0>)
 800ca94:	429c      	cmp	r4, r3
 800ca96:	d10f      	bne.n	800cab8 <__swsetup_r+0x3c>
 800ca98:	686c      	ldr	r4, [r5, #4]
 800ca9a:	89a3      	ldrh	r3, [r4, #12]
 800ca9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800caa0:	0719      	lsls	r1, r3, #28
 800caa2:	d42c      	bmi.n	800cafe <__swsetup_r+0x82>
 800caa4:	06dd      	lsls	r5, r3, #27
 800caa6:	d411      	bmi.n	800cacc <__swsetup_r+0x50>
 800caa8:	2309      	movs	r3, #9
 800caaa:	6033      	str	r3, [r6, #0]
 800caac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cab0:	81a3      	strh	r3, [r4, #12]
 800cab2:	f04f 30ff 	mov.w	r0, #4294967295
 800cab6:	e03e      	b.n	800cb36 <__swsetup_r+0xba>
 800cab8:	4b25      	ldr	r3, [pc, #148]	; (800cb50 <__swsetup_r+0xd4>)
 800caba:	429c      	cmp	r4, r3
 800cabc:	d101      	bne.n	800cac2 <__swsetup_r+0x46>
 800cabe:	68ac      	ldr	r4, [r5, #8]
 800cac0:	e7eb      	b.n	800ca9a <__swsetup_r+0x1e>
 800cac2:	4b24      	ldr	r3, [pc, #144]	; (800cb54 <__swsetup_r+0xd8>)
 800cac4:	429c      	cmp	r4, r3
 800cac6:	bf08      	it	eq
 800cac8:	68ec      	ldreq	r4, [r5, #12]
 800caca:	e7e6      	b.n	800ca9a <__swsetup_r+0x1e>
 800cacc:	0758      	lsls	r0, r3, #29
 800cace:	d512      	bpl.n	800caf6 <__swsetup_r+0x7a>
 800cad0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cad2:	b141      	cbz	r1, 800cae6 <__swsetup_r+0x6a>
 800cad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cad8:	4299      	cmp	r1, r3
 800cada:	d002      	beq.n	800cae2 <__swsetup_r+0x66>
 800cadc:	4630      	mov	r0, r6
 800cade:	f7fd fd2d 	bl	800a53c <_free_r>
 800cae2:	2300      	movs	r3, #0
 800cae4:	6363      	str	r3, [r4, #52]	; 0x34
 800cae6:	89a3      	ldrh	r3, [r4, #12]
 800cae8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800caec:	81a3      	strh	r3, [r4, #12]
 800caee:	2300      	movs	r3, #0
 800caf0:	6063      	str	r3, [r4, #4]
 800caf2:	6923      	ldr	r3, [r4, #16]
 800caf4:	6023      	str	r3, [r4, #0]
 800caf6:	89a3      	ldrh	r3, [r4, #12]
 800caf8:	f043 0308 	orr.w	r3, r3, #8
 800cafc:	81a3      	strh	r3, [r4, #12]
 800cafe:	6923      	ldr	r3, [r4, #16]
 800cb00:	b94b      	cbnz	r3, 800cb16 <__swsetup_r+0x9a>
 800cb02:	89a3      	ldrh	r3, [r4, #12]
 800cb04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb0c:	d003      	beq.n	800cb16 <__swsetup_r+0x9a>
 800cb0e:	4621      	mov	r1, r4
 800cb10:	4630      	mov	r0, r6
 800cb12:	f000 f95b 	bl	800cdcc <__smakebuf_r>
 800cb16:	89a0      	ldrh	r0, [r4, #12]
 800cb18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb1c:	f010 0301 	ands.w	r3, r0, #1
 800cb20:	d00a      	beq.n	800cb38 <__swsetup_r+0xbc>
 800cb22:	2300      	movs	r3, #0
 800cb24:	60a3      	str	r3, [r4, #8]
 800cb26:	6963      	ldr	r3, [r4, #20]
 800cb28:	425b      	negs	r3, r3
 800cb2a:	61a3      	str	r3, [r4, #24]
 800cb2c:	6923      	ldr	r3, [r4, #16]
 800cb2e:	b943      	cbnz	r3, 800cb42 <__swsetup_r+0xc6>
 800cb30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb34:	d1ba      	bne.n	800caac <__swsetup_r+0x30>
 800cb36:	bd70      	pop	{r4, r5, r6, pc}
 800cb38:	0781      	lsls	r1, r0, #30
 800cb3a:	bf58      	it	pl
 800cb3c:	6963      	ldrpl	r3, [r4, #20]
 800cb3e:	60a3      	str	r3, [r4, #8]
 800cb40:	e7f4      	b.n	800cb2c <__swsetup_r+0xb0>
 800cb42:	2000      	movs	r0, #0
 800cb44:	e7f7      	b.n	800cb36 <__swsetup_r+0xba>
 800cb46:	bf00      	nop
 800cb48:	20000034 	.word	0x20000034
 800cb4c:	0800d13c 	.word	0x0800d13c
 800cb50:	0800d15c 	.word	0x0800d15c
 800cb54:	0800d11c 	.word	0x0800d11c

0800cb58 <__assert_func>:
 800cb58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb5a:	4614      	mov	r4, r2
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	4b09      	ldr	r3, [pc, #36]	; (800cb84 <__assert_func+0x2c>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4605      	mov	r5, r0
 800cb64:	68d8      	ldr	r0, [r3, #12]
 800cb66:	b14c      	cbz	r4, 800cb7c <__assert_func+0x24>
 800cb68:	4b07      	ldr	r3, [pc, #28]	; (800cb88 <__assert_func+0x30>)
 800cb6a:	9100      	str	r1, [sp, #0]
 800cb6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb70:	4906      	ldr	r1, [pc, #24]	; (800cb8c <__assert_func+0x34>)
 800cb72:	462b      	mov	r3, r5
 800cb74:	f000 f8e0 	bl	800cd38 <fiprintf>
 800cb78:	f000 f999 	bl	800ceae <abort>
 800cb7c:	4b04      	ldr	r3, [pc, #16]	; (800cb90 <__assert_func+0x38>)
 800cb7e:	461c      	mov	r4, r3
 800cb80:	e7f3      	b.n	800cb6a <__assert_func+0x12>
 800cb82:	bf00      	nop
 800cb84:	20000034 	.word	0x20000034
 800cb88:	0800d2e5 	.word	0x0800d2e5
 800cb8c:	0800d2f2 	.word	0x0800d2f2
 800cb90:	0800d320 	.word	0x0800d320

0800cb94 <_close_r>:
 800cb94:	b538      	push	{r3, r4, r5, lr}
 800cb96:	4d06      	ldr	r5, [pc, #24]	; (800cbb0 <_close_r+0x1c>)
 800cb98:	2300      	movs	r3, #0
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	4608      	mov	r0, r1
 800cb9e:	602b      	str	r3, [r5, #0]
 800cba0:	f7f5 fd83 	bl	80026aa <_close>
 800cba4:	1c43      	adds	r3, r0, #1
 800cba6:	d102      	bne.n	800cbae <_close_r+0x1a>
 800cba8:	682b      	ldr	r3, [r5, #0]
 800cbaa:	b103      	cbz	r3, 800cbae <_close_r+0x1a>
 800cbac:	6023      	str	r3, [r4, #0]
 800cbae:	bd38      	pop	{r3, r4, r5, pc}
 800cbb0:	20000240 	.word	0x20000240

0800cbb4 <__sflush_r>:
 800cbb4:	898a      	ldrh	r2, [r1, #12]
 800cbb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbba:	4605      	mov	r5, r0
 800cbbc:	0710      	lsls	r0, r2, #28
 800cbbe:	460c      	mov	r4, r1
 800cbc0:	d458      	bmi.n	800cc74 <__sflush_r+0xc0>
 800cbc2:	684b      	ldr	r3, [r1, #4]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	dc05      	bgt.n	800cbd4 <__sflush_r+0x20>
 800cbc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	dc02      	bgt.n	800cbd4 <__sflush_r+0x20>
 800cbce:	2000      	movs	r0, #0
 800cbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbd6:	2e00      	cmp	r6, #0
 800cbd8:	d0f9      	beq.n	800cbce <__sflush_r+0x1a>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cbe0:	682f      	ldr	r7, [r5, #0]
 800cbe2:	602b      	str	r3, [r5, #0]
 800cbe4:	d032      	beq.n	800cc4c <__sflush_r+0x98>
 800cbe6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cbe8:	89a3      	ldrh	r3, [r4, #12]
 800cbea:	075a      	lsls	r2, r3, #29
 800cbec:	d505      	bpl.n	800cbfa <__sflush_r+0x46>
 800cbee:	6863      	ldr	r3, [r4, #4]
 800cbf0:	1ac0      	subs	r0, r0, r3
 800cbf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cbf4:	b10b      	cbz	r3, 800cbfa <__sflush_r+0x46>
 800cbf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cbf8:	1ac0      	subs	r0, r0, r3
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc00:	6a21      	ldr	r1, [r4, #32]
 800cc02:	4628      	mov	r0, r5
 800cc04:	47b0      	blx	r6
 800cc06:	1c43      	adds	r3, r0, #1
 800cc08:	89a3      	ldrh	r3, [r4, #12]
 800cc0a:	d106      	bne.n	800cc1a <__sflush_r+0x66>
 800cc0c:	6829      	ldr	r1, [r5, #0]
 800cc0e:	291d      	cmp	r1, #29
 800cc10:	d82c      	bhi.n	800cc6c <__sflush_r+0xb8>
 800cc12:	4a2a      	ldr	r2, [pc, #168]	; (800ccbc <__sflush_r+0x108>)
 800cc14:	40ca      	lsrs	r2, r1
 800cc16:	07d6      	lsls	r6, r2, #31
 800cc18:	d528      	bpl.n	800cc6c <__sflush_r+0xb8>
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	6062      	str	r2, [r4, #4]
 800cc1e:	04d9      	lsls	r1, r3, #19
 800cc20:	6922      	ldr	r2, [r4, #16]
 800cc22:	6022      	str	r2, [r4, #0]
 800cc24:	d504      	bpl.n	800cc30 <__sflush_r+0x7c>
 800cc26:	1c42      	adds	r2, r0, #1
 800cc28:	d101      	bne.n	800cc2e <__sflush_r+0x7a>
 800cc2a:	682b      	ldr	r3, [r5, #0]
 800cc2c:	b903      	cbnz	r3, 800cc30 <__sflush_r+0x7c>
 800cc2e:	6560      	str	r0, [r4, #84]	; 0x54
 800cc30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc32:	602f      	str	r7, [r5, #0]
 800cc34:	2900      	cmp	r1, #0
 800cc36:	d0ca      	beq.n	800cbce <__sflush_r+0x1a>
 800cc38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc3c:	4299      	cmp	r1, r3
 800cc3e:	d002      	beq.n	800cc46 <__sflush_r+0x92>
 800cc40:	4628      	mov	r0, r5
 800cc42:	f7fd fc7b 	bl	800a53c <_free_r>
 800cc46:	2000      	movs	r0, #0
 800cc48:	6360      	str	r0, [r4, #52]	; 0x34
 800cc4a:	e7c1      	b.n	800cbd0 <__sflush_r+0x1c>
 800cc4c:	6a21      	ldr	r1, [r4, #32]
 800cc4e:	2301      	movs	r3, #1
 800cc50:	4628      	mov	r0, r5
 800cc52:	47b0      	blx	r6
 800cc54:	1c41      	adds	r1, r0, #1
 800cc56:	d1c7      	bne.n	800cbe8 <__sflush_r+0x34>
 800cc58:	682b      	ldr	r3, [r5, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d0c4      	beq.n	800cbe8 <__sflush_r+0x34>
 800cc5e:	2b1d      	cmp	r3, #29
 800cc60:	d001      	beq.n	800cc66 <__sflush_r+0xb2>
 800cc62:	2b16      	cmp	r3, #22
 800cc64:	d101      	bne.n	800cc6a <__sflush_r+0xb6>
 800cc66:	602f      	str	r7, [r5, #0]
 800cc68:	e7b1      	b.n	800cbce <__sflush_r+0x1a>
 800cc6a:	89a3      	ldrh	r3, [r4, #12]
 800cc6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc70:	81a3      	strh	r3, [r4, #12]
 800cc72:	e7ad      	b.n	800cbd0 <__sflush_r+0x1c>
 800cc74:	690f      	ldr	r7, [r1, #16]
 800cc76:	2f00      	cmp	r7, #0
 800cc78:	d0a9      	beq.n	800cbce <__sflush_r+0x1a>
 800cc7a:	0793      	lsls	r3, r2, #30
 800cc7c:	680e      	ldr	r6, [r1, #0]
 800cc7e:	bf08      	it	eq
 800cc80:	694b      	ldreq	r3, [r1, #20]
 800cc82:	600f      	str	r7, [r1, #0]
 800cc84:	bf18      	it	ne
 800cc86:	2300      	movne	r3, #0
 800cc88:	eba6 0807 	sub.w	r8, r6, r7
 800cc8c:	608b      	str	r3, [r1, #8]
 800cc8e:	f1b8 0f00 	cmp.w	r8, #0
 800cc92:	dd9c      	ble.n	800cbce <__sflush_r+0x1a>
 800cc94:	6a21      	ldr	r1, [r4, #32]
 800cc96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc98:	4643      	mov	r3, r8
 800cc9a:	463a      	mov	r2, r7
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	47b0      	blx	r6
 800cca0:	2800      	cmp	r0, #0
 800cca2:	dc06      	bgt.n	800ccb2 <__sflush_r+0xfe>
 800cca4:	89a3      	ldrh	r3, [r4, #12]
 800cca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccaa:	81a3      	strh	r3, [r4, #12]
 800ccac:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb0:	e78e      	b.n	800cbd0 <__sflush_r+0x1c>
 800ccb2:	4407      	add	r7, r0
 800ccb4:	eba8 0800 	sub.w	r8, r8, r0
 800ccb8:	e7e9      	b.n	800cc8e <__sflush_r+0xda>
 800ccba:	bf00      	nop
 800ccbc:	20400001 	.word	0x20400001

0800ccc0 <_fflush_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	690b      	ldr	r3, [r1, #16]
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	460c      	mov	r4, r1
 800ccc8:	b913      	cbnz	r3, 800ccd0 <_fflush_r+0x10>
 800ccca:	2500      	movs	r5, #0
 800cccc:	4628      	mov	r0, r5
 800ccce:	bd38      	pop	{r3, r4, r5, pc}
 800ccd0:	b118      	cbz	r0, 800ccda <_fflush_r+0x1a>
 800ccd2:	6983      	ldr	r3, [r0, #24]
 800ccd4:	b90b      	cbnz	r3, 800ccda <_fflush_r+0x1a>
 800ccd6:	f7ff f875 	bl	800bdc4 <__sinit>
 800ccda:	4b14      	ldr	r3, [pc, #80]	; (800cd2c <_fflush_r+0x6c>)
 800ccdc:	429c      	cmp	r4, r3
 800ccde:	d11b      	bne.n	800cd18 <_fflush_r+0x58>
 800cce0:	686c      	ldr	r4, [r5, #4]
 800cce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d0ef      	beq.n	800ccca <_fflush_r+0xa>
 800ccea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ccec:	07d0      	lsls	r0, r2, #31
 800ccee:	d404      	bmi.n	800ccfa <_fflush_r+0x3a>
 800ccf0:	0599      	lsls	r1, r3, #22
 800ccf2:	d402      	bmi.n	800ccfa <_fflush_r+0x3a>
 800ccf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccf6:	f7ff f908 	bl	800bf0a <__retarget_lock_acquire_recursive>
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	4621      	mov	r1, r4
 800ccfe:	f7ff ff59 	bl	800cbb4 <__sflush_r>
 800cd02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd04:	07da      	lsls	r2, r3, #31
 800cd06:	4605      	mov	r5, r0
 800cd08:	d4e0      	bmi.n	800cccc <_fflush_r+0xc>
 800cd0a:	89a3      	ldrh	r3, [r4, #12]
 800cd0c:	059b      	lsls	r3, r3, #22
 800cd0e:	d4dd      	bmi.n	800cccc <_fflush_r+0xc>
 800cd10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd12:	f7ff f8fb 	bl	800bf0c <__retarget_lock_release_recursive>
 800cd16:	e7d9      	b.n	800cccc <_fflush_r+0xc>
 800cd18:	4b05      	ldr	r3, [pc, #20]	; (800cd30 <_fflush_r+0x70>)
 800cd1a:	429c      	cmp	r4, r3
 800cd1c:	d101      	bne.n	800cd22 <_fflush_r+0x62>
 800cd1e:	68ac      	ldr	r4, [r5, #8]
 800cd20:	e7df      	b.n	800cce2 <_fflush_r+0x22>
 800cd22:	4b04      	ldr	r3, [pc, #16]	; (800cd34 <_fflush_r+0x74>)
 800cd24:	429c      	cmp	r4, r3
 800cd26:	bf08      	it	eq
 800cd28:	68ec      	ldreq	r4, [r5, #12]
 800cd2a:	e7da      	b.n	800cce2 <_fflush_r+0x22>
 800cd2c:	0800d13c 	.word	0x0800d13c
 800cd30:	0800d15c 	.word	0x0800d15c
 800cd34:	0800d11c 	.word	0x0800d11c

0800cd38 <fiprintf>:
 800cd38:	b40e      	push	{r1, r2, r3}
 800cd3a:	b503      	push	{r0, r1, lr}
 800cd3c:	4601      	mov	r1, r0
 800cd3e:	ab03      	add	r3, sp, #12
 800cd40:	4805      	ldr	r0, [pc, #20]	; (800cd58 <fiprintf+0x20>)
 800cd42:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd46:	6800      	ldr	r0, [r0, #0]
 800cd48:	9301      	str	r3, [sp, #4]
 800cd4a:	f7ff fcbf 	bl	800c6cc <_vfiprintf_r>
 800cd4e:	b002      	add	sp, #8
 800cd50:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd54:	b003      	add	sp, #12
 800cd56:	4770      	bx	lr
 800cd58:	20000034 	.word	0x20000034

0800cd5c <_lseek_r>:
 800cd5c:	b538      	push	{r3, r4, r5, lr}
 800cd5e:	4d07      	ldr	r5, [pc, #28]	; (800cd7c <_lseek_r+0x20>)
 800cd60:	4604      	mov	r4, r0
 800cd62:	4608      	mov	r0, r1
 800cd64:	4611      	mov	r1, r2
 800cd66:	2200      	movs	r2, #0
 800cd68:	602a      	str	r2, [r5, #0]
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	f7f5 fcc4 	bl	80026f8 <_lseek>
 800cd70:	1c43      	adds	r3, r0, #1
 800cd72:	d102      	bne.n	800cd7a <_lseek_r+0x1e>
 800cd74:	682b      	ldr	r3, [r5, #0]
 800cd76:	b103      	cbz	r3, 800cd7a <_lseek_r+0x1e>
 800cd78:	6023      	str	r3, [r4, #0]
 800cd7a:	bd38      	pop	{r3, r4, r5, pc}
 800cd7c:	20000240 	.word	0x20000240

0800cd80 <__swhatbuf_r>:
 800cd80:	b570      	push	{r4, r5, r6, lr}
 800cd82:	460e      	mov	r6, r1
 800cd84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd88:	2900      	cmp	r1, #0
 800cd8a:	b096      	sub	sp, #88	; 0x58
 800cd8c:	4614      	mov	r4, r2
 800cd8e:	461d      	mov	r5, r3
 800cd90:	da08      	bge.n	800cda4 <__swhatbuf_r+0x24>
 800cd92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd96:	2200      	movs	r2, #0
 800cd98:	602a      	str	r2, [r5, #0]
 800cd9a:	061a      	lsls	r2, r3, #24
 800cd9c:	d410      	bmi.n	800cdc0 <__swhatbuf_r+0x40>
 800cd9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cda2:	e00e      	b.n	800cdc2 <__swhatbuf_r+0x42>
 800cda4:	466a      	mov	r2, sp
 800cda6:	f000 f889 	bl	800cebc <_fstat_r>
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	dbf1      	blt.n	800cd92 <__swhatbuf_r+0x12>
 800cdae:	9a01      	ldr	r2, [sp, #4]
 800cdb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cdb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cdb8:	425a      	negs	r2, r3
 800cdba:	415a      	adcs	r2, r3
 800cdbc:	602a      	str	r2, [r5, #0]
 800cdbe:	e7ee      	b.n	800cd9e <__swhatbuf_r+0x1e>
 800cdc0:	2340      	movs	r3, #64	; 0x40
 800cdc2:	2000      	movs	r0, #0
 800cdc4:	6023      	str	r3, [r4, #0]
 800cdc6:	b016      	add	sp, #88	; 0x58
 800cdc8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cdcc <__smakebuf_r>:
 800cdcc:	898b      	ldrh	r3, [r1, #12]
 800cdce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdd0:	079d      	lsls	r5, r3, #30
 800cdd2:	4606      	mov	r6, r0
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	d507      	bpl.n	800cde8 <__smakebuf_r+0x1c>
 800cdd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cddc:	6023      	str	r3, [r4, #0]
 800cdde:	6123      	str	r3, [r4, #16]
 800cde0:	2301      	movs	r3, #1
 800cde2:	6163      	str	r3, [r4, #20]
 800cde4:	b002      	add	sp, #8
 800cde6:	bd70      	pop	{r4, r5, r6, pc}
 800cde8:	ab01      	add	r3, sp, #4
 800cdea:	466a      	mov	r2, sp
 800cdec:	f7ff ffc8 	bl	800cd80 <__swhatbuf_r>
 800cdf0:	9900      	ldr	r1, [sp, #0]
 800cdf2:	4605      	mov	r5, r0
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	f7fd fc0d 	bl	800a614 <_malloc_r>
 800cdfa:	b948      	cbnz	r0, 800ce10 <__smakebuf_r+0x44>
 800cdfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce00:	059a      	lsls	r2, r3, #22
 800ce02:	d4ef      	bmi.n	800cde4 <__smakebuf_r+0x18>
 800ce04:	f023 0303 	bic.w	r3, r3, #3
 800ce08:	f043 0302 	orr.w	r3, r3, #2
 800ce0c:	81a3      	strh	r3, [r4, #12]
 800ce0e:	e7e3      	b.n	800cdd8 <__smakebuf_r+0xc>
 800ce10:	4b0d      	ldr	r3, [pc, #52]	; (800ce48 <__smakebuf_r+0x7c>)
 800ce12:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce14:	89a3      	ldrh	r3, [r4, #12]
 800ce16:	6020      	str	r0, [r4, #0]
 800ce18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce1c:	81a3      	strh	r3, [r4, #12]
 800ce1e:	9b00      	ldr	r3, [sp, #0]
 800ce20:	6163      	str	r3, [r4, #20]
 800ce22:	9b01      	ldr	r3, [sp, #4]
 800ce24:	6120      	str	r0, [r4, #16]
 800ce26:	b15b      	cbz	r3, 800ce40 <__smakebuf_r+0x74>
 800ce28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce2c:	4630      	mov	r0, r6
 800ce2e:	f000 f857 	bl	800cee0 <_isatty_r>
 800ce32:	b128      	cbz	r0, 800ce40 <__smakebuf_r+0x74>
 800ce34:	89a3      	ldrh	r3, [r4, #12]
 800ce36:	f023 0303 	bic.w	r3, r3, #3
 800ce3a:	f043 0301 	orr.w	r3, r3, #1
 800ce3e:	81a3      	strh	r3, [r4, #12]
 800ce40:	89a0      	ldrh	r0, [r4, #12]
 800ce42:	4305      	orrs	r5, r0
 800ce44:	81a5      	strh	r5, [r4, #12]
 800ce46:	e7cd      	b.n	800cde4 <__smakebuf_r+0x18>
 800ce48:	0800bd5d 	.word	0x0800bd5d

0800ce4c <__ascii_mbtowc>:
 800ce4c:	b082      	sub	sp, #8
 800ce4e:	b901      	cbnz	r1, 800ce52 <__ascii_mbtowc+0x6>
 800ce50:	a901      	add	r1, sp, #4
 800ce52:	b142      	cbz	r2, 800ce66 <__ascii_mbtowc+0x1a>
 800ce54:	b14b      	cbz	r3, 800ce6a <__ascii_mbtowc+0x1e>
 800ce56:	7813      	ldrb	r3, [r2, #0]
 800ce58:	600b      	str	r3, [r1, #0]
 800ce5a:	7812      	ldrb	r2, [r2, #0]
 800ce5c:	1e10      	subs	r0, r2, #0
 800ce5e:	bf18      	it	ne
 800ce60:	2001      	movne	r0, #1
 800ce62:	b002      	add	sp, #8
 800ce64:	4770      	bx	lr
 800ce66:	4610      	mov	r0, r2
 800ce68:	e7fb      	b.n	800ce62 <__ascii_mbtowc+0x16>
 800ce6a:	f06f 0001 	mvn.w	r0, #1
 800ce6e:	e7f8      	b.n	800ce62 <__ascii_mbtowc+0x16>

0800ce70 <_read_r>:
 800ce70:	b538      	push	{r3, r4, r5, lr}
 800ce72:	4d07      	ldr	r5, [pc, #28]	; (800ce90 <_read_r+0x20>)
 800ce74:	4604      	mov	r4, r0
 800ce76:	4608      	mov	r0, r1
 800ce78:	4611      	mov	r1, r2
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	602a      	str	r2, [r5, #0]
 800ce7e:	461a      	mov	r2, r3
 800ce80:	f7f5 fbf6 	bl	8002670 <_read>
 800ce84:	1c43      	adds	r3, r0, #1
 800ce86:	d102      	bne.n	800ce8e <_read_r+0x1e>
 800ce88:	682b      	ldr	r3, [r5, #0]
 800ce8a:	b103      	cbz	r3, 800ce8e <_read_r+0x1e>
 800ce8c:	6023      	str	r3, [r4, #0]
 800ce8e:	bd38      	pop	{r3, r4, r5, pc}
 800ce90:	20000240 	.word	0x20000240

0800ce94 <__ascii_wctomb>:
 800ce94:	b149      	cbz	r1, 800ceaa <__ascii_wctomb+0x16>
 800ce96:	2aff      	cmp	r2, #255	; 0xff
 800ce98:	bf85      	ittet	hi
 800ce9a:	238a      	movhi	r3, #138	; 0x8a
 800ce9c:	6003      	strhi	r3, [r0, #0]
 800ce9e:	700a      	strbls	r2, [r1, #0]
 800cea0:	f04f 30ff 	movhi.w	r0, #4294967295
 800cea4:	bf98      	it	ls
 800cea6:	2001      	movls	r0, #1
 800cea8:	4770      	bx	lr
 800ceaa:	4608      	mov	r0, r1
 800ceac:	4770      	bx	lr

0800ceae <abort>:
 800ceae:	b508      	push	{r3, lr}
 800ceb0:	2006      	movs	r0, #6
 800ceb2:	f000 f84d 	bl	800cf50 <raise>
 800ceb6:	2001      	movs	r0, #1
 800ceb8:	f7f5 fbd0 	bl	800265c <_exit>

0800cebc <_fstat_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	4d07      	ldr	r5, [pc, #28]	; (800cedc <_fstat_r+0x20>)
 800cec0:	2300      	movs	r3, #0
 800cec2:	4604      	mov	r4, r0
 800cec4:	4608      	mov	r0, r1
 800cec6:	4611      	mov	r1, r2
 800cec8:	602b      	str	r3, [r5, #0]
 800ceca:	f7f5 fbfa 	bl	80026c2 <_fstat>
 800cece:	1c43      	adds	r3, r0, #1
 800ced0:	d102      	bne.n	800ced8 <_fstat_r+0x1c>
 800ced2:	682b      	ldr	r3, [r5, #0]
 800ced4:	b103      	cbz	r3, 800ced8 <_fstat_r+0x1c>
 800ced6:	6023      	str	r3, [r4, #0]
 800ced8:	bd38      	pop	{r3, r4, r5, pc}
 800ceda:	bf00      	nop
 800cedc:	20000240 	.word	0x20000240

0800cee0 <_isatty_r>:
 800cee0:	b538      	push	{r3, r4, r5, lr}
 800cee2:	4d06      	ldr	r5, [pc, #24]	; (800cefc <_isatty_r+0x1c>)
 800cee4:	2300      	movs	r3, #0
 800cee6:	4604      	mov	r4, r0
 800cee8:	4608      	mov	r0, r1
 800ceea:	602b      	str	r3, [r5, #0]
 800ceec:	f7f5 fbf9 	bl	80026e2 <_isatty>
 800cef0:	1c43      	adds	r3, r0, #1
 800cef2:	d102      	bne.n	800cefa <_isatty_r+0x1a>
 800cef4:	682b      	ldr	r3, [r5, #0]
 800cef6:	b103      	cbz	r3, 800cefa <_isatty_r+0x1a>
 800cef8:	6023      	str	r3, [r4, #0]
 800cefa:	bd38      	pop	{r3, r4, r5, pc}
 800cefc:	20000240 	.word	0x20000240

0800cf00 <_raise_r>:
 800cf00:	291f      	cmp	r1, #31
 800cf02:	b538      	push	{r3, r4, r5, lr}
 800cf04:	4604      	mov	r4, r0
 800cf06:	460d      	mov	r5, r1
 800cf08:	d904      	bls.n	800cf14 <_raise_r+0x14>
 800cf0a:	2316      	movs	r3, #22
 800cf0c:	6003      	str	r3, [r0, #0]
 800cf0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf12:	bd38      	pop	{r3, r4, r5, pc}
 800cf14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf16:	b112      	cbz	r2, 800cf1e <_raise_r+0x1e>
 800cf18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf1c:	b94b      	cbnz	r3, 800cf32 <_raise_r+0x32>
 800cf1e:	4620      	mov	r0, r4
 800cf20:	f000 f830 	bl	800cf84 <_getpid_r>
 800cf24:	462a      	mov	r2, r5
 800cf26:	4601      	mov	r1, r0
 800cf28:	4620      	mov	r0, r4
 800cf2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf2e:	f000 b817 	b.w	800cf60 <_kill_r>
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d00a      	beq.n	800cf4c <_raise_r+0x4c>
 800cf36:	1c59      	adds	r1, r3, #1
 800cf38:	d103      	bne.n	800cf42 <_raise_r+0x42>
 800cf3a:	2316      	movs	r3, #22
 800cf3c:	6003      	str	r3, [r0, #0]
 800cf3e:	2001      	movs	r0, #1
 800cf40:	e7e7      	b.n	800cf12 <_raise_r+0x12>
 800cf42:	2400      	movs	r4, #0
 800cf44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf48:	4628      	mov	r0, r5
 800cf4a:	4798      	blx	r3
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	e7e0      	b.n	800cf12 <_raise_r+0x12>

0800cf50 <raise>:
 800cf50:	4b02      	ldr	r3, [pc, #8]	; (800cf5c <raise+0xc>)
 800cf52:	4601      	mov	r1, r0
 800cf54:	6818      	ldr	r0, [r3, #0]
 800cf56:	f7ff bfd3 	b.w	800cf00 <_raise_r>
 800cf5a:	bf00      	nop
 800cf5c:	20000034 	.word	0x20000034

0800cf60 <_kill_r>:
 800cf60:	b538      	push	{r3, r4, r5, lr}
 800cf62:	4d07      	ldr	r5, [pc, #28]	; (800cf80 <_kill_r+0x20>)
 800cf64:	2300      	movs	r3, #0
 800cf66:	4604      	mov	r4, r0
 800cf68:	4608      	mov	r0, r1
 800cf6a:	4611      	mov	r1, r2
 800cf6c:	602b      	str	r3, [r5, #0]
 800cf6e:	f7f5 fb65 	bl	800263c <_kill>
 800cf72:	1c43      	adds	r3, r0, #1
 800cf74:	d102      	bne.n	800cf7c <_kill_r+0x1c>
 800cf76:	682b      	ldr	r3, [r5, #0]
 800cf78:	b103      	cbz	r3, 800cf7c <_kill_r+0x1c>
 800cf7a:	6023      	str	r3, [r4, #0]
 800cf7c:	bd38      	pop	{r3, r4, r5, pc}
 800cf7e:	bf00      	nop
 800cf80:	20000240 	.word	0x20000240

0800cf84 <_getpid_r>:
 800cf84:	f7f5 bb52 	b.w	800262c <_getpid>

0800cf88 <round>:
 800cf88:	ec51 0b10 	vmov	r0, r1, d0
 800cf8c:	b570      	push	{r4, r5, r6, lr}
 800cf8e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800cf92:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800cf96:	2c13      	cmp	r4, #19
 800cf98:	ee10 2a10 	vmov	r2, s0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	dc19      	bgt.n	800cfd4 <round+0x4c>
 800cfa0:	2c00      	cmp	r4, #0
 800cfa2:	da09      	bge.n	800cfb8 <round+0x30>
 800cfa4:	3401      	adds	r4, #1
 800cfa6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800cfaa:	d103      	bne.n	800cfb4 <round+0x2c>
 800cfac:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cfb0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	e028      	b.n	800d00a <round+0x82>
 800cfb8:	4d15      	ldr	r5, [pc, #84]	; (800d010 <round+0x88>)
 800cfba:	4125      	asrs	r5, r4
 800cfbc:	ea01 0605 	and.w	r6, r1, r5
 800cfc0:	4332      	orrs	r2, r6
 800cfc2:	d00e      	beq.n	800cfe2 <round+0x5a>
 800cfc4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800cfc8:	fa42 f404 	asr.w	r4, r2, r4
 800cfcc:	4423      	add	r3, r4
 800cfce:	ea23 0305 	bic.w	r3, r3, r5
 800cfd2:	e7ef      	b.n	800cfb4 <round+0x2c>
 800cfd4:	2c33      	cmp	r4, #51	; 0x33
 800cfd6:	dd07      	ble.n	800cfe8 <round+0x60>
 800cfd8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800cfdc:	d101      	bne.n	800cfe2 <round+0x5a>
 800cfde:	f7f3 f95d 	bl	800029c <__adddf3>
 800cfe2:	ec41 0b10 	vmov	d0, r0, r1
 800cfe6:	bd70      	pop	{r4, r5, r6, pc}
 800cfe8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800cfec:	f04f 35ff 	mov.w	r5, #4294967295
 800cff0:	40f5      	lsrs	r5, r6
 800cff2:	4228      	tst	r0, r5
 800cff4:	d0f5      	beq.n	800cfe2 <round+0x5a>
 800cff6:	2101      	movs	r1, #1
 800cff8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800cffc:	fa01 f404 	lsl.w	r4, r1, r4
 800d000:	1912      	adds	r2, r2, r4
 800d002:	bf28      	it	cs
 800d004:	185b      	addcs	r3, r3, r1
 800d006:	ea22 0205 	bic.w	r2, r2, r5
 800d00a:	4619      	mov	r1, r3
 800d00c:	4610      	mov	r0, r2
 800d00e:	e7e8      	b.n	800cfe2 <round+0x5a>
 800d010:	000fffff 	.word	0x000fffff

0800d014 <_init>:
 800d014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d016:	bf00      	nop
 800d018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d01a:	bc08      	pop	{r3}
 800d01c:	469e      	mov	lr, r3
 800d01e:	4770      	bx	lr

0800d020 <_fini>:
 800d020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d022:	bf00      	nop
 800d024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d026:	bc08      	pop	{r3}
 800d028:	469e      	mov	lr, r3
 800d02a:	4770      	bx	lr
