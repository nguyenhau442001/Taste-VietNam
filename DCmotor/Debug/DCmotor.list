
DCmotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ad0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006fc  08011c70  08011c70  00021c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801236c  0801236c  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  0801236c  0801236c  0002236c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012374  08012374  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012374  08012374  00022374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801237c  0801237c  0002237c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08012380  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bfc  20000218  08012598  00030218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001e14  08012598  00031e14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ae43  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005560  00000000  00000000  0005b08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d48  00000000  00000000  000605f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ba0  00000000  00000000  00062338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc4f  00000000  00000000  00063ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025bba  00000000  00000000  00081b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a15d6  00000000  00000000  000a76e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148cb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f14  00000000  00000000  00148d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011c58 	.word	0x08011c58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08011c58 	.word	0x08011c58

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <HAL_GPIO_EXTI_Callback>:
float ActualLinearVelocity[2]   ;
float SetPointLinearVelocity[2] ;
float SetPointAngularVelocity[2];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
 static unsigned char state0,state1,state2,state3;
 static bool Left_Channel_A_Status,Left_Channel_B_Status, Right_Channel_A_Status,Right_Channel_B_Status; //falling or rising edge
 /* MOTOR A */
 if (GPIO_Pin == GPIO_PIN_12)
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f6c:	f040 80a1 	bne.w	80010b2 <HAL_GPIO_EXTI_Callback+0x156>
 {
   // chương trình ngắt của chân 12

	 Left_Channel_A_Status=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12);
 8000f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f74:	4892      	ldr	r0, [pc, #584]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x264>)
 8000f76:	f005 fb67 	bl	8006648 <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf14      	ite	ne
 8000f80:	2301      	movne	r3, #1
 8000f82:	2300      	moveq	r3, #0
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b8f      	ldr	r3, [pc, #572]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x268>)
 8000f88:	701a      	strb	r2, [r3, #0]
	 state0=state0|Left_Channel_A_Status;
 8000f8a:	4b8e      	ldr	r3, [pc, #568]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x268>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b8d      	ldr	r3, [pc, #564]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b8b      	ldr	r3, [pc, #556]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f9a:	701a      	strb	r2, [r3, #0]

	 state0=state0<<1;
 8000f9c:	4b8a      	ldr	r3, [pc, #552]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b88      	ldr	r3, [pc, #544]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fa6:	701a      	strb	r2, [r3, #0]
	 Left_Channel_B_Status=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13);
 8000fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fac:	4884      	ldr	r0, [pc, #528]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x264>)
 8000fae:	f005 fb4b 	bl	8006648 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b83      	ldr	r3, [pc, #524]	; (80011cc <HAL_GPIO_EXTI_Callback+0x270>)
 8000fc0:	701a      	strb	r2, [r3, #0]
	 state0=state0|Left_Channel_B_Status;
 8000fc2:	4b82      	ldr	r3, [pc, #520]	; (80011cc <HAL_GPIO_EXTI_Callback+0x270>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b7f      	ldr	r3, [pc, #508]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b7d      	ldr	r3, [pc, #500]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fd2:	701a      	strb	r2, [r3, #0]
	 state0=state0 & 0x03;
 8000fd4:	4b7c      	ldr	r3, [pc, #496]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b7a      	ldr	r3, [pc, #488]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fe0:	701a      	strb	r2, [r3, #0]

	 switch(state0)
 8000fe2:	4b79      	ldr	r3, [pc, #484]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d85d      	bhi.n	80010a6 <HAL_GPIO_EXTI_Callback+0x14a>
 8000fea:	a201      	add	r2, pc, #4	; (adr r2, 8000ff0 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff0:	08001001 	.word	0x08001001
 8000ff4:	08001027 	.word	0x08001027
 8000ff8:	0800104d 	.word	0x0800104d
 8000ffc:	08001073 	.word	0x08001073
	 {
		 	 	 	 	 case 0:
							 	 if(status.PreviousLeftStatus==1) {Count.CurrentLeftCount++;}
 8001000:	4b73      	ldr	r3, [pc, #460]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d104      	bne.n	8001012 <HAL_GPIO_EXTI_Callback+0xb6>
 8001008:	4b72      	ldr	r3, [pc, #456]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	4a71      	ldr	r2, [pc, #452]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001010:	6013      	str	r3, [r2, #0]
							 	 if(status.PreviousLeftStatus==2) {Count.CurrentLeftCount--;}
 8001012:	4b6f      	ldr	r3, [pc, #444]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d13e      	bne.n	8001098 <HAL_GPIO_EXTI_Callback+0x13c>
 800101a:	4b6e      	ldr	r3, [pc, #440]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3b01      	subs	r3, #1
 8001020:	4a6c      	ldr	r2, [pc, #432]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001022:	6013      	str	r3, [r2, #0]
							 	 break;
 8001024:	e038      	b.n	8001098 <HAL_GPIO_EXTI_Callback+0x13c>
		 	 	 	 	 case 1:
		 	 	 	 		 	 if(status.PreviousLeftStatus==3) {Count.CurrentLeftCount++;}
 8001026:	4b6a      	ldr	r3, [pc, #424]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d104      	bne.n	8001038 <HAL_GPIO_EXTI_Callback+0xdc>
 800102e:	4b69      	ldr	r3, [pc, #420]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	4a67      	ldr	r2, [pc, #412]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001036:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(status.PreviousLeftStatus==0) {Count.CurrentLeftCount--;}
 8001038:	4b65      	ldr	r3, [pc, #404]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d12d      	bne.n	800109c <HAL_GPIO_EXTI_Callback+0x140>
 8001040:	4b64      	ldr	r3, [pc, #400]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3b01      	subs	r3, #1
 8001046:	4a63      	ldr	r2, [pc, #396]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001048:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 800104a:	e027      	b.n	800109c <HAL_GPIO_EXTI_Callback+0x140>
		 	 	 	 	 case 2:
		 	 	 	 		 	 if(status.PreviousLeftStatus==0) {Count.CurrentLeftCount++;}
 800104c:	4b60      	ldr	r3, [pc, #384]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d104      	bne.n	800105e <HAL_GPIO_EXTI_Callback+0x102>
 8001054:	4b5f      	ldr	r3, [pc, #380]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a5e      	ldr	r2, [pc, #376]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800105c:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(status.PreviousLeftStatus==3) {Count.CurrentLeftCount--;}
 800105e:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d11c      	bne.n	80010a0 <HAL_GPIO_EXTI_Callback+0x144>
 8001066:	4b5b      	ldr	r3, [pc, #364]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	3b01      	subs	r3, #1
 800106c:	4a59      	ldr	r2, [pc, #356]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800106e:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001070:	e016      	b.n	80010a0 <HAL_GPIO_EXTI_Callback+0x144>
		 	 	 	 	 case 3:
		 	 	 	 		 	 if(status.PreviousLeftStatus==2) {Count.CurrentLeftCount++;}
 8001072:	4b57      	ldr	r3, [pc, #348]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d104      	bne.n	8001084 <HAL_GPIO_EXTI_Callback+0x128>
 800107a:	4b56      	ldr	r3, [pc, #344]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a54      	ldr	r2, [pc, #336]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001082:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(status.PreviousLeftStatus==1) {Count.CurrentLeftCount--;}
 8001084:	4b52      	ldr	r3, [pc, #328]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d10b      	bne.n	80010a4 <HAL_GPIO_EXTI_Callback+0x148>
 800108c:	4b51      	ldr	r3, [pc, #324]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	3b01      	subs	r3, #1
 8001092:	4a50      	ldr	r2, [pc, #320]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001094:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001096:	e005      	b.n	80010a4 <HAL_GPIO_EXTI_Callback+0x148>
							 	 break;
 8001098:	bf00      	nop
 800109a:	e004      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x14a>
		 	 	 	 		 	 break;
 800109c:	bf00      	nop
 800109e:	e002      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x14a>
		 	 	 	 		 	 break;
 80010a0:	bf00      	nop
 80010a2:	e000      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x14a>
		 	 	 	 		 	 break;
 80010a4:	bf00      	nop
	 }
	 	 status.PreviousLeftStatus = state0;
 80010a6:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b48      	ldr	r3, [pc, #288]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 80010ae:	601a      	str	r2, [r3, #0]
		 	 	 		 	 if(status.PreviousRightStatus==1) {Count.CurrentRightCount--;}
		 	 	 		 	 break;
		 }
		 status.PreviousRightStatus = state3;
	     }
}
 80010b0:	e211      	b.n	80014d6 <HAL_GPIO_EXTI_Callback+0x57a>
	 else if (GPIO_Pin == GPIO_PIN_13)
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010b8:	f040 80b0 	bne.w	800121c <HAL_GPIO_EXTI_Callback+0x2c0>
		 Left_Channel_A_Status=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12);
 80010bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c0:	483f      	ldr	r0, [pc, #252]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x264>)
 80010c2:	f005 fac1 	bl	8006648 <HAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf14      	ite	ne
 80010cc:	2301      	movne	r3, #1
 80010ce:	2300      	moveq	r3, #0
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x268>)
 80010d4:	701a      	strb	r2, [r3, #0]
		 state1=state1|Left_Channel_A_Status;
 80010d6:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x268>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b3c      	ldr	r3, [pc, #240]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010e6:	701a      	strb	r2, [r3, #0]
		 state1=state1<<1;
 80010e8:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010f2:	701a      	strb	r2, [r3, #0]
		 Left_Channel_B_Status=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13);
 80010f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f8:	4831      	ldr	r0, [pc, #196]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x264>)
 80010fa:	f005 faa5 	bl	8006648 <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf14      	ite	ne
 8001104:	2301      	movne	r3, #1
 8001106:	2300      	moveq	r3, #0
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_GPIO_EXTI_Callback+0x270>)
 800110c:	701a      	strb	r2, [r3, #0]
		 state1=state1|Left_Channel_B_Status;
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_GPIO_EXTI_Callback+0x270>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4313      	orrs	r3, r2
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 800111e:	701a      	strb	r2, [r3, #0]
		 state1=state1 & 0x03;
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 800112c:	701a      	strb	r2, [r3, #0]
		 switch(state1)
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d86c      	bhi.n	8001210 <HAL_GPIO_EXTI_Callback+0x2b4>
 8001136:	a201      	add	r2, pc, #4	; (adr r2, 800113c <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113c:	0800114d 	.word	0x0800114d
 8001140:	08001173 	.word	0x08001173
 8001144:	08001199 	.word	0x08001199
 8001148:	080011dd 	.word	0x080011dd
		 	 	 	 		 	 if(status.PreviousLeftStatus==1) {Count.CurrentLeftCount++;}
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d104      	bne.n	800115e <HAL_GPIO_EXTI_Callback+0x202>
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800115c:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(status.PreviousLeftStatus==2) {Count.CurrentLeftCount--;}
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d14d      	bne.n	8001202 <HAL_GPIO_EXTI_Callback+0x2a6>
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3b01      	subs	r3, #1
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800116e:	6013      	str	r3, [r2, #0]
						 	 	 break;
 8001170:	e047      	b.n	8001202 <HAL_GPIO_EXTI_Callback+0x2a6>
	 	 	 	 		 	 	 if(status.PreviousLeftStatus==3) {Count.CurrentLeftCount++;}
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d104      	bne.n	8001184 <HAL_GPIO_EXTI_Callback+0x228>
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001182:	6013      	str	r3, [r2, #0]
	 	 	 	 		 	 	 if(status.PreviousLeftStatus==0) {Count.CurrentLeftCount--;}
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d13c      	bne.n	8001206 <HAL_GPIO_EXTI_Callback+0x2aa>
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3b01      	subs	r3, #1
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001194:	6013      	str	r3, [r2, #0]
	 	 	 	 		 	 	 break;
 8001196:	e036      	b.n	8001206 <HAL_GPIO_EXTI_Callback+0x2aa>
	 	 	 	 			 	 if(status.PreviousLeftStatus==0) {Count.CurrentLeftCount++;}
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d104      	bne.n	80011aa <HAL_GPIO_EXTI_Callback+0x24e>
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80011a8:	6013      	str	r3, [r2, #0]
	 	 	 	 			 	 if(status.PreviousLeftStatus==3) {Count.CurrentLeftCount--;}
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d12b      	bne.n	800120a <HAL_GPIO_EXTI_Callback+0x2ae>
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80011ba:	6013      	str	r3, [r2, #0]
	 	 	 	 			 	 break;
 80011bc:	e025      	b.n	800120a <HAL_GPIO_EXTI_Callback+0x2ae>
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
 80011c4:	20000234 	.word	0x20000234
 80011c8:	20000235 	.word	0x20000235
 80011cc:	20000236 	.word	0x20000236
 80011d0:	2000171c 	.word	0x2000171c
 80011d4:	20001708 	.word	0x20001708
 80011d8:	20000237 	.word	0x20000237
	 	 	 	 		 	 	 if(status.PreviousLeftStatus==2) {Count.CurrentLeftCount++;}
 80011dc:	4b93      	ldr	r3, [pc, #588]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d104      	bne.n	80011ee <HAL_GPIO_EXTI_Callback+0x292>
 80011e4:	4b92      	ldr	r3, [pc, #584]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a91      	ldr	r2, [pc, #580]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80011ec:	6013      	str	r3, [r2, #0]
	 	 	 	 		 	 	 if(status.PreviousLeftStatus==1) {Count.CurrentLeftCount--;}
 80011ee:	4b8f      	ldr	r3, [pc, #572]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d10b      	bne.n	800120e <HAL_GPIO_EXTI_Callback+0x2b2>
 80011f6:	4b8e      	ldr	r3, [pc, #568]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	4a8c      	ldr	r2, [pc, #560]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80011fe:	6013      	str	r3, [r2, #0]
	 	 	 	 		 	 	 break;
 8001200:	e005      	b.n	800120e <HAL_GPIO_EXTI_Callback+0x2b2>
						 	 	 break;
 8001202:	bf00      	nop
 8001204:	e004      	b.n	8001210 <HAL_GPIO_EXTI_Callback+0x2b4>
	 	 	 	 		 	 	 break;
 8001206:	bf00      	nop
 8001208:	e002      	b.n	8001210 <HAL_GPIO_EXTI_Callback+0x2b4>
	 	 	 	 			 	 break;
 800120a:	bf00      	nop
 800120c:	e000      	b.n	8001210 <HAL_GPIO_EXTI_Callback+0x2b4>
	 	 	 	 		 	 	 break;
 800120e:	bf00      	nop
		 status.PreviousLeftStatus = state1;
 8001210:	4b88      	ldr	r3, [pc, #544]	; (8001434 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b85      	ldr	r3, [pc, #532]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 8001218:	601a      	str	r2, [r3, #0]
}
 800121a:	e15c      	b.n	80014d6 <HAL_GPIO_EXTI_Callback+0x57a>
	 else if (GPIO_Pin == GPIO_PIN_10)		 // LEFT CHANNEL B
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001222:	f040 80a2 	bne.w	800136a <HAL_GPIO_EXTI_Callback+0x40e>
		 Right_Channel_A_Status=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10);
 8001226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122a:	4883      	ldr	r0, [pc, #524]	; (8001438 <HAL_GPIO_EXTI_Callback+0x4dc>)
 800122c:	f005 fa0c 	bl	8006648 <HAL_GPIO_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b7f      	ldr	r3, [pc, #508]	; (800143c <HAL_GPIO_EXTI_Callback+0x4e0>)
 800123e:	701a      	strb	r2, [r3, #0]
		 state2=state2|Right_Channel_A_Status;
 8001240:	4b7e      	ldr	r3, [pc, #504]	; (800143c <HAL_GPIO_EXTI_Callback+0x4e0>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b7e      	ldr	r3, [pc, #504]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4313      	orrs	r3, r2
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b7c      	ldr	r3, [pc, #496]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001250:	701a      	strb	r2, [r3, #0]
		 state2=state2<<1;
 8001252:	4b7b      	ldr	r3, [pc, #492]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b79      	ldr	r3, [pc, #484]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800125c:	701a      	strb	r2, [r3, #0]
		 Right_Channel_B_Status=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_11);
 800125e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001262:	4875      	ldr	r0, [pc, #468]	; (8001438 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001264:	f005 f9f0 	bl	8006648 <HAL_GPIO_ReadPin>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf14      	ite	ne
 800126e:	2301      	movne	r3, #1
 8001270:	2300      	moveq	r3, #0
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b73      	ldr	r3, [pc, #460]	; (8001444 <HAL_GPIO_EXTI_Callback+0x4e8>)
 8001276:	701a      	strb	r2, [r3, #0]
		 state2=state2|Right_Channel_B_Status;
 8001278:	4b72      	ldr	r3, [pc, #456]	; (8001444 <HAL_GPIO_EXTI_Callback+0x4e8>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b70      	ldr	r3, [pc, #448]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b6e      	ldr	r3, [pc, #440]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001288:	701a      	strb	r2, [r3, #0]
		 state2=state2 & 0x03;
 800128a:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b6a      	ldr	r3, [pc, #424]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001296:	701a      	strb	r2, [r3, #0]
		 switch(state2)
 8001298:	4b69      	ldr	r3, [pc, #420]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d85e      	bhi.n	800135e <HAL_GPIO_EXTI_Callback+0x402>
 80012a0:	a201      	add	r2, pc, #4	; (adr r2, 80012a8 <HAL_GPIO_EXTI_Callback+0x34c>)
 80012a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a6:	bf00      	nop
 80012a8:	080012b9 	.word	0x080012b9
 80012ac:	080012df 	.word	0x080012df
 80012b0:	08001305 	.word	0x08001305
 80012b4:	0800132b 	.word	0x0800132b
		 	 	 	 		 	 if(status.PreviousRightStatus==1) {Count.CurrentRightCount++;}
 80012b8:	4b5c      	ldr	r3, [pc, #368]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d104      	bne.n	80012ca <HAL_GPIO_EXTI_Callback+0x36e>
 80012c0:	4b5b      	ldr	r3, [pc, #364]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a5a      	ldr	r2, [pc, #360]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80012c8:	6053      	str	r3, [r2, #4]
		 	 	 	 		 	 if(status.PreviousRightStatus==2) {Count.CurrentRightCount--;}
 80012ca:	4b58      	ldr	r3, [pc, #352]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d13e      	bne.n	8001350 <HAL_GPIO_EXTI_Callback+0x3f4>
 80012d2:	4b57      	ldr	r3, [pc, #348]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	4a55      	ldr	r2, [pc, #340]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80012da:	6053      	str	r3, [r2, #4]
		 	 	 	 		 	 break;
 80012dc:	e038      	b.n	8001350 <HAL_GPIO_EXTI_Callback+0x3f4>
		 	 	 	 		 	 if(status.PreviousRightStatus==3) {Count.CurrentRightCount++;}
 80012de:	4b53      	ldr	r3, [pc, #332]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d104      	bne.n	80012f0 <HAL_GPIO_EXTI_Callback+0x394>
 80012e6:	4b52      	ldr	r3, [pc, #328]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	3301      	adds	r3, #1
 80012ec:	4a50      	ldr	r2, [pc, #320]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80012ee:	6053      	str	r3, [r2, #4]
		 	 	 	 		 	 if(status.PreviousRightStatus==0) {Count.CurrentRightCount--;}
 80012f0:	4b4e      	ldr	r3, [pc, #312]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d12d      	bne.n	8001354 <HAL_GPIO_EXTI_Callback+0x3f8>
 80012f8:	4b4d      	ldr	r3, [pc, #308]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	4a4c      	ldr	r2, [pc, #304]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8001300:	6053      	str	r3, [r2, #4]
		 	 	 	 		 	 break;
 8001302:	e027      	b.n	8001354 <HAL_GPIO_EXTI_Callback+0x3f8>
		 	 	 	 		 	 if(status.PreviousRightStatus==0) {Count.CurrentRightCount++;}
 8001304:	4b49      	ldr	r3, [pc, #292]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d104      	bne.n	8001316 <HAL_GPIO_EXTI_Callback+0x3ba>
 800130c:	4b48      	ldr	r3, [pc, #288]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	3301      	adds	r3, #1
 8001312:	4a47      	ldr	r2, [pc, #284]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8001314:	6053      	str	r3, [r2, #4]
		 	 	 	 		 	 if(status.PreviousRightStatus==3) {Count.CurrentRightCount--;}
 8001316:	4b45      	ldr	r3, [pc, #276]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d11c      	bne.n	8001358 <HAL_GPIO_EXTI_Callback+0x3fc>
 800131e:	4b44      	ldr	r3, [pc, #272]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	4a42      	ldr	r2, [pc, #264]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8001326:	6053      	str	r3, [r2, #4]
		 	 	 	 		 	 break;
 8001328:	e016      	b.n	8001358 <HAL_GPIO_EXTI_Callback+0x3fc>
		 	 	 	 		 	 if(status.PreviousRightStatus==2) {Count.CurrentRightCount++;}
 800132a:	4b40      	ldr	r3, [pc, #256]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d104      	bne.n	800133c <HAL_GPIO_EXTI_Callback+0x3e0>
 8001332:	4b3f      	ldr	r3, [pc, #252]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	3301      	adds	r3, #1
 8001338:	4a3d      	ldr	r2, [pc, #244]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 800133a:	6053      	str	r3, [r2, #4]
		 	 	 	 		 	 if(status.PreviousRightStatus==1) {Count.CurrentRightCount--;}
 800133c:	4b3b      	ldr	r3, [pc, #236]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d10b      	bne.n	800135c <HAL_GPIO_EXTI_Callback+0x400>
 8001344:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	3b01      	subs	r3, #1
 800134a:	4a39      	ldr	r2, [pc, #228]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 800134c:	6053      	str	r3, [r2, #4]
		 	 	 	 		 	 break;
 800134e:	e005      	b.n	800135c <HAL_GPIO_EXTI_Callback+0x400>
		 	 	 	 		 	 break;
 8001350:	bf00      	nop
 8001352:	e004      	b.n	800135e <HAL_GPIO_EXTI_Callback+0x402>
		 	 	 	 		 	 break;
 8001354:	bf00      	nop
 8001356:	e002      	b.n	800135e <HAL_GPIO_EXTI_Callback+0x402>
		 	 	 	 		 	 break;
 8001358:	bf00      	nop
 800135a:	e000      	b.n	800135e <HAL_GPIO_EXTI_Callback+0x402>
		 	 	 	 		 	 break;
 800135c:	bf00      	nop
		 status.PreviousRightStatus = state2;
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	4b31      	ldr	r3, [pc, #196]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 8001366:	605a      	str	r2, [r3, #4]
}
 8001368:	e0b5      	b.n	80014d6 <HAL_GPIO_EXTI_Callback+0x57a>
	 else if (GPIO_Pin == GPIO_PIN_11)
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001370:	f040 80b1 	bne.w	80014d6 <HAL_GPIO_EXTI_Callback+0x57a>
		 Right_Channel_A_Status=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10);
 8001374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001378:	482f      	ldr	r0, [pc, #188]	; (8001438 <HAL_GPIO_EXTI_Callback+0x4dc>)
 800137a:	f005 f965 	bl	8006648 <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf14      	ite	ne
 8001384:	2301      	movne	r3, #1
 8001386:	2300      	moveq	r3, #0
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <HAL_GPIO_EXTI_Callback+0x4e0>)
 800138c:	701a      	strb	r2, [r3, #0]
		 state3=state3|Right_Channel_A_Status;
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <HAL_GPIO_EXTI_Callback+0x4e0>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4313      	orrs	r3, r2
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800139e:	701a      	strb	r2, [r3, #0]
		 state3=state3<<1;
 80013a0:	4b29      	ldr	r3, [pc, #164]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80013aa:	701a      	strb	r2, [r3, #0]
		 Right_Channel_B_Status=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_11);
 80013ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b0:	4821      	ldr	r0, [pc, #132]	; (8001438 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80013b2:	f005 f949 	bl	8006648 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	bf14      	ite	ne
 80013bc:	2301      	movne	r3, #1
 80013be:	2300      	moveq	r3, #0
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_GPIO_EXTI_Callback+0x4e8>)
 80013c4:	701a      	strb	r2, [r3, #0]
		 state3=state3|Right_Channel_B_Status;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <HAL_GPIO_EXTI_Callback+0x4e8>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80013d6:	701a      	strb	r2, [r3, #0]
		 state3=state3 & 0x03;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80013e4:	701a      	strb	r2, [r3, #0]
		 switch(state3)
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d86e      	bhi.n	80014cc <HAL_GPIO_EXTI_Callback+0x570>
 80013ee:	a201      	add	r2, pc, #4	; (adr r2, 80013f4 <HAL_GPIO_EXTI_Callback+0x498>)
 80013f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f4:	08001405 	.word	0x08001405
 80013f8:	0800144d 	.word	0x0800144d
 80013fc:	08001473 	.word	0x08001473
 8001400:	08001499 	.word	0x08001499
		 	 	 		 	 if(status.PreviousRightStatus==1) {Count.CurrentRightCount++;}
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d104      	bne.n	8001416 <HAL_GPIO_EXTI_Callback+0x4ba>
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	3301      	adds	r3, #1
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8001414:	6053      	str	r3, [r2, #4]
		 	 	 		 	 if(status.PreviousRightStatus==2) {Count.CurrentRightCount--;}
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d14f      	bne.n	80014be <HAL_GPIO_EXTI_Callback+0x562>
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	4a02      	ldr	r2, [pc, #8]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8001426:	6053      	str	r3, [r2, #4]
		 	 	 		 	 break;
 8001428:	e049      	b.n	80014be <HAL_GPIO_EXTI_Callback+0x562>
 800142a:	bf00      	nop
 800142c:	2000171c 	.word	0x2000171c
 8001430:	20001708 	.word	0x20001708
 8001434:	20000237 	.word	0x20000237
 8001438:	40021000 	.word	0x40021000
 800143c:	20000238 	.word	0x20000238
 8001440:	20000239 	.word	0x20000239
 8001444:	2000023a 	.word	0x2000023a
 8001448:	2000023b 	.word	0x2000023b
		 	 	 		 	 if(status.PreviousRightStatus==3) {Count.CurrentRightCount++;}
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <HAL_GPIO_EXTI_Callback+0x584>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b03      	cmp	r3, #3
 8001452:	d104      	bne.n	800145e <HAL_GPIO_EXTI_Callback+0x502>
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x588>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	3301      	adds	r3, #1
 800145a:	4a22      	ldr	r2, [pc, #136]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x588>)
 800145c:	6053      	str	r3, [r2, #4]
		 	 	 		 	 if(status.PreviousRightStatus==0) {Count.CurrentRightCount--;}
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <HAL_GPIO_EXTI_Callback+0x584>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d12d      	bne.n	80014c2 <HAL_GPIO_EXTI_Callback+0x566>
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x588>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x588>)
 800146e:	6053      	str	r3, [r2, #4]
		 	 	 		 	 break;
 8001470:	e027      	b.n	80014c2 <HAL_GPIO_EXTI_Callback+0x566>
		 	 	 		 	 if(status.PreviousRightStatus==0) {Count.CurrentRightCount++;}
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_GPIO_EXTI_Callback+0x584>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d104      	bne.n	8001484 <HAL_GPIO_EXTI_Callback+0x528>
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x588>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	3301      	adds	r3, #1
 8001480:	4a18      	ldr	r2, [pc, #96]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x588>)
 8001482:	6053      	str	r3, [r2, #4]
		 	 	 		 	 if(status.PreviousRightStatus==3) {Count.CurrentRightCount--;}
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_GPIO_EXTI_Callback+0x584>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d11c      	bne.n	80014c6 <HAL_GPIO_EXTI_Callback+0x56a>
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x588>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	3b01      	subs	r3, #1
 8001492:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x588>)
 8001494:	6053      	str	r3, [r2, #4]
		 	 	 		 	 break;
 8001496:	e016      	b.n	80014c6 <HAL_GPIO_EXTI_Callback+0x56a>
		 	 	 		 	 if(status.PreviousRightStatus==2) {Count.CurrentRightCount++;}
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_GPIO_EXTI_Callback+0x584>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d104      	bne.n	80014aa <HAL_GPIO_EXTI_Callback+0x54e>
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x588>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	3301      	adds	r3, #1
 80014a6:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x588>)
 80014a8:	6053      	str	r3, [r2, #4]
		 	 	 		 	 if(status.PreviousRightStatus==1) {Count.CurrentRightCount--;}
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_GPIO_EXTI_Callback+0x584>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d10b      	bne.n	80014ca <HAL_GPIO_EXTI_Callback+0x56e>
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x588>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x588>)
 80014ba:	6053      	str	r3, [r2, #4]
		 	 	 		 	 break;
 80014bc:	e005      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0x56e>
		 	 	 		 	 break;
 80014be:	bf00      	nop
 80014c0:	e004      	b.n	80014cc <HAL_GPIO_EXTI_Callback+0x570>
		 	 	 		 	 break;
 80014c2:	bf00      	nop
 80014c4:	e002      	b.n	80014cc <HAL_GPIO_EXTI_Callback+0x570>
		 	 	 		 	 break;
 80014c6:	bf00      	nop
 80014c8:	e000      	b.n	80014cc <HAL_GPIO_EXTI_Callback+0x570>
		 	 	 		 	 break;
 80014ca:	bf00      	nop
		 status.PreviousRightStatus = state3;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_GPIO_EXTI_Callback+0x584>)
 80014d4:	605a      	str	r2, [r3, #4]
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000171c 	.word	0x2000171c
 80014e4:	20001708 	.word	0x20001708
 80014e8:	2000023b 	.word	0x2000023b
 80014ec:	00000000 	.word	0x00000000

080014f0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	Count.SampleTimeCount++;
 80014f8:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	3301      	adds	r3, #1
 80014fe:	4a36      	ldr	r2, [pc, #216]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001500:	6093      	str	r3, [r2, #8]
	if(Count.SampleTimeCount == 1000*(uPID.SampleTime)) //1 cnt = 0.001s, default:100 = 0.1s
 8001502:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800150e:	4b33      	ldr	r3, [pc, #204]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001510:	edd3 7a03 	vldr	s15, [r3, #12]
 8001514:	eddf 6a32 	vldr	s13, [pc, #200]	; 80015e0 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8001518:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800151c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001524:	d150      	bne.n	80015c8 <HAL_TIM_PeriodElapsedCallback+0xd8>
	{

		ActualAngularVelocity[0]   = Count.CurrentLeftCount * 60  / (ENCODER_RESOLUTION*0.001*Count.SampleTimeCount);
 8001526:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4613      	mov	r3, r2
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe fffe 	bl	8000534 <__aeabi_i2d>
 8001538:	4604      	mov	r4, r0
 800153a:	460d      	mov	r5, r1
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe fff7 	bl	8000534 <__aeabi_i2d>
 8001546:	a322      	add	r3, pc, #136	; (adr r3, 80015d0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7ff f85c 	bl	8000608 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4620      	mov	r0, r4
 8001556:	4629      	mov	r1, r5
 8001558:	f7ff f980 	bl	800085c <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff fb28 	bl	8000bb8 <__aeabi_d2f>
 8001568:	4603      	mov	r3, r0
 800156a:	4a1e      	ldr	r2, [pc, #120]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800156c:	6013      	str	r3, [r2, #0]
		ActualAngularVelocity[1]   = Count.CurrentRightCount* 60  / (ENCODER_RESOLUTION*0.001*Count.SampleTimeCount);
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	1a9b      	subs	r3, r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ffda 	bl	8000534 <__aeabi_i2d>
 8001580:	4604      	mov	r4, r0
 8001582:	460d      	mov	r5, r1
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffd3 	bl	8000534 <__aeabi_i2d>
 800158e:	a310      	add	r3, pc, #64	; (adr r3, 80015d0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	f7ff f838 	bl	8000608 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4620      	mov	r0, r4
 800159e:	4629      	mov	r1, r5
 80015a0:	f7ff f95c 	bl	800085c <__aeabi_ddiv>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fb04 	bl	8000bb8 <__aeabi_d2f>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80015b4:	6053      	str	r3, [r2, #4]

		Count.CurrentLeftCount=0;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
		Count.CurrentRightCount=0;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	605a      	str	r2, [r3, #4]
		Count.SampleTimeCount=0;
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
	}
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bdb0      	pop	{r4, r5, r7, pc}
 80015d0:	24dd2f1b 	.word	0x24dd2f1b
 80015d4:	40158106 	.word	0x40158106
 80015d8:	20001708 	.word	0x20001708
 80015dc:	200016f8 	.word	0x200016f8
 80015e0:	447a0000 	.word	0x447a0000
 80015e4:	20001714 	.word	0x20001714

080015e8 <PID_Compute>:

void PID_Compute(PID_TypeDef *uPID,Error_TypeDef *Error,float Kp, float Ki, float Kb, float SampleTime,double SetPoint, double ControlledVariable,float *PidOutput)
{
 80015e8:	b5b0      	push	{r4, r5, r7, lr}
 80015ea:	b092      	sub	sp, #72	; 0x48
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	62f8      	str	r0, [r7, #44]	; 0x2c
 80015f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80015f2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80015f6:	edc7 0a08 	vstr	s1, [r7, #32]
 80015fa:	ed87 1a07 	vstr	s2, [r7, #28]
 80015fe:	edc7 1a06 	vstr	s3, [r7, #24]
 8001602:	ed87 2b04 	vstr	d2, [r7, #16]
 8001606:	ed87 3b02 	vstr	d3, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
	// PWM mode has the range from 0 to 400.
	float HighLimit = 400, PWM, PWM_hat, uk, ui;
 800160c:	4b50      	ldr	r3, [pc, #320]	; (8001750 <PID_Compute+0x168>)
 800160e:	643b      	str	r3, [r7, #64]	; 0x40
	static float previous_ui;

	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->Kp		= Kp;
 8001610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001614:	601a      	str	r2, [r3, #0]
	uPID->Ki 		= Ki;
 8001616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001618:	6a3a      	ldr	r2, [r7, #32]
 800161a:	605a      	str	r2, [r3, #4]
	uPID->Kb 		= Kb;
 800161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	609a      	str	r2, [r3, #8]
	uPID->SampleTime= SampleTime;
 8001622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	60da      	str	r2, [r3, #12]
	// Calculate the error
	Error->CurrentError= SetPoint-fabs(ControlledVariable);
 8001628:	68bc      	ldr	r4, [r7, #8]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001630:	4622      	mov	r2, r4
 8001632:	462b      	mov	r3, r5
 8001634:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001638:	f7fe fe2e 	bl	8000298 <__aeabi_dsub>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff fab8 	bl	8000bb8 <__aeabi_d2f>
 8001648:	4602      	mov	r2, r0
 800164a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164c:	601a      	str	r2, [r3, #0]

	// Proportion
	uk = (uPID->Kp) * (Error->CurrentError);
 800164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Integration
	ui = previous_ui + (uPID->Ki) * (Error->CurrentError) * (uPID->SampleTime);
 8001662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001664:	ed93 7a01 	vldr	s14, [r3, #4]
 8001668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001674:	edd3 7a03 	vldr	s15, [r3, #12]
 8001678:	ee27 7a27 	vmul.f32	s14, s14, s15
 800167c:	4b35      	ldr	r3, [pc, #212]	; (8001754 <PID_Compute+0x16c>)
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001686:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	PWM = ui+uk;
 800168a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800168e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001696:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Anti wind-up for Integration
	if(PWM < HighLimit)
 800169a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800169e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80016a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016aa:	d508      	bpl.n	80016be <PID_Compute+0xd6>
	{
		PWM_hat = PWM;
 80016ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34

		Error-> ResetError  = 0;
 80016b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]

		*PidOutput   = PWM;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016bc:	601a      	str	r2, [r3, #0]
	}

	if(PWM > HighLimit)
 80016be:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80016c2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80016c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ce:	dd37      	ble.n	8001740 <PID_Compute+0x158>
	{
		PWM_hat = HighLimit;
 80016d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016d2:	637b      	str	r3, [r7, #52]	; 0x34

		Error->ResetError = PWM_hat - PWM;
 80016d4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80016d8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e2:	edc3 7a02 	vstr	s15, [r3, #8]

		Error->AntiWindupError = (uPID->Ki) * (Error->CurrentError) + (Error->ResetError)*(uPID->Kb);
 80016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80016ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170c:	edc3 7a01 	vstr	s15, [r3, #4]

		ui=previous_ui + (Error->AntiWindupError) * (uPID->SampleTime);
 8001710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001712:	ed93 7a01 	vldr	s14, [r3, #4]
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	edd3 7a03 	vldr	s15, [r3, #12]
 800171c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <PID_Compute+0x16c>)
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

		*PidOutput = uk+ui;
 800172e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001732:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	edc3 7a00 	vstr	s15, [r3]
	}
	previous_ui=ui;
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <PID_Compute+0x16c>)
 8001742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001744:	6013      	str	r3, [r2, #0]

}
 8001746:	bf00      	nop
 8001748:	3748      	adds	r7, #72	; 0x48
 800174a:	46bd      	mov	sp, r7
 800174c:	bdb0      	pop	{r4, r5, r7, pc}
 800174e:	bf00      	nop
 8001750:	43c80000 	.word	0x43c80000
 8001754:	2000023c 	.word	0x2000023c

08001758 <ReadEncoder>:

void ReadEncoder()
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <ComputeVelocity>:

void ComputeVelocity()
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	0000      	movs	r0, r0
	...

08001778 <SubcribeVelocityFromRos>:

void SubcribeVelocityFromRos(const double linear_velocity,const double angular_velocity)
{
 8001778:	b5b0      	push	{r4, r5, r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001782:	ed87 1b00 	vstr	d1, [r7]

	// Calculate vel of each wheel [0]: left, [1]: right
	SetPointLinearVelocity[0]    =  (2*linear_velocity-angular_velocity*WHEEL_SEPARATION)/2;  // unit: m/s
 8001786:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	f7fe fd85 	bl	800029c <__adddf3>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4614      	mov	r4, r2
 8001798:	461d      	mov	r5, r3
 800179a:	a3a5      	add	r3, pc, #660	; (adr r3, 8001a30 <SubcribeVelocityFromRos+0x2b8>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017a4:	f7fe ff30 	bl	8000608 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4620      	mov	r0, r4
 80017ae:	4629      	mov	r1, r5
 80017b0:	f7fe fd72 	bl	8000298 <__aeabi_dsub>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017c4:	f7ff f84a 	bl	800085c <__aeabi_ddiv>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff f9f2 	bl	8000bb8 <__aeabi_d2f>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4a9c      	ldr	r2, [pc, #624]	; (8001a48 <SubcribeVelocityFromRos+0x2d0>)
 80017d8:	6013      	str	r3, [r2, #0]
	SetPointLinearVelocity[1]    =  (2*linear_velocity+angular_velocity*WHEEL_SEPARATION)/2;
 80017da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	f7fe fd5b 	bl	800029c <__adddf3>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4614      	mov	r4, r2
 80017ec:	461d      	mov	r5, r3
 80017ee:	a390      	add	r3, pc, #576	; (adr r3, 8001a30 <SubcribeVelocityFromRos+0x2b8>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017f8:	f7fe ff06 	bl	8000608 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4620      	mov	r0, r4
 8001802:	4629      	mov	r1, r5
 8001804:	f7fe fd4a 	bl	800029c <__adddf3>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001818:	f7ff f820 	bl	800085c <__aeabi_ddiv>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff f9c8 	bl	8000bb8 <__aeabi_d2f>
 8001828:	4603      	mov	r3, r0
 800182a:	4a87      	ldr	r2, [pc, #540]	; (8001a48 <SubcribeVelocityFromRos+0x2d0>)
 800182c:	6053      	str	r3, [r2, #4]

	//v=omega.r => omega=v/r (rad/s)
	SetPointAngularVelocity[0]   =  SetPointLinearVelocity[0] /WHEEL_RADIUS;
 800182e:	4b86      	ldr	r3, [pc, #536]	; (8001a48 <SubcribeVelocityFromRos+0x2d0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fe90 	bl	8000558 <__aeabi_f2d>
 8001838:	a37f      	add	r3, pc, #508	; (adr r3, 8001a38 <SubcribeVelocityFromRos+0x2c0>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7ff f80d 	bl	800085c <__aeabi_ddiv>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff f9b5 	bl	8000bb8 <__aeabi_d2f>
 800184e:	4603      	mov	r3, r0
 8001850:	4a7e      	ldr	r2, [pc, #504]	; (8001a4c <SubcribeVelocityFromRos+0x2d4>)
 8001852:	6013      	str	r3, [r2, #0]
	SetPointAngularVelocity[1]   =  SetPointLinearVelocity[1] /WHEEL_RADIUS;
 8001854:	4b7c      	ldr	r3, [pc, #496]	; (8001a48 <SubcribeVelocityFromRos+0x2d0>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe7d 	bl	8000558 <__aeabi_f2d>
 800185e:	a376      	add	r3, pc, #472	; (adr r3, 8001a38 <SubcribeVelocityFromRos+0x2c0>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fffa 	bl	800085c <__aeabi_ddiv>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f9a2 	bl	8000bb8 <__aeabi_d2f>
 8001874:	4603      	mov	r3, r0
 8001876:	4a75      	ldr	r2, [pc, #468]	; (8001a4c <SubcribeVelocityFromRos+0x2d4>)
 8001878:	6053      	str	r3, [r2, #4]

	// convert to RPM
	SetPointAngularVelocity[0]   = SetPointAngularVelocity[0]*60 /2*PI;
 800187a:	4b74      	ldr	r3, [pc, #464]	; (8001a4c <SubcribeVelocityFromRos+0x2d4>)
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001a50 <SubcribeVelocityFromRos+0x2d8>
 8001884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001888:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800188c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001890:	ee16 0a90 	vmov	r0, s13
 8001894:	f7fe fe60 	bl	8000558 <__aeabi_f2d>
 8001898:	a369      	add	r3, pc, #420	; (adr r3, 8001a40 <SubcribeVelocityFromRos+0x2c8>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe feb3 	bl	8000608 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f985 	bl	8000bb8 <__aeabi_d2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a66      	ldr	r2, [pc, #408]	; (8001a4c <SubcribeVelocityFromRos+0x2d4>)
 80018b2:	6013      	str	r3, [r2, #0]
	SetPointAngularVelocity[1]   = SetPointAngularVelocity[1]*60 /2*PI;
 80018b4:	4b65      	ldr	r3, [pc, #404]	; (8001a4c <SubcribeVelocityFromRos+0x2d4>)
 80018b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80018ba:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001a50 <SubcribeVelocityFromRos+0x2d8>
 80018be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80018c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018ca:	ee16 0a90 	vmov	r0, s13
 80018ce:	f7fe fe43 	bl	8000558 <__aeabi_f2d>
 80018d2:	a35b      	add	r3, pc, #364	; (adr r3, 8001a40 <SubcribeVelocityFromRos+0x2c8>)
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	f7fe fe96 	bl	8000608 <__aeabi_dmul>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f7ff f968 	bl	8000bb8 <__aeabi_d2f>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4a58      	ldr	r2, [pc, #352]	; (8001a4c <SubcribeVelocityFromRos+0x2d4>)
 80018ec:	6053      	str	r3, [r2, #4]
	// Determine the direction with the sign of value corresponding
	// (0,1): clockwise, (1,0): counter clockwise.
	// IN1 (PB1), IN2 (PB2) pin    (motor A)
	// IN3 (PE8), IN4 (PE9) pin	   (motor B)

	if((SetPointLinearVelocity[0]>0) && (SetPointLinearVelocity[1]>0))
 80018ee:	4b56      	ldr	r3, [pc, #344]	; (8001a48 <SubcribeVelocityFromRos+0x2d0>)
 80018f0:	edd3 7a00 	vldr	s15, [r3]
 80018f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fc:	dd1d      	ble.n	800193a <SubcribeVelocityFromRos+0x1c2>
 80018fe:	4b52      	ldr	r3, [pc, #328]	; (8001a48 <SubcribeVelocityFromRos+0x2d0>)
 8001900:	edd3 7a01 	vldr	s15, [r3, #4]
 8001904:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190c:	dd15      	ble.n	800193a <SubcribeVelocityFromRos+0x1c2>
	{
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	2102      	movs	r1, #2
 8001912:	4850      	ldr	r0, [pc, #320]	; (8001a54 <SubcribeVelocityFromRos+0x2dc>)
 8001914:	f004 feb0 	bl	8006678 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	2104      	movs	r1, #4
 800191c:	484d      	ldr	r0, [pc, #308]	; (8001a54 <SubcribeVelocityFromRos+0x2dc>)
 800191e:	f004 feab 	bl	8006678 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001928:	484b      	ldr	r0, [pc, #300]	; (8001a58 <SubcribeVelocityFromRos+0x2e0>)
 800192a:	f004 fea5 	bl	8006678 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001934:	4848      	ldr	r0, [pc, #288]	; (8001a58 <SubcribeVelocityFromRos+0x2e0>)
 8001936:	f004 fe9f 	bl	8006678 <HAL_GPIO_WritePin>
	}

	if((SetPointLinearVelocity[0]<0) && (SetPointLinearVelocity[1]<0))
 800193a:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <SubcribeVelocityFromRos+0x2d0>)
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001948:	d51d      	bpl.n	8001986 <SubcribeVelocityFromRos+0x20e>
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <SubcribeVelocityFromRos+0x2d0>)
 800194c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001950:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001958:	d515      	bpl.n	8001986 <SubcribeVelocityFromRos+0x20e>
	{
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001960:	483d      	ldr	r0, [pc, #244]	; (8001a58 <SubcribeVelocityFromRos+0x2e0>)
 8001962:	f004 fe89 	bl	8006678 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 8001966:	2201      	movs	r2, #1
 8001968:	f44f 7100 	mov.w	r1, #512	; 0x200
 800196c:	483a      	ldr	r0, [pc, #232]	; (8001a58 <SubcribeVelocityFromRos+0x2e0>)
 800196e:	f004 fe83 	bl	8006678 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8001972:	2201      	movs	r2, #1
 8001974:	2102      	movs	r1, #2
 8001976:	4837      	ldr	r0, [pc, #220]	; (8001a54 <SubcribeVelocityFromRos+0x2dc>)
 8001978:	f004 fe7e 	bl	8006678 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	2104      	movs	r1, #4
 8001980:	4834      	ldr	r0, [pc, #208]	; (8001a54 <SubcribeVelocityFromRos+0x2dc>)
 8001982:	f004 fe79 	bl	8006678 <HAL_GPIO_WritePin>
	}

	if((SetPointLinearVelocity[0]>0) && (SetPointLinearVelocity[1]<0))
 8001986:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <SubcribeVelocityFromRos+0x2d0>)
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001994:	dd1d      	ble.n	80019d2 <SubcribeVelocityFromRos+0x25a>
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <SubcribeVelocityFromRos+0x2d0>)
 8001998:	edd3 7a01 	vldr	s15, [r3, #4]
 800199c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	d515      	bpl.n	80019d2 <SubcribeVelocityFromRos+0x25a>
	{
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_SET);
 80019a6:	2201      	movs	r2, #1
 80019a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ac:	482a      	ldr	r0, [pc, #168]	; (8001a58 <SubcribeVelocityFromRos+0x2e0>)
 80019ae:	f004 fe63 	bl	8006678 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b8:	4827      	ldr	r0, [pc, #156]	; (8001a58 <SubcribeVelocityFromRos+0x2e0>)
 80019ba:	f004 fe5d 	bl	8006678 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 80019be:	2201      	movs	r2, #1
 80019c0:	2102      	movs	r1, #2
 80019c2:	4824      	ldr	r0, [pc, #144]	; (8001a54 <SubcribeVelocityFromRos+0x2dc>)
 80019c4:	f004 fe58 	bl	8006678 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2104      	movs	r1, #4
 80019cc:	4821      	ldr	r0, [pc, #132]	; (8001a54 <SubcribeVelocityFromRos+0x2dc>)
 80019ce:	f004 fe53 	bl	8006678 <HAL_GPIO_WritePin>
	}

	if((SetPointLinearVelocity[0]<0) && (SetPointLinearVelocity[1]>0))
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <SubcribeVelocityFromRos+0x2d0>)
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	d400      	bmi.n	80019e4 <SubcribeVelocityFromRos+0x26c>
	          HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);

		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
	}
}
 80019e2:	e01e      	b.n	8001a22 <SubcribeVelocityFromRos+0x2aa>
	if((SetPointLinearVelocity[0]<0) && (SetPointLinearVelocity[1]>0))
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <SubcribeVelocityFromRos+0x2d0>)
 80019e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80019ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f2:	dc00      	bgt.n	80019f6 <SubcribeVelocityFromRos+0x27e>
}
 80019f4:	e015      	b.n	8001a22 <SubcribeVelocityFromRos+0x2aa>
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fc:	4816      	ldr	r0, [pc, #88]	; (8001a58 <SubcribeVelocityFromRos+0x2e0>)
 80019fe:	f004 fe3b 	bl	8006678 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 8001a02:	2201      	movs	r2, #1
 8001a04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <SubcribeVelocityFromRos+0x2e0>)
 8001a0a:	f004 fe35 	bl	8006678 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2102      	movs	r1, #2
 8001a12:	4810      	ldr	r0, [pc, #64]	; (8001a54 <SubcribeVelocityFromRos+0x2dc>)
 8001a14:	f004 fe30 	bl	8006678 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	480d      	ldr	r0, [pc, #52]	; (8001a54 <SubcribeVelocityFromRos+0x2dc>)
 8001a1e:	f004 fe2b 	bl	8006678 <HAL_GPIO_WritePin>
}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	f3af 8000 	nop.w
 8001a30:	33333333 	.word	0x33333333
 8001a34:	3fd33333 	.word	0x3fd33333
 8001a38:	9999999a 	.word	0x9999999a
 8001a3c:	3fa99999 	.word	0x3fa99999
 8001a40:	54442d18 	.word	0x54442d18
 8001a44:	400921fb 	.word	0x400921fb
 8001a48:	2000172c 	.word	0x2000172c
 8001a4c:	20000010 	.word	0x20000010
 8001a50:	42700000 	.word	0x42700000
 8001a54:	40020400 	.word	0x40020400
 8001a58:	40021000 	.word	0x40021000

08001a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a60:	f003 fec4 	bl	80057ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a64:	f000 f846 	bl	8001af4 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a68:	f000 f8b6 	bl	8001bd8 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a6c:	f000 fb04 	bl	8002078 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001a70:	f000 fada 	bl	8002028 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001a74:	f000 f8d6 	bl	8001c24 <_ZL12MX_I2C1_Initv>
  MX_I2S2_Init();
 8001a78:	f000 f908 	bl	8001c8c <_ZL12MX_I2S2_Initv>
  MX_I2S3_Init();
 8001a7c:	f000 f93a 	bl	8001cf4 <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 8001a80:	f000 f96c 	bl	8001d5c <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 8001a84:	f00d f816 	bl	800eab4 <MX_USB_HOST_Init>
  MX_TIM3_Init();
 8001a88:	f000 fa00 	bl	8001e8c <_ZL12MX_TIM3_Initv>
  MX_TIM2_Init();
 8001a8c:	f000 f9a2 	bl	8001dd4 <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 8001a90:	f000 fa9c 	bl	8001fcc <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 8001a94:	f002 fb0c 	bl	80040b0 <setup>
  HAL_TIM_Base_Start_IT(&htim2);
 8001a98:	4812      	ldr	r0, [pc, #72]	; (8001ae4 <main+0x88>)
 8001a9a:	f007 fee7 	bl	800986c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4811      	ldr	r0, [pc, #68]	; (8001ae8 <main+0x8c>)
 8001aa2:	f007 ff9f 	bl	80099e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8001aa6:	2108      	movs	r1, #8
 8001aa8:	480f      	ldr	r0, [pc, #60]	; (8001ae8 <main+0x8c>)
 8001aaa:	f007 ff9b 	bl	80099e4 <HAL_TIM_PWM_Start>


  // IN1,IN2 pin   (motor A)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	480e      	ldr	r0, [pc, #56]	; (8001aec <main+0x90>)
 8001ab4:	f004 fde0 	bl	8006678 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2104      	movs	r1, #4
 8001abc:	480b      	ldr	r0, [pc, #44]	; (8001aec <main+0x90>)
 8001abe:	f004 fddb 	bl	8006678 <HAL_GPIO_WritePin>

  // IN3,IN4 pin	(motor B)
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_RESET);    // (0,1): < 0: forward. (1,0): >0 : reverse.
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac8:	4809      	ldr	r0, [pc, #36]	; (8001af0 <main+0x94>)
 8001aca:	f004 fdd5 	bl	8006678 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ad4:	4806      	ldr	r0, [pc, #24]	; (8001af0 <main+0x94>)
 8001ad6:	f004 fdcf 	bl	8006678 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001ada:	f00d f811 	bl	800eb00 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    loop();
 8001ade:	f002 faff 	bl	80040e0 <loop>
    MX_USB_HOST_Process();
 8001ae2:	e7fa      	b.n	8001ada <main+0x7e>
 8001ae4:	2000037c 	.word	0x2000037c
 8001ae8:	200003c4 	.word	0x200003c4
 8001aec:	40020400 	.word	0x40020400
 8001af0:	40021000 	.word	0x40021000

08001af4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b094      	sub	sp, #80	; 0x50
 8001af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001afa:	f107 0320 	add.w	r3, r7, #32
 8001afe:	2230      	movs	r2, #48	; 0x30
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f00d fb68 	bl	800f1d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <_Z18SystemClock_Configv+0xdc>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	4a2b      	ldr	r2, [pc, #172]	; (8001bd0 <_Z18SystemClock_Configv+0xdc>)
 8001b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b26:	6413      	str	r3, [r2, #64]	; 0x40
 8001b28:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <_Z18SystemClock_Configv+0xdc>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b34:	2300      	movs	r3, #0
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <_Z18SystemClock_Configv+0xe0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a25      	ldr	r2, [pc, #148]	; (8001bd4 <_Z18SystemClock_Configv+0xe0>)
 8001b3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <_Z18SystemClock_Configv+0xe0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b50:	2301      	movs	r3, #1
 8001b52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b64:	2304      	movs	r3, #4
 8001b66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001b68:	23c0      	movs	r3, #192	; 0xc0
 8001b6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001b70:	2308      	movs	r3, #8
 8001b72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b74:	f107 0320 	add.w	r3, r7, #32
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f006 ffb7 	bl	8008aec <HAL_RCC_OscConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf14      	ite	ne
 8001b84:	2301      	movne	r3, #1
 8001b86:	2300      	moveq	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001b8e:	f000 fb97 	bl	80022c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b92:	230f      	movs	r3, #15
 8001b94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b96:	2302      	movs	r3, #2
 8001b98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ba2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	2103      	movs	r1, #3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f007 fa14 	bl	8008fdc <HAL_RCC_ClockConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bf14      	ite	ne
 8001bba:	2301      	movne	r3, #1
 8001bbc:	2300      	moveq	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001bc4:	f000 fb7c 	bl	80022c0 <Error_Handler>
  }
}
 8001bc8:	bf00      	nop
 8001bca:	3750      	adds	r7, #80	; 0x50
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40007000 	.word	0x40007000

08001bd8 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bde:	463b      	mov	r3, r7
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
 8001bec:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001bf2:	23c8      	movs	r3, #200	; 0xc8
 8001bf4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bfe:	463b      	mov	r3, r7
 8001c00:	4618      	mov	r0, r3
 8001c02:	f007 fc0b 	bl	800941c <HAL_RCCEx_PeriphCLKConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 8001c16:	f000 fb53 	bl	80022c0 <Error_Handler>
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c2a:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <_ZL12MX_I2C1_Initv+0x60>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c30:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <_ZL12MX_I2C1_Initv+0x64>)
 8001c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c60:	4807      	ldr	r0, [pc, #28]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c62:	f006 f95f 	bl	8007f24 <HAL_I2C_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf14      	ite	ne
 8001c6c:	2301      	movne	r3, #1
 8001c6e:	2300      	moveq	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001c76:	f000 fb23 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000240 	.word	0x20000240
 8001c84:	40005400 	.word	0x40005400
 8001c88:	000186a0 	.word	0x000186a0

08001c8c <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001c90:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001c92:	4a16      	ldr	r2, [pc, #88]	; (8001cec <_ZL12MX_I2S2_Initv+0x60>)
 8001c94:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001ca4:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001caa:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cb2:	4a0f      	ldr	r2, [pc, #60]	; (8001cf0 <_ZL12MX_I2S2_Initv+0x64>)
 8001cb4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001cc8:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cca:	f006 fa6f 	bl	80081ac <HAL_I2S_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	bf14      	ite	ne
 8001cd4:	2301      	movne	r3, #1
 8001cd6:	2300      	moveq	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <_ZL12MX_I2S2_Initv+0x56>
  {
    Error_Handler();
 8001cde:	f000 faef 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000294 	.word	0x20000294
 8001cec:	40003800 	.word	0x40003800
 8001cf0:	00017700 	.word	0x00017700

08001cf4 <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001cfa:	4a16      	ldr	r2, [pc, #88]	; (8001d54 <_ZL12MX_I2S3_Initv+0x60>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d04:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d18:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d1c:	4a0e      	ldr	r2, [pc, #56]	; (8001d58 <_ZL12MX_I2S3_Initv+0x64>)
 8001d1e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001d32:	4807      	ldr	r0, [pc, #28]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d34:	f006 fa3a 	bl	80081ac <HAL_I2S_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf14      	ite	ne
 8001d3e:	2301      	movne	r3, #1
 8001d40:	2300      	moveq	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 8001d48:	f000 faba 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200002dc 	.word	0x200002dc
 8001d54:	40003c00 	.word	0x40003c00
 8001d58:	00017700 	.word	0x00017700

08001d5c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d62:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <_ZL12MX_SPI1_Initv+0x74>)
 8001d64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d6e:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d74:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001da8:	220a      	movs	r2, #10
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dac:	4807      	ldr	r0, [pc, #28]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001dae:	f007 fc85 	bl	80096bc <HAL_SPI_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf14      	ite	ne
 8001db8:	2301      	movne	r3, #1
 8001dba:	2300      	moveq	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001dc2:	f000 fa7d 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000324 	.word	0x20000324
 8001dd0:	40013000 	.word	0x40013000

08001dd4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dda:	f107 0308 	add.w	r3, r7, #8
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de8:	463b      	mov	r3, r7
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001df2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001df8:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001dfa:	222f      	movs	r2, #47	; 0x2f
 8001dfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001e04:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e18:	481b      	ldr	r0, [pc, #108]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e1a:	f007 fcd8 	bl	80097ce <HAL_TIM_Base_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001e2e:	f000 fa47 	bl	80022c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4812      	ldr	r0, [pc, #72]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e40:	f008 f84a 	bl	8009ed8 <HAL_TIM_ConfigClockSource>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf14      	ite	ne
 8001e4a:	2301      	movne	r3, #1
 8001e4c:	2300      	moveq	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001e54:	f000 fa34 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e60:	463b      	mov	r3, r7
 8001e62:	4619      	mov	r1, r3
 8001e64:	4808      	ldr	r0, [pc, #32]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e66:	f008 fbf3 	bl	800a650 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001e7a:	f000 fa21 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000037c 	.word	0x2000037c

08001e8c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08e      	sub	sp, #56	; 0x38
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea0:	f107 0320 	add.w	r3, r7, #32
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
 8001eb8:	615a      	str	r2, [r3, #20]
 8001eba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ebc:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001ebe:	4a42      	ldr	r2, [pc, #264]	; (8001fc8 <_ZL12MX_TIM3_Initv+0x13c>)
 8001ec0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 8001ec2:	4b40      	ldr	r3, [pc, #256]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001ec4:	220b      	movs	r2, #11
 8001ec6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec8:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 8001ece:	4b3d      	ldr	r3, [pc, #244]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001ed0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001ed4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001edc:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ee2:	4838      	ldr	r0, [pc, #224]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001ee4:	f007 fc73 	bl	80097ce <HAL_TIM_Base_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf14      	ite	ne
 8001eee:	2301      	movne	r3, #1
 8001ef0:	2300      	moveq	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8001ef8:	f000 f9e2 	bl	80022c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f06:	4619      	mov	r1, r3
 8001f08:	482e      	ldr	r0, [pc, #184]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001f0a:	f007 ffe5 	bl	8009ed8 <HAL_TIM_ConfigClockSource>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bf14      	ite	ne
 8001f14:	2301      	movne	r3, #1
 8001f16:	2300      	moveq	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8001f1e:	f000 f9cf 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f22:	4828      	ldr	r0, [pc, #160]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001f24:	f007 fd04 	bl	8009930 <HAL_TIM_PWM_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf14      	ite	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	2300      	moveq	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8001f38:	f000 f9c2 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f44:	f107 0320 	add.w	r3, r7, #32
 8001f48:	4619      	mov	r1, r3
 8001f4a:	481e      	ldr	r0, [pc, #120]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001f4c:	f008 fb80 	bl	800a650 <HAL_TIMEx_MasterConfigSynchronization>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8001f60:	f000 f9ae 	bl	80022c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f64:	2360      	movs	r3, #96	; 0x60
 8001f66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	2200      	movs	r2, #0
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4812      	ldr	r0, [pc, #72]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001f7c:	f007 feea 	bl	8009d54 <HAL_TIM_PWM_ConfigChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bf14      	ite	ne
 8001f86:	2301      	movne	r3, #1
 8001f88:	2300      	moveq	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8001f90:	f000 f996 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	2208      	movs	r2, #8
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480a      	ldr	r0, [pc, #40]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001f9c:	f007 feda 	bl	8009d54 <HAL_TIM_PWM_ConfigChannel>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf14      	ite	ne
 8001fa6:	2301      	movne	r3, #1
 8001fa8:	2300      	moveq	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8001fb0:	f000 f986 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001fb6:	f003 f93d 	bl	8005234 <HAL_TIM_MspPostInit>

}
 8001fba:	bf00      	nop
 8001fbc:	3738      	adds	r7, #56	; 0x38
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200003c4 	.word	0x200003c4
 8001fc8:	40000400 	.word	0x40000400

08001fcc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001fd2:	4a14      	ldr	r2, [pc, #80]	; (8002024 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001fd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001fd8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001fdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002002:	4807      	ldr	r0, [pc, #28]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002004:	f008 fba6 	bl	800a754 <HAL_UART_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	bf14      	ite	ne
 800200e:	2301      	movne	r3, #1
 8002010:	2300      	moveq	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002018:	f000 f952 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	2000040c 	.word	0x2000040c
 8002024:	40011000 	.word	0x40011000

08002028 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <_ZL11MX_DMA_Initv+0x4c>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <_ZL11MX_DMA_Initv+0x4c>)
 8002038:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <_ZL11MX_DMA_Initv+0x4c>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	203a      	movs	r0, #58	; 0x3a
 8002050:	f003 fd3d 	bl	8005ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002054:	203a      	movs	r0, #58	; 0x3a
 8002056:	f003 fd56 	bl	8005b06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	2046      	movs	r0, #70	; 0x46
 8002060:	f003 fd35 	bl	8005ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002064:	2046      	movs	r0, #70	; 0x46
 8002066:	f003 fd4e 	bl	8005b06 <HAL_NVIC_EnableIRQ>

}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800

08002078 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08c      	sub	sp, #48	; 0x30
 800207c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207e:	f107 031c 	add.w	r3, r7, #28
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
 800208c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	4b85      	ldr	r3, [pc, #532]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a84      	ldr	r2, [pc, #528]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 8002098:	f043 0310 	orr.w	r3, r3, #16
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b82      	ldr	r3, [pc, #520]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	61bb      	str	r3, [r7, #24]
 80020a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	4b7e      	ldr	r3, [pc, #504]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a7d      	ldr	r2, [pc, #500]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b7b      	ldr	r3, [pc, #492]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	4b77      	ldr	r3, [pc, #476]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a76      	ldr	r2, [pc, #472]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b74      	ldr	r3, [pc, #464]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b70      	ldr	r3, [pc, #448]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a6f      	ldr	r2, [pc, #444]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	4b69      	ldr	r3, [pc, #420]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a68      	ldr	r2, [pc, #416]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b66      	ldr	r3, [pc, #408]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	4b62      	ldr	r3, [pc, #392]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a61      	ldr	r2, [pc, #388]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8002136:	2200      	movs	r2, #0
 8002138:	f44f 7142 	mov.w	r1, #776	; 0x308
 800213c:	485b      	ldr	r0, [pc, #364]	; (80022ac <_ZL12MX_GPIO_Initv+0x234>)
 800213e:	f004 fa9b 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002142:	2201      	movs	r2, #1
 8002144:	2101      	movs	r1, #1
 8002146:	485a      	ldr	r0, [pc, #360]	; (80022b0 <_ZL12MX_GPIO_Initv+0x238>)
 8002148:	f004 fa96 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 800214c:	2200      	movs	r2, #0
 800214e:	2106      	movs	r1, #6
 8002150:	4858      	ldr	r0, [pc, #352]	; (80022b4 <_ZL12MX_GPIO_Initv+0x23c>)
 8002152:	f004 fa91 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002156:	2200      	movs	r2, #0
 8002158:	f24f 0110 	movw	r1, #61456	; 0xf010
 800215c:	4856      	ldr	r0, [pc, #344]	; (80022b8 <_ZL12MX_GPIO_Initv+0x240>)
 800215e:	f004 fa8b 	bl	8006678 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8002162:	2304      	movs	r3, #4
 8002164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800216e:	f107 031c 	add.w	r3, r7, #28
 8002172:	4619      	mov	r1, r3
 8002174:	484d      	ldr	r0, [pc, #308]	; (80022ac <_ZL12MX_GPIO_Initv+0x234>)
 8002176:	f004 f8e3 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|IN3_Pin|IN4_Pin;
 800217a:	f44f 7342 	mov.w	r3, #776	; 0x308
 800217e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002180:	2301      	movs	r3, #1
 8002182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	4619      	mov	r1, r3
 8002192:	4846      	ldr	r0, [pc, #280]	; (80022ac <_ZL12MX_GPIO_Initv+0x234>)
 8002194:	f004 f8d4 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8002198:	2332      	movs	r3, #50	; 0x32
 800219a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800219c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80021a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	4619      	mov	r1, r3
 80021ac:	483f      	ldr	r0, [pc, #252]	; (80022ac <_ZL12MX_GPIO_Initv+0x234>)
 80021ae:	f004 f8c7 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80021b2:	2301      	movs	r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b6:	2301      	movs	r3, #1
 80021b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	4619      	mov	r1, r3
 80021c8:	4839      	ldr	r0, [pc, #228]	; (80022b0 <_ZL12MX_GPIO_Initv+0x238>)
 80021ca:	f004 f8b9 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021ce:	2301      	movs	r3, #1
 80021d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021d2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80021d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	4619      	mov	r1, r3
 80021e2:	4836      	ldr	r0, [pc, #216]	; (80022bc <_ZL12MX_GPIO_Initv+0x244>)
 80021e4:	f004 f8ac 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 80021e8:	2306      	movs	r3, #6
 80021ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ec:	2301      	movs	r3, #1
 80021ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f8:	f107 031c 	add.w	r3, r7, #28
 80021fc:	4619      	mov	r1, r3
 80021fe:	482d      	ldr	r0, [pc, #180]	; (80022b4 <_ZL12MX_GPIO_Initv+0x23c>)
 8002200:	f004 f89e 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_ENCODER_A_Pin LEFT_ENCODER_B_Pin RIGHT_ENCODER_A_Pin RIGHT_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = LEFT_ENCODER_A_Pin|LEFT_ENCODER_B_Pin|RIGHT_ENCODER_A_Pin|RIGHT_ENCODER_B_Pin;
 8002204:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800220a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800220e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	4824      	ldr	r0, [pc, #144]	; (80022ac <_ZL12MX_GPIO_Initv+0x234>)
 800221c:	f004 f890 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002226:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800222a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	4619      	mov	r1, r3
 8002236:	481f      	ldr	r0, [pc, #124]	; (80022b4 <_ZL12MX_GPIO_Initv+0x23c>)
 8002238:	f004 f882 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800223c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002242:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	4619      	mov	r1, r3
 8002252:	4819      	ldr	r0, [pc, #100]	; (80022b8 <_ZL12MX_GPIO_Initv+0x240>)
 8002254:	f004 f874 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002258:	f24f 0310 	movw	r3, #61456	; 0xf010
 800225c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225e:	2301      	movs	r3, #1
 8002260:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800226a:	f107 031c 	add.w	r3, r7, #28
 800226e:	4619      	mov	r1, r3
 8002270:	4811      	ldr	r0, [pc, #68]	; (80022b8 <_ZL12MX_GPIO_Initv+0x240>)
 8002272:	f004 f865 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002276:	2320      	movs	r3, #32
 8002278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002282:	f107 031c 	add.w	r3, r7, #28
 8002286:	4619      	mov	r1, r3
 8002288:	480b      	ldr	r0, [pc, #44]	; (80022b8 <_ZL12MX_GPIO_Initv+0x240>)
 800228a:	f004 f859 	bl	8006340 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	2028      	movs	r0, #40	; 0x28
 8002294:	f003 fc1b 	bl	8005ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002298:	2028      	movs	r0, #40	; 0x28
 800229a:	f003 fc34 	bl	8005b06 <HAL_NVIC_EnableIRQ>

}
 800229e:	bf00      	nop
 80022a0:	3730      	adds	r7, #48	; 0x30
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40020800 	.word	0x40020800
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020c00 	.word	0x40020c00
 80022bc:	40020000 	.word	0x40020000

080022c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c4:	b672      	cpsid	i
}
 80022c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <Error_Handler+0x8>

080022ca <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	ed87 0a01 	vstr	s0, [r7, #4]
 80022d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022d8:	eef0 7ae7 	vabs.f32	s15, s15
 80022dc:	eeb0 0a67 	vmov.f32	s0, s15
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	ed87 0a01 	vstr	s0, [r7, #4]
 80022f4:	ed97 0a01 	vldr	s0, [r7, #4]
 80022f8:	f00c fefa 	bl	800f0f0 <roundf>
 80022fc:	eef0 7a40 	vmov.f32	s15, s0
 8002300:	eeb0 0a67 	vmov.f32	s0, s15
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <_ZN3ros3MsgC1Ev+0x1c>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	08011f60 	.word	0x08011f60

0800234c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
      data()
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ffe8 	bl	800232c <_ZN3ros3MsgC1Ev>
 800235c:	4a06      	ldr	r2, [pc, #24]	; (8002378 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ffcf 	bl	800230a <_ZN3ros4TimeC1Ev>
    {
    }
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	08011f48 	.word	0x08011f48

0800237c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6859      	ldr	r1, [r3, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	4413      	add	r3, r2
 8002394:	b2ca      	uxtb	r2, r1
 8002396:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	0a19      	lsrs	r1, r3, #8
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3301      	adds	r3, #1
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	b2ca      	uxtb	r2, r1
 80023a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	0c19      	lsrs	r1, r3, #16
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3302      	adds	r3, #2
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	b2ca      	uxtb	r2, r1
 80023ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	0e19      	lsrs	r1, r3, #24
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3303      	adds	r3, #3
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	4413      	add	r3, r2
 80023ca:	b2ca      	uxtb	r2, r1
 80023cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3304      	adds	r3, #4
 80023d2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6899      	ldr	r1, [r3, #8]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	b2ca      	uxtb	r2, r1
 80023e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0a19      	lsrs	r1, r3, #8
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3301      	adds	r3, #1
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	b2ca      	uxtb	r2, r1
 80023f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	0c19      	lsrs	r1, r3, #16
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	3302      	adds	r3, #2
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	4413      	add	r3, r2
 8002402:	b2ca      	uxtb	r2, r1
 8002404:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	0e19      	lsrs	r1, r3, #24
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3303      	adds	r3, #3
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	4413      	add	r3, r2
 8002414:	b2ca      	uxtb	r2, r1
 8002416:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3304      	adds	r3, #4
 800241c:	60fb      	str	r3, [r7, #12]
      return offset;
 800241e:	68fb      	ldr	r3, [r7, #12]
    }
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	4413      	add	r3, r2
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3301      	adds	r3, #1
 8002450:	6839      	ldr	r1, [r7, #0]
 8002452:	440b      	add	r3, r1
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3302      	adds	r3, #2
 8002466:	6839      	ldr	r1, [r7, #0]
 8002468:	440b      	add	r3, r1
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	041b      	lsls	r3, r3, #16
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3303      	adds	r3, #3
 800247c:	6839      	ldr	r1, [r7, #0]
 800247e:	440b      	add	r3, r1
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	061b      	lsls	r3, r3, #24
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3304      	adds	r3, #4
 800248e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	4413      	add	r3, r2
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	3301      	adds	r3, #1
 80024a6:	6839      	ldr	r1, [r7, #0]
 80024a8:	440b      	add	r3, r1
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3302      	adds	r3, #2
 80024bc:	6839      	ldr	r1, [r7, #0]
 80024be:	440b      	add	r3, r1
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	041b      	lsls	r3, r3, #16
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3303      	adds	r3, #3
 80024d2:	6839      	ldr	r1, [r7, #0]
 80024d4:	440b      	add	r3, r1
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	061b      	lsls	r3, r3, #24
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3304      	adds	r3, #4
 80024e4:	60fb      	str	r3, [r7, #12]
     return offset;
 80024e6:	68fb      	ldr	r3, [r7, #12]
    }
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	08011c70 	.word	0x08011c70

08002510 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	08011c80 	.word	0x08011c80

0800252c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fef8 	bl	800232c <_ZN3ros3MsgC1Ev>
 800253c:	4a0b      	ldr	r2, [pc, #44]	; (800256c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	809a      	strh	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a07      	ldr	r2, [pc, #28]	; (8002570 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002552:	60da      	str	r2, [r3, #12]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a06      	ldr	r2, [pc, #24]	; (8002570 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002558:	611a      	str	r2, [r3, #16]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	615a      	str	r2, [r3, #20]
    {
    }
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	08011f30 	.word	0x08011f30
 8002570:	08011ca4 	.word	0x08011ca4

08002574 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8899      	ldrh	r1, [r3, #4]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	4413      	add	r3, r2
 800258c:	b2ca      	uxtb	r2, r1
 800258e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	889b      	ldrh	r3, [r3, #4]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	b299      	uxth	r1, r3
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	3301      	adds	r3, #1
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	b2ca      	uxtb	r2, r1
 80025a2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	3302      	adds	r3, #2
 80025a8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fd fe16 	bl	80001e0 <strlen>
 80025b4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	69b9      	ldr	r1, [r7, #24]
 80025be:	4618      	mov	r0, r3
 80025c0:	f001 fe22 	bl	8004208 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	3304      	adds	r3, #4
 80025c8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	18d0      	adds	r0, r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4619      	mov	r1, r3
 80025d8:	f00c fdf0 	bl	800f1bc <memcpy>
      offset += length_topic_name;
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	4413      	add	r3, r2
 80025e2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd fdf9 	bl	80001e0 <strlen>
 80025ee:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	6979      	ldr	r1, [r7, #20]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f001 fe05 	bl	8004208 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3304      	adds	r3, #4
 8002602:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	18d0      	adds	r0, r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4619      	mov	r1, r3
 8002612:	f00c fdd3 	bl	800f1bc <memcpy>
      offset += length_message_type;
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	4413      	add	r3, r2
 800261c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd fddc 	bl	80001e0 <strlen>
 8002628:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	4413      	add	r3, r2
 8002630:	6939      	ldr	r1, [r7, #16]
 8002632:	4618      	mov	r0, r3
 8002634:	f001 fde8 	bl	8004208 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	3304      	adds	r3, #4
 800263c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	18d0      	adds	r0, r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4619      	mov	r1, r3
 800264c:	f00c fdb6 	bl	800f1bc <memcpy>
      offset += length_md5sum;
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800265e:	68f9      	ldr	r1, [r7, #12]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	4413      	add	r3, r2
 8002666:	b2ca      	uxtb	r2, r1
 8002668:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	0a19      	lsrs	r1, r3, #8
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3301      	adds	r3, #1
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	4413      	add	r3, r2
 8002676:	b2ca      	uxtb	r2, r1
 8002678:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	0c19      	lsrs	r1, r3, #16
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3302      	adds	r3, #2
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	4413      	add	r3, r2
 8002686:	b2ca      	uxtb	r2, r1
 8002688:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	0e19      	lsrs	r1, r3, #24
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3303      	adds	r3, #3
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	4413      	add	r3, r2
 8002696:	b2ca      	uxtb	r2, r1
 8002698:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3304      	adds	r3, #4
 800269e:	61fb      	str	r3, [r7, #28]
      return offset;
 80026a0:	69fb      	ldr	r3, [r7, #28]
    }
 80026a2:	4618      	mov	r0, r3
 80026a4:	3720      	adds	r7, #32
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b08a      	sub	sp, #40	; 0x28
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	889b      	ldrh	r3, [r3, #4]
 80026ca:	b21a      	sxth	r2, r3
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	3301      	adds	r3, #1
 80026d0:	6839      	ldr	r1, [r7, #0]
 80026d2:	440b      	add	r3, r1
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	b21b      	sxth	r3, r3
 80026da:	4313      	orrs	r3, r2
 80026dc:	b21b      	sxth	r3, r3
 80026de:	b29a      	uxth	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	3302      	adds	r3, #2
 80026e8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	441a      	add	r2, r3
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f001 fda4 	bl	8004244 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	3304      	adds	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	4413      	add	r3, r2
 800270c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270e:	429a      	cmp	r2, r3
 8002710:	d20c      	bcs.n	800272c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	441a      	add	r2, r3
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	3b01      	subs	r3, #1
 800271c:	6839      	ldr	r1, [r7, #0]
 800271e:	440b      	add	r3, r1
 8002720:	7812      	ldrb	r2, [r2, #0]
 8002722:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	3301      	adds	r3, #1
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
 800272a:	e7ec      	b.n	8002706 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	4413      	add	r3, r2
 8002732:	3b01      	subs	r3, #1
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	4413      	add	r3, r2
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	3b01      	subs	r3, #1
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	441a      	add	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	4413      	add	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	441a      	add	r2, r3
 8002756:	f107 0310 	add.w	r3, r7, #16
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f001 fd71 	bl	8004244 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	3304      	adds	r3, #4
 8002766:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	623b      	str	r3, [r7, #32]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4413      	add	r3, r2
 8002772:	6a3a      	ldr	r2, [r7, #32]
 8002774:	429a      	cmp	r2, r3
 8002776:	d20c      	bcs.n	8002792 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	441a      	add	r2, r3
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	3b01      	subs	r3, #1
 8002782:	6839      	ldr	r1, [r7, #0]
 8002784:	440b      	add	r3, r1
 8002786:	7812      	ldrb	r2, [r2, #0]
 8002788:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	3301      	adds	r3, #1
 800278e:	623b      	str	r3, [r7, #32]
 8002790:	e7ec      	b.n	800276c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	3b01      	subs	r3, #1
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	4413      	add	r3, r2
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	441a      	add	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	441a      	add	r2, r3
 80027bc:	f107 030c 	add.w	r3, r7, #12
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 fd3e 	bl	8004244 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	3304      	adds	r3, #4
 80027cc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d20c      	bcs.n	80027f8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	441a      	add	r2, r3
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	6839      	ldr	r1, [r7, #0]
 80027ea:	440b      	add	r3, r1
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3301      	adds	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	e7ec      	b.n	80027d2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4413      	add	r3, r2
 80027fe:	3b01      	subs	r3, #1
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	4413      	add	r3, r2
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	3b01      	subs	r3, #1
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	441a      	add	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4413      	add	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	6839      	ldr	r1, [r7, #0]
 8002826:	440a      	add	r2, r1
 8002828:	7812      	ldrb	r2, [r2, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	3301      	adds	r3, #1
 8002834:	6839      	ldr	r1, [r7, #0]
 8002836:	440b      	add	r3, r1
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	4313      	orrs	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	3302      	adds	r3, #2
 8002846:	6839      	ldr	r1, [r7, #0]
 8002848:	440b      	add	r3, r1
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	041b      	lsls	r3, r3, #16
 800284e:	4313      	orrs	r3, r2
 8002850:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	3303      	adds	r3, #3
 8002858:	6839      	ldr	r1, [r7, #0]
 800285a:	440b      	add	r3, r1
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	061b      	lsls	r3, r3, #24
 8002860:	4313      	orrs	r3, r2
 8002862:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	3304      	adds	r3, #4
 800286e:	61bb      	str	r3, [r7, #24]
     return offset;
 8002870:	69bb      	ldr	r3, [r7, #24]
    }
 8002872:	4618      	mov	r0, r3
 8002874:	3728      	adds	r7, #40	; 0x28
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	08011ca8 	.word	0x08011ca8

08002898 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	08011cc4 	.word	0x08011cc4

080028b4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fd34 	bl	800232c <_ZN3ros3MsgC1Ev>
 80028c4:	4a06      	ldr	r2, [pc, #24]	; (80028e0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	711a      	strb	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80028d4:	609a      	str	r2, [r3, #8]
    {
    }
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	08011f18 	.word	0x08011f18
 80028e4:	08011ca4 	.word	0x08011ca4

080028e8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	7912      	ldrb	r2, [r2, #4]
 8002900:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3301      	adds	r3, #1
 8002906:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fc67 	bl	80001e0 <strlen>
 8002912:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	4413      	add	r3, r2
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	4618      	mov	r0, r3
 800291e:	f001 fc73 	bl	8004208 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3304      	adds	r3, #4
 8002926:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	18d0      	adds	r0, r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	4619      	mov	r1, r3
 8002936:	f00c fc41 	bl	800f1bc <memcpy>
      offset += length_msg;
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4413      	add	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
      return offset;
 8002942:	68fb      	ldr	r3, [r7, #12]
    }
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	4413      	add	r3, r2
 8002960:	781a      	ldrb	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	3301      	adds	r3, #1
 800296a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	441a      	add	r2, r3
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f001 fc63 	bl	8004244 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	3304      	adds	r3, #4
 8002982:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4413      	add	r3, r2
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	429a      	cmp	r2, r3
 8002992:	d20c      	bcs.n	80029ae <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	441a      	add	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	3b01      	subs	r3, #1
 800299e:	6839      	ldr	r1, [r7, #0]
 80029a0:	440b      	add	r3, r1
 80029a2:	7812      	ldrb	r2, [r2, #0]
 80029a4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	3301      	adds	r3, #1
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	e7ec      	b.n	8002988 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	3b01      	subs	r3, #1
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	4413      	add	r3, r2
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	441a      	add	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4413      	add	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
     return offset;
 80029d2:	693b      	ldr	r3, [r7, #16]
    }
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	08011ce8 	.word	0x08011ce8

080029f8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	08011cfc 	.word	0x08011cfc

08002a14 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fc84 	bl	800232c <_ZN3ros3MsgC1Ev>
 8002a24:	4a11      	ldr	r2, [pc, #68]	; (8002a6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	60da      	str	r2, [r3, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	615a      	str	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	61da      	str	r2, [r3, #28]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	621a      	str	r2, [r3, #32]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	08011f00 	.word	0x08011f00

08002a70 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6859      	ldr	r1, [r3, #4]
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	4413      	add	r3, r2
 8002a88:	b2ca      	uxtb	r2, r1
 8002a8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	0a19      	lsrs	r1, r3, #8
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	3301      	adds	r3, #1
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	4413      	add	r3, r2
 8002a9a:	b2ca      	uxtb	r2, r1
 8002a9c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	0c19      	lsrs	r1, r3, #16
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	b2ca      	uxtb	r2, r1
 8002aae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	0e19      	lsrs	r1, r3, #24
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	3303      	adds	r3, #3
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	4413      	add	r3, r2
 8002abe:	b2ca      	uxtb	r2, r1
 8002ac0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002ac8:	2300      	movs	r3, #0
 8002aca:	623b      	str	r3, [r7, #32]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	6a3a      	ldr	r2, [r7, #32]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d22b      	bcs.n	8002b2e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002ae4:	6939      	ldr	r1, [r7, #16]
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	b2ca      	uxtb	r2, r1
 8002aee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	0a19      	lsrs	r1, r3, #8
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	3301      	adds	r3, #1
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	b2ca      	uxtb	r2, r1
 8002afe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	0c19      	lsrs	r1, r3, #16
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	3302      	adds	r3, #2
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	b2ca      	uxtb	r2, r1
 8002b0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	0e19      	lsrs	r1, r3, #24
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	3303      	adds	r3, #3
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	b2ca      	uxtb	r2, r1
 8002b1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	3304      	adds	r3, #4
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	623b      	str	r3, [r7, #32]
 8002b2c:	e7ce      	b.n	8002acc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6919      	ldr	r1, [r3, #16]
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	4413      	add	r3, r2
 8002b38:	b2ca      	uxtb	r2, r1
 8002b3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	0a19      	lsrs	r1, r3, #8
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	3301      	adds	r3, #1
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	4413      	add	r3, r2
 8002b4a:	b2ca      	uxtb	r2, r1
 8002b4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	0c19      	lsrs	r1, r3, #16
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	3302      	adds	r3, #2
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	b2ca      	uxtb	r2, r1
 8002b5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	0e19      	lsrs	r1, r3, #24
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	3303      	adds	r3, #3
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b2ca      	uxtb	r2, r1
 8002b70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	3304      	adds	r3, #4
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d22b      	bcs.n	8002bde <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002b94:	68f9      	ldr	r1, [r7, #12]
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	b2ca      	uxtb	r2, r1
 8002b9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	0a19      	lsrs	r1, r3, #8
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	b2ca      	uxtb	r2, r1
 8002bae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	0c19      	lsrs	r1, r3, #16
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	4413      	add	r3, r2
 8002bbc:	b2ca      	uxtb	r2, r1
 8002bbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	0e19      	lsrs	r1, r3, #24
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	3303      	adds	r3, #3
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	b2ca      	uxtb	r2, r1
 8002bce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]
 8002bdc:	e7ce      	b.n	8002b7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69d9      	ldr	r1, [r3, #28]
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	b2ca      	uxtb	r2, r1
 8002bea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	0a19      	lsrs	r1, r3, #8
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b2ca      	uxtb	r2, r1
 8002bfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	0c19      	lsrs	r1, r3, #16
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	3302      	adds	r3, #2
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b2ca      	uxtb	r2, r1
 8002c0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	0e19      	lsrs	r1, r3, #24
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	3303      	adds	r3, #3
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	b2ca      	uxtb	r2, r1
 8002c20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	3304      	adds	r3, #4
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d228      	bcs.n	8002c88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd facc 	bl	80001e0 <strlen>
 8002c48:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	6979      	ldr	r1, [r7, #20]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 fad8 	bl	8004208 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	18d0      	adds	r0, r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4619      	mov	r1, r3
 8002c74:	f00c faa2 	bl	800f1bc <memcpy>
      offset += length_stringsi;
 8002c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	3301      	adds	r3, #1
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	e7d1      	b.n	8002c2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3728      	adds	r7, #40	; 0x28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b08e      	sub	sp, #56	; 0x38
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cac:	3301      	adds	r3, #1
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	6a3a      	ldr	r2, [r7, #32]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbe:	3302      	adds	r3, #2
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	041b      	lsls	r3, r3, #16
 8002cc8:	6a3a      	ldr	r2, [r7, #32]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd0:	3303      	adds	r3, #3
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	6a3a      	ldr	r2, [r7, #32]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	6a3a      	ldr	r2, [r7, #32]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d90a      	bls.n	8002d06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f00c ffbe 	bl	800fc7c <realloc>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a3a      	ldr	r2, [r7, #32]
 8002d0a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d236      	bcs.n	8002d88 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d22:	6839      	ldr	r1, [r7, #0]
 8002d24:	440a      	add	r2, r1
 8002d26:	7812      	ldrb	r2, [r2, #0]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d30:	3301      	adds	r3, #1
 8002d32:	6839      	ldr	r1, [r7, #0]
 8002d34:	440b      	add	r3, r1
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d42:	3302      	adds	r3, #2
 8002d44:	6839      	ldr	r1, [r7, #0]
 8002d46:	440b      	add	r3, r1
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	041b      	lsls	r3, r3, #16
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d54:	3303      	adds	r3, #3
 8002d56:	6839      	ldr	r1, [r7, #0]
 8002d58:	440b      	add	r3, r1
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	061b      	lsls	r3, r3, #24
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	3208      	adds	r2, #8
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	3301      	adds	r3, #1
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
 8002d86:	e7c3      	b.n	8002d10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d94:	3301      	adds	r3, #1
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	4413      	add	r3, r2
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da6:	3302      	adds	r3, #2
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	041b      	lsls	r3, r3, #16
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	3303      	adds	r3, #3
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	061b      	lsls	r3, r3, #24
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dca:	3304      	adds	r3, #4
 8002dcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d90a      	bls.n	8002dee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4619      	mov	r1, r3
 8002de2:	4610      	mov	r0, r2
 8002de4:	f00c ff4a 	bl	800fc7c <realloc>
 8002de8:	4602      	mov	r2, r0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002df4:	2300      	movs	r3, #0
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d236      	bcs.n	8002e70 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e0a:	6839      	ldr	r1, [r7, #0]
 8002e0c:	440a      	add	r2, r1
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e18:	3301      	adds	r3, #1
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	440b      	add	r3, r1
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	6839      	ldr	r1, [r7, #0]
 8002e2e:	440b      	add	r3, r1
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	041b      	lsls	r3, r3, #16
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3c:	3303      	adds	r3, #3
 8002e3e:	6839      	ldr	r1, [r7, #0]
 8002e40:	440b      	add	r3, r1
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e52:	3304      	adds	r3, #4
 8002e54:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	3214      	adds	r2, #20
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e6e:	e7c3      	b.n	8002df8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	4413      	add	r3, r2
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	4413      	add	r3, r2
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8e:	3302      	adds	r3, #2
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	041b      	lsls	r3, r3, #16
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea0:	3303      	adds	r3, #3
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	061b      	lsls	r3, r3, #24
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d90a      	bls.n	8002ed6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f00c fed6 	bl	800fc7c <realloc>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002edc:	2300      	movs	r3, #0
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d23f      	bcs.n	8002f6a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	441a      	add	r2, r3
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 f9a4 	bl	8004244 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efe:	3304      	adds	r3, #4
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
 8002f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d20c      	bcs.n	8002f2c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	441a      	add	r2, r3
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	6839      	ldr	r1, [r7, #0]
 8002f1e:	440b      	add	r3, r1
 8002f20:	7812      	ldrb	r2, [r2, #0]
 8002f22:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	3301      	adds	r3, #1
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	e7ec      	b.n	8002f06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4413      	add	r3, r2
 8002f32:	3b01      	subs	r3, #1
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	4413      	add	r3, r2
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	441a      	add	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	3220      	adds	r2, #32
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	3301      	adds	r3, #1
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f68:	e7ba      	b.n	8002ee0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3738      	adds	r7, #56	; 0x38
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	08011e3c 	.word	0x08011e3c

08002f90 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	08011d20 	.word	0x08011d20

08002fac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	611a      	str	r2, [r3, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68d8      	ldr	r0, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6891      	ldr	r1, [r2, #8]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	4798      	blx	r3
 8002ff8:	4603      	mov	r3, r0
  };
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
  }
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8003030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <_ZN13STM32HardwareC1Ev+0x34>)
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	2000040c 	.word	0x2000040c

08003078 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f804 	bl	800308e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3304      	adds	r3, #4
 800309e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030a2:	4619      	mov	r1, r3
 80030a4:	f007 fc22 	bl	800a8ec <HAL_UART_Receive_DMA>
    }
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80030b8:	f04f 33ff 	mov.w	r3, #4294967295
 80030bc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff ffa8 	bl	800301a <_ZN13STM32Hardware10getRdmaIndEv>
 80030ca:	4603      	mov	r3, r0
 80030cc:	429c      	cmp	r4, r3
 80030ce:	bf14      	ite	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	2300      	moveq	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d012      	beq.n	8003100 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80030e0:	1c59      	adds	r1, r3, #1
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	791b      	ldrb	r3, [r3, #4]
 80030ee:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80030f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 8003100:	68fb      	ldr	r3, [r7, #12]
    }
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bd90      	pop	{r4, r7, pc}
	...

0800310c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b20      	cmp	r3, #32
 8003120:	d108      	bne.n	8003134 <_ZN13STM32Hardware5flushEv+0x28>
 8003122:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	f083 0301 	eor.w	r3, r3, #1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <_ZN13STM32Hardware5flushEv+0x28>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <_ZN13STM32Hardware5flushEv+0x2a>
 8003134:	2300      	movs	r3, #0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d03f      	beq.n	80031ba <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 800313a:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <_ZN13STM32Hardware5flushEv+0xb8>)
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800314c:	429a      	cmp	r2, r3
 800314e:	d031      	beq.n	80031b4 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800315c:	429a      	cmp	r2, r3
 800315e:	d20a      	bcs.n	8003176 <_ZN13STM32Hardware5flushEv+0x6a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003166:	b29a      	uxth	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800316e:	b29b      	uxth	r3, r3
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	b29b      	uxth	r3, r3
 8003174:	e006      	b.n	8003184 <_ZN13STM32Hardware5flushEv+0x78>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800317c:	b29b      	uxth	r3, r3
 800317e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8003182:	b29b      	uxth	r3, r3
 8003184:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003190:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	89fa      	ldrh	r2, [r7, #14]
 800319a:	4619      	mov	r1, r3
 800319c:	f007 fb28 	bl	800a7f0 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80031a6:	89fb      	ldrh	r3, [r7, #14]
 80031a8:	4413      	add	r3, r2
 80031aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        }
        mutex = false;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <_ZN13STM32Hardware5flushEv+0xb8>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
      }
    }
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000510 	.word	0x20000510

080031c8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
      uint16_t n = length;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	827b      	strh	r3, [r7, #18]
      n = n <= tbuflen ? n : tbuflen;
 80031da:	8a7b      	ldrh	r3, [r7, #18]
 80031dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e0:	d803      	bhi.n	80031ea <_ZN13STM32Hardware5writeEPhi+0x22>
 80031e2:	f107 0312 	add.w	r3, r7, #18
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	e001      	b.n	80031ee <_ZN13STM32Hardware5writeEPhi+0x26>
 80031ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ee:	827b      	strh	r3, [r7, #18]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80031f0:	8a7b      	ldrh	r3, [r7, #18]
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80031fa:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80031fe:	4293      	cmp	r3, r2
 8003200:	bf28      	it	cs
 8003202:	4613      	movcs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800320c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	4618      	mov	r0, r3
 800321a:	f00b ffcf 	bl	800f1bc <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003224:	8a7a      	ldrh	r2, [r7, #18]
 8003226:	4413      	add	r3, r2
 8003228:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

      if(n != n_tail){
 8003232:	8a7b      	ldrh	r3, [r7, #18]
 8003234:	461a      	mov	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	4293      	cmp	r3, r2
 800323a:	d00c      	beq.n	8003256 <_ZN13STM32Hardware5writeEPhi+0x8e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	18d1      	adds	r1, r2, r3
 8003248:	8a7b      	ldrh	r3, [r7, #18]
 800324a:	461a      	mov	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	461a      	mov	r2, r3
 8003252:	f00b ffb3 	bl	800f1bc <memcpy>
      }

      flush();
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f7ff ff58 	bl	800310c <_ZN13STM32Hardware5flushEv>
    }
 800325c:	bf00      	nop
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	f002 fb24 	bl	80058b8 <HAL_GetTick>
 8003270:	4603      	mov	r3, r0
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff f850 	bl	800232c <_ZN3ros3MsgC1Ev>
 800328c:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	08011ebc 	.word	0x08011ebc

080032cc <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80032cc:	b480      	push	{r7}
 80032ce:	b08b      	sub	sp, #44	; 0x2c
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80032e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80032e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ea:	6838      	ldr	r0, [r7, #0]
 80032ec:	4401      	add	r1, r0
 80032ee:	b2d3      	uxtb	r3, r2
 80032f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80032f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	0a02      	lsrs	r2, r0, #8
 8003300:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003304:	0a0b      	lsrs	r3, r1, #8
 8003306:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003308:	3101      	adds	r1, #1
 800330a:	6838      	ldr	r0, [r7, #0]
 800330c:	4401      	add	r1, r0
 800330e:	b2d3      	uxtb	r3, r2
 8003310:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003312:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	0c02      	lsrs	r2, r0, #16
 8003320:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003324:	0c0b      	lsrs	r3, r1, #16
 8003326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003328:	3102      	adds	r1, #2
 800332a:	6838      	ldr	r0, [r7, #0]
 800332c:	4401      	add	r1, r0
 800332e:	b2d3      	uxtb	r3, r2
 8003330:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003332:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	0e02      	lsrs	r2, r0, #24
 8003340:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003344:	0e0b      	lsrs	r3, r1, #24
 8003346:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003348:	3103      	adds	r1, #3
 800334a:	6838      	ldr	r0, [r7, #0]
 800334c:	4401      	add	r1, r0
 800334e:	b2d3      	uxtb	r3, r2
 8003350:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003352:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	000a      	movs	r2, r1
 8003360:	2300      	movs	r3, #0
 8003362:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003364:	3104      	adds	r1, #4
 8003366:	6838      	ldr	r0, [r7, #0]
 8003368:	4401      	add	r1, r0
 800336a:	b2d3      	uxtb	r3, r2
 800336c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800336e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	0a0a      	lsrs	r2, r1, #8
 800337c:	2300      	movs	r3, #0
 800337e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003380:	3105      	adds	r1, #5
 8003382:	6838      	ldr	r0, [r7, #0]
 8003384:	4401      	add	r1, r0
 8003386:	b2d3      	uxtb	r3, r2
 8003388:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800338a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	0c0a      	lsrs	r2, r1, #16
 8003398:	2300      	movs	r3, #0
 800339a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800339c:	3106      	adds	r1, #6
 800339e:	6838      	ldr	r0, [r7, #0]
 80033a0:	4401      	add	r1, r0
 80033a2:	b2d3      	uxtb	r3, r2
 80033a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80033a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	0e0a      	lsrs	r2, r1, #24
 80033b4:	2300      	movs	r3, #0
 80033b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b8:	3107      	adds	r1, #7
 80033ba:	6838      	ldr	r0, [r7, #0]
 80033bc:	4401      	add	r1, r0
 80033be:	b2d3      	uxtb	r3, r2
 80033c0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	3308      	adds	r3, #8
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80033ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80033d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d8:	6838      	ldr	r0, [r7, #0]
 80033da:	4401      	add	r1, r0
 80033dc:	b2d3      	uxtb	r3, r2
 80033de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80033e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	0a02      	lsrs	r2, r0, #8
 80033ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80033f2:	0a0b      	lsrs	r3, r1, #8
 80033f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033f6:	3101      	adds	r1, #1
 80033f8:	6838      	ldr	r0, [r7, #0]
 80033fa:	4401      	add	r1, r0
 80033fc:	b2d3      	uxtb	r3, r2
 80033fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003400:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	0c02      	lsrs	r2, r0, #16
 800340e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003412:	0c0b      	lsrs	r3, r1, #16
 8003414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003416:	3102      	adds	r1, #2
 8003418:	6838      	ldr	r0, [r7, #0]
 800341a:	4401      	add	r1, r0
 800341c:	b2d3      	uxtb	r3, r2
 800341e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003420:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	0e02      	lsrs	r2, r0, #24
 800342e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003432:	0e0b      	lsrs	r3, r1, #24
 8003434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003436:	3103      	adds	r1, #3
 8003438:	6838      	ldr	r0, [r7, #0]
 800343a:	4401      	add	r1, r0
 800343c:	b2d3      	uxtb	r3, r2
 800343e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003440:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	000a      	movs	r2, r1
 800344e:	2300      	movs	r3, #0
 8003450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003452:	3104      	adds	r1, #4
 8003454:	6838      	ldr	r0, [r7, #0]
 8003456:	4401      	add	r1, r0
 8003458:	b2d3      	uxtb	r3, r2
 800345a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800345c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	0a0a      	lsrs	r2, r1, #8
 800346a:	2300      	movs	r3, #0
 800346c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800346e:	3105      	adds	r1, #5
 8003470:	6838      	ldr	r0, [r7, #0]
 8003472:	4401      	add	r1, r0
 8003474:	b2d3      	uxtb	r3, r2
 8003476:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003478:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	0c0a      	lsrs	r2, r1, #16
 8003486:	2300      	movs	r3, #0
 8003488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800348a:	3106      	adds	r1, #6
 800348c:	6838      	ldr	r0, [r7, #0]
 800348e:	4401      	add	r1, r0
 8003490:	b2d3      	uxtb	r3, r2
 8003492:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003494:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	0e0a      	lsrs	r2, r1, #24
 80034a2:	2300      	movs	r3, #0
 80034a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a6:	3107      	adds	r1, #7
 80034a8:	6838      	ldr	r0, [r7, #0]
 80034aa:	4401      	add	r1, r0
 80034ac:	b2d3      	uxtb	r3, r2
 80034ae:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	3308      	adds	r3, #8
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80034bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80034c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c6:	6838      	ldr	r0, [r7, #0]
 80034c8:	4401      	add	r1, r0
 80034ca:	b2d3      	uxtb	r3, r2
 80034cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80034ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	0a02      	lsrs	r2, r0, #8
 80034dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80034e0:	0a0b      	lsrs	r3, r1, #8
 80034e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034e4:	3101      	adds	r1, #1
 80034e6:	6838      	ldr	r0, [r7, #0]
 80034e8:	4401      	add	r1, r0
 80034ea:	b2d3      	uxtb	r3, r2
 80034ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80034ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	0c02      	lsrs	r2, r0, #16
 80034fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003500:	0c0b      	lsrs	r3, r1, #16
 8003502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003504:	3102      	adds	r1, #2
 8003506:	6838      	ldr	r0, [r7, #0]
 8003508:	4401      	add	r1, r0
 800350a:	b2d3      	uxtb	r3, r2
 800350c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800350e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	0e02      	lsrs	r2, r0, #24
 800351c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003520:	0e0b      	lsrs	r3, r1, #24
 8003522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003524:	3103      	adds	r1, #3
 8003526:	6838      	ldr	r0, [r7, #0]
 8003528:	4401      	add	r1, r0
 800352a:	b2d3      	uxtb	r3, r2
 800352c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800352e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	000a      	movs	r2, r1
 800353c:	2300      	movs	r3, #0
 800353e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003540:	3104      	adds	r1, #4
 8003542:	6838      	ldr	r0, [r7, #0]
 8003544:	4401      	add	r1, r0
 8003546:	b2d3      	uxtb	r3, r2
 8003548:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800354a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	0a0a      	lsrs	r2, r1, #8
 8003558:	2300      	movs	r3, #0
 800355a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800355c:	3105      	adds	r1, #5
 800355e:	6838      	ldr	r0, [r7, #0]
 8003560:	4401      	add	r1, r0
 8003562:	b2d3      	uxtb	r3, r2
 8003564:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003566:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	0c0a      	lsrs	r2, r1, #16
 8003574:	2300      	movs	r3, #0
 8003576:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003578:	3106      	adds	r1, #6
 800357a:	6838      	ldr	r0, [r7, #0]
 800357c:	4401      	add	r1, r0
 800357e:	b2d3      	uxtb	r3, r2
 8003580:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003582:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	0e0a      	lsrs	r2, r1, #24
 8003590:	2300      	movs	r3, #0
 8003592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003594:	3107      	adds	r1, #7
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	4401      	add	r1, r0
 800359a:	b2d3      	uxtb	r3, r2
 800359c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	3308      	adds	r3, #8
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80035a6:	4618      	mov	r0, r3
 80035a8:	372c      	adds	r7, #44	; 0x2c
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80035b2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80035b6:	b0eb      	sub	sp, #428	; 0x1ac
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80035be:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80035d4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80035d8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80035dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035e0:	4413      	add	r3, r2
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2200      	movs	r2, #0
 80035e8:	461c      	mov	r4, r3
 80035ea:	4615      	mov	r5, r2
 80035ec:	ea40 0804 	orr.w	r8, r0, r4
 80035f0:	ea41 0905 	orr.w	r9, r1, r5
 80035f4:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035f8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80035fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003606:	4413      	add	r3, r2
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2200      	movs	r2, #0
 800360e:	469a      	mov	sl, r3
 8003610:	4693      	mov	fp, r2
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800361e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003622:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003626:	ea40 0402 	orr.w	r4, r0, r2
 800362a:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800362e:	430b      	orrs	r3, r1
 8003630:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003634:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003638:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800363c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003640:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003644:	1c9a      	adds	r2, r3, #2
 8003646:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800364a:	4413      	add	r3, r2
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2200      	movs	r2, #0
 8003652:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003656:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003666:	464c      	mov	r4, r9
 8003668:	0423      	lsls	r3, r4, #16
 800366a:	4644      	mov	r4, r8
 800366c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003670:	4644      	mov	r4, r8
 8003672:	0422      	lsls	r2, r4, #16
 8003674:	ea40 0402 	orr.w	r4, r0, r2
 8003678:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800367c:	430b      	orrs	r3, r1
 800367e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003682:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8003686:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800368a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800368e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003692:	1cda      	adds	r2, r3, #3
 8003694:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003698:	4413      	add	r3, r2
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80036a4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80036a8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80036ac:	4623      	mov	r3, r4
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80036b4:	4623      	mov	r3, r4
 80036b6:	061b      	lsls	r3, r3, #24
 80036b8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80036bc:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80036c0:	4623      	mov	r3, r4
 80036c2:	4303      	orrs	r3, r0
 80036c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80036c8:	462b      	mov	r3, r5
 80036ca:	430b      	orrs	r3, r1
 80036cc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80036d0:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80036d4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80036d8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80036dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036e0:	1d1a      	adds	r2, r3, #4
 80036e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036e6:	4413      	add	r3, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2200      	movs	r2, #0
 80036ee:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80036f2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003702:	0023      	movs	r3, r4
 8003704:	2200      	movs	r2, #0
 8003706:	ea40 0402 	orr.w	r4, r0, r2
 800370a:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800370e:	430b      	orrs	r3, r1
 8003710:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003714:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003718:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800371c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003720:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003724:	1d5a      	adds	r2, r3, #5
 8003726:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800372a:	4413      	add	r3, r2
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2200      	movs	r2, #0
 8003732:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003736:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003746:	0223      	lsls	r3, r4, #8
 8003748:	2200      	movs	r2, #0
 800374a:	ea40 0402 	orr.w	r4, r0, r2
 800374e:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003752:	430b      	orrs	r3, r1
 8003754:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003758:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800375c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003760:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003764:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003768:	1d9a      	adds	r2, r3, #6
 800376a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800376e:	4413      	add	r3, r2
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2200      	movs	r2, #0
 8003776:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800377a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800378a:	0423      	lsls	r3, r4, #16
 800378c:	2200      	movs	r2, #0
 800378e:	ea40 0402 	orr.w	r4, r0, r2
 8003792:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003796:	430b      	orrs	r3, r1
 8003798:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800379c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80037a0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80037a4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037ac:	1dda      	adds	r2, r3, #7
 80037ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037b2:	4413      	add	r3, r2
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2200      	movs	r2, #0
 80037ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80037be:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80037ce:	0623      	lsls	r3, r4, #24
 80037d0:	2200      	movs	r2, #0
 80037d2:	ea40 0402 	orr.w	r4, r0, r2
 80037d6:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80037da:	430b      	orrs	r3, r1
 80037dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80037e0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80037e4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80037e8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037ec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80037f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80037f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037f8:	3308      	adds	r3, #8
 80037fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800380a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800380e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003812:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003816:	4413      	add	r3, r2
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2200      	movs	r2, #0
 800381e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003822:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003826:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800382a:	4623      	mov	r3, r4
 800382c:	4303      	orrs	r3, r0
 800382e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003832:	462b      	mov	r3, r5
 8003834:	430b      	orrs	r3, r1
 8003836:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800383a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800383e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003842:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003846:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003850:	4413      	add	r3, r2
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2200      	movs	r2, #0
 8003858:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800385c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800386c:	464c      	mov	r4, r9
 800386e:	0223      	lsls	r3, r4, #8
 8003870:	4644      	mov	r4, r8
 8003872:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003876:	4644      	mov	r4, r8
 8003878:	0222      	lsls	r2, r4, #8
 800387a:	ea40 0402 	orr.w	r4, r0, r2
 800387e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003882:	430b      	orrs	r3, r1
 8003884:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003888:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800388c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003890:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003894:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003898:	1c9a      	adds	r2, r3, #2
 800389a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800389e:	4413      	add	r3, r2
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80038ba:	464c      	mov	r4, r9
 80038bc:	0423      	lsls	r3, r4, #16
 80038be:	4644      	mov	r4, r8
 80038c0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80038c4:	4644      	mov	r4, r8
 80038c6:	0422      	lsls	r2, r4, #16
 80038c8:	ea40 0402 	orr.w	r4, r0, r2
 80038cc:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80038d0:	430b      	orrs	r3, r1
 80038d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038d6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80038da:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80038de:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80038e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038e6:	1cda      	adds	r2, r3, #3
 80038e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038ec:	4413      	add	r3, r2
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2200      	movs	r2, #0
 80038f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038f8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038fc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003900:	4623      	mov	r3, r4
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003908:	4623      	mov	r3, r4
 800390a:	061b      	lsls	r3, r3, #24
 800390c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003910:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003914:	4623      	mov	r3, r4
 8003916:	4303      	orrs	r3, r0
 8003918:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800391c:	462b      	mov	r3, r5
 800391e:	430b      	orrs	r3, r1
 8003920:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003924:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003928:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800392c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003930:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003934:	1d1a      	adds	r2, r3, #4
 8003936:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800393a:	4413      	add	r3, r2
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2200      	movs	r2, #0
 8003942:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003946:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003956:	0023      	movs	r3, r4
 8003958:	2200      	movs	r2, #0
 800395a:	ea40 0402 	orr.w	r4, r0, r2
 800395e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003962:	430b      	orrs	r3, r1
 8003964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003968:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800396c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003970:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003974:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003978:	1d5a      	adds	r2, r3, #5
 800397a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800397e:	4413      	add	r3, r2
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2200      	movs	r2, #0
 8003986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800398a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800399a:	0223      	lsls	r3, r4, #8
 800399c:	2200      	movs	r2, #0
 800399e:	ea40 0402 	orr.w	r4, r0, r2
 80039a2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80039a6:	430b      	orrs	r3, r1
 80039a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039ac:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80039b0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80039b4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039b8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039bc:	1d9a      	adds	r2, r3, #6
 80039be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039c2:	4413      	add	r3, r2
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2200      	movs	r2, #0
 80039ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80039de:	0423      	lsls	r3, r4, #16
 80039e0:	2200      	movs	r2, #0
 80039e2:	ea40 0402 	orr.w	r4, r0, r2
 80039e6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80039ea:	430b      	orrs	r3, r1
 80039ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039f0:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80039f4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80039f8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a00:	1dda      	adds	r2, r3, #7
 8003a02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a06:	4413      	add	r3, r2
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003a22:	0623      	lsls	r3, r4, #24
 8003a24:	2200      	movs	r2, #0
 8003a26:	ea40 0402 	orr.w	r4, r0, r2
 8003a2a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003a34:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003a38:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003a3c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a40:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003a44:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003a48:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a5e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003a62:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003a66:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a6a:	4413      	add	r3, r2
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2200      	movs	r2, #0
 8003a72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a76:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a7a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003a7e:	4623      	mov	r3, r4
 8003a80:	4303      	orrs	r3, r0
 8003a82:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a84:	462b      	mov	r3, r5
 8003a86:	430b      	orrs	r3, r1
 8003a88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a8a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003a8e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a92:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003a96:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003aa0:	4413      	add	r3, r2
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	673b      	str	r3, [r7, #112]	; 0x70
 8003aaa:	677a      	str	r2, [r7, #116]	; 0x74
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ab8:	464c      	mov	r4, r9
 8003aba:	0223      	lsls	r3, r4, #8
 8003abc:	4644      	mov	r4, r8
 8003abe:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ac2:	4644      	mov	r4, r8
 8003ac4:	0222      	lsls	r2, r4, #8
 8003ac6:	ea40 0402 	orr.w	r4, r0, r2
 8003aca:	66bc      	str	r4, [r7, #104]	; 0x68
 8003acc:	430b      	orrs	r3, r1
 8003ace:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ad0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003ad4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ad8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003adc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ae0:	1c9a      	adds	r2, r3, #2
 8003ae2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ae6:	4413      	add	r3, r2
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2200      	movs	r2, #0
 8003aee:	663b      	str	r3, [r7, #96]	; 0x60
 8003af0:	667a      	str	r2, [r7, #100]	; 0x64
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003afe:	464c      	mov	r4, r9
 8003b00:	0423      	lsls	r3, r4, #16
 8003b02:	4644      	mov	r4, r8
 8003b04:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003b08:	4644      	mov	r4, r8
 8003b0a:	0422      	lsls	r2, r4, #16
 8003b0c:	ea40 0402 	orr.w	r4, r0, r2
 8003b10:	65bc      	str	r4, [r7, #88]	; 0x58
 8003b12:	430b      	orrs	r3, r1
 8003b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b16:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003b1a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b1e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b26:	1cda      	adds	r2, r3, #3
 8003b28:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b2c:	4413      	add	r3, r2
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2200      	movs	r2, #0
 8003b34:	653b      	str	r3, [r7, #80]	; 0x50
 8003b36:	657a      	str	r2, [r7, #84]	; 0x54
 8003b38:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003b3c:	4623      	mov	r3, r4
 8003b3e:	0a1b      	lsrs	r3, r3, #8
 8003b40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b42:	4623      	mov	r3, r4
 8003b44:	061b      	lsls	r3, r3, #24
 8003b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b48:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003b4c:	4623      	mov	r3, r4
 8003b4e:	4303      	orrs	r3, r0
 8003b50:	643b      	str	r3, [r7, #64]	; 0x40
 8003b52:	462b      	mov	r3, r5
 8003b54:	430b      	orrs	r3, r1
 8003b56:	647b      	str	r3, [r7, #68]	; 0x44
 8003b58:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003b5c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b60:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b68:	1d1a      	adds	r2, r3, #4
 8003b6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b6e:	4413      	add	r3, r2
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2200      	movs	r2, #0
 8003b76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003b84:	0023      	movs	r3, r4
 8003b86:	2200      	movs	r2, #0
 8003b88:	ea40 0402 	orr.w	r4, r0, r2
 8003b8c:	633c      	str	r4, [r7, #48]	; 0x30
 8003b8e:	430b      	orrs	r3, r1
 8003b90:	637b      	str	r3, [r7, #52]	; 0x34
 8003b92:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003b96:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b9a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b9e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ba2:	1d5a      	adds	r2, r3, #5
 8003ba4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ba8:	4413      	add	r3, r2
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2200      	movs	r2, #0
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003bbe:	0223      	lsls	r3, r4, #8
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	ea40 0402 	orr.w	r4, r0, r2
 8003bc6:	623c      	str	r4, [r7, #32]
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
 8003bcc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003bd0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003bd4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003bd8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bdc:	3306      	adds	r3, #6
 8003bde:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003be2:	4413      	add	r3, r2
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2200      	movs	r2, #0
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	61fa      	str	r2, [r7, #28]
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	69bc      	ldr	r4, [r7, #24]
 8003bf8:	0423      	lsls	r3, r4, #16
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	ea40 0402 	orr.w	r4, r0, r2
 8003c00:	613c      	str	r4, [r7, #16]
 8003c02:	430b      	orrs	r3, r1
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003c0a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c0e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c12:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c16:	3307      	adds	r3, #7
 8003c18:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003c1c:	4413      	add	r3, r2
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2200      	movs	r2, #0
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	60fa      	str	r2, [r7, #12]
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	68bc      	ldr	r4, [r7, #8]
 8003c32:	0623      	lsls	r3, r4, #24
 8003c34:	2200      	movs	r2, #0
 8003c36:	ea40 0402 	orr.w	r4, r0, r2
 8003c3a:	603c      	str	r4, [r7, #0]
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003c44:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003c48:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003c4c:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003c50:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003c54:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c58:	3308      	adds	r3, #8
 8003c5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003c5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003c62:	4618      	mov	r0, r3
 8003c64:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003c6e:	4770      	bx	lr

08003c70 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	08011d44 	.word	0x08011d44

08003c8c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003c96:	4618      	mov	r0, r3
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	08011d5c 	.word	0x08011d5c

08003ca8 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
      data("")
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe fb3a 	bl	800232c <_ZN3ros3MsgC1Ev>
 8003cb8:	4a05      	ldr	r2, [pc, #20]	; (8003cd0 <_ZN8std_msgs6StringC1Ev+0x28>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a04      	ldr	r2, [pc, #16]	; (8003cd4 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8003cc2:	605a      	str	r2, [r3, #4]
    {
    }
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	08011ea4 	.word	0x08011ea4
 8003cd4:	08011ca4 	.word	0x08011ca4

08003cd8 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fa78 	bl	80001e0 <strlen>
 8003cf0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fa84 	bl	8004208 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3304      	adds	r3, #4
 8003d04:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	18d0      	adds	r0, r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	4619      	mov	r1, r3
 8003d14:	f00b fa52 	bl	800f1bc <memcpy>
      offset += length_data;
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
      return offset;
 8003d20:	68fb      	ldr	r3, [r7, #12]
    }
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	441a      	add	r2, r3
 8003d3e:	f107 030c 	add.w	r3, r7, #12
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fa7d 	bl	8004244 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4413      	add	r3, r2
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d20c      	bcs.n	8003d7a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	441a      	add	r2, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	6839      	ldr	r1, [r7, #0]
 8003d6c:	440b      	add	r3, r1
 8003d6e:	7812      	ldrb	r2, [r2, #0]
 8003d70:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	3301      	adds	r3, #1
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	e7ec      	b.n	8003d54 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4413      	add	r3, r2
 8003d80:	3b01      	subs	r3, #1
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	4413      	add	r3, r2
 8003d86:	2200      	movs	r2, #0
 8003d88:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	441a      	add	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
     return offset;
 8003d9e:	693b      	ldr	r3, [r7, #16]
    }
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	08011d80 	.word	0x08011d80

08003dc4 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	4b03      	ldr	r3, [pc, #12]	; (8003ddc <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	08011d90 	.word	0x08011d90

08003de0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fe fa9e 	bl	800232c <_ZN3ros3MsgC1Ev>
 8003df0:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3308      	adds	r3, #8
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff fa3e 	bl	800327c <_ZN13geometry_msgs7Vector3C1Ev>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3328      	adds	r3, #40	; 0x28
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fa39 	bl	800327c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	08011e8c 	.word	0x08011e8c

08003e18 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f103 0008 	add.w	r0, r3, #8
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	4413      	add	r3, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	f7ff fa4a 	bl	80032cc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f7ff fa3d 	bl	80032cc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003e52:	4602      	mov	r2, r0
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
      return offset;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
    }
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f103 0008 	add.w	r0, r3, #8
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	4619      	mov	r1, r3
 8003e80:	f7ff fb97 	bl	80035b2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003e84:	4602      	mov	r2, r0
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	4413      	add	r3, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f7ff fb8a 	bl	80035b2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
     return offset;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
    }
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	08011db4 	.word	0x08011db4

08003ecc <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	08011dc8 	.word	0x08011dc8

08003ee8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	4a04      	ldr	r2, [pc, #16]	; (8003f04 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	08011eec 	.word	0x08011eec

08003f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 1024,
         int OUTPUT_SIZE = 1024>
class NodeHandle_ : public NodeHandleBase_
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff ffe8 	bl	8003ee8 <_ZN3ros15NodeHandleBase_C1Ev>
 8003f18:	4a45      	ldr	r2, [pc, #276]	; (8004030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff f88c 	bl	8003040 <_ZN13STM32HardwareC1Ev>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f00b f93f 	bl	800f1d8 <memset>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f00b f936 	bl	800f1d8 <memset>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f72:	3324      	adds	r3, #36	; 0x24
 8003f74:	2264      	movs	r2, #100	; 0x64
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f00b f92d 	bl	800f1d8 <memset>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f84:	3388      	adds	r3, #136	; 0x88
 8003f86:	2264      	movs	r2, #100	; 0x64
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f00b f924 	bl	800f1d8 <memset>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f96:	461a      	mov	r2, r3
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2300      	movs	r3, #0
 8003fec:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004004:	461a      	mov	r2, r3
 8004006:	2300      	movs	r3, #0
 8004008:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800401e:	3314      	adds	r3, #20
 8004020:	4618      	mov	r0, r3
 8004022:	f7fe fcf7 	bl	8002a14 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	08011e78 	.word	0x08011e78
 8004034:	00000000 	.word	0x00000000

08004038 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE>:
extern float ActualAngularVelocity[2]  ;
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;

void commandVelocityCallback(const geometry_msgs::Twist& cmd_vel_msg)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	SubcribeVelocityFromRos(0.01,0);
 8004040:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8004058 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x20>
 8004044:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8004060 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x28>
 8004048:	f7fd fb96 	bl	8001778 <SubcribeVelocityFromRos>
}
 800404c:	bf00      	nop
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	f3af 8000 	nop.w
	...
 8004060:	47ae147b 	.word	0x47ae147b
 8004064:	3f847ae1 	.word	0x3f847ae1

08004068 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8004070:	4805      	ldr	r0, [pc, #20]	; (8004088 <HAL_UART_TxCpltCallback+0x20>)
 8004072:	f000 f941 	bl	80042f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8004076:	4603      	mov	r3, r0
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff f847 	bl	800310c <_ZN13STM32Hardware5flushEv>
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000520 	.word	0x20000520

0800408c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8004094:	4805      	ldr	r0, [pc, #20]	; (80040ac <HAL_UART_RxCpltCallback+0x20>)
 8004096:	f000 f92f 	bl	80042f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 800409a:	4603      	mov	r3, r0
 800409c:	4618      	mov	r0, r3
 800409e:	f7fe fff6 	bl	800308e <_ZN13STM32Hardware10reset_rbufEv>
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000520 	.word	0x20000520

080040b0 <setup>:

void setup(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  nh.initNode();
 80040b4:	4806      	ldr	r0, [pc, #24]	; (80040d0 <setup+0x20>)
 80040b6:	f000 f92b 	bl	8004310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
  nh.advertise(chatter);
 80040ba:	4906      	ldr	r1, [pc, #24]	; (80040d4 <setup+0x24>)
 80040bc:	4804      	ldr	r0, [pc, #16]	; (80040d0 <setup+0x20>)
 80040be:	f000 f950 	bl	8004362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
  nh.subscribe(cmd_vel_sub);
 80040c2:	4905      	ldr	r1, [pc, #20]	; (80040d8 <setup+0x28>)
 80040c4:	4802      	ldr	r0, [pc, #8]	; (80040d0 <setup+0x20>)
 80040c6:	f000 f97c 	bl	80043c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E>


}
 80040ca:	bf00      	nop
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000520 	.word	0x20000520
 80040d4:	20001664 	.word	0x20001664
 80040d8:	20001678 	.word	0x20001678
 80040dc:	00000000 	.word	0x00000000

080040e0 <loop>:

void loop(void)
{
 80040e0:	b5b0      	push	{r4, r5, r7, lr}
 80040e2:	af00      	add	r7, sp, #0

  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 80040e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040e8:	4837      	ldr	r0, [pc, #220]	; (80041c8 <loop+0xe8>)
 80040ea:	f002 fade 	bl	80066aa <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 80040ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040f2:	4835      	ldr	r0, [pc, #212]	; (80041c8 <loop+0xe8>)
 80040f4:	f002 fad9 	bl	80066aa <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 80040f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040fc:	4832      	ldr	r0, [pc, #200]	; (80041c8 <loop+0xe8>)
 80040fe:	f002 fad4 	bl	80066aa <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8004102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004106:	4830      	ldr	r0, [pc, #192]	; (80041c8 <loop+0xe8>)
 8004108:	f002 facf 	bl	80066aa <HAL_GPIO_TogglePin>

  ReadEncoder();
 800410c:	f7fd fb24 	bl	8001758 <ReadEncoder>
  ComputeVelocity();
 8004110:	f7fd fb29 	bl	8001766 <ComputeVelocity>
  SubcribeVelocityFromRos(0.01,0);
 8004114:	ed9f 1b28 	vldr	d1, [pc, #160]	; 80041b8 <loop+0xd8>
 8004118:	ed9f 0b29 	vldr	d0, [pc, #164]	; 80041c0 <loop+0xe0>
 800411c:	f7fd fb2c 	bl	8001778 <SubcribeVelocityFromRos>

  PID_Compute(&uPID,&err,0.229,15.3,22.222,0.05,SetPointAngularVelocity[0],ActualAngularVelocity[0],&PidOut[0]);
 8004120:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <loop+0xec>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f7fc fa17 	bl	8000558 <__aeabi_f2d>
 800412a:	4604      	mov	r4, r0
 800412c:	460d      	mov	r5, r1
 800412e:	4b28      	ldr	r3, [pc, #160]	; (80041d0 <loop+0xf0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fc fa10 	bl	8000558 <__aeabi_f2d>
 8004138:	4a26      	ldr	r2, [pc, #152]	; (80041d4 <loop+0xf4>)
 800413a:	ec41 0b13 	vmov	d3, r0, r1
 800413e:	ec45 4b12 	vmov	d2, r4, r5
 8004142:	eddf 1a25 	vldr	s3, [pc, #148]	; 80041d8 <loop+0xf8>
 8004146:	ed9f 1a25 	vldr	s2, [pc, #148]	; 80041dc <loop+0xfc>
 800414a:	eddf 0a25 	vldr	s1, [pc, #148]	; 80041e0 <loop+0x100>
 800414e:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80041e4 <loop+0x104>
 8004152:	4925      	ldr	r1, [pc, #148]	; (80041e8 <loop+0x108>)
 8004154:	4825      	ldr	r0, [pc, #148]	; (80041ec <loop+0x10c>)
 8004156:	f7fd fa47 	bl	80015e8 <PID_Compute>
//  PID_Compute(&uPID,&err,0.229,15.3,22.222,0.05,SetPointAngularVelocity[1],ActualAngularVelocity[1],&PidOut[1]);
    HAL_Delay(1000*(uPID.SampleTime));
 800415a:	4b24      	ldr	r3, [pc, #144]	; (80041ec <loop+0x10c>)
 800415c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004160:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80041f0 <loop+0x110>
 8004164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800416c:	ee17 0a90 	vmov	r0, s15
 8004170:	f001 fbae 	bl	80058d0 <HAL_Delay>
  	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,fabs(round(PidOut[0])));
 8004174:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <loop+0xf4>)
 8004176:	edd3 7a00 	vldr	s15, [r3]
 800417a:	eeb0 0a67 	vmov.f32	s0, s15
 800417e:	f7fe f8b4 	bl	80022ea <_ZSt5roundf>
 8004182:	eef0 7a40 	vmov.f32	s15, s0
 8004186:	eeb0 0a67 	vmov.f32	s0, s15
 800418a:	f7fe f89e 	bl	80022ca <_ZSt4fabsf>
 800418e:	eef0 7a40 	vmov.f32	s15, s0
 8004192:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <loop+0x114>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800419a:	ee17 2a90 	vmov	r2, s15
 800419e:	63da      	str	r2, [r3, #60]	; 0x3c
//  	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,fabs(round(PidOut[1])));

  str_msg.data = hello;
 80041a0:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <loop+0x118>)
 80041a2:	4a16      	ldr	r2, [pc, #88]	; (80041fc <loop+0x11c>)
 80041a4:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 80041a6:	4914      	ldr	r1, [pc, #80]	; (80041f8 <loop+0x118>)
 80041a8:	4815      	ldr	r0, [pc, #84]	; (8004200 <loop+0x120>)
 80041aa:	f7fe ff16 	bl	8002fda <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 80041ae:	4815      	ldr	r0, [pc, #84]	; (8004204 <loop+0x124>)
 80041b0:	f000 f932 	bl	8004418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
//
//  HAL_Delay(100);
}
 80041b4:	bf00      	nop
 80041b6:	bdb0      	pop	{r4, r5, r7, pc}
	...
 80041c0:	47ae147b 	.word	0x47ae147b
 80041c4:	3f847ae1 	.word	0x3f847ae1
 80041c8:	40020c00 	.word	0x40020c00
 80041cc:	20000010 	.word	0x20000010
 80041d0:	20001714 	.word	0x20001714
 80041d4:	200016d8 	.word	0x200016d8
 80041d8:	3d4ccccd 	.word	0x3d4ccccd
 80041dc:	41b1c6a8 	.word	0x41b1c6a8
 80041e0:	4174cccd 	.word	0x4174cccd
 80041e4:	3e6a7efa 	.word	0x3e6a7efa
 80041e8:	20000514 	.word	0x20000514
 80041ec:	200016f8 	.word	0x200016f8
 80041f0:	447a0000 	.word	0x447a0000
 80041f4:	200003c4 	.word	0x200003c4
 80041f8:	2000165c 	.word	0x2000165c
 80041fc:	20000000 	.word	0x20000000
 8004200:	20001664 	.word	0x20001664
 8004204:	20000520 	.word	0x20000520

08004208 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b03      	cmp	r3, #3
 800421a:	d80d      	bhi.n	8004238 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	fa22 f103 	lsr.w	r1, r2, r3
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	b2ca      	uxtb	r2, r1
 800422e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3301      	adds	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	e7ee      	b.n	8004216 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b03      	cmp	r3, #3
 800425c:	d811      	bhi.n	8004282 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6839      	ldr	r1, [r7, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	440a      	add	r2, r1
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	4611      	mov	r1, r2
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	00d2      	lsls	r2, r2, #3
 8004270:	fa01 f202 	lsl.w	r2, r1, r2
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3301      	adds	r3, #1
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	e7ea      	b.n	8004258 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004282:	bf00      	nop
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	4a04      	ldr	r2, [pc, #16]	; (80042ac <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	08011ed4 	.word	0x08011ed4

080042b0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ffe5 	bl	8004290 <_ZN3ros11Subscriber_C1Ev>
 80042c6:	4a0b      	ldr	r2, [pc, #44]	; (80042f4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3310      	adds	r3, #16
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff fd85 	bl	8003de0 <_ZN13geometry_msgs5TwistC1Ev>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	659a      	str	r2, [r3, #88]	; 0x58
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	609a      	str	r2, [r3, #8]
  };
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	08011e60 	.word	0x08011e60

080042f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
  }
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe feab 	bl	8003078 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004328:	461a      	mov	r2, r3
 800432a:	2300      	movs	r3, #0
 800432c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    bytes_ = 0;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004336:	461a      	mov	r2, r3
 8004338:	2300      	movs	r3, #0
 800433a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    index_ = 0;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004344:	461a      	mov	r2, r3
 8004346:	2300      	movs	r3, #0
 8004348:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    topic_ = 0;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004352:	461a      	mov	r2, r3
 8004354:	2300      	movs	r3, #0
 8004356:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  };
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b18      	cmp	r3, #24
 8004374:	dc1e      	bgt.n	80043b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d111      	bne.n	80043ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	60da      	str	r2, [r3, #12]
        return true;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e004      	b.n	80043b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3301      	adds	r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	e7dd      	b.n	8004370 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 80043b4:	2300      	movs	r3, #0
  }
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b18      	cmp	r3, #24
 80043d4:	dc19      	bgt.n	800440a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80043de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10d      	bne.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80043ee:	6839      	ldr	r1, [r7, #0]
 80043f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	605a      	str	r2, [r3, #4]
        return true;
 80043fe:	2301      	movs	r3, #1
 8004400:	e004      	b.n	800440c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3301      	adds	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	e7e2      	b.n	80043d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 800440a:	2300      	movs	r3, #0
  }
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce() override
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	4618      	mov	r0, r3
 8004426:	f7fe ff1d 	bl	8003264 <_ZN13STM32Hardware4timeEv>
 800442a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004432:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800443e:	4293      	cmp	r3, r2
 8004440:	d905      	bls.n	800444e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    if (mode_ != MODE_FIRST_FF)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004454:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00e      	beq.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004462:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	429a      	cmp	r2, r3
 800446a:	d906      	bls.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004472:	461a      	mov	r2, r3
 8004474:	2300      	movs	r3, #0
 8004476:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
      if (spin_timeout_ > 0)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8004480:	2b00      	cmp	r3, #0
 8004482:	d014      	beq.n	80044ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	4618      	mov	r0, r3
 800448a:	f7fe feeb 	bl	8003264 <_ZN13STM32Hardware4timeEv>
 800448e:	4602      	mov	r2, r0
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1ad2      	subs	r2, r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 800449a:	429a      	cmp	r2, r3
 800449c:	bf8c      	ite	hi
 800449e:	2301      	movhi	r3, #1
 80044a0:	2300      	movls	r3, #0
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 80044a8:	f06f 0301 	mvn.w	r3, #1
 80044ac:	e221      	b.n	80048f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3304      	adds	r3, #4
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe fdfc 	bl	80030b0 <_ZN13STM32Hardware4readEv>
 80044b8:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f2c0 81fa 	blt.w	80048b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c8:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4413      	add	r3, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044d6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80044e4:	2b07      	cmp	r3, #7
 80044e6:	d12b      	bne.n	8004540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ee:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80044fa:	f8c1 20f8 	str.w	r2, [r1, #248]	; 0xf8
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	b2d1      	uxtb	r1, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	4413      	add	r3, r2
 8004506:	460a      	mov	r2, r1
 8004508:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004516:	3b01      	subs	r3, #1
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800451e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1a4      	bne.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004536:	461a      	mov	r2, r3
 8004538:	2308      	movs	r3, #8
 800453a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800453e:	e79c      	b.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004546:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800454a:	2b00      	cmp	r3, #0
 800454c:	d130      	bne.n	80045b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2bff      	cmp	r3, #255	; 0xff
 8004552:	d112      	bne.n	800457a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800455e:	3301      	adds	r3, #1
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004566:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3314      	adds	r3, #20
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004574:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8004578:	e77f      	b.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fe70 	bl	8003264 <_ZN13STM32Hardware4timeEv>
 8004584:	4602      	mov	r2, r0
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	f241 3288 	movw	r2, #5000	; 0x1388
 800458e:	4293      	cmp	r3, r2
 8004590:	bf8c      	ite	hi
 8004592:	2301      	movhi	r3, #1
 8004594:	2300      	movls	r3, #0
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	f43f af6e 	beq.w	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          return SPIN_TIMEOUT;
 80045aa:	f06f 0301 	mvn.w	r3, #1
 80045ae:	e1a0      	b.n	80048f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d121      	bne.n	8004602 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2bfe      	cmp	r3, #254	; 0xfe
 80045c2:	d10b      	bne.n	80045dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80045ce:	3301      	adds	r3, #1
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045d6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80045da:	e74e      	b.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e2:	461a      	mov	r2, r3
 80045e4:	2300      	movs	r3, #0
 80045e6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          if (configured_ == false)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f0:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f47f af40 	bne.w	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f97d 	bl	80048fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 8004600:	e73b      	b.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004608:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800460c:	2b02      	cmp	r3, #2
 800460e:	d120      	bne.n	8004652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004616:	461a      	mov	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        index_ = 0;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004624:	461a      	mov	r2, r3
 8004626:	2300      	movs	r3, #0
 8004628:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004632:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004636:	3301      	adds	r3, #1
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800463e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004648:	461a      	mov	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8004650:	e713      	b.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004658:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800465c:	2b03      	cmp	r3, #3
 800465e:	d118      	bne.n	8004692 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004666:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	4413      	add	r3, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004676:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        mode_++;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004680:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004684:	3301      	adds	r3, #1
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800468c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004690:	e6f3      	b.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004698:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800469c:	2b04      	cmp	r3, #4
 800469e:	d11f      	bne.n	80046e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80046aa:	425a      	negs	r2, r3
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	bf58      	it	pl
 80046b2:	4253      	negpl	r3, r2
 80046b4:	2bff      	cmp	r3, #255	; 0xff
 80046b6:	d10b      	bne.n	80046d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046be:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80046c2:	3301      	adds	r3, #1
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046ca:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80046ce:	e6d4      	b.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d6:	461a      	mov	r2, r3
 80046d8:	2300      	movs	r3, #0
 80046da:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80046de:	e6cc      	b.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80046ea:	2b05      	cmp	r3, #5
 80046ec:	d119      	bne.n	8004722 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f4:	461a      	mov	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004702:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004706:	3301      	adds	r3, #1
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800470e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte included in checksum */
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004718:	461a      	mov	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8004720:	e6ab      	b.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004728:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800472c:	2b06      	cmp	r3, #6
 800472e:	d123      	bne.n	8004778 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004736:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	4413      	add	r3, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004746:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_ = MODE_MESSAGE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004750:	461a      	mov	r2, r3
 8004752:	2307      	movs	r3, #7
 8004754:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if (bytes_ == 0)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004762:	2b00      	cmp	r3, #0
 8004764:	f47f ae89 	bne.w	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476e:	461a      	mov	r2, r3
 8004770:	2308      	movs	r3, #8
 8004772:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004776:	e680      	b.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004782:	2b08      	cmp	r3, #8
 8004784:	f47f ae79 	bne.w	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478e:	461a      	mov	r2, r3
 8004790:	2300      	movs	r3, #0
 8004792:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if ((checksum_ % 256) == 255)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80047a0:	425a      	negs	r2, r3
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	bf58      	it	pl
 80047a8:	4253      	negpl	r3, r2
 80047aa:	2bff      	cmp	r3, #255	; 0xff
 80047ac:	f47f ae65 	bne.w	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d116      	bne.n	80047ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f89b 	bl	80048fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f8b6 	bl	8004936 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d0:	461a      	mov	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            last_sync_receive_time = c_time;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047de:	461a      	mov	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            return SPIN_ERR;
 80047e6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ea:	e082      	b.n	80048f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047f6:	2b0a      	cmp	r3, #10
 80047f8:	d107      	bne.n	800480a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8004800:	4619      	mov	r1, r3
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f978 	bl	8004af8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 8004808:	e637      	b.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004810:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004814:	2b06      	cmp	r3, #6
 8004816:	d111      	bne.n	800483c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800481e:	3314      	adds	r3, #20
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8004826:	4611      	mov	r1, r2
 8004828:	4618      	mov	r0, r3
 800482a:	f7fe fa32 	bl	8002c92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800483a:	e61e      	b.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004842:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004846:	2b0b      	cmp	r3, #11
 8004848:	d106      	bne.n	8004858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8004856:	e610      	b.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004862:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800486c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f43f ae02 	beq.w	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004880:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800488a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004894:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004898:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80048a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	f602 0224 	addw	r2, r2, #2084	; 0x824
 80048b0:	4611      	mov	r1, r2
 80048b2:	4798      	blx	r3
    while (true)
 80048b4:	e5e1      	b.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 80048b6:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048be:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d014      	beq.n	80048f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048cc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80048d8:	4293      	cmp	r3, r2
 80048da:	d909      	bls.n	80048f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f80c 	bl	80048fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e8:	461a      	mov	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return SPIN_OK;
 80048f0:	2300      	movs	r3, #0
  }
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b086      	sub	sp, #24
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004902:	f107 030c 	add.w	r3, r7, #12
 8004906:	4618      	mov	r0, r3
 8004908:	f7fd fd20 	bl	800234c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f107 020c 	add.w	r2, r7, #12
 8004916:	210a      	movs	r1, #10
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	4798      	blx	r3
    rt_time = hardware_.time();
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	4618      	mov	r0, r3
 8004922:	f7fe fc9f 	bl	8003264 <_ZN13STM32Hardware4timeEv>
 8004926:	4602      	mov	r2, r0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 800492e:	bf00      	nop
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8004936:	b590      	push	{r4, r7, lr}
 8004938:	b08b      	sub	sp, #44	; 0x2c
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800493e:	f107 030c 	add.w	r3, r7, #12
 8004942:	4618      	mov	r0, r3
 8004944:	f7fd fdf2 	bl	800252c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004948:	2300      	movs	r3, #0
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	2b18      	cmp	r3, #24
 8004950:	dc63      	bgt.n	8004a1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d056      	beq.n	8004a12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	b29b      	uxth	r3, r3
 8004976:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	6859      	ldr	r1, [r3, #4]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3308      	adds	r3, #8
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4608      	mov	r0, r1
 80049b2:	4798      	blx	r3
 80049b4:	4603      	mov	r3, r0
 80049b6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	6859      	ldr	r1, [r3, #4]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4608      	mov	r0, r1
 80049e0:	4798      	blx	r3
 80049e2:	4603      	mov	r3, r0
 80049e4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80049e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049ea:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681c      	ldr	r4, [r3, #0]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fe fafe 	bl	8003002 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004a06:	4601      	mov	r1, r0
 8004a08:	f107 030c 	add.w	r3, r7, #12
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	3301      	adds	r3, #1
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
 8004a18:	e798      	b.n	800494c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	2b18      	cmp	r3, #24
 8004a22:	dc5f      	bgt.n	8004ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d053      	beq.n	8004adc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a38:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004a5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a66:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3308      	adds	r3, #8
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4608      	mov	r0, r1
 8004a76:	4798      	blx	r3
 8004a78:	4603      	mov	r3, r0
 8004a7a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a80:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004a84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8c:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	330c      	adds	r3, #12
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4608      	mov	r0, r1
 8004a9c:	4798      	blx	r3
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aa6:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681c      	ldr	r4, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab2:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004ab6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abe:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4608      	mov	r0, r1
 8004ace:	4798      	blx	r3
 8004ad0:	4601      	mov	r1, r0
 8004ad2:	f107 030c 	add.w	r3, r7, #12
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	3301      	adds	r3, #1
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae2:	e79c      	b.n	8004a1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
 8004af0:	bf00      	nop
 8004af2:	372c      	adds	r7, #44	; 0x2c
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd90      	pop	{r4, r7, pc}

08004af8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004b02:	f107 0308 	add.w	r3, r7, #8
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fd fc20 	bl	800234c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fe fba7 	bl	8003264 <_ZN13STM32Hardware4timeEv>
 8004b16:	4602      	mov	r2, r0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004b22:	f107 0308 	add.w	r3, r7, #8
 8004b26:	6839      	ldr	r1, [r7, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fd fc7f 	bl	800242c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	4916      	ldr	r1, [pc, #88]	; (8004b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8004b34:	fba1 1303 	umull	r1, r3, r1, r3
 8004b38:	099b      	lsrs	r3, r3, #6
 8004b3a:	4413      	add	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004b3e:	6939      	ldr	r1, [r7, #16]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8004b44:	fba3 0302 	umull	r0, r3, r3, r2
 8004b48:	099b      	lsrs	r3, r3, #6
 8004b4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b4e:	fb00 f303 	mul.w	r3, r0, r3
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	4a0e      	ldr	r2, [pc, #56]	; (8004b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8004b56:	fb02 f303 	mul.w	r3, r2, r3
 8004b5a:	440b      	add	r3, r1
 8004b5c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004b5e:	f107 0308 	add.w	r3, r7, #8
 8004b62:	3304      	adds	r3, #4
 8004b64:	4619      	mov	r1, r3
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f8aa 	bl	8004cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fe fb77 	bl	8003264 <_ZN13STM32Hardware4timeEv>
 8004b76:	4602      	mov	r2, r0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
 8004b82:	bf00      	nop
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	10624dd3 	.word	0x10624dd3
 8004b90:	000f4240 	.word	0x000f4240

08004b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b63      	cmp	r3, #99	; 0x63
 8004ba4:	dd0b      	ble.n	8004bbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bac:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004bb0:	f083 0301 	eor.w	r3, r3, #1
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e079      	b.n	8004cb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	f602 4224 	addw	r2, r2, #3108	; 0xc24
 8004bca:	3207      	adds	r2, #7
 8004bcc:	4611      	mov	r1, r2
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
 8004bd2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	22ff      	movs	r2, #255	; 0xff
 8004bd8:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24
    message_out[1] = PROTOCOL_VER;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	22fe      	movs	r2, #254	; 0xfe
 8004be0:	f883 2c25 	strb.w	r2, [r3, #3109]	; 0xc25
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f883 2c26 	strb.w	r2, [r3, #3110]	; 0xc26
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f883 2c27 	strb.w	r2, [r3, #3111]	; 0xc27
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 2c26 	ldrb.w	r2, [r3, #3110]	; 0xc26
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 3c27 	ldrb.w	r3, [r3, #3111]	; 0xc27
 8004c0a:	4413      	add	r3, r2
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	b21b      	sxth	r3, r3
 8004c26:	121b      	asrs	r3, r3, #8
 8004c28:	b21b      	sxth	r3, r3
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a

    /* calculate checksum */
    int chk = 0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004c36:	2305      	movs	r3, #5
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	3306      	adds	r3, #6
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	dc0d      	bgt.n	8004c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	4413      	add	r3, r2
 8004c56:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	e7ec      	b.n	8004c3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	3307      	adds	r3, #7
 8004c64:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	425a      	negs	r2, r3
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	bf58      	it	pl
 8004c70:	4253      	negpl	r3, r2
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	1c59      	adds	r1, r3, #1
 8004c78:	6179      	str	r1, [r7, #20]
 8004c7a:	43d2      	mvns	r2, r2
 8004c7c:	b2d1      	uxtb	r1, r2
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	460a      	mov	r2, r1
 8004c84:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24

    if (l <= OUTPUT_SIZE)
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8e:	dc0a      	bgt.n	8004ca6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1d18      	adds	r0, r3, #4
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f7fe fa93 	bl	80031c8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	e005      	b.n	8004cb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004ca6:	4905      	ldr	r1, [pc, #20]	; (8004cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f849 	bl	8004d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8004cae:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	08011dec 	.word	0x08011dec

08004cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe fac8 	bl	8003264 <_ZN13STM32Hardware4timeEv>
 8004cd4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4915      	ldr	r1, [pc, #84]	; (8004d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x74>)
 8004cde:	fba1 1303 	umull	r1, r3, r1, r3
 8004ce2:	099b      	lsrs	r3, r3, #6
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	1e5a      	subs	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6859      	ldr	r1, [r3, #4]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4b0f      	ldr	r3, [pc, #60]	; (8004d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x74>)
 8004cf6:	fba3 0302 	umull	r0, r3, r3, r2
 8004cfa:	099b      	lsrs	r3, r3, #6
 8004cfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d00:	fb00 f303 	mul.w	r3, r0, r3
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	4a0c      	ldr	r2, [pc, #48]	; (8004d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x78>)
 8004d08:	fb02 f303 	mul.w	r3, r2, r3
 8004d0c:	1aca      	subs	r2, r1, r3
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x7c>)
 8004d10:	4413      	add	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8004d24:	4619      	mov	r1, r3
 8004d26:	4610      	mov	r0, r2
 8004d28:	f000 fd0a 	bl	8005740 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004d2c:	bf00      	nop
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	10624dd3 	.word	0x10624dd3
 8004d38:	000f4240 	.word	0x000f4240
 8004d3c:	3b9aca00 	.word	0x3b9aca00

08004d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	2103      	movs	r1, #3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f804 	bl	8004d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	460b      	mov	r3, r1
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004d6a:	f107 0314 	add.w	r3, r7, #20
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fd fda0 	bl	80028b4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004d74:	7afb      	ldrb	r3, [r7, #11]
 8004d76:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f107 0214 	add.w	r2, r7, #20
 8004d86:	2107      	movs	r1, #7
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	4798      	blx	r3
  }
 8004d8c:	bf00      	nop
 8004d8e:	3720      	adds	r7, #32
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <_Z41__static_initialization_and_destruction_0ii>:
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d116      	bne.n	8004dd2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d111      	bne.n	8004dd2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8004dae:	480b      	ldr	r0, [pc, #44]	; (8004ddc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004db0:	f7ff f8aa 	bl	8003f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
std_msgs::String str_msg;
 8004db4:	480a      	ldr	r0, [pc, #40]	; (8004de0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004db6:	f7fe ff77 	bl	8003ca8 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8004dba:	2300      	movs	r3, #0
 8004dbc:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004dbe:	4909      	ldr	r1, [pc, #36]	; (8004de4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004dc0:	4809      	ldr	r0, [pc, #36]	; (8004de8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004dc2:	f7fe f8f3 	bl	8002fac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> cmd_vel_sub("cmd_vel", commandVelocityCallback);
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4a08      	ldr	r2, [pc, #32]	; (8004dec <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004dca:	4909      	ldr	r1, [pc, #36]	; (8004df0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004dcc:	4809      	ldr	r0, [pc, #36]	; (8004df4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004dce:	f7ff fa6f 	bl	80042b0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000520 	.word	0x20000520
 8004de0:	2000165c 	.word	0x2000165c
 8004de4:	08011e28 	.word	0x08011e28
 8004de8:	20001664 	.word	0x20001664
 8004dec:	08004039 	.word	0x08004039
 8004df0:	08011e30 	.word	0x08011e30
 8004df4:	20001678 	.word	0x20001678

08004df8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	3310      	adds	r3, #16
 8004e06:	6839      	ldr	r1, [r7, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff f82b 	bl	8003e64 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	3210      	adds	r2, #16
 8004e16:	4610      	mov	r0, r2
 8004e18:	4798      	blx	r3
  }
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b082      	sub	sp, #8
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3310      	adds	r3, #16
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff f832 	bl	8003eb0 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004e4c:	4603      	mov	r3, r0
  }
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3310      	adds	r3, #16
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff f832 	bl	8003ecc <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004e68:	4603      	mov	r3, r0
  }
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected() override
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
    return configured_;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e80:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  };
 8004e84:	4618      	mov	r0, r3
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <_GLOBAL__sub_I_err>:
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e98:	2001      	movs	r0, #1
 8004e9a:	f7ff ff7b 	bl	8004d94 <_Z41__static_initialization_and_destruction_0ii>
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	4b10      	ldr	r3, [pc, #64]	; (8004eec <HAL_MspInit+0x4c>)
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	4a0f      	ldr	r2, [pc, #60]	; (8004eec <HAL_MspInit+0x4c>)
 8004eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8004eb6:	4b0d      	ldr	r3, [pc, #52]	; (8004eec <HAL_MspInit+0x4c>)
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ebe:	607b      	str	r3, [r7, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	603b      	str	r3, [r7, #0]
 8004ec6:	4b09      	ldr	r3, [pc, #36]	; (8004eec <HAL_MspInit+0x4c>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	4a08      	ldr	r2, [pc, #32]	; (8004eec <HAL_MspInit+0x4c>)
 8004ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed2:	4b06      	ldr	r3, [pc, #24]	; (8004eec <HAL_MspInit+0x4c>)
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004ede:	2007      	movs	r0, #7
 8004ee0:	f000 fdea 	bl	8005ab8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ee4:	bf00      	nop
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40023800 	.word	0x40023800

08004ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	; 0x28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ef8:	f107 0314 	add.w	r3, r7, #20
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	605a      	str	r2, [r3, #4]
 8004f02:	609a      	str	r2, [r3, #8]
 8004f04:	60da      	str	r2, [r3, #12]
 8004f06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a19      	ldr	r2, [pc, #100]	; (8004f74 <HAL_I2C_MspInit+0x84>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d12c      	bne.n	8004f6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f12:	2300      	movs	r3, #0
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	4b18      	ldr	r3, [pc, #96]	; (8004f78 <HAL_I2C_MspInit+0x88>)
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	4a17      	ldr	r2, [pc, #92]	; (8004f78 <HAL_I2C_MspInit+0x88>)
 8004f1c:	f043 0302 	orr.w	r3, r3, #2
 8004f20:	6313      	str	r3, [r2, #48]	; 0x30
 8004f22:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <HAL_I2C_MspInit+0x88>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004f2e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f34:	2312      	movs	r3, #18
 8004f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f40:	2304      	movs	r3, #4
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f44:	f107 0314 	add.w	r3, r7, #20
 8004f48:	4619      	mov	r1, r3
 8004f4a:	480c      	ldr	r0, [pc, #48]	; (8004f7c <HAL_I2C_MspInit+0x8c>)
 8004f4c:	f001 f9f8 	bl	8006340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	4b08      	ldr	r3, [pc, #32]	; (8004f78 <HAL_I2C_MspInit+0x88>)
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	4a07      	ldr	r2, [pc, #28]	; (8004f78 <HAL_I2C_MspInit+0x88>)
 8004f5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8004f60:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <HAL_I2C_MspInit+0x88>)
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004f6c:	bf00      	nop
 8004f6e:	3728      	adds	r7, #40	; 0x28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40005400 	.word	0x40005400
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	40020400 	.word	0x40020400

08004f80 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08e      	sub	sp, #56	; 0x38
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	605a      	str	r2, [r3, #4]
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a59      	ldr	r2, [pc, #356]	; (8005104 <HAL_I2S_MspInit+0x184>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d15b      	bne.n	800505a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	623b      	str	r3, [r7, #32]
 8004fa6:	4b58      	ldr	r3, [pc, #352]	; (8005108 <HAL_I2S_MspInit+0x188>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	4a57      	ldr	r2, [pc, #348]	; (8005108 <HAL_I2S_MspInit+0x188>)
 8004fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fb2:	4b55      	ldr	r3, [pc, #340]	; (8005108 <HAL_I2S_MspInit+0x188>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fba:	623b      	str	r3, [r7, #32]
 8004fbc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	4b51      	ldr	r3, [pc, #324]	; (8005108 <HAL_I2S_MspInit+0x188>)
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	4a50      	ldr	r2, [pc, #320]	; (8005108 <HAL_I2S_MspInit+0x188>)
 8004fc8:	f043 0304 	orr.w	r3, r3, #4
 8004fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8004fce:	4b4e      	ldr	r3, [pc, #312]	; (8005108 <HAL_I2S_MspInit+0x188>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	61fb      	str	r3, [r7, #28]
 8004fd8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	4b4a      	ldr	r3, [pc, #296]	; (8005108 <HAL_I2S_MspInit+0x188>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	4a49      	ldr	r2, [pc, #292]	; (8005108 <HAL_I2S_MspInit+0x188>)
 8004fe4:	f043 0302 	orr.w	r3, r3, #2
 8004fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8004fea:	4b47      	ldr	r3, [pc, #284]	; (8005108 <HAL_I2S_MspInit+0x188>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	61bb      	str	r3, [r7, #24]
 8004ff4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ff6:	2304      	movs	r3, #4
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005002:	2300      	movs	r3, #0
 8005004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8005006:	2306      	movs	r3, #6
 8005008:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800500a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800500e:	4619      	mov	r1, r3
 8005010:	483e      	ldr	r0, [pc, #248]	; (800510c <HAL_I2S_MspInit+0x18c>)
 8005012:	f001 f995 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8005016:	2308      	movs	r3, #8
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800501a:	2302      	movs	r3, #2
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501e:	2300      	movs	r3, #0
 8005020:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005022:	2300      	movs	r3, #0
 8005024:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005026:	2305      	movs	r3, #5
 8005028:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800502a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800502e:	4619      	mov	r1, r3
 8005030:	4836      	ldr	r0, [pc, #216]	; (800510c <HAL_I2S_MspInit+0x18c>)
 8005032:	f001 f985 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8005036:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800503c:	2302      	movs	r3, #2
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005040:	2300      	movs	r3, #0
 8005042:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005044:	2300      	movs	r3, #0
 8005046:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005048:	2305      	movs	r3, #5
 800504a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800504c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005050:	4619      	mov	r1, r3
 8005052:	482f      	ldr	r0, [pc, #188]	; (8005110 <HAL_I2S_MspInit+0x190>)
 8005054:	f001 f974 	bl	8006340 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005058:	e04f      	b.n	80050fa <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2d      	ldr	r2, [pc, #180]	; (8005114 <HAL_I2S_MspInit+0x194>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d14a      	bne.n	80050fa <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	4b27      	ldr	r3, [pc, #156]	; (8005108 <HAL_I2S_MspInit+0x188>)
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	4a26      	ldr	r2, [pc, #152]	; (8005108 <HAL_I2S_MspInit+0x188>)
 800506e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005072:	6413      	str	r3, [r2, #64]	; 0x40
 8005074:	4b24      	ldr	r3, [pc, #144]	; (8005108 <HAL_I2S_MspInit+0x188>)
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005080:	2300      	movs	r3, #0
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	4b20      	ldr	r3, [pc, #128]	; (8005108 <HAL_I2S_MspInit+0x188>)
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	4a1f      	ldr	r2, [pc, #124]	; (8005108 <HAL_I2S_MspInit+0x188>)
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	6313      	str	r3, [r2, #48]	; 0x30
 8005090:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <HAL_I2S_MspInit+0x188>)
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	4b19      	ldr	r3, [pc, #100]	; (8005108 <HAL_I2S_MspInit+0x188>)
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	4a18      	ldr	r2, [pc, #96]	; (8005108 <HAL_I2S_MspInit+0x188>)
 80050a6:	f043 0304 	orr.w	r3, r3, #4
 80050aa:	6313      	str	r3, [r2, #48]	; 0x30
 80050ac:	4b16      	ldr	r3, [pc, #88]	; (8005108 <HAL_I2S_MspInit+0x188>)
 80050ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80050b8:	2310      	movs	r3, #16
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050bc:	2302      	movs	r3, #2
 80050be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c4:	2300      	movs	r3, #0
 80050c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80050c8:	2306      	movs	r3, #6
 80050ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80050cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050d0:	4619      	mov	r1, r3
 80050d2:	4811      	ldr	r0, [pc, #68]	; (8005118 <HAL_I2S_MspInit+0x198>)
 80050d4:	f001 f934 	bl	8006340 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80050d8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050de:	2302      	movs	r3, #2
 80050e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050e6:	2300      	movs	r3, #0
 80050e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80050ea:	2306      	movs	r3, #6
 80050ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050f2:	4619      	mov	r1, r3
 80050f4:	4805      	ldr	r0, [pc, #20]	; (800510c <HAL_I2S_MspInit+0x18c>)
 80050f6:	f001 f923 	bl	8006340 <HAL_GPIO_Init>
}
 80050fa:	bf00      	nop
 80050fc:	3738      	adds	r7, #56	; 0x38
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40003800 	.word	0x40003800
 8005108:	40023800 	.word	0x40023800
 800510c:	40020800 	.word	0x40020800
 8005110:	40020400 	.word	0x40020400
 8005114:	40003c00 	.word	0x40003c00
 8005118:	40020000 	.word	0x40020000

0800511c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	; 0x28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005124:	f107 0314 	add.w	r3, r7, #20
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	605a      	str	r2, [r3, #4]
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	60da      	str	r2, [r3, #12]
 8005132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a19      	ldr	r2, [pc, #100]	; (80051a0 <HAL_SPI_MspInit+0x84>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d12b      	bne.n	8005196 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800513e:	2300      	movs	r3, #0
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	4b18      	ldr	r3, [pc, #96]	; (80051a4 <HAL_SPI_MspInit+0x88>)
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	4a17      	ldr	r2, [pc, #92]	; (80051a4 <HAL_SPI_MspInit+0x88>)
 8005148:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800514c:	6453      	str	r3, [r2, #68]	; 0x44
 800514e:	4b15      	ldr	r3, [pc, #84]	; (80051a4 <HAL_SPI_MspInit+0x88>)
 8005150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <HAL_SPI_MspInit+0x88>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	4a10      	ldr	r2, [pc, #64]	; (80051a4 <HAL_SPI_MspInit+0x88>)
 8005164:	f043 0301 	orr.w	r3, r3, #1
 8005168:	6313      	str	r3, [r2, #48]	; 0x30
 800516a:	4b0e      	ldr	r3, [pc, #56]	; (80051a4 <HAL_SPI_MspInit+0x88>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8005176:	23e0      	movs	r3, #224	; 0xe0
 8005178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800517a:	2302      	movs	r3, #2
 800517c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517e:	2300      	movs	r3, #0
 8005180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005182:	2303      	movs	r3, #3
 8005184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005186:	2305      	movs	r3, #5
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800518a:	f107 0314 	add.w	r3, r7, #20
 800518e:	4619      	mov	r1, r3
 8005190:	4805      	ldr	r0, [pc, #20]	; (80051a8 <HAL_SPI_MspInit+0x8c>)
 8005192:	f001 f8d5 	bl	8006340 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005196:	bf00      	nop
 8005198:	3728      	adds	r7, #40	; 0x28
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40013000 	.word	0x40013000
 80051a4:	40023800 	.word	0x40023800
 80051a8:	40020000 	.word	0x40020000

080051ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051bc:	d116      	bne.n	80051ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	4b1a      	ldr	r3, [pc, #104]	; (800522c <HAL_TIM_Base_MspInit+0x80>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	4a19      	ldr	r2, [pc, #100]	; (800522c <HAL_TIM_Base_MspInit+0x80>)
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	6413      	str	r3, [r2, #64]	; 0x40
 80051ce:	4b17      	ldr	r3, [pc, #92]	; (800522c <HAL_TIM_Base_MspInit+0x80>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 80051da:	2202      	movs	r2, #2
 80051dc:	2100      	movs	r1, #0
 80051de:	201c      	movs	r0, #28
 80051e0:	f000 fc75 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80051e4:	201c      	movs	r0, #28
 80051e6:	f000 fc8e 	bl	8005b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80051ea:	e01a      	b.n	8005222 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a0f      	ldr	r2, [pc, #60]	; (8005230 <HAL_TIM_Base_MspInit+0x84>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d115      	bne.n	8005222 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	60bb      	str	r3, [r7, #8]
 80051fa:	4b0c      	ldr	r3, [pc, #48]	; (800522c <HAL_TIM_Base_MspInit+0x80>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	4a0b      	ldr	r2, [pc, #44]	; (800522c <HAL_TIM_Base_MspInit+0x80>)
 8005200:	f043 0302 	orr.w	r3, r3, #2
 8005204:	6413      	str	r3, [r2, #64]	; 0x40
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <HAL_TIM_Base_MspInit+0x80>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 3);
 8005212:	2203      	movs	r2, #3
 8005214:	2100      	movs	r1, #0
 8005216:	201d      	movs	r0, #29
 8005218:	f000 fc59 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800521c:	201d      	movs	r0, #29
 800521e:	f000 fc72 	bl	8005b06 <HAL_NVIC_EnableIRQ>
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40023800 	.word	0x40023800
 8005230:	40000400 	.word	0x40000400

08005234 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08a      	sub	sp, #40	; 0x28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800523c:	f107 0314 	add.w	r3, r7, #20
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	605a      	str	r2, [r3, #4]
 8005246:	609a      	str	r2, [r3, #8]
 8005248:	60da      	str	r2, [r3, #12]
 800524a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a21      	ldr	r2, [pc, #132]	; (80052d8 <HAL_TIM_MspPostInit+0xa4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d13b      	bne.n	80052ce <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005256:	2300      	movs	r3, #0
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	4b20      	ldr	r3, [pc, #128]	; (80052dc <HAL_TIM_MspPostInit+0xa8>)
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	4a1f      	ldr	r2, [pc, #124]	; (80052dc <HAL_TIM_MspPostInit+0xa8>)
 8005260:	f043 0302 	orr.w	r3, r3, #2
 8005264:	6313      	str	r3, [r2, #48]	; 0x30
 8005266:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <HAL_TIM_MspPostInit+0xa8>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	4b19      	ldr	r3, [pc, #100]	; (80052dc <HAL_TIM_MspPostInit+0xa8>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	4a18      	ldr	r2, [pc, #96]	; (80052dc <HAL_TIM_MspPostInit+0xa8>)
 800527c:	f043 0304 	orr.w	r3, r3, #4
 8005280:	6313      	str	r3, [r2, #48]	; 0x30
 8005282:	4b16      	ldr	r3, [pc, #88]	; (80052dc <HAL_TIM_MspPostInit+0xa8>)
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800528e:	2301      	movs	r3, #1
 8005290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005292:	2302      	movs	r3, #2
 8005294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800529a:	2300      	movs	r3, #0
 800529c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800529e:	2302      	movs	r3, #2
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052a2:	f107 0314 	add.w	r3, r7, #20
 80052a6:	4619      	mov	r1, r3
 80052a8:	480d      	ldr	r0, [pc, #52]	; (80052e0 <HAL_TIM_MspPostInit+0xac>)
 80052aa:	f001 f849 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80052ae:	2340      	movs	r3, #64	; 0x40
 80052b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b2:	2302      	movs	r3, #2
 80052b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ba:	2300      	movs	r3, #0
 80052bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052be:	2302      	movs	r3, #2
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052c2:	f107 0314 	add.w	r3, r7, #20
 80052c6:	4619      	mov	r1, r3
 80052c8:	4806      	ldr	r0, [pc, #24]	; (80052e4 <HAL_TIM_MspPostInit+0xb0>)
 80052ca:	f001 f839 	bl	8006340 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80052ce:	bf00      	nop
 80052d0:	3728      	adds	r7, #40	; 0x28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40000400 	.word	0x40000400
 80052dc:	40023800 	.word	0x40023800
 80052e0:	40020400 	.word	0x40020400
 80052e4:	40020800 	.word	0x40020800

080052e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08a      	sub	sp, #40	; 0x28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f0:	f107 0314 	add.w	r3, r7, #20
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	605a      	str	r2, [r3, #4]
 80052fa:	609a      	str	r2, [r3, #8]
 80052fc:	60da      	str	r2, [r3, #12]
 80052fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a5b      	ldr	r2, [pc, #364]	; (8005474 <HAL_UART_MspInit+0x18c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	f040 80af 	bne.w	800546a <HAL_UART_MspInit+0x182>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800530c:	2300      	movs	r3, #0
 800530e:	613b      	str	r3, [r7, #16]
 8005310:	4b59      	ldr	r3, [pc, #356]	; (8005478 <HAL_UART_MspInit+0x190>)
 8005312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005314:	4a58      	ldr	r2, [pc, #352]	; (8005478 <HAL_UART_MspInit+0x190>)
 8005316:	f043 0310 	orr.w	r3, r3, #16
 800531a:	6453      	str	r3, [r2, #68]	; 0x44
 800531c:	4b56      	ldr	r3, [pc, #344]	; (8005478 <HAL_UART_MspInit+0x190>)
 800531e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	4b52      	ldr	r3, [pc, #328]	; (8005478 <HAL_UART_MspInit+0x190>)
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	4a51      	ldr	r2, [pc, #324]	; (8005478 <HAL_UART_MspInit+0x190>)
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	6313      	str	r3, [r2, #48]	; 0x30
 8005338:	4b4f      	ldr	r3, [pc, #316]	; (8005478 <HAL_UART_MspInit+0x190>)
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005344:	2300      	movs	r3, #0
 8005346:	60bb      	str	r3, [r7, #8]
 8005348:	4b4b      	ldr	r3, [pc, #300]	; (8005478 <HAL_UART_MspInit+0x190>)
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	4a4a      	ldr	r2, [pc, #296]	; (8005478 <HAL_UART_MspInit+0x190>)
 800534e:	f043 0302 	orr.w	r3, r3, #2
 8005352:	6313      	str	r3, [r2, #48]	; 0x30
 8005354:	4b48      	ldr	r3, [pc, #288]	; (8005478 <HAL_UART_MspInit+0x190>)
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	60bb      	str	r3, [r7, #8]
 800535e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005360:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005366:	2302      	movs	r3, #2
 8005368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800536e:	2303      	movs	r3, #3
 8005370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005372:	2307      	movs	r3, #7
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005376:	f107 0314 	add.w	r3, r7, #20
 800537a:	4619      	mov	r1, r3
 800537c:	483f      	ldr	r0, [pc, #252]	; (800547c <HAL_UART_MspInit+0x194>)
 800537e:	f000 ffdf 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005382:	2380      	movs	r3, #128	; 0x80
 8005384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005386:	2302      	movs	r3, #2
 8005388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800538a:	2300      	movs	r3, #0
 800538c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800538e:	2303      	movs	r3, #3
 8005390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005392:	2307      	movs	r3, #7
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005396:	f107 0314 	add.w	r3, r7, #20
 800539a:	4619      	mov	r1, r3
 800539c:	4838      	ldr	r0, [pc, #224]	; (8005480 <HAL_UART_MspInit+0x198>)
 800539e:	f000 ffcf 	bl	8006340 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80053a2:	4b38      	ldr	r3, [pc, #224]	; (8005484 <HAL_UART_MspInit+0x19c>)
 80053a4:	4a38      	ldr	r2, [pc, #224]	; (8005488 <HAL_UART_MspInit+0x1a0>)
 80053a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80053a8:	4b36      	ldr	r3, [pc, #216]	; (8005484 <HAL_UART_MspInit+0x19c>)
 80053aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053b0:	4b34      	ldr	r3, [pc, #208]	; (8005484 <HAL_UART_MspInit+0x19c>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053b6:	4b33      	ldr	r3, [pc, #204]	; (8005484 <HAL_UART_MspInit+0x19c>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053bc:	4b31      	ldr	r3, [pc, #196]	; (8005484 <HAL_UART_MspInit+0x19c>)
 80053be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053c4:	4b2f      	ldr	r3, [pc, #188]	; (8005484 <HAL_UART_MspInit+0x19c>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053ca:	4b2e      	ldr	r3, [pc, #184]	; (8005484 <HAL_UART_MspInit+0x19c>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80053d0:	4b2c      	ldr	r3, [pc, #176]	; (8005484 <HAL_UART_MspInit+0x19c>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053d6:	4b2b      	ldr	r3, [pc, #172]	; (8005484 <HAL_UART_MspInit+0x19c>)
 80053d8:	2200      	movs	r2, #0
 80053da:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053dc:	4b29      	ldr	r3, [pc, #164]	; (8005484 <HAL_UART_MspInit+0x19c>)
 80053de:	2200      	movs	r2, #0
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80053e2:	4828      	ldr	r0, [pc, #160]	; (8005484 <HAL_UART_MspInit+0x19c>)
 80053e4:	f000 fbaa 	bl	8005b3c <HAL_DMA_Init>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80053ee:	f7fc ff67 	bl	80022c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a23      	ldr	r2, [pc, #140]	; (8005484 <HAL_UART_MspInit+0x19c>)
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38
 80053f8:	4a22      	ldr	r2, [pc, #136]	; (8005484 <HAL_UART_MspInit+0x19c>)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80053fe:	4b23      	ldr	r3, [pc, #140]	; (800548c <HAL_UART_MspInit+0x1a4>)
 8005400:	4a23      	ldr	r2, [pc, #140]	; (8005490 <HAL_UART_MspInit+0x1a8>)
 8005402:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005404:	4b21      	ldr	r3, [pc, #132]	; (800548c <HAL_UART_MspInit+0x1a4>)
 8005406:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800540a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800540c:	4b1f      	ldr	r3, [pc, #124]	; (800548c <HAL_UART_MspInit+0x1a4>)
 800540e:	2240      	movs	r2, #64	; 0x40
 8005410:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005412:	4b1e      	ldr	r3, [pc, #120]	; (800548c <HAL_UART_MspInit+0x1a4>)
 8005414:	2200      	movs	r2, #0
 8005416:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005418:	4b1c      	ldr	r3, [pc, #112]	; (800548c <HAL_UART_MspInit+0x1a4>)
 800541a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800541e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005420:	4b1a      	ldr	r3, [pc, #104]	; (800548c <HAL_UART_MspInit+0x1a4>)
 8005422:	2200      	movs	r2, #0
 8005424:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005426:	4b19      	ldr	r3, [pc, #100]	; (800548c <HAL_UART_MspInit+0x1a4>)
 8005428:	2200      	movs	r2, #0
 800542a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800542c:	4b17      	ldr	r3, [pc, #92]	; (800548c <HAL_UART_MspInit+0x1a4>)
 800542e:	2200      	movs	r2, #0
 8005430:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005432:	4b16      	ldr	r3, [pc, #88]	; (800548c <HAL_UART_MspInit+0x1a4>)
 8005434:	2200      	movs	r2, #0
 8005436:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005438:	4b14      	ldr	r3, [pc, #80]	; (800548c <HAL_UART_MspInit+0x1a4>)
 800543a:	2200      	movs	r2, #0
 800543c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800543e:	4813      	ldr	r0, [pc, #76]	; (800548c <HAL_UART_MspInit+0x1a4>)
 8005440:	f000 fb7c 	bl	8005b3c <HAL_DMA_Init>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800544a:	f7fc ff39 	bl	80022c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a0e      	ldr	r2, [pc, #56]	; (800548c <HAL_UART_MspInit+0x1a4>)
 8005452:	635a      	str	r2, [r3, #52]	; 0x34
 8005454:	4a0d      	ldr	r2, [pc, #52]	; (800548c <HAL_UART_MspInit+0x1a4>)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800545a:	2200      	movs	r2, #0
 800545c:	2100      	movs	r1, #0
 800545e:	2025      	movs	r0, #37	; 0x25
 8005460:	f000 fb35 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005464:	2025      	movs	r0, #37	; 0x25
 8005466:	f000 fb4e 	bl	8005b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800546a:	bf00      	nop
 800546c:	3728      	adds	r7, #40	; 0x28
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40011000 	.word	0x40011000
 8005478:	40023800 	.word	0x40023800
 800547c:	40020000 	.word	0x40020000
 8005480:	40020400 	.word	0x40020400
 8005484:	20000450 	.word	0x20000450
 8005488:	40026440 	.word	0x40026440
 800548c:	200004b0 	.word	0x200004b0
 8005490:	400264b8 	.word	0x400264b8

08005494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005498:	e7fe      	b.n	8005498 <NMI_Handler+0x4>

0800549a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800549a:	b480      	push	{r7}
 800549c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800549e:	e7fe      	b.n	800549e <HardFault_Handler+0x4>

080054a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054a4:	e7fe      	b.n	80054a4 <MemManage_Handler+0x4>

080054a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054a6:	b480      	push	{r7}
 80054a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054aa:	e7fe      	b.n	80054aa <BusFault_Handler+0x4>

080054ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054b0:	e7fe      	b.n	80054b0 <UsageFault_Handler+0x4>

080054b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054b2:	b480      	push	{r7}
 80054b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054b6:	bf00      	nop
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054c4:	bf00      	nop
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054ce:	b480      	push	{r7}
 80054d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054d2:	bf00      	nop
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054e0:	f000 f9d6 	bl	8005890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054e4:	bf00      	nop
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80054ec:	4802      	ldr	r0, [pc, #8]	; (80054f8 <TIM2_IRQHandler+0x10>)
 80054ee:	f004 fb29 	bl	8009b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80054f2:	bf00      	nop
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	2000037c 	.word	0x2000037c

080054fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005500:	4802      	ldr	r0, [pc, #8]	; (800550c <TIM3_IRQHandler+0x10>)
 8005502:	f004 fb1f 	bl	8009b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005506:	bf00      	nop
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	200003c4 	.word	0x200003c4

08005510 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005514:	4802      	ldr	r0, [pc, #8]	; (8005520 <USART1_IRQHandler+0x10>)
 8005516:	f005 fa19 	bl	800a94c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800551a:	bf00      	nop
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	2000040c 	.word	0x2000040c

08005524 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_ENCODER_A_Pin);
 8005528:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800552c:	f001 f8d8 	bl	80066e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_ENCODER_B_Pin);
 8005530:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005534:	f001 f8d4 	bl	80066e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_ENCODER_A_Pin);
 8005538:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800553c:	f001 f8d0 	bl	80066e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_ENCODER_B_Pin);
 8005540:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005544:	f001 f8cc 	bl	80066e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005548:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800554c:	f001 f8c8 	bl	80066e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005550:	bf00      	nop
 8005552:	bd80      	pop	{r7, pc}

08005554 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005558:	4802      	ldr	r0, [pc, #8]	; (8005564 <DMA2_Stream2_IRQHandler+0x10>)
 800555a:	f000 fc87 	bl	8005e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800555e:	bf00      	nop
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20000450 	.word	0x20000450

08005568 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800556c:	4802      	ldr	r0, [pc, #8]	; (8005578 <OTG_FS_IRQHandler+0x10>)
 800556e:	f001 fb39 	bl	8006be4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005572:	bf00      	nop
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20001b10 	.word	0x20001b10

0800557c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005580:	4802      	ldr	r0, [pc, #8]	; (800558c <DMA2_Stream7_IRQHandler+0x10>)
 8005582:	f000 fc73 	bl	8005e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005586:	bf00      	nop
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	200004b0 	.word	0x200004b0

08005590 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
	return 1;
 8005594:	2301      	movs	r3, #1
}
 8005596:	4618      	mov	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <_kill>:

int _kill(int pid, int sig)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80055aa:	f009 fdcd 	bl	800f148 <__errno>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2216      	movs	r2, #22
 80055b2:	601a      	str	r2, [r3, #0]
	return -1;
 80055b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <_exit>:

void _exit (int status)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80055c8:	f04f 31ff 	mov.w	r1, #4294967295
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff ffe7 	bl	80055a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80055d2:	e7fe      	b.n	80055d2 <_exit+0x12>

080055d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e00a      	b.n	80055fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80055e6:	f3af 8000 	nop.w
 80055ea:	4601      	mov	r1, r0
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	60ba      	str	r2, [r7, #8]
 80055f2:	b2ca      	uxtb	r2, r1
 80055f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	3301      	adds	r3, #1
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	429a      	cmp	r2, r3
 8005602:	dbf0      	blt.n	80055e6 <_read+0x12>
	}

return len;
 8005604:	687b      	ldr	r3, [r7, #4]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b086      	sub	sp, #24
 8005612:	af00      	add	r7, sp, #0
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	e009      	b.n	8005634 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	60ba      	str	r2, [r7, #8]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	3301      	adds	r3, #1
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	429a      	cmp	r2, r3
 800563a:	dbf1      	blt.n	8005620 <_write+0x12>
	}
	return len;
 800563c:	687b      	ldr	r3, [r7, #4]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <_close>:

int _close(int file)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
	return -1;
 800564e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800566e:	605a      	str	r2, [r3, #4]
	return 0;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <_isatty>:

int _isatty(int file)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
	return 1;
 8005686:	2301      	movs	r3, #1
}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
	return 0;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056b8:	4a14      	ldr	r2, [pc, #80]	; (800570c <_sbrk+0x5c>)
 80056ba:	4b15      	ldr	r3, [pc, #84]	; (8005710 <_sbrk+0x60>)
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056c4:	4b13      	ldr	r3, [pc, #76]	; (8005714 <_sbrk+0x64>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056cc:	4b11      	ldr	r3, [pc, #68]	; (8005714 <_sbrk+0x64>)
 80056ce:	4a12      	ldr	r2, [pc, #72]	; (8005718 <_sbrk+0x68>)
 80056d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056d2:	4b10      	ldr	r3, [pc, #64]	; (8005714 <_sbrk+0x64>)
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4413      	add	r3, r2
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d207      	bcs.n	80056f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056e0:	f009 fd32 	bl	800f148 <__errno>
 80056e4:	4603      	mov	r3, r0
 80056e6:	220c      	movs	r2, #12
 80056e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056ea:	f04f 33ff 	mov.w	r3, #4294967295
 80056ee:	e009      	b.n	8005704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056f0:	4b08      	ldr	r3, [pc, #32]	; (8005714 <_sbrk+0x64>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056f6:	4b07      	ldr	r3, [pc, #28]	; (8005714 <_sbrk+0x64>)
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4413      	add	r3, r2
 80056fe:	4a05      	ldr	r2, [pc, #20]	; (8005714 <_sbrk+0x64>)
 8005700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005702:	68fb      	ldr	r3, [r7, #12]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20020000 	.word	0x20020000
 8005710:	00000400 	.word	0x00000400
 8005714:	200016e0 	.word	0x200016e0
 8005718:	20001e18 	.word	0x20001e18

0800571c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005720:	4b06      	ldr	r3, [pc, #24]	; (800573c <SystemInit+0x20>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005726:	4a05      	ldr	r2, [pc, #20]	; (800573c <SystemInit+0x20>)
 8005728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800572c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005730:	bf00      	nop
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	e000ed00 	.word	0xe000ed00

08005740 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	0a5a      	lsrs	r2, r3, #9
 8005750:	490f      	ldr	r1, [pc, #60]	; (8005790 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005752:	fba1 1202 	umull	r1, r2, r1, r2
 8005756:	09d2      	lsrs	r2, r2, #7
 8005758:	490e      	ldr	r1, [pc, #56]	; (8005794 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800575a:	fb01 f202 	mul.w	r2, r1, r2
 800575e:	1a9b      	subs	r3, r3, r2
 8005760:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	0a5b      	lsrs	r3, r3, #9
 8005768:	4a09      	ldr	r2, [pc, #36]	; (8005790 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800576a:	fba2 2303 	umull	r2, r3, r2, r3
 800576e:	09db      	lsrs	r3, r3, #7
 8005770:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	441a      	add	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	601a      	str	r2, [r3, #0]
}
 8005784:	bf00      	nop
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	00044b83 	.word	0x00044b83
 8005794:	3b9aca00 	.word	0x3b9aca00

08005798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800579c:	480d      	ldr	r0, [pc, #52]	; (80057d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800579e:	490e      	ldr	r1, [pc, #56]	; (80057d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80057a0:	4a0e      	ldr	r2, [pc, #56]	; (80057dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80057a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057a4:	e002      	b.n	80057ac <LoopCopyDataInit>

080057a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057aa:	3304      	adds	r3, #4

080057ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057b0:	d3f9      	bcc.n	80057a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057b2:	4a0b      	ldr	r2, [pc, #44]	; (80057e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80057b4:	4c0b      	ldr	r4, [pc, #44]	; (80057e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80057b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057b8:	e001      	b.n	80057be <LoopFillZerobss>

080057ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057bc:	3204      	adds	r2, #4

080057be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057c0:	d3fb      	bcc.n	80057ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80057c2:	f7ff ffab 	bl	800571c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057c6:	f009 fcc5 	bl	800f154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057ca:	f7fc f947 	bl	8001a5c <main>
  bx  lr    
 80057ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80057d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80057d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057d8:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80057dc:	08012380 	.word	0x08012380
  ldr r2, =_sbss
 80057e0:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80057e4:	20001e14 	.word	0x20001e14

080057e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057e8:	e7fe      	b.n	80057e8 <ADC_IRQHandler>
	...

080057ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057f0:	4b0e      	ldr	r3, [pc, #56]	; (800582c <HAL_Init+0x40>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a0d      	ldr	r2, [pc, #52]	; (800582c <HAL_Init+0x40>)
 80057f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057fc:	4b0b      	ldr	r3, [pc, #44]	; (800582c <HAL_Init+0x40>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a0a      	ldr	r2, [pc, #40]	; (800582c <HAL_Init+0x40>)
 8005802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005806:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005808:	4b08      	ldr	r3, [pc, #32]	; (800582c <HAL_Init+0x40>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a07      	ldr	r2, [pc, #28]	; (800582c <HAL_Init+0x40>)
 800580e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005814:	2003      	movs	r0, #3
 8005816:	f000 f94f 	bl	8005ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800581a:	2000      	movs	r0, #0
 800581c:	f000 f808 	bl	8005830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005820:	f7ff fb3e 	bl	8004ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40023c00 	.word	0x40023c00

08005830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005838:	4b12      	ldr	r3, [pc, #72]	; (8005884 <HAL_InitTick+0x54>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	4b12      	ldr	r3, [pc, #72]	; (8005888 <HAL_InitTick+0x58>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	4619      	mov	r1, r3
 8005842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005846:	fbb3 f3f1 	udiv	r3, r3, r1
 800584a:	fbb2 f3f3 	udiv	r3, r2, r3
 800584e:	4618      	mov	r0, r3
 8005850:	f000 f967 	bl	8005b22 <HAL_SYSTICK_Config>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e00e      	b.n	800587c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b0f      	cmp	r3, #15
 8005862:	d80a      	bhi.n	800587a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005864:	2200      	movs	r2, #0
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	f04f 30ff 	mov.w	r0, #4294967295
 800586c:	f000 f92f 	bl	8005ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005870:	4a06      	ldr	r2, [pc, #24]	; (800588c <HAL_InitTick+0x5c>)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	e000      	b.n	800587c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	20000018 	.word	0x20000018
 8005888:	20000020 	.word	0x20000020
 800588c:	2000001c 	.word	0x2000001c

08005890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005894:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <HAL_IncTick+0x20>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	461a      	mov	r2, r3
 800589a:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <HAL_IncTick+0x24>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4413      	add	r3, r2
 80058a0:	4a04      	ldr	r2, [pc, #16]	; (80058b4 <HAL_IncTick+0x24>)
 80058a2:	6013      	str	r3, [r2, #0]
}
 80058a4:	bf00      	nop
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	20000020 	.word	0x20000020
 80058b4:	20001734 	.word	0x20001734

080058b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  return uwTick;
 80058bc:	4b03      	ldr	r3, [pc, #12]	; (80058cc <HAL_GetTick+0x14>)
 80058be:	681b      	ldr	r3, [r3, #0]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	20001734 	.word	0x20001734

080058d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058d8:	f7ff ffee 	bl	80058b8 <HAL_GetTick>
 80058dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d005      	beq.n	80058f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058ea:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <HAL_Delay+0x44>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80058f6:	bf00      	nop
 80058f8:	f7ff ffde 	bl	80058b8 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	429a      	cmp	r2, r3
 8005906:	d8f7      	bhi.n	80058f8 <HAL_Delay+0x28>
  {
  }
}
 8005908:	bf00      	nop
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20000020 	.word	0x20000020

08005918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005928:	4b0c      	ldr	r3, [pc, #48]	; (800595c <__NVIC_SetPriorityGrouping+0x44>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005934:	4013      	ands	r3, r2
 8005936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800594a:	4a04      	ldr	r2, [pc, #16]	; (800595c <__NVIC_SetPriorityGrouping+0x44>)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	60d3      	str	r3, [r2, #12]
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	e000ed00 	.word	0xe000ed00

08005960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005964:	4b04      	ldr	r3, [pc, #16]	; (8005978 <__NVIC_GetPriorityGrouping+0x18>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	0a1b      	lsrs	r3, r3, #8
 800596a:	f003 0307 	and.w	r3, r3, #7
}
 800596e:	4618      	mov	r0, r3
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	e000ed00 	.word	0xe000ed00

0800597c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	4603      	mov	r3, r0
 8005984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800598a:	2b00      	cmp	r3, #0
 800598c:	db0b      	blt.n	80059a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	f003 021f 	and.w	r2, r3, #31
 8005994:	4907      	ldr	r1, [pc, #28]	; (80059b4 <__NVIC_EnableIRQ+0x38>)
 8005996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	2001      	movs	r0, #1
 800599e:	fa00 f202 	lsl.w	r2, r0, r2
 80059a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	e000e100 	.word	0xe000e100

080059b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	4603      	mov	r3, r0
 80059c0:	6039      	str	r1, [r7, #0]
 80059c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	db0a      	blt.n	80059e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	490c      	ldr	r1, [pc, #48]	; (8005a04 <__NVIC_SetPriority+0x4c>)
 80059d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d6:	0112      	lsls	r2, r2, #4
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	440b      	add	r3, r1
 80059dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059e0:	e00a      	b.n	80059f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	4908      	ldr	r1, [pc, #32]	; (8005a08 <__NVIC_SetPriority+0x50>)
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	3b04      	subs	r3, #4
 80059f0:	0112      	lsls	r2, r2, #4
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	440b      	add	r3, r1
 80059f6:	761a      	strb	r2, [r3, #24]
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	e000e100 	.word	0xe000e100
 8005a08:	e000ed00 	.word	0xe000ed00

08005a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b089      	sub	sp, #36	; 0x24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	f1c3 0307 	rsb	r3, r3, #7
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	bf28      	it	cs
 8005a2a:	2304      	movcs	r3, #4
 8005a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	3304      	adds	r3, #4
 8005a32:	2b06      	cmp	r3, #6
 8005a34:	d902      	bls.n	8005a3c <NVIC_EncodePriority+0x30>
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	3b03      	subs	r3, #3
 8005a3a:	e000      	b.n	8005a3e <NVIC_EncodePriority+0x32>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a40:	f04f 32ff 	mov.w	r2, #4294967295
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4a:	43da      	mvns	r2, r3
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	401a      	ands	r2, r3
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a54:	f04f 31ff 	mov.w	r1, #4294967295
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5e:	43d9      	mvns	r1, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a64:	4313      	orrs	r3, r2
         );
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3724      	adds	r7, #36	; 0x24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
	...

08005a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a84:	d301      	bcc.n	8005a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a86:	2301      	movs	r3, #1
 8005a88:	e00f      	b.n	8005aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a8a:	4a0a      	ldr	r2, [pc, #40]	; (8005ab4 <SysTick_Config+0x40>)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a92:	210f      	movs	r1, #15
 8005a94:	f04f 30ff 	mov.w	r0, #4294967295
 8005a98:	f7ff ff8e 	bl	80059b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a9c:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <SysTick_Config+0x40>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005aa2:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <SysTick_Config+0x40>)
 8005aa4:	2207      	movs	r2, #7
 8005aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	e000e010 	.word	0xe000e010

08005ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff ff29 	bl	8005918 <__NVIC_SetPriorityGrouping>
}
 8005ac6:	bf00      	nop
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b086      	sub	sp, #24
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	607a      	str	r2, [r7, #4]
 8005ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ae0:	f7ff ff3e 	bl	8005960 <__NVIC_GetPriorityGrouping>
 8005ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	6978      	ldr	r0, [r7, #20]
 8005aec:	f7ff ff8e 	bl	8005a0c <NVIC_EncodePriority>
 8005af0:	4602      	mov	r2, r0
 8005af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff ff5d 	bl	80059b8 <__NVIC_SetPriority>
}
 8005afe:	bf00      	nop
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff ff31 	bl	800597c <__NVIC_EnableIRQ>
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff ffa2 	bl	8005a74 <SysTick_Config>
 8005b30:	4603      	mov	r3, r0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b48:	f7ff feb6 	bl	80058b8 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e099      	b.n	8005c8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0201 	bic.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b78:	e00f      	b.n	8005b9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b7a:	f7ff fe9d 	bl	80058b8 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b05      	cmp	r3, #5
 8005b86:	d908      	bls.n	8005b9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2203      	movs	r2, #3
 8005b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e078      	b.n	8005c8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e8      	bne.n	8005b7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4b38      	ldr	r3, [pc, #224]	; (8005c94 <HAL_DMA_Init+0x158>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d107      	bne.n	8005c04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f023 0307 	bic.w	r3, r3, #7
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d117      	bne.n	8005c5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00e      	beq.n	8005c5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fb01 	bl	8006248 <DMA_CheckFifoParam>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2240      	movs	r2, #64	; 0x40
 8005c50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e016      	b.n	8005c8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fab8 	bl	80061dc <DMA_CalcBaseAndBitshift>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c74:	223f      	movs	r2, #63	; 0x3f
 8005c76:	409a      	lsls	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	f010803f 	.word	0xf010803f

08005c98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_DMA_Start_IT+0x26>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e040      	b.n	8005d40 <HAL_DMA_Start_IT+0xa8>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d12f      	bne.n	8005d32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fa4a 	bl	8006180 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf0:	223f      	movs	r2, #63	; 0x3f
 8005cf2:	409a      	lsls	r2, r3
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0216 	orr.w	r2, r2, #22
 8005d06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0208 	orr.w	r2, r2, #8
 8005d1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0201 	orr.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	e005      	b.n	8005d3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d56:	f7ff fdaf 	bl	80058b8 <HAL_GetTick>
 8005d5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d008      	beq.n	8005d7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2280      	movs	r2, #128	; 0x80
 8005d6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e052      	b.n	8005e20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0216 	bic.w	r2, r2, #22
 8005d88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695a      	ldr	r2, [r3, #20]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d103      	bne.n	8005daa <HAL_DMA_Abort+0x62>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d007      	beq.n	8005dba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0208 	bic.w	r2, r2, #8
 8005db8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0201 	bic.w	r2, r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dca:	e013      	b.n	8005df4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dcc:	f7ff fd74 	bl	80058b8 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b05      	cmp	r3, #5
 8005dd8:	d90c      	bls.n	8005df4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2203      	movs	r2, #3
 8005de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e015      	b.n	8005e20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1e4      	bne.n	8005dcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e06:	223f      	movs	r2, #63	; 0x3f
 8005e08:	409a      	lsls	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d004      	beq.n	8005e46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2280      	movs	r2, #128	; 0x80
 8005e40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e00c      	b.n	8005e60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2205      	movs	r2, #5
 8005e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0201 	bic.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e78:	4b8e      	ldr	r3, [pc, #568]	; (80060b4 <HAL_DMA_IRQHandler+0x248>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a8e      	ldr	r2, [pc, #568]	; (80060b8 <HAL_DMA_IRQHandler+0x24c>)
 8005e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e82:	0a9b      	lsrs	r3, r3, #10
 8005e84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e96:	2208      	movs	r2, #8
 8005e98:	409a      	lsls	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d01a      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d013      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0204 	bic.w	r2, r2, #4
 8005ebe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec4:	2208      	movs	r2, #8
 8005ec6:	409a      	lsls	r2, r3
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed0:	f043 0201 	orr.w	r2, r3, #1
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005edc:	2201      	movs	r2, #1
 8005ede:	409a      	lsls	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d012      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00b      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efa:	2201      	movs	r2, #1
 8005efc:	409a      	lsls	r2, r3
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f06:	f043 0202 	orr.w	r2, r3, #2
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f12:	2204      	movs	r2, #4
 8005f14:	409a      	lsls	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d012      	beq.n	8005f44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00b      	beq.n	8005f44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f30:	2204      	movs	r2, #4
 8005f32:	409a      	lsls	r2, r3
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3c:	f043 0204 	orr.w	r2, r3, #4
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f48:	2210      	movs	r2, #16
 8005f4a:	409a      	lsls	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d043      	beq.n	8005fdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d03c      	beq.n	8005fdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f66:	2210      	movs	r2, #16
 8005f68:	409a      	lsls	r2, r3
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d018      	beq.n	8005fae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d108      	bne.n	8005f9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d024      	beq.n	8005fdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	4798      	blx	r3
 8005f9a:	e01f      	b.n	8005fdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01b      	beq.n	8005fdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	4798      	blx	r3
 8005fac:	e016      	b.n	8005fdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d107      	bne.n	8005fcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0208 	bic.w	r2, r2, #8
 8005fca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	409a      	lsls	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 808f 	beq.w	800610c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0310 	and.w	r3, r3, #16
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8087 	beq.w	800610c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006002:	2220      	movs	r2, #32
 8006004:	409a      	lsls	r2, r3
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b05      	cmp	r3, #5
 8006014:	d136      	bne.n	8006084 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0216 	bic.w	r2, r2, #22
 8006024:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695a      	ldr	r2, [r3, #20]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006034:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	2b00      	cmp	r3, #0
 800603c:	d103      	bne.n	8006046 <HAL_DMA_IRQHandler+0x1da>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006042:	2b00      	cmp	r3, #0
 8006044:	d007      	beq.n	8006056 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0208 	bic.w	r2, r2, #8
 8006054:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605a:	223f      	movs	r2, #63	; 0x3f
 800605c:	409a      	lsls	r2, r3
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006076:	2b00      	cmp	r3, #0
 8006078:	d07e      	beq.n	8006178 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	4798      	blx	r3
        }
        return;
 8006082:	e079      	b.n	8006178 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d01d      	beq.n	80060ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10d      	bne.n	80060bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d031      	beq.n	800610c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	4798      	blx	r3
 80060b0:	e02c      	b.n	800610c <HAL_DMA_IRQHandler+0x2a0>
 80060b2:	bf00      	nop
 80060b4:	20000018 	.word	0x20000018
 80060b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d023      	beq.n	800610c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	4798      	blx	r3
 80060cc:	e01e      	b.n	800610c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10f      	bne.n	80060fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0210 	bic.w	r2, r2, #16
 80060ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006110:	2b00      	cmp	r3, #0
 8006112:	d032      	beq.n	800617a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d022      	beq.n	8006166 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2205      	movs	r2, #5
 8006124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0201 	bic.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	3301      	adds	r3, #1
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	429a      	cmp	r2, r3
 8006142:	d307      	bcc.n	8006154 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f2      	bne.n	8006138 <HAL_DMA_IRQHandler+0x2cc>
 8006152:	e000      	b.n	8006156 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006154:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d005      	beq.n	800617a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	4798      	blx	r3
 8006176:	e000      	b.n	800617a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006178:	bf00      	nop
    }
  }
}
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800619c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	2b40      	cmp	r3, #64	; 0x40
 80061ac:	d108      	bne.n	80061c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80061be:	e007      	b.n	80061d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	60da      	str	r2, [r3, #12]
}
 80061d0:	bf00      	nop
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	3b10      	subs	r3, #16
 80061ec:	4a14      	ldr	r2, [pc, #80]	; (8006240 <DMA_CalcBaseAndBitshift+0x64>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	091b      	lsrs	r3, r3, #4
 80061f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80061f6:	4a13      	ldr	r2, [pc, #76]	; (8006244 <DMA_CalcBaseAndBitshift+0x68>)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4413      	add	r3, r2
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b03      	cmp	r3, #3
 8006208:	d909      	bls.n	800621e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	1d1a      	adds	r2, r3, #4
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	659a      	str	r2, [r3, #88]	; 0x58
 800621c:	e007      	b.n	800622e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006226:	f023 0303 	bic.w	r3, r3, #3
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006232:	4618      	mov	r0, r3
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	aaaaaaab 	.word	0xaaaaaaab
 8006244:	08011f88 	.word	0x08011f88

08006248 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d11f      	bne.n	80062a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b03      	cmp	r3, #3
 8006266:	d856      	bhi.n	8006316 <DMA_CheckFifoParam+0xce>
 8006268:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <DMA_CheckFifoParam+0x28>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	08006281 	.word	0x08006281
 8006274:	08006293 	.word	0x08006293
 8006278:	08006281 	.word	0x08006281
 800627c:	08006317 	.word	0x08006317
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d046      	beq.n	800631a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006290:	e043      	b.n	800631a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006296:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800629a:	d140      	bne.n	800631e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062a0:	e03d      	b.n	800631e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062aa:	d121      	bne.n	80062f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d837      	bhi.n	8006322 <DMA_CheckFifoParam+0xda>
 80062b2:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <DMA_CheckFifoParam+0x70>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	080062c9 	.word	0x080062c9
 80062bc:	080062cf 	.word	0x080062cf
 80062c0:	080062c9 	.word	0x080062c9
 80062c4:	080062e1 	.word	0x080062e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	73fb      	strb	r3, [r7, #15]
      break;
 80062cc:	e030      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d025      	beq.n	8006326 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062de:	e022      	b.n	8006326 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062e8:	d11f      	bne.n	800632a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80062ee:	e01c      	b.n	800632a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d903      	bls.n	80062fe <DMA_CheckFifoParam+0xb6>
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d003      	beq.n	8006304 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80062fc:	e018      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	73fb      	strb	r3, [r7, #15]
      break;
 8006302:	e015      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00e      	beq.n	800632e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
      break;
 8006314:	e00b      	b.n	800632e <DMA_CheckFifoParam+0xe6>
      break;
 8006316:	bf00      	nop
 8006318:	e00a      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
      break;
 800631a:	bf00      	nop
 800631c:	e008      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
      break;
 800631e:	bf00      	nop
 8006320:	e006      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
      break;
 8006322:	bf00      	nop
 8006324:	e004      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
      break;
 8006326:	bf00      	nop
 8006328:	e002      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
      break;   
 800632a:	bf00      	nop
 800632c:	e000      	b.n	8006330 <DMA_CheckFifoParam+0xe8>
      break;
 800632e:	bf00      	nop
    }
  } 
  
  return status; 
 8006330:	7bfb      	ldrb	r3, [r7, #15]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop

08006340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006340:	b480      	push	{r7}
 8006342:	b089      	sub	sp, #36	; 0x24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800634a:	2300      	movs	r3, #0
 800634c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800634e:	2300      	movs	r3, #0
 8006350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006352:	2300      	movs	r3, #0
 8006354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006356:	2300      	movs	r3, #0
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	e159      	b.n	8006610 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800635c:	2201      	movs	r2, #1
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	fa02 f303 	lsl.w	r3, r2, r3
 8006364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4013      	ands	r3, r2
 800636e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	429a      	cmp	r2, r3
 8006376:	f040 8148 	bne.w	800660a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	2b01      	cmp	r3, #1
 8006384:	d005      	beq.n	8006392 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800638e:	2b02      	cmp	r3, #2
 8006390:	d130      	bne.n	80063f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	2203      	movs	r2, #3
 800639e:	fa02 f303 	lsl.w	r3, r2, r3
 80063a2:	43db      	mvns	r3, r3
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	4013      	ands	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	fa02 f303 	lsl.w	r3, r2, r3
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063c8:	2201      	movs	r2, #1
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	fa02 f303 	lsl.w	r3, r2, r3
 80063d0:	43db      	mvns	r3, r3
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	4013      	ands	r3, r2
 80063d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	091b      	lsrs	r3, r3, #4
 80063de:	f003 0201 	and.w	r2, r3, #1
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f003 0303 	and.w	r3, r3, #3
 80063fc:	2b03      	cmp	r3, #3
 80063fe:	d017      	beq.n	8006430 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	2203      	movs	r2, #3
 800640c:	fa02 f303 	lsl.w	r3, r2, r3
 8006410:	43db      	mvns	r3, r3
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	4013      	ands	r3, r2
 8006416:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	fa02 f303 	lsl.w	r3, r2, r3
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	4313      	orrs	r3, r2
 8006428:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f003 0303 	and.w	r3, r3, #3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d123      	bne.n	8006484 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	08da      	lsrs	r2, r3, #3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3208      	adds	r2, #8
 8006444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006448:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	220f      	movs	r2, #15
 8006454:	fa02 f303 	lsl.w	r3, r2, r3
 8006458:	43db      	mvns	r3, r3
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	4013      	ands	r3, r2
 800645e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	4313      	orrs	r3, r2
 8006474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	08da      	lsrs	r2, r3, #3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3208      	adds	r2, #8
 800647e:	69b9      	ldr	r1, [r7, #24]
 8006480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	2203      	movs	r2, #3
 8006490:	fa02 f303 	lsl.w	r3, r2, r3
 8006494:	43db      	mvns	r3, r3
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	4013      	ands	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f003 0203 	and.w	r2, r3, #3
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 80a2 	beq.w	800660a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	4b57      	ldr	r3, [pc, #348]	; (8006628 <HAL_GPIO_Init+0x2e8>)
 80064cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ce:	4a56      	ldr	r2, [pc, #344]	; (8006628 <HAL_GPIO_Init+0x2e8>)
 80064d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064d4:	6453      	str	r3, [r2, #68]	; 0x44
 80064d6:	4b54      	ldr	r3, [pc, #336]	; (8006628 <HAL_GPIO_Init+0x2e8>)
 80064d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064e2:	4a52      	ldr	r2, [pc, #328]	; (800662c <HAL_GPIO_Init+0x2ec>)
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	089b      	lsrs	r3, r3, #2
 80064e8:	3302      	adds	r3, #2
 80064ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	220f      	movs	r2, #15
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	43db      	mvns	r3, r3
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	4013      	ands	r3, r2
 8006504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a49      	ldr	r2, [pc, #292]	; (8006630 <HAL_GPIO_Init+0x2f0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d019      	beq.n	8006542 <HAL_GPIO_Init+0x202>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a48      	ldr	r2, [pc, #288]	; (8006634 <HAL_GPIO_Init+0x2f4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d013      	beq.n	800653e <HAL_GPIO_Init+0x1fe>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a47      	ldr	r2, [pc, #284]	; (8006638 <HAL_GPIO_Init+0x2f8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00d      	beq.n	800653a <HAL_GPIO_Init+0x1fa>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a46      	ldr	r2, [pc, #280]	; (800663c <HAL_GPIO_Init+0x2fc>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d007      	beq.n	8006536 <HAL_GPIO_Init+0x1f6>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a45      	ldr	r2, [pc, #276]	; (8006640 <HAL_GPIO_Init+0x300>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d101      	bne.n	8006532 <HAL_GPIO_Init+0x1f2>
 800652e:	2304      	movs	r3, #4
 8006530:	e008      	b.n	8006544 <HAL_GPIO_Init+0x204>
 8006532:	2307      	movs	r3, #7
 8006534:	e006      	b.n	8006544 <HAL_GPIO_Init+0x204>
 8006536:	2303      	movs	r3, #3
 8006538:	e004      	b.n	8006544 <HAL_GPIO_Init+0x204>
 800653a:	2302      	movs	r3, #2
 800653c:	e002      	b.n	8006544 <HAL_GPIO_Init+0x204>
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <HAL_GPIO_Init+0x204>
 8006542:	2300      	movs	r3, #0
 8006544:	69fa      	ldr	r2, [r7, #28]
 8006546:	f002 0203 	and.w	r2, r2, #3
 800654a:	0092      	lsls	r2, r2, #2
 800654c:	4093      	lsls	r3, r2
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	4313      	orrs	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006554:	4935      	ldr	r1, [pc, #212]	; (800662c <HAL_GPIO_Init+0x2ec>)
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	089b      	lsrs	r3, r3, #2
 800655a:	3302      	adds	r3, #2
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006562:	4b38      	ldr	r3, [pc, #224]	; (8006644 <HAL_GPIO_Init+0x304>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	43db      	mvns	r3, r3
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	4013      	ands	r3, r2
 8006570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006586:	4a2f      	ldr	r2, [pc, #188]	; (8006644 <HAL_GPIO_Init+0x304>)
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800658c:	4b2d      	ldr	r3, [pc, #180]	; (8006644 <HAL_GPIO_Init+0x304>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	43db      	mvns	r3, r3
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	4013      	ands	r3, r2
 800659a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065b0:	4a24      	ldr	r2, [pc, #144]	; (8006644 <HAL_GPIO_Init+0x304>)
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065b6:	4b23      	ldr	r3, [pc, #140]	; (8006644 <HAL_GPIO_Init+0x304>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	43db      	mvns	r3, r3
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	4013      	ands	r3, r2
 80065c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065da:	4a1a      	ldr	r2, [pc, #104]	; (8006644 <HAL_GPIO_Init+0x304>)
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065e0:	4b18      	ldr	r3, [pc, #96]	; (8006644 <HAL_GPIO_Init+0x304>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	43db      	mvns	r3, r3
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	4013      	ands	r3, r2
 80065ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006604:	4a0f      	ldr	r2, [pc, #60]	; (8006644 <HAL_GPIO_Init+0x304>)
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	3301      	adds	r3, #1
 800660e:	61fb      	str	r3, [r7, #28]
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	2b0f      	cmp	r3, #15
 8006614:	f67f aea2 	bls.w	800635c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	3724      	adds	r7, #36	; 0x24
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40023800 	.word	0x40023800
 800662c:	40013800 	.word	0x40013800
 8006630:	40020000 	.word	0x40020000
 8006634:	40020400 	.word	0x40020400
 8006638:	40020800 	.word	0x40020800
 800663c:	40020c00 	.word	0x40020c00
 8006640:	40021000 	.word	0x40021000
 8006644:	40013c00 	.word	0x40013c00

08006648 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	887b      	ldrh	r3, [r7, #2]
 800665a:	4013      	ands	r3, r2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006660:	2301      	movs	r3, #1
 8006662:	73fb      	strb	r3, [r7, #15]
 8006664:	e001      	b.n	800666a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800666a:	7bfb      	ldrb	r3, [r7, #15]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	807b      	strh	r3, [r7, #2]
 8006684:	4613      	mov	r3, r2
 8006686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006688:	787b      	ldrb	r3, [r7, #1]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800668e:	887a      	ldrh	r2, [r7, #2]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006694:	e003      	b.n	800669e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006696:	887b      	ldrh	r3, [r7, #2]
 8006698:	041a      	lsls	r2, r3, #16
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	619a      	str	r2, [r3, #24]
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	460b      	mov	r3, r1
 80066b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80066bc:	887a      	ldrh	r2, [r7, #2]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4013      	ands	r3, r2
 80066c2:	041a      	lsls	r2, r3, #16
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	43d9      	mvns	r1, r3
 80066c8:	887b      	ldrh	r3, [r7, #2]
 80066ca:	400b      	ands	r3, r1
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	619a      	str	r2, [r3, #24]
}
 80066d2:	bf00      	nop
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
	...

080066e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	4603      	mov	r3, r0
 80066e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80066ea:	4b08      	ldr	r3, [pc, #32]	; (800670c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066ec:	695a      	ldr	r2, [r3, #20]
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	4013      	ands	r3, r2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d006      	beq.n	8006704 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066f6:	4a05      	ldr	r2, [pc, #20]	; (800670c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066f8:	88fb      	ldrh	r3, [r7, #6]
 80066fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066fc:	88fb      	ldrh	r3, [r7, #6]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fa fc2c 	bl	8000f5c <HAL_GPIO_EXTI_Callback>
  }
}
 8006704:	bf00      	nop
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40013c00 	.word	0x40013c00

08006710 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006712:	b08f      	sub	sp, #60	; 0x3c
 8006714:	af0a      	add	r7, sp, #40	; 0x28
 8006716:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e054      	b.n	80067cc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d106      	bne.n	8006742 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f008 fa17 	bl	800eb70 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2203      	movs	r2, #3
 8006746:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006752:	2b00      	cmp	r3, #0
 8006754:	d102      	bne.n	800675c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4618      	mov	r0, r3
 8006762:	f005 fa45 	bl	800bbf0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	687e      	ldr	r6, [r7, #4]
 800676e:	466d      	mov	r5, sp
 8006770:	f106 0410 	add.w	r4, r6, #16
 8006774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800677a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800677c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006780:	e885 0003 	stmia.w	r5, {r0, r1}
 8006784:	1d33      	adds	r3, r6, #4
 8006786:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006788:	6838      	ldr	r0, [r7, #0]
 800678a:	f005 f9bf 	bl	800bb0c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2101      	movs	r1, #1
 8006794:	4618      	mov	r0, r3
 8006796:	f005 fa3c 	bl	800bc12 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	603b      	str	r3, [r7, #0]
 80067a0:	687e      	ldr	r6, [r7, #4]
 80067a2:	466d      	mov	r5, sp
 80067a4:	f106 0410 	add.w	r4, r6, #16
 80067a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80067b8:	1d33      	adds	r3, r6, #4
 80067ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067bc:	6838      	ldr	r0, [r7, #0]
 80067be:	f005 fbc5 	bl	800bf4c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067d4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80067d4:	b590      	push	{r4, r7, lr}
 80067d6:	b089      	sub	sp, #36	; 0x24
 80067d8:	af04      	add	r7, sp, #16
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	4608      	mov	r0, r1
 80067de:	4611      	mov	r1, r2
 80067e0:	461a      	mov	r2, r3
 80067e2:	4603      	mov	r3, r0
 80067e4:	70fb      	strb	r3, [r7, #3]
 80067e6:	460b      	mov	r3, r1
 80067e8:	70bb      	strb	r3, [r7, #2]
 80067ea:	4613      	mov	r3, r2
 80067ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d101      	bne.n	80067fc <HAL_HCD_HC_Init+0x28>
 80067f8:	2302      	movs	r3, #2
 80067fa:	e076      	b.n	80068ea <HAL_HCD_HC_Init+0x116>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	212c      	movs	r1, #44	; 0x2c
 800680a:	fb01 f303 	mul.w	r3, r1, r3
 800680e:	4413      	add	r3, r2
 8006810:	333d      	adds	r3, #61	; 0x3d
 8006812:	2200      	movs	r2, #0
 8006814:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006816:	78fb      	ldrb	r3, [r7, #3]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	212c      	movs	r1, #44	; 0x2c
 800681c:	fb01 f303 	mul.w	r3, r1, r3
 8006820:	4413      	add	r3, r2
 8006822:	3338      	adds	r3, #56	; 0x38
 8006824:	787a      	ldrb	r2, [r7, #1]
 8006826:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8006828:	78fb      	ldrb	r3, [r7, #3]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	212c      	movs	r1, #44	; 0x2c
 800682e:	fb01 f303 	mul.w	r3, r1, r3
 8006832:	4413      	add	r3, r2
 8006834:	3340      	adds	r3, #64	; 0x40
 8006836:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006838:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	212c      	movs	r1, #44	; 0x2c
 8006840:	fb01 f303 	mul.w	r3, r1, r3
 8006844:	4413      	add	r3, r2
 8006846:	3339      	adds	r3, #57	; 0x39
 8006848:	78fa      	ldrb	r2, [r7, #3]
 800684a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	212c      	movs	r1, #44	; 0x2c
 8006852:	fb01 f303 	mul.w	r3, r1, r3
 8006856:	4413      	add	r3, r2
 8006858:	333f      	adds	r3, #63	; 0x3f
 800685a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800685e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	78ba      	ldrb	r2, [r7, #2]
 8006864:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006868:	b2d0      	uxtb	r0, r2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	212c      	movs	r1, #44	; 0x2c
 800686e:	fb01 f303 	mul.w	r3, r1, r3
 8006872:	4413      	add	r3, r2
 8006874:	333a      	adds	r3, #58	; 0x3a
 8006876:	4602      	mov	r2, r0
 8006878:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800687a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800687e:	2b00      	cmp	r3, #0
 8006880:	da09      	bge.n	8006896 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	212c      	movs	r1, #44	; 0x2c
 8006888:	fb01 f303 	mul.w	r3, r1, r3
 800688c:	4413      	add	r3, r2
 800688e:	333b      	adds	r3, #59	; 0x3b
 8006890:	2201      	movs	r2, #1
 8006892:	701a      	strb	r2, [r3, #0]
 8006894:	e008      	b.n	80068a8 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006896:	78fb      	ldrb	r3, [r7, #3]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	212c      	movs	r1, #44	; 0x2c
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	4413      	add	r3, r2
 80068a2:	333b      	adds	r3, #59	; 0x3b
 80068a4:	2200      	movs	r2, #0
 80068a6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	212c      	movs	r1, #44	; 0x2c
 80068ae:	fb01 f303 	mul.w	r3, r1, r3
 80068b2:	4413      	add	r3, r2
 80068b4:	333c      	adds	r3, #60	; 0x3c
 80068b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80068ba:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	787c      	ldrb	r4, [r7, #1]
 80068c2:	78ba      	ldrb	r2, [r7, #2]
 80068c4:	78f9      	ldrb	r1, [r7, #3]
 80068c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80068c8:	9302      	str	r3, [sp, #8]
 80068ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	4623      	mov	r3, r4
 80068d8:	f005 fcbe 	bl	800c258 <USB_HC_Init>
 80068dc:	4603      	mov	r3, r0
 80068de:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd90      	pop	{r4, r7, pc}

080068f2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	460b      	mov	r3, r1
 80068fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_HCD_HC_Halt+0x1e>
 800690c:	2302      	movs	r3, #2
 800690e:	e00f      	b.n	8006930 <HAL_HCD_HC_Halt+0x3e>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	78fa      	ldrb	r2, [r7, #3]
 800691e:	4611      	mov	r1, r2
 8006920:	4618      	mov	r0, r3
 8006922:	f005 ff0e 	bl	800c742 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	4608      	mov	r0, r1
 8006942:	4611      	mov	r1, r2
 8006944:	461a      	mov	r2, r3
 8006946:	4603      	mov	r3, r0
 8006948:	70fb      	strb	r3, [r7, #3]
 800694a:	460b      	mov	r3, r1
 800694c:	70bb      	strb	r3, [r7, #2]
 800694e:	4613      	mov	r3, r2
 8006950:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	212c      	movs	r1, #44	; 0x2c
 8006958:	fb01 f303 	mul.w	r3, r1, r3
 800695c:	4413      	add	r3, r2
 800695e:	333b      	adds	r3, #59	; 0x3b
 8006960:	78ba      	ldrb	r2, [r7, #2]
 8006962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	212c      	movs	r1, #44	; 0x2c
 800696a:	fb01 f303 	mul.w	r3, r1, r3
 800696e:	4413      	add	r3, r2
 8006970:	333f      	adds	r3, #63	; 0x3f
 8006972:	787a      	ldrb	r2, [r7, #1]
 8006974:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006976:	7c3b      	ldrb	r3, [r7, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d112      	bne.n	80069a2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800697c:	78fb      	ldrb	r3, [r7, #3]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	212c      	movs	r1, #44	; 0x2c
 8006982:	fb01 f303 	mul.w	r3, r1, r3
 8006986:	4413      	add	r3, r2
 8006988:	3342      	adds	r3, #66	; 0x42
 800698a:	2203      	movs	r2, #3
 800698c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	212c      	movs	r1, #44	; 0x2c
 8006994:	fb01 f303 	mul.w	r3, r1, r3
 8006998:	4413      	add	r3, r2
 800699a:	333d      	adds	r3, #61	; 0x3d
 800699c:	7f3a      	ldrb	r2, [r7, #28]
 800699e:	701a      	strb	r2, [r3, #0]
 80069a0:	e008      	b.n	80069b4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	212c      	movs	r1, #44	; 0x2c
 80069a8:	fb01 f303 	mul.w	r3, r1, r3
 80069ac:	4413      	add	r3, r2
 80069ae:	3342      	adds	r3, #66	; 0x42
 80069b0:	2202      	movs	r2, #2
 80069b2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80069b4:	787b      	ldrb	r3, [r7, #1]
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	f200 80c6 	bhi.w	8006b48 <HAL_HCD_HC_SubmitRequest+0x210>
 80069bc:	a201      	add	r2, pc, #4	; (adr r2, 80069c4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80069be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c2:	bf00      	nop
 80069c4:	080069d5 	.word	0x080069d5
 80069c8:	08006b35 	.word	0x08006b35
 80069cc:	08006a39 	.word	0x08006a39
 80069d0:	08006ab7 	.word	0x08006ab7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80069d4:	7c3b      	ldrb	r3, [r7, #16]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	f040 80b8 	bne.w	8006b4c <HAL_HCD_HC_SubmitRequest+0x214>
 80069dc:	78bb      	ldrb	r3, [r7, #2]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f040 80b4 	bne.w	8006b4c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80069e4:	8b3b      	ldrh	r3, [r7, #24]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d108      	bne.n	80069fc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80069ea:	78fb      	ldrb	r3, [r7, #3]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	212c      	movs	r1, #44	; 0x2c
 80069f0:	fb01 f303 	mul.w	r3, r1, r3
 80069f4:	4413      	add	r3, r2
 80069f6:	3355      	adds	r3, #85	; 0x55
 80069f8:	2201      	movs	r2, #1
 80069fa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80069fc:	78fb      	ldrb	r3, [r7, #3]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	212c      	movs	r1, #44	; 0x2c
 8006a02:	fb01 f303 	mul.w	r3, r1, r3
 8006a06:	4413      	add	r3, r2
 8006a08:	3355      	adds	r3, #85	; 0x55
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d109      	bne.n	8006a24 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	212c      	movs	r1, #44	; 0x2c
 8006a16:	fb01 f303 	mul.w	r3, r1, r3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	3342      	adds	r3, #66	; 0x42
 8006a1e:	2200      	movs	r2, #0
 8006a20:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006a22:	e093      	b.n	8006b4c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	212c      	movs	r1, #44	; 0x2c
 8006a2a:	fb01 f303 	mul.w	r3, r1, r3
 8006a2e:	4413      	add	r3, r2
 8006a30:	3342      	adds	r3, #66	; 0x42
 8006a32:	2202      	movs	r2, #2
 8006a34:	701a      	strb	r2, [r3, #0]
      break;
 8006a36:	e089      	b.n	8006b4c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006a38:	78bb      	ldrb	r3, [r7, #2]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d11d      	bne.n	8006a7a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006a3e:	78fb      	ldrb	r3, [r7, #3]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	212c      	movs	r1, #44	; 0x2c
 8006a44:	fb01 f303 	mul.w	r3, r1, r3
 8006a48:	4413      	add	r3, r2
 8006a4a:	3355      	adds	r3, #85	; 0x55
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d109      	bne.n	8006a66 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006a52:	78fb      	ldrb	r3, [r7, #3]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	212c      	movs	r1, #44	; 0x2c
 8006a58:	fb01 f303 	mul.w	r3, r1, r3
 8006a5c:	4413      	add	r3, r2
 8006a5e:	3342      	adds	r3, #66	; 0x42
 8006a60:	2200      	movs	r2, #0
 8006a62:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006a64:	e073      	b.n	8006b4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006a66:	78fb      	ldrb	r3, [r7, #3]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	212c      	movs	r1, #44	; 0x2c
 8006a6c:	fb01 f303 	mul.w	r3, r1, r3
 8006a70:	4413      	add	r3, r2
 8006a72:	3342      	adds	r3, #66	; 0x42
 8006a74:	2202      	movs	r2, #2
 8006a76:	701a      	strb	r2, [r3, #0]
      break;
 8006a78:	e069      	b.n	8006b4e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006a7a:	78fb      	ldrb	r3, [r7, #3]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	212c      	movs	r1, #44	; 0x2c
 8006a80:	fb01 f303 	mul.w	r3, r1, r3
 8006a84:	4413      	add	r3, r2
 8006a86:	3354      	adds	r3, #84	; 0x54
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d109      	bne.n	8006aa2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	212c      	movs	r1, #44	; 0x2c
 8006a94:	fb01 f303 	mul.w	r3, r1, r3
 8006a98:	4413      	add	r3, r2
 8006a9a:	3342      	adds	r3, #66	; 0x42
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]
      break;
 8006aa0:	e055      	b.n	8006b4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006aa2:	78fb      	ldrb	r3, [r7, #3]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	212c      	movs	r1, #44	; 0x2c
 8006aa8:	fb01 f303 	mul.w	r3, r1, r3
 8006aac:	4413      	add	r3, r2
 8006aae:	3342      	adds	r3, #66	; 0x42
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	701a      	strb	r2, [r3, #0]
      break;
 8006ab4:	e04b      	b.n	8006b4e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006ab6:	78bb      	ldrb	r3, [r7, #2]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d11d      	bne.n	8006af8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	212c      	movs	r1, #44	; 0x2c
 8006ac2:	fb01 f303 	mul.w	r3, r1, r3
 8006ac6:	4413      	add	r3, r2
 8006ac8:	3355      	adds	r3, #85	; 0x55
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d109      	bne.n	8006ae4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	212c      	movs	r1, #44	; 0x2c
 8006ad6:	fb01 f303 	mul.w	r3, r1, r3
 8006ada:	4413      	add	r3, r2
 8006adc:	3342      	adds	r3, #66	; 0x42
 8006ade:	2200      	movs	r2, #0
 8006ae0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006ae2:	e034      	b.n	8006b4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	212c      	movs	r1, #44	; 0x2c
 8006aea:	fb01 f303 	mul.w	r3, r1, r3
 8006aee:	4413      	add	r3, r2
 8006af0:	3342      	adds	r3, #66	; 0x42
 8006af2:	2202      	movs	r2, #2
 8006af4:	701a      	strb	r2, [r3, #0]
      break;
 8006af6:	e02a      	b.n	8006b4e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	212c      	movs	r1, #44	; 0x2c
 8006afe:	fb01 f303 	mul.w	r3, r1, r3
 8006b02:	4413      	add	r3, r2
 8006b04:	3354      	adds	r3, #84	; 0x54
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	212c      	movs	r1, #44	; 0x2c
 8006b12:	fb01 f303 	mul.w	r3, r1, r3
 8006b16:	4413      	add	r3, r2
 8006b18:	3342      	adds	r3, #66	; 0x42
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	701a      	strb	r2, [r3, #0]
      break;
 8006b1e:	e016      	b.n	8006b4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006b20:	78fb      	ldrb	r3, [r7, #3]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	212c      	movs	r1, #44	; 0x2c
 8006b26:	fb01 f303 	mul.w	r3, r1, r3
 8006b2a:	4413      	add	r3, r2
 8006b2c:	3342      	adds	r3, #66	; 0x42
 8006b2e:	2202      	movs	r2, #2
 8006b30:	701a      	strb	r2, [r3, #0]
      break;
 8006b32:	e00c      	b.n	8006b4e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006b34:	78fb      	ldrb	r3, [r7, #3]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	212c      	movs	r1, #44	; 0x2c
 8006b3a:	fb01 f303 	mul.w	r3, r1, r3
 8006b3e:	4413      	add	r3, r2
 8006b40:	3342      	adds	r3, #66	; 0x42
 8006b42:	2200      	movs	r2, #0
 8006b44:	701a      	strb	r2, [r3, #0]
      break;
 8006b46:	e002      	b.n	8006b4e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006b48:	bf00      	nop
 8006b4a:	e000      	b.n	8006b4e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006b4c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006b4e:	78fb      	ldrb	r3, [r7, #3]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	212c      	movs	r1, #44	; 0x2c
 8006b54:	fb01 f303 	mul.w	r3, r1, r3
 8006b58:	4413      	add	r3, r2
 8006b5a:	3344      	adds	r3, #68	; 0x44
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	8b3a      	ldrh	r2, [r7, #24]
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	202c      	movs	r0, #44	; 0x2c
 8006b68:	fb00 f303 	mul.w	r3, r0, r3
 8006b6c:	440b      	add	r3, r1
 8006b6e:	334c      	adds	r3, #76	; 0x4c
 8006b70:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006b72:	78fb      	ldrb	r3, [r7, #3]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	212c      	movs	r1, #44	; 0x2c
 8006b78:	fb01 f303 	mul.w	r3, r1, r3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3360      	adds	r3, #96	; 0x60
 8006b80:	2200      	movs	r2, #0
 8006b82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	212c      	movs	r1, #44	; 0x2c
 8006b8a:	fb01 f303 	mul.w	r3, r1, r3
 8006b8e:	4413      	add	r3, r2
 8006b90:	3350      	adds	r3, #80	; 0x50
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006b96:	78fb      	ldrb	r3, [r7, #3]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	212c      	movs	r1, #44	; 0x2c
 8006b9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	3339      	adds	r3, #57	; 0x39
 8006ba4:	78fa      	ldrb	r2, [r7, #3]
 8006ba6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006ba8:	78fb      	ldrb	r3, [r7, #3]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	212c      	movs	r1, #44	; 0x2c
 8006bae:	fb01 f303 	mul.w	r3, r1, r3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	3361      	adds	r3, #97	; 0x61
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6818      	ldr	r0, [r3, #0]
 8006bbe:	78fb      	ldrb	r3, [r7, #3]
 8006bc0:	222c      	movs	r2, #44	; 0x2c
 8006bc2:	fb02 f303 	mul.w	r3, r2, r3
 8006bc6:	3338      	adds	r3, #56	; 0x38
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	18d1      	adds	r1, r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f005 fc62 	bl	800c49c <USB_HC_StartXfer>
 8006bd8:	4603      	mov	r3, r0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop

08006be4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f005 f963 	bl	800bec6 <USB_GetMode>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	f040 80f6 	bne.w	8006df4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f005 f947 	bl	800bea0 <USB_ReadInterrupts>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 80ec 	beq.w	8006df2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f005 f93e 	bl	800bea0 <USB_ReadInterrupts>
 8006c24:	4603      	mov	r3, r0
 8006c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c2e:	d104      	bne.n	8006c3a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006c38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f005 f92e 	bl	800bea0 <USB_ReadInterrupts>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c4e:	d104      	bne.n	8006c5a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f005 f91e 	bl	800bea0 <USB_ReadInterrupts>
 8006c64:	4603      	mov	r3, r0
 8006c66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c6e:	d104      	bne.n	8006c7a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006c78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f005 f90e 	bl	800bea0 <USB_ReadInterrupts>
 8006c84:	4603      	mov	r3, r0
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d103      	bne.n	8006c96 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2202      	movs	r2, #2
 8006c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f005 f900 	bl	800bea0 <USB_ReadInterrupts>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006caa:	d11c      	bne.n	8006ce6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006cb4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10f      	bne.n	8006ce6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006cc6:	2110      	movs	r1, #16
 8006cc8:	6938      	ldr	r0, [r7, #16]
 8006cca:	f004 ffef 	bl	800bcac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006cce:	6938      	ldr	r0, [r7, #16]
 8006cd0:	f005 f820 	bl	800bd14 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2101      	movs	r1, #1
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f005 f9f6 	bl	800c0cc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f007 ffc3 	bl	800ec6c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f005 f8d8 	bl	800bea0 <USB_ReadInterrupts>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cf6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cfa:	d102      	bne.n	8006d02 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 f89e 	bl	8007e3e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f005 f8ca 	bl	800bea0 <USB_ReadInterrupts>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	f003 0308 	and.w	r3, r3, #8
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	d106      	bne.n	8006d24 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f007 ff8c 	bl	800ec34 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2208      	movs	r2, #8
 8006d22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f005 f8b9 	bl	800bea0 <USB_ReadInterrupts>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	f003 0310 	and.w	r3, r3, #16
 8006d34:	2b10      	cmp	r3, #16
 8006d36:	d101      	bne.n	8006d3c <HAL_HCD_IRQHandler+0x158>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <HAL_HCD_IRQHandler+0x15a>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d012      	beq.n	8006d68 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	699a      	ldr	r2, [r3, #24]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0210 	bic.w	r2, r2, #16
 8006d50:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 ffa1 	bl	8007c9a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699a      	ldr	r2, [r3, #24]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0210 	orr.w	r2, r2, #16
 8006d66:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f005 f897 	bl	800bea0 <USB_ReadInterrupts>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d7c:	d13a      	bne.n	8006df4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f005 fccc 	bl	800c720 <USB_HC_ReadInterrupt>
 8006d88:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	617b      	str	r3, [r7, #20]
 8006d8e:	e025      	b.n	8006ddc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d018      	beq.n	8006dd6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dba:	d106      	bne.n	8006dca <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f8ab 	bl	8006f1e <HCD_HC_IN_IRQHandler>
 8006dc8:	e005      	b.n	8006dd6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fbf9 	bl	80075c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d3d4      	bcc.n	8006d90 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dee:	615a      	str	r2, [r3, #20]
 8006df0:	e000      	b.n	8006df4 <HAL_HCD_IRQHandler+0x210>
      return;
 8006df2:	bf00      	nop
    }
  }
}
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d101      	bne.n	8006e10 <HAL_HCD_Start+0x16>
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	e013      	b.n	8006e38 <HAL_HCD_Start+0x3e>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f005 f9b8 	bl	800c194 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f004 fed0 	bl	800bbce <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d101      	bne.n	8006e56 <HAL_HCD_Stop+0x16>
 8006e52:	2302      	movs	r3, #2
 8006e54:	e00d      	b.n	8006e72 <HAL_HCD_Stop+0x32>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f005 fda6 	bl	800c9b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f005 f95a 	bl	800c140 <USB_ResetPort>
 8006e8c:	4603      	mov	r3, r0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006ea2:	78fb      	ldrb	r3, [r7, #3]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	212c      	movs	r1, #44	; 0x2c
 8006ea8:	fb01 f303 	mul.w	r3, r1, r3
 8006eac:	4413      	add	r3, r2
 8006eae:	3360      	adds	r3, #96	; 0x60
 8006eb0:	781b      	ldrb	r3, [r3, #0]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b083      	sub	sp, #12
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006eca:	78fb      	ldrb	r3, [r7, #3]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	212c      	movs	r1, #44	; 0x2c
 8006ed0:	fb01 f303 	mul.w	r3, r1, r3
 8006ed4:	4413      	add	r3, r2
 8006ed6:	3350      	adds	r3, #80	; 0x50
 8006ed8:	681b      	ldr	r3, [r3, #0]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f005 f99e 	bl	800c234 <USB_GetCurrentFrame>
 8006ef8:	4603      	mov	r3, r0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f005 f979 	bl	800c206 <USB_GetHostSpeed>
 8006f14:	4603      	mov	r3, r0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b086      	sub	sp, #24
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	460b      	mov	r3, r1
 8006f28:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f003 0304 	and.w	r3, r3, #4
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d11a      	bne.n	8006f84 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	2304      	movs	r3, #4
 8006f5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	212c      	movs	r1, #44	; 0x2c
 8006f66:	fb01 f303 	mul.w	r3, r1, r3
 8006f6a:	4413      	add	r3, r2
 8006f6c:	3361      	adds	r3, #97	; 0x61
 8006f6e:	2206      	movs	r2, #6
 8006f70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f005 fbe0 	bl	800c742 <USB_HC_Halt>
 8006f82:	e0af      	b.n	80070e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f9a:	d11b      	bne.n	8006fd4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa8:	461a      	mov	r2, r3
 8006faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	212c      	movs	r1, #44	; 0x2c
 8006fb6:	fb01 f303 	mul.w	r3, r1, r3
 8006fba:	4413      	add	r3, r2
 8006fbc:	3361      	adds	r3, #97	; 0x61
 8006fbe:	2207      	movs	r2, #7
 8006fc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	4611      	mov	r1, r2
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f005 fbb8 	bl	800c742 <USB_HC_Halt>
 8006fd2:	e087      	b.n	80070e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 0320 	and.w	r3, r3, #32
 8006fe6:	2b20      	cmp	r3, #32
 8006fe8:	d109      	bne.n	8006ffe <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	2320      	movs	r3, #32
 8006ffa:	6093      	str	r3, [r2, #8]
 8006ffc:	e072      	b.n	80070e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	4413      	add	r3, r2
 8007006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f003 0308 	and.w	r3, r3, #8
 8007010:	2b08      	cmp	r3, #8
 8007012:	d11a      	bne.n	800704a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	4413      	add	r3, r2
 800701c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007020:	461a      	mov	r2, r3
 8007022:	2308      	movs	r3, #8
 8007024:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	212c      	movs	r1, #44	; 0x2c
 800702c:	fb01 f303 	mul.w	r3, r1, r3
 8007030:	4413      	add	r3, r2
 8007032:	3361      	adds	r3, #97	; 0x61
 8007034:	2205      	movs	r2, #5
 8007036:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	4611      	mov	r1, r2
 8007042:	4618      	mov	r0, r3
 8007044:	f005 fb7d 	bl	800c742 <USB_HC_Halt>
 8007048:	e04c      	b.n	80070e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	4413      	add	r3, r2
 8007052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800705c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007060:	d11b      	bne.n	800709a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	4413      	add	r3, r2
 800706a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706e:	461a      	mov	r2, r3
 8007070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007074:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	212c      	movs	r1, #44	; 0x2c
 800707c:	fb01 f303 	mul.w	r3, r1, r3
 8007080:	4413      	add	r3, r2
 8007082:	3361      	adds	r3, #97	; 0x61
 8007084:	2208      	movs	r2, #8
 8007086:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	4611      	mov	r1, r2
 8007092:	4618      	mov	r0, r3
 8007094:	f005 fb55 	bl	800c742 <USB_HC_Halt>
 8007098:	e024      	b.n	80070e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ac:	2b80      	cmp	r3, #128	; 0x80
 80070ae:	d119      	bne.n	80070e4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070bc:	461a      	mov	r2, r3
 80070be:	2380      	movs	r3, #128	; 0x80
 80070c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	212c      	movs	r1, #44	; 0x2c
 80070c8:	fb01 f303 	mul.w	r3, r1, r3
 80070cc:	4413      	add	r3, r2
 80070ce:	3361      	adds	r3, #97	; 0x61
 80070d0:	2206      	movs	r2, #6
 80070d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	b2d2      	uxtb	r2, r2
 80070dc:	4611      	mov	r1, r2
 80070de:	4618      	mov	r0, r3
 80070e0:	f005 fb2f 	bl	800c742 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070fa:	d112      	bne.n	8007122 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	4611      	mov	r1, r2
 8007106:	4618      	mov	r0, r3
 8007108:	f005 fb1b 	bl	800c742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	4413      	add	r3, r2
 8007114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007118:	461a      	mov	r2, r3
 800711a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800711e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8007120:	e24e      	b.n	80075c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	4413      	add	r3, r2
 800712a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b01      	cmp	r3, #1
 8007136:	f040 80df 	bne.w	80072f8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d019      	beq.n	8007176 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	212c      	movs	r1, #44	; 0x2c
 8007148:	fb01 f303 	mul.w	r3, r1, r3
 800714c:	4413      	add	r3, r2
 800714e:	3348      	adds	r3, #72	; 0x48
 8007150:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	0159      	lsls	r1, r3, #5
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	440b      	add	r3, r1
 800715a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007164:	1ad2      	subs	r2, r2, r3
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	202c      	movs	r0, #44	; 0x2c
 800716c:	fb00 f303 	mul.w	r3, r0, r3
 8007170:	440b      	add	r3, r1
 8007172:	3350      	adds	r3, #80	; 0x50
 8007174:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	212c      	movs	r1, #44	; 0x2c
 800717c:	fb01 f303 	mul.w	r3, r1, r3
 8007180:	4413      	add	r3, r2
 8007182:	3361      	adds	r3, #97	; 0x61
 8007184:	2201      	movs	r2, #1
 8007186:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	212c      	movs	r1, #44	; 0x2c
 800718e:	fb01 f303 	mul.w	r3, r1, r3
 8007192:	4413      	add	r3, r2
 8007194:	335c      	adds	r3, #92	; 0x5c
 8007196:	2200      	movs	r2, #0
 8007198:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a6:	461a      	mov	r2, r3
 80071a8:	2301      	movs	r3, #1
 80071aa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	212c      	movs	r1, #44	; 0x2c
 80071b2:	fb01 f303 	mul.w	r3, r1, r3
 80071b6:	4413      	add	r3, r2
 80071b8:	333f      	adds	r3, #63	; 0x3f
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d009      	beq.n	80071d4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	212c      	movs	r1, #44	; 0x2c
 80071c6:	fb01 f303 	mul.w	r3, r1, r3
 80071ca:	4413      	add	r3, r2
 80071cc:	333f      	adds	r3, #63	; 0x3f
 80071ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d111      	bne.n	80071f8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	4611      	mov	r1, r2
 80071de:	4618      	mov	r0, r3
 80071e0:	f005 faaf 	bl	800c742 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f0:	461a      	mov	r2, r3
 80071f2:	2310      	movs	r3, #16
 80071f4:	6093      	str	r3, [r2, #8]
 80071f6:	e03a      	b.n	800726e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	212c      	movs	r1, #44	; 0x2c
 80071fe:	fb01 f303 	mul.w	r3, r1, r3
 8007202:	4413      	add	r3, r2
 8007204:	333f      	adds	r3, #63	; 0x3f
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2b03      	cmp	r3, #3
 800720a:	d009      	beq.n	8007220 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	212c      	movs	r1, #44	; 0x2c
 8007212:	fb01 f303 	mul.w	r3, r1, r3
 8007216:	4413      	add	r3, r2
 8007218:	333f      	adds	r3, #63	; 0x3f
 800721a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800721c:	2b01      	cmp	r3, #1
 800721e:	d126      	bne.n	800726e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	4413      	add	r3, r2
 8007228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	0151      	lsls	r1, r2, #5
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	440a      	add	r2, r1
 8007236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800723a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800723e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	212c      	movs	r1, #44	; 0x2c
 8007246:	fb01 f303 	mul.w	r3, r1, r3
 800724a:	4413      	add	r3, r2
 800724c:	3360      	adds	r3, #96	; 0x60
 800724e:	2201      	movs	r2, #1
 8007250:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	b2d9      	uxtb	r1, r3
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	202c      	movs	r0, #44	; 0x2c
 800725c:	fb00 f303 	mul.w	r3, r0, r3
 8007260:	4413      	add	r3, r2
 8007262:	3360      	adds	r3, #96	; 0x60
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f007 fd0d 	bl	800ec88 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d12b      	bne.n	80072ce <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	212c      	movs	r1, #44	; 0x2c
 800727c:	fb01 f303 	mul.w	r3, r1, r3
 8007280:	4413      	add	r3, r2
 8007282:	3348      	adds	r3, #72	; 0x48
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	202c      	movs	r0, #44	; 0x2c
 800728c:	fb00 f202 	mul.w	r2, r0, r2
 8007290:	440a      	add	r2, r1
 8007292:	3240      	adds	r2, #64	; 0x40
 8007294:	8812      	ldrh	r2, [r2, #0]
 8007296:	fbb3 f3f2 	udiv	r3, r3, r2
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 818e 	beq.w	80075c0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	212c      	movs	r1, #44	; 0x2c
 80072aa:	fb01 f303 	mul.w	r3, r1, r3
 80072ae:	4413      	add	r3, r2
 80072b0:	3354      	adds	r3, #84	; 0x54
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	f083 0301 	eor.w	r3, r3, #1
 80072b8:	b2d8      	uxtb	r0, r3
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	212c      	movs	r1, #44	; 0x2c
 80072c0:	fb01 f303 	mul.w	r3, r1, r3
 80072c4:	4413      	add	r3, r2
 80072c6:	3354      	adds	r3, #84	; 0x54
 80072c8:	4602      	mov	r2, r0
 80072ca:	701a      	strb	r2, [r3, #0]
}
 80072cc:	e178      	b.n	80075c0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	212c      	movs	r1, #44	; 0x2c
 80072d4:	fb01 f303 	mul.w	r3, r1, r3
 80072d8:	4413      	add	r3, r2
 80072da:	3354      	adds	r3, #84	; 0x54
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	f083 0301 	eor.w	r3, r3, #1
 80072e2:	b2d8      	uxtb	r0, r3
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	212c      	movs	r1, #44	; 0x2c
 80072ea:	fb01 f303 	mul.w	r3, r1, r3
 80072ee:	4413      	add	r3, r2
 80072f0:	3354      	adds	r3, #84	; 0x54
 80072f2:	4602      	mov	r2, r0
 80072f4:	701a      	strb	r2, [r3, #0]
}
 80072f6:	e163      	b.n	80075c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b02      	cmp	r3, #2
 800730c:	f040 80f6 	bne.w	80074fc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	212c      	movs	r1, #44	; 0x2c
 8007316:	fb01 f303 	mul.w	r3, r1, r3
 800731a:	4413      	add	r3, r2
 800731c:	3361      	adds	r3, #97	; 0x61
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d109      	bne.n	8007338 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	212c      	movs	r1, #44	; 0x2c
 800732a:	fb01 f303 	mul.w	r3, r1, r3
 800732e:	4413      	add	r3, r2
 8007330:	3360      	adds	r3, #96	; 0x60
 8007332:	2201      	movs	r2, #1
 8007334:	701a      	strb	r2, [r3, #0]
 8007336:	e0c9      	b.n	80074cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	212c      	movs	r1, #44	; 0x2c
 800733e:	fb01 f303 	mul.w	r3, r1, r3
 8007342:	4413      	add	r3, r2
 8007344:	3361      	adds	r3, #97	; 0x61
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2b05      	cmp	r3, #5
 800734a:	d109      	bne.n	8007360 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	212c      	movs	r1, #44	; 0x2c
 8007352:	fb01 f303 	mul.w	r3, r1, r3
 8007356:	4413      	add	r3, r2
 8007358:	3360      	adds	r3, #96	; 0x60
 800735a:	2205      	movs	r2, #5
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	e0b5      	b.n	80074cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	212c      	movs	r1, #44	; 0x2c
 8007366:	fb01 f303 	mul.w	r3, r1, r3
 800736a:	4413      	add	r3, r2
 800736c:	3361      	adds	r3, #97	; 0x61
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	2b06      	cmp	r3, #6
 8007372:	d009      	beq.n	8007388 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	212c      	movs	r1, #44	; 0x2c
 800737a:	fb01 f303 	mul.w	r3, r1, r3
 800737e:	4413      	add	r3, r2
 8007380:	3361      	adds	r3, #97	; 0x61
 8007382:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007384:	2b08      	cmp	r3, #8
 8007386:	d150      	bne.n	800742a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	212c      	movs	r1, #44	; 0x2c
 800738e:	fb01 f303 	mul.w	r3, r1, r3
 8007392:	4413      	add	r3, r2
 8007394:	335c      	adds	r3, #92	; 0x5c
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	202c      	movs	r0, #44	; 0x2c
 80073a0:	fb00 f303 	mul.w	r3, r0, r3
 80073a4:	440b      	add	r3, r1
 80073a6:	335c      	adds	r3, #92	; 0x5c
 80073a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	212c      	movs	r1, #44	; 0x2c
 80073b0:	fb01 f303 	mul.w	r3, r1, r3
 80073b4:	4413      	add	r3, r2
 80073b6:	335c      	adds	r3, #92	; 0x5c
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d912      	bls.n	80073e4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	212c      	movs	r1, #44	; 0x2c
 80073c4:	fb01 f303 	mul.w	r3, r1, r3
 80073c8:	4413      	add	r3, r2
 80073ca:	335c      	adds	r3, #92	; 0x5c
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	212c      	movs	r1, #44	; 0x2c
 80073d6:	fb01 f303 	mul.w	r3, r1, r3
 80073da:	4413      	add	r3, r2
 80073dc:	3360      	adds	r3, #96	; 0x60
 80073de:	2204      	movs	r2, #4
 80073e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80073e2:	e073      	b.n	80074cc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	212c      	movs	r1, #44	; 0x2c
 80073ea:	fb01 f303 	mul.w	r3, r1, r3
 80073ee:	4413      	add	r3, r2
 80073f0:	3360      	adds	r3, #96	; 0x60
 80073f2:	2202      	movs	r2, #2
 80073f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800740c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007414:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	4413      	add	r3, r2
 800741e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007422:	461a      	mov	r2, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007428:	e050      	b.n	80074cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	212c      	movs	r1, #44	; 0x2c
 8007430:	fb01 f303 	mul.w	r3, r1, r3
 8007434:	4413      	add	r3, r2
 8007436:	3361      	adds	r3, #97	; 0x61
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	2b03      	cmp	r3, #3
 800743c:	d122      	bne.n	8007484 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	212c      	movs	r1, #44	; 0x2c
 8007444:	fb01 f303 	mul.w	r3, r1, r3
 8007448:	4413      	add	r3, r2
 800744a:	3360      	adds	r3, #96	; 0x60
 800744c:	2202      	movs	r2, #2
 800744e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	4413      	add	r3, r2
 8007458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007466:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800746e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	4413      	add	r3, r2
 8007478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800747c:	461a      	mov	r2, r3
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	e023      	b.n	80074cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	212c      	movs	r1, #44	; 0x2c
 800748a:	fb01 f303 	mul.w	r3, r1, r3
 800748e:	4413      	add	r3, r2
 8007490:	3361      	adds	r3, #97	; 0x61
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	2b07      	cmp	r3, #7
 8007496:	d119      	bne.n	80074cc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	212c      	movs	r1, #44	; 0x2c
 800749e:	fb01 f303 	mul.w	r3, r1, r3
 80074a2:	4413      	add	r3, r2
 80074a4:	335c      	adds	r3, #92	; 0x5c
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	6879      	ldr	r1, [r7, #4]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	202c      	movs	r0, #44	; 0x2c
 80074b0:	fb00 f303 	mul.w	r3, r0, r3
 80074b4:	440b      	add	r3, r1
 80074b6:	335c      	adds	r3, #92	; 0x5c
 80074b8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	212c      	movs	r1, #44	; 0x2c
 80074c0:	fb01 f303 	mul.w	r3, r1, r3
 80074c4:	4413      	add	r3, r2
 80074c6:	3360      	adds	r3, #96	; 0x60
 80074c8:	2204      	movs	r2, #4
 80074ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d8:	461a      	mov	r2, r3
 80074da:	2302      	movs	r3, #2
 80074dc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	b2d9      	uxtb	r1, r3
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	202c      	movs	r0, #44	; 0x2c
 80074e8:	fb00 f303 	mul.w	r3, r0, r3
 80074ec:	4413      	add	r3, r2
 80074ee:	3360      	adds	r3, #96	; 0x60
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f007 fbc7 	bl	800ec88 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80074fa:	e061      	b.n	80075c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	4413      	add	r3, r2
 8007504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f003 0310 	and.w	r3, r3, #16
 800750e:	2b10      	cmp	r3, #16
 8007510:	d156      	bne.n	80075c0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	212c      	movs	r1, #44	; 0x2c
 8007518:	fb01 f303 	mul.w	r3, r1, r3
 800751c:	4413      	add	r3, r2
 800751e:	333f      	adds	r3, #63	; 0x3f
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2b03      	cmp	r3, #3
 8007524:	d111      	bne.n	800754a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	212c      	movs	r1, #44	; 0x2c
 800752c:	fb01 f303 	mul.w	r3, r1, r3
 8007530:	4413      	add	r3, r2
 8007532:	335c      	adds	r3, #92	; 0x5c
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	b2d2      	uxtb	r2, r2
 8007540:	4611      	mov	r1, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f005 f8fd 	bl	800c742 <USB_HC_Halt>
 8007548:	e031      	b.n	80075ae <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	212c      	movs	r1, #44	; 0x2c
 8007550:	fb01 f303 	mul.w	r3, r1, r3
 8007554:	4413      	add	r3, r2
 8007556:	333f      	adds	r3, #63	; 0x3f
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d009      	beq.n	8007572 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	212c      	movs	r1, #44	; 0x2c
 8007564:	fb01 f303 	mul.w	r3, r1, r3
 8007568:	4413      	add	r3, r2
 800756a:	333f      	adds	r3, #63	; 0x3f
 800756c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800756e:	2b02      	cmp	r3, #2
 8007570:	d11d      	bne.n	80075ae <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	212c      	movs	r1, #44	; 0x2c
 8007578:	fb01 f303 	mul.w	r3, r1, r3
 800757c:	4413      	add	r3, r2
 800757e:	335c      	adds	r3, #92	; 0x5c
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d110      	bne.n	80075ae <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	212c      	movs	r1, #44	; 0x2c
 8007592:	fb01 f303 	mul.w	r3, r1, r3
 8007596:	4413      	add	r3, r2
 8007598:	3361      	adds	r3, #97	; 0x61
 800759a:	2203      	movs	r2, #3
 800759c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	b2d2      	uxtb	r2, r2
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f005 f8ca 	bl	800c742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ba:	461a      	mov	r2, r3
 80075bc:	2310      	movs	r3, #16
 80075be:	6093      	str	r3, [r2, #8]
}
 80075c0:	bf00      	nop
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b088      	sub	sp, #32
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80075de:	78fb      	ldrb	r3, [r7, #3]
 80075e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d11a      	bne.n	800762e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007604:	461a      	mov	r2, r3
 8007606:	2304      	movs	r3, #4
 8007608:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	212c      	movs	r1, #44	; 0x2c
 8007610:	fb01 f303 	mul.w	r3, r1, r3
 8007614:	4413      	add	r3, r2
 8007616:	3361      	adds	r3, #97	; 0x61
 8007618:	2206      	movs	r2, #6
 800761a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	4611      	mov	r1, r2
 8007626:	4618      	mov	r0, r3
 8007628:	f005 f88b 	bl	800c742 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800762c:	e331      	b.n	8007c92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	4413      	add	r3, r2
 8007636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f003 0320 	and.w	r3, r3, #32
 8007640:	2b20      	cmp	r3, #32
 8007642:	d12e      	bne.n	80076a2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	4413      	add	r3, r2
 800764c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007650:	461a      	mov	r2, r3
 8007652:	2320      	movs	r3, #32
 8007654:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	212c      	movs	r1, #44	; 0x2c
 800765c:	fb01 f303 	mul.w	r3, r1, r3
 8007660:	4413      	add	r3, r2
 8007662:	333d      	adds	r3, #61	; 0x3d
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b01      	cmp	r3, #1
 8007668:	f040 8313 	bne.w	8007c92 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	212c      	movs	r1, #44	; 0x2c
 8007672:	fb01 f303 	mul.w	r3, r1, r3
 8007676:	4413      	add	r3, r2
 8007678:	333d      	adds	r3, #61	; 0x3d
 800767a:	2200      	movs	r2, #0
 800767c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	212c      	movs	r1, #44	; 0x2c
 8007684:	fb01 f303 	mul.w	r3, r1, r3
 8007688:	4413      	add	r3, r2
 800768a:	3360      	adds	r3, #96	; 0x60
 800768c:	2202      	movs	r2, #2
 800768e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	b2d2      	uxtb	r2, r2
 8007698:	4611      	mov	r1, r2
 800769a:	4618      	mov	r0, r3
 800769c:	f005 f851 	bl	800c742 <USB_HC_Halt>
}
 80076a0:	e2f7      	b.n	8007c92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076b8:	d112      	bne.n	80076e0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c6:	461a      	mov	r2, r3
 80076c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076cc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	b2d2      	uxtb	r2, r2
 80076d6:	4611      	mov	r1, r2
 80076d8:	4618      	mov	r0, r3
 80076da:	f005 f832 	bl	800c742 <USB_HC_Halt>
}
 80076de:	e2d8      	b.n	8007c92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d140      	bne.n	8007778 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	212c      	movs	r1, #44	; 0x2c
 80076fc:	fb01 f303 	mul.w	r3, r1, r3
 8007700:	4413      	add	r3, r2
 8007702:	335c      	adds	r3, #92	; 0x5c
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	4413      	add	r3, r2
 8007710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771a:	2b40      	cmp	r3, #64	; 0x40
 800771c:	d111      	bne.n	8007742 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	212c      	movs	r1, #44	; 0x2c
 8007724:	fb01 f303 	mul.w	r3, r1, r3
 8007728:	4413      	add	r3, r2
 800772a:	333d      	adds	r3, #61	; 0x3d
 800772c:	2201      	movs	r2, #1
 800772e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	4413      	add	r3, r2
 8007738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773c:	461a      	mov	r2, r3
 800773e:	2340      	movs	r3, #64	; 0x40
 8007740:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	4413      	add	r3, r2
 800774a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800774e:	461a      	mov	r2, r3
 8007750:	2301      	movs	r3, #1
 8007752:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	212c      	movs	r1, #44	; 0x2c
 800775a:	fb01 f303 	mul.w	r3, r1, r3
 800775e:	4413      	add	r3, r2
 8007760:	3361      	adds	r3, #97	; 0x61
 8007762:	2201      	movs	r2, #1
 8007764:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	b2d2      	uxtb	r2, r2
 800776e:	4611      	mov	r1, r2
 8007770:	4618      	mov	r0, r3
 8007772:	f004 ffe6 	bl	800c742 <USB_HC_Halt>
}
 8007776:	e28c      	b.n	8007c92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	4413      	add	r3, r2
 8007780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	d12c      	bne.n	80077e8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	212c      	movs	r1, #44	; 0x2c
 8007794:	fb01 f303 	mul.w	r3, r1, r3
 8007798:	4413      	add	r3, r2
 800779a:	3361      	adds	r3, #97	; 0x61
 800779c:	2204      	movs	r2, #4
 800779e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	212c      	movs	r1, #44	; 0x2c
 80077a6:	fb01 f303 	mul.w	r3, r1, r3
 80077aa:	4413      	add	r3, r2
 80077ac:	333d      	adds	r3, #61	; 0x3d
 80077ae:	2201      	movs	r2, #1
 80077b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	212c      	movs	r1, #44	; 0x2c
 80077b8:	fb01 f303 	mul.w	r3, r1, r3
 80077bc:	4413      	add	r3, r2
 80077be:	335c      	adds	r3, #92	; 0x5c
 80077c0:	2200      	movs	r2, #0
 80077c2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	4611      	mov	r1, r2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f004 ffb7 	bl	800c742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077e0:	461a      	mov	r2, r3
 80077e2:	2340      	movs	r3, #64	; 0x40
 80077e4:	6093      	str	r3, [r2, #8]
}
 80077e6:	e254      	b.n	8007c92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 0308 	and.w	r3, r3, #8
 80077fa:	2b08      	cmp	r3, #8
 80077fc:	d11a      	bne.n	8007834 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	4413      	add	r3, r2
 8007806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800780a:	461a      	mov	r2, r3
 800780c:	2308      	movs	r3, #8
 800780e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	212c      	movs	r1, #44	; 0x2c
 8007816:	fb01 f303 	mul.w	r3, r1, r3
 800781a:	4413      	add	r3, r2
 800781c:	3361      	adds	r3, #97	; 0x61
 800781e:	2205      	movs	r2, #5
 8007820:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	b2d2      	uxtb	r2, r2
 800782a:	4611      	mov	r1, r2
 800782c:	4618      	mov	r0, r3
 800782e:	f004 ff88 	bl	800c742 <USB_HC_Halt>
}
 8007832:	e22e      	b.n	8007c92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	4413      	add	r3, r2
 800783c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 0310 	and.w	r3, r3, #16
 8007846:	2b10      	cmp	r3, #16
 8007848:	d140      	bne.n	80078cc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	212c      	movs	r1, #44	; 0x2c
 8007850:	fb01 f303 	mul.w	r3, r1, r3
 8007854:	4413      	add	r3, r2
 8007856:	335c      	adds	r3, #92	; 0x5c
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	212c      	movs	r1, #44	; 0x2c
 8007862:	fb01 f303 	mul.w	r3, r1, r3
 8007866:	4413      	add	r3, r2
 8007868:	3361      	adds	r3, #97	; 0x61
 800786a:	2203      	movs	r2, #3
 800786c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	212c      	movs	r1, #44	; 0x2c
 8007874:	fb01 f303 	mul.w	r3, r1, r3
 8007878:	4413      	add	r3, r2
 800787a:	333d      	adds	r3, #61	; 0x3d
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d112      	bne.n	80078a8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	212c      	movs	r1, #44	; 0x2c
 8007888:	fb01 f303 	mul.w	r3, r1, r3
 800788c:	4413      	add	r3, r2
 800788e:	333c      	adds	r3, #60	; 0x3c
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d108      	bne.n	80078a8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	212c      	movs	r1, #44	; 0x2c
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	4413      	add	r3, r2
 80078a2:	333d      	adds	r3, #61	; 0x3d
 80078a4:	2201      	movs	r2, #1
 80078a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	b2d2      	uxtb	r2, r2
 80078b0:	4611      	mov	r1, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f004 ff45 	bl	800c742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c4:	461a      	mov	r2, r3
 80078c6:	2310      	movs	r3, #16
 80078c8:	6093      	str	r3, [r2, #8]
}
 80078ca:	e1e2      	b.n	8007c92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078de:	2b80      	cmp	r3, #128	; 0x80
 80078e0:	d164      	bne.n	80079ac <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d111      	bne.n	800790e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	212c      	movs	r1, #44	; 0x2c
 80078f0:	fb01 f303 	mul.w	r3, r1, r3
 80078f4:	4413      	add	r3, r2
 80078f6:	3361      	adds	r3, #97	; 0x61
 80078f8:	2206      	movs	r2, #6
 80078fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	4611      	mov	r1, r2
 8007906:	4618      	mov	r0, r3
 8007908:	f004 ff1b 	bl	800c742 <USB_HC_Halt>
 800790c:	e044      	b.n	8007998 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	212c      	movs	r1, #44	; 0x2c
 8007914:	fb01 f303 	mul.w	r3, r1, r3
 8007918:	4413      	add	r3, r2
 800791a:	335c      	adds	r3, #92	; 0x5c
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	202c      	movs	r0, #44	; 0x2c
 8007926:	fb00 f303 	mul.w	r3, r0, r3
 800792a:	440b      	add	r3, r1
 800792c:	335c      	adds	r3, #92	; 0x5c
 800792e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	212c      	movs	r1, #44	; 0x2c
 8007936:	fb01 f303 	mul.w	r3, r1, r3
 800793a:	4413      	add	r3, r2
 800793c:	335c      	adds	r3, #92	; 0x5c
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b02      	cmp	r3, #2
 8007942:	d920      	bls.n	8007986 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	212c      	movs	r1, #44	; 0x2c
 800794a:	fb01 f303 	mul.w	r3, r1, r3
 800794e:	4413      	add	r3, r2
 8007950:	335c      	adds	r3, #92	; 0x5c
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	212c      	movs	r1, #44	; 0x2c
 800795c:	fb01 f303 	mul.w	r3, r1, r3
 8007960:	4413      	add	r3, r2
 8007962:	3360      	adds	r3, #96	; 0x60
 8007964:	2204      	movs	r2, #4
 8007966:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	b2d9      	uxtb	r1, r3
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	202c      	movs	r0, #44	; 0x2c
 8007972:	fb00 f303 	mul.w	r3, r0, r3
 8007976:	4413      	add	r3, r2
 8007978:	3360      	adds	r3, #96	; 0x60
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	461a      	mov	r2, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f007 f982 	bl	800ec88 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007984:	e008      	b.n	8007998 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	212c      	movs	r1, #44	; 0x2c
 800798c:	fb01 f303 	mul.w	r3, r1, r3
 8007990:	4413      	add	r3, r2
 8007992:	3360      	adds	r3, #96	; 0x60
 8007994:	2202      	movs	r2, #2
 8007996:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a4:	461a      	mov	r2, r3
 80079a6:	2380      	movs	r3, #128	; 0x80
 80079a8:	6093      	str	r3, [r2, #8]
}
 80079aa:	e172      	b.n	8007c92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c2:	d11b      	bne.n	80079fc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	212c      	movs	r1, #44	; 0x2c
 80079ca:	fb01 f303 	mul.w	r3, r1, r3
 80079ce:	4413      	add	r3, r2
 80079d0:	3361      	adds	r3, #97	; 0x61
 80079d2:	2208      	movs	r2, #8
 80079d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	b2d2      	uxtb	r2, r2
 80079de:	4611      	mov	r1, r2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f004 feae 	bl	800c742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	015a      	lsls	r2, r3, #5
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f2:	461a      	mov	r2, r3
 80079f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079f8:	6093      	str	r3, [r2, #8]
}
 80079fa:	e14a      	b.n	8007c92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	f040 813f 	bne.w	8007c92 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	212c      	movs	r1, #44	; 0x2c
 8007a1a:	fb01 f303 	mul.w	r3, r1, r3
 8007a1e:	4413      	add	r3, r2
 8007a20:	3361      	adds	r3, #97	; 0x61
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d17d      	bne.n	8007b24 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	212c      	movs	r1, #44	; 0x2c
 8007a2e:	fb01 f303 	mul.w	r3, r1, r3
 8007a32:	4413      	add	r3, r2
 8007a34:	3360      	adds	r3, #96	; 0x60
 8007a36:	2201      	movs	r2, #1
 8007a38:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	212c      	movs	r1, #44	; 0x2c
 8007a40:	fb01 f303 	mul.w	r3, r1, r3
 8007a44:	4413      	add	r3, r2
 8007a46:	333f      	adds	r3, #63	; 0x3f
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d00a      	beq.n	8007a64 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	212c      	movs	r1, #44	; 0x2c
 8007a54:	fb01 f303 	mul.w	r3, r1, r3
 8007a58:	4413      	add	r3, r2
 8007a5a:	333f      	adds	r3, #63	; 0x3f
 8007a5c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	f040 8100 	bne.w	8007c64 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d113      	bne.n	8007a94 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	212c      	movs	r1, #44	; 0x2c
 8007a72:	fb01 f303 	mul.w	r3, r1, r3
 8007a76:	4413      	add	r3, r2
 8007a78:	3355      	adds	r3, #85	; 0x55
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f083 0301 	eor.w	r3, r3, #1
 8007a80:	b2d8      	uxtb	r0, r3
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	212c      	movs	r1, #44	; 0x2c
 8007a88:	fb01 f303 	mul.w	r3, r1, r3
 8007a8c:	4413      	add	r3, r2
 8007a8e:	3355      	adds	r3, #85	; 0x55
 8007a90:	4602      	mov	r2, r0
 8007a92:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	f040 80e3 	bne.w	8007c64 <HCD_HC_OUT_IRQHandler+0x69c>
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	212c      	movs	r1, #44	; 0x2c
 8007aa4:	fb01 f303 	mul.w	r3, r1, r3
 8007aa8:	4413      	add	r3, r2
 8007aaa:	334c      	adds	r3, #76	; 0x4c
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 80d8 	beq.w	8007c64 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	212c      	movs	r1, #44	; 0x2c
 8007aba:	fb01 f303 	mul.w	r3, r1, r3
 8007abe:	4413      	add	r3, r2
 8007ac0:	334c      	adds	r3, #76	; 0x4c
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6879      	ldr	r1, [r7, #4]
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	202c      	movs	r0, #44	; 0x2c
 8007aca:	fb00 f202 	mul.w	r2, r0, r2
 8007ace:	440a      	add	r2, r1
 8007ad0:	3240      	adds	r2, #64	; 0x40
 8007ad2:	8812      	ldrh	r2, [r2, #0]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	6879      	ldr	r1, [r7, #4]
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	202c      	movs	r0, #44	; 0x2c
 8007ade:	fb00 f202 	mul.w	r2, r0, r2
 8007ae2:	440a      	add	r2, r1
 8007ae4:	3240      	adds	r2, #64	; 0x40
 8007ae6:	8812      	ldrh	r2, [r2, #0]
 8007ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 80b5 	beq.w	8007c64 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	212c      	movs	r1, #44	; 0x2c
 8007b00:	fb01 f303 	mul.w	r3, r1, r3
 8007b04:	4413      	add	r3, r2
 8007b06:	3355      	adds	r3, #85	; 0x55
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	f083 0301 	eor.w	r3, r3, #1
 8007b0e:	b2d8      	uxtb	r0, r3
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	212c      	movs	r1, #44	; 0x2c
 8007b16:	fb01 f303 	mul.w	r3, r1, r3
 8007b1a:	4413      	add	r3, r2
 8007b1c:	3355      	adds	r3, #85	; 0x55
 8007b1e:	4602      	mov	r2, r0
 8007b20:	701a      	strb	r2, [r3, #0]
 8007b22:	e09f      	b.n	8007c64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	212c      	movs	r1, #44	; 0x2c
 8007b2a:	fb01 f303 	mul.w	r3, r1, r3
 8007b2e:	4413      	add	r3, r2
 8007b30:	3361      	adds	r3, #97	; 0x61
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d109      	bne.n	8007b4c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	212c      	movs	r1, #44	; 0x2c
 8007b3e:	fb01 f303 	mul.w	r3, r1, r3
 8007b42:	4413      	add	r3, r2
 8007b44:	3360      	adds	r3, #96	; 0x60
 8007b46:	2202      	movs	r2, #2
 8007b48:	701a      	strb	r2, [r3, #0]
 8007b4a:	e08b      	b.n	8007c64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	212c      	movs	r1, #44	; 0x2c
 8007b52:	fb01 f303 	mul.w	r3, r1, r3
 8007b56:	4413      	add	r3, r2
 8007b58:	3361      	adds	r3, #97	; 0x61
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b04      	cmp	r3, #4
 8007b5e:	d109      	bne.n	8007b74 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	212c      	movs	r1, #44	; 0x2c
 8007b66:	fb01 f303 	mul.w	r3, r1, r3
 8007b6a:	4413      	add	r3, r2
 8007b6c:	3360      	adds	r3, #96	; 0x60
 8007b6e:	2202      	movs	r2, #2
 8007b70:	701a      	strb	r2, [r3, #0]
 8007b72:	e077      	b.n	8007c64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	212c      	movs	r1, #44	; 0x2c
 8007b7a:	fb01 f303 	mul.w	r3, r1, r3
 8007b7e:	4413      	add	r3, r2
 8007b80:	3361      	adds	r3, #97	; 0x61
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b05      	cmp	r3, #5
 8007b86:	d109      	bne.n	8007b9c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	212c      	movs	r1, #44	; 0x2c
 8007b8e:	fb01 f303 	mul.w	r3, r1, r3
 8007b92:	4413      	add	r3, r2
 8007b94:	3360      	adds	r3, #96	; 0x60
 8007b96:	2205      	movs	r2, #5
 8007b98:	701a      	strb	r2, [r3, #0]
 8007b9a:	e063      	b.n	8007c64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	212c      	movs	r1, #44	; 0x2c
 8007ba2:	fb01 f303 	mul.w	r3, r1, r3
 8007ba6:	4413      	add	r3, r2
 8007ba8:	3361      	adds	r3, #97	; 0x61
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	2b06      	cmp	r3, #6
 8007bae:	d009      	beq.n	8007bc4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	212c      	movs	r1, #44	; 0x2c
 8007bb6:	fb01 f303 	mul.w	r3, r1, r3
 8007bba:	4413      	add	r3, r2
 8007bbc:	3361      	adds	r3, #97	; 0x61
 8007bbe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	d14f      	bne.n	8007c64 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	212c      	movs	r1, #44	; 0x2c
 8007bca:	fb01 f303 	mul.w	r3, r1, r3
 8007bce:	4413      	add	r3, r2
 8007bd0:	335c      	adds	r3, #92	; 0x5c
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	1c5a      	adds	r2, r3, #1
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	202c      	movs	r0, #44	; 0x2c
 8007bdc:	fb00 f303 	mul.w	r3, r0, r3
 8007be0:	440b      	add	r3, r1
 8007be2:	335c      	adds	r3, #92	; 0x5c
 8007be4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	212c      	movs	r1, #44	; 0x2c
 8007bec:	fb01 f303 	mul.w	r3, r1, r3
 8007bf0:	4413      	add	r3, r2
 8007bf2:	335c      	adds	r3, #92	; 0x5c
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d912      	bls.n	8007c20 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	212c      	movs	r1, #44	; 0x2c
 8007c00:	fb01 f303 	mul.w	r3, r1, r3
 8007c04:	4413      	add	r3, r2
 8007c06:	335c      	adds	r3, #92	; 0x5c
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	212c      	movs	r1, #44	; 0x2c
 8007c12:	fb01 f303 	mul.w	r3, r1, r3
 8007c16:	4413      	add	r3, r2
 8007c18:	3360      	adds	r3, #96	; 0x60
 8007c1a:	2204      	movs	r2, #4
 8007c1c:	701a      	strb	r2, [r3, #0]
 8007c1e:	e021      	b.n	8007c64 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	212c      	movs	r1, #44	; 0x2c
 8007c26:	fb01 f303 	mul.w	r3, r1, r3
 8007c2a:	4413      	add	r3, r2
 8007c2c:	3360      	adds	r3, #96	; 0x60
 8007c2e:	2202      	movs	r2, #2
 8007c30:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c48:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c50:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c5e:	461a      	mov	r2, r3
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c70:	461a      	mov	r2, r3
 8007c72:	2302      	movs	r3, #2
 8007c74:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	b2d9      	uxtb	r1, r3
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	202c      	movs	r0, #44	; 0x2c
 8007c80:	fb00 f303 	mul.w	r3, r0, r3
 8007c84:	4413      	add	r3, r2
 8007c86:	3360      	adds	r3, #96	; 0x60
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f006 fffb 	bl	800ec88 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007c92:	bf00      	nop
 8007c94:	3720      	adds	r7, #32
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b08a      	sub	sp, #40	; 0x28
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	f003 030f 	and.w	r3, r3, #15
 8007cba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	0c5b      	lsrs	r3, r3, #17
 8007cc0:	f003 030f 	and.w	r3, r3, #15
 8007cc4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	091b      	lsrs	r3, r3, #4
 8007cca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007cce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d004      	beq.n	8007ce0 <HCD_RXQLVL_IRQHandler+0x46>
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	2b05      	cmp	r3, #5
 8007cda:	f000 80a9 	beq.w	8007e30 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007cde:	e0aa      	b.n	8007e36 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 80a6 	beq.w	8007e34 <HCD_RXQLVL_IRQHandler+0x19a>
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	212c      	movs	r1, #44	; 0x2c
 8007cee:	fb01 f303 	mul.w	r3, r1, r3
 8007cf2:	4413      	add	r3, r2
 8007cf4:	3344      	adds	r3, #68	; 0x44
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 809b 	beq.w	8007e34 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	212c      	movs	r1, #44	; 0x2c
 8007d04:	fb01 f303 	mul.w	r3, r1, r3
 8007d08:	4413      	add	r3, r2
 8007d0a:	3350      	adds	r3, #80	; 0x50
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	441a      	add	r2, r3
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	202c      	movs	r0, #44	; 0x2c
 8007d18:	fb00 f303 	mul.w	r3, r0, r3
 8007d1c:	440b      	add	r3, r1
 8007d1e:	334c      	adds	r3, #76	; 0x4c
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d87a      	bhi.n	8007e1c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6818      	ldr	r0, [r3, #0]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	212c      	movs	r1, #44	; 0x2c
 8007d30:	fb01 f303 	mul.w	r3, r1, r3
 8007d34:	4413      	add	r3, r2
 8007d36:	3344      	adds	r3, #68	; 0x44
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	b292      	uxth	r2, r2
 8007d3e:	4619      	mov	r1, r3
 8007d40:	f004 f856 	bl	800bdf0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	212c      	movs	r1, #44	; 0x2c
 8007d4a:	fb01 f303 	mul.w	r3, r1, r3
 8007d4e:	4413      	add	r3, r2
 8007d50:	3344      	adds	r3, #68	; 0x44
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	441a      	add	r2, r3
 8007d58:	6879      	ldr	r1, [r7, #4]
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	202c      	movs	r0, #44	; 0x2c
 8007d5e:	fb00 f303 	mul.w	r3, r0, r3
 8007d62:	440b      	add	r3, r1
 8007d64:	3344      	adds	r3, #68	; 0x44
 8007d66:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	212c      	movs	r1, #44	; 0x2c
 8007d6e:	fb01 f303 	mul.w	r3, r1, r3
 8007d72:	4413      	add	r3, r2
 8007d74:	3350      	adds	r3, #80	; 0x50
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	441a      	add	r2, r3
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	202c      	movs	r0, #44	; 0x2c
 8007d82:	fb00 f303 	mul.w	r3, r0, r3
 8007d86:	440b      	add	r3, r1
 8007d88:	3350      	adds	r3, #80	; 0x50
 8007d8a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	0cdb      	lsrs	r3, r3, #19
 8007d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007da0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	212c      	movs	r1, #44	; 0x2c
 8007da8:	fb01 f303 	mul.w	r3, r1, r3
 8007dac:	4413      	add	r3, r2
 8007dae:	3340      	adds	r3, #64	; 0x40
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d13c      	bne.n	8007e34 <HCD_RXQLVL_IRQHandler+0x19a>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d039      	beq.n	8007e34 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007dd6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007dde:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dec:	461a      	mov	r2, r3
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	212c      	movs	r1, #44	; 0x2c
 8007df8:	fb01 f303 	mul.w	r3, r1, r3
 8007dfc:	4413      	add	r3, r2
 8007dfe:	3354      	adds	r3, #84	; 0x54
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	f083 0301 	eor.w	r3, r3, #1
 8007e06:	b2d8      	uxtb	r0, r3
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	212c      	movs	r1, #44	; 0x2c
 8007e0e:	fb01 f303 	mul.w	r3, r1, r3
 8007e12:	4413      	add	r3, r2
 8007e14:	3354      	adds	r3, #84	; 0x54
 8007e16:	4602      	mov	r2, r0
 8007e18:	701a      	strb	r2, [r3, #0]
      break;
 8007e1a:	e00b      	b.n	8007e34 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	212c      	movs	r1, #44	; 0x2c
 8007e22:	fb01 f303 	mul.w	r3, r1, r3
 8007e26:	4413      	add	r3, r2
 8007e28:	3360      	adds	r3, #96	; 0x60
 8007e2a:	2204      	movs	r2, #4
 8007e2c:	701a      	strb	r2, [r3, #0]
      break;
 8007e2e:	e001      	b.n	8007e34 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007e30:	bf00      	nop
 8007e32:	e000      	b.n	8007e36 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007e34:	bf00      	nop
  }
}
 8007e36:	bf00      	nop
 8007e38:	3728      	adds	r7, #40	; 0x28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b086      	sub	sp, #24
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007e6a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f003 0302 	and.w	r3, r3, #2
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d10b      	bne.n	8007e8e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d102      	bne.n	8007e86 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f006 fee5 	bl	800ec50 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	f043 0302 	orr.w	r3, r3, #2
 8007e8c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f003 0308 	and.w	r3, r3, #8
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	d132      	bne.n	8007efe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f043 0308 	orr.w	r3, r3, #8
 8007e9e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f003 0304 	and.w	r3, r3, #4
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	d126      	bne.n	8007ef8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d113      	bne.n	8007eda <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007eb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ebc:	d106      	bne.n	8007ecc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2102      	movs	r1, #2
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f004 f901 	bl	800c0cc <USB_InitFSLSPClkSel>
 8007eca:	e011      	b.n	8007ef0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f004 f8fa 	bl	800c0cc <USB_InitFSLSPClkSel>
 8007ed8:	e00a      	b.n	8007ef0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d106      	bne.n	8007ef0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ee8:	461a      	mov	r2, r3
 8007eea:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007eee:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f006 fed7 	bl	800eca4 <HAL_HCD_PortEnabled_Callback>
 8007ef6:	e002      	b.n	8007efe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f006 fee1 	bl	800ecc0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f003 0320 	and.w	r3, r3, #32
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	d103      	bne.n	8007f10 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f043 0320 	orr.w	r3, r3, #32
 8007f0e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f16:	461a      	mov	r2, r3
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	6013      	str	r3, [r2, #0]
}
 8007f1c:	bf00      	nop
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e12b      	b.n	800818e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d106      	bne.n	8007f50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fc ffd0 	bl	8004ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2224      	movs	r2, #36	; 0x24
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0201 	bic.w	r2, r2, #1
 8007f66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007f88:	f001 fa20 	bl	80093cc <HAL_RCC_GetPCLK1Freq>
 8007f8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	4a81      	ldr	r2, [pc, #516]	; (8008198 <HAL_I2C_Init+0x274>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d807      	bhi.n	8007fa8 <HAL_I2C_Init+0x84>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	4a80      	ldr	r2, [pc, #512]	; (800819c <HAL_I2C_Init+0x278>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	bf94      	ite	ls
 8007fa0:	2301      	movls	r3, #1
 8007fa2:	2300      	movhi	r3, #0
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	e006      	b.n	8007fb6 <HAL_I2C_Init+0x92>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4a7d      	ldr	r2, [pc, #500]	; (80081a0 <HAL_I2C_Init+0x27c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	bf94      	ite	ls
 8007fb0:	2301      	movls	r3, #1
 8007fb2:	2300      	movhi	r3, #0
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e0e7      	b.n	800818e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4a78      	ldr	r2, [pc, #480]	; (80081a4 <HAL_I2C_Init+0x280>)
 8007fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc6:	0c9b      	lsrs	r3, r3, #18
 8007fc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6a1b      	ldr	r3, [r3, #32]
 8007fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	4a6a      	ldr	r2, [pc, #424]	; (8008198 <HAL_I2C_Init+0x274>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d802      	bhi.n	8007ff8 <HAL_I2C_Init+0xd4>
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	e009      	b.n	800800c <HAL_I2C_Init+0xe8>
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007ffe:	fb02 f303 	mul.w	r3, r2, r3
 8008002:	4a69      	ldr	r2, [pc, #420]	; (80081a8 <HAL_I2C_Init+0x284>)
 8008004:	fba2 2303 	umull	r2, r3, r2, r3
 8008008:	099b      	lsrs	r3, r3, #6
 800800a:	3301      	adds	r3, #1
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	6812      	ldr	r2, [r2, #0]
 8008010:	430b      	orrs	r3, r1
 8008012:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800801e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	495c      	ldr	r1, [pc, #368]	; (8008198 <HAL_I2C_Init+0x274>)
 8008028:	428b      	cmp	r3, r1
 800802a:	d819      	bhi.n	8008060 <HAL_I2C_Init+0x13c>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	1e59      	subs	r1, r3, #1
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	fbb1 f3f3 	udiv	r3, r1, r3
 800803a:	1c59      	adds	r1, r3, #1
 800803c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008040:	400b      	ands	r3, r1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <HAL_I2C_Init+0x138>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1e59      	subs	r1, r3, #1
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	005b      	lsls	r3, r3, #1
 8008050:	fbb1 f3f3 	udiv	r3, r1, r3
 8008054:	3301      	adds	r3, #1
 8008056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800805a:	e051      	b.n	8008100 <HAL_I2C_Init+0x1dc>
 800805c:	2304      	movs	r3, #4
 800805e:	e04f      	b.n	8008100 <HAL_I2C_Init+0x1dc>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d111      	bne.n	800808c <HAL_I2C_Init+0x168>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	1e58      	subs	r0, r3, #1
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6859      	ldr	r1, [r3, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	440b      	add	r3, r1
 8008076:	fbb0 f3f3 	udiv	r3, r0, r3
 800807a:	3301      	adds	r3, #1
 800807c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008080:	2b00      	cmp	r3, #0
 8008082:	bf0c      	ite	eq
 8008084:	2301      	moveq	r3, #1
 8008086:	2300      	movne	r3, #0
 8008088:	b2db      	uxtb	r3, r3
 800808a:	e012      	b.n	80080b2 <HAL_I2C_Init+0x18e>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	1e58      	subs	r0, r3, #1
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6859      	ldr	r1, [r3, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	0099      	lsls	r1, r3, #2
 800809c:	440b      	add	r3, r1
 800809e:	fbb0 f3f3 	udiv	r3, r0, r3
 80080a2:	3301      	adds	r3, #1
 80080a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	bf0c      	ite	eq
 80080ac:	2301      	moveq	r3, #1
 80080ae:	2300      	movne	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <HAL_I2C_Init+0x196>
 80080b6:	2301      	movs	r3, #1
 80080b8:	e022      	b.n	8008100 <HAL_I2C_Init+0x1dc>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10e      	bne.n	80080e0 <HAL_I2C_Init+0x1bc>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	1e58      	subs	r0, r3, #1
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6859      	ldr	r1, [r3, #4]
 80080ca:	460b      	mov	r3, r1
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	440b      	add	r3, r1
 80080d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80080d4:	3301      	adds	r3, #1
 80080d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080de:	e00f      	b.n	8008100 <HAL_I2C_Init+0x1dc>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	1e58      	subs	r0, r3, #1
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6859      	ldr	r1, [r3, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	440b      	add	r3, r1
 80080ee:	0099      	lsls	r1, r3, #2
 80080f0:	440b      	add	r3, r1
 80080f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80080f6:	3301      	adds	r3, #1
 80080f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008100:	6879      	ldr	r1, [r7, #4]
 8008102:	6809      	ldr	r1, [r1, #0]
 8008104:	4313      	orrs	r3, r2
 8008106:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	69da      	ldr	r2, [r3, #28]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	431a      	orrs	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800812e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	6911      	ldr	r1, [r2, #16]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	68d2      	ldr	r2, [r2, #12]
 800813a:	4311      	orrs	r1, r2
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	6812      	ldr	r2, [r2, #0]
 8008140:	430b      	orrs	r3, r1
 8008142:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	695a      	ldr	r2, [r3, #20]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	431a      	orrs	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f042 0201 	orr.w	r2, r2, #1
 800816e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	000186a0 	.word	0x000186a0
 800819c:	001e847f 	.word	0x001e847f
 80081a0:	003d08ff 	.word	0x003d08ff
 80081a4:	431bde83 	.word	0x431bde83
 80081a8:	10624dd3 	.word	0x10624dd3

080081ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e128      	b.n	8008410 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d109      	bne.n	80081de <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a90      	ldr	r2, [pc, #576]	; (8008418 <HAL_I2S_Init+0x26c>)
 80081d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7fc fed1 	bl	8004f80 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2202      	movs	r2, #2
 80081e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	69db      	ldr	r3, [r3, #28]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	6812      	ldr	r2, [r2, #0]
 80081f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80081f4:	f023 030f 	bic.w	r3, r3, #15
 80081f8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2202      	movs	r2, #2
 8008200:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	2b02      	cmp	r3, #2
 8008208:	d060      	beq.n	80082cc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d102      	bne.n	8008218 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008212:	2310      	movs	r3, #16
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	e001      	b.n	800821c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008218:	2320      	movs	r3, #32
 800821a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	2b20      	cmp	r3, #32
 8008222:	d802      	bhi.n	800822a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800822a:	2001      	movs	r0, #1
 800822c:	f001 f9e6 	bl	80095fc <HAL_RCCEx_GetPeriphCLKFreq>
 8008230:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800823a:	d125      	bne.n	8008288 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d010      	beq.n	8008266 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	fbb2 f2f3 	udiv	r2, r2, r3
 800824e:	4613      	mov	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	005b      	lsls	r3, r3, #1
 8008256:	461a      	mov	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008260:	3305      	adds	r3, #5
 8008262:	613b      	str	r3, [r7, #16]
 8008264:	e01f      	b.n	80082a6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008270:	4613      	mov	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	461a      	mov	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008282:	3305      	adds	r3, #5
 8008284:	613b      	str	r3, [r7, #16]
 8008286:	e00e      	b.n	80082a6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	005b      	lsls	r3, r3, #1
 8008298:	461a      	mov	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a2:	3305      	adds	r3, #5
 80082a4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	4a5c      	ldr	r2, [pc, #368]	; (800841c <HAL_I2S_Init+0x270>)
 80082aa:	fba2 2303 	umull	r2, r3, r2, r3
 80082ae:	08db      	lsrs	r3, r3, #3
 80082b0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	085b      	lsrs	r3, r3, #1
 80082c2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	021b      	lsls	r3, r3, #8
 80082c8:	61bb      	str	r3, [r7, #24]
 80082ca:	e003      	b.n	80082d4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80082cc:	2302      	movs	r3, #2
 80082ce:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d902      	bls.n	80082e0 <HAL_I2S_Init+0x134>
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	2bff      	cmp	r3, #255	; 0xff
 80082de:	d907      	bls.n	80082f0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e4:	f043 0210 	orr.w	r2, r3, #16
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e08f      	b.n	8008410 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691a      	ldr	r2, [r3, #16]
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	ea42 0103 	orr.w	r1, r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	69fa      	ldr	r2, [r7, #28]
 8008300:	430a      	orrs	r2, r1
 8008302:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800830e:	f023 030f 	bic.w	r3, r3, #15
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	6851      	ldr	r1, [r2, #4]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	6892      	ldr	r2, [r2, #8]
 800831a:	4311      	orrs	r1, r2
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	68d2      	ldr	r2, [r2, #12]
 8008320:	4311      	orrs	r1, r2
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	6992      	ldr	r2, [r2, #24]
 8008326:	430a      	orrs	r2, r1
 8008328:	431a      	orrs	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008332:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d161      	bne.n	8008400 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a38      	ldr	r2, [pc, #224]	; (8008420 <HAL_I2S_Init+0x274>)
 8008340:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a37      	ldr	r2, [pc, #220]	; (8008424 <HAL_I2S_Init+0x278>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d101      	bne.n	8008350 <HAL_I2S_Init+0x1a4>
 800834c:	4b36      	ldr	r3, [pc, #216]	; (8008428 <HAL_I2S_Init+0x27c>)
 800834e:	e001      	b.n	8008354 <HAL_I2S_Init+0x1a8>
 8008350:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008354:	69db      	ldr	r3, [r3, #28]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	6812      	ldr	r2, [r2, #0]
 800835a:	4932      	ldr	r1, [pc, #200]	; (8008424 <HAL_I2S_Init+0x278>)
 800835c:	428a      	cmp	r2, r1
 800835e:	d101      	bne.n	8008364 <HAL_I2S_Init+0x1b8>
 8008360:	4a31      	ldr	r2, [pc, #196]	; (8008428 <HAL_I2S_Init+0x27c>)
 8008362:	e001      	b.n	8008368 <HAL_I2S_Init+0x1bc>
 8008364:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8008368:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800836c:	f023 030f 	bic.w	r3, r3, #15
 8008370:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a2b      	ldr	r2, [pc, #172]	; (8008424 <HAL_I2S_Init+0x278>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d101      	bne.n	8008380 <HAL_I2S_Init+0x1d4>
 800837c:	4b2a      	ldr	r3, [pc, #168]	; (8008428 <HAL_I2S_Init+0x27c>)
 800837e:	e001      	b.n	8008384 <HAL_I2S_Init+0x1d8>
 8008380:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008384:	2202      	movs	r2, #2
 8008386:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a25      	ldr	r2, [pc, #148]	; (8008424 <HAL_I2S_Init+0x278>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d101      	bne.n	8008396 <HAL_I2S_Init+0x1ea>
 8008392:	4b25      	ldr	r3, [pc, #148]	; (8008428 <HAL_I2S_Init+0x27c>)
 8008394:	e001      	b.n	800839a <HAL_I2S_Init+0x1ee>
 8008396:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800839a:	69db      	ldr	r3, [r3, #28]
 800839c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083a6:	d003      	beq.n	80083b0 <HAL_I2S_Init+0x204>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d103      	bne.n	80083b8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80083b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083b4:	613b      	str	r3, [r7, #16]
 80083b6:	e001      	b.n	80083bc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80083b8:	2300      	movs	r3, #0
 80083ba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80083c6:	4313      	orrs	r3, r2
 80083c8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80083d0:	4313      	orrs	r3, r2
 80083d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80083da:	4313      	orrs	r3, r2
 80083dc:	b29a      	uxth	r2, r3
 80083de:	897b      	ldrh	r3, [r7, #10]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80083e8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a0d      	ldr	r2, [pc, #52]	; (8008424 <HAL_I2S_Init+0x278>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d101      	bne.n	80083f8 <HAL_I2S_Init+0x24c>
 80083f4:	4b0c      	ldr	r3, [pc, #48]	; (8008428 <HAL_I2S_Init+0x27c>)
 80083f6:	e001      	b.n	80083fc <HAL_I2S_Init+0x250>
 80083f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80083fc:	897a      	ldrh	r2, [r7, #10]
 80083fe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3720      	adds	r7, #32
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	08008523 	.word	0x08008523
 800841c:	cccccccd 	.word	0xcccccccd
 8008420:	08008639 	.word	0x08008639
 8008424:	40003800 	.word	0x40003800
 8008428:	40003400 	.word	0x40003400

0800842c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	881a      	ldrh	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008480:	1c9a      	adds	r2, r3, #2
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800848a:	b29b      	uxth	r3, r3
 800848c:	3b01      	subs	r3, #1
 800848e:	b29a      	uxth	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008498:	b29b      	uxth	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10e      	bne.n	80084bc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	685a      	ldr	r2, [r3, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80084ac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff ffb8 	bl	800842c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80084bc:	bf00      	nop
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d6:	b292      	uxth	r2, r2
 80084d8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084de:	1c9a      	adds	r2, r3, #2
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	3b01      	subs	r3, #1
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10e      	bne.n	800851a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800850a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7ff ff93 	bl	8008440 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b086      	sub	sp, #24
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b04      	cmp	r3, #4
 800853c:	d13a      	bne.n	80085b4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b01      	cmp	r3, #1
 8008546:	d109      	bne.n	800855c <I2S_IRQHandler+0x3a>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008552:	2b40      	cmp	r3, #64	; 0x40
 8008554:	d102      	bne.n	800855c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff ffb4 	bl	80084c4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008562:	2b40      	cmp	r3, #64	; 0x40
 8008564:	d126      	bne.n	80085b4 <I2S_IRQHandler+0x92>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f003 0320 	and.w	r3, r3, #32
 8008570:	2b20      	cmp	r3, #32
 8008572:	d11f      	bne.n	80085b4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008582:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008584:	2300      	movs	r3, #0
 8008586:	613b      	str	r3, [r7, #16]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	613b      	str	r3, [r7, #16]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	613b      	str	r3, [r7, #16]
 8008598:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a6:	f043 0202 	orr.w	r2, r3, #2
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7ff ff50 	bl	8008454 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d136      	bne.n	800862e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f003 0302 	and.w	r3, r3, #2
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d109      	bne.n	80085de <I2S_IRQHandler+0xbc>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d4:	2b80      	cmp	r3, #128	; 0x80
 80085d6:	d102      	bne.n	80085de <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f7ff ff45 	bl	8008468 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f003 0308 	and.w	r3, r3, #8
 80085e4:	2b08      	cmp	r3, #8
 80085e6:	d122      	bne.n	800862e <I2S_IRQHandler+0x10c>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f003 0320 	and.w	r3, r3, #32
 80085f2:	2b20      	cmp	r3, #32
 80085f4:	d11b      	bne.n	800862e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008604:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008606:	2300      	movs	r3, #0
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	60fb      	str	r3, [r7, #12]
 8008612:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008620:	f043 0204 	orr.w	r2, r3, #4
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7ff ff13 	bl	8008454 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800862e:	bf00      	nop
 8008630:	3718      	adds	r7, #24
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
	...

08008638 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a92      	ldr	r2, [pc, #584]	; (8008898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d101      	bne.n	8008656 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8008652:	4b92      	ldr	r3, [pc, #584]	; (800889c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008654:	e001      	b.n	800865a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8008656:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a8b      	ldr	r2, [pc, #556]	; (8008898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d101      	bne.n	8008674 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8008670:	4b8a      	ldr	r3, [pc, #552]	; (800889c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008672:	e001      	b.n	8008678 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8008674:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008684:	d004      	beq.n	8008690 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	f040 8099 	bne.w	80087c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	f003 0302 	and.w	r3, r3, #2
 8008696:	2b02      	cmp	r3, #2
 8008698:	d107      	bne.n	80086aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f925 	bl	80088f4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d107      	bne.n	80086c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f9c8 	bl	8008a54 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ca:	2b40      	cmp	r3, #64	; 0x40
 80086cc:	d13a      	bne.n	8008744 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	f003 0320 	and.w	r3, r3, #32
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d035      	beq.n	8008744 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a6e      	ldr	r2, [pc, #440]	; (8008898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d101      	bne.n	80086e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80086e2:	4b6e      	ldr	r3, [pc, #440]	; (800889c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80086e4:	e001      	b.n	80086ea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80086e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4969      	ldr	r1, [pc, #420]	; (8008898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80086f2:	428b      	cmp	r3, r1
 80086f4:	d101      	bne.n	80086fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80086f6:	4b69      	ldr	r3, [pc, #420]	; (800889c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80086f8:	e001      	b.n	80086fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80086fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80086fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008702:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685a      	ldr	r2, [r3, #4]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008712:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008714:	2300      	movs	r3, #0
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	60fb      	str	r3, [r7, #12]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008736:	f043 0202 	orr.w	r2, r3, #2
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7ff fe88 	bl	8008454 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f003 0308 	and.w	r3, r3, #8
 800874a:	2b08      	cmp	r3, #8
 800874c:	f040 80c3 	bne.w	80088d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f003 0320 	and.w	r3, r3, #32
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 80bd 	beq.w	80088d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800876a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a49      	ldr	r2, [pc, #292]	; (8008898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d101      	bne.n	800877a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8008776:	4b49      	ldr	r3, [pc, #292]	; (800889c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008778:	e001      	b.n	800877e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800877a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4944      	ldr	r1, [pc, #272]	; (8008898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008786:	428b      	cmp	r3, r1
 8008788:	d101      	bne.n	800878e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800878a:	4b44      	ldr	r3, [pc, #272]	; (800889c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800878c:	e001      	b.n	8008792 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800878e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008792:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008796:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008798:	2300      	movs	r3, #0
 800879a:	60bb      	str	r3, [r7, #8]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	60bb      	str	r3, [r7, #8]
 80087a4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b2:	f043 0204 	orr.w	r2, r3, #4
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff fe4a 	bl	8008454 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80087c0:	e089      	b.n	80088d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	f003 0302 	and.w	r3, r3, #2
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d107      	bne.n	80087dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f8be 	bl	8008958 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d107      	bne.n	80087f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 f8fd 	bl	80089f0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fc:	2b40      	cmp	r3, #64	; 0x40
 80087fe:	d12f      	bne.n	8008860 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f003 0320 	and.w	r3, r3, #32
 8008806:	2b00      	cmp	r3, #0
 8008808:	d02a      	beq.n	8008860 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008818:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a1e      	ldr	r2, [pc, #120]	; (8008898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d101      	bne.n	8008828 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8008824:	4b1d      	ldr	r3, [pc, #116]	; (800889c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008826:	e001      	b.n	800882c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8008828:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4919      	ldr	r1, [pc, #100]	; (8008898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008834:	428b      	cmp	r3, r1
 8008836:	d101      	bne.n	800883c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8008838:	4b18      	ldr	r3, [pc, #96]	; (800889c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800883a:	e001      	b.n	8008840 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800883c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008840:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008844:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008852:	f043 0202 	orr.w	r2, r3, #2
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7ff fdfa 	bl	8008454 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	f003 0308 	and.w	r3, r3, #8
 8008866:	2b08      	cmp	r3, #8
 8008868:	d136      	bne.n	80088d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	f003 0320 	and.w	r3, r3, #32
 8008870:	2b00      	cmp	r3, #0
 8008872:	d031      	beq.n	80088d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a07      	ldr	r2, [pc, #28]	; (8008898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d101      	bne.n	8008882 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800887e:	4b07      	ldr	r3, [pc, #28]	; (800889c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008880:	e001      	b.n	8008886 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8008882:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008886:	685a      	ldr	r2, [r3, #4]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4902      	ldr	r1, [pc, #8]	; (8008898 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800888e:	428b      	cmp	r3, r1
 8008890:	d106      	bne.n	80088a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8008892:	4b02      	ldr	r3, [pc, #8]	; (800889c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008894:	e006      	b.n	80088a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8008896:	bf00      	nop
 8008898:	40003800 	.word	0x40003800
 800889c:	40003400 	.word	0x40003400
 80088a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80088a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80088a8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80088b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c6:	f043 0204 	orr.w	r2, r3, #4
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff fdc0 	bl	8008454 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80088d4:	e000      	b.n	80088d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80088d6:	bf00      	nop
}
 80088d8:	bf00      	nop
 80088da:	3720      	adds	r7, #32
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008900:	1c99      	adds	r1, r3, #2
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	6251      	str	r1, [r2, #36]	; 0x24
 8008906:	881a      	ldrh	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008912:	b29b      	uxth	r3, r3
 8008914:	3b01      	subs	r3, #1
 8008916:	b29a      	uxth	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008920:	b29b      	uxth	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d113      	bne.n	800894e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008934:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800893a:	b29b      	uxth	r3, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	d106      	bne.n	800894e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7ff ffc9 	bl	80088e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800894e:	bf00      	nop
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
	...

08008958 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	1c99      	adds	r1, r3, #2
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	6251      	str	r1, [r2, #36]	; 0x24
 800896a:	8819      	ldrh	r1, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a1d      	ldr	r2, [pc, #116]	; (80089e8 <I2SEx_TxISR_I2SExt+0x90>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d101      	bne.n	800897a <I2SEx_TxISR_I2SExt+0x22>
 8008976:	4b1d      	ldr	r3, [pc, #116]	; (80089ec <I2SEx_TxISR_I2SExt+0x94>)
 8008978:	e001      	b.n	800897e <I2SEx_TxISR_I2SExt+0x26>
 800897a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800897e:	460a      	mov	r2, r1
 8008980:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008986:	b29b      	uxth	r3, r3
 8008988:	3b01      	subs	r3, #1
 800898a:	b29a      	uxth	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008994:	b29b      	uxth	r3, r3
 8008996:	2b00      	cmp	r3, #0
 8008998:	d121      	bne.n	80089de <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a12      	ldr	r2, [pc, #72]	; (80089e8 <I2SEx_TxISR_I2SExt+0x90>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d101      	bne.n	80089a8 <I2SEx_TxISR_I2SExt+0x50>
 80089a4:	4b11      	ldr	r3, [pc, #68]	; (80089ec <I2SEx_TxISR_I2SExt+0x94>)
 80089a6:	e001      	b.n	80089ac <I2SEx_TxISR_I2SExt+0x54>
 80089a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	490d      	ldr	r1, [pc, #52]	; (80089e8 <I2SEx_TxISR_I2SExt+0x90>)
 80089b4:	428b      	cmp	r3, r1
 80089b6:	d101      	bne.n	80089bc <I2SEx_TxISR_I2SExt+0x64>
 80089b8:	4b0c      	ldr	r3, [pc, #48]	; (80089ec <I2SEx_TxISR_I2SExt+0x94>)
 80089ba:	e001      	b.n	80089c0 <I2SEx_TxISR_I2SExt+0x68>
 80089bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80089c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80089c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d106      	bne.n	80089de <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7ff ff81 	bl	80088e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80089de:	bf00      	nop
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	40003800 	.word	0x40003800
 80089ec:	40003400 	.word	0x40003400

080089f0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68d8      	ldr	r0, [r3, #12]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a02:	1c99      	adds	r1, r3, #2
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008a08:	b282      	uxth	r2, r0
 8008a0a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	3b01      	subs	r3, #1
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d113      	bne.n	8008a4c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008a32:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d106      	bne.n	8008a4c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff ff4a 	bl	80088e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008a4c:	bf00      	nop
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a20      	ldr	r2, [pc, #128]	; (8008ae4 <I2SEx_RxISR_I2SExt+0x90>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d101      	bne.n	8008a6a <I2SEx_RxISR_I2SExt+0x16>
 8008a66:	4b20      	ldr	r3, [pc, #128]	; (8008ae8 <I2SEx_RxISR_I2SExt+0x94>)
 8008a68:	e001      	b.n	8008a6e <I2SEx_RxISR_I2SExt+0x1a>
 8008a6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008a6e:	68d8      	ldr	r0, [r3, #12]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a74:	1c99      	adds	r1, r3, #2
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008a7a:	b282      	uxth	r2, r0
 8008a7c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	3b01      	subs	r3, #1
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d121      	bne.n	8008ada <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a12      	ldr	r2, [pc, #72]	; (8008ae4 <I2SEx_RxISR_I2SExt+0x90>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d101      	bne.n	8008aa4 <I2SEx_RxISR_I2SExt+0x50>
 8008aa0:	4b11      	ldr	r3, [pc, #68]	; (8008ae8 <I2SEx_RxISR_I2SExt+0x94>)
 8008aa2:	e001      	b.n	8008aa8 <I2SEx_RxISR_I2SExt+0x54>
 8008aa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	490d      	ldr	r1, [pc, #52]	; (8008ae4 <I2SEx_RxISR_I2SExt+0x90>)
 8008ab0:	428b      	cmp	r3, r1
 8008ab2:	d101      	bne.n	8008ab8 <I2SEx_RxISR_I2SExt+0x64>
 8008ab4:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <I2SEx_RxISR_I2SExt+0x94>)
 8008ab6:	e001      	b.n	8008abc <I2SEx_RxISR_I2SExt+0x68>
 8008ab8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008abc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008ac0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d106      	bne.n	8008ada <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7ff ff03 	bl	80088e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008ada:	bf00      	nop
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	40003800 	.word	0x40003800
 8008ae8:	40003400 	.word	0x40003400

08008aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e267      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d075      	beq.n	8008bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b0a:	4b88      	ldr	r3, [pc, #544]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	f003 030c 	and.w	r3, r3, #12
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	d00c      	beq.n	8008b30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b16:	4b85      	ldr	r3, [pc, #532]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b1e:	2b08      	cmp	r3, #8
 8008b20:	d112      	bne.n	8008b48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b22:	4b82      	ldr	r3, [pc, #520]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b2e:	d10b      	bne.n	8008b48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b30:	4b7e      	ldr	r3, [pc, #504]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d05b      	beq.n	8008bf4 <HAL_RCC_OscConfig+0x108>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d157      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e242      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b50:	d106      	bne.n	8008b60 <HAL_RCC_OscConfig+0x74>
 8008b52:	4b76      	ldr	r3, [pc, #472]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a75      	ldr	r2, [pc, #468]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b5c:	6013      	str	r3, [r2, #0]
 8008b5e:	e01d      	b.n	8008b9c <HAL_RCC_OscConfig+0xb0>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b68:	d10c      	bne.n	8008b84 <HAL_RCC_OscConfig+0x98>
 8008b6a:	4b70      	ldr	r3, [pc, #448]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a6f      	ldr	r2, [pc, #444]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	4b6d      	ldr	r3, [pc, #436]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a6c      	ldr	r2, [pc, #432]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	e00b      	b.n	8008b9c <HAL_RCC_OscConfig+0xb0>
 8008b84:	4b69      	ldr	r3, [pc, #420]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a68      	ldr	r2, [pc, #416]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b8e:	6013      	str	r3, [r2, #0]
 8008b90:	4b66      	ldr	r3, [pc, #408]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a65      	ldr	r2, [pc, #404]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d013      	beq.n	8008bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ba4:	f7fc fe88 	bl	80058b8 <HAL_GetTick>
 8008ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008baa:	e008      	b.n	8008bbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bac:	f7fc fe84 	bl	80058b8 <HAL_GetTick>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	2b64      	cmp	r3, #100	; 0x64
 8008bb8:	d901      	bls.n	8008bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e207      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bbe:	4b5b      	ldr	r3, [pc, #364]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0f0      	beq.n	8008bac <HAL_RCC_OscConfig+0xc0>
 8008bca:	e014      	b.n	8008bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bcc:	f7fc fe74 	bl	80058b8 <HAL_GetTick>
 8008bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bd2:	e008      	b.n	8008be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bd4:	f7fc fe70 	bl	80058b8 <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b64      	cmp	r3, #100	; 0x64
 8008be0:	d901      	bls.n	8008be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e1f3      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008be6:	4b51      	ldr	r3, [pc, #324]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1f0      	bne.n	8008bd4 <HAL_RCC_OscConfig+0xe8>
 8008bf2:	e000      	b.n	8008bf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 0302 	and.w	r3, r3, #2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d063      	beq.n	8008cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c02:	4b4a      	ldr	r3, [pc, #296]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f003 030c 	and.w	r3, r3, #12
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00b      	beq.n	8008c26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c0e:	4b47      	ldr	r3, [pc, #284]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c16:	2b08      	cmp	r3, #8
 8008c18:	d11c      	bne.n	8008c54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c1a:	4b44      	ldr	r3, [pc, #272]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d116      	bne.n	8008c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c26:	4b41      	ldr	r3, [pc, #260]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f003 0302 	and.w	r3, r3, #2
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d005      	beq.n	8008c3e <HAL_RCC_OscConfig+0x152>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d001      	beq.n	8008c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e1c7      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c3e:	4b3b      	ldr	r3, [pc, #236]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	00db      	lsls	r3, r3, #3
 8008c4c:	4937      	ldr	r1, [pc, #220]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c52:	e03a      	b.n	8008cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d020      	beq.n	8008c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c5c:	4b34      	ldr	r3, [pc, #208]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008c5e:	2201      	movs	r2, #1
 8008c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c62:	f7fc fe29 	bl	80058b8 <HAL_GetTick>
 8008c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c68:	e008      	b.n	8008c7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c6a:	f7fc fe25 	bl	80058b8 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d901      	bls.n	8008c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e1a8      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c7c:	4b2b      	ldr	r3, [pc, #172]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0302 	and.w	r3, r3, #2
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d0f0      	beq.n	8008c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c88:	4b28      	ldr	r3, [pc, #160]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	00db      	lsls	r3, r3, #3
 8008c96:	4925      	ldr	r1, [pc, #148]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	600b      	str	r3, [r1, #0]
 8008c9c:	e015      	b.n	8008cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c9e:	4b24      	ldr	r3, [pc, #144]	; (8008d30 <HAL_RCC_OscConfig+0x244>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca4:	f7fc fe08 	bl	80058b8 <HAL_GetTick>
 8008ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008caa:	e008      	b.n	8008cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cac:	f7fc fe04 	bl	80058b8 <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d901      	bls.n	8008cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e187      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cbe:	4b1b      	ldr	r3, [pc, #108]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0302 	and.w	r3, r3, #2
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1f0      	bne.n	8008cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0308 	and.w	r3, r3, #8
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d036      	beq.n	8008d44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d016      	beq.n	8008d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cde:	4b15      	ldr	r3, [pc, #84]	; (8008d34 <HAL_RCC_OscConfig+0x248>)
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ce4:	f7fc fde8 	bl	80058b8 <HAL_GetTick>
 8008ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cea:	e008      	b.n	8008cfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008cec:	f7fc fde4 	bl	80058b8 <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d901      	bls.n	8008cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e167      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cfe:	4b0b      	ldr	r3, [pc, #44]	; (8008d2c <HAL_RCC_OscConfig+0x240>)
 8008d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d02:	f003 0302 	and.w	r3, r3, #2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0f0      	beq.n	8008cec <HAL_RCC_OscConfig+0x200>
 8008d0a:	e01b      	b.n	8008d44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d0c:	4b09      	ldr	r3, [pc, #36]	; (8008d34 <HAL_RCC_OscConfig+0x248>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d12:	f7fc fdd1 	bl	80058b8 <HAL_GetTick>
 8008d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d18:	e00e      	b.n	8008d38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d1a:	f7fc fdcd 	bl	80058b8 <HAL_GetTick>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d907      	bls.n	8008d38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e150      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
 8008d2c:	40023800 	.word	0x40023800
 8008d30:	42470000 	.word	0x42470000
 8008d34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d38:	4b88      	ldr	r3, [pc, #544]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1ea      	bne.n	8008d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0304 	and.w	r3, r3, #4
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 8097 	beq.w	8008e80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d52:	2300      	movs	r3, #0
 8008d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d56:	4b81      	ldr	r3, [pc, #516]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10f      	bne.n	8008d82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d62:	2300      	movs	r3, #0
 8008d64:	60bb      	str	r3, [r7, #8]
 8008d66:	4b7d      	ldr	r3, [pc, #500]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6a:	4a7c      	ldr	r2, [pc, #496]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d70:	6413      	str	r3, [r2, #64]	; 0x40
 8008d72:	4b7a      	ldr	r3, [pc, #488]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d7a:	60bb      	str	r3, [r7, #8]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d82:	4b77      	ldr	r3, [pc, #476]	; (8008f60 <HAL_RCC_OscConfig+0x474>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d118      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d8e:	4b74      	ldr	r3, [pc, #464]	; (8008f60 <HAL_RCC_OscConfig+0x474>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a73      	ldr	r2, [pc, #460]	; (8008f60 <HAL_RCC_OscConfig+0x474>)
 8008d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d9a:	f7fc fd8d 	bl	80058b8 <HAL_GetTick>
 8008d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008da0:	e008      	b.n	8008db4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008da2:	f7fc fd89 	bl	80058b8 <HAL_GetTick>
 8008da6:	4602      	mov	r2, r0
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d901      	bls.n	8008db4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e10c      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008db4:	4b6a      	ldr	r3, [pc, #424]	; (8008f60 <HAL_RCC_OscConfig+0x474>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d0f0      	beq.n	8008da2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d106      	bne.n	8008dd6 <HAL_RCC_OscConfig+0x2ea>
 8008dc8:	4b64      	ldr	r3, [pc, #400]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dcc:	4a63      	ldr	r2, [pc, #396]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008dce:	f043 0301 	orr.w	r3, r3, #1
 8008dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8008dd4:	e01c      	b.n	8008e10 <HAL_RCC_OscConfig+0x324>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	2b05      	cmp	r3, #5
 8008ddc:	d10c      	bne.n	8008df8 <HAL_RCC_OscConfig+0x30c>
 8008dde:	4b5f      	ldr	r3, [pc, #380]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de2:	4a5e      	ldr	r2, [pc, #376]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008de4:	f043 0304 	orr.w	r3, r3, #4
 8008de8:	6713      	str	r3, [r2, #112]	; 0x70
 8008dea:	4b5c      	ldr	r3, [pc, #368]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dee:	4a5b      	ldr	r2, [pc, #364]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008df0:	f043 0301 	orr.w	r3, r3, #1
 8008df4:	6713      	str	r3, [r2, #112]	; 0x70
 8008df6:	e00b      	b.n	8008e10 <HAL_RCC_OscConfig+0x324>
 8008df8:	4b58      	ldr	r3, [pc, #352]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfc:	4a57      	ldr	r2, [pc, #348]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008dfe:	f023 0301 	bic.w	r3, r3, #1
 8008e02:	6713      	str	r3, [r2, #112]	; 0x70
 8008e04:	4b55      	ldr	r3, [pc, #340]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e08:	4a54      	ldr	r2, [pc, #336]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008e0a:	f023 0304 	bic.w	r3, r3, #4
 8008e0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d015      	beq.n	8008e44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e18:	f7fc fd4e 	bl	80058b8 <HAL_GetTick>
 8008e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e1e:	e00a      	b.n	8008e36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e20:	f7fc fd4a 	bl	80058b8 <HAL_GetTick>
 8008e24:	4602      	mov	r2, r0
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d901      	bls.n	8008e36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e0cb      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e36:	4b49      	ldr	r3, [pc, #292]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e3a:	f003 0302 	and.w	r3, r3, #2
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0ee      	beq.n	8008e20 <HAL_RCC_OscConfig+0x334>
 8008e42:	e014      	b.n	8008e6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e44:	f7fc fd38 	bl	80058b8 <HAL_GetTick>
 8008e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e4a:	e00a      	b.n	8008e62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e4c:	f7fc fd34 	bl	80058b8 <HAL_GetTick>
 8008e50:	4602      	mov	r2, r0
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d901      	bls.n	8008e62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e0b5      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e62:	4b3e      	ldr	r3, [pc, #248]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e66:	f003 0302 	and.w	r3, r3, #2
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1ee      	bne.n	8008e4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d105      	bne.n	8008e80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e74:	4b39      	ldr	r3, [pc, #228]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e78:	4a38      	ldr	r2, [pc, #224]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f000 80a1 	beq.w	8008fcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e8a:	4b34      	ldr	r3, [pc, #208]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	f003 030c 	and.w	r3, r3, #12
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d05c      	beq.n	8008f50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	699b      	ldr	r3, [r3, #24]
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d141      	bne.n	8008f22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e9e:	4b31      	ldr	r3, [pc, #196]	; (8008f64 <HAL_RCC_OscConfig+0x478>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ea4:	f7fc fd08 	bl	80058b8 <HAL_GetTick>
 8008ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eaa:	e008      	b.n	8008ebe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008eac:	f7fc fd04 	bl	80058b8 <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d901      	bls.n	8008ebe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e087      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ebe:	4b27      	ldr	r3, [pc, #156]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1f0      	bne.n	8008eac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	69da      	ldr	r2, [r3, #28]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	431a      	orrs	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed8:	019b      	lsls	r3, r3, #6
 8008eda:	431a      	orrs	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee0:	085b      	lsrs	r3, r3, #1
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	041b      	lsls	r3, r3, #16
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	061b      	lsls	r3, r3, #24
 8008eee:	491b      	ldr	r1, [pc, #108]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ef4:	4b1b      	ldr	r3, [pc, #108]	; (8008f64 <HAL_RCC_OscConfig+0x478>)
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008efa:	f7fc fcdd 	bl	80058b8 <HAL_GetTick>
 8008efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f00:	e008      	b.n	8008f14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f02:	f7fc fcd9 	bl	80058b8 <HAL_GetTick>
 8008f06:	4602      	mov	r2, r0
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d901      	bls.n	8008f14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e05c      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f14:	4b11      	ldr	r3, [pc, #68]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d0f0      	beq.n	8008f02 <HAL_RCC_OscConfig+0x416>
 8008f20:	e054      	b.n	8008fcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f22:	4b10      	ldr	r3, [pc, #64]	; (8008f64 <HAL_RCC_OscConfig+0x478>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f28:	f7fc fcc6 	bl	80058b8 <HAL_GetTick>
 8008f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f2e:	e008      	b.n	8008f42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f30:	f7fc fcc2 	bl	80058b8 <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d901      	bls.n	8008f42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e045      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f42:	4b06      	ldr	r3, [pc, #24]	; (8008f5c <HAL_RCC_OscConfig+0x470>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1f0      	bne.n	8008f30 <HAL_RCC_OscConfig+0x444>
 8008f4e:	e03d      	b.n	8008fcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d107      	bne.n	8008f68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e038      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
 8008f5c:	40023800 	.word	0x40023800
 8008f60:	40007000 	.word	0x40007000
 8008f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008f68:	4b1b      	ldr	r3, [pc, #108]	; (8008fd8 <HAL_RCC_OscConfig+0x4ec>)
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d028      	beq.n	8008fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d121      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d11a      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008f98:	4013      	ands	r3, r2
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d111      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fae:	085b      	lsrs	r3, r3, #1
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d107      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d001      	beq.n	8008fcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e000      	b.n	8008fce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	40023800 	.word	0x40023800

08008fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d101      	bne.n	8008ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e0cc      	b.n	800918a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ff0:	4b68      	ldr	r3, [pc, #416]	; (8009194 <HAL_RCC_ClockConfig+0x1b8>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 0307 	and.w	r3, r3, #7
 8008ff8:	683a      	ldr	r2, [r7, #0]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d90c      	bls.n	8009018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ffe:	4b65      	ldr	r3, [pc, #404]	; (8009194 <HAL_RCC_ClockConfig+0x1b8>)
 8009000:	683a      	ldr	r2, [r7, #0]
 8009002:	b2d2      	uxtb	r2, r2
 8009004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009006:	4b63      	ldr	r3, [pc, #396]	; (8009194 <HAL_RCC_ClockConfig+0x1b8>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0307 	and.w	r3, r3, #7
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	429a      	cmp	r2, r3
 8009012:	d001      	beq.n	8009018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e0b8      	b.n	800918a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0302 	and.w	r3, r3, #2
 8009020:	2b00      	cmp	r3, #0
 8009022:	d020      	beq.n	8009066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0304 	and.w	r3, r3, #4
 800902c:	2b00      	cmp	r3, #0
 800902e:	d005      	beq.n	800903c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009030:	4b59      	ldr	r3, [pc, #356]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	4a58      	ldr	r2, [pc, #352]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 8009036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800903a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0308 	and.w	r3, r3, #8
 8009044:	2b00      	cmp	r3, #0
 8009046:	d005      	beq.n	8009054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009048:	4b53      	ldr	r3, [pc, #332]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	4a52      	ldr	r2, [pc, #328]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 800904e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009054:	4b50      	ldr	r3, [pc, #320]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	494d      	ldr	r1, [pc, #308]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 8009062:	4313      	orrs	r3, r2
 8009064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	d044      	beq.n	80090fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d107      	bne.n	800908a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800907a:	4b47      	ldr	r3, [pc, #284]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009082:	2b00      	cmp	r3, #0
 8009084:	d119      	bne.n	80090ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e07f      	b.n	800918a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	2b02      	cmp	r3, #2
 8009090:	d003      	beq.n	800909a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009096:	2b03      	cmp	r3, #3
 8009098:	d107      	bne.n	80090aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800909a:	4b3f      	ldr	r3, [pc, #252]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d109      	bne.n	80090ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e06f      	b.n	800918a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090aa:	4b3b      	ldr	r3, [pc, #236]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0302 	and.w	r3, r3, #2
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e067      	b.n	800918a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090ba:	4b37      	ldr	r3, [pc, #220]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f023 0203 	bic.w	r2, r3, #3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	4934      	ldr	r1, [pc, #208]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 80090c8:	4313      	orrs	r3, r2
 80090ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090cc:	f7fc fbf4 	bl	80058b8 <HAL_GetTick>
 80090d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090d2:	e00a      	b.n	80090ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090d4:	f7fc fbf0 	bl	80058b8 <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d901      	bls.n	80090ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e04f      	b.n	800918a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090ea:	4b2b      	ldr	r3, [pc, #172]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f003 020c 	and.w	r2, r3, #12
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d1eb      	bne.n	80090d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80090fc:	4b25      	ldr	r3, [pc, #148]	; (8009194 <HAL_RCC_ClockConfig+0x1b8>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0307 	and.w	r3, r3, #7
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d20c      	bcs.n	8009124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800910a:	4b22      	ldr	r3, [pc, #136]	; (8009194 <HAL_RCC_ClockConfig+0x1b8>)
 800910c:	683a      	ldr	r2, [r7, #0]
 800910e:	b2d2      	uxtb	r2, r2
 8009110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009112:	4b20      	ldr	r3, [pc, #128]	; (8009194 <HAL_RCC_ClockConfig+0x1b8>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0307 	and.w	r3, r3, #7
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	429a      	cmp	r2, r3
 800911e:	d001      	beq.n	8009124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e032      	b.n	800918a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 0304 	and.w	r3, r3, #4
 800912c:	2b00      	cmp	r3, #0
 800912e:	d008      	beq.n	8009142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009130:	4b19      	ldr	r3, [pc, #100]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	4916      	ldr	r1, [pc, #88]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 800913e:	4313      	orrs	r3, r2
 8009140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0308 	and.w	r3, r3, #8
 800914a:	2b00      	cmp	r3, #0
 800914c:	d009      	beq.n	8009162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800914e:	4b12      	ldr	r3, [pc, #72]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	490e      	ldr	r1, [pc, #56]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 800915e:	4313      	orrs	r3, r2
 8009160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009162:	f000 f821 	bl	80091a8 <HAL_RCC_GetSysClockFreq>
 8009166:	4602      	mov	r2, r0
 8009168:	4b0b      	ldr	r3, [pc, #44]	; (8009198 <HAL_RCC_ClockConfig+0x1bc>)
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	091b      	lsrs	r3, r3, #4
 800916e:	f003 030f 	and.w	r3, r3, #15
 8009172:	490a      	ldr	r1, [pc, #40]	; (800919c <HAL_RCC_ClockConfig+0x1c0>)
 8009174:	5ccb      	ldrb	r3, [r1, r3]
 8009176:	fa22 f303 	lsr.w	r3, r2, r3
 800917a:	4a09      	ldr	r2, [pc, #36]	; (80091a0 <HAL_RCC_ClockConfig+0x1c4>)
 800917c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800917e:	4b09      	ldr	r3, [pc, #36]	; (80091a4 <HAL_RCC_ClockConfig+0x1c8>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4618      	mov	r0, r3
 8009184:	f7fc fb54 	bl	8005830 <HAL_InitTick>

  return HAL_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	40023c00 	.word	0x40023c00
 8009198:	40023800 	.word	0x40023800
 800919c:	08011f70 	.word	0x08011f70
 80091a0:	20000018 	.word	0x20000018
 80091a4:	2000001c 	.word	0x2000001c

080091a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091ac:	b094      	sub	sp, #80	; 0x50
 80091ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	647b      	str	r3, [r7, #68]	; 0x44
 80091b4:	2300      	movs	r3, #0
 80091b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091b8:	2300      	movs	r3, #0
 80091ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80091bc:	2300      	movs	r3, #0
 80091be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091c0:	4b79      	ldr	r3, [pc, #484]	; (80093a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	f003 030c 	and.w	r3, r3, #12
 80091c8:	2b08      	cmp	r3, #8
 80091ca:	d00d      	beq.n	80091e8 <HAL_RCC_GetSysClockFreq+0x40>
 80091cc:	2b08      	cmp	r3, #8
 80091ce:	f200 80e1 	bhi.w	8009394 <HAL_RCC_GetSysClockFreq+0x1ec>
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <HAL_RCC_GetSysClockFreq+0x34>
 80091d6:	2b04      	cmp	r3, #4
 80091d8:	d003      	beq.n	80091e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80091da:	e0db      	b.n	8009394 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80091dc:	4b73      	ldr	r3, [pc, #460]	; (80093ac <HAL_RCC_GetSysClockFreq+0x204>)
 80091de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80091e0:	e0db      	b.n	800939a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80091e2:	4b73      	ldr	r3, [pc, #460]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80091e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80091e6:	e0d8      	b.n	800939a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80091e8:	4b6f      	ldr	r3, [pc, #444]	; (80093a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80091f2:	4b6d      	ldr	r3, [pc, #436]	; (80093a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d063      	beq.n	80092c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091fe:	4b6a      	ldr	r3, [pc, #424]	; (80093a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	099b      	lsrs	r3, r3, #6
 8009204:	2200      	movs	r2, #0
 8009206:	63bb      	str	r3, [r7, #56]	; 0x38
 8009208:	63fa      	str	r2, [r7, #60]	; 0x3c
 800920a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009210:	633b      	str	r3, [r7, #48]	; 0x30
 8009212:	2300      	movs	r3, #0
 8009214:	637b      	str	r3, [r7, #52]	; 0x34
 8009216:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800921a:	4622      	mov	r2, r4
 800921c:	462b      	mov	r3, r5
 800921e:	f04f 0000 	mov.w	r0, #0
 8009222:	f04f 0100 	mov.w	r1, #0
 8009226:	0159      	lsls	r1, r3, #5
 8009228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800922c:	0150      	lsls	r0, r2, #5
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	4621      	mov	r1, r4
 8009234:	1a51      	subs	r1, r2, r1
 8009236:	6139      	str	r1, [r7, #16]
 8009238:	4629      	mov	r1, r5
 800923a:	eb63 0301 	sbc.w	r3, r3, r1
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	f04f 0200 	mov.w	r2, #0
 8009244:	f04f 0300 	mov.w	r3, #0
 8009248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800924c:	4659      	mov	r1, fp
 800924e:	018b      	lsls	r3, r1, #6
 8009250:	4651      	mov	r1, sl
 8009252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009256:	4651      	mov	r1, sl
 8009258:	018a      	lsls	r2, r1, #6
 800925a:	4651      	mov	r1, sl
 800925c:	ebb2 0801 	subs.w	r8, r2, r1
 8009260:	4659      	mov	r1, fp
 8009262:	eb63 0901 	sbc.w	r9, r3, r1
 8009266:	f04f 0200 	mov.w	r2, #0
 800926a:	f04f 0300 	mov.w	r3, #0
 800926e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800927a:	4690      	mov	r8, r2
 800927c:	4699      	mov	r9, r3
 800927e:	4623      	mov	r3, r4
 8009280:	eb18 0303 	adds.w	r3, r8, r3
 8009284:	60bb      	str	r3, [r7, #8]
 8009286:	462b      	mov	r3, r5
 8009288:	eb49 0303 	adc.w	r3, r9, r3
 800928c:	60fb      	str	r3, [r7, #12]
 800928e:	f04f 0200 	mov.w	r2, #0
 8009292:	f04f 0300 	mov.w	r3, #0
 8009296:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800929a:	4629      	mov	r1, r5
 800929c:	024b      	lsls	r3, r1, #9
 800929e:	4621      	mov	r1, r4
 80092a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80092a4:	4621      	mov	r1, r4
 80092a6:	024a      	lsls	r2, r1, #9
 80092a8:	4610      	mov	r0, r2
 80092aa:	4619      	mov	r1, r3
 80092ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092ae:	2200      	movs	r2, #0
 80092b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80092b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092b8:	f7f7 fcce 	bl	8000c58 <__aeabi_uldivmod>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4613      	mov	r3, r2
 80092c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092c4:	e058      	b.n	8009378 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092c6:	4b38      	ldr	r3, [pc, #224]	; (80093a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	099b      	lsrs	r3, r3, #6
 80092cc:	2200      	movs	r2, #0
 80092ce:	4618      	mov	r0, r3
 80092d0:	4611      	mov	r1, r2
 80092d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80092d6:	623b      	str	r3, [r7, #32]
 80092d8:	2300      	movs	r3, #0
 80092da:	627b      	str	r3, [r7, #36]	; 0x24
 80092dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80092e0:	4642      	mov	r2, r8
 80092e2:	464b      	mov	r3, r9
 80092e4:	f04f 0000 	mov.w	r0, #0
 80092e8:	f04f 0100 	mov.w	r1, #0
 80092ec:	0159      	lsls	r1, r3, #5
 80092ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092f2:	0150      	lsls	r0, r2, #5
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	4641      	mov	r1, r8
 80092fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80092fe:	4649      	mov	r1, r9
 8009300:	eb63 0b01 	sbc.w	fp, r3, r1
 8009304:	f04f 0200 	mov.w	r2, #0
 8009308:	f04f 0300 	mov.w	r3, #0
 800930c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009310:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009314:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009318:	ebb2 040a 	subs.w	r4, r2, sl
 800931c:	eb63 050b 	sbc.w	r5, r3, fp
 8009320:	f04f 0200 	mov.w	r2, #0
 8009324:	f04f 0300 	mov.w	r3, #0
 8009328:	00eb      	lsls	r3, r5, #3
 800932a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800932e:	00e2      	lsls	r2, r4, #3
 8009330:	4614      	mov	r4, r2
 8009332:	461d      	mov	r5, r3
 8009334:	4643      	mov	r3, r8
 8009336:	18e3      	adds	r3, r4, r3
 8009338:	603b      	str	r3, [r7, #0]
 800933a:	464b      	mov	r3, r9
 800933c:	eb45 0303 	adc.w	r3, r5, r3
 8009340:	607b      	str	r3, [r7, #4]
 8009342:	f04f 0200 	mov.w	r2, #0
 8009346:	f04f 0300 	mov.w	r3, #0
 800934a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800934e:	4629      	mov	r1, r5
 8009350:	028b      	lsls	r3, r1, #10
 8009352:	4621      	mov	r1, r4
 8009354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009358:	4621      	mov	r1, r4
 800935a:	028a      	lsls	r2, r1, #10
 800935c:	4610      	mov	r0, r2
 800935e:	4619      	mov	r1, r3
 8009360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009362:	2200      	movs	r2, #0
 8009364:	61bb      	str	r3, [r7, #24]
 8009366:	61fa      	str	r2, [r7, #28]
 8009368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800936c:	f7f7 fc74 	bl	8000c58 <__aeabi_uldivmod>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4613      	mov	r3, r2
 8009376:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009378:	4b0b      	ldr	r3, [pc, #44]	; (80093a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	0c1b      	lsrs	r3, r3, #16
 800937e:	f003 0303 	and.w	r3, r3, #3
 8009382:	3301      	adds	r3, #1
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009388:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800938a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800938c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009390:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009392:	e002      	b.n	800939a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009394:	4b05      	ldr	r3, [pc, #20]	; (80093ac <HAL_RCC_GetSysClockFreq+0x204>)
 8009396:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800939a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800939c:	4618      	mov	r0, r3
 800939e:	3750      	adds	r7, #80	; 0x50
 80093a0:	46bd      	mov	sp, r7
 80093a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093a6:	bf00      	nop
 80093a8:	40023800 	.word	0x40023800
 80093ac:	00f42400 	.word	0x00f42400
 80093b0:	007a1200 	.word	0x007a1200

080093b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093b4:	b480      	push	{r7}
 80093b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093b8:	4b03      	ldr	r3, [pc, #12]	; (80093c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80093ba:	681b      	ldr	r3, [r3, #0]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	20000018 	.word	0x20000018

080093cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80093d0:	f7ff fff0 	bl	80093b4 <HAL_RCC_GetHCLKFreq>
 80093d4:	4602      	mov	r2, r0
 80093d6:	4b05      	ldr	r3, [pc, #20]	; (80093ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	0a9b      	lsrs	r3, r3, #10
 80093dc:	f003 0307 	and.w	r3, r3, #7
 80093e0:	4903      	ldr	r1, [pc, #12]	; (80093f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093e2:	5ccb      	ldrb	r3, [r1, r3]
 80093e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	40023800 	.word	0x40023800
 80093f0:	08011f80 	.word	0x08011f80

080093f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80093f8:	f7ff ffdc 	bl	80093b4 <HAL_RCC_GetHCLKFreq>
 80093fc:	4602      	mov	r2, r0
 80093fe:	4b05      	ldr	r3, [pc, #20]	; (8009414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	0b5b      	lsrs	r3, r3, #13
 8009404:	f003 0307 	and.w	r3, r3, #7
 8009408:	4903      	ldr	r1, [pc, #12]	; (8009418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800940a:	5ccb      	ldrb	r3, [r1, r3]
 800940c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009410:	4618      	mov	r0, r3
 8009412:	bd80      	pop	{r7, pc}
 8009414:	40023800 	.word	0x40023800
 8009418:	08011f80 	.word	0x08011f80

0800941c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009428:	2300      	movs	r3, #0
 800942a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	2b00      	cmp	r3, #0
 8009436:	d105      	bne.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009440:	2b00      	cmp	r3, #0
 8009442:	d038      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009444:	4b68      	ldr	r3, [pc, #416]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009446:	2200      	movs	r2, #0
 8009448:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800944a:	f7fc fa35 	bl	80058b8 <HAL_GetTick>
 800944e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009450:	e008      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009452:	f7fc fa31 	bl	80058b8 <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	2b02      	cmp	r3, #2
 800945e:	d901      	bls.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e0bd      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009464:	4b61      	ldr	r3, [pc, #388]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1f0      	bne.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	019b      	lsls	r3, r3, #6
 800947a:	431a      	orrs	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	071b      	lsls	r3, r3, #28
 8009482:	495a      	ldr	r1, [pc, #360]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009484:	4313      	orrs	r3, r2
 8009486:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800948a:	4b57      	ldr	r3, [pc, #348]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800948c:	2201      	movs	r2, #1
 800948e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009490:	f7fc fa12 	bl	80058b8 <HAL_GetTick>
 8009494:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009496:	e008      	b.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009498:	f7fc fa0e 	bl	80058b8 <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d901      	bls.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	e09a      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80094aa:	4b50      	ldr	r3, [pc, #320]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d0f0      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 0302 	and.w	r3, r3, #2
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f000 8083 	beq.w	80095ca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80094c4:	2300      	movs	r3, #0
 80094c6:	60fb      	str	r3, [r7, #12]
 80094c8:	4b48      	ldr	r3, [pc, #288]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094cc:	4a47      	ldr	r2, [pc, #284]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094d2:	6413      	str	r3, [r2, #64]	; 0x40
 80094d4:	4b45      	ldr	r3, [pc, #276]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094dc:	60fb      	str	r3, [r7, #12]
 80094de:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80094e0:	4b43      	ldr	r3, [pc, #268]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a42      	ldr	r2, [pc, #264]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094ea:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80094ec:	f7fc f9e4 	bl	80058b8 <HAL_GetTick>
 80094f0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80094f2:	e008      	b.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80094f4:	f7fc f9e0 	bl	80058b8 <HAL_GetTick>
 80094f8:	4602      	mov	r2, r0
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d901      	bls.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e06c      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009506:	4b3a      	ldr	r3, [pc, #232]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800950e:	2b00      	cmp	r3, #0
 8009510:	d0f0      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009512:	4b36      	ldr	r3, [pc, #216]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800951a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d02f      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	429a      	cmp	r2, r3
 800952e:	d028      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009530:	4b2e      	ldr	r3, [pc, #184]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009538:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800953a:	4b2e      	ldr	r3, [pc, #184]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800953c:	2201      	movs	r2, #1
 800953e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009540:	4b2c      	ldr	r3, [pc, #176]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009542:	2200      	movs	r2, #0
 8009544:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009546:	4a29      	ldr	r2, [pc, #164]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800954c:	4b27      	ldr	r3, [pc, #156]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800954e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009550:	f003 0301 	and.w	r3, r3, #1
 8009554:	2b01      	cmp	r3, #1
 8009556:	d114      	bne.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009558:	f7fc f9ae 	bl	80058b8 <HAL_GetTick>
 800955c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800955e:	e00a      	b.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009560:	f7fc f9aa 	bl	80058b8 <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	f241 3288 	movw	r2, #5000	; 0x1388
 800956e:	4293      	cmp	r3, r2
 8009570:	d901      	bls.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8009572:	2303      	movs	r3, #3
 8009574:	e034      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009576:	4b1d      	ldr	r3, [pc, #116]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800957a:	f003 0302 	and.w	r3, r3, #2
 800957e:	2b00      	cmp	r3, #0
 8009580:	d0ee      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800958a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800958e:	d10d      	bne.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x190>
 8009590:	4b16      	ldr	r3, [pc, #88]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80095a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095a4:	4911      	ldr	r1, [pc, #68]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	608b      	str	r3, [r1, #8]
 80095aa:	e005      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80095ac:	4b0f      	ldr	r3, [pc, #60]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	4a0e      	ldr	r2, [pc, #56]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80095b6:	6093      	str	r3, [r2, #8]
 80095b8:	4b0c      	ldr	r3, [pc, #48]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095c4:	4909      	ldr	r1, [pc, #36]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095c6:	4313      	orrs	r3, r2
 80095c8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0308 	and.w	r3, r3, #8
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d003      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	7d1a      	ldrb	r2, [r3, #20]
 80095da:	4b07      	ldr	r3, [pc, #28]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80095dc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	42470068 	.word	0x42470068
 80095ec:	40023800 	.word	0x40023800
 80095f0:	40007000 	.word	0x40007000
 80095f4:	42470e40 	.word	0x42470e40
 80095f8:	424711e0 	.word	0x424711e0

080095fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b087      	sub	sp, #28
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8009604:	2300      	movs	r3, #0
 8009606:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8009608:	2300      	movs	r3, #0
 800960a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800960c:	2300      	movs	r3, #0
 800960e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009610:	2300      	movs	r3, #0
 8009612:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d140      	bne.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800961a:	4b24      	ldr	r3, [pc, #144]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009622:	60fb      	str	r3, [r7, #12]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d005      	beq.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d131      	bne.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8009630:	4b1f      	ldr	r3, [pc, #124]	; (80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8009632:	617b      	str	r3, [r7, #20]
          break;
 8009634:	e031      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009636:	4b1d      	ldr	r3, [pc, #116]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800963e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009642:	d109      	bne.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009644:	4b19      	ldr	r3, [pc, #100]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800964a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800964e:	4a19      	ldr	r2, [pc, #100]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8009650:	fbb2 f3f3 	udiv	r3, r2, r3
 8009654:	613b      	str	r3, [r7, #16]
 8009656:	e008      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009658:	4b14      	ldr	r3, [pc, #80]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800965a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800965e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009662:	4a15      	ldr	r2, [pc, #84]	; (80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8009664:	fbb2 f3f3 	udiv	r3, r2, r3
 8009668:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800966a:	4b10      	ldr	r3, [pc, #64]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800966c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009670:	099b      	lsrs	r3, r3, #6
 8009672:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	fb02 f303 	mul.w	r3, r2, r3
 800967c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800967e:	4b0b      	ldr	r3, [pc, #44]	; (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009684:	0f1b      	lsrs	r3, r3, #28
 8009686:	f003 0307 	and.w	r3, r3, #7
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009690:	617b      	str	r3, [r7, #20]
          break;
 8009692:	e002      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8009694:	2300      	movs	r3, #0
 8009696:	617b      	str	r3, [r7, #20]
          break;
 8009698:	bf00      	nop
        }
      }
      break;
 800969a:	bf00      	nop
    }
  }
  return frequency;
 800969c:	697b      	ldr	r3, [r7, #20]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	371c      	adds	r7, #28
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	40023800 	.word	0x40023800
 80096b0:	00bb8000 	.word	0x00bb8000
 80096b4:	007a1200 	.word	0x007a1200
 80096b8:	00f42400 	.word	0x00f42400

080096bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e07b      	b.n	80097c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d108      	bne.n	80096e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096de:	d009      	beq.n	80096f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	61da      	str	r2, [r3, #28]
 80096e6:	e005      	b.n	80096f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d106      	bne.n	8009714 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7fb fd04 	bl	800511c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2202      	movs	r2, #2
 8009718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800972a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800973c:	431a      	orrs	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009746:	431a      	orrs	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	f003 0302 	and.w	r3, r3, #2
 8009750:	431a      	orrs	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	695b      	ldr	r3, [r3, #20]
 8009756:	f003 0301 	and.w	r3, r3, #1
 800975a:	431a      	orrs	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009764:	431a      	orrs	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800976e:	431a      	orrs	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a1b      	ldr	r3, [r3, #32]
 8009774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009778:	ea42 0103 	orr.w	r1, r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009780:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	430a      	orrs	r2, r1
 800978a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	0c1b      	lsrs	r3, r3, #16
 8009792:	f003 0104 	and.w	r1, r3, #4
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979a:	f003 0210 	and.w	r2, r3, #16
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	430a      	orrs	r2, r1
 80097a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69da      	ldr	r2, [r3, #28]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b082      	sub	sp, #8
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d101      	bne.n	80097e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e041      	b.n	8009864 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d106      	bne.n	80097fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7fb fcd9 	bl	80051ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2202      	movs	r2, #2
 80097fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	3304      	adds	r3, #4
 800980a:	4619      	mov	r1, r3
 800980c:	4610      	mov	r0, r2
 800980e:	f000 fc53 	bl	800a0b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2201      	movs	r2, #1
 8009856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b01      	cmp	r3, #1
 800987e:	d001      	beq.n	8009884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	e044      	b.n	800990e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2202      	movs	r2, #2
 8009888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68da      	ldr	r2, [r3, #12]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0201 	orr.w	r2, r2, #1
 800989a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a1e      	ldr	r2, [pc, #120]	; (800991c <HAL_TIM_Base_Start_IT+0xb0>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d018      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x6c>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ae:	d013      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x6c>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a1a      	ldr	r2, [pc, #104]	; (8009920 <HAL_TIM_Base_Start_IT+0xb4>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d00e      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x6c>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a19      	ldr	r2, [pc, #100]	; (8009924 <HAL_TIM_Base_Start_IT+0xb8>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d009      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x6c>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a17      	ldr	r2, [pc, #92]	; (8009928 <HAL_TIM_Base_Start_IT+0xbc>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d004      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x6c>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a16      	ldr	r2, [pc, #88]	; (800992c <HAL_TIM_Base_Start_IT+0xc0>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d111      	bne.n	80098fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f003 0307 	and.w	r3, r3, #7
 80098e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b06      	cmp	r3, #6
 80098e8:	d010      	beq.n	800990c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f042 0201 	orr.w	r2, r2, #1
 80098f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098fa:	e007      	b.n	800990c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f042 0201 	orr.w	r2, r2, #1
 800990a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	40010000 	.word	0x40010000
 8009920:	40000400 	.word	0x40000400
 8009924:	40000800 	.word	0x40000800
 8009928:	40000c00 	.word	0x40000c00
 800992c:	40014000 	.word	0x40014000

08009930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e041      	b.n	80099c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	d106      	bne.n	800995c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f839 	bl	80099ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2202      	movs	r2, #2
 8009960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3304      	adds	r3, #4
 800996c:	4619      	mov	r1, r3
 800996e:	4610      	mov	r0, r2
 8009970:	f000 fba2 	bl	800a0b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b083      	sub	sp, #12
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80099d6:	bf00      	nop
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
	...

080099e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d109      	bne.n	8009a08 <HAL_TIM_PWM_Start+0x24>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	bf14      	ite	ne
 8009a00:	2301      	movne	r3, #1
 8009a02:	2300      	moveq	r3, #0
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	e022      	b.n	8009a4e <HAL_TIM_PWM_Start+0x6a>
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	2b04      	cmp	r3, #4
 8009a0c:	d109      	bne.n	8009a22 <HAL_TIM_PWM_Start+0x3e>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	bf14      	ite	ne
 8009a1a:	2301      	movne	r3, #1
 8009a1c:	2300      	moveq	r3, #0
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	e015      	b.n	8009a4e <HAL_TIM_PWM_Start+0x6a>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b08      	cmp	r3, #8
 8009a26:	d109      	bne.n	8009a3c <HAL_TIM_PWM_Start+0x58>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	bf14      	ite	ne
 8009a34:	2301      	movne	r3, #1
 8009a36:	2300      	moveq	r3, #0
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	e008      	b.n	8009a4e <HAL_TIM_PWM_Start+0x6a>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	bf14      	ite	ne
 8009a48:	2301      	movne	r3, #1
 8009a4a:	2300      	moveq	r3, #0
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e068      	b.n	8009b28 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d104      	bne.n	8009a66 <HAL_TIM_PWM_Start+0x82>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a64:	e013      	b.n	8009a8e <HAL_TIM_PWM_Start+0xaa>
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	2b04      	cmp	r3, #4
 8009a6a:	d104      	bne.n	8009a76 <HAL_TIM_PWM_Start+0x92>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2202      	movs	r2, #2
 8009a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a74:	e00b      	b.n	8009a8e <HAL_TIM_PWM_Start+0xaa>
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2b08      	cmp	r3, #8
 8009a7a:	d104      	bne.n	8009a86 <HAL_TIM_PWM_Start+0xa2>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a84:	e003      	b.n	8009a8e <HAL_TIM_PWM_Start+0xaa>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2202      	movs	r2, #2
 8009a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2201      	movs	r2, #1
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 fdb4 	bl	800a604 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a23      	ldr	r2, [pc, #140]	; (8009b30 <HAL_TIM_PWM_Start+0x14c>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d107      	bne.n	8009ab6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ab4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a1d      	ldr	r2, [pc, #116]	; (8009b30 <HAL_TIM_PWM_Start+0x14c>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d018      	beq.n	8009af2 <HAL_TIM_PWM_Start+0x10e>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ac8:	d013      	beq.n	8009af2 <HAL_TIM_PWM_Start+0x10e>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a19      	ldr	r2, [pc, #100]	; (8009b34 <HAL_TIM_PWM_Start+0x150>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d00e      	beq.n	8009af2 <HAL_TIM_PWM_Start+0x10e>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a17      	ldr	r2, [pc, #92]	; (8009b38 <HAL_TIM_PWM_Start+0x154>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d009      	beq.n	8009af2 <HAL_TIM_PWM_Start+0x10e>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a16      	ldr	r2, [pc, #88]	; (8009b3c <HAL_TIM_PWM_Start+0x158>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d004      	beq.n	8009af2 <HAL_TIM_PWM_Start+0x10e>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a14      	ldr	r2, [pc, #80]	; (8009b40 <HAL_TIM_PWM_Start+0x15c>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d111      	bne.n	8009b16 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	f003 0307 	and.w	r3, r3, #7
 8009afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2b06      	cmp	r3, #6
 8009b02:	d010      	beq.n	8009b26 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f042 0201 	orr.w	r2, r2, #1
 8009b12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b14:	e007      	b.n	8009b26 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f042 0201 	orr.w	r2, r2, #1
 8009b24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	40010000 	.word	0x40010000
 8009b34:	40000400 	.word	0x40000400
 8009b38:	40000800 	.word	0x40000800
 8009b3c:	40000c00 	.word	0x40000c00
 8009b40:	40014000 	.word	0x40014000

08009b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	f003 0302 	and.w	r3, r3, #2
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d122      	bne.n	8009ba0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	f003 0302 	and.w	r3, r3, #2
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d11b      	bne.n	8009ba0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f06f 0202 	mvn.w	r2, #2
 8009b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	f003 0303 	and.w	r3, r3, #3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d003      	beq.n	8009b8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fa77 	bl	800a07a <HAL_TIM_IC_CaptureCallback>
 8009b8c:	e005      	b.n	8009b9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fa69 	bl	800a066 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fa7a 	bl	800a08e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	f003 0304 	and.w	r3, r3, #4
 8009baa:	2b04      	cmp	r3, #4
 8009bac:	d122      	bne.n	8009bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	f003 0304 	and.w	r3, r3, #4
 8009bb8:	2b04      	cmp	r3, #4
 8009bba:	d11b      	bne.n	8009bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f06f 0204 	mvn.w	r2, #4
 8009bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2202      	movs	r2, #2
 8009bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fa4d 	bl	800a07a <HAL_TIM_IC_CaptureCallback>
 8009be0:	e005      	b.n	8009bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fa3f 	bl	800a066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fa50 	bl	800a08e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	f003 0308 	and.w	r3, r3, #8
 8009bfe:	2b08      	cmp	r3, #8
 8009c00:	d122      	bne.n	8009c48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	f003 0308 	and.w	r3, r3, #8
 8009c0c:	2b08      	cmp	r3, #8
 8009c0e:	d11b      	bne.n	8009c48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f06f 0208 	mvn.w	r2, #8
 8009c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2204      	movs	r2, #4
 8009c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	69db      	ldr	r3, [r3, #28]
 8009c26:	f003 0303 	and.w	r3, r3, #3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d003      	beq.n	8009c36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fa23 	bl	800a07a <HAL_TIM_IC_CaptureCallback>
 8009c34:	e005      	b.n	8009c42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fa15 	bl	800a066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fa26 	bl	800a08e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	f003 0310 	and.w	r3, r3, #16
 8009c52:	2b10      	cmp	r3, #16
 8009c54:	d122      	bne.n	8009c9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	f003 0310 	and.w	r3, r3, #16
 8009c60:	2b10      	cmp	r3, #16
 8009c62:	d11b      	bne.n	8009c9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f06f 0210 	mvn.w	r2, #16
 8009c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2208      	movs	r2, #8
 8009c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	69db      	ldr	r3, [r3, #28]
 8009c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d003      	beq.n	8009c8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f9f9 	bl	800a07a <HAL_TIM_IC_CaptureCallback>
 8009c88:	e005      	b.n	8009c96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f9eb 	bl	800a066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 f9fc 	bl	800a08e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d10e      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d107      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f06f 0201 	mvn.w	r2, #1
 8009cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7f7 fc14 	bl	80014f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd2:	2b80      	cmp	r3, #128	; 0x80
 8009cd4:	d10e      	bne.n	8009cf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ce0:	2b80      	cmp	r3, #128	; 0x80
 8009ce2:	d107      	bne.n	8009cf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fd26 	bl	800a740 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cfe:	2b40      	cmp	r3, #64	; 0x40
 8009d00:	d10e      	bne.n	8009d20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d0c:	2b40      	cmp	r3, #64	; 0x40
 8009d0e:	d107      	bne.n	8009d20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f9c1 	bl	800a0a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	f003 0320 	and.w	r3, r3, #32
 8009d2a:	2b20      	cmp	r3, #32
 8009d2c:	d10e      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	f003 0320 	and.w	r3, r3, #32
 8009d38:	2b20      	cmp	r3, #32
 8009d3a:	d107      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f06f 0220 	mvn.w	r2, #32
 8009d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fcf0 	bl	800a72c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d4c:	bf00      	nop
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d101      	bne.n	8009d72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d6e:	2302      	movs	r3, #2
 8009d70:	e0ae      	b.n	8009ed0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b0c      	cmp	r3, #12
 8009d7e:	f200 809f 	bhi.w	8009ec0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009d82:	a201      	add	r2, pc, #4	; (adr r2, 8009d88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d88:	08009dbd 	.word	0x08009dbd
 8009d8c:	08009ec1 	.word	0x08009ec1
 8009d90:	08009ec1 	.word	0x08009ec1
 8009d94:	08009ec1 	.word	0x08009ec1
 8009d98:	08009dfd 	.word	0x08009dfd
 8009d9c:	08009ec1 	.word	0x08009ec1
 8009da0:	08009ec1 	.word	0x08009ec1
 8009da4:	08009ec1 	.word	0x08009ec1
 8009da8:	08009e3f 	.word	0x08009e3f
 8009dac:	08009ec1 	.word	0x08009ec1
 8009db0:	08009ec1 	.word	0x08009ec1
 8009db4:	08009ec1 	.word	0x08009ec1
 8009db8:	08009e7f 	.word	0x08009e7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68b9      	ldr	r1, [r7, #8]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 f9f8 	bl	800a1b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	699a      	ldr	r2, [r3, #24]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f042 0208 	orr.w	r2, r2, #8
 8009dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	699a      	ldr	r2, [r3, #24]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f022 0204 	bic.w	r2, r2, #4
 8009de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6999      	ldr	r1, [r3, #24]
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	691a      	ldr	r2, [r3, #16]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	619a      	str	r2, [r3, #24]
      break;
 8009dfa:	e064      	b.n	8009ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68b9      	ldr	r1, [r7, #8]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 fa3e 	bl	800a284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	699a      	ldr	r2, [r3, #24]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	699a      	ldr	r2, [r3, #24]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6999      	ldr	r1, [r3, #24]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	021a      	lsls	r2, r3, #8
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	619a      	str	r2, [r3, #24]
      break;
 8009e3c:	e043      	b.n	8009ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68b9      	ldr	r1, [r7, #8]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 fa89 	bl	800a35c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	69da      	ldr	r2, [r3, #28]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f042 0208 	orr.w	r2, r2, #8
 8009e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	69da      	ldr	r2, [r3, #28]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f022 0204 	bic.w	r2, r2, #4
 8009e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	69d9      	ldr	r1, [r3, #28]
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	691a      	ldr	r2, [r3, #16]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	61da      	str	r2, [r3, #28]
      break;
 8009e7c:	e023      	b.n	8009ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68b9      	ldr	r1, [r7, #8]
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 fad3 	bl	800a430 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	69da      	ldr	r2, [r3, #28]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	69da      	ldr	r2, [r3, #28]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	69d9      	ldr	r1, [r3, #28]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	021a      	lsls	r2, r3, #8
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	61da      	str	r2, [r3, #28]
      break;
 8009ebe:	e002      	b.n	8009ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ec4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3718      	adds	r7, #24
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d101      	bne.n	8009ef4 <HAL_TIM_ConfigClockSource+0x1c>
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	e0b4      	b.n	800a05e <HAL_TIM_ConfigClockSource+0x186>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2202      	movs	r2, #2
 8009f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f2c:	d03e      	beq.n	8009fac <HAL_TIM_ConfigClockSource+0xd4>
 8009f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f32:	f200 8087 	bhi.w	800a044 <HAL_TIM_ConfigClockSource+0x16c>
 8009f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f3a:	f000 8086 	beq.w	800a04a <HAL_TIM_ConfigClockSource+0x172>
 8009f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f42:	d87f      	bhi.n	800a044 <HAL_TIM_ConfigClockSource+0x16c>
 8009f44:	2b70      	cmp	r3, #112	; 0x70
 8009f46:	d01a      	beq.n	8009f7e <HAL_TIM_ConfigClockSource+0xa6>
 8009f48:	2b70      	cmp	r3, #112	; 0x70
 8009f4a:	d87b      	bhi.n	800a044 <HAL_TIM_ConfigClockSource+0x16c>
 8009f4c:	2b60      	cmp	r3, #96	; 0x60
 8009f4e:	d050      	beq.n	8009ff2 <HAL_TIM_ConfigClockSource+0x11a>
 8009f50:	2b60      	cmp	r3, #96	; 0x60
 8009f52:	d877      	bhi.n	800a044 <HAL_TIM_ConfigClockSource+0x16c>
 8009f54:	2b50      	cmp	r3, #80	; 0x50
 8009f56:	d03c      	beq.n	8009fd2 <HAL_TIM_ConfigClockSource+0xfa>
 8009f58:	2b50      	cmp	r3, #80	; 0x50
 8009f5a:	d873      	bhi.n	800a044 <HAL_TIM_ConfigClockSource+0x16c>
 8009f5c:	2b40      	cmp	r3, #64	; 0x40
 8009f5e:	d058      	beq.n	800a012 <HAL_TIM_ConfigClockSource+0x13a>
 8009f60:	2b40      	cmp	r3, #64	; 0x40
 8009f62:	d86f      	bhi.n	800a044 <HAL_TIM_ConfigClockSource+0x16c>
 8009f64:	2b30      	cmp	r3, #48	; 0x30
 8009f66:	d064      	beq.n	800a032 <HAL_TIM_ConfigClockSource+0x15a>
 8009f68:	2b30      	cmp	r3, #48	; 0x30
 8009f6a:	d86b      	bhi.n	800a044 <HAL_TIM_ConfigClockSource+0x16c>
 8009f6c:	2b20      	cmp	r3, #32
 8009f6e:	d060      	beq.n	800a032 <HAL_TIM_ConfigClockSource+0x15a>
 8009f70:	2b20      	cmp	r3, #32
 8009f72:	d867      	bhi.n	800a044 <HAL_TIM_ConfigClockSource+0x16c>
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d05c      	beq.n	800a032 <HAL_TIM_ConfigClockSource+0x15a>
 8009f78:	2b10      	cmp	r3, #16
 8009f7a:	d05a      	beq.n	800a032 <HAL_TIM_ConfigClockSource+0x15a>
 8009f7c:	e062      	b.n	800a044 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6818      	ldr	r0, [r3, #0]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	6899      	ldr	r1, [r3, #8]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	685a      	ldr	r2, [r3, #4]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	f000 fb19 	bl	800a5c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	609a      	str	r2, [r3, #8]
      break;
 8009faa:	e04f      	b.n	800a04c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6818      	ldr	r0, [r3, #0]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	6899      	ldr	r1, [r3, #8]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	f000 fb02 	bl	800a5c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689a      	ldr	r2, [r3, #8]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fce:	609a      	str	r2, [r3, #8]
      break;
 8009fd0:	e03c      	b.n	800a04c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6818      	ldr	r0, [r3, #0]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	6859      	ldr	r1, [r3, #4]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f000 fa76 	bl	800a4d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2150      	movs	r1, #80	; 0x50
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 facf 	bl	800a58e <TIM_ITRx_SetConfig>
      break;
 8009ff0:	e02c      	b.n	800a04c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6818      	ldr	r0, [r3, #0]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	6859      	ldr	r1, [r3, #4]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	461a      	mov	r2, r3
 800a000:	f000 fa95 	bl	800a52e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2160      	movs	r1, #96	; 0x60
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 fabf 	bl	800a58e <TIM_ITRx_SetConfig>
      break;
 800a010:	e01c      	b.n	800a04c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6818      	ldr	r0, [r3, #0]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	6859      	ldr	r1, [r3, #4]
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	461a      	mov	r2, r3
 800a020:	f000 fa56 	bl	800a4d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2140      	movs	r1, #64	; 0x40
 800a02a:	4618      	mov	r0, r3
 800a02c:	f000 faaf 	bl	800a58e <TIM_ITRx_SetConfig>
      break;
 800a030:	e00c      	b.n	800a04c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4619      	mov	r1, r3
 800a03c:	4610      	mov	r0, r2
 800a03e:	f000 faa6 	bl	800a58e <TIM_ITRx_SetConfig>
      break;
 800a042:	e003      	b.n	800a04c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	73fb      	strb	r3, [r7, #15]
      break;
 800a048:	e000      	b.n	800a04c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a04a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a066:	b480      	push	{r7}
 800a068:	b083      	sub	sp, #12
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a06e:	bf00      	nop
 800a070:	370c      	adds	r7, #12
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a07a:	b480      	push	{r7}
 800a07c:	b083      	sub	sp, #12
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a082:	bf00      	nop
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a08e:	b480      	push	{r7}
 800a090:	b083      	sub	sp, #12
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a096:	bf00      	nop
 800a098:	370c      	adds	r7, #12
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0a2:	b480      	push	{r7}
 800a0a4:	b083      	sub	sp, #12
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0aa:	bf00      	nop
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
	...

0800a0b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a34      	ldr	r2, [pc, #208]	; (800a19c <TIM_Base_SetConfig+0xe4>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d00f      	beq.n	800a0f0 <TIM_Base_SetConfig+0x38>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0d6:	d00b      	beq.n	800a0f0 <TIM_Base_SetConfig+0x38>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a31      	ldr	r2, [pc, #196]	; (800a1a0 <TIM_Base_SetConfig+0xe8>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d007      	beq.n	800a0f0 <TIM_Base_SetConfig+0x38>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a30      	ldr	r2, [pc, #192]	; (800a1a4 <TIM_Base_SetConfig+0xec>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d003      	beq.n	800a0f0 <TIM_Base_SetConfig+0x38>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a2f      	ldr	r2, [pc, #188]	; (800a1a8 <TIM_Base_SetConfig+0xf0>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d108      	bne.n	800a102 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4a25      	ldr	r2, [pc, #148]	; (800a19c <TIM_Base_SetConfig+0xe4>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d01b      	beq.n	800a142 <TIM_Base_SetConfig+0x8a>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a110:	d017      	beq.n	800a142 <TIM_Base_SetConfig+0x8a>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a22      	ldr	r2, [pc, #136]	; (800a1a0 <TIM_Base_SetConfig+0xe8>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d013      	beq.n	800a142 <TIM_Base_SetConfig+0x8a>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a21      	ldr	r2, [pc, #132]	; (800a1a4 <TIM_Base_SetConfig+0xec>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d00f      	beq.n	800a142 <TIM_Base_SetConfig+0x8a>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a20      	ldr	r2, [pc, #128]	; (800a1a8 <TIM_Base_SetConfig+0xf0>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d00b      	beq.n	800a142 <TIM_Base_SetConfig+0x8a>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a1f      	ldr	r2, [pc, #124]	; (800a1ac <TIM_Base_SetConfig+0xf4>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d007      	beq.n	800a142 <TIM_Base_SetConfig+0x8a>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a1e      	ldr	r2, [pc, #120]	; (800a1b0 <TIM_Base_SetConfig+0xf8>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d003      	beq.n	800a142 <TIM_Base_SetConfig+0x8a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a1d      	ldr	r2, [pc, #116]	; (800a1b4 <TIM_Base_SetConfig+0xfc>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d108      	bne.n	800a154 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	4313      	orrs	r3, r2
 800a152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	695b      	ldr	r3, [r3, #20]
 800a15e:	4313      	orrs	r3, r2
 800a160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	689a      	ldr	r2, [r3, #8]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a08      	ldr	r2, [pc, #32]	; (800a19c <TIM_Base_SetConfig+0xe4>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d103      	bne.n	800a188 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	691a      	ldr	r2, [r3, #16]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	615a      	str	r2, [r3, #20]
}
 800a18e:	bf00      	nop
 800a190:	3714      	adds	r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	40010000 	.word	0x40010000
 800a1a0:	40000400 	.word	0x40000400
 800a1a4:	40000800 	.word	0x40000800
 800a1a8:	40000c00 	.word	0x40000c00
 800a1ac:	40014000 	.word	0x40014000
 800a1b0:	40014400 	.word	0x40014400
 800a1b4:	40014800 	.word	0x40014800

0800a1b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b087      	sub	sp, #28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	f023 0201 	bic.w	r2, r3, #1
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	699b      	ldr	r3, [r3, #24]
 800a1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f023 0303 	bic.w	r3, r3, #3
 800a1ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	f023 0302 	bic.w	r3, r3, #2
 800a200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	4313      	orrs	r3, r2
 800a20a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a1c      	ldr	r2, [pc, #112]	; (800a280 <TIM_OC1_SetConfig+0xc8>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d10c      	bne.n	800a22e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f023 0308 	bic.w	r3, r3, #8
 800a21a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	697a      	ldr	r2, [r7, #20]
 800a222:	4313      	orrs	r3, r2
 800a224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	f023 0304 	bic.w	r3, r3, #4
 800a22c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a13      	ldr	r2, [pc, #76]	; (800a280 <TIM_OC1_SetConfig+0xc8>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d111      	bne.n	800a25a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a23c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	695b      	ldr	r3, [r3, #20]
 800a24a:	693a      	ldr	r2, [r7, #16]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	4313      	orrs	r3, r2
 800a258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	685a      	ldr	r2, [r3, #4]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	621a      	str	r2, [r3, #32]
}
 800a274:	bf00      	nop
 800a276:	371c      	adds	r7, #28
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	40010000 	.word	0x40010000

0800a284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a284:	b480      	push	{r7}
 800a286:	b087      	sub	sp, #28
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	f023 0210 	bic.w	r2, r3, #16
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	021b      	lsls	r3, r3, #8
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f023 0320 	bic.w	r3, r3, #32
 800a2ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	011b      	lsls	r3, r3, #4
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a1e      	ldr	r2, [pc, #120]	; (800a358 <TIM_OC2_SetConfig+0xd4>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d10d      	bne.n	800a300 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	011b      	lsls	r3, r3, #4
 800a2f2:	697a      	ldr	r2, [r7, #20]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a15      	ldr	r2, [pc, #84]	; (800a358 <TIM_OC2_SetConfig+0xd4>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d113      	bne.n	800a330 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a30e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	4313      	orrs	r3, r2
 800a322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	699b      	ldr	r3, [r3, #24]
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	693a      	ldr	r2, [r7, #16]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	697a      	ldr	r2, [r7, #20]
 800a348:	621a      	str	r2, [r3, #32]
}
 800a34a:	bf00      	nop
 800a34c:	371c      	adds	r7, #28
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	40010000 	.word	0x40010000

0800a35c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	69db      	ldr	r3, [r3, #28]
 800a382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a38a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f023 0303 	bic.w	r3, r3, #3
 800a392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	021b      	lsls	r3, r3, #8
 800a3ac:	697a      	ldr	r2, [r7, #20]
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4a1d      	ldr	r2, [pc, #116]	; (800a42c <TIM_OC3_SetConfig+0xd0>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d10d      	bne.n	800a3d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	021b      	lsls	r3, r3, #8
 800a3c8:	697a      	ldr	r2, [r7, #20]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a14      	ldr	r2, [pc, #80]	; (800a42c <TIM_OC3_SetConfig+0xd0>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d113      	bne.n	800a406 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	011b      	lsls	r3, r3, #4
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	699b      	ldr	r3, [r3, #24]
 800a3fe:	011b      	lsls	r3, r3, #4
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	4313      	orrs	r3, r2
 800a404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	693a      	ldr	r2, [r7, #16]
 800a40a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	685a      	ldr	r2, [r3, #4]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	621a      	str	r2, [r3, #32]
}
 800a420:	bf00      	nop
 800a422:	371c      	adds	r7, #28
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr
 800a42c:	40010000 	.word	0x40010000

0800a430 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a430:	b480      	push	{r7}
 800a432:	b087      	sub	sp, #28
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a1b      	ldr	r3, [r3, #32]
 800a44a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a45e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	021b      	lsls	r3, r3, #8
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	4313      	orrs	r3, r2
 800a472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a47a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	031b      	lsls	r3, r3, #12
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	4313      	orrs	r3, r2
 800a486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a10      	ldr	r2, [pc, #64]	; (800a4cc <TIM_OC4_SetConfig+0x9c>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d109      	bne.n	800a4a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a496:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	695b      	ldr	r3, [r3, #20]
 800a49c:	019b      	lsls	r3, r3, #6
 800a49e:	697a      	ldr	r2, [r7, #20]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	621a      	str	r2, [r3, #32]
}
 800a4be:	bf00      	nop
 800a4c0:	371c      	adds	r7, #28
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	40010000 	.word	0x40010000

0800a4d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b087      	sub	sp, #28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6a1b      	ldr	r3, [r3, #32]
 800a4e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	6a1b      	ldr	r3, [r3, #32]
 800a4e6:	f023 0201 	bic.w	r2, r3, #1
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	011b      	lsls	r3, r3, #4
 800a500:	693a      	ldr	r2, [r7, #16]
 800a502:	4313      	orrs	r3, r2
 800a504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f023 030a 	bic.w	r3, r3, #10
 800a50c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	4313      	orrs	r3, r2
 800a514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	697a      	ldr	r2, [r7, #20]
 800a520:	621a      	str	r2, [r3, #32]
}
 800a522:	bf00      	nop
 800a524:	371c      	adds	r7, #28
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a52e:	b480      	push	{r7}
 800a530:	b087      	sub	sp, #28
 800a532:	af00      	add	r7, sp, #0
 800a534:	60f8      	str	r0, [r7, #12]
 800a536:	60b9      	str	r1, [r7, #8]
 800a538:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6a1b      	ldr	r3, [r3, #32]
 800a53e:	f023 0210 	bic.w	r2, r3, #16
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6a1b      	ldr	r3, [r3, #32]
 800a550:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a558:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	031b      	lsls	r3, r3, #12
 800a55e:	697a      	ldr	r2, [r7, #20]
 800a560:	4313      	orrs	r3, r2
 800a562:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a56a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	011b      	lsls	r3, r3, #4
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	4313      	orrs	r3, r2
 800a574:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	621a      	str	r2, [r3, #32]
}
 800a582:	bf00      	nop
 800a584:	371c      	adds	r7, #28
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a58e:	b480      	push	{r7}
 800a590:	b085      	sub	sp, #20
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5a6:	683a      	ldr	r2, [r7, #0]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	f043 0307 	orr.w	r3, r3, #7
 800a5b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	609a      	str	r2, [r3, #8]
}
 800a5b8:	bf00      	nop
 800a5ba:	3714      	adds	r7, #20
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
 800a5d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	021a      	lsls	r2, r3, #8
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	431a      	orrs	r2, r3
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	609a      	str	r2, [r3, #8]
}
 800a5f8:	bf00      	nop
 800a5fa:	371c      	adds	r7, #28
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a604:	b480      	push	{r7}
 800a606:	b087      	sub	sp, #28
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	f003 031f 	and.w	r3, r3, #31
 800a616:	2201      	movs	r2, #1
 800a618:	fa02 f303 	lsl.w	r3, r2, r3
 800a61c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a1a      	ldr	r2, [r3, #32]
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	43db      	mvns	r3, r3
 800a626:	401a      	ands	r2, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6a1a      	ldr	r2, [r3, #32]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	f003 031f 	and.w	r3, r3, #31
 800a636:	6879      	ldr	r1, [r7, #4]
 800a638:	fa01 f303 	lsl.w	r3, r1, r3
 800a63c:	431a      	orrs	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	621a      	str	r2, [r3, #32]
}
 800a642:	bf00      	nop
 800a644:	371c      	adds	r7, #28
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
	...

0800a650 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a660:	2b01      	cmp	r3, #1
 800a662:	d101      	bne.n	800a668 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a664:	2302      	movs	r3, #2
 800a666:	e050      	b.n	800a70a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2202      	movs	r2, #2
 800a674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a68e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	4313      	orrs	r3, r2
 800a698:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a1c      	ldr	r2, [pc, #112]	; (800a718 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d018      	beq.n	800a6de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6b4:	d013      	beq.n	800a6de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a18      	ldr	r2, [pc, #96]	; (800a71c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d00e      	beq.n	800a6de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a16      	ldr	r2, [pc, #88]	; (800a720 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d009      	beq.n	800a6de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a15      	ldr	r2, [pc, #84]	; (800a724 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d004      	beq.n	800a6de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a13      	ldr	r2, [pc, #76]	; (800a728 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d10c      	bne.n	800a6f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	40010000 	.word	0x40010000
 800a71c:	40000400 	.word	0x40000400
 800a720:	40000800 	.word	0x40000800
 800a724:	40000c00 	.word	0x40000c00
 800a728:	40014000 	.word	0x40014000

0800a72c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d101      	bne.n	800a766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	e03f      	b.n	800a7e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d106      	bne.n	800a780 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f7fa fdb4 	bl	80052e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2224      	movs	r2, #36	; 0x24
 800a784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68da      	ldr	r2, [r3, #12]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a796:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 ff43 	bl	800b624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	691a      	ldr	r2, [r3, #16]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	695a      	ldr	r2, [r3, #20]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68da      	ldr	r2, [r3, #12]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a7cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2220      	movs	r2, #32
 800a7e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
	...

0800a7f0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b08c      	sub	sp, #48	; 0x30
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a804:	b2db      	uxtb	r3, r3
 800a806:	2b20      	cmp	r3, #32
 800a808:	d165      	bne.n	800a8d6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d002      	beq.n	800a816 <HAL_UART_Transmit_DMA+0x26>
 800a810:	88fb      	ldrh	r3, [r7, #6]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d101      	bne.n	800a81a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	e05e      	b.n	800a8d8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a820:	2b01      	cmp	r3, #1
 800a822:	d101      	bne.n	800a828 <HAL_UART_Transmit_DMA+0x38>
 800a824:	2302      	movs	r3, #2
 800a826:	e057      	b.n	800a8d8 <HAL_UART_Transmit_DMA+0xe8>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	88fa      	ldrh	r2, [r7, #6]
 800a83a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	88fa      	ldrh	r2, [r7, #6]
 800a840:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2200      	movs	r2, #0
 800a846:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2221      	movs	r2, #33	; 0x21
 800a84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a854:	4a22      	ldr	r2, [pc, #136]	; (800a8e0 <HAL_UART_Transmit_DMA+0xf0>)
 800a856:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85c:	4a21      	ldr	r2, [pc, #132]	; (800a8e4 <HAL_UART_Transmit_DMA+0xf4>)
 800a85e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a864:	4a20      	ldr	r2, [pc, #128]	; (800a8e8 <HAL_UART_Transmit_DMA+0xf8>)
 800a866:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a86c:	2200      	movs	r2, #0
 800a86e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a870:	f107 0308 	add.w	r3, r7, #8
 800a874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87c:	6819      	ldr	r1, [r3, #0]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	3304      	adds	r3, #4
 800a884:	461a      	mov	r2, r3
 800a886:	88fb      	ldrh	r3, [r7, #6]
 800a888:	f7fb fa06 	bl	8005c98 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a894:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3314      	adds	r3, #20
 800a8a4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	e853 3f00 	ldrex	r3, [r3]
 800a8ac:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3314      	adds	r3, #20
 800a8bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8be:	627a      	str	r2, [r7, #36]	; 0x24
 800a8c0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c2:	6a39      	ldr	r1, [r7, #32]
 800a8c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8c6:	e841 2300 	strex	r3, r2, [r1]
 800a8ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1e5      	bne.n	800a89e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	e000      	b.n	800a8d8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a8d6:	2302      	movs	r3, #2
  }
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3730      	adds	r7, #48	; 0x30
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	0800aebd 	.word	0x0800aebd
 800a8e4:	0800af57 	.word	0x0800af57
 800a8e8:	0800b0cf 	.word	0x0800b0cf

0800a8ec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b20      	cmp	r3, #32
 800a904:	d11d      	bne.n	800a942 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d002      	beq.n	800a912 <HAL_UART_Receive_DMA+0x26>
 800a90c:	88fb      	ldrh	r3, [r7, #6]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d101      	bne.n	800a916 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	e016      	b.n	800a944 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d101      	bne.n	800a924 <HAL_UART_Receive_DMA+0x38>
 800a920:	2302      	movs	r3, #2
 800a922:	e00f      	b.n	800a944 <HAL_UART_Receive_DMA+0x58>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2200      	movs	r2, #0
 800a930:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a932:	88fb      	ldrh	r3, [r7, #6]
 800a934:	461a      	mov	r2, r3
 800a936:	68b9      	ldr	r1, [r7, #8]
 800a938:	68f8      	ldr	r0, [r7, #12]
 800a93a:	f000 fc13 	bl	800b164 <UART_Start_Receive_DMA>
 800a93e:	4603      	mov	r3, r0
 800a940:	e000      	b.n	800a944 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a942:	2302      	movs	r3, #2
  }
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b0ba      	sub	sp, #232	; 0xe8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a972:	2300      	movs	r3, #0
 800a974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a978:	2300      	movs	r3, #0
 800a97a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a97e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a982:	f003 030f 	and.w	r3, r3, #15
 800a986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a98a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10f      	bne.n	800a9b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a996:	f003 0320 	and.w	r3, r3, #32
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d009      	beq.n	800a9b2 <HAL_UART_IRQHandler+0x66>
 800a99e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9a2:	f003 0320 	and.w	r3, r3, #32
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d003      	beq.n	800a9b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fd7f 	bl	800b4ae <UART_Receive_IT>
      return;
 800a9b0:	e256      	b.n	800ae60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a9b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 80de 	beq.w	800ab78 <HAL_UART_IRQHandler+0x22c>
 800a9bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9c0:	f003 0301 	and.w	r3, r3, #1
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a9c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f000 80d1 	beq.w	800ab78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a9d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9da:	f003 0301 	and.w	r3, r3, #1
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00b      	beq.n	800a9fa <HAL_UART_IRQHandler+0xae>
 800a9e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d005      	beq.n	800a9fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f2:	f043 0201 	orr.w	r2, r3, #1
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a9fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9fe:	f003 0304 	and.w	r3, r3, #4
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00b      	beq.n	800aa1e <HAL_UART_IRQHandler+0xd2>
 800aa06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d005      	beq.n	800aa1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa16:	f043 0202 	orr.w	r2, r3, #2
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa22:	f003 0302 	and.w	r3, r3, #2
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00b      	beq.n	800aa42 <HAL_UART_IRQHandler+0xf6>
 800aa2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d005      	beq.n	800aa42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3a:	f043 0204 	orr.w	r2, r3, #4
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aa42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa46:	f003 0308 	and.w	r3, r3, #8
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d011      	beq.n	800aa72 <HAL_UART_IRQHandler+0x126>
 800aa4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa52:	f003 0320 	and.w	r3, r3, #32
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d105      	bne.n	800aa66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aa5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa5e:	f003 0301 	and.w	r3, r3, #1
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d005      	beq.n	800aa72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6a:	f043 0208 	orr.w	r2, r3, #8
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f000 81ed 	beq.w	800ae56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aa7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa80:	f003 0320 	and.w	r3, r3, #32
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d008      	beq.n	800aa9a <HAL_UART_IRQHandler+0x14e>
 800aa88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa8c:	f003 0320 	and.w	r3, r3, #32
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d002      	beq.n	800aa9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 fd0a 	bl	800b4ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	695b      	ldr	r3, [r3, #20]
 800aaa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa4:	2b40      	cmp	r3, #64	; 0x40
 800aaa6:	bf0c      	ite	eq
 800aaa8:	2301      	moveq	r3, #1
 800aaaa:	2300      	movne	r3, #0
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab6:	f003 0308 	and.w	r3, r3, #8
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d103      	bne.n	800aac6 <HAL_UART_IRQHandler+0x17a>
 800aabe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d04f      	beq.n	800ab66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 fc12 	bl	800b2f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	695b      	ldr	r3, [r3, #20]
 800aad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aad6:	2b40      	cmp	r3, #64	; 0x40
 800aad8:	d141      	bne.n	800ab5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	3314      	adds	r3, #20
 800aae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aae8:	e853 3f00 	ldrex	r3, [r3]
 800aaec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aaf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aaf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	3314      	adds	r3, #20
 800ab02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ab06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ab0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ab12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ab16:	e841 2300 	strex	r3, r2, [r1]
 800ab1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ab1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1d9      	bne.n	800aada <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d013      	beq.n	800ab56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab32:	4a7d      	ldr	r2, [pc, #500]	; (800ad28 <HAL_UART_IRQHandler+0x3dc>)
 800ab34:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fb f974 	bl	8005e28 <HAL_DMA_Abort_IT>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d016      	beq.n	800ab74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ab50:	4610      	mov	r0, r2
 800ab52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab54:	e00e      	b.n	800ab74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f99a 	bl	800ae90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab5c:	e00a      	b.n	800ab74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f996 	bl	800ae90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab64:	e006      	b.n	800ab74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f992 	bl	800ae90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ab72:	e170      	b.n	800ae56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab74:	bf00      	nop
    return;
 800ab76:	e16e      	b.n	800ae56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	f040 814a 	bne.w	800ae16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ab82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab86:	f003 0310 	and.w	r3, r3, #16
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f000 8143 	beq.w	800ae16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ab90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab94:	f003 0310 	and.w	r3, r3, #16
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f000 813c 	beq.w	800ae16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ab9e:	2300      	movs	r3, #0
 800aba0:	60bb      	str	r3, [r7, #8]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	60bb      	str	r3, [r7, #8]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	60bb      	str	r3, [r7, #8]
 800abb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abbe:	2b40      	cmp	r3, #64	; 0x40
 800abc0:	f040 80b4 	bne.w	800ad2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800abd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f000 8140 	beq.w	800ae5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800abde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800abe2:	429a      	cmp	r2, r3
 800abe4:	f080 8139 	bcs.w	800ae5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800abee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf4:	69db      	ldr	r3, [r3, #28]
 800abf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abfa:	f000 8088 	beq.w	800ad0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	330c      	adds	r3, #12
 800ac04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac0c:	e853 3f00 	ldrex	r3, [r3]
 800ac10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ac14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	330c      	adds	r3, #12
 800ac26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ac2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ac2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ac36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ac3a:	e841 2300 	strex	r3, r2, [r1]
 800ac3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ac42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1d9      	bne.n	800abfe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	3314      	adds	r3, #20
 800ac50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac54:	e853 3f00 	ldrex	r3, [r3]
 800ac58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ac5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac5c:	f023 0301 	bic.w	r3, r3, #1
 800ac60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	3314      	adds	r3, #20
 800ac6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ac6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ac72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ac76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ac7a:	e841 2300 	strex	r3, r2, [r1]
 800ac7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ac80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1e1      	bne.n	800ac4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	3314      	adds	r3, #20
 800ac8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac90:	e853 3f00 	ldrex	r3, [r3]
 800ac94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ac96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	3314      	adds	r3, #20
 800aca6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800acaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800acac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800acb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800acb2:	e841 2300 	strex	r3, r2, [r1]
 800acb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800acb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1e3      	bne.n	800ac86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2220      	movs	r2, #32
 800acc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	330c      	adds	r3, #12
 800acd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acd6:	e853 3f00 	ldrex	r3, [r3]
 800acda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800acdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acde:	f023 0310 	bic.w	r3, r3, #16
 800ace2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	330c      	adds	r3, #12
 800acec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800acf0:	65ba      	str	r2, [r7, #88]	; 0x58
 800acf2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800acf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acf8:	e841 2300 	strex	r3, r2, [r1]
 800acfc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800acfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d1e3      	bne.n	800accc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7fb f81d 	bl	8005d48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f8c0 	bl	800aea4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ad24:	e099      	b.n	800ae5a <HAL_UART_IRQHandler+0x50e>
 800ad26:	bf00      	nop
 800ad28:	0800b3b7 	.word	0x0800b3b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f000 808b 	beq.w	800ae5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ad48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f000 8086 	beq.w	800ae5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	330c      	adds	r3, #12
 800ad58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5c:	e853 3f00 	ldrex	r3, [r3]
 800ad60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	330c      	adds	r3, #12
 800ad72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ad76:	647a      	str	r2, [r7, #68]	; 0x44
 800ad78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad7e:	e841 2300 	strex	r3, r2, [r1]
 800ad82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1e3      	bne.n	800ad52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3314      	adds	r3, #20
 800ad90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad94:	e853 3f00 	ldrex	r3, [r3]
 800ad98:	623b      	str	r3, [r7, #32]
   return(result);
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	f023 0301 	bic.w	r3, r3, #1
 800ada0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	3314      	adds	r3, #20
 800adaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800adae:	633a      	str	r2, [r7, #48]	; 0x30
 800adb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800adb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adb6:	e841 2300 	strex	r3, r2, [r1]
 800adba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1e3      	bne.n	800ad8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2220      	movs	r2, #32
 800adc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	330c      	adds	r3, #12
 800add6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	e853 3f00 	ldrex	r3, [r3]
 800adde:	60fb      	str	r3, [r7, #12]
   return(result);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f023 0310 	bic.w	r3, r3, #16
 800ade6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	330c      	adds	r3, #12
 800adf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800adf4:	61fa      	str	r2, [r7, #28]
 800adf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf8:	69b9      	ldr	r1, [r7, #24]
 800adfa:	69fa      	ldr	r2, [r7, #28]
 800adfc:	e841 2300 	strex	r3, r2, [r1]
 800ae00:	617b      	str	r3, [r7, #20]
   return(result);
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1e3      	bne.n	800add0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f848 	bl	800aea4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ae14:	e023      	b.n	800ae5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ae16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d009      	beq.n	800ae36 <HAL_UART_IRQHandler+0x4ea>
 800ae22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d003      	beq.n	800ae36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fad5 	bl	800b3de <UART_Transmit_IT>
    return;
 800ae34:	e014      	b.n	800ae60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ae36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00e      	beq.n	800ae60 <HAL_UART_IRQHandler+0x514>
 800ae42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d008      	beq.n	800ae60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fb15 	bl	800b47e <UART_EndTransmit_IT>
    return;
 800ae54:	e004      	b.n	800ae60 <HAL_UART_IRQHandler+0x514>
    return;
 800ae56:	bf00      	nop
 800ae58:	e002      	b.n	800ae60 <HAL_UART_IRQHandler+0x514>
      return;
 800ae5a:	bf00      	nop
 800ae5c:	e000      	b.n	800ae60 <HAL_UART_IRQHandler+0x514>
      return;
 800ae5e:	bf00      	nop
  }
}
 800ae60:	37e8      	adds	r7, #232	; 0xe8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop

0800ae68 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ae84:	bf00      	nop
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ae98:	bf00      	nop
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	460b      	mov	r3, r1
 800aeae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aeb0:	bf00      	nop
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b090      	sub	sp, #64	; 0x40
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d137      	bne.n	800af48 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800aed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeda:	2200      	movs	r2, #0
 800aedc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	3314      	adds	r3, #20
 800aee4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee8:	e853 3f00 	ldrex	r3, [r3]
 800aeec:	623b      	str	r3, [r7, #32]
   return(result);
 800aeee:	6a3b      	ldr	r3, [r7, #32]
 800aef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aef4:	63bb      	str	r3, [r7, #56]	; 0x38
 800aef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	3314      	adds	r3, #20
 800aefc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aefe:	633a      	str	r2, [r7, #48]	; 0x30
 800af00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af06:	e841 2300 	strex	r3, r2, [r1]
 800af0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1e5      	bne.n	800aede <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	330c      	adds	r3, #12
 800af18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	e853 3f00 	ldrex	r3, [r3]
 800af20:	60fb      	str	r3, [r7, #12]
   return(result);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af28:	637b      	str	r3, [r7, #52]	; 0x34
 800af2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	330c      	adds	r3, #12
 800af30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af32:	61fa      	str	r2, [r7, #28]
 800af34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af36:	69b9      	ldr	r1, [r7, #24]
 800af38:	69fa      	ldr	r2, [r7, #28]
 800af3a:	e841 2300 	strex	r3, r2, [r1]
 800af3e:	617b      	str	r3, [r7, #20]
   return(result);
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1e5      	bne.n	800af12 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af46:	e002      	b.n	800af4e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800af48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800af4a:	f7f9 f88d 	bl	8004068 <HAL_UART_TxCpltCallback>
}
 800af4e:	bf00      	nop
 800af50:	3740      	adds	r7, #64	; 0x40
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b084      	sub	sp, #16
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f7ff ff7f 	bl	800ae68 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af6a:	bf00      	nop
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b09c      	sub	sp, #112	; 0x70
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d172      	bne.n	800b074 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800af8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af90:	2200      	movs	r2, #0
 800af92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	330c      	adds	r3, #12
 800af9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af9e:	e853 3f00 	ldrex	r3, [r3]
 800afa2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800afa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800afac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	330c      	adds	r3, #12
 800afb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800afb4:	65ba      	str	r2, [r7, #88]	; 0x58
 800afb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800afba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800afbc:	e841 2300 	strex	r3, r2, [r1]
 800afc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800afc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1e5      	bne.n	800af94 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	3314      	adds	r3, #20
 800afce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd2:	e853 3f00 	ldrex	r3, [r3]
 800afd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800afd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afda:	f023 0301 	bic.w	r3, r3, #1
 800afde:	667b      	str	r3, [r7, #100]	; 0x64
 800afe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	3314      	adds	r3, #20
 800afe6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800afe8:	647a      	str	r2, [r7, #68]	; 0x44
 800afea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aff0:	e841 2300 	strex	r3, r2, [r1]
 800aff4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1e5      	bne.n	800afc8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800affc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3314      	adds	r3, #20
 800b002:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b006:	e853 3f00 	ldrex	r3, [r3]
 800b00a:	623b      	str	r3, [r7, #32]
   return(result);
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b012:	663b      	str	r3, [r7, #96]	; 0x60
 800b014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	3314      	adds	r3, #20
 800b01a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b01c:	633a      	str	r2, [r7, #48]	; 0x30
 800b01e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b020:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b024:	e841 2300 	strex	r3, r2, [r1]
 800b028:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1e5      	bne.n	800affc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b032:	2220      	movs	r2, #32
 800b034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d119      	bne.n	800b074 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	330c      	adds	r3, #12
 800b046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	e853 3f00 	ldrex	r3, [r3]
 800b04e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f023 0310 	bic.w	r3, r3, #16
 800b056:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	330c      	adds	r3, #12
 800b05e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b060:	61fa      	str	r2, [r7, #28]
 800b062:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b064:	69b9      	ldr	r1, [r7, #24]
 800b066:	69fa      	ldr	r2, [r7, #28]
 800b068:	e841 2300 	strex	r3, r2, [r1]
 800b06c:	617b      	str	r3, [r7, #20]
   return(result);
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1e5      	bne.n	800b040 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d106      	bne.n	800b08a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b07c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b07e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b080:	4619      	mov	r1, r3
 800b082:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b084:	f7ff ff0e 	bl	800aea4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b088:	e002      	b.n	800b090 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b08a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b08c:	f7f8 fffe 	bl	800408c <HAL_UART_RxCpltCallback>
}
 800b090:	bf00      	nop
 800b092:	3770      	adds	r7, #112	; 0x70
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d108      	bne.n	800b0c0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0b2:	085b      	lsrs	r3, r3, #1
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f7ff fef3 	bl	800aea4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0be:	e002      	b.n	800b0c6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f7ff fedb 	bl	800ae7c <HAL_UART_RxHalfCpltCallback>
}
 800b0c6:	bf00      	nop
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ea:	2b80      	cmp	r3, #128	; 0x80
 800b0ec:	bf0c      	ite	eq
 800b0ee:	2301      	moveq	r3, #1
 800b0f0:	2300      	movne	r3, #0
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	2b21      	cmp	r3, #33	; 0x21
 800b100:	d108      	bne.n	800b114 <UART_DMAError+0x46>
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d005      	beq.n	800b114 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	2200      	movs	r2, #0
 800b10c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b10e:	68b8      	ldr	r0, [r7, #8]
 800b110:	f000 f8c6 	bl	800b2a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	695b      	ldr	r3, [r3, #20]
 800b11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b11e:	2b40      	cmp	r3, #64	; 0x40
 800b120:	bf0c      	ite	eq
 800b122:	2301      	moveq	r3, #1
 800b124:	2300      	movne	r3, #0
 800b126:	b2db      	uxtb	r3, r3
 800b128:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b130:	b2db      	uxtb	r3, r3
 800b132:	2b22      	cmp	r3, #34	; 0x22
 800b134:	d108      	bne.n	800b148 <UART_DMAError+0x7a>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d005      	beq.n	800b148 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	2200      	movs	r2, #0
 800b140:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b142:	68b8      	ldr	r0, [r7, #8]
 800b144:	f000 f8d4 	bl	800b2f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14c:	f043 0210 	orr.w	r2, r3, #16
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b154:	68b8      	ldr	r0, [r7, #8]
 800b156:	f7ff fe9b 	bl	800ae90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b15a:	bf00      	nop
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b098      	sub	sp, #96	; 0x60
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	4613      	mov	r3, r2
 800b170:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	88fa      	ldrh	r2, [r7, #6]
 800b17c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2200      	movs	r2, #0
 800b182:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2222      	movs	r2, #34	; 0x22
 800b188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b190:	4a40      	ldr	r2, [pc, #256]	; (800b294 <UART_Start_Receive_DMA+0x130>)
 800b192:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b198:	4a3f      	ldr	r2, [pc, #252]	; (800b298 <UART_Start_Receive_DMA+0x134>)
 800b19a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a0:	4a3e      	ldr	r2, [pc, #248]	; (800b29c <UART_Start_Receive_DMA+0x138>)
 800b1a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b1ac:	f107 0308 	add.w	r3, r7, #8
 800b1b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	3304      	adds	r3, #4
 800b1bc:	4619      	mov	r1, r3
 800b1be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	88fb      	ldrh	r3, [r7, #6]
 800b1c4:	f7fa fd68 	bl	8005c98 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	613b      	str	r3, [r7, #16]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	613b      	str	r3, [r7, #16]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	613b      	str	r3, [r7, #16]
 800b1dc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d019      	beq.n	800b222 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	330c      	adds	r3, #12
 800b1f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1f8:	e853 3f00 	ldrex	r3, [r3]
 800b1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b204:	65bb      	str	r3, [r7, #88]	; 0x58
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	330c      	adds	r3, #12
 800b20c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b20e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b210:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b212:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b214:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b216:	e841 2300 	strex	r3, r2, [r1]
 800b21a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b21c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1e5      	bne.n	800b1ee <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	3314      	adds	r3, #20
 800b228:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22c:	e853 3f00 	ldrex	r3, [r3]
 800b230:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b234:	f043 0301 	orr.w	r3, r3, #1
 800b238:	657b      	str	r3, [r7, #84]	; 0x54
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3314      	adds	r3, #20
 800b240:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b242:	63ba      	str	r2, [r7, #56]	; 0x38
 800b244:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b246:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b24a:	e841 2300 	strex	r3, r2, [r1]
 800b24e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1e5      	bne.n	800b222 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	3314      	adds	r3, #20
 800b25c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	e853 3f00 	ldrex	r3, [r3]
 800b264:	617b      	str	r3, [r7, #20]
   return(result);
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b26c:	653b      	str	r3, [r7, #80]	; 0x50
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3314      	adds	r3, #20
 800b274:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b276:	627a      	str	r2, [r7, #36]	; 0x24
 800b278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27a:	6a39      	ldr	r1, [r7, #32]
 800b27c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b27e:	e841 2300 	strex	r3, r2, [r1]
 800b282:	61fb      	str	r3, [r7, #28]
   return(result);
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1e5      	bne.n	800b256 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3760      	adds	r7, #96	; 0x60
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	0800af73 	.word	0x0800af73
 800b298:	0800b099 	.word	0x0800b099
 800b29c:	0800b0cf 	.word	0x0800b0cf

0800b2a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b089      	sub	sp, #36	; 0x24
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	330c      	adds	r3, #12
 800b2ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	e853 3f00 	ldrex	r3, [r3]
 800b2b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b2be:	61fb      	str	r3, [r7, #28]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	330c      	adds	r3, #12
 800b2c6:	69fa      	ldr	r2, [r7, #28]
 800b2c8:	61ba      	str	r2, [r7, #24]
 800b2ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2cc:	6979      	ldr	r1, [r7, #20]
 800b2ce:	69ba      	ldr	r2, [r7, #24]
 800b2d0:	e841 2300 	strex	r3, r2, [r1]
 800b2d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1e5      	bne.n	800b2a8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2220      	movs	r2, #32
 800b2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b2e4:	bf00      	nop
 800b2e6:	3724      	adds	r7, #36	; 0x24
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b095      	sub	sp, #84	; 0x54
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	330c      	adds	r3, #12
 800b2fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b302:	e853 3f00 	ldrex	r3, [r3]
 800b306:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b30e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	330c      	adds	r3, #12
 800b316:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b318:	643a      	str	r2, [r7, #64]	; 0x40
 800b31a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b31e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b320:	e841 2300 	strex	r3, r2, [r1]
 800b324:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1e5      	bne.n	800b2f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	3314      	adds	r3, #20
 800b332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b334:	6a3b      	ldr	r3, [r7, #32]
 800b336:	e853 3f00 	ldrex	r3, [r3]
 800b33a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	f023 0301 	bic.w	r3, r3, #1
 800b342:	64bb      	str	r3, [r7, #72]	; 0x48
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	3314      	adds	r3, #20
 800b34a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b34c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b34e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b354:	e841 2300 	strex	r3, r2, [r1]
 800b358:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1e5      	bne.n	800b32c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b364:	2b01      	cmp	r3, #1
 800b366:	d119      	bne.n	800b39c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	330c      	adds	r3, #12
 800b36e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	e853 3f00 	ldrex	r3, [r3]
 800b376:	60bb      	str	r3, [r7, #8]
   return(result);
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	f023 0310 	bic.w	r3, r3, #16
 800b37e:	647b      	str	r3, [r7, #68]	; 0x44
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	330c      	adds	r3, #12
 800b386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b388:	61ba      	str	r2, [r7, #24]
 800b38a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38c:	6979      	ldr	r1, [r7, #20]
 800b38e:	69ba      	ldr	r2, [r7, #24]
 800b390:	e841 2300 	strex	r3, r2, [r1]
 800b394:	613b      	str	r3, [r7, #16]
   return(result);
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1e5      	bne.n	800b368 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2220      	movs	r2, #32
 800b3a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b3aa:	bf00      	nop
 800b3ac:	3754      	adds	r7, #84	; 0x54
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b084      	sub	sp, #16
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7ff fd5d 	bl	800ae90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3d6:	bf00      	nop
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b3de:	b480      	push	{r7}
 800b3e0:	b085      	sub	sp, #20
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	2b21      	cmp	r3, #33	; 0x21
 800b3f0:	d13e      	bne.n	800b470 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3fa:	d114      	bne.n	800b426 <UART_Transmit_IT+0x48>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d110      	bne.n	800b426 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6a1b      	ldr	r3, [r3, #32]
 800b408:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	881b      	ldrh	r3, [r3, #0]
 800b40e:	461a      	mov	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b418:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	1c9a      	adds	r2, r3, #2
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	621a      	str	r2, [r3, #32]
 800b424:	e008      	b.n	800b438 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	1c59      	adds	r1, r3, #1
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	6211      	str	r1, [r2, #32]
 800b430:	781a      	ldrb	r2, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	3b01      	subs	r3, #1
 800b440:	b29b      	uxth	r3, r3
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	4619      	mov	r1, r3
 800b446:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10f      	bne.n	800b46c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	68da      	ldr	r2, [r3, #12]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b45a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	68da      	ldr	r2, [r3, #12]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b46a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	e000      	b.n	800b472 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b470:	2302      	movs	r3, #2
  }
}
 800b472:	4618      	mov	r0, r3
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b082      	sub	sp, #8
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68da      	ldr	r2, [r3, #12]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b494:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2220      	movs	r2, #32
 800b49a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f7f8 fde2 	bl	8004068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b08c      	sub	sp, #48	; 0x30
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	2b22      	cmp	r3, #34	; 0x22
 800b4c0:	f040 80ab 	bne.w	800b61a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4cc:	d117      	bne.n	800b4fe <UART_Receive_IT+0x50>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	691b      	ldr	r3, [r3, #16]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d113      	bne.n	800b4fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f6:	1c9a      	adds	r2, r3, #2
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	629a      	str	r2, [r3, #40]	; 0x28
 800b4fc:	e026      	b.n	800b54c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b502:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b504:	2300      	movs	r3, #0
 800b506:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b510:	d007      	beq.n	800b522 <UART_Receive_IT+0x74>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d10a      	bne.n	800b530 <UART_Receive_IT+0x82>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d106      	bne.n	800b530 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52c:	701a      	strb	r2, [r3, #0]
 800b52e:	e008      	b.n	800b542 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	b2db      	uxtb	r3, r3
 800b538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b53c:	b2da      	uxtb	r2, r3
 800b53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b540:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b546:	1c5a      	adds	r2, r3, #1
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b550:	b29b      	uxth	r3, r3
 800b552:	3b01      	subs	r3, #1
 800b554:	b29b      	uxth	r3, r3
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	4619      	mov	r1, r3
 800b55a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d15a      	bne.n	800b616 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	68da      	ldr	r2, [r3, #12]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f022 0220 	bic.w	r2, r2, #32
 800b56e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68da      	ldr	r2, [r3, #12]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b57e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	695a      	ldr	r2, [r3, #20]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f022 0201 	bic.w	r2, r2, #1
 800b58e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2220      	movs	r2, #32
 800b594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d135      	bne.n	800b60c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	330c      	adds	r3, #12
 800b5ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	e853 3f00 	ldrex	r3, [r3]
 800b5b4:	613b      	str	r3, [r7, #16]
   return(result);
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	f023 0310 	bic.w	r3, r3, #16
 800b5bc:	627b      	str	r3, [r7, #36]	; 0x24
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	330c      	adds	r3, #12
 800b5c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5c6:	623a      	str	r2, [r7, #32]
 800b5c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ca:	69f9      	ldr	r1, [r7, #28]
 800b5cc:	6a3a      	ldr	r2, [r7, #32]
 800b5ce:	e841 2300 	strex	r3, r2, [r1]
 800b5d2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d1e5      	bne.n	800b5a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f003 0310 	and.w	r3, r3, #16
 800b5e4:	2b10      	cmp	r3, #16
 800b5e6:	d10a      	bne.n	800b5fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	60fb      	str	r3, [r7, #12]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	60fb      	str	r3, [r7, #12]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	60fb      	str	r3, [r7, #12]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f7ff fc4d 	bl	800aea4 <HAL_UARTEx_RxEventCallback>
 800b60a:	e002      	b.n	800b612 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7f8 fd3d 	bl	800408c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b612:	2300      	movs	r3, #0
 800b614:	e002      	b.n	800b61c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b616:	2300      	movs	r3, #0
 800b618:	e000      	b.n	800b61c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b61a:	2302      	movs	r3, #2
  }
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3730      	adds	r7, #48	; 0x30
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b628:	b0c0      	sub	sp, #256	; 0x100
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	691b      	ldr	r3, [r3, #16]
 800b638:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b63c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b640:	68d9      	ldr	r1, [r3, #12]
 800b642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	ea40 0301 	orr.w	r3, r0, r1
 800b64c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b64e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b652:	689a      	ldr	r2, [r3, #8]
 800b654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	431a      	orrs	r2, r3
 800b65c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b660:	695b      	ldr	r3, [r3, #20]
 800b662:	431a      	orrs	r2, r3
 800b664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b668:	69db      	ldr	r3, [r3, #28]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b67c:	f021 010c 	bic.w	r1, r1, #12
 800b680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b68a:	430b      	orrs	r3, r1
 800b68c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b68e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b69a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b69e:	6999      	ldr	r1, [r3, #24]
 800b6a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	ea40 0301 	orr.w	r3, r0, r1
 800b6aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b6ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	4b8f      	ldr	r3, [pc, #572]	; (800b8f0 <UART_SetConfig+0x2cc>)
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d005      	beq.n	800b6c4 <UART_SetConfig+0xa0>
 800b6b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	4b8d      	ldr	r3, [pc, #564]	; (800b8f4 <UART_SetConfig+0x2d0>)
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d104      	bne.n	800b6ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b6c4:	f7fd fe96 	bl	80093f4 <HAL_RCC_GetPCLK2Freq>
 800b6c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b6cc:	e003      	b.n	800b6d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b6ce:	f7fd fe7d 	bl	80093cc <HAL_RCC_GetPCLK1Freq>
 800b6d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6da:	69db      	ldr	r3, [r3, #28]
 800b6dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6e0:	f040 810c 	bne.w	800b8fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b6e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b6ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b6f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b6f6:	4622      	mov	r2, r4
 800b6f8:	462b      	mov	r3, r5
 800b6fa:	1891      	adds	r1, r2, r2
 800b6fc:	65b9      	str	r1, [r7, #88]	; 0x58
 800b6fe:	415b      	adcs	r3, r3
 800b700:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b702:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b706:	4621      	mov	r1, r4
 800b708:	eb12 0801 	adds.w	r8, r2, r1
 800b70c:	4629      	mov	r1, r5
 800b70e:	eb43 0901 	adc.w	r9, r3, r1
 800b712:	f04f 0200 	mov.w	r2, #0
 800b716:	f04f 0300 	mov.w	r3, #0
 800b71a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b71e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b726:	4690      	mov	r8, r2
 800b728:	4699      	mov	r9, r3
 800b72a:	4623      	mov	r3, r4
 800b72c:	eb18 0303 	adds.w	r3, r8, r3
 800b730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b734:	462b      	mov	r3, r5
 800b736:	eb49 0303 	adc.w	r3, r9, r3
 800b73a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b73e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b74a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b74e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b752:	460b      	mov	r3, r1
 800b754:	18db      	adds	r3, r3, r3
 800b756:	653b      	str	r3, [r7, #80]	; 0x50
 800b758:	4613      	mov	r3, r2
 800b75a:	eb42 0303 	adc.w	r3, r2, r3
 800b75e:	657b      	str	r3, [r7, #84]	; 0x54
 800b760:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b764:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b768:	f7f5 fa76 	bl	8000c58 <__aeabi_uldivmod>
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	4b61      	ldr	r3, [pc, #388]	; (800b8f8 <UART_SetConfig+0x2d4>)
 800b772:	fba3 2302 	umull	r2, r3, r3, r2
 800b776:	095b      	lsrs	r3, r3, #5
 800b778:	011c      	lsls	r4, r3, #4
 800b77a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b77e:	2200      	movs	r2, #0
 800b780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b784:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b788:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b78c:	4642      	mov	r2, r8
 800b78e:	464b      	mov	r3, r9
 800b790:	1891      	adds	r1, r2, r2
 800b792:	64b9      	str	r1, [r7, #72]	; 0x48
 800b794:	415b      	adcs	r3, r3
 800b796:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b798:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b79c:	4641      	mov	r1, r8
 800b79e:	eb12 0a01 	adds.w	sl, r2, r1
 800b7a2:	4649      	mov	r1, r9
 800b7a4:	eb43 0b01 	adc.w	fp, r3, r1
 800b7a8:	f04f 0200 	mov.w	r2, #0
 800b7ac:	f04f 0300 	mov.w	r3, #0
 800b7b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b7b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b7b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7bc:	4692      	mov	sl, r2
 800b7be:	469b      	mov	fp, r3
 800b7c0:	4643      	mov	r3, r8
 800b7c2:	eb1a 0303 	adds.w	r3, sl, r3
 800b7c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b7ca:	464b      	mov	r3, r9
 800b7cc:	eb4b 0303 	adc.w	r3, fp, r3
 800b7d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b7e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	18db      	adds	r3, r3, r3
 800b7ec:	643b      	str	r3, [r7, #64]	; 0x40
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	eb42 0303 	adc.w	r3, r2, r3
 800b7f4:	647b      	str	r3, [r7, #68]	; 0x44
 800b7f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b7fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b7fe:	f7f5 fa2b 	bl	8000c58 <__aeabi_uldivmod>
 800b802:	4602      	mov	r2, r0
 800b804:	460b      	mov	r3, r1
 800b806:	4611      	mov	r1, r2
 800b808:	4b3b      	ldr	r3, [pc, #236]	; (800b8f8 <UART_SetConfig+0x2d4>)
 800b80a:	fba3 2301 	umull	r2, r3, r3, r1
 800b80e:	095b      	lsrs	r3, r3, #5
 800b810:	2264      	movs	r2, #100	; 0x64
 800b812:	fb02 f303 	mul.w	r3, r2, r3
 800b816:	1acb      	subs	r3, r1, r3
 800b818:	00db      	lsls	r3, r3, #3
 800b81a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b81e:	4b36      	ldr	r3, [pc, #216]	; (800b8f8 <UART_SetConfig+0x2d4>)
 800b820:	fba3 2302 	umull	r2, r3, r3, r2
 800b824:	095b      	lsrs	r3, r3, #5
 800b826:	005b      	lsls	r3, r3, #1
 800b828:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b82c:	441c      	add	r4, r3
 800b82e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b832:	2200      	movs	r2, #0
 800b834:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b838:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b83c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b840:	4642      	mov	r2, r8
 800b842:	464b      	mov	r3, r9
 800b844:	1891      	adds	r1, r2, r2
 800b846:	63b9      	str	r1, [r7, #56]	; 0x38
 800b848:	415b      	adcs	r3, r3
 800b84a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b84c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b850:	4641      	mov	r1, r8
 800b852:	1851      	adds	r1, r2, r1
 800b854:	6339      	str	r1, [r7, #48]	; 0x30
 800b856:	4649      	mov	r1, r9
 800b858:	414b      	adcs	r3, r1
 800b85a:	637b      	str	r3, [r7, #52]	; 0x34
 800b85c:	f04f 0200 	mov.w	r2, #0
 800b860:	f04f 0300 	mov.w	r3, #0
 800b864:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b868:	4659      	mov	r1, fp
 800b86a:	00cb      	lsls	r3, r1, #3
 800b86c:	4651      	mov	r1, sl
 800b86e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b872:	4651      	mov	r1, sl
 800b874:	00ca      	lsls	r2, r1, #3
 800b876:	4610      	mov	r0, r2
 800b878:	4619      	mov	r1, r3
 800b87a:	4603      	mov	r3, r0
 800b87c:	4642      	mov	r2, r8
 800b87e:	189b      	adds	r3, r3, r2
 800b880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b884:	464b      	mov	r3, r9
 800b886:	460a      	mov	r2, r1
 800b888:	eb42 0303 	adc.w	r3, r2, r3
 800b88c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b89c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b8a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	18db      	adds	r3, r3, r3
 800b8a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	eb42 0303 	adc.w	r3, r2, r3
 800b8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b8b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b8ba:	f7f5 f9cd 	bl	8000c58 <__aeabi_uldivmod>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	4b0d      	ldr	r3, [pc, #52]	; (800b8f8 <UART_SetConfig+0x2d4>)
 800b8c4:	fba3 1302 	umull	r1, r3, r3, r2
 800b8c8:	095b      	lsrs	r3, r3, #5
 800b8ca:	2164      	movs	r1, #100	; 0x64
 800b8cc:	fb01 f303 	mul.w	r3, r1, r3
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	00db      	lsls	r3, r3, #3
 800b8d4:	3332      	adds	r3, #50	; 0x32
 800b8d6:	4a08      	ldr	r2, [pc, #32]	; (800b8f8 <UART_SetConfig+0x2d4>)
 800b8d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b8dc:	095b      	lsrs	r3, r3, #5
 800b8de:	f003 0207 	and.w	r2, r3, #7
 800b8e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4422      	add	r2, r4
 800b8ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b8ec:	e105      	b.n	800bafa <UART_SetConfig+0x4d6>
 800b8ee:	bf00      	nop
 800b8f0:	40011000 	.word	0x40011000
 800b8f4:	40011400 	.word	0x40011400
 800b8f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b8fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b900:	2200      	movs	r2, #0
 800b902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b906:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b90a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b90e:	4642      	mov	r2, r8
 800b910:	464b      	mov	r3, r9
 800b912:	1891      	adds	r1, r2, r2
 800b914:	6239      	str	r1, [r7, #32]
 800b916:	415b      	adcs	r3, r3
 800b918:	627b      	str	r3, [r7, #36]	; 0x24
 800b91a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b91e:	4641      	mov	r1, r8
 800b920:	1854      	adds	r4, r2, r1
 800b922:	4649      	mov	r1, r9
 800b924:	eb43 0501 	adc.w	r5, r3, r1
 800b928:	f04f 0200 	mov.w	r2, #0
 800b92c:	f04f 0300 	mov.w	r3, #0
 800b930:	00eb      	lsls	r3, r5, #3
 800b932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b936:	00e2      	lsls	r2, r4, #3
 800b938:	4614      	mov	r4, r2
 800b93a:	461d      	mov	r5, r3
 800b93c:	4643      	mov	r3, r8
 800b93e:	18e3      	adds	r3, r4, r3
 800b940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b944:	464b      	mov	r3, r9
 800b946:	eb45 0303 	adc.w	r3, r5, r3
 800b94a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b94e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b95a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b95e:	f04f 0200 	mov.w	r2, #0
 800b962:	f04f 0300 	mov.w	r3, #0
 800b966:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b96a:	4629      	mov	r1, r5
 800b96c:	008b      	lsls	r3, r1, #2
 800b96e:	4621      	mov	r1, r4
 800b970:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b974:	4621      	mov	r1, r4
 800b976:	008a      	lsls	r2, r1, #2
 800b978:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b97c:	f7f5 f96c 	bl	8000c58 <__aeabi_uldivmod>
 800b980:	4602      	mov	r2, r0
 800b982:	460b      	mov	r3, r1
 800b984:	4b60      	ldr	r3, [pc, #384]	; (800bb08 <UART_SetConfig+0x4e4>)
 800b986:	fba3 2302 	umull	r2, r3, r3, r2
 800b98a:	095b      	lsrs	r3, r3, #5
 800b98c:	011c      	lsls	r4, r3, #4
 800b98e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b992:	2200      	movs	r2, #0
 800b994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b998:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b99c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b9a0:	4642      	mov	r2, r8
 800b9a2:	464b      	mov	r3, r9
 800b9a4:	1891      	adds	r1, r2, r2
 800b9a6:	61b9      	str	r1, [r7, #24]
 800b9a8:	415b      	adcs	r3, r3
 800b9aa:	61fb      	str	r3, [r7, #28]
 800b9ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9b0:	4641      	mov	r1, r8
 800b9b2:	1851      	adds	r1, r2, r1
 800b9b4:	6139      	str	r1, [r7, #16]
 800b9b6:	4649      	mov	r1, r9
 800b9b8:	414b      	adcs	r3, r1
 800b9ba:	617b      	str	r3, [r7, #20]
 800b9bc:	f04f 0200 	mov.w	r2, #0
 800b9c0:	f04f 0300 	mov.w	r3, #0
 800b9c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b9c8:	4659      	mov	r1, fp
 800b9ca:	00cb      	lsls	r3, r1, #3
 800b9cc:	4651      	mov	r1, sl
 800b9ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b9d2:	4651      	mov	r1, sl
 800b9d4:	00ca      	lsls	r2, r1, #3
 800b9d6:	4610      	mov	r0, r2
 800b9d8:	4619      	mov	r1, r3
 800b9da:	4603      	mov	r3, r0
 800b9dc:	4642      	mov	r2, r8
 800b9de:	189b      	adds	r3, r3, r2
 800b9e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b9e4:	464b      	mov	r3, r9
 800b9e6:	460a      	mov	r2, r1
 800b9e8:	eb42 0303 	adc.w	r3, r2, r3
 800b9ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b9f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b9fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b9fc:	f04f 0200 	mov.w	r2, #0
 800ba00:	f04f 0300 	mov.w	r3, #0
 800ba04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ba08:	4649      	mov	r1, r9
 800ba0a:	008b      	lsls	r3, r1, #2
 800ba0c:	4641      	mov	r1, r8
 800ba0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba12:	4641      	mov	r1, r8
 800ba14:	008a      	lsls	r2, r1, #2
 800ba16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ba1a:	f7f5 f91d 	bl	8000c58 <__aeabi_uldivmod>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	460b      	mov	r3, r1
 800ba22:	4b39      	ldr	r3, [pc, #228]	; (800bb08 <UART_SetConfig+0x4e4>)
 800ba24:	fba3 1302 	umull	r1, r3, r3, r2
 800ba28:	095b      	lsrs	r3, r3, #5
 800ba2a:	2164      	movs	r1, #100	; 0x64
 800ba2c:	fb01 f303 	mul.w	r3, r1, r3
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	011b      	lsls	r3, r3, #4
 800ba34:	3332      	adds	r3, #50	; 0x32
 800ba36:	4a34      	ldr	r2, [pc, #208]	; (800bb08 <UART_SetConfig+0x4e4>)
 800ba38:	fba2 2303 	umull	r2, r3, r2, r3
 800ba3c:	095b      	lsrs	r3, r3, #5
 800ba3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba42:	441c      	add	r4, r3
 800ba44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba48:	2200      	movs	r2, #0
 800ba4a:	673b      	str	r3, [r7, #112]	; 0x70
 800ba4c:	677a      	str	r2, [r7, #116]	; 0x74
 800ba4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ba52:	4642      	mov	r2, r8
 800ba54:	464b      	mov	r3, r9
 800ba56:	1891      	adds	r1, r2, r2
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	415b      	adcs	r3, r3
 800ba5c:	60fb      	str	r3, [r7, #12]
 800ba5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba62:	4641      	mov	r1, r8
 800ba64:	1851      	adds	r1, r2, r1
 800ba66:	6039      	str	r1, [r7, #0]
 800ba68:	4649      	mov	r1, r9
 800ba6a:	414b      	adcs	r3, r1
 800ba6c:	607b      	str	r3, [r7, #4]
 800ba6e:	f04f 0200 	mov.w	r2, #0
 800ba72:	f04f 0300 	mov.w	r3, #0
 800ba76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ba7a:	4659      	mov	r1, fp
 800ba7c:	00cb      	lsls	r3, r1, #3
 800ba7e:	4651      	mov	r1, sl
 800ba80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba84:	4651      	mov	r1, sl
 800ba86:	00ca      	lsls	r2, r1, #3
 800ba88:	4610      	mov	r0, r2
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	4642      	mov	r2, r8
 800ba90:	189b      	adds	r3, r3, r2
 800ba92:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba94:	464b      	mov	r3, r9
 800ba96:	460a      	mov	r2, r1
 800ba98:	eb42 0303 	adc.w	r3, r2, r3
 800ba9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	663b      	str	r3, [r7, #96]	; 0x60
 800baa8:	667a      	str	r2, [r7, #100]	; 0x64
 800baaa:	f04f 0200 	mov.w	r2, #0
 800baae:	f04f 0300 	mov.w	r3, #0
 800bab2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bab6:	4649      	mov	r1, r9
 800bab8:	008b      	lsls	r3, r1, #2
 800baba:	4641      	mov	r1, r8
 800babc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bac0:	4641      	mov	r1, r8
 800bac2:	008a      	lsls	r2, r1, #2
 800bac4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bac8:	f7f5 f8c6 	bl	8000c58 <__aeabi_uldivmod>
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	4b0d      	ldr	r3, [pc, #52]	; (800bb08 <UART_SetConfig+0x4e4>)
 800bad2:	fba3 1302 	umull	r1, r3, r3, r2
 800bad6:	095b      	lsrs	r3, r3, #5
 800bad8:	2164      	movs	r1, #100	; 0x64
 800bada:	fb01 f303 	mul.w	r3, r1, r3
 800bade:	1ad3      	subs	r3, r2, r3
 800bae0:	011b      	lsls	r3, r3, #4
 800bae2:	3332      	adds	r3, #50	; 0x32
 800bae4:	4a08      	ldr	r2, [pc, #32]	; (800bb08 <UART_SetConfig+0x4e4>)
 800bae6:	fba2 2303 	umull	r2, r3, r2, r3
 800baea:	095b      	lsrs	r3, r3, #5
 800baec:	f003 020f 	and.w	r2, r3, #15
 800baf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4422      	add	r2, r4
 800baf8:	609a      	str	r2, [r3, #8]
}
 800bafa:	bf00      	nop
 800bafc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bb00:	46bd      	mov	sp, r7
 800bb02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb06:	bf00      	nop
 800bb08:	51eb851f 	.word	0x51eb851f

0800bb0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb0c:	b084      	sub	sp, #16
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b084      	sub	sp, #16
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	f107 001c 	add.w	r0, r7, #28
 800bb1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d122      	bne.n	800bb6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bb38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bb4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d105      	bne.n	800bb5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f9c0 	bl	800bee4 <USB_CoreReset>
 800bb64:	4603      	mov	r3, r0
 800bb66:	73fb      	strb	r3, [r7, #15]
 800bb68:	e01a      	b.n	800bba0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 f9b4 	bl	800bee4 <USB_CoreReset>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bb80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d106      	bne.n	800bb94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	639a      	str	r2, [r3, #56]	; 0x38
 800bb92:	e005      	b.n	800bba0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d10b      	bne.n	800bbbe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	f043 0206 	orr.w	r2, r3, #6
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	f043 0220 	orr.w	r2, r3, #32
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bbbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbca:	b004      	add	sp, #16
 800bbcc:	4770      	bx	lr

0800bbce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b083      	sub	sp, #12
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	689b      	ldr	r3, [r3, #8]
 800bbda:	f043 0201 	orr.w	r2, r3, #1
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	f023 0201 	bic.w	r2, r3, #1
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	370c      	adds	r7, #12
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr

0800bc12 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b084      	sub	sp, #16
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bc2e:	78fb      	ldrb	r3, [r7, #3]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d115      	bne.n	800bc60 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bc40:	2001      	movs	r0, #1
 800bc42:	f7f9 fe45 	bl	80058d0 <HAL_Delay>
      ms++;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 f93a 	bl	800bec6 <USB_GetMode>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d01e      	beq.n	800bc96 <USB_SetCurrentMode+0x84>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2b31      	cmp	r3, #49	; 0x31
 800bc5c:	d9f0      	bls.n	800bc40 <USB_SetCurrentMode+0x2e>
 800bc5e:	e01a      	b.n	800bc96 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bc60:	78fb      	ldrb	r3, [r7, #3]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d115      	bne.n	800bc92 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bc72:	2001      	movs	r0, #1
 800bc74:	f7f9 fe2c 	bl	80058d0 <HAL_Delay>
      ms++;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 f921 	bl	800bec6 <USB_GetMode>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d005      	beq.n	800bc96 <USB_SetCurrentMode+0x84>
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2b31      	cmp	r3, #49	; 0x31
 800bc8e:	d9f0      	bls.n	800bc72 <USB_SetCurrentMode+0x60>
 800bc90:	e001      	b.n	800bc96 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bc92:	2301      	movs	r3, #1
 800bc94:	e005      	b.n	800bca2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2b32      	cmp	r3, #50	; 0x32
 800bc9a:	d101      	bne.n	800bca0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e000      	b.n	800bca2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
	...

0800bcac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	4a13      	ldr	r2, [pc, #76]	; (800bd10 <USB_FlushTxFifo+0x64>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d901      	bls.n	800bccc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bcc8:	2303      	movs	r3, #3
 800bcca:	e01b      	b.n	800bd04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	691b      	ldr	r3, [r3, #16]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	daf2      	bge.n	800bcba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	019b      	lsls	r3, r3, #6
 800bcdc:	f043 0220 	orr.w	r2, r3, #32
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3301      	adds	r3, #1
 800bce8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	4a08      	ldr	r2, [pc, #32]	; (800bd10 <USB_FlushTxFifo+0x64>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d901      	bls.n	800bcf6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	e006      	b.n	800bd04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	f003 0320 	and.w	r3, r3, #32
 800bcfe:	2b20      	cmp	r3, #32
 800bd00:	d0f0      	beq.n	800bce4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bd02:	2300      	movs	r3, #0
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr
 800bd10:	00030d40 	.word	0x00030d40

0800bd14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	3301      	adds	r3, #1
 800bd24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	4a11      	ldr	r2, [pc, #68]	; (800bd70 <USB_FlushRxFifo+0x5c>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d901      	bls.n	800bd32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bd2e:	2303      	movs	r3, #3
 800bd30:	e018      	b.n	800bd64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	daf2      	bge.n	800bd20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2210      	movs	r2, #16
 800bd42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	3301      	adds	r3, #1
 800bd48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	4a08      	ldr	r2, [pc, #32]	; (800bd70 <USB_FlushRxFifo+0x5c>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d901      	bls.n	800bd56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bd52:	2303      	movs	r3, #3
 800bd54:	e006      	b.n	800bd64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	f003 0310 	and.w	r3, r3, #16
 800bd5e:	2b10      	cmp	r3, #16
 800bd60:	d0f0      	beq.n	800bd44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3714      	adds	r7, #20
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr
 800bd70:	00030d40 	.word	0x00030d40

0800bd74 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b089      	sub	sp, #36	; 0x24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	4611      	mov	r1, r2
 800bd80:	461a      	mov	r2, r3
 800bd82:	460b      	mov	r3, r1
 800bd84:	71fb      	strb	r3, [r7, #7]
 800bd86:	4613      	mov	r3, r2
 800bd88:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bd92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d123      	bne.n	800bde2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bd9a:	88bb      	ldrh	r3, [r7, #4]
 800bd9c:	3303      	adds	r3, #3
 800bd9e:	089b      	lsrs	r3, r3, #2
 800bda0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bda2:	2300      	movs	r3, #0
 800bda4:	61bb      	str	r3, [r7, #24]
 800bda6:	e018      	b.n	800bdda <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bda8:	79fb      	ldrb	r3, [r7, #7]
 800bdaa:	031a      	lsls	r2, r3, #12
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	4413      	add	r3, r2
 800bdb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	69fb      	ldr	r3, [r7, #28]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	61bb      	str	r3, [r7, #24]
 800bdda:	69ba      	ldr	r2, [r7, #24]
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d3e2      	bcc.n	800bda8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3724      	adds	r7, #36	; 0x24
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b08b      	sub	sp, #44	; 0x2c
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800be06:	88fb      	ldrh	r3, [r7, #6]
 800be08:	089b      	lsrs	r3, r3, #2
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800be0e:	88fb      	ldrh	r3, [r7, #6]
 800be10:	f003 0303 	and.w	r3, r3, #3
 800be14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800be16:	2300      	movs	r3, #0
 800be18:	623b      	str	r3, [r7, #32]
 800be1a:	e014      	b.n	800be46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be26:	601a      	str	r2, [r3, #0]
    pDest++;
 800be28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2a:	3301      	adds	r3, #1
 800be2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800be2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be30:	3301      	adds	r3, #1
 800be32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800be34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be36:	3301      	adds	r3, #1
 800be38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800be3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3c:	3301      	adds	r3, #1
 800be3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800be40:	6a3b      	ldr	r3, [r7, #32]
 800be42:	3301      	adds	r3, #1
 800be44:	623b      	str	r3, [r7, #32]
 800be46:	6a3a      	ldr	r2, [r7, #32]
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d3e6      	bcc.n	800be1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800be4e:	8bfb      	ldrh	r3, [r7, #30]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d01e      	beq.n	800be92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800be54:	2300      	movs	r3, #0
 800be56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be5e:	461a      	mov	r2, r3
 800be60:	f107 0310 	add.w	r3, r7, #16
 800be64:	6812      	ldr	r2, [r2, #0]
 800be66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	6a3b      	ldr	r3, [r7, #32]
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	00db      	lsls	r3, r3, #3
 800be70:	fa22 f303 	lsr.w	r3, r2, r3
 800be74:	b2da      	uxtb	r2, r3
 800be76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be78:	701a      	strb	r2, [r3, #0]
      i++;
 800be7a:	6a3b      	ldr	r3, [r7, #32]
 800be7c:	3301      	adds	r3, #1
 800be7e:	623b      	str	r3, [r7, #32]
      pDest++;
 800be80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be82:	3301      	adds	r3, #1
 800be84:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800be86:	8bfb      	ldrh	r3, [r7, #30]
 800be88:	3b01      	subs	r3, #1
 800be8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800be8c:	8bfb      	ldrh	r3, [r7, #30]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d1ea      	bne.n	800be68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800be92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be94:	4618      	mov	r0, r3
 800be96:	372c      	adds	r7, #44	; 0x2c
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	695b      	ldr	r3, [r3, #20]
 800beac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	699b      	ldr	r3, [r3, #24]
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	4013      	ands	r3, r2
 800beb6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800beb8:	68fb      	ldr	r3, [r7, #12]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3714      	adds	r7, #20
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bec6:	b480      	push	{r7}
 800bec8:	b083      	sub	sp, #12
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	f003 0301 	and.w	r3, r3, #1
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	370c      	adds	r7, #12
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
	...

0800bee4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800beec:	2300      	movs	r3, #0
 800beee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	3301      	adds	r3, #1
 800bef4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	4a13      	ldr	r2, [pc, #76]	; (800bf48 <USB_CoreReset+0x64>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d901      	bls.n	800bf02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800befe:	2303      	movs	r3, #3
 800bf00:	e01b      	b.n	800bf3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	daf2      	bge.n	800bef0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	691b      	ldr	r3, [r3, #16]
 800bf12:	f043 0201 	orr.w	r2, r3, #1
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	4a09      	ldr	r2, [pc, #36]	; (800bf48 <USB_CoreReset+0x64>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d901      	bls.n	800bf2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bf28:	2303      	movs	r3, #3
 800bf2a:	e006      	b.n	800bf3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d0f0      	beq.n	800bf1a <USB_CoreReset+0x36>

  return HAL_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3714      	adds	r7, #20
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	00030d40 	.word	0x00030d40

0800bf4c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf4c:	b084      	sub	sp, #16
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b086      	sub	sp, #24
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
 800bf56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bf5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	2300      	movs	r3, #0
 800bf70:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf82:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d018      	beq.n	800bfd4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800bfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d10a      	bne.n	800bfbe <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bfb6:	f043 0304 	orr.w	r3, r3, #4
 800bfba:	6013      	str	r3, [r2, #0]
 800bfbc:	e014      	b.n	800bfe8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bfcc:	f023 0304 	bic.w	r3, r3, #4
 800bfd0:	6013      	str	r3, [r2, #0]
 800bfd2:	e009      	b.n	800bfe8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bfe2:	f023 0304 	bic.w	r3, r3, #4
 800bfe6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bfe8:	2110      	movs	r1, #16
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f7ff fe5e 	bl	800bcac <USB_FlushTxFifo>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d001      	beq.n	800bffa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7ff fe8a 	bl	800bd14 <USB_FlushRxFifo>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d001      	beq.n	800c00a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c00a:	2300      	movs	r3, #0
 800c00c:	613b      	str	r3, [r7, #16]
 800c00e:	e015      	b.n	800c03c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	015a      	lsls	r2, r3, #5
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	4413      	add	r3, r2
 800c018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c01c:	461a      	mov	r2, r3
 800c01e:	f04f 33ff 	mov.w	r3, #4294967295
 800c022:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	015a      	lsls	r2, r3, #5
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	4413      	add	r3, r2
 800c02c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c030:	461a      	mov	r2, r3
 800c032:	2300      	movs	r3, #0
 800c034:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	3301      	adds	r3, #1
 800c03a:	613b      	str	r3, [r7, #16]
 800c03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03e:	693a      	ldr	r2, [r7, #16]
 800c040:	429a      	cmp	r2, r3
 800c042:	d3e5      	bcc.n	800c010 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f04f 32ff 	mov.w	r2, #4294967295
 800c050:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00b      	beq.n	800c076 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c064:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a13      	ldr	r2, [pc, #76]	; (800c0b8 <USB_HostInit+0x16c>)
 800c06a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4a13      	ldr	r2, [pc, #76]	; (800c0bc <USB_HostInit+0x170>)
 800c070:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c074:	e009      	b.n	800c08a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2280      	movs	r2, #128	; 0x80
 800c07a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a10      	ldr	r2, [pc, #64]	; (800c0c0 <USB_HostInit+0x174>)
 800c080:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4a0f      	ldr	r2, [pc, #60]	; (800c0c4 <USB_HostInit+0x178>)
 800c086:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d105      	bne.n	800c09c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	699b      	ldr	r3, [r3, #24]
 800c094:	f043 0210 	orr.w	r2, r3, #16
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	699a      	ldr	r2, [r3, #24]
 800c0a0:	4b09      	ldr	r3, [pc, #36]	; (800c0c8 <USB_HostInit+0x17c>)
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	687a      	ldr	r2, [r7, #4]
 800c0a6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c0a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3718      	adds	r7, #24
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c0b4:	b004      	add	sp, #16
 800c0b6:	4770      	bx	lr
 800c0b8:	01000200 	.word	0x01000200
 800c0bc:	00e00300 	.word	0x00e00300
 800c0c0:	00600080 	.word	0x00600080
 800c0c4:	004000e0 	.word	0x004000e0
 800c0c8:	a3200008 	.word	0xa3200008

0800c0cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b085      	sub	sp, #20
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	68fa      	ldr	r2, [r7, #12]
 800c0e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c0ea:	f023 0303 	bic.w	r3, r3, #3
 800c0ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	78fb      	ldrb	r3, [r7, #3]
 800c0fa:	f003 0303 	and.w	r3, r3, #3
 800c0fe:	68f9      	ldr	r1, [r7, #12]
 800c100:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c104:	4313      	orrs	r3, r2
 800c106:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c108:	78fb      	ldrb	r3, [r7, #3]
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d107      	bne.n	800c11e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c114:	461a      	mov	r2, r3
 800c116:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c11a:	6053      	str	r3, [r2, #4]
 800c11c:	e009      	b.n	800c132 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c11e:	78fb      	ldrb	r3, [r7, #3]
 800c120:	2b02      	cmp	r3, #2
 800c122:	d106      	bne.n	800c132 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c12a:	461a      	mov	r2, r3
 800c12c:	f241 7370 	movw	r3, #6000	; 0x1770
 800c130:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3714      	adds	r7, #20
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c14c:	2300      	movs	r3, #0
 800c14e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c160:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	68fa      	ldr	r2, [r7, #12]
 800c166:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c16a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c16e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c170:	2064      	movs	r0, #100	; 0x64
 800c172:	f7f9 fbad 	bl	80058d0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c17e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c182:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c184:	200a      	movs	r0, #10
 800c186:	f7f9 fba3 	bl	80058d0 <HAL_Delay>

  return HAL_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c194:	b480      	push	{r7}
 800c196:	b085      	sub	sp, #20
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	460b      	mov	r3, r1
 800c19e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c1b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d109      	bne.n	800c1d8 <USB_DriveVbus+0x44>
 800c1c4:	78fb      	ldrb	r3, [r7, #3]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d106      	bne.n	800c1d8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c1d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c1d6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c1de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1e2:	d109      	bne.n	800c1f8 <USB_DriveVbus+0x64>
 800c1e4:	78fb      	ldrb	r3, [r7, #3]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d106      	bne.n	800c1f8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c1f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1f6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3714      	adds	r7, #20
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c206:	b480      	push	{r7}
 800c208:	b085      	sub	sp, #20
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c212:	2300      	movs	r3, #0
 800c214:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	0c5b      	lsrs	r3, r3, #17
 800c224:	f003 0303 	and.w	r3, r3, #3
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3714      	adds	r7, #20
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c234:	b480      	push	{r7}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	b29b      	uxth	r3, r3
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3714      	adds	r7, #20
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
	...

0800c258 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b088      	sub	sp, #32
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	4608      	mov	r0, r1
 800c262:	4611      	mov	r1, r2
 800c264:	461a      	mov	r2, r3
 800c266:	4603      	mov	r3, r0
 800c268:	70fb      	strb	r3, [r7, #3]
 800c26a:	460b      	mov	r3, r1
 800c26c:	70bb      	strb	r3, [r7, #2]
 800c26e:	4613      	mov	r3, r2
 800c270:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c27a:	78fb      	ldrb	r3, [r7, #3]
 800c27c:	015a      	lsls	r2, r3, #5
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	4413      	add	r3, r2
 800c282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c286:	461a      	mov	r2, r3
 800c288:	f04f 33ff 	mov.w	r3, #4294967295
 800c28c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c28e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c292:	2b03      	cmp	r3, #3
 800c294:	d87e      	bhi.n	800c394 <USB_HC_Init+0x13c>
 800c296:	a201      	add	r2, pc, #4	; (adr r2, 800c29c <USB_HC_Init+0x44>)
 800c298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29c:	0800c2ad 	.word	0x0800c2ad
 800c2a0:	0800c357 	.word	0x0800c357
 800c2a4:	0800c2ad 	.word	0x0800c2ad
 800c2a8:	0800c319 	.word	0x0800c319
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c2ac:	78fb      	ldrb	r3, [r7, #3]
 800c2ae:	015a      	lsls	r2, r3, #5
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	f240 439d 	movw	r3, #1181	; 0x49d
 800c2be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c2c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	da10      	bge.n	800c2ea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c2c8:	78fb      	ldrb	r3, [r7, #3]
 800c2ca:	015a      	lsls	r2, r3, #5
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	78fa      	ldrb	r2, [r7, #3]
 800c2d8:	0151      	lsls	r1, r2, #5
 800c2da:	693a      	ldr	r2, [r7, #16]
 800c2dc:	440a      	add	r2, r1
 800c2de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2e6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c2e8:	e057      	b.n	800c39a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d051      	beq.n	800c39a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c2f6:	78fb      	ldrb	r3, [r7, #3]
 800c2f8:	015a      	lsls	r2, r3, #5
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	78fa      	ldrb	r2, [r7, #3]
 800c306:	0151      	lsls	r1, r2, #5
 800c308:	693a      	ldr	r2, [r7, #16]
 800c30a:	440a      	add	r2, r1
 800c30c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c310:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c314:	60d3      	str	r3, [r2, #12]
      break;
 800c316:	e040      	b.n	800c39a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c318:	78fb      	ldrb	r3, [r7, #3]
 800c31a:	015a      	lsls	r2, r3, #5
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	4413      	add	r3, r2
 800c320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c324:	461a      	mov	r2, r3
 800c326:	f240 639d 	movw	r3, #1693	; 0x69d
 800c32a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c32c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c330:	2b00      	cmp	r3, #0
 800c332:	da34      	bge.n	800c39e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c334:	78fb      	ldrb	r3, [r7, #3]
 800c336:	015a      	lsls	r2, r3, #5
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	4413      	add	r3, r2
 800c33c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	78fa      	ldrb	r2, [r7, #3]
 800c344:	0151      	lsls	r1, r2, #5
 800c346:	693a      	ldr	r2, [r7, #16]
 800c348:	440a      	add	r2, r1
 800c34a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c34e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c352:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c354:	e023      	b.n	800c39e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c356:	78fb      	ldrb	r3, [r7, #3]
 800c358:	015a      	lsls	r2, r3, #5
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	4413      	add	r3, r2
 800c35e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c362:	461a      	mov	r2, r3
 800c364:	f240 2325 	movw	r3, #549	; 0x225
 800c368:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c36a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	da17      	bge.n	800c3a2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c372:	78fb      	ldrb	r3, [r7, #3]
 800c374:	015a      	lsls	r2, r3, #5
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	4413      	add	r3, r2
 800c37a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	78fa      	ldrb	r2, [r7, #3]
 800c382:	0151      	lsls	r1, r2, #5
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	440a      	add	r2, r1
 800c388:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c38c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c390:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c392:	e006      	b.n	800c3a2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	77fb      	strb	r3, [r7, #31]
      break;
 800c398:	e004      	b.n	800c3a4 <USB_HC_Init+0x14c>
      break;
 800c39a:	bf00      	nop
 800c39c:	e002      	b.n	800c3a4 <USB_HC_Init+0x14c>
      break;
 800c39e:	bf00      	nop
 800c3a0:	e000      	b.n	800c3a4 <USB_HC_Init+0x14c>
      break;
 800c3a2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c3a4:	78fb      	ldrb	r3, [r7, #3]
 800c3a6:	015a      	lsls	r2, r3, #5
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	78fa      	ldrb	r2, [r7, #3]
 800c3b4:	0151      	lsls	r1, r2, #5
 800c3b6:	693a      	ldr	r2, [r7, #16]
 800c3b8:	440a      	add	r2, r1
 800c3ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c3be:	f043 0302 	orr.w	r3, r3, #2
 800c3c2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c3ca:	699a      	ldr	r2, [r3, #24]
 800c3cc:	78fb      	ldrb	r3, [r7, #3]
 800c3ce:	f003 030f 	and.w	r3, r3, #15
 800c3d2:	2101      	movs	r1, #1
 800c3d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c3d8:	6939      	ldr	r1, [r7, #16]
 800c3da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	699b      	ldr	r3, [r3, #24]
 800c3e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c3ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	da03      	bge.n	800c3fe <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c3f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3fa:	61bb      	str	r3, [r7, #24]
 800c3fc:	e001      	b.n	800c402 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800c3fe:	2300      	movs	r3, #0
 800c400:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f7ff feff 	bl	800c206 <USB_GetHostSpeed>
 800c408:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c40a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c40e:	2b02      	cmp	r3, #2
 800c410:	d106      	bne.n	800c420 <USB_HC_Init+0x1c8>
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2b02      	cmp	r3, #2
 800c416:	d003      	beq.n	800c420 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c41c:	617b      	str	r3, [r7, #20]
 800c41e:	e001      	b.n	800c424 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c420:	2300      	movs	r3, #0
 800c422:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c424:	787b      	ldrb	r3, [r7, #1]
 800c426:	059b      	lsls	r3, r3, #22
 800c428:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c42c:	78bb      	ldrb	r3, [r7, #2]
 800c42e:	02db      	lsls	r3, r3, #11
 800c430:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c434:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c436:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c43a:	049b      	lsls	r3, r3, #18
 800c43c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c440:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c442:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c444:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c448:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c44e:	78fb      	ldrb	r3, [r7, #3]
 800c450:	0159      	lsls	r1, r3, #5
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	440b      	add	r3, r1
 800c456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c45a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c460:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c462:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c466:	2b03      	cmp	r3, #3
 800c468:	d003      	beq.n	800c472 <USB_HC_Init+0x21a>
 800c46a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d10f      	bne.n	800c492 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c472:	78fb      	ldrb	r3, [r7, #3]
 800c474:	015a      	lsls	r2, r3, #5
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	4413      	add	r3, r2
 800c47a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	78fa      	ldrb	r2, [r7, #3]
 800c482:	0151      	lsls	r1, r2, #5
 800c484:	693a      	ldr	r2, [r7, #16]
 800c486:	440a      	add	r2, r1
 800c488:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c48c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c490:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c492:	7ffb      	ldrb	r3, [r7, #31]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3720      	adds	r7, #32
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b08c      	sub	sp, #48	; 0x30
 800c4a0:	af02      	add	r7, sp, #8
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	785b      	ldrb	r3, [r3, #1]
 800c4b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c4b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4b8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d02d      	beq.n	800c522 <USB_HC_StartXfer+0x86>
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	791b      	ldrb	r3, [r3, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d129      	bne.n	800c522 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c4ce:	79fb      	ldrb	r3, [r7, #7]
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d117      	bne.n	800c504 <USB_HC_StartXfer+0x68>
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	79db      	ldrb	r3, [r3, #7]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d003      	beq.n	800c4e4 <USB_HC_StartXfer+0x48>
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	79db      	ldrb	r3, [r3, #7]
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d10f      	bne.n	800c504 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	015a      	lsls	r2, r3, #5
 800c4e8:	6a3b      	ldr	r3, [r7, #32]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	69fa      	ldr	r2, [r7, #28]
 800c4f4:	0151      	lsls	r1, r2, #5
 800c4f6:	6a3a      	ldr	r2, [r7, #32]
 800c4f8:	440a      	add	r2, r1
 800c4fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c4fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c502:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c504:	79fb      	ldrb	r3, [r7, #7]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d10b      	bne.n	800c522 <USB_HC_StartXfer+0x86>
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	795b      	ldrb	r3, [r3, #5]
 800c50e:	2b01      	cmp	r3, #1
 800c510:	d107      	bne.n	800c522 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	785b      	ldrb	r3, [r3, #1]
 800c516:	4619      	mov	r1, r3
 800c518:	68f8      	ldr	r0, [r7, #12]
 800c51a:	f000 fa0f 	bl	800c93c <USB_DoPing>
      return HAL_OK;
 800c51e:	2300      	movs	r3, #0
 800c520:	e0f8      	b.n	800c714 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d018      	beq.n	800c55c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	695b      	ldr	r3, [r3, #20]
 800c52e:	68ba      	ldr	r2, [r7, #8]
 800c530:	8912      	ldrh	r2, [r2, #8]
 800c532:	4413      	add	r3, r2
 800c534:	3b01      	subs	r3, #1
 800c536:	68ba      	ldr	r2, [r7, #8]
 800c538:	8912      	ldrh	r2, [r2, #8]
 800c53a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c53e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c540:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c542:	8b7b      	ldrh	r3, [r7, #26]
 800c544:	429a      	cmp	r2, r3
 800c546:	d90b      	bls.n	800c560 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c548:	8b7b      	ldrh	r3, [r7, #26]
 800c54a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c54c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	8912      	ldrh	r2, [r2, #8]
 800c552:	fb03 f202 	mul.w	r2, r3, r2
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	611a      	str	r2, [r3, #16]
 800c55a:	e001      	b.n	800c560 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c55c:	2301      	movs	r3, #1
 800c55e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	78db      	ldrb	r3, [r3, #3]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d007      	beq.n	800c578 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c568:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c56a:	68ba      	ldr	r2, [r7, #8]
 800c56c:	8912      	ldrh	r2, [r2, #8]
 800c56e:	fb03 f202 	mul.w	r2, r3, r2
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	611a      	str	r2, [r3, #16]
 800c576:	e003      	b.n	800c580 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	695a      	ldr	r2, [r3, #20]
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	691b      	ldr	r3, [r3, #16]
 800c584:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c588:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c58a:	04d9      	lsls	r1, r3, #19
 800c58c:	4b63      	ldr	r3, [pc, #396]	; (800c71c <USB_HC_StartXfer+0x280>)
 800c58e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c590:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	7a9b      	ldrb	r3, [r3, #10]
 800c596:	075b      	lsls	r3, r3, #29
 800c598:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c59c:	69f9      	ldr	r1, [r7, #28]
 800c59e:	0148      	lsls	r0, r1, #5
 800c5a0:	6a39      	ldr	r1, [r7, #32]
 800c5a2:	4401      	add	r1, r0
 800c5a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c5a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c5aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c5ac:	79fb      	ldrb	r3, [r7, #7]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d009      	beq.n	800c5c6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	68d9      	ldr	r1, [r3, #12]
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	015a      	lsls	r2, r3, #5
 800c5ba:	6a3b      	ldr	r3, [r7, #32]
 800c5bc:	4413      	add	r3, r2
 800c5be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5c2:	460a      	mov	r2, r1
 800c5c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5cc:	689b      	ldr	r3, [r3, #8]
 800c5ce:	f003 0301 	and.w	r3, r3, #1
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	bf0c      	ite	eq
 800c5d6:	2301      	moveq	r3, #1
 800c5d8:	2300      	movne	r3, #0
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	015a      	lsls	r2, r3, #5
 800c5e2:	6a3b      	ldr	r3, [r7, #32]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	69fa      	ldr	r2, [r7, #28]
 800c5ee:	0151      	lsls	r1, r2, #5
 800c5f0:	6a3a      	ldr	r2, [r7, #32]
 800c5f2:	440a      	add	r2, r1
 800c5f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c5fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c5fe:	69fb      	ldr	r3, [r7, #28]
 800c600:	015a      	lsls	r2, r3, #5
 800c602:	6a3b      	ldr	r3, [r7, #32]
 800c604:	4413      	add	r3, r2
 800c606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	7e7b      	ldrb	r3, [r7, #25]
 800c60e:	075b      	lsls	r3, r3, #29
 800c610:	69f9      	ldr	r1, [r7, #28]
 800c612:	0148      	lsls	r0, r1, #5
 800c614:	6a39      	ldr	r1, [r7, #32]
 800c616:	4401      	add	r1, r0
 800c618:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c61c:	4313      	orrs	r3, r2
 800c61e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	015a      	lsls	r2, r3, #5
 800c624:	6a3b      	ldr	r3, [r7, #32]
 800c626:	4413      	add	r3, r2
 800c628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c636:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	78db      	ldrb	r3, [r3, #3]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d004      	beq.n	800c64a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c646:	613b      	str	r3, [r7, #16]
 800c648:	e003      	b.n	800c652 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c650:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c658:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	015a      	lsls	r2, r3, #5
 800c65e:	6a3b      	ldr	r3, [r7, #32]
 800c660:	4413      	add	r3, r2
 800c662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c666:	461a      	mov	r2, r3
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c66c:	79fb      	ldrb	r3, [r7, #7]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d001      	beq.n	800c676 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c672:	2300      	movs	r3, #0
 800c674:	e04e      	b.n	800c714 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	78db      	ldrb	r3, [r3, #3]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d149      	bne.n	800c712 <USB_HC_StartXfer+0x276>
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	695b      	ldr	r3, [r3, #20]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d045      	beq.n	800c712 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	79db      	ldrb	r3, [r3, #7]
 800c68a:	2b03      	cmp	r3, #3
 800c68c:	d830      	bhi.n	800c6f0 <USB_HC_StartXfer+0x254>
 800c68e:	a201      	add	r2, pc, #4	; (adr r2, 800c694 <USB_HC_StartXfer+0x1f8>)
 800c690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c694:	0800c6a5 	.word	0x0800c6a5
 800c698:	0800c6c9 	.word	0x0800c6c9
 800c69c:	0800c6a5 	.word	0x0800c6a5
 800c6a0:	0800c6c9 	.word	0x0800c6c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	695b      	ldr	r3, [r3, #20]
 800c6a8:	3303      	adds	r3, #3
 800c6aa:	089b      	lsrs	r3, r3, #2
 800c6ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c6ae:	8afa      	ldrh	r2, [r7, #22]
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d91c      	bls.n	800c6f4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	699b      	ldr	r3, [r3, #24]
 800c6be:	f043 0220 	orr.w	r2, r3, #32
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	619a      	str	r2, [r3, #24]
        }
        break;
 800c6c6:	e015      	b.n	800c6f4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	695b      	ldr	r3, [r3, #20]
 800c6cc:	3303      	adds	r3, #3
 800c6ce:	089b      	lsrs	r3, r3, #2
 800c6d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c6d2:	8afa      	ldrh	r2, [r7, #22]
 800c6d4:	6a3b      	ldr	r3, [r7, #32]
 800c6d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d90a      	bls.n	800c6f8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	699b      	ldr	r3, [r3, #24]
 800c6e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	619a      	str	r2, [r3, #24]
        }
        break;
 800c6ee:	e003      	b.n	800c6f8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c6f0:	bf00      	nop
 800c6f2:	e002      	b.n	800c6fa <USB_HC_StartXfer+0x25e>
        break;
 800c6f4:	bf00      	nop
 800c6f6:	e000      	b.n	800c6fa <USB_HC_StartXfer+0x25e>
        break;
 800c6f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	68d9      	ldr	r1, [r3, #12]
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	785a      	ldrb	r2, [r3, #1]
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	695b      	ldr	r3, [r3, #20]
 800c706:	b29b      	uxth	r3, r3
 800c708:	2000      	movs	r0, #0
 800c70a:	9000      	str	r0, [sp, #0]
 800c70c:	68f8      	ldr	r0, [r7, #12]
 800c70e:	f7ff fb31 	bl	800bd74 <USB_WritePacket>
  }

  return HAL_OK;
 800c712:	2300      	movs	r3, #0
}
 800c714:	4618      	mov	r0, r3
 800c716:	3728      	adds	r7, #40	; 0x28
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	1ff80000 	.word	0x1ff80000

0800c720 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c732:	695b      	ldr	r3, [r3, #20]
 800c734:	b29b      	uxth	r3, r3
}
 800c736:	4618      	mov	r0, r3
 800c738:	3714      	adds	r7, #20
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr

0800c742 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c742:	b480      	push	{r7}
 800c744:	b089      	sub	sp, #36	; 0x24
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	460b      	mov	r3, r1
 800c74c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800c752:	78fb      	ldrb	r3, [r7, #3]
 800c754:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800c756:	2300      	movs	r3, #0
 800c758:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	015a      	lsls	r2, r3, #5
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	4413      	add	r3, r2
 800c762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	0c9b      	lsrs	r3, r3, #18
 800c76a:	f003 0303 	and.w	r3, r3, #3
 800c76e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	015a      	lsls	r2, r3, #5
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	4413      	add	r3, r2
 800c778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	0fdb      	lsrs	r3, r3, #31
 800c780:	f003 0301 	and.w	r3, r3, #1
 800c784:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	f003 0320 	and.w	r3, r3, #32
 800c78e:	2b20      	cmp	r3, #32
 800c790:	d104      	bne.n	800c79c <USB_HC_Halt+0x5a>
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d101      	bne.n	800c79c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c798:	2300      	movs	r3, #0
 800c79a:	e0c8      	b.n	800c92e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d002      	beq.n	800c7a8 <USB_HC_Halt+0x66>
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d163      	bne.n	800c870 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c7a8:	69bb      	ldr	r3, [r7, #24]
 800c7aa:	015a      	lsls	r2, r3, #5
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	69ba      	ldr	r2, [r7, #24]
 800c7b8:	0151      	lsls	r1, r2, #5
 800c7ba:	69fa      	ldr	r2, [r7, #28]
 800c7bc:	440a      	add	r2, r1
 800c7be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7c6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	f003 0320 	and.w	r3, r3, #32
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	f040 80ab 	bne.w	800c92c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d133      	bne.n	800c84a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	015a      	lsls	r2, r3, #5
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	69ba      	ldr	r2, [r7, #24]
 800c7f2:	0151      	lsls	r1, r2, #5
 800c7f4:	69fa      	ldr	r2, [r7, #28]
 800c7f6:	440a      	add	r2, r1
 800c7f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c800:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	015a      	lsls	r2, r3, #5
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	4413      	add	r3, r2
 800c80a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	69ba      	ldr	r2, [r7, #24]
 800c812:	0151      	lsls	r1, r2, #5
 800c814:	69fa      	ldr	r2, [r7, #28]
 800c816:	440a      	add	r2, r1
 800c818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c81c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c820:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3301      	adds	r3, #1
 800c826:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c82e:	d81d      	bhi.n	800c86c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	015a      	lsls	r2, r3, #5
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	4413      	add	r3, r2
 800c838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c846:	d0ec      	beq.n	800c822 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c848:	e070      	b.n	800c92c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	015a      	lsls	r2, r3, #5
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	4413      	add	r3, r2
 800c852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	69ba      	ldr	r2, [r7, #24]
 800c85a:	0151      	lsls	r1, r2, #5
 800c85c:	69fa      	ldr	r2, [r7, #28]
 800c85e:	440a      	add	r2, r1
 800c860:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c868:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c86a:	e05f      	b.n	800c92c <USB_HC_Halt+0x1ea>
            break;
 800c86c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c86e:	e05d      	b.n	800c92c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	015a      	lsls	r2, r3, #5
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	4413      	add	r3, r2
 800c878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	69ba      	ldr	r2, [r7, #24]
 800c880:	0151      	lsls	r1, r2, #5
 800c882:	69fa      	ldr	r2, [r7, #28]
 800c884:	440a      	add	r2, r1
 800c886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c88a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c88e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c896:	691b      	ldr	r3, [r3, #16]
 800c898:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d133      	bne.n	800c908 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	015a      	lsls	r2, r3, #5
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	4413      	add	r3, r2
 800c8a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	69ba      	ldr	r2, [r7, #24]
 800c8b0:	0151      	lsls	r1, r2, #5
 800c8b2:	69fa      	ldr	r2, [r7, #28]
 800c8b4:	440a      	add	r2, r1
 800c8b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c8c0:	69bb      	ldr	r3, [r7, #24]
 800c8c2:	015a      	lsls	r2, r3, #5
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	69ba      	ldr	r2, [r7, #24]
 800c8d0:	0151      	lsls	r1, r2, #5
 800c8d2:	69fa      	ldr	r2, [r7, #28]
 800c8d4:	440a      	add	r2, r1
 800c8d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c8de:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8ec:	d81d      	bhi.n	800c92a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	015a      	lsls	r2, r3, #5
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	4413      	add	r3, r2
 800c8f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c904:	d0ec      	beq.n	800c8e0 <USB_HC_Halt+0x19e>
 800c906:	e011      	b.n	800c92c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	015a      	lsls	r2, r3, #5
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	4413      	add	r3, r2
 800c910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	69ba      	ldr	r2, [r7, #24]
 800c918:	0151      	lsls	r1, r2, #5
 800c91a:	69fa      	ldr	r2, [r7, #28]
 800c91c:	440a      	add	r2, r1
 800c91e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c922:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c926:	6013      	str	r3, [r2, #0]
 800c928:	e000      	b.n	800c92c <USB_HC_Halt+0x1ea>
          break;
 800c92a:	bf00      	nop
    }
  }

  return HAL_OK;
 800c92c:	2300      	movs	r3, #0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3724      	adds	r7, #36	; 0x24
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
	...

0800c93c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b087      	sub	sp, #28
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	460b      	mov	r3, r1
 800c946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c94c:	78fb      	ldrb	r3, [r7, #3]
 800c94e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c950:	2301      	movs	r3, #1
 800c952:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	04da      	lsls	r2, r3, #19
 800c958:	4b15      	ldr	r3, [pc, #84]	; (800c9b0 <USB_DoPing+0x74>)
 800c95a:	4013      	ands	r3, r2
 800c95c:	693a      	ldr	r2, [r7, #16]
 800c95e:	0151      	lsls	r1, r2, #5
 800c960:	697a      	ldr	r2, [r7, #20]
 800c962:	440a      	add	r2, r1
 800c964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c968:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c96c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	015a      	lsls	r2, r3, #5
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	4413      	add	r3, r2
 800c976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c984:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c98c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	015a      	lsls	r2, r3, #5
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	4413      	add	r3, r2
 800c996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c99a:	461a      	mov	r2, r3
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c9a0:	2300      	movs	r3, #0
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	371c      	adds	r7, #28
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr
 800c9ae:	bf00      	nop
 800c9b0:	1ff80000 	.word	0x1ff80000

0800c9b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b088      	sub	sp, #32
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7ff f911 	bl	800bbf0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c9ce:	2110      	movs	r1, #16
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f7ff f96b 	bl	800bcac <USB_FlushTxFifo>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d001      	beq.n	800c9e0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7ff f997 	bl	800bd14 <USB_FlushRxFifo>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d001      	beq.n	800c9f0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	61bb      	str	r3, [r7, #24]
 800c9f4:	e01f      	b.n	800ca36 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	015a      	lsls	r2, r3, #5
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca14:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ca1c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	015a      	lsls	r2, r3, #5
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	4413      	add	r3, r2
 800ca26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	3301      	adds	r3, #1
 800ca34:	61bb      	str	r3, [r7, #24]
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	2b0f      	cmp	r3, #15
 800ca3a:	d9dc      	bls.n	800c9f6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	61bb      	str	r3, [r7, #24]
 800ca40:	e034      	b.n	800caac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800ca42:	69bb      	ldr	r3, [r7, #24]
 800ca44:	015a      	lsls	r2, r3, #5
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	4413      	add	r3, r2
 800ca4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca58:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ca68:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	015a      	lsls	r2, r3, #5
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	4413      	add	r3, r2
 800ca72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca76:	461a      	mov	r2, r3
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca88:	d80c      	bhi.n	800caa4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	015a      	lsls	r2, r3, #5
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	4413      	add	r3, r2
 800ca92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800caa0:	d0ec      	beq.n	800ca7c <USB_StopHost+0xc8>
 800caa2:	e000      	b.n	800caa6 <USB_StopHost+0xf2>
        break;
 800caa4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	3301      	adds	r3, #1
 800caaa:	61bb      	str	r3, [r7, #24]
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	2b0f      	cmp	r3, #15
 800cab0:	d9c7      	bls.n	800ca42 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cab8:	461a      	mov	r2, r3
 800caba:	f04f 33ff 	mov.w	r3, #4294967295
 800cabe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f04f 32ff 	mov.w	r2, #4294967295
 800cac6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f7ff f880 	bl	800bbce <USB_EnableGlobalInt>

  return ret;
 800cace:	7ffb      	ldrb	r3, [r7, #31]
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3720      	adds	r7, #32
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800cad8:	b590      	push	{r4, r7, lr}
 800cada:	b089      	sub	sp, #36	; 0x24
 800cadc:	af04      	add	r7, sp, #16
 800cade:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800cae0:	2301      	movs	r3, #1
 800cae2:	2202      	movs	r2, #2
 800cae4:	2102      	movs	r1, #2
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fc66 	bl	800d3b8 <USBH_FindInterface>
 800caec:	4603      	mov	r3, r0
 800caee:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800caf0:	7bfb      	ldrb	r3, [r7, #15]
 800caf2:	2bff      	cmp	r3, #255	; 0xff
 800caf4:	d002      	beq.n	800cafc <USBH_CDC_InterfaceInit+0x24>
 800caf6:	7bfb      	ldrb	r3, [r7, #15]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d901      	bls.n	800cb00 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cafc:	2302      	movs	r3, #2
 800cafe:	e13d      	b.n	800cd7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
 800cb02:	4619      	mov	r1, r3
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 fc3b 	bl	800d380 <USBH_SelectInterface>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800cb0e:	7bbb      	ldrb	r3, [r7, #14]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d001      	beq.n	800cb18 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800cb14:	2302      	movs	r3, #2
 800cb16:	e131      	b.n	800cd7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800cb1e:	2050      	movs	r0, #80	; 0x50
 800cb20:	f002 fb3c 	bl	800f19c <malloc>
 800cb24:	4603      	mov	r3, r0
 800cb26:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb2e:	69db      	ldr	r3, [r3, #28]
 800cb30:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d101      	bne.n	800cb3c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800cb38:	2302      	movs	r3, #2
 800cb3a:	e11f      	b.n	800cd7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800cb3c:	2250      	movs	r2, #80	; 0x50
 800cb3e:	2100      	movs	r1, #0
 800cb40:	68b8      	ldr	r0, [r7, #8]
 800cb42:	f002 fb49 	bl	800f1d8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800cb46:	7bfb      	ldrb	r3, [r7, #15]
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	211a      	movs	r1, #26
 800cb4c:	fb01 f303 	mul.w	r3, r1, r3
 800cb50:	4413      	add	r3, r2
 800cb52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	b25b      	sxtb	r3, r3
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	da15      	bge.n	800cb8a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cb5e:	7bfb      	ldrb	r3, [r7, #15]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	211a      	movs	r1, #26
 800cb64:	fb01 f303 	mul.w	r3, r1, r3
 800cb68:	4413      	add	r3, r2
 800cb6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cb6e:	781a      	ldrb	r2, [r3, #0]
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cb74:	7bfb      	ldrb	r3, [r7, #15]
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	211a      	movs	r1, #26
 800cb7a:	fb01 f303 	mul.w	r3, r1, r3
 800cb7e:	4413      	add	r3, r2
 800cb80:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cb84:	881a      	ldrh	r2, [r3, #0]
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	785b      	ldrb	r3, [r3, #1]
 800cb8e:	4619      	mov	r1, r3
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f001 ff2c 	bl	800e9ee <USBH_AllocPipe>
 800cb96:	4603      	mov	r3, r0
 800cb98:	461a      	mov	r2, r3
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	7819      	ldrb	r1, [r3, #0]
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	7858      	ldrb	r0, [r3, #1]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cbb2:	68ba      	ldr	r2, [r7, #8]
 800cbb4:	8952      	ldrh	r2, [r2, #10]
 800cbb6:	9202      	str	r2, [sp, #8]
 800cbb8:	2203      	movs	r2, #3
 800cbba:	9201      	str	r2, [sp, #4]
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	4623      	mov	r3, r4
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f001 fee4 	bl	800e990 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	4619      	mov	r1, r3
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f002 f9f3 	bl	800efbc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	2200      	movs	r2, #0
 800cbda:	210a      	movs	r1, #10
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f000 fbeb 	bl	800d3b8 <USBH_FindInterface>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800cbe6:	7bfb      	ldrb	r3, [r7, #15]
 800cbe8:	2bff      	cmp	r3, #255	; 0xff
 800cbea:	d002      	beq.n	800cbf2 <USBH_CDC_InterfaceInit+0x11a>
 800cbec:	7bfb      	ldrb	r3, [r7, #15]
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d901      	bls.n	800cbf6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cbf2:	2302      	movs	r3, #2
 800cbf4:	e0c2      	b.n	800cd7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800cbf6:	7bfb      	ldrb	r3, [r7, #15]
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	211a      	movs	r1, #26
 800cbfc:	fb01 f303 	mul.w	r3, r1, r3
 800cc00:	4413      	add	r3, r2
 800cc02:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	b25b      	sxtb	r3, r3
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	da16      	bge.n	800cc3c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cc0e:	7bfb      	ldrb	r3, [r7, #15]
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	211a      	movs	r1, #26
 800cc14:	fb01 f303 	mul.w	r3, r1, r3
 800cc18:	4413      	add	r3, r2
 800cc1a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cc1e:	781a      	ldrb	r2, [r3, #0]
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cc24:	7bfb      	ldrb	r3, [r7, #15]
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	211a      	movs	r1, #26
 800cc2a:	fb01 f303 	mul.w	r3, r1, r3
 800cc2e:	4413      	add	r3, r2
 800cc30:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cc34:	881a      	ldrh	r2, [r3, #0]
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	835a      	strh	r2, [r3, #26]
 800cc3a:	e015      	b.n	800cc68 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cc3c:	7bfb      	ldrb	r3, [r7, #15]
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	211a      	movs	r1, #26
 800cc42:	fb01 f303 	mul.w	r3, r1, r3
 800cc46:	4413      	add	r3, r2
 800cc48:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cc4c:	781a      	ldrb	r2, [r3, #0]
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cc52:	7bfb      	ldrb	r3, [r7, #15]
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	211a      	movs	r1, #26
 800cc58:	fb01 f303 	mul.w	r3, r1, r3
 800cc5c:	4413      	add	r3, r2
 800cc5e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cc62:	881a      	ldrh	r2, [r3, #0]
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800cc68:	7bfb      	ldrb	r3, [r7, #15]
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	211a      	movs	r1, #26
 800cc6e:	fb01 f303 	mul.w	r3, r1, r3
 800cc72:	4413      	add	r3, r2
 800cc74:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	b25b      	sxtb	r3, r3
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	da16      	bge.n	800ccae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800cc80:	7bfb      	ldrb	r3, [r7, #15]
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	211a      	movs	r1, #26
 800cc86:	fb01 f303 	mul.w	r3, r1, r3
 800cc8a:	4413      	add	r3, r2
 800cc8c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cc90:	781a      	ldrb	r2, [r3, #0]
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800cc96:	7bfb      	ldrb	r3, [r7, #15]
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	211a      	movs	r1, #26
 800cc9c:	fb01 f303 	mul.w	r3, r1, r3
 800cca0:	4413      	add	r3, r2
 800cca2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800cca6:	881a      	ldrh	r2, [r3, #0]
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	835a      	strh	r2, [r3, #26]
 800ccac:	e015      	b.n	800ccda <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ccae:	7bfb      	ldrb	r3, [r7, #15]
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	211a      	movs	r1, #26
 800ccb4:	fb01 f303 	mul.w	r3, r1, r3
 800ccb8:	4413      	add	r3, r2
 800ccba:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ccbe:	781a      	ldrb	r2, [r3, #0]
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ccc4:	7bfb      	ldrb	r3, [r7, #15]
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	211a      	movs	r1, #26
 800ccca:	fb01 f303 	mul.w	r3, r1, r3
 800ccce:	4413      	add	r3, r2
 800ccd0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ccd4:	881a      	ldrh	r2, [r3, #0]
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	7b9b      	ldrb	r3, [r3, #14]
 800ccde:	4619      	mov	r1, r3
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f001 fe84 	bl	800e9ee <USBH_AllocPipe>
 800cce6:	4603      	mov	r3, r0
 800cce8:	461a      	mov	r2, r3
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	7bdb      	ldrb	r3, [r3, #15]
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f001 fe7a 	bl	800e9ee <USBH_AllocPipe>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	7b59      	ldrb	r1, [r3, #13]
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	7b98      	ldrb	r0, [r3, #14]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cd16:	68ba      	ldr	r2, [r7, #8]
 800cd18:	8b12      	ldrh	r2, [r2, #24]
 800cd1a:	9202      	str	r2, [sp, #8]
 800cd1c:	2202      	movs	r2, #2
 800cd1e:	9201      	str	r2, [sp, #4]
 800cd20:	9300      	str	r3, [sp, #0]
 800cd22:	4623      	mov	r3, r4
 800cd24:	4602      	mov	r2, r0
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f001 fe32 	bl	800e990 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	7b19      	ldrb	r1, [r3, #12]
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	7bd8      	ldrb	r0, [r3, #15]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cd40:	68ba      	ldr	r2, [r7, #8]
 800cd42:	8b52      	ldrh	r2, [r2, #26]
 800cd44:	9202      	str	r2, [sp, #8]
 800cd46:	2202      	movs	r2, #2
 800cd48:	9201      	str	r2, [sp, #4]
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	4623      	mov	r3, r4
 800cd4e:	4602      	mov	r2, r0
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f001 fe1d 	bl	800e990 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	7b5b      	ldrb	r3, [r3, #13]
 800cd62:	2200      	movs	r2, #0
 800cd64:	4619      	mov	r1, r3
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f002 f928 	bl	800efbc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	7b1b      	ldrb	r3, [r3, #12]
 800cd70:	2200      	movs	r2, #0
 800cd72:	4619      	mov	r1, r3
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f002 f921 	bl	800efbc <USBH_LL_SetToggle>

  return USBH_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3714      	adds	r7, #20
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd90      	pop	{r4, r7, pc}

0800cd84 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd92:	69db      	ldr	r3, [r3, #28]
 800cd94:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d00e      	beq.n	800cdbc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	4619      	mov	r1, r3
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f001 fe12 	bl	800e9ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	4619      	mov	r1, r3
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f001 fe3d 	bl	800ea30 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	7b1b      	ldrb	r3, [r3, #12]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00e      	beq.n	800cde2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	7b1b      	ldrb	r3, [r3, #12]
 800cdc8:	4619      	mov	r1, r3
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f001 fdff 	bl	800e9ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	7b1b      	ldrb	r3, [r3, #12]
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f001 fe2a 	bl	800ea30 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	2200      	movs	r2, #0
 800cde0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	7b5b      	ldrb	r3, [r3, #13]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00e      	beq.n	800ce08 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	7b5b      	ldrb	r3, [r3, #13]
 800cdee:	4619      	mov	r1, r3
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f001 fdec 	bl	800e9ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	7b5b      	ldrb	r3, [r3, #13]
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f001 fe17 	bl	800ea30 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2200      	movs	r2, #0
 800ce06:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce0e:	69db      	ldr	r3, [r3, #28]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d00b      	beq.n	800ce2c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce1a:	69db      	ldr	r3, [r3, #28]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f002 f9c5 	bl	800f1ac <free>
    phost->pActiveClass->pData = 0U;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce28:	2200      	movs	r2, #0
 800ce2a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b084      	sub	sp, #16
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce44:	69db      	ldr	r3, [r3, #28]
 800ce46:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	3340      	adds	r3, #64	; 0x40
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 f8b1 	bl	800cfb6 <GetLineCoding>
 800ce54:	4603      	mov	r3, r0
 800ce56:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800ce58:	7afb      	ldrb	r3, [r7, #11]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d105      	bne.n	800ce6a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce64:	2102      	movs	r1, #2
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800ce6a:	7afb      	ldrb	r3, [r7, #11]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3710      	adds	r7, #16
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ce80:	2300      	movs	r3, #0
 800ce82:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce8a:	69db      	ldr	r3, [r3, #28]
 800ce8c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ce94:	2b04      	cmp	r3, #4
 800ce96:	d877      	bhi.n	800cf88 <USBH_CDC_Process+0x114>
 800ce98:	a201      	add	r2, pc, #4	; (adr r2, 800cea0 <USBH_CDC_Process+0x2c>)
 800ce9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce9e:	bf00      	nop
 800cea0:	0800ceb5 	.word	0x0800ceb5
 800cea4:	0800cebb 	.word	0x0800cebb
 800cea8:	0800ceeb 	.word	0x0800ceeb
 800ceac:	0800cf5f 	.word	0x0800cf5f
 800ceb0:	0800cf6d 	.word	0x0800cf6d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	73fb      	strb	r3, [r7, #15]
      break;
 800ceb8:	e06d      	b.n	800cf96 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cebe:	4619      	mov	r1, r3
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 f897 	bl	800cff4 <SetLineCoding>
 800cec6:	4603      	mov	r3, r0
 800cec8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ceca:	7bbb      	ldrb	r3, [r7, #14]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d104      	bne.n	800ceda <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	2202      	movs	r2, #2
 800ced4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ced8:	e058      	b.n	800cf8c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ceda:	7bbb      	ldrb	r3, [r7, #14]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d055      	beq.n	800cf8c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	2204      	movs	r2, #4
 800cee4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cee8:	e050      	b.n	800cf8c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	3340      	adds	r3, #64	; 0x40
 800ceee:	4619      	mov	r1, r3
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 f860 	bl	800cfb6 <GetLineCoding>
 800cef6:	4603      	mov	r3, r0
 800cef8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cefa:	7bbb      	ldrb	r3, [r7, #14]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d126      	bne.n	800cf4e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf12:	791b      	ldrb	r3, [r3, #4]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d13b      	bne.n	800cf90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf22:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d133      	bne.n	800cf90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf32:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d12b      	bne.n	800cf90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf40:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d124      	bne.n	800cf90 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 f958 	bl	800d1fc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cf4c:	e020      	b.n	800cf90 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800cf4e:	7bbb      	ldrb	r3, [r7, #14]
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d01d      	beq.n	800cf90 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	2204      	movs	r2, #4
 800cf58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cf5c:	e018      	b.n	800cf90 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 f867 	bl	800d032 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 f8da 	bl	800d11e <CDC_ProcessReception>
      break;
 800cf6a:	e014      	b.n	800cf96 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 ffef 	bl	800df52 <USBH_ClrFeature>
 800cf74:	4603      	mov	r3, r0
 800cf76:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cf78:	7bbb      	ldrb	r3, [r7, #14]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d10a      	bne.n	800cf94 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800cf86:	e005      	b.n	800cf94 <USBH_CDC_Process+0x120>

    default:
      break;
 800cf88:	bf00      	nop
 800cf8a:	e004      	b.n	800cf96 <USBH_CDC_Process+0x122>
      break;
 800cf8c:	bf00      	nop
 800cf8e:	e002      	b.n	800cf96 <USBH_CDC_Process+0x122>
      break;
 800cf90:	bf00      	nop
 800cf92:	e000      	b.n	800cf96 <USBH_CDC_Process+0x122>
      break;
 800cf94:	bf00      	nop

  }

  return status;
 800cf96:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3710      	adds	r7, #16
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800cfa8:	2300      	movs	r3, #0
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	370c      	adds	r7, #12
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr

0800cfb6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800cfb6:	b580      	push	{r7, lr}
 800cfb8:	b082      	sub	sp, #8
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	22a1      	movs	r2, #161	; 0xa1
 800cfc4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2221      	movs	r2, #33	; 0x21
 800cfca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2207      	movs	r2, #7
 800cfdc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	2207      	movs	r2, #7
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f001 fa81 	bl	800e4ec <USBH_CtlReq>
 800cfea:	4603      	mov	r3, r0
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2221      	movs	r2, #33	; 0x21
 800d002:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2220      	movs	r2, #32
 800d008:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2200      	movs	r2, #0
 800d00e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2200      	movs	r2, #0
 800d014:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2207      	movs	r2, #7
 800d01a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	2207      	movs	r2, #7
 800d020:	4619      	mov	r1, r3
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f001 fa62 	bl	800e4ec <USBH_CtlReq>
 800d028:	4603      	mov	r3, r0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b086      	sub	sp, #24
 800d036:	af02      	add	r7, sp, #8
 800d038:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d040:	69db      	ldr	r3, [r3, #28]
 800d042:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d044:	2300      	movs	r3, #0
 800d046:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d002      	beq.n	800d058 <CDC_ProcessTransmission+0x26>
 800d052:	2b02      	cmp	r3, #2
 800d054:	d023      	beq.n	800d09e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800d056:	e05e      	b.n	800d116 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05c:	68fa      	ldr	r2, [r7, #12]
 800d05e:	8b12      	ldrh	r2, [r2, #24]
 800d060:	4293      	cmp	r3, r2
 800d062:	d90b      	bls.n	800d07c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	69d9      	ldr	r1, [r3, #28]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	8b1a      	ldrh	r2, [r3, #24]
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	7b5b      	ldrb	r3, [r3, #13]
 800d070:	2001      	movs	r0, #1
 800d072:	9000      	str	r0, [sp, #0]
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f001 fc48 	bl	800e90a <USBH_BulkSendData>
 800d07a:	e00b      	b.n	800d094 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800d084:	b29a      	uxth	r2, r3
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	7b5b      	ldrb	r3, [r3, #13]
 800d08a:	2001      	movs	r0, #1
 800d08c:	9000      	str	r0, [sp, #0]
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f001 fc3b 	bl	800e90a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2202      	movs	r2, #2
 800d098:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d09c:	e03b      	b.n	800d116 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	7b5b      	ldrb	r3, [r3, #13]
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f001 ff5f 	bl	800ef68 <USBH_LL_GetURBState>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800d0ae:	7afb      	ldrb	r3, [r7, #11]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d128      	bne.n	800d106 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b8:	68fa      	ldr	r2, [r7, #12]
 800d0ba:	8b12      	ldrh	r2, [r2, #24]
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d90e      	bls.n	800d0de <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c4:	68fa      	ldr	r2, [r7, #12]
 800d0c6:	8b12      	ldrh	r2, [r2, #24]
 800d0c8:	1a9a      	subs	r2, r3, r2
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	69db      	ldr	r3, [r3, #28]
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	8b12      	ldrh	r2, [r2, #24]
 800d0d6:	441a      	add	r2, r3
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	61da      	str	r2, [r3, #28]
 800d0dc:	e002      	b.n	800d0e4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d004      	beq.n	800d0f6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d0f4:	e00e      	b.n	800d114 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 f868 	bl	800d1d4 <USBH_CDC_TransmitCallback>
      break;
 800d104:	e006      	b.n	800d114 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800d106:	7afb      	ldrb	r3, [r7, #11]
 800d108:	2b02      	cmp	r3, #2
 800d10a:	d103      	bne.n	800d114 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2201      	movs	r2, #1
 800d110:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d114:	bf00      	nop
  }
}
 800d116:	bf00      	nop
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b086      	sub	sp, #24
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d12c:	69db      	ldr	r3, [r3, #28]
 800d12e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d130:	2300      	movs	r3, #0
 800d132:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d13a:	2b03      	cmp	r3, #3
 800d13c:	d002      	beq.n	800d144 <CDC_ProcessReception+0x26>
 800d13e:	2b04      	cmp	r3, #4
 800d140:	d00e      	beq.n	800d160 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800d142:	e043      	b.n	800d1cc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	6a19      	ldr	r1, [r3, #32]
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	8b5a      	ldrh	r2, [r3, #26]
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	7b1b      	ldrb	r3, [r3, #12]
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f001 fbff 	bl	800e954 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	2204      	movs	r2, #4
 800d15a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800d15e:	e035      	b.n	800d1cc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	7b1b      	ldrb	r3, [r3, #12]
 800d164:	4619      	mov	r1, r3
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f001 fefe 	bl	800ef68 <USBH_LL_GetURBState>
 800d16c:	4603      	mov	r3, r0
 800d16e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800d170:	7cfb      	ldrb	r3, [r7, #19]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d129      	bne.n	800d1ca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	7b1b      	ldrb	r3, [r3, #12]
 800d17a:	4619      	mov	r1, r3
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f001 fe61 	bl	800ee44 <USBH_LL_GetLastXferSize>
 800d182:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d188:	68fa      	ldr	r2, [r7, #12]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d016      	beq.n	800d1bc <CDC_ProcessReception+0x9e>
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	8b5b      	ldrh	r3, [r3, #26]
 800d192:	461a      	mov	r2, r3
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	4293      	cmp	r3, r2
 800d198:	d910      	bls.n	800d1bc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	1ad2      	subs	r2, r2, r3
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	6a1a      	ldr	r2, [r3, #32]
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	441a      	add	r2, r3
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	2203      	movs	r2, #3
 800d1b6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800d1ba:	e006      	b.n	800d1ca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f000 f80f 	bl	800d1e8 <USBH_CDC_ReceiveCallback>
      break;
 800d1ca:	bf00      	nop
  }
}
 800d1cc:	bf00      	nop
 800d1ce:	3718      	adds	r7, #24
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d1dc:	bf00      	nop
 800d1de:	370c      	adds	r7, #12
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d1f0:	bf00      	nop
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d204:	bf00      	nop
 800d206:	370c      	adds	r7, #12
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr

0800d210 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	60b9      	str	r1, [r7, #8]
 800d21a:	4613      	mov	r3, r2
 800d21c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d101      	bne.n	800d228 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d224:	2302      	movs	r3, #2
 800d226:	e029      	b.n	800d27c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	79fa      	ldrb	r2, [r7, #7]
 800d22c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2200      	movs	r2, #0
 800d234:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	f000 f81f 	bl	800d284 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2200      	movs	r2, #0
 800d24a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2200      	movs	r2, #0
 800d252:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2200      	movs	r2, #0
 800d25a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	2200      	movs	r2, #0
 800d262:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d003      	beq.n	800d274 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	68ba      	ldr	r2, [r7, #8]
 800d270:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800d274:	68f8      	ldr	r0, [r7, #12]
 800d276:	f001 fd31 	bl	800ecdc <USBH_LL_Init>

  return USBH_OK;
 800d27a:	2300      	movs	r3, #0
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3710      	adds	r7, #16
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d284:	b480      	push	{r7}
 800d286:	b085      	sub	sp, #20
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d28c:	2300      	movs	r3, #0
 800d28e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d290:	2300      	movs	r3, #0
 800d292:	60fb      	str	r3, [r7, #12]
 800d294:	e009      	b.n	800d2aa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	33e0      	adds	r3, #224	; 0xe0
 800d29c:	009b      	lsls	r3, r3, #2
 800d29e:	4413      	add	r3, r2
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	60fb      	str	r3, [r7, #12]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2b0f      	cmp	r3, #15
 800d2ae:	d9f2      	bls.n	800d296 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	60fb      	str	r3, [r7, #12]
 800d2b4:	e009      	b.n	800d2ca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	60fb      	str	r3, [r7, #12]
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2d0:	d3f1      	bcc.n	800d2b6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2240      	movs	r2, #64	; 0x40
 800d2f6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2200      	movs	r2, #0
 800d302:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2201      	movs	r2, #1
 800d30a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2200      	movs	r2, #0
 800d31a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr

0800d32c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b085      	sub	sp, #20
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d336:	2300      	movs	r3, #0
 800d338:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d016      	beq.n	800d36e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10e      	bne.n	800d368 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d350:	1c59      	adds	r1, r3, #1
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	33de      	adds	r3, #222	; 0xde
 800d35c:	6839      	ldr	r1, [r7, #0]
 800d35e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d362:	2300      	movs	r3, #0
 800d364:	73fb      	strb	r3, [r7, #15]
 800d366:	e004      	b.n	800d372 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d368:	2302      	movs	r3, #2
 800d36a:	73fb      	strb	r3, [r7, #15]
 800d36c:	e001      	b.n	800d372 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d36e:	2302      	movs	r3, #2
 800d370:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d372:	7bfb      	ldrb	r3, [r7, #15]
}
 800d374:	4618      	mov	r0, r3
 800d376:	3714      	adds	r7, #20
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	460b      	mov	r3, r1
 800d38a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d38c:	2300      	movs	r3, #0
 800d38e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d396:	78fa      	ldrb	r2, [r7, #3]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d204      	bcs.n	800d3a6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	78fa      	ldrb	r2, [r7, #3]
 800d3a0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d3a4:	e001      	b.n	800d3aa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d3a6:	2302      	movs	r3, #2
 800d3a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3714      	adds	r7, #20
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b087      	sub	sp, #28
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	4608      	mov	r0, r1
 800d3c2:	4611      	mov	r1, r2
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	70fb      	strb	r3, [r7, #3]
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	70bb      	strb	r3, [r7, #2]
 800d3ce:	4613      	mov	r3, r2
 800d3d0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d3e0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d3e2:	e025      	b.n	800d430 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d3e4:	7dfb      	ldrb	r3, [r7, #23]
 800d3e6:	221a      	movs	r2, #26
 800d3e8:	fb02 f303 	mul.w	r3, r2, r3
 800d3ec:	3308      	adds	r3, #8
 800d3ee:	68fa      	ldr	r2, [r7, #12]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	3302      	adds	r3, #2
 800d3f4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	795b      	ldrb	r3, [r3, #5]
 800d3fa:	78fa      	ldrb	r2, [r7, #3]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d002      	beq.n	800d406 <USBH_FindInterface+0x4e>
 800d400:	78fb      	ldrb	r3, [r7, #3]
 800d402:	2bff      	cmp	r3, #255	; 0xff
 800d404:	d111      	bne.n	800d42a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d40a:	78ba      	ldrb	r2, [r7, #2]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d002      	beq.n	800d416 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d410:	78bb      	ldrb	r3, [r7, #2]
 800d412:	2bff      	cmp	r3, #255	; 0xff
 800d414:	d109      	bne.n	800d42a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d41a:	787a      	ldrb	r2, [r7, #1]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d002      	beq.n	800d426 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d420:	787b      	ldrb	r3, [r7, #1]
 800d422:	2bff      	cmp	r3, #255	; 0xff
 800d424:	d101      	bne.n	800d42a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d426:	7dfb      	ldrb	r3, [r7, #23]
 800d428:	e006      	b.n	800d438 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
 800d42c:	3301      	adds	r3, #1
 800d42e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d430:	7dfb      	ldrb	r3, [r7, #23]
 800d432:	2b01      	cmp	r3, #1
 800d434:	d9d6      	bls.n	800d3e4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d436:	23ff      	movs	r3, #255	; 0xff
}
 800d438:	4618      	mov	r0, r3
 800d43a:	371c      	adds	r7, #28
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr

0800d444 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f001 fc81 	bl	800ed54 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800d452:	2101      	movs	r1, #1
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f001 fd9a 	bl	800ef8e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d45a:	2300      	movs	r3, #0
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3708      	adds	r7, #8
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b088      	sub	sp, #32
 800d468:	af04      	add	r7, sp, #16
 800d46a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d46c:	2302      	movs	r3, #2
 800d46e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d470:	2300      	movs	r3, #0
 800d472:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d102      	bne.n	800d486 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2203      	movs	r2, #3
 800d484:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	2b0b      	cmp	r3, #11
 800d48e:	f200 81be 	bhi.w	800d80e <USBH_Process+0x3aa>
 800d492:	a201      	add	r2, pc, #4	; (adr r2, 800d498 <USBH_Process+0x34>)
 800d494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d498:	0800d4c9 	.word	0x0800d4c9
 800d49c:	0800d4fb 	.word	0x0800d4fb
 800d4a0:	0800d563 	.word	0x0800d563
 800d4a4:	0800d7a9 	.word	0x0800d7a9
 800d4a8:	0800d80f 	.word	0x0800d80f
 800d4ac:	0800d607 	.word	0x0800d607
 800d4b0:	0800d74f 	.word	0x0800d74f
 800d4b4:	0800d63d 	.word	0x0800d63d
 800d4b8:	0800d65d 	.word	0x0800d65d
 800d4bc:	0800d67d 	.word	0x0800d67d
 800d4c0:	0800d6c1 	.word	0x0800d6c1
 800d4c4:	0800d791 	.word	0x0800d791
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f000 819e 	beq.w	800d812 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2201      	movs	r2, #1
 800d4da:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d4dc:	20c8      	movs	r0, #200	; 0xc8
 800d4de:	f001 fd9d 	bl	800f01c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f001 fc93 	bl	800ee0e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d4f8:	e18b      	b.n	800d812 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d500:	2b01      	cmp	r3, #1
 800d502:	d107      	bne.n	800d514 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2202      	movs	r2, #2
 800d510:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d512:	e18d      	b.n	800d830 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d51a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d51e:	d914      	bls.n	800d54a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d526:	3301      	adds	r3, #1
 800d528:	b2da      	uxtb	r2, r3
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d536:	2b03      	cmp	r3, #3
 800d538:	d903      	bls.n	800d542 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	220d      	movs	r2, #13
 800d53e:	701a      	strb	r2, [r3, #0]
      break;
 800d540:	e176      	b.n	800d830 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	701a      	strb	r2, [r3, #0]
      break;
 800d548:	e172      	b.n	800d830 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d550:	f103 020a 	add.w	r2, r3, #10
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d55a:	200a      	movs	r0, #10
 800d55c:	f001 fd5e 	bl	800f01c <USBH_Delay>
      break;
 800d560:	e166      	b.n	800d830 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d005      	beq.n	800d578 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d572:	2104      	movs	r1, #4
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d578:	2064      	movs	r0, #100	; 0x64
 800d57a:	f001 fd4f 	bl	800f01c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f001 fc1e 	bl	800edc0 <USBH_LL_GetSpeed>
 800d584:	4603      	mov	r3, r0
 800d586:	461a      	mov	r2, r3
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2205      	movs	r2, #5
 800d592:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d594:	2100      	movs	r1, #0
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f001 fa29 	bl	800e9ee <USBH_AllocPipe>
 800d59c:	4603      	mov	r3, r0
 800d59e:	461a      	mov	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d5a4:	2180      	movs	r1, #128	; 0x80
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f001 fa21 	bl	800e9ee <USBH_AllocPipe>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	7919      	ldrb	r1, [r3, #4]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d5c8:	b292      	uxth	r2, r2
 800d5ca:	9202      	str	r2, [sp, #8]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	9201      	str	r2, [sp, #4]
 800d5d0:	9300      	str	r3, [sp, #0]
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2280      	movs	r2, #128	; 0x80
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f001 f9da 	bl	800e990 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	7959      	ldrb	r1, [r3, #5]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d5f0:	b292      	uxth	r2, r2
 800d5f2:	9202      	str	r2, [sp, #8]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	9201      	str	r2, [sp, #4]
 800d5f8:	9300      	str	r3, [sp, #0]
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f001 f9c6 	bl	800e990 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d604:	e114      	b.n	800d830 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 f918 	bl	800d83c <USBH_HandleEnum>
 800d60c:	4603      	mov	r3, r0
 800d60e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d610:	7bbb      	ldrb	r3, [r7, #14]
 800d612:	b2db      	uxtb	r3, r3
 800d614:	2b00      	cmp	r3, #0
 800d616:	f040 80fe 	bne.w	800d816 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d103      	bne.n	800d634 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2208      	movs	r2, #8
 800d630:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d632:	e0f0      	b.n	800d816 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2207      	movs	r2, #7
 800d638:	701a      	strb	r2, [r3, #0]
      break;
 800d63a:	e0ec      	b.n	800d816 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d642:	2b00      	cmp	r3, #0
 800d644:	f000 80e9 	beq.w	800d81a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d64e:	2101      	movs	r1, #1
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2208      	movs	r2, #8
 800d658:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800d65a:	e0de      	b.n	800d81a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d662:	b29b      	uxth	r3, r3
 800d664:	4619      	mov	r1, r3
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 fc2c 	bl	800dec4 <USBH_SetCfg>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	f040 80d5 	bne.w	800d81e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2209      	movs	r2, #9
 800d678:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d67a:	e0d0      	b.n	800d81e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d682:	f003 0320 	and.w	r3, r3, #32
 800d686:	2b00      	cmp	r3, #0
 800d688:	d016      	beq.n	800d6b8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800d68a:	2101      	movs	r1, #1
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 fc3c 	bl	800df0a <USBH_SetFeature>
 800d692:	4603      	mov	r3, r0
 800d694:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d696:	7bbb      	ldrb	r3, [r7, #14]
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d103      	bne.n	800d6a6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	220a      	movs	r2, #10
 800d6a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d6a4:	e0bd      	b.n	800d822 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800d6a6:	7bbb      	ldrb	r3, [r7, #14]
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	2b03      	cmp	r3, #3
 800d6ac:	f040 80b9 	bne.w	800d822 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	220a      	movs	r2, #10
 800d6b4:	701a      	strb	r2, [r3, #0]
      break;
 800d6b6:	e0b4      	b.n	800d822 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	220a      	movs	r2, #10
 800d6bc:	701a      	strb	r2, [r3, #0]
      break;
 800d6be:	e0b0      	b.n	800d822 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	f000 80ad 	beq.w	800d826 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	73fb      	strb	r3, [r7, #15]
 800d6d8:	e016      	b.n	800d708 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d6da:	7bfa      	ldrb	r2, [r7, #15]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	32de      	adds	r2, #222	; 0xde
 800d6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e4:	791a      	ldrb	r2, [r3, #4]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d108      	bne.n	800d702 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d6f0:	7bfa      	ldrb	r2, [r7, #15]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	32de      	adds	r2, #222	; 0xde
 800d6f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d700:	e005      	b.n	800d70e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d702:	7bfb      	ldrb	r3, [r7, #15]
 800d704:	3301      	adds	r3, #1
 800d706:	73fb      	strb	r3, [r7, #15]
 800d708:	7bfb      	ldrb	r3, [r7, #15]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d0e5      	beq.n	800d6da <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d714:	2b00      	cmp	r3, #0
 800d716:	d016      	beq.n	800d746 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	4798      	blx	r3
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d109      	bne.n	800d73e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2206      	movs	r2, #6
 800d72e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d736:	2103      	movs	r1, #3
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d73c:	e073      	b.n	800d826 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	220d      	movs	r2, #13
 800d742:	701a      	strb	r2, [r3, #0]
      break;
 800d744:	e06f      	b.n	800d826 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	220d      	movs	r2, #13
 800d74a:	701a      	strb	r2, [r3, #0]
      break;
 800d74c:	e06b      	b.n	800d826 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d754:	2b00      	cmp	r3, #0
 800d756:	d017      	beq.n	800d788 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d75e:	691b      	ldr	r3, [r3, #16]
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	4798      	blx	r3
 800d764:	4603      	mov	r3, r0
 800d766:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d768:	7bbb      	ldrb	r3, [r7, #14]
 800d76a:	b2db      	uxtb	r3, r3
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d103      	bne.n	800d778 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	220b      	movs	r2, #11
 800d774:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d776:	e058      	b.n	800d82a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800d778:	7bbb      	ldrb	r3, [r7, #14]
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	d154      	bne.n	800d82a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	220d      	movs	r2, #13
 800d784:	701a      	strb	r2, [r3, #0]
      break;
 800d786:	e050      	b.n	800d82a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	220d      	movs	r2, #13
 800d78c:	701a      	strb	r2, [r3, #0]
      break;
 800d78e:	e04c      	b.n	800d82a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d796:	2b00      	cmp	r3, #0
 800d798:	d049      	beq.n	800d82e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d7a0:	695b      	ldr	r3, [r3, #20]
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	4798      	blx	r3
      }
      break;
 800d7a6:	e042      	b.n	800d82e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f7ff fd67 	bl	800d284 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d009      	beq.n	800d7d4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d7c6:	68db      	ldr	r3, [r3, #12]
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d005      	beq.n	800d7ea <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d7e4:	2105      	movs	r1, #5
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d107      	bne.n	800d806 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f7ff fe20 	bl	800d444 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d804:	e014      	b.n	800d830 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f001 faa4 	bl	800ed54 <USBH_LL_Start>
      break;
 800d80c:	e010      	b.n	800d830 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800d80e:	bf00      	nop
 800d810:	e00e      	b.n	800d830 <USBH_Process+0x3cc>
      break;
 800d812:	bf00      	nop
 800d814:	e00c      	b.n	800d830 <USBH_Process+0x3cc>
      break;
 800d816:	bf00      	nop
 800d818:	e00a      	b.n	800d830 <USBH_Process+0x3cc>
    break;
 800d81a:	bf00      	nop
 800d81c:	e008      	b.n	800d830 <USBH_Process+0x3cc>
      break;
 800d81e:	bf00      	nop
 800d820:	e006      	b.n	800d830 <USBH_Process+0x3cc>
      break;
 800d822:	bf00      	nop
 800d824:	e004      	b.n	800d830 <USBH_Process+0x3cc>
      break;
 800d826:	bf00      	nop
 800d828:	e002      	b.n	800d830 <USBH_Process+0x3cc>
      break;
 800d82a:	bf00      	nop
 800d82c:	e000      	b.n	800d830 <USBH_Process+0x3cc>
      break;
 800d82e:	bf00      	nop
  }
  return USBH_OK;
 800d830:	2300      	movs	r3, #0
}
 800d832:	4618      	mov	r0, r3
 800d834:	3710      	adds	r7, #16
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop

0800d83c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b088      	sub	sp, #32
 800d840:	af04      	add	r7, sp, #16
 800d842:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d844:	2301      	movs	r3, #1
 800d846:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d848:	2301      	movs	r3, #1
 800d84a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	785b      	ldrb	r3, [r3, #1]
 800d850:	2b07      	cmp	r3, #7
 800d852:	f200 81c1 	bhi.w	800dbd8 <USBH_HandleEnum+0x39c>
 800d856:	a201      	add	r2, pc, #4	; (adr r2, 800d85c <USBH_HandleEnum+0x20>)
 800d858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d85c:	0800d87d 	.word	0x0800d87d
 800d860:	0800d93b 	.word	0x0800d93b
 800d864:	0800d9a5 	.word	0x0800d9a5
 800d868:	0800da33 	.word	0x0800da33
 800d86c:	0800da9d 	.word	0x0800da9d
 800d870:	0800db0d 	.word	0x0800db0d
 800d874:	0800db53 	.word	0x0800db53
 800d878:	0800db99 	.word	0x0800db99
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d87c:	2108      	movs	r1, #8
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 fa50 	bl	800dd24 <USBH_Get_DevDesc>
 800d884:	4603      	mov	r3, r0
 800d886:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d888:	7bbb      	ldrb	r3, [r7, #14]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d130      	bne.n	800d8f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	7919      	ldrb	r1, [r3, #4]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d8b2:	b292      	uxth	r2, r2
 800d8b4:	9202      	str	r2, [sp, #8]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	9201      	str	r2, [sp, #4]
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	4603      	mov	r3, r0
 800d8be:	2280      	movs	r2, #128	; 0x80
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f001 f865 	bl	800e990 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	7959      	ldrb	r1, [r3, #5]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d8d6:	687a      	ldr	r2, [r7, #4]
 800d8d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d8da:	b292      	uxth	r2, r2
 800d8dc:	9202      	str	r2, [sp, #8]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	9201      	str	r2, [sp, #4]
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f001 f851 	bl	800e990 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d8ee:	e175      	b.n	800dbdc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d8f0:	7bbb      	ldrb	r3, [r7, #14]
 800d8f2:	2b03      	cmp	r3, #3
 800d8f4:	f040 8172 	bne.w	800dbdc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d8fe:	3301      	adds	r3, #1
 800d900:	b2da      	uxtb	r2, r3
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d90e:	2b03      	cmp	r3, #3
 800d910:	d903      	bls.n	800d91a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	220d      	movs	r2, #13
 800d916:	701a      	strb	r2, [r3, #0]
      break;
 800d918:	e160      	b.n	800dbdc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	795b      	ldrb	r3, [r3, #5]
 800d91e:	4619      	mov	r1, r3
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f001 f885 	bl	800ea30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	791b      	ldrb	r3, [r3, #4]
 800d92a:	4619      	mov	r1, r3
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f001 f87f 	bl	800ea30 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2200      	movs	r2, #0
 800d936:	701a      	strb	r2, [r3, #0]
      break;
 800d938:	e150      	b.n	800dbdc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d93a:	2112      	movs	r1, #18
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 f9f1 	bl	800dd24 <USBH_Get_DevDesc>
 800d942:	4603      	mov	r3, r0
 800d944:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d946:	7bbb      	ldrb	r3, [r7, #14]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d103      	bne.n	800d954 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2202      	movs	r2, #2
 800d950:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d952:	e145      	b.n	800dbe0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d954:	7bbb      	ldrb	r3, [r7, #14]
 800d956:	2b03      	cmp	r3, #3
 800d958:	f040 8142 	bne.w	800dbe0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d962:	3301      	adds	r3, #1
 800d964:	b2da      	uxtb	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d972:	2b03      	cmp	r3, #3
 800d974:	d903      	bls.n	800d97e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	220d      	movs	r2, #13
 800d97a:	701a      	strb	r2, [r3, #0]
      break;
 800d97c:	e130      	b.n	800dbe0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	795b      	ldrb	r3, [r3, #5]
 800d982:	4619      	mov	r1, r3
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f001 f853 	bl	800ea30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	791b      	ldrb	r3, [r3, #4]
 800d98e:	4619      	mov	r1, r3
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f001 f84d 	bl	800ea30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	701a      	strb	r2, [r3, #0]
      break;
 800d9a2:	e11d      	b.n	800dbe0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d9a4:	2101      	movs	r1, #1
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 fa68 	bl	800de7c <USBH_SetAddress>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d9b0:	7bbb      	ldrb	r3, [r7, #14]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d132      	bne.n	800da1c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d9b6:	2002      	movs	r0, #2
 800d9b8:	f001 fb30 	bl	800f01c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2203      	movs	r2, #3
 800d9c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	7919      	ldrb	r1, [r3, #4]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d9de:	b292      	uxth	r2, r2
 800d9e0:	9202      	str	r2, [sp, #8]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	9201      	str	r2, [sp, #4]
 800d9e6:	9300      	str	r3, [sp, #0]
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	2280      	movs	r2, #128	; 0x80
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 ffcf 	bl	800e990 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	7959      	ldrb	r1, [r3, #5]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800da06:	b292      	uxth	r2, r2
 800da08:	9202      	str	r2, [sp, #8]
 800da0a:	2200      	movs	r2, #0
 800da0c:	9201      	str	r2, [sp, #4]
 800da0e:	9300      	str	r3, [sp, #0]
 800da10:	4603      	mov	r3, r0
 800da12:	2200      	movs	r2, #0
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f000 ffbb 	bl	800e990 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800da1a:	e0e3      	b.n	800dbe4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800da1c:	7bbb      	ldrb	r3, [r7, #14]
 800da1e:	2b03      	cmp	r3, #3
 800da20:	f040 80e0 	bne.w	800dbe4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	220d      	movs	r2, #13
 800da28:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2200      	movs	r2, #0
 800da2e:	705a      	strb	r2, [r3, #1]
      break;
 800da30:	e0d8      	b.n	800dbe4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800da32:	2109      	movs	r1, #9
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 f99d 	bl	800dd74 <USBH_Get_CfgDesc>
 800da3a:	4603      	mov	r3, r0
 800da3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800da3e:	7bbb      	ldrb	r3, [r7, #14]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d103      	bne.n	800da4c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2204      	movs	r2, #4
 800da48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800da4a:	e0cd      	b.n	800dbe8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800da4c:	7bbb      	ldrb	r3, [r7, #14]
 800da4e:	2b03      	cmp	r3, #3
 800da50:	f040 80ca 	bne.w	800dbe8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800da5a:	3301      	adds	r3, #1
 800da5c:	b2da      	uxtb	r2, r3
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800da6a:	2b03      	cmp	r3, #3
 800da6c:	d903      	bls.n	800da76 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	220d      	movs	r2, #13
 800da72:	701a      	strb	r2, [r3, #0]
      break;
 800da74:	e0b8      	b.n	800dbe8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	795b      	ldrb	r3, [r3, #5]
 800da7a:	4619      	mov	r1, r3
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 ffd7 	bl	800ea30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	791b      	ldrb	r3, [r3, #4]
 800da86:	4619      	mov	r1, r3
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 ffd1 	bl	800ea30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	701a      	strb	r2, [r3, #0]
      break;
 800da9a:	e0a5      	b.n	800dbe8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800daa2:	4619      	mov	r1, r3
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f000 f965 	bl	800dd74 <USBH_Get_CfgDesc>
 800daaa:	4603      	mov	r3, r0
 800daac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800daae:	7bbb      	ldrb	r3, [r7, #14]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d103      	bne.n	800dabc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2205      	movs	r2, #5
 800dab8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800daba:	e097      	b.n	800dbec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dabc:	7bbb      	ldrb	r3, [r7, #14]
 800dabe:	2b03      	cmp	r3, #3
 800dac0:	f040 8094 	bne.w	800dbec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800daca:	3301      	adds	r3, #1
 800dacc:	b2da      	uxtb	r2, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dada:	2b03      	cmp	r3, #3
 800dadc:	d903      	bls.n	800dae6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	220d      	movs	r2, #13
 800dae2:	701a      	strb	r2, [r3, #0]
      break;
 800dae4:	e082      	b.n	800dbec <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	795b      	ldrb	r3, [r3, #5]
 800daea:	4619      	mov	r1, r3
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 ff9f 	bl	800ea30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	791b      	ldrb	r3, [r3, #4]
 800daf6:	4619      	mov	r1, r3
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f000 ff99 	bl	800ea30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2200      	movs	r2, #0
 800db08:	701a      	strb	r2, [r3, #0]
      break;
 800db0a:	e06f      	b.n	800dbec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800db12:	2b00      	cmp	r3, #0
 800db14:	d019      	beq.n	800db4a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800db22:	23ff      	movs	r3, #255	; 0xff
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f000 f949 	bl	800ddbc <USBH_Get_StringDesc>
 800db2a:	4603      	mov	r3, r0
 800db2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800db2e:	7bbb      	ldrb	r3, [r7, #14]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d103      	bne.n	800db3c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2206      	movs	r2, #6
 800db38:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800db3a:	e059      	b.n	800dbf0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800db3c:	7bbb      	ldrb	r3, [r7, #14]
 800db3e:	2b03      	cmp	r3, #3
 800db40:	d156      	bne.n	800dbf0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2206      	movs	r2, #6
 800db46:	705a      	strb	r2, [r3, #1]
      break;
 800db48:	e052      	b.n	800dbf0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2206      	movs	r2, #6
 800db4e:	705a      	strb	r2, [r3, #1]
      break;
 800db50:	e04e      	b.n	800dbf0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d019      	beq.n	800db90 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800db68:	23ff      	movs	r3, #255	; 0xff
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 f926 	bl	800ddbc <USBH_Get_StringDesc>
 800db70:	4603      	mov	r3, r0
 800db72:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800db74:	7bbb      	ldrb	r3, [r7, #14]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d103      	bne.n	800db82 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2207      	movs	r2, #7
 800db7e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800db80:	e038      	b.n	800dbf4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800db82:	7bbb      	ldrb	r3, [r7, #14]
 800db84:	2b03      	cmp	r3, #3
 800db86:	d135      	bne.n	800dbf4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2207      	movs	r2, #7
 800db8c:	705a      	strb	r2, [r3, #1]
      break;
 800db8e:	e031      	b.n	800dbf4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2207      	movs	r2, #7
 800db94:	705a      	strb	r2, [r3, #1]
      break;
 800db96:	e02d      	b.n	800dbf4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d017      	beq.n	800dbd2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800dbae:	23ff      	movs	r3, #255	; 0xff
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f000 f903 	bl	800ddbc <USBH_Get_StringDesc>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dbba:	7bbb      	ldrb	r3, [r7, #14]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d102      	bne.n	800dbc6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800dbc4:	e018      	b.n	800dbf8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dbc6:	7bbb      	ldrb	r3, [r7, #14]
 800dbc8:	2b03      	cmp	r3, #3
 800dbca:	d115      	bne.n	800dbf8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	73fb      	strb	r3, [r7, #15]
      break;
 800dbd0:	e012      	b.n	800dbf8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	73fb      	strb	r3, [r7, #15]
      break;
 800dbd6:	e00f      	b.n	800dbf8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800dbd8:	bf00      	nop
 800dbda:	e00e      	b.n	800dbfa <USBH_HandleEnum+0x3be>
      break;
 800dbdc:	bf00      	nop
 800dbde:	e00c      	b.n	800dbfa <USBH_HandleEnum+0x3be>
      break;
 800dbe0:	bf00      	nop
 800dbe2:	e00a      	b.n	800dbfa <USBH_HandleEnum+0x3be>
      break;
 800dbe4:	bf00      	nop
 800dbe6:	e008      	b.n	800dbfa <USBH_HandleEnum+0x3be>
      break;
 800dbe8:	bf00      	nop
 800dbea:	e006      	b.n	800dbfa <USBH_HandleEnum+0x3be>
      break;
 800dbec:	bf00      	nop
 800dbee:	e004      	b.n	800dbfa <USBH_HandleEnum+0x3be>
      break;
 800dbf0:	bf00      	nop
 800dbf2:	e002      	b.n	800dbfa <USBH_HandleEnum+0x3be>
      break;
 800dbf4:	bf00      	nop
 800dbf6:	e000      	b.n	800dbfa <USBH_HandleEnum+0x3be>
      break;
 800dbf8:	bf00      	nop
  }
  return Status;
 800dbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3710      	adds	r7, #16
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	683a      	ldr	r2, [r7, #0]
 800dc12:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800dc16:	bf00      	nop
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr

0800dc22 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800dc22:	b580      	push	{r7, lr}
 800dc24:	b082      	sub	sp, #8
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dc30:	1c5a      	adds	r2, r3, #1
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 f804 	bl	800dc46 <USBH_HandleSof>
}
 800dc3e:	bf00      	nop
 800dc40:	3708      	adds	r7, #8
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b082      	sub	sp, #8
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	2b0b      	cmp	r3, #11
 800dc56:	d10a      	bne.n	800dc6e <USBH_HandleSof+0x28>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d005      	beq.n	800dc6e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc68:	699b      	ldr	r3, [r3, #24]
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	4798      	blx	r3
  }
}
 800dc6e:	bf00      	nop
 800dc70:	3708      	adds	r7, #8
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}

0800dc76 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800dc76:	b480      	push	{r7}
 800dc78:	b083      	sub	sp, #12
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2201      	movs	r2, #1
 800dc82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800dc86:	bf00      	nop
}
 800dc88:	370c      	adds	r7, #12
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800dc92:	b480      	push	{r7}
 800dc94:	b083      	sub	sp, #12
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800dca2:	bf00      	nop
}
 800dca4:	370c      	adds	r7, #12
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr

0800dcae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800dcae:	b480      	push	{r7}
 800dcb0:	b083      	sub	sp, #12
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2201      	movs	r2, #1
 800dcba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800dcce:	2300      	movs	r3, #0
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	370c      	adds	r7, #12
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr

0800dcdc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f001 f844 	bl	800ed8a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	791b      	ldrb	r3, [r3, #4]
 800dd06:	4619      	mov	r1, r3
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f000 fe91 	bl	800ea30 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	795b      	ldrb	r3, [r3, #5]
 800dd12:	4619      	mov	r1, r3
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 fe8b 	bl	800ea30 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800dd1a:	2300      	movs	r3, #0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b086      	sub	sp, #24
 800dd28:	af02      	add	r7, sp, #8
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800dd36:	78fb      	ldrb	r3, [r7, #3]
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	9300      	str	r3, [sp, #0]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd42:	2100      	movs	r1, #0
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f000 f864 	bl	800de12 <USBH_GetDescriptor>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800dd4e:	7bfb      	ldrb	r3, [r7, #15]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10a      	bne.n	800dd6a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f203 3026 	addw	r0, r3, #806	; 0x326
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dd60:	78fa      	ldrb	r2, [r7, #3]
 800dd62:	b292      	uxth	r2, r2
 800dd64:	4619      	mov	r1, r3
 800dd66:	f000 f918 	bl	800df9a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800dd6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3710      	adds	r7, #16
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b086      	sub	sp, #24
 800dd78:	af02      	add	r7, sp, #8
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	331c      	adds	r3, #28
 800dd84:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800dd86:	887b      	ldrh	r3, [r7, #2]
 800dd88:	9300      	str	r3, [sp, #0]
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd90:	2100      	movs	r1, #0
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f000 f83d 	bl	800de12 <USBH_GetDescriptor>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800dd9c:	7bfb      	ldrb	r3, [r7, #15]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d107      	bne.n	800ddb2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800dda2:	887b      	ldrh	r3, [r7, #2]
 800dda4:	461a      	mov	r2, r3
 800dda6:	68b9      	ldr	r1, [r7, #8]
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f000 f987 	bl	800e0bc <USBH_ParseCfgDesc>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ddb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3710      	adds	r7, #16
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b088      	sub	sp, #32
 800ddc0:	af02      	add	r7, sp, #8
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	607a      	str	r2, [r7, #4]
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	460b      	mov	r3, r1
 800ddca:	72fb      	strb	r3, [r7, #11]
 800ddcc:	4613      	mov	r3, r2
 800ddce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800ddd0:	7afb      	ldrb	r3, [r7, #11]
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ddd8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800dde0:	893b      	ldrh	r3, [r7, #8]
 800dde2:	9300      	str	r3, [sp, #0]
 800dde4:	460b      	mov	r3, r1
 800dde6:	2100      	movs	r1, #0
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f000 f812 	bl	800de12 <USBH_GetDescriptor>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ddf2:	7dfb      	ldrb	r3, [r7, #23]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d107      	bne.n	800de08 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ddfe:	893a      	ldrh	r2, [r7, #8]
 800de00:	6879      	ldr	r1, [r7, #4]
 800de02:	4618      	mov	r0, r3
 800de04:	f000 fb24 	bl	800e450 <USBH_ParseStringDesc>
  }

  return status;
 800de08:	7dfb      	ldrb	r3, [r7, #23]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3718      	adds	r7, #24
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b084      	sub	sp, #16
 800de16:	af00      	add	r7, sp, #0
 800de18:	60f8      	str	r0, [r7, #12]
 800de1a:	607b      	str	r3, [r7, #4]
 800de1c:	460b      	mov	r3, r1
 800de1e:	72fb      	strb	r3, [r7, #11]
 800de20:	4613      	mov	r3, r2
 800de22:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	789b      	ldrb	r3, [r3, #2]
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d11c      	bne.n	800de66 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800de2c:	7afb      	ldrb	r3, [r7, #11]
 800de2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800de32:	b2da      	uxtb	r2, r3
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2206      	movs	r2, #6
 800de3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	893a      	ldrh	r2, [r7, #8]
 800de42:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800de44:	893b      	ldrh	r3, [r7, #8]
 800de46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800de4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800de4e:	d104      	bne.n	800de5a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f240 4209 	movw	r2, #1033	; 0x409
 800de56:	829a      	strh	r2, [r3, #20]
 800de58:	e002      	b.n	800de60 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2200      	movs	r2, #0
 800de5e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	8b3a      	ldrh	r2, [r7, #24]
 800de64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800de66:	8b3b      	ldrh	r3, [r7, #24]
 800de68:	461a      	mov	r2, r3
 800de6a:	6879      	ldr	r1, [r7, #4]
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f000 fb3d 	bl	800e4ec <USBH_CtlReq>
 800de72:	4603      	mov	r3, r0
}
 800de74:	4618      	mov	r0, r3
 800de76:	3710      	adds	r7, #16
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	460b      	mov	r3, r1
 800de86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	789b      	ldrb	r3, [r3, #2]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d10f      	bne.n	800deb0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2200      	movs	r2, #0
 800de94:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2205      	movs	r2, #5
 800de9a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800de9c:	78fb      	ldrb	r3, [r7, #3]
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2200      	movs	r2, #0
 800dea8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2200      	movs	r2, #0
 800deae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800deb0:	2200      	movs	r2, #0
 800deb2:	2100      	movs	r1, #0
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f000 fb19 	bl	800e4ec <USBH_CtlReq>
 800deba:	4603      	mov	r3, r0
}
 800debc:	4618      	mov	r0, r3
 800debe:	3708      	adds	r7, #8
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	460b      	mov	r3, r1
 800dece:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	789b      	ldrb	r3, [r3, #2]
 800ded4:	2b01      	cmp	r3, #1
 800ded6:	d10e      	bne.n	800def6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2200      	movs	r2, #0
 800dedc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2209      	movs	r2, #9
 800dee2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	887a      	ldrh	r2, [r7, #2]
 800dee8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2200      	movs	r2, #0
 800deee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800def6:	2200      	movs	r2, #0
 800def8:	2100      	movs	r1, #0
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f000 faf6 	bl	800e4ec <USBH_CtlReq>
 800df00:	4603      	mov	r3, r0
}
 800df02:	4618      	mov	r0, r3
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b082      	sub	sp, #8
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
 800df12:	460b      	mov	r3, r1
 800df14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	789b      	ldrb	r3, [r3, #2]
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d10f      	bne.n	800df3e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2200      	movs	r2, #0
 800df22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2203      	movs	r2, #3
 800df28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800df2a:	78fb      	ldrb	r3, [r7, #3]
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800df3e:	2200      	movs	r2, #0
 800df40:	2100      	movs	r1, #0
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 fad2 	bl	800e4ec <USBH_CtlReq>
 800df48:	4603      	mov	r3, r0
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3708      	adds	r7, #8
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800df52:	b580      	push	{r7, lr}
 800df54:	b082      	sub	sp, #8
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
 800df5a:	460b      	mov	r3, r1
 800df5c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	789b      	ldrb	r3, [r3, #2]
 800df62:	2b01      	cmp	r3, #1
 800df64:	d10f      	bne.n	800df86 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2202      	movs	r2, #2
 800df6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2201      	movs	r2, #1
 800df70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2200      	movs	r2, #0
 800df76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800df78:	78fb      	ldrb	r3, [r7, #3]
 800df7a:	b29a      	uxth	r2, r3
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2200      	movs	r2, #0
 800df84:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800df86:	2200      	movs	r2, #0
 800df88:	2100      	movs	r1, #0
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 faae 	bl	800e4ec <USBH_CtlReq>
 800df90:	4603      	mov	r3, r0
}
 800df92:	4618      	mov	r0, r3
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}

0800df9a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800df9a:	b480      	push	{r7}
 800df9c:	b085      	sub	sp, #20
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	60f8      	str	r0, [r7, #12]
 800dfa2:	60b9      	str	r1, [r7, #8]
 800dfa4:	4613      	mov	r3, r2
 800dfa6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	781a      	ldrb	r2, [r3, #0]
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	785a      	ldrb	r2, [r3, #1]
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	3302      	adds	r3, #2
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	b29a      	uxth	r2, r3
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	3303      	adds	r3, #3
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	021b      	lsls	r3, r3, #8
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	791a      	ldrb	r2, [r3, #4]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	795a      	ldrb	r2, [r3, #5]
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	799a      	ldrb	r2, [r3, #6]
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	79da      	ldrb	r2, [r3, #7]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	79db      	ldrb	r3, [r3, #7]
 800dff8:	2b20      	cmp	r3, #32
 800dffa:	dc11      	bgt.n	800e020 <USBH_ParseDevDesc+0x86>
 800dffc:	2b08      	cmp	r3, #8
 800dffe:	db16      	blt.n	800e02e <USBH_ParseDevDesc+0x94>
 800e000:	3b08      	subs	r3, #8
 800e002:	2201      	movs	r2, #1
 800e004:	fa02 f303 	lsl.w	r3, r2, r3
 800e008:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800e00c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e010:	2b00      	cmp	r3, #0
 800e012:	bf14      	ite	ne
 800e014:	2301      	movne	r3, #1
 800e016:	2300      	moveq	r3, #0
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d102      	bne.n	800e024 <USBH_ParseDevDesc+0x8a>
 800e01e:	e006      	b.n	800e02e <USBH_ParseDevDesc+0x94>
 800e020:	2b40      	cmp	r3, #64	; 0x40
 800e022:	d104      	bne.n	800e02e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	79da      	ldrb	r2, [r3, #7]
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	71da      	strb	r2, [r3, #7]
      break;
 800e02c:	e003      	b.n	800e036 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2240      	movs	r2, #64	; 0x40
 800e032:	71da      	strb	r2, [r3, #7]
      break;
 800e034:	bf00      	nop
  }

  if (length > 8U)
 800e036:	88fb      	ldrh	r3, [r7, #6]
 800e038:	2b08      	cmp	r3, #8
 800e03a:	d939      	bls.n	800e0b0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	3308      	adds	r3, #8
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	b29a      	uxth	r2, r3
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	3309      	adds	r3, #9
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	021b      	lsls	r3, r3, #8
 800e04e:	b29b      	uxth	r3, r3
 800e050:	4313      	orrs	r3, r2
 800e052:	b29a      	uxth	r2, r3
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	330a      	adds	r3, #10
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	b29a      	uxth	r2, r3
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	330b      	adds	r3, #11
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	b29b      	uxth	r3, r3
 800e068:	021b      	lsls	r3, r3, #8
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	4313      	orrs	r3, r2
 800e06e:	b29a      	uxth	r2, r3
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	330c      	adds	r3, #12
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	b29a      	uxth	r2, r3
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	330d      	adds	r3, #13
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	b29b      	uxth	r3, r3
 800e084:	021b      	lsls	r3, r3, #8
 800e086:	b29b      	uxth	r3, r3
 800e088:	4313      	orrs	r3, r2
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	7b9a      	ldrb	r2, [r3, #14]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	7bda      	ldrb	r2, [r3, #15]
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	7c1a      	ldrb	r2, [r3, #16]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	7c5a      	ldrb	r2, [r3, #17]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	745a      	strb	r2, [r3, #17]
  }
}
 800e0b0:	bf00      	nop
 800e0b2:	3714      	adds	r7, #20
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr

0800e0bc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b08c      	sub	sp, #48	; 0x30
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e0d0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	781a      	ldrb	r2, [r3, #0]
 800e0f0:	6a3b      	ldr	r3, [r7, #32]
 800e0f2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	785a      	ldrb	r2, [r3, #1]
 800e0f8:	6a3b      	ldr	r3, [r7, #32]
 800e0fa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	3302      	adds	r3, #2
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	b29a      	uxth	r2, r3
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	3303      	adds	r3, #3
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	021b      	lsls	r3, r3, #8
 800e10e:	b29b      	uxth	r3, r3
 800e110:	4313      	orrs	r3, r2
 800e112:	b29b      	uxth	r3, r3
 800e114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e118:	bf28      	it	cs
 800e11a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800e11e:	b29a      	uxth	r2, r3
 800e120:	6a3b      	ldr	r3, [r7, #32]
 800e122:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	791a      	ldrb	r2, [r3, #4]
 800e128:	6a3b      	ldr	r3, [r7, #32]
 800e12a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	795a      	ldrb	r2, [r3, #5]
 800e130:	6a3b      	ldr	r3, [r7, #32]
 800e132:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	799a      	ldrb	r2, [r3, #6]
 800e138:	6a3b      	ldr	r3, [r7, #32]
 800e13a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	79da      	ldrb	r2, [r3, #7]
 800e140:	6a3b      	ldr	r3, [r7, #32]
 800e142:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	7a1a      	ldrb	r2, [r3, #8]
 800e148:	6a3b      	ldr	r3, [r7, #32]
 800e14a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800e14c:	6a3b      	ldr	r3, [r7, #32]
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	2b09      	cmp	r3, #9
 800e152:	d002      	beq.n	800e15a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800e154:	6a3b      	ldr	r3, [r7, #32]
 800e156:	2209      	movs	r2, #9
 800e158:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e15a:	88fb      	ldrh	r3, [r7, #6]
 800e15c:	2b09      	cmp	r3, #9
 800e15e:	f240 809d 	bls.w	800e29c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800e162:	2309      	movs	r3, #9
 800e164:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e166:	2300      	movs	r3, #0
 800e168:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e16a:	e081      	b.n	800e270 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e16c:	f107 0316 	add.w	r3, r7, #22
 800e170:	4619      	mov	r1, r3
 800e172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e174:	f000 f99f 	bl	800e4b6 <USBH_GetNextDesc>
 800e178:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800e17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17c:	785b      	ldrb	r3, [r3, #1]
 800e17e:	2b04      	cmp	r3, #4
 800e180:	d176      	bne.n	800e270 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800e182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	2b09      	cmp	r3, #9
 800e188:	d002      	beq.n	800e190 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800e18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18c:	2209      	movs	r2, #9
 800e18e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800e190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e194:	221a      	movs	r2, #26
 800e196:	fb02 f303 	mul.w	r3, r2, r3
 800e19a:	3308      	adds	r3, #8
 800e19c:	6a3a      	ldr	r2, [r7, #32]
 800e19e:	4413      	add	r3, r2
 800e1a0:	3302      	adds	r3, #2
 800e1a2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e1a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1a6:	69f8      	ldr	r0, [r7, #28]
 800e1a8:	f000 f87e 	bl	800e2a8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e1b6:	e043      	b.n	800e240 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e1b8:	f107 0316 	add.w	r3, r7, #22
 800e1bc:	4619      	mov	r1, r3
 800e1be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1c0:	f000 f979 	bl	800e4b6 <USBH_GetNextDesc>
 800e1c4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c8:	785b      	ldrb	r3, [r3, #1]
 800e1ca:	2b05      	cmp	r3, #5
 800e1cc:	d138      	bne.n	800e240 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800e1ce:	69fb      	ldr	r3, [r7, #28]
 800e1d0:	795b      	ldrb	r3, [r3, #5]
 800e1d2:	2b01      	cmp	r3, #1
 800e1d4:	d10f      	bne.n	800e1f6 <USBH_ParseCfgDesc+0x13a>
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	799b      	ldrb	r3, [r3, #6]
 800e1da:	2b02      	cmp	r3, #2
 800e1dc:	d10b      	bne.n	800e1f6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	79db      	ldrb	r3, [r3, #7]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d10f      	bne.n	800e206 <USBH_ParseCfgDesc+0x14a>
 800e1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	2b09      	cmp	r3, #9
 800e1ec:	d00b      	beq.n	800e206 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800e1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f0:	2209      	movs	r2, #9
 800e1f2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e1f4:	e007      	b.n	800e206 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800e1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	2b07      	cmp	r3, #7
 800e1fc:	d004      	beq.n	800e208 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800e1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e200:	2207      	movs	r2, #7
 800e202:	701a      	strb	r2, [r3, #0]
 800e204:	e000      	b.n	800e208 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e206:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e20c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e210:	3201      	adds	r2, #1
 800e212:	00d2      	lsls	r2, r2, #3
 800e214:	211a      	movs	r1, #26
 800e216:	fb01 f303 	mul.w	r3, r1, r3
 800e21a:	4413      	add	r3, r2
 800e21c:	3308      	adds	r3, #8
 800e21e:	6a3a      	ldr	r2, [r7, #32]
 800e220:	4413      	add	r3, r2
 800e222:	3304      	adds	r3, #4
 800e224:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800e226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e228:	69b9      	ldr	r1, [r7, #24]
 800e22a:	68f8      	ldr	r0, [r7, #12]
 800e22c:	f000 f86b 	bl	800e306 <USBH_ParseEPDesc>
 800e230:	4603      	mov	r3, r0
 800e232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800e236:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e23a:	3301      	adds	r3, #1
 800e23c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	791b      	ldrb	r3, [r3, #4]
 800e244:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e248:	429a      	cmp	r2, r3
 800e24a:	d204      	bcs.n	800e256 <USBH_ParseCfgDesc+0x19a>
 800e24c:	6a3b      	ldr	r3, [r7, #32]
 800e24e:	885a      	ldrh	r2, [r3, #2]
 800e250:	8afb      	ldrh	r3, [r7, #22]
 800e252:	429a      	cmp	r2, r3
 800e254:	d8b0      	bhi.n	800e1b8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	791b      	ldrb	r3, [r3, #4]
 800e25a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e25e:	429a      	cmp	r2, r3
 800e260:	d201      	bcs.n	800e266 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800e262:	2303      	movs	r3, #3
 800e264:	e01c      	b.n	800e2a0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800e266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e26a:	3301      	adds	r3, #1
 800e26c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e274:	2b01      	cmp	r3, #1
 800e276:	d805      	bhi.n	800e284 <USBH_ParseCfgDesc+0x1c8>
 800e278:	6a3b      	ldr	r3, [r7, #32]
 800e27a:	885a      	ldrh	r2, [r3, #2]
 800e27c:	8afb      	ldrh	r3, [r7, #22]
 800e27e:	429a      	cmp	r2, r3
 800e280:	f63f af74 	bhi.w	800e16c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800e284:	6a3b      	ldr	r3, [r7, #32]
 800e286:	791b      	ldrb	r3, [r3, #4]
 800e288:	2b02      	cmp	r3, #2
 800e28a:	bf28      	it	cs
 800e28c:	2302      	movcs	r3, #2
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e294:	429a      	cmp	r2, r3
 800e296:	d201      	bcs.n	800e29c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800e298:	2303      	movs	r3, #3
 800e29a:	e001      	b.n	800e2a0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800e29c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3730      	adds	r7, #48	; 0x30
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	781a      	ldrb	r2, [r3, #0]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	785a      	ldrb	r2, [r3, #1]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	789a      	ldrb	r2, [r3, #2]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	78da      	ldrb	r2, [r3, #3]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	791a      	ldrb	r2, [r3, #4]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	795a      	ldrb	r2, [r3, #5]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	799a      	ldrb	r2, [r3, #6]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	79da      	ldrb	r2, [r3, #7]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	7a1a      	ldrb	r2, [r3, #8]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	721a      	strb	r2, [r3, #8]
}
 800e2fa:	bf00      	nop
 800e2fc:	370c      	adds	r7, #12
 800e2fe:	46bd      	mov	sp, r7
 800e300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e304:	4770      	bx	lr

0800e306 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800e306:	b480      	push	{r7}
 800e308:	b087      	sub	sp, #28
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	60f8      	str	r0, [r7, #12]
 800e30e:	60b9      	str	r1, [r7, #8]
 800e310:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800e312:	2300      	movs	r3, #0
 800e314:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	781a      	ldrb	r2, [r3, #0]
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	785a      	ldrb	r2, [r3, #1]
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	789a      	ldrb	r2, [r3, #2]
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	78da      	ldrb	r2, [r3, #3]
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	3304      	adds	r3, #4
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	b29a      	uxth	r2, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	3305      	adds	r3, #5
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	b29b      	uxth	r3, r3
 800e346:	021b      	lsls	r3, r3, #8
 800e348:	b29b      	uxth	r3, r3
 800e34a:	4313      	orrs	r3, r2
 800e34c:	b29a      	uxth	r2, r3
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	799a      	ldrb	r2, [r3, #6]
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	889b      	ldrh	r3, [r3, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d102      	bne.n	800e368 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800e362:	2303      	movs	r3, #3
 800e364:	75fb      	strb	r3, [r7, #23]
 800e366:	e033      	b.n	800e3d0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	889b      	ldrh	r3, [r3, #4]
 800e36c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e370:	f023 0307 	bic.w	r3, r3, #7
 800e374:	b29a      	uxth	r2, r3
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	889b      	ldrh	r3, [r3, #4]
 800e37e:	b21a      	sxth	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	3304      	adds	r3, #4
 800e384:	781b      	ldrb	r3, [r3, #0]
 800e386:	b299      	uxth	r1, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	3305      	adds	r3, #5
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	b29b      	uxth	r3, r3
 800e390:	021b      	lsls	r3, r3, #8
 800e392:	b29b      	uxth	r3, r3
 800e394:	430b      	orrs	r3, r1
 800e396:	b29b      	uxth	r3, r3
 800e398:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d110      	bne.n	800e3c2 <USBH_ParseEPDesc+0xbc>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	3304      	adds	r3, #4
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	b299      	uxth	r1, r3
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	3305      	adds	r3, #5
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	021b      	lsls	r3, r3, #8
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	430b      	orrs	r3, r1
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	b21b      	sxth	r3, r3
 800e3ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e3be:	b21b      	sxth	r3, r3
 800e3c0:	e001      	b.n	800e3c6 <USBH_ParseEPDesc+0xc0>
 800e3c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	b21b      	sxth	r3, r3
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	68bb      	ldr	r3, [r7, #8]
 800e3ce:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d116      	bne.n	800e408 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	78db      	ldrb	r3, [r3, #3]
 800e3de:	f003 0303 	and.w	r3, r3, #3
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d005      	beq.n	800e3f2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	78db      	ldrb	r3, [r3, #3]
 800e3ea:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e3ee:	2b03      	cmp	r3, #3
 800e3f0:	d127      	bne.n	800e442 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	799b      	ldrb	r3, [r3, #6]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d003      	beq.n	800e402 <USBH_ParseEPDesc+0xfc>
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	799b      	ldrb	r3, [r3, #6]
 800e3fe:	2b10      	cmp	r3, #16
 800e400:	d91f      	bls.n	800e442 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e402:	2303      	movs	r3, #3
 800e404:	75fb      	strb	r3, [r7, #23]
 800e406:	e01c      	b.n	800e442 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	78db      	ldrb	r3, [r3, #3]
 800e40c:	f003 0303 	and.w	r3, r3, #3
 800e410:	2b01      	cmp	r3, #1
 800e412:	d10a      	bne.n	800e42a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	799b      	ldrb	r3, [r3, #6]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d003      	beq.n	800e424 <USBH_ParseEPDesc+0x11e>
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	799b      	ldrb	r3, [r3, #6]
 800e420:	2b10      	cmp	r3, #16
 800e422:	d90e      	bls.n	800e442 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e424:	2303      	movs	r3, #3
 800e426:	75fb      	strb	r3, [r7, #23]
 800e428:	e00b      	b.n	800e442 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	78db      	ldrb	r3, [r3, #3]
 800e42e:	f003 0303 	and.w	r3, r3, #3
 800e432:	2b03      	cmp	r3, #3
 800e434:	d105      	bne.n	800e442 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	799b      	ldrb	r3, [r3, #6]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d101      	bne.n	800e442 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e43e:	2303      	movs	r3, #3
 800e440:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800e442:	7dfb      	ldrb	r3, [r7, #23]
}
 800e444:	4618      	mov	r0, r3
 800e446:	371c      	adds	r7, #28
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e450:	b480      	push	{r7}
 800e452:	b087      	sub	sp, #28
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	4613      	mov	r3, r2
 800e45c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	3301      	adds	r3, #1
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	2b03      	cmp	r3, #3
 800e466:	d120      	bne.n	800e4aa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	1e9a      	subs	r2, r3, #2
 800e46e:	88fb      	ldrh	r3, [r7, #6]
 800e470:	4293      	cmp	r3, r2
 800e472:	bf28      	it	cs
 800e474:	4613      	movcs	r3, r2
 800e476:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	3302      	adds	r3, #2
 800e47c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e47e:	2300      	movs	r3, #0
 800e480:	82fb      	strh	r3, [r7, #22]
 800e482:	e00b      	b.n	800e49c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e484:	8afb      	ldrh	r3, [r7, #22]
 800e486:	68fa      	ldr	r2, [r7, #12]
 800e488:	4413      	add	r3, r2
 800e48a:	781a      	ldrb	r2, [r3, #0]
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	3301      	adds	r3, #1
 800e494:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e496:	8afb      	ldrh	r3, [r7, #22]
 800e498:	3302      	adds	r3, #2
 800e49a:	82fb      	strh	r3, [r7, #22]
 800e49c:	8afa      	ldrh	r2, [r7, #22]
 800e49e:	8abb      	ldrh	r3, [r7, #20]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d3ef      	bcc.n	800e484 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	701a      	strb	r2, [r3, #0]
  }
}
 800e4aa:	bf00      	nop
 800e4ac:	371c      	adds	r7, #28
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr

0800e4b6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e4b6:	b480      	push	{r7}
 800e4b8:	b085      	sub	sp, #20
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
 800e4be:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	881a      	ldrh	r2, [r3, #0]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	4413      	add	r3, r2
 800e4cc:	b29a      	uxth	r2, r3
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	4413      	add	r3, r2
 800e4dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e4de:	68fb      	ldr	r3, [r7, #12]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3714      	adds	r7, #20
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b086      	sub	sp, #24
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	4613      	mov	r3, r2
 800e4f8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	789b      	ldrb	r3, [r3, #2]
 800e502:	2b01      	cmp	r3, #1
 800e504:	d002      	beq.n	800e50c <USBH_CtlReq+0x20>
 800e506:	2b02      	cmp	r3, #2
 800e508:	d00f      	beq.n	800e52a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e50a:	e027      	b.n	800e55c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	68ba      	ldr	r2, [r7, #8]
 800e510:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	88fa      	ldrh	r2, [r7, #6]
 800e516:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2201      	movs	r2, #1
 800e51c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2202      	movs	r2, #2
 800e522:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e524:	2301      	movs	r3, #1
 800e526:	75fb      	strb	r3, [r7, #23]
      break;
 800e528:	e018      	b.n	800e55c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e52a:	68f8      	ldr	r0, [r7, #12]
 800e52c:	f000 f81c 	bl	800e568 <USBH_HandleControl>
 800e530:	4603      	mov	r3, r0
 800e532:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e534:	7dfb      	ldrb	r3, [r7, #23]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d002      	beq.n	800e540 <USBH_CtlReq+0x54>
 800e53a:	7dfb      	ldrb	r3, [r7, #23]
 800e53c:	2b03      	cmp	r3, #3
 800e53e:	d106      	bne.n	800e54e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2201      	movs	r2, #1
 800e544:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2200      	movs	r2, #0
 800e54a:	761a      	strb	r2, [r3, #24]
      break;
 800e54c:	e005      	b.n	800e55a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e54e:	7dfb      	ldrb	r3, [r7, #23]
 800e550:	2b02      	cmp	r3, #2
 800e552:	d102      	bne.n	800e55a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2201      	movs	r2, #1
 800e558:	709a      	strb	r2, [r3, #2]
      break;
 800e55a:	bf00      	nop
  }
  return status;
 800e55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3718      	adds	r7, #24
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
	...

0800e568 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b086      	sub	sp, #24
 800e56c:	af02      	add	r7, sp, #8
 800e56e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e570:	2301      	movs	r3, #1
 800e572:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e574:	2300      	movs	r3, #0
 800e576:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	7e1b      	ldrb	r3, [r3, #24]
 800e57c:	3b01      	subs	r3, #1
 800e57e:	2b0a      	cmp	r3, #10
 800e580:	f200 8156 	bhi.w	800e830 <USBH_HandleControl+0x2c8>
 800e584:	a201      	add	r2, pc, #4	; (adr r2, 800e58c <USBH_HandleControl+0x24>)
 800e586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e58a:	bf00      	nop
 800e58c:	0800e5b9 	.word	0x0800e5b9
 800e590:	0800e5d3 	.word	0x0800e5d3
 800e594:	0800e63d 	.word	0x0800e63d
 800e598:	0800e663 	.word	0x0800e663
 800e59c:	0800e69b 	.word	0x0800e69b
 800e5a0:	0800e6c5 	.word	0x0800e6c5
 800e5a4:	0800e717 	.word	0x0800e717
 800e5a8:	0800e739 	.word	0x0800e739
 800e5ac:	0800e775 	.word	0x0800e775
 800e5b0:	0800e79b 	.word	0x0800e79b
 800e5b4:	0800e7d9 	.word	0x0800e7d9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f103 0110 	add.w	r1, r3, #16
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	795b      	ldrb	r3, [r3, #5]
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f000 f943 	bl	800e850 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2202      	movs	r2, #2
 800e5ce:	761a      	strb	r2, [r3, #24]
      break;
 800e5d0:	e139      	b.n	800e846 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	795b      	ldrb	r3, [r3, #5]
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f000 fcc5 	bl	800ef68 <USBH_LL_GetURBState>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e5e2:	7bbb      	ldrb	r3, [r7, #14]
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d11e      	bne.n	800e626 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	7c1b      	ldrb	r3, [r3, #16]
 800e5ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e5f0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	8adb      	ldrh	r3, [r3, #22]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00a      	beq.n	800e610 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e5fa:	7b7b      	ldrb	r3, [r7, #13]
 800e5fc:	2b80      	cmp	r3, #128	; 0x80
 800e5fe:	d103      	bne.n	800e608 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2203      	movs	r2, #3
 800e604:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e606:	e115      	b.n	800e834 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2205      	movs	r2, #5
 800e60c:	761a      	strb	r2, [r3, #24]
      break;
 800e60e:	e111      	b.n	800e834 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800e610:	7b7b      	ldrb	r3, [r7, #13]
 800e612:	2b80      	cmp	r3, #128	; 0x80
 800e614:	d103      	bne.n	800e61e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2209      	movs	r2, #9
 800e61a:	761a      	strb	r2, [r3, #24]
      break;
 800e61c:	e10a      	b.n	800e834 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2207      	movs	r2, #7
 800e622:	761a      	strb	r2, [r3, #24]
      break;
 800e624:	e106      	b.n	800e834 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e626:	7bbb      	ldrb	r3, [r7, #14]
 800e628:	2b04      	cmp	r3, #4
 800e62a:	d003      	beq.n	800e634 <USBH_HandleControl+0xcc>
 800e62c:	7bbb      	ldrb	r3, [r7, #14]
 800e62e:	2b02      	cmp	r3, #2
 800e630:	f040 8100 	bne.w	800e834 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	220b      	movs	r2, #11
 800e638:	761a      	strb	r2, [r3, #24]
      break;
 800e63a:	e0fb      	b.n	800e834 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e642:	b29a      	uxth	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6899      	ldr	r1, [r3, #8]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	899a      	ldrh	r2, [r3, #12]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	791b      	ldrb	r3, [r3, #4]
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f000 f93a 	bl	800e8ce <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2204      	movs	r2, #4
 800e65e:	761a      	strb	r2, [r3, #24]
      break;
 800e660:	e0f1      	b.n	800e846 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	791b      	ldrb	r3, [r3, #4]
 800e666:	4619      	mov	r1, r3
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f000 fc7d 	bl	800ef68 <USBH_LL_GetURBState>
 800e66e:	4603      	mov	r3, r0
 800e670:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e672:	7bbb      	ldrb	r3, [r7, #14]
 800e674:	2b01      	cmp	r3, #1
 800e676:	d102      	bne.n	800e67e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2209      	movs	r2, #9
 800e67c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e67e:	7bbb      	ldrb	r3, [r7, #14]
 800e680:	2b05      	cmp	r3, #5
 800e682:	d102      	bne.n	800e68a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e684:	2303      	movs	r3, #3
 800e686:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e688:	e0d6      	b.n	800e838 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800e68a:	7bbb      	ldrb	r3, [r7, #14]
 800e68c:	2b04      	cmp	r3, #4
 800e68e:	f040 80d3 	bne.w	800e838 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	220b      	movs	r2, #11
 800e696:	761a      	strb	r2, [r3, #24]
      break;
 800e698:	e0ce      	b.n	800e838 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6899      	ldr	r1, [r3, #8]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	899a      	ldrh	r2, [r3, #12]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	795b      	ldrb	r3, [r3, #5]
 800e6a6:	2001      	movs	r0, #1
 800e6a8:	9000      	str	r0, [sp, #0]
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 f8ea 	bl	800e884 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e6b6:	b29a      	uxth	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2206      	movs	r2, #6
 800e6c0:	761a      	strb	r2, [r3, #24]
      break;
 800e6c2:	e0c0      	b.n	800e846 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	795b      	ldrb	r3, [r3, #5]
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f000 fc4c 	bl	800ef68 <USBH_LL_GetURBState>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e6d4:	7bbb      	ldrb	r3, [r7, #14]
 800e6d6:	2b01      	cmp	r3, #1
 800e6d8:	d103      	bne.n	800e6e2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2207      	movs	r2, #7
 800e6de:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e6e0:	e0ac      	b.n	800e83c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e6e2:	7bbb      	ldrb	r3, [r7, #14]
 800e6e4:	2b05      	cmp	r3, #5
 800e6e6:	d105      	bne.n	800e6f4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	220c      	movs	r2, #12
 800e6ec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e6ee:	2303      	movs	r3, #3
 800e6f0:	73fb      	strb	r3, [r7, #15]
      break;
 800e6f2:	e0a3      	b.n	800e83c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e6f4:	7bbb      	ldrb	r3, [r7, #14]
 800e6f6:	2b02      	cmp	r3, #2
 800e6f8:	d103      	bne.n	800e702 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2205      	movs	r2, #5
 800e6fe:	761a      	strb	r2, [r3, #24]
      break;
 800e700:	e09c      	b.n	800e83c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e702:	7bbb      	ldrb	r3, [r7, #14]
 800e704:	2b04      	cmp	r3, #4
 800e706:	f040 8099 	bne.w	800e83c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	220b      	movs	r2, #11
 800e70e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e710:	2302      	movs	r3, #2
 800e712:	73fb      	strb	r3, [r7, #15]
      break;
 800e714:	e092      	b.n	800e83c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	791b      	ldrb	r3, [r3, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	2100      	movs	r1, #0
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 f8d5 	bl	800e8ce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e72a:	b29a      	uxth	r2, r3
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2208      	movs	r2, #8
 800e734:	761a      	strb	r2, [r3, #24]

      break;
 800e736:	e086      	b.n	800e846 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	791b      	ldrb	r3, [r3, #4]
 800e73c:	4619      	mov	r1, r3
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f000 fc12 	bl	800ef68 <USBH_LL_GetURBState>
 800e744:	4603      	mov	r3, r0
 800e746:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e748:	7bbb      	ldrb	r3, [r7, #14]
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d105      	bne.n	800e75a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	220d      	movs	r2, #13
 800e752:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e754:	2300      	movs	r3, #0
 800e756:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e758:	e072      	b.n	800e840 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e75a:	7bbb      	ldrb	r3, [r7, #14]
 800e75c:	2b04      	cmp	r3, #4
 800e75e:	d103      	bne.n	800e768 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	220b      	movs	r2, #11
 800e764:	761a      	strb	r2, [r3, #24]
      break;
 800e766:	e06b      	b.n	800e840 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e768:	7bbb      	ldrb	r3, [r7, #14]
 800e76a:	2b05      	cmp	r3, #5
 800e76c:	d168      	bne.n	800e840 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e76e:	2303      	movs	r3, #3
 800e770:	73fb      	strb	r3, [r7, #15]
      break;
 800e772:	e065      	b.n	800e840 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	795b      	ldrb	r3, [r3, #5]
 800e778:	2201      	movs	r2, #1
 800e77a:	9200      	str	r2, [sp, #0]
 800e77c:	2200      	movs	r2, #0
 800e77e:	2100      	movs	r1, #0
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f000 f87f 	bl	800e884 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e78c:	b29a      	uxth	r2, r3
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	220a      	movs	r2, #10
 800e796:	761a      	strb	r2, [r3, #24]
      break;
 800e798:	e055      	b.n	800e846 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	795b      	ldrb	r3, [r3, #5]
 800e79e:	4619      	mov	r1, r3
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f000 fbe1 	bl	800ef68 <USBH_LL_GetURBState>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e7aa:	7bbb      	ldrb	r3, [r7, #14]
 800e7ac:	2b01      	cmp	r3, #1
 800e7ae:	d105      	bne.n	800e7bc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	220d      	movs	r2, #13
 800e7b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e7ba:	e043      	b.n	800e844 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e7bc:	7bbb      	ldrb	r3, [r7, #14]
 800e7be:	2b02      	cmp	r3, #2
 800e7c0:	d103      	bne.n	800e7ca <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2209      	movs	r2, #9
 800e7c6:	761a      	strb	r2, [r3, #24]
      break;
 800e7c8:	e03c      	b.n	800e844 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e7ca:	7bbb      	ldrb	r3, [r7, #14]
 800e7cc:	2b04      	cmp	r3, #4
 800e7ce:	d139      	bne.n	800e844 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	220b      	movs	r2, #11
 800e7d4:	761a      	strb	r2, [r3, #24]
      break;
 800e7d6:	e035      	b.n	800e844 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	7e5b      	ldrb	r3, [r3, #25]
 800e7dc:	3301      	adds	r3, #1
 800e7de:	b2da      	uxtb	r2, r3
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	765a      	strb	r2, [r3, #25]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	7e5b      	ldrb	r3, [r3, #25]
 800e7e8:	2b02      	cmp	r3, #2
 800e7ea:	d806      	bhi.n	800e7fa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e7f8:	e025      	b.n	800e846 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e800:	2106      	movs	r1, #6
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2200      	movs	r2, #0
 800e80a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	795b      	ldrb	r3, [r3, #5]
 800e810:	4619      	mov	r1, r3
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f000 f90c 	bl	800ea30 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	791b      	ldrb	r3, [r3, #4]
 800e81c:	4619      	mov	r1, r3
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 f906 	bl	800ea30 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2200      	movs	r2, #0
 800e828:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e82a:	2302      	movs	r3, #2
 800e82c:	73fb      	strb	r3, [r7, #15]
      break;
 800e82e:	e00a      	b.n	800e846 <USBH_HandleControl+0x2de>

    default:
      break;
 800e830:	bf00      	nop
 800e832:	e008      	b.n	800e846 <USBH_HandleControl+0x2de>
      break;
 800e834:	bf00      	nop
 800e836:	e006      	b.n	800e846 <USBH_HandleControl+0x2de>
      break;
 800e838:	bf00      	nop
 800e83a:	e004      	b.n	800e846 <USBH_HandleControl+0x2de>
      break;
 800e83c:	bf00      	nop
 800e83e:	e002      	b.n	800e846 <USBH_HandleControl+0x2de>
      break;
 800e840:	bf00      	nop
 800e842:	e000      	b.n	800e846 <USBH_HandleControl+0x2de>
      break;
 800e844:	bf00      	nop
  }

  return status;
 800e846:	7bfb      	ldrb	r3, [r7, #15]
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3710      	adds	r7, #16
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b088      	sub	sp, #32
 800e854:	af04      	add	r7, sp, #16
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	4613      	mov	r3, r2
 800e85c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e85e:	79f9      	ldrb	r1, [r7, #7]
 800e860:	2300      	movs	r3, #0
 800e862:	9303      	str	r3, [sp, #12]
 800e864:	2308      	movs	r3, #8
 800e866:	9302      	str	r3, [sp, #8]
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	9301      	str	r3, [sp, #4]
 800e86c:	2300      	movs	r3, #0
 800e86e:	9300      	str	r3, [sp, #0]
 800e870:	2300      	movs	r3, #0
 800e872:	2200      	movs	r2, #0
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f000 fb46 	bl	800ef06 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e87a:	2300      	movs	r3, #0
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b088      	sub	sp, #32
 800e888:	af04      	add	r7, sp, #16
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	4611      	mov	r1, r2
 800e890:	461a      	mov	r2, r3
 800e892:	460b      	mov	r3, r1
 800e894:	80fb      	strh	r3, [r7, #6]
 800e896:	4613      	mov	r3, r2
 800e898:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d001      	beq.n	800e8a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e8a8:	7979      	ldrb	r1, [r7, #5]
 800e8aa:	7e3b      	ldrb	r3, [r7, #24]
 800e8ac:	9303      	str	r3, [sp, #12]
 800e8ae:	88fb      	ldrh	r3, [r7, #6]
 800e8b0:	9302      	str	r3, [sp, #8]
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	9301      	str	r3, [sp, #4]
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	9300      	str	r3, [sp, #0]
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	2200      	movs	r2, #0
 800e8be:	68f8      	ldr	r0, [r7, #12]
 800e8c0:	f000 fb21 	bl	800ef06 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e8c4:	2300      	movs	r3, #0
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3710      	adds	r7, #16
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}

0800e8ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e8ce:	b580      	push	{r7, lr}
 800e8d0:	b088      	sub	sp, #32
 800e8d2:	af04      	add	r7, sp, #16
 800e8d4:	60f8      	str	r0, [r7, #12]
 800e8d6:	60b9      	str	r1, [r7, #8]
 800e8d8:	4611      	mov	r1, r2
 800e8da:	461a      	mov	r2, r3
 800e8dc:	460b      	mov	r3, r1
 800e8de:	80fb      	strh	r3, [r7, #6]
 800e8e0:	4613      	mov	r3, r2
 800e8e2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e8e4:	7979      	ldrb	r1, [r7, #5]
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	9303      	str	r3, [sp, #12]
 800e8ea:	88fb      	ldrh	r3, [r7, #6]
 800e8ec:	9302      	str	r3, [sp, #8]
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	9301      	str	r3, [sp, #4]
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	9300      	str	r3, [sp, #0]
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	68f8      	ldr	r0, [r7, #12]
 800e8fc:	f000 fb03 	bl	800ef06 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e900:	2300      	movs	r3, #0

}
 800e902:	4618      	mov	r0, r3
 800e904:	3710      	adds	r7, #16
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b088      	sub	sp, #32
 800e90e:	af04      	add	r7, sp, #16
 800e910:	60f8      	str	r0, [r7, #12]
 800e912:	60b9      	str	r1, [r7, #8]
 800e914:	4611      	mov	r1, r2
 800e916:	461a      	mov	r2, r3
 800e918:	460b      	mov	r3, r1
 800e91a:	80fb      	strh	r3, [r7, #6]
 800e91c:	4613      	mov	r3, r2
 800e91e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e926:	2b00      	cmp	r3, #0
 800e928:	d001      	beq.n	800e92e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e92a:	2300      	movs	r3, #0
 800e92c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e92e:	7979      	ldrb	r1, [r7, #5]
 800e930:	7e3b      	ldrb	r3, [r7, #24]
 800e932:	9303      	str	r3, [sp, #12]
 800e934:	88fb      	ldrh	r3, [r7, #6]
 800e936:	9302      	str	r3, [sp, #8]
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	9301      	str	r3, [sp, #4]
 800e93c:	2301      	movs	r3, #1
 800e93e:	9300      	str	r3, [sp, #0]
 800e940:	2302      	movs	r3, #2
 800e942:	2200      	movs	r2, #0
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	f000 fade 	bl	800ef06 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e94a:	2300      	movs	r3, #0
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3710      	adds	r7, #16
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b088      	sub	sp, #32
 800e958:	af04      	add	r7, sp, #16
 800e95a:	60f8      	str	r0, [r7, #12]
 800e95c:	60b9      	str	r1, [r7, #8]
 800e95e:	4611      	mov	r1, r2
 800e960:	461a      	mov	r2, r3
 800e962:	460b      	mov	r3, r1
 800e964:	80fb      	strh	r3, [r7, #6]
 800e966:	4613      	mov	r3, r2
 800e968:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e96a:	7979      	ldrb	r1, [r7, #5]
 800e96c:	2300      	movs	r3, #0
 800e96e:	9303      	str	r3, [sp, #12]
 800e970:	88fb      	ldrh	r3, [r7, #6]
 800e972:	9302      	str	r3, [sp, #8]
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	9301      	str	r3, [sp, #4]
 800e978:	2301      	movs	r3, #1
 800e97a:	9300      	str	r3, [sp, #0]
 800e97c:	2302      	movs	r3, #2
 800e97e:	2201      	movs	r2, #1
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	f000 fac0 	bl	800ef06 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e986:	2300      	movs	r3, #0
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3710      	adds	r7, #16
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b086      	sub	sp, #24
 800e994:	af04      	add	r7, sp, #16
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	4608      	mov	r0, r1
 800e99a:	4611      	mov	r1, r2
 800e99c:	461a      	mov	r2, r3
 800e99e:	4603      	mov	r3, r0
 800e9a0:	70fb      	strb	r3, [r7, #3]
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	70bb      	strb	r3, [r7, #2]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e9aa:	7878      	ldrb	r0, [r7, #1]
 800e9ac:	78ba      	ldrb	r2, [r7, #2]
 800e9ae:	78f9      	ldrb	r1, [r7, #3]
 800e9b0:	8b3b      	ldrh	r3, [r7, #24]
 800e9b2:	9302      	str	r3, [sp, #8]
 800e9b4:	7d3b      	ldrb	r3, [r7, #20]
 800e9b6:	9301      	str	r3, [sp, #4]
 800e9b8:	7c3b      	ldrb	r3, [r7, #16]
 800e9ba:	9300      	str	r3, [sp, #0]
 800e9bc:	4603      	mov	r3, r0
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 fa53 	bl	800ee6a <USBH_LL_OpenPipe>

  return USBH_OK;
 800e9c4:	2300      	movs	r3, #0
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3708      	adds	r7, #8
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e9ce:	b580      	push	{r7, lr}
 800e9d0:	b082      	sub	sp, #8
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e9da:	78fb      	ldrb	r3, [r7, #3]
 800e9dc:	4619      	mov	r1, r3
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f000 fa72 	bl	800eec8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e9e4:	2300      	movs	r3, #0
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3708      	adds	r7, #8
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b084      	sub	sp, #16
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f000 f836 	bl	800ea6c <USBH_GetFreePipe>
 800ea00:	4603      	mov	r3, r0
 800ea02:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ea04:	89fb      	ldrh	r3, [r7, #14]
 800ea06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d00a      	beq.n	800ea24 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ea0e:	78fa      	ldrb	r2, [r7, #3]
 800ea10:	89fb      	ldrh	r3, [r7, #14]
 800ea12:	f003 030f 	and.w	r3, r3, #15
 800ea16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ea1a:	6879      	ldr	r1, [r7, #4]
 800ea1c:	33e0      	adds	r3, #224	; 0xe0
 800ea1e:	009b      	lsls	r3, r3, #2
 800ea20:	440b      	add	r3, r1
 800ea22:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ea24:	89fb      	ldrh	r3, [r7, #14]
 800ea26:	b2db      	uxtb	r3, r3
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3710      	adds	r7, #16
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	460b      	mov	r3, r1
 800ea3a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ea3c:	78fb      	ldrb	r3, [r7, #3]
 800ea3e:	2b0f      	cmp	r3, #15
 800ea40:	d80d      	bhi.n	800ea5e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ea42:	78fb      	ldrb	r3, [r7, #3]
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	33e0      	adds	r3, #224	; 0xe0
 800ea48:	009b      	lsls	r3, r3, #2
 800ea4a:	4413      	add	r3, r2
 800ea4c:	685a      	ldr	r2, [r3, #4]
 800ea4e:	78fb      	ldrb	r3, [r7, #3]
 800ea50:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ea54:	6879      	ldr	r1, [r7, #4]
 800ea56:	33e0      	adds	r3, #224	; 0xe0
 800ea58:	009b      	lsls	r3, r3, #2
 800ea5a:	440b      	add	r3, r1
 800ea5c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ea5e:	2300      	movs	r3, #0
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b085      	sub	sp, #20
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ea74:	2300      	movs	r3, #0
 800ea76:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ea78:	2300      	movs	r3, #0
 800ea7a:	73fb      	strb	r3, [r7, #15]
 800ea7c:	e00f      	b.n	800ea9e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ea7e:	7bfb      	ldrb	r3, [r7, #15]
 800ea80:	687a      	ldr	r2, [r7, #4]
 800ea82:	33e0      	adds	r3, #224	; 0xe0
 800ea84:	009b      	lsls	r3, r3, #2
 800ea86:	4413      	add	r3, r2
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d102      	bne.n	800ea98 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ea92:	7bfb      	ldrb	r3, [r7, #15]
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	e007      	b.n	800eaa8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ea98:	7bfb      	ldrb	r3, [r7, #15]
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	73fb      	strb	r3, [r7, #15]
 800ea9e:	7bfb      	ldrb	r3, [r7, #15]
 800eaa0:	2b0f      	cmp	r3, #15
 800eaa2:	d9ec      	bls.n	800ea7e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800eaa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3714      	adds	r7, #20
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr

0800eab4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800eab8:	2201      	movs	r2, #1
 800eaba:	490e      	ldr	r1, [pc, #56]	; (800eaf4 <MX_USB_HOST_Init+0x40>)
 800eabc:	480e      	ldr	r0, [pc, #56]	; (800eaf8 <MX_USB_HOST_Init+0x44>)
 800eabe:	f7fe fba7 	bl	800d210 <USBH_Init>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d001      	beq.n	800eacc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800eac8:	f7f3 fbfa 	bl	80022c0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800eacc:	490b      	ldr	r1, [pc, #44]	; (800eafc <MX_USB_HOST_Init+0x48>)
 800eace:	480a      	ldr	r0, [pc, #40]	; (800eaf8 <MX_USB_HOST_Init+0x44>)
 800ead0:	f7fe fc2c 	bl	800d32c <USBH_RegisterClass>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d001      	beq.n	800eade <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800eada:	f7f3 fbf1 	bl	80022c0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800eade:	4806      	ldr	r0, [pc, #24]	; (800eaf8 <MX_USB_HOST_Init+0x44>)
 800eae0:	f7fe fcb0 	bl	800d444 <USBH_Start>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d001      	beq.n	800eaee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800eaea:	f7f3 fbe9 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800eaee:	bf00      	nop
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	0800eb15 	.word	0x0800eb15
 800eaf8:	20001738 	.word	0x20001738
 800eafc:	20000024 	.word	0x20000024

0800eb00 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800eb04:	4802      	ldr	r0, [pc, #8]	; (800eb10 <MX_USB_HOST_Process+0x10>)
 800eb06:	f7fe fcad 	bl	800d464 <USBH_Process>
}
 800eb0a:	bf00      	nop
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	20001738 	.word	0x20001738

0800eb14 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800eb20:	78fb      	ldrb	r3, [r7, #3]
 800eb22:	3b01      	subs	r3, #1
 800eb24:	2b04      	cmp	r3, #4
 800eb26:	d819      	bhi.n	800eb5c <USBH_UserProcess+0x48>
 800eb28:	a201      	add	r2, pc, #4	; (adr r2, 800eb30 <USBH_UserProcess+0x1c>)
 800eb2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb2e:	bf00      	nop
 800eb30:	0800eb5d 	.word	0x0800eb5d
 800eb34:	0800eb4d 	.word	0x0800eb4d
 800eb38:	0800eb5d 	.word	0x0800eb5d
 800eb3c:	0800eb55 	.word	0x0800eb55
 800eb40:	0800eb45 	.word	0x0800eb45
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800eb44:	4b09      	ldr	r3, [pc, #36]	; (800eb6c <USBH_UserProcess+0x58>)
 800eb46:	2203      	movs	r2, #3
 800eb48:	701a      	strb	r2, [r3, #0]
  break;
 800eb4a:	e008      	b.n	800eb5e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800eb4c:	4b07      	ldr	r3, [pc, #28]	; (800eb6c <USBH_UserProcess+0x58>)
 800eb4e:	2202      	movs	r2, #2
 800eb50:	701a      	strb	r2, [r3, #0]
  break;
 800eb52:	e004      	b.n	800eb5e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800eb54:	4b05      	ldr	r3, [pc, #20]	; (800eb6c <USBH_UserProcess+0x58>)
 800eb56:	2201      	movs	r2, #1
 800eb58:	701a      	strb	r2, [r3, #0]
  break;
 800eb5a:	e000      	b.n	800eb5e <USBH_UserProcess+0x4a>

  default:
  break;
 800eb5c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800eb5e:	bf00      	nop
 800eb60:	370c      	adds	r7, #12
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr
 800eb6a:	bf00      	nop
 800eb6c:	200016e4 	.word	0x200016e4

0800eb70 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b08a      	sub	sp, #40	; 0x28
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb78:	f107 0314 	add.w	r3, r7, #20
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	601a      	str	r2, [r3, #0]
 800eb80:	605a      	str	r2, [r3, #4]
 800eb82:	609a      	str	r2, [r3, #8]
 800eb84:	60da      	str	r2, [r3, #12]
 800eb86:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eb90:	d147      	bne.n	800ec22 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb92:	2300      	movs	r3, #0
 800eb94:	613b      	str	r3, [r7, #16]
 800eb96:	4b25      	ldr	r3, [pc, #148]	; (800ec2c <HAL_HCD_MspInit+0xbc>)
 800eb98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb9a:	4a24      	ldr	r2, [pc, #144]	; (800ec2c <HAL_HCD_MspInit+0xbc>)
 800eb9c:	f043 0301 	orr.w	r3, r3, #1
 800eba0:	6313      	str	r3, [r2, #48]	; 0x30
 800eba2:	4b22      	ldr	r3, [pc, #136]	; (800ec2c <HAL_HCD_MspInit+0xbc>)
 800eba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eba6:	f003 0301 	and.w	r3, r3, #1
 800ebaa:	613b      	str	r3, [r7, #16]
 800ebac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ebae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ebbc:	f107 0314 	add.w	r3, r7, #20
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	481b      	ldr	r0, [pc, #108]	; (800ec30 <HAL_HCD_MspInit+0xc0>)
 800ebc4:	f7f7 fbbc 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ebc8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ebcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebce:	2302      	movs	r3, #2
 800ebd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ebd6:	2303      	movs	r3, #3
 800ebd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ebda:	230a      	movs	r3, #10
 800ebdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ebde:	f107 0314 	add.w	r3, r7, #20
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	4812      	ldr	r0, [pc, #72]	; (800ec30 <HAL_HCD_MspInit+0xc0>)
 800ebe6:	f7f7 fbab 	bl	8006340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ebea:	4b10      	ldr	r3, [pc, #64]	; (800ec2c <HAL_HCD_MspInit+0xbc>)
 800ebec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebee:	4a0f      	ldr	r2, [pc, #60]	; (800ec2c <HAL_HCD_MspInit+0xbc>)
 800ebf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebf4:	6353      	str	r3, [r2, #52]	; 0x34
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	60fb      	str	r3, [r7, #12]
 800ebfa:	4b0c      	ldr	r3, [pc, #48]	; (800ec2c <HAL_HCD_MspInit+0xbc>)
 800ebfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebfe:	4a0b      	ldr	r2, [pc, #44]	; (800ec2c <HAL_HCD_MspInit+0xbc>)
 800ec00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ec04:	6453      	str	r3, [r2, #68]	; 0x44
 800ec06:	4b09      	ldr	r3, [pc, #36]	; (800ec2c <HAL_HCD_MspInit+0xbc>)
 800ec08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec0e:	60fb      	str	r3, [r7, #12]
 800ec10:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ec12:	2200      	movs	r2, #0
 800ec14:	2100      	movs	r1, #0
 800ec16:	2043      	movs	r0, #67	; 0x43
 800ec18:	f7f6 ff59 	bl	8005ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ec1c:	2043      	movs	r0, #67	; 0x43
 800ec1e:	f7f6 ff72 	bl	8005b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ec22:	bf00      	nop
 800ec24:	3728      	adds	r7, #40	; 0x28
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	40023800 	.word	0x40023800
 800ec30:	40020000 	.word	0x40020000

0800ec34 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7fe ffed 	bl	800dc22 <USBH_LL_IncTimer>
}
 800ec48:	bf00      	nop
 800ec4a:	3708      	adds	r7, #8
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b082      	sub	sp, #8
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7ff f825 	bl	800dcae <USBH_LL_Connect>
}
 800ec64:	bf00      	nop
 800ec66:	3708      	adds	r7, #8
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7ff f82e 	bl	800dcdc <USBH_LL_Disconnect>
}
 800ec80:	bf00      	nop
 800ec82:	3708      	adds	r7, #8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	460b      	mov	r3, r1
 800ec92:	70fb      	strb	r3, [r7, #3]
 800ec94:	4613      	mov	r3, r2
 800ec96:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ec98:	bf00      	nop
 800ec9a:	370c      	adds	r7, #12
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr

0800eca4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b082      	sub	sp, #8
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fe ffdf 	bl	800dc76 <USBH_LL_PortEnabled>
}
 800ecb8:	bf00      	nop
 800ecba:	3708      	adds	r7, #8
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}

0800ecc0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b082      	sub	sp, #8
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fe ffdf 	bl	800dc92 <USBH_LL_PortDisabled>
}
 800ecd4:	bf00      	nop
 800ecd6:	3708      	adds	r7, #8
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d12a      	bne.n	800ed44 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ecee:	4a18      	ldr	r2, [pc, #96]	; (800ed50 <USBH_LL_Init+0x74>)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	4a15      	ldr	r2, [pc, #84]	; (800ed50 <USBH_LL_Init+0x74>)
 800ecfa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ecfe:	4b14      	ldr	r3, [pc, #80]	; (800ed50 <USBH_LL_Init+0x74>)
 800ed00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ed04:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ed06:	4b12      	ldr	r3, [pc, #72]	; (800ed50 <USBH_LL_Init+0x74>)
 800ed08:	2208      	movs	r2, #8
 800ed0a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ed0c:	4b10      	ldr	r3, [pc, #64]	; (800ed50 <USBH_LL_Init+0x74>)
 800ed0e:	2201      	movs	r2, #1
 800ed10:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ed12:	4b0f      	ldr	r3, [pc, #60]	; (800ed50 <USBH_LL_Init+0x74>)
 800ed14:	2200      	movs	r2, #0
 800ed16:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ed18:	4b0d      	ldr	r3, [pc, #52]	; (800ed50 <USBH_LL_Init+0x74>)
 800ed1a:	2202      	movs	r2, #2
 800ed1c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ed1e:	4b0c      	ldr	r3, [pc, #48]	; (800ed50 <USBH_LL_Init+0x74>)
 800ed20:	2200      	movs	r2, #0
 800ed22:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ed24:	480a      	ldr	r0, [pc, #40]	; (800ed50 <USBH_LL_Init+0x74>)
 800ed26:	f7f7 fcf3 	bl	8006710 <HAL_HCD_Init>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d001      	beq.n	800ed34 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ed30:	f7f3 fac6 	bl	80022c0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ed34:	4806      	ldr	r0, [pc, #24]	; (800ed50 <USBH_LL_Init+0x74>)
 800ed36:	f7f8 f8d6 	bl	8006ee6 <HAL_HCD_GetCurrentFrame>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	4619      	mov	r1, r3
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f7fe ff60 	bl	800dc04 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ed44:	2300      	movs	r3, #0
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3708      	adds	r7, #8
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	20001b10 	.word	0x20001b10

0800ed54 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed60:	2300      	movs	r3, #0
 800ed62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7f8 f845 	bl	8006dfa <HAL_HCD_Start>
 800ed70:	4603      	mov	r3, r0
 800ed72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ed74:	7bfb      	ldrb	r3, [r7, #15]
 800ed76:	4618      	mov	r0, r3
 800ed78:	f000 f95c 	bl	800f034 <USBH_Get_USB_Status>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3710      	adds	r7, #16
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}

0800ed8a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b084      	sub	sp, #16
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed92:	2300      	movs	r3, #0
 800ed94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed96:	2300      	movs	r3, #0
 800ed98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7f8 f84d 	bl	8006e40 <HAL_HCD_Stop>
 800eda6:	4603      	mov	r3, r0
 800eda8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800edaa:	7bfb      	ldrb	r3, [r7, #15]
 800edac:	4618      	mov	r0, r3
 800edae:	f000 f941 	bl	800f034 <USBH_Get_USB_Status>
 800edb2:	4603      	mov	r3, r0
 800edb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800edb8:	4618      	mov	r0, r3
 800edba:	3710      	adds	r7, #16
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}

0800edc0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b084      	sub	sp, #16
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800edc8:	2301      	movs	r3, #1
 800edca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7f8 f895 	bl	8006f02 <HAL_HCD_GetCurrentSpeed>
 800edd8:	4603      	mov	r3, r0
 800edda:	2b02      	cmp	r3, #2
 800eddc:	d00c      	beq.n	800edf8 <USBH_LL_GetSpeed+0x38>
 800edde:	2b02      	cmp	r3, #2
 800ede0:	d80d      	bhi.n	800edfe <USBH_LL_GetSpeed+0x3e>
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d002      	beq.n	800edec <USBH_LL_GetSpeed+0x2c>
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d003      	beq.n	800edf2 <USBH_LL_GetSpeed+0x32>
 800edea:	e008      	b.n	800edfe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800edec:	2300      	movs	r3, #0
 800edee:	73fb      	strb	r3, [r7, #15]
    break;
 800edf0:	e008      	b.n	800ee04 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800edf2:	2301      	movs	r3, #1
 800edf4:	73fb      	strb	r3, [r7, #15]
    break;
 800edf6:	e005      	b.n	800ee04 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800edf8:	2302      	movs	r3, #2
 800edfa:	73fb      	strb	r3, [r7, #15]
    break;
 800edfc:	e002      	b.n	800ee04 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800edfe:	2301      	movs	r3, #1
 800ee00:	73fb      	strb	r3, [r7, #15]
    break;
 800ee02:	bf00      	nop
  }
  return  speed;
 800ee04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3710      	adds	r7, #16
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}

0800ee0e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ee0e:	b580      	push	{r7, lr}
 800ee10:	b084      	sub	sp, #16
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee16:	2300      	movs	r3, #0
 800ee18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7f8 f828 	bl	8006e7a <HAL_HCD_ResetPort>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee2e:	7bfb      	ldrb	r3, [r7, #15]
 800ee30:	4618      	mov	r0, r3
 800ee32:	f000 f8ff 	bl	800f034 <USBH_Get_USB_Status>
 800ee36:	4603      	mov	r3, r0
 800ee38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3710      	adds	r7, #16
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee56:	78fa      	ldrb	r2, [r7, #3]
 800ee58:	4611      	mov	r1, r2
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7f8 f82f 	bl	8006ebe <HAL_HCD_HC_GetXferCount>
 800ee60:	4603      	mov	r3, r0
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3708      	adds	r7, #8
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}

0800ee6a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ee6a:	b590      	push	{r4, r7, lr}
 800ee6c:	b089      	sub	sp, #36	; 0x24
 800ee6e:	af04      	add	r7, sp, #16
 800ee70:	6078      	str	r0, [r7, #4]
 800ee72:	4608      	mov	r0, r1
 800ee74:	4611      	mov	r1, r2
 800ee76:	461a      	mov	r2, r3
 800ee78:	4603      	mov	r3, r0
 800ee7a:	70fb      	strb	r3, [r7, #3]
 800ee7c:	460b      	mov	r3, r1
 800ee7e:	70bb      	strb	r3, [r7, #2]
 800ee80:	4613      	mov	r3, r2
 800ee82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee84:	2300      	movs	r3, #0
 800ee86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ee92:	787c      	ldrb	r4, [r7, #1]
 800ee94:	78ba      	ldrb	r2, [r7, #2]
 800ee96:	78f9      	ldrb	r1, [r7, #3]
 800ee98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ee9a:	9302      	str	r3, [sp, #8]
 800ee9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eea0:	9301      	str	r3, [sp, #4]
 800eea2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eea6:	9300      	str	r3, [sp, #0]
 800eea8:	4623      	mov	r3, r4
 800eeaa:	f7f7 fc93 	bl	80067d4 <HAL_HCD_HC_Init>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800eeb2:	7bfb      	ldrb	r3, [r7, #15]
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f000 f8bd 	bl	800f034 <USBH_Get_USB_Status>
 800eeba:	4603      	mov	r3, r0
 800eebc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eebe:	7bbb      	ldrb	r3, [r7, #14]
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3714      	adds	r7, #20
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd90      	pop	{r4, r7, pc}

0800eec8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	460b      	mov	r3, r1
 800eed2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eed4:	2300      	movs	r3, #0
 800eed6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eed8:	2300      	movs	r3, #0
 800eeda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eee2:	78fa      	ldrb	r2, [r7, #3]
 800eee4:	4611      	mov	r1, r2
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7f7 fd03 	bl	80068f2 <HAL_HCD_HC_Halt>
 800eeec:	4603      	mov	r3, r0
 800eeee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eef0:	7bfb      	ldrb	r3, [r7, #15]
 800eef2:	4618      	mov	r0, r3
 800eef4:	f000 f89e 	bl	800f034 <USBH_Get_USB_Status>
 800eef8:	4603      	mov	r3, r0
 800eefa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eefc:	7bbb      	ldrb	r3, [r7, #14]
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3710      	adds	r7, #16
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}

0800ef06 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ef06:	b590      	push	{r4, r7, lr}
 800ef08:	b089      	sub	sp, #36	; 0x24
 800ef0a:	af04      	add	r7, sp, #16
 800ef0c:	6078      	str	r0, [r7, #4]
 800ef0e:	4608      	mov	r0, r1
 800ef10:	4611      	mov	r1, r2
 800ef12:	461a      	mov	r2, r3
 800ef14:	4603      	mov	r3, r0
 800ef16:	70fb      	strb	r3, [r7, #3]
 800ef18:	460b      	mov	r3, r1
 800ef1a:	70bb      	strb	r3, [r7, #2]
 800ef1c:	4613      	mov	r3, r2
 800ef1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef20:	2300      	movs	r3, #0
 800ef22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef24:	2300      	movs	r3, #0
 800ef26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ef2e:	787c      	ldrb	r4, [r7, #1]
 800ef30:	78ba      	ldrb	r2, [r7, #2]
 800ef32:	78f9      	ldrb	r1, [r7, #3]
 800ef34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ef38:	9303      	str	r3, [sp, #12]
 800ef3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ef3c:	9302      	str	r3, [sp, #8]
 800ef3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef40:	9301      	str	r3, [sp, #4]
 800ef42:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef46:	9300      	str	r3, [sp, #0]
 800ef48:	4623      	mov	r3, r4
 800ef4a:	f7f7 fcf5 	bl	8006938 <HAL_HCD_HC_SubmitRequest>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ef52:	7bfb      	ldrb	r3, [r7, #15]
 800ef54:	4618      	mov	r0, r3
 800ef56:	f000 f86d 	bl	800f034 <USBH_Get_USB_Status>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3714      	adds	r7, #20
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd90      	pop	{r4, r7, pc}

0800ef68 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	460b      	mov	r3, r1
 800ef72:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ef7a:	78fa      	ldrb	r2, [r7, #3]
 800ef7c:	4611      	mov	r1, r2
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7f7 ff89 	bl	8006e96 <HAL_HCD_HC_GetURBState>
 800ef84:	4603      	mov	r3, r0
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3708      	adds	r7, #8
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ef8e:	b580      	push	{r7, lr}
 800ef90:	b082      	sub	sp, #8
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	6078      	str	r0, [r7, #4]
 800ef96:	460b      	mov	r3, r1
 800ef98:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	d103      	bne.n	800efac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800efa4:	78fb      	ldrb	r3, [r7, #3]
 800efa6:	4618      	mov	r0, r3
 800efa8:	f000 f870 	bl	800f08c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800efac:	20c8      	movs	r0, #200	; 0xc8
 800efae:	f7f6 fc8f 	bl	80058d0 <HAL_Delay>
  return USBH_OK;
 800efb2:	2300      	movs	r3, #0
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3708      	adds	r7, #8
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b085      	sub	sp, #20
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	460b      	mov	r3, r1
 800efc6:	70fb      	strb	r3, [r7, #3]
 800efc8:	4613      	mov	r3, r2
 800efca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800efd2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800efd4:	78fb      	ldrb	r3, [r7, #3]
 800efd6:	68fa      	ldr	r2, [r7, #12]
 800efd8:	212c      	movs	r1, #44	; 0x2c
 800efda:	fb01 f303 	mul.w	r3, r1, r3
 800efde:	4413      	add	r3, r2
 800efe0:	333b      	adds	r3, #59	; 0x3b
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d009      	beq.n	800effc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800efe8:	78fb      	ldrb	r3, [r7, #3]
 800efea:	68fa      	ldr	r2, [r7, #12]
 800efec:	212c      	movs	r1, #44	; 0x2c
 800efee:	fb01 f303 	mul.w	r3, r1, r3
 800eff2:	4413      	add	r3, r2
 800eff4:	3354      	adds	r3, #84	; 0x54
 800eff6:	78ba      	ldrb	r2, [r7, #2]
 800eff8:	701a      	strb	r2, [r3, #0]
 800effa:	e008      	b.n	800f00e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800effc:	78fb      	ldrb	r3, [r7, #3]
 800effe:	68fa      	ldr	r2, [r7, #12]
 800f000:	212c      	movs	r1, #44	; 0x2c
 800f002:	fb01 f303 	mul.w	r3, r1, r3
 800f006:	4413      	add	r3, r2
 800f008:	3355      	adds	r3, #85	; 0x55
 800f00a:	78ba      	ldrb	r2, [r7, #2]
 800f00c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f00e:	2300      	movs	r3, #0
}
 800f010:	4618      	mov	r0, r3
 800f012:	3714      	adds	r7, #20
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr

0800f01c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f7f6 fc53 	bl	80058d0 <HAL_Delay>
}
 800f02a:	bf00      	nop
 800f02c:	3708      	adds	r7, #8
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
	...

0800f034 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f034:	b480      	push	{r7}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	4603      	mov	r3, r0
 800f03c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f03e:	2300      	movs	r3, #0
 800f040:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f042:	79fb      	ldrb	r3, [r7, #7]
 800f044:	2b03      	cmp	r3, #3
 800f046:	d817      	bhi.n	800f078 <USBH_Get_USB_Status+0x44>
 800f048:	a201      	add	r2, pc, #4	; (adr r2, 800f050 <USBH_Get_USB_Status+0x1c>)
 800f04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f04e:	bf00      	nop
 800f050:	0800f061 	.word	0x0800f061
 800f054:	0800f067 	.word	0x0800f067
 800f058:	0800f06d 	.word	0x0800f06d
 800f05c:	0800f073 	.word	0x0800f073
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f060:	2300      	movs	r3, #0
 800f062:	73fb      	strb	r3, [r7, #15]
    break;
 800f064:	e00b      	b.n	800f07e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f066:	2302      	movs	r3, #2
 800f068:	73fb      	strb	r3, [r7, #15]
    break;
 800f06a:	e008      	b.n	800f07e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f06c:	2301      	movs	r3, #1
 800f06e:	73fb      	strb	r3, [r7, #15]
    break;
 800f070:	e005      	b.n	800f07e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f072:	2302      	movs	r3, #2
 800f074:	73fb      	strb	r3, [r7, #15]
    break;
 800f076:	e002      	b.n	800f07e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f078:	2302      	movs	r3, #2
 800f07a:	73fb      	strb	r3, [r7, #15]
    break;
 800f07c:	bf00      	nop
  }
  return usb_status;
 800f07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f080:	4618      	mov	r0, r3
 800f082:	3714      	adds	r7, #20
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr

0800f08c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b084      	sub	sp, #16
 800f090:	af00      	add	r7, sp, #0
 800f092:	4603      	mov	r3, r0
 800f094:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f096:	79fb      	ldrb	r3, [r7, #7]
 800f098:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f09a:	79fb      	ldrb	r3, [r7, #7]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d102      	bne.n	800f0a6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	73fb      	strb	r3, [r7, #15]
 800f0a4:	e001      	b.n	800f0aa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f0aa:	7bfb      	ldrb	r3, [r7, #15]
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	2101      	movs	r1, #1
 800f0b0:	4803      	ldr	r0, [pc, #12]	; (800f0c0 <MX_DriverVbusFS+0x34>)
 800f0b2:	f7f7 fae1 	bl	8006678 <HAL_GPIO_WritePin>
}
 800f0b6:	bf00      	nop
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	40020800 	.word	0x40020800

0800f0c4 <__cxa_pure_virtual>:
 800f0c4:	b508      	push	{r3, lr}
 800f0c6:	f000 f80d 	bl	800f0e4 <_ZSt9terminatev>

0800f0ca <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f0ca:	b508      	push	{r3, lr}
 800f0cc:	4780      	blx	r0
 800f0ce:	f000 f833 	bl	800f138 <abort>
	...

0800f0d4 <_ZSt13get_terminatev>:
 800f0d4:	4b02      	ldr	r3, [pc, #8]	; (800f0e0 <_ZSt13get_terminatev+0xc>)
 800f0d6:	6818      	ldr	r0, [r3, #0]
 800f0d8:	f3bf 8f5b 	dmb	ish
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop
 800f0e0:	20000044 	.word	0x20000044

0800f0e4 <_ZSt9terminatev>:
 800f0e4:	b508      	push	{r3, lr}
 800f0e6:	f7ff fff5 	bl	800f0d4 <_ZSt13get_terminatev>
 800f0ea:	f7ff ffee 	bl	800f0ca <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800f0f0 <roundf>:
 800f0f0:	ee10 0a10 	vmov	r0, s0
 800f0f4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800f0f8:	3a7f      	subs	r2, #127	; 0x7f
 800f0fa:	2a16      	cmp	r2, #22
 800f0fc:	dc15      	bgt.n	800f12a <roundf+0x3a>
 800f0fe:	2a00      	cmp	r2, #0
 800f100:	da08      	bge.n	800f114 <roundf+0x24>
 800f102:	3201      	adds	r2, #1
 800f104:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800f108:	d101      	bne.n	800f10e <roundf+0x1e>
 800f10a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800f10e:	ee00 3a10 	vmov	s0, r3
 800f112:	4770      	bx	lr
 800f114:	4907      	ldr	r1, [pc, #28]	; (800f134 <roundf+0x44>)
 800f116:	4111      	asrs	r1, r2
 800f118:	4208      	tst	r0, r1
 800f11a:	d0fa      	beq.n	800f112 <roundf+0x22>
 800f11c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f120:	4113      	asrs	r3, r2
 800f122:	4403      	add	r3, r0
 800f124:	ea23 0301 	bic.w	r3, r3, r1
 800f128:	e7f1      	b.n	800f10e <roundf+0x1e>
 800f12a:	2a80      	cmp	r2, #128	; 0x80
 800f12c:	d1f1      	bne.n	800f112 <roundf+0x22>
 800f12e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f132:	4770      	bx	lr
 800f134:	007fffff 	.word	0x007fffff

0800f138 <abort>:
 800f138:	b508      	push	{r3, lr}
 800f13a:	2006      	movs	r0, #6
 800f13c:	f000 fdde 	bl	800fcfc <raise>
 800f140:	2001      	movs	r0, #1
 800f142:	f7f6 fa3d 	bl	80055c0 <_exit>
	...

0800f148 <__errno>:
 800f148:	4b01      	ldr	r3, [pc, #4]	; (800f150 <__errno+0x8>)
 800f14a:	6818      	ldr	r0, [r3, #0]
 800f14c:	4770      	bx	lr
 800f14e:	bf00      	nop
 800f150:	20000048 	.word	0x20000048

0800f154 <__libc_init_array>:
 800f154:	b570      	push	{r4, r5, r6, lr}
 800f156:	4d0d      	ldr	r5, [pc, #52]	; (800f18c <__libc_init_array+0x38>)
 800f158:	4c0d      	ldr	r4, [pc, #52]	; (800f190 <__libc_init_array+0x3c>)
 800f15a:	1b64      	subs	r4, r4, r5
 800f15c:	10a4      	asrs	r4, r4, #2
 800f15e:	2600      	movs	r6, #0
 800f160:	42a6      	cmp	r6, r4
 800f162:	d109      	bne.n	800f178 <__libc_init_array+0x24>
 800f164:	4d0b      	ldr	r5, [pc, #44]	; (800f194 <__libc_init_array+0x40>)
 800f166:	4c0c      	ldr	r4, [pc, #48]	; (800f198 <__libc_init_array+0x44>)
 800f168:	f002 fd76 	bl	8011c58 <_init>
 800f16c:	1b64      	subs	r4, r4, r5
 800f16e:	10a4      	asrs	r4, r4, #2
 800f170:	2600      	movs	r6, #0
 800f172:	42a6      	cmp	r6, r4
 800f174:	d105      	bne.n	800f182 <__libc_init_array+0x2e>
 800f176:	bd70      	pop	{r4, r5, r6, pc}
 800f178:	f855 3b04 	ldr.w	r3, [r5], #4
 800f17c:	4798      	blx	r3
 800f17e:	3601      	adds	r6, #1
 800f180:	e7ee      	b.n	800f160 <__libc_init_array+0xc>
 800f182:	f855 3b04 	ldr.w	r3, [r5], #4
 800f186:	4798      	blx	r3
 800f188:	3601      	adds	r6, #1
 800f18a:	e7f2      	b.n	800f172 <__libc_init_array+0x1e>
 800f18c:	08012374 	.word	0x08012374
 800f190:	08012374 	.word	0x08012374
 800f194:	08012374 	.word	0x08012374
 800f198:	0801237c 	.word	0x0801237c

0800f19c <malloc>:
 800f19c:	4b02      	ldr	r3, [pc, #8]	; (800f1a8 <malloc+0xc>)
 800f19e:	4601      	mov	r1, r0
 800f1a0:	6818      	ldr	r0, [r3, #0]
 800f1a2:	f000 b88d 	b.w	800f2c0 <_malloc_r>
 800f1a6:	bf00      	nop
 800f1a8:	20000048 	.word	0x20000048

0800f1ac <free>:
 800f1ac:	4b02      	ldr	r3, [pc, #8]	; (800f1b8 <free+0xc>)
 800f1ae:	4601      	mov	r1, r0
 800f1b0:	6818      	ldr	r0, [r3, #0]
 800f1b2:	f000 b819 	b.w	800f1e8 <_free_r>
 800f1b6:	bf00      	nop
 800f1b8:	20000048 	.word	0x20000048

0800f1bc <memcpy>:
 800f1bc:	440a      	add	r2, r1
 800f1be:	4291      	cmp	r1, r2
 800f1c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f1c4:	d100      	bne.n	800f1c8 <memcpy+0xc>
 800f1c6:	4770      	bx	lr
 800f1c8:	b510      	push	{r4, lr}
 800f1ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1d2:	4291      	cmp	r1, r2
 800f1d4:	d1f9      	bne.n	800f1ca <memcpy+0xe>
 800f1d6:	bd10      	pop	{r4, pc}

0800f1d8 <memset>:
 800f1d8:	4402      	add	r2, r0
 800f1da:	4603      	mov	r3, r0
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	d100      	bne.n	800f1e2 <memset+0xa>
 800f1e0:	4770      	bx	lr
 800f1e2:	f803 1b01 	strb.w	r1, [r3], #1
 800f1e6:	e7f9      	b.n	800f1dc <memset+0x4>

0800f1e8 <_free_r>:
 800f1e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1ea:	2900      	cmp	r1, #0
 800f1ec:	d044      	beq.n	800f278 <_free_r+0x90>
 800f1ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1f2:	9001      	str	r0, [sp, #4]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	f1a1 0404 	sub.w	r4, r1, #4
 800f1fa:	bfb8      	it	lt
 800f1fc:	18e4      	addlt	r4, r4, r3
 800f1fe:	f001 fc19 	bl	8010a34 <__malloc_lock>
 800f202:	4a1e      	ldr	r2, [pc, #120]	; (800f27c <_free_r+0x94>)
 800f204:	9801      	ldr	r0, [sp, #4]
 800f206:	6813      	ldr	r3, [r2, #0]
 800f208:	b933      	cbnz	r3, 800f218 <_free_r+0x30>
 800f20a:	6063      	str	r3, [r4, #4]
 800f20c:	6014      	str	r4, [r2, #0]
 800f20e:	b003      	add	sp, #12
 800f210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f214:	f001 bc14 	b.w	8010a40 <__malloc_unlock>
 800f218:	42a3      	cmp	r3, r4
 800f21a:	d908      	bls.n	800f22e <_free_r+0x46>
 800f21c:	6825      	ldr	r5, [r4, #0]
 800f21e:	1961      	adds	r1, r4, r5
 800f220:	428b      	cmp	r3, r1
 800f222:	bf01      	itttt	eq
 800f224:	6819      	ldreq	r1, [r3, #0]
 800f226:	685b      	ldreq	r3, [r3, #4]
 800f228:	1949      	addeq	r1, r1, r5
 800f22a:	6021      	streq	r1, [r4, #0]
 800f22c:	e7ed      	b.n	800f20a <_free_r+0x22>
 800f22e:	461a      	mov	r2, r3
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	b10b      	cbz	r3, 800f238 <_free_r+0x50>
 800f234:	42a3      	cmp	r3, r4
 800f236:	d9fa      	bls.n	800f22e <_free_r+0x46>
 800f238:	6811      	ldr	r1, [r2, #0]
 800f23a:	1855      	adds	r5, r2, r1
 800f23c:	42a5      	cmp	r5, r4
 800f23e:	d10b      	bne.n	800f258 <_free_r+0x70>
 800f240:	6824      	ldr	r4, [r4, #0]
 800f242:	4421      	add	r1, r4
 800f244:	1854      	adds	r4, r2, r1
 800f246:	42a3      	cmp	r3, r4
 800f248:	6011      	str	r1, [r2, #0]
 800f24a:	d1e0      	bne.n	800f20e <_free_r+0x26>
 800f24c:	681c      	ldr	r4, [r3, #0]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	6053      	str	r3, [r2, #4]
 800f252:	4421      	add	r1, r4
 800f254:	6011      	str	r1, [r2, #0]
 800f256:	e7da      	b.n	800f20e <_free_r+0x26>
 800f258:	d902      	bls.n	800f260 <_free_r+0x78>
 800f25a:	230c      	movs	r3, #12
 800f25c:	6003      	str	r3, [r0, #0]
 800f25e:	e7d6      	b.n	800f20e <_free_r+0x26>
 800f260:	6825      	ldr	r5, [r4, #0]
 800f262:	1961      	adds	r1, r4, r5
 800f264:	428b      	cmp	r3, r1
 800f266:	bf04      	itt	eq
 800f268:	6819      	ldreq	r1, [r3, #0]
 800f26a:	685b      	ldreq	r3, [r3, #4]
 800f26c:	6063      	str	r3, [r4, #4]
 800f26e:	bf04      	itt	eq
 800f270:	1949      	addeq	r1, r1, r5
 800f272:	6021      	streq	r1, [r4, #0]
 800f274:	6054      	str	r4, [r2, #4]
 800f276:	e7ca      	b.n	800f20e <_free_r+0x26>
 800f278:	b003      	add	sp, #12
 800f27a:	bd30      	pop	{r4, r5, pc}
 800f27c:	200016e8 	.word	0x200016e8

0800f280 <sbrk_aligned>:
 800f280:	b570      	push	{r4, r5, r6, lr}
 800f282:	4e0e      	ldr	r6, [pc, #56]	; (800f2bc <sbrk_aligned+0x3c>)
 800f284:	460c      	mov	r4, r1
 800f286:	6831      	ldr	r1, [r6, #0]
 800f288:	4605      	mov	r5, r0
 800f28a:	b911      	cbnz	r1, 800f292 <sbrk_aligned+0x12>
 800f28c:	f000 fcfe 	bl	800fc8c <_sbrk_r>
 800f290:	6030      	str	r0, [r6, #0]
 800f292:	4621      	mov	r1, r4
 800f294:	4628      	mov	r0, r5
 800f296:	f000 fcf9 	bl	800fc8c <_sbrk_r>
 800f29a:	1c43      	adds	r3, r0, #1
 800f29c:	d00a      	beq.n	800f2b4 <sbrk_aligned+0x34>
 800f29e:	1cc4      	adds	r4, r0, #3
 800f2a0:	f024 0403 	bic.w	r4, r4, #3
 800f2a4:	42a0      	cmp	r0, r4
 800f2a6:	d007      	beq.n	800f2b8 <sbrk_aligned+0x38>
 800f2a8:	1a21      	subs	r1, r4, r0
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	f000 fcee 	bl	800fc8c <_sbrk_r>
 800f2b0:	3001      	adds	r0, #1
 800f2b2:	d101      	bne.n	800f2b8 <sbrk_aligned+0x38>
 800f2b4:	f04f 34ff 	mov.w	r4, #4294967295
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	bd70      	pop	{r4, r5, r6, pc}
 800f2bc:	200016ec 	.word	0x200016ec

0800f2c0 <_malloc_r>:
 800f2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2c4:	1ccd      	adds	r5, r1, #3
 800f2c6:	f025 0503 	bic.w	r5, r5, #3
 800f2ca:	3508      	adds	r5, #8
 800f2cc:	2d0c      	cmp	r5, #12
 800f2ce:	bf38      	it	cc
 800f2d0:	250c      	movcc	r5, #12
 800f2d2:	2d00      	cmp	r5, #0
 800f2d4:	4607      	mov	r7, r0
 800f2d6:	db01      	blt.n	800f2dc <_malloc_r+0x1c>
 800f2d8:	42a9      	cmp	r1, r5
 800f2da:	d905      	bls.n	800f2e8 <_malloc_r+0x28>
 800f2dc:	230c      	movs	r3, #12
 800f2de:	603b      	str	r3, [r7, #0]
 800f2e0:	2600      	movs	r6, #0
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2e8:	4e2e      	ldr	r6, [pc, #184]	; (800f3a4 <_malloc_r+0xe4>)
 800f2ea:	f001 fba3 	bl	8010a34 <__malloc_lock>
 800f2ee:	6833      	ldr	r3, [r6, #0]
 800f2f0:	461c      	mov	r4, r3
 800f2f2:	bb34      	cbnz	r4, 800f342 <_malloc_r+0x82>
 800f2f4:	4629      	mov	r1, r5
 800f2f6:	4638      	mov	r0, r7
 800f2f8:	f7ff ffc2 	bl	800f280 <sbrk_aligned>
 800f2fc:	1c43      	adds	r3, r0, #1
 800f2fe:	4604      	mov	r4, r0
 800f300:	d14d      	bne.n	800f39e <_malloc_r+0xde>
 800f302:	6834      	ldr	r4, [r6, #0]
 800f304:	4626      	mov	r6, r4
 800f306:	2e00      	cmp	r6, #0
 800f308:	d140      	bne.n	800f38c <_malloc_r+0xcc>
 800f30a:	6823      	ldr	r3, [r4, #0]
 800f30c:	4631      	mov	r1, r6
 800f30e:	4638      	mov	r0, r7
 800f310:	eb04 0803 	add.w	r8, r4, r3
 800f314:	f000 fcba 	bl	800fc8c <_sbrk_r>
 800f318:	4580      	cmp	r8, r0
 800f31a:	d13a      	bne.n	800f392 <_malloc_r+0xd2>
 800f31c:	6821      	ldr	r1, [r4, #0]
 800f31e:	3503      	adds	r5, #3
 800f320:	1a6d      	subs	r5, r5, r1
 800f322:	f025 0503 	bic.w	r5, r5, #3
 800f326:	3508      	adds	r5, #8
 800f328:	2d0c      	cmp	r5, #12
 800f32a:	bf38      	it	cc
 800f32c:	250c      	movcc	r5, #12
 800f32e:	4629      	mov	r1, r5
 800f330:	4638      	mov	r0, r7
 800f332:	f7ff ffa5 	bl	800f280 <sbrk_aligned>
 800f336:	3001      	adds	r0, #1
 800f338:	d02b      	beq.n	800f392 <_malloc_r+0xd2>
 800f33a:	6823      	ldr	r3, [r4, #0]
 800f33c:	442b      	add	r3, r5
 800f33e:	6023      	str	r3, [r4, #0]
 800f340:	e00e      	b.n	800f360 <_malloc_r+0xa0>
 800f342:	6822      	ldr	r2, [r4, #0]
 800f344:	1b52      	subs	r2, r2, r5
 800f346:	d41e      	bmi.n	800f386 <_malloc_r+0xc6>
 800f348:	2a0b      	cmp	r2, #11
 800f34a:	d916      	bls.n	800f37a <_malloc_r+0xba>
 800f34c:	1961      	adds	r1, r4, r5
 800f34e:	42a3      	cmp	r3, r4
 800f350:	6025      	str	r5, [r4, #0]
 800f352:	bf18      	it	ne
 800f354:	6059      	strne	r1, [r3, #4]
 800f356:	6863      	ldr	r3, [r4, #4]
 800f358:	bf08      	it	eq
 800f35a:	6031      	streq	r1, [r6, #0]
 800f35c:	5162      	str	r2, [r4, r5]
 800f35e:	604b      	str	r3, [r1, #4]
 800f360:	4638      	mov	r0, r7
 800f362:	f104 060b 	add.w	r6, r4, #11
 800f366:	f001 fb6b 	bl	8010a40 <__malloc_unlock>
 800f36a:	f026 0607 	bic.w	r6, r6, #7
 800f36e:	1d23      	adds	r3, r4, #4
 800f370:	1af2      	subs	r2, r6, r3
 800f372:	d0b6      	beq.n	800f2e2 <_malloc_r+0x22>
 800f374:	1b9b      	subs	r3, r3, r6
 800f376:	50a3      	str	r3, [r4, r2]
 800f378:	e7b3      	b.n	800f2e2 <_malloc_r+0x22>
 800f37a:	6862      	ldr	r2, [r4, #4]
 800f37c:	42a3      	cmp	r3, r4
 800f37e:	bf0c      	ite	eq
 800f380:	6032      	streq	r2, [r6, #0]
 800f382:	605a      	strne	r2, [r3, #4]
 800f384:	e7ec      	b.n	800f360 <_malloc_r+0xa0>
 800f386:	4623      	mov	r3, r4
 800f388:	6864      	ldr	r4, [r4, #4]
 800f38a:	e7b2      	b.n	800f2f2 <_malloc_r+0x32>
 800f38c:	4634      	mov	r4, r6
 800f38e:	6876      	ldr	r6, [r6, #4]
 800f390:	e7b9      	b.n	800f306 <_malloc_r+0x46>
 800f392:	230c      	movs	r3, #12
 800f394:	603b      	str	r3, [r7, #0]
 800f396:	4638      	mov	r0, r7
 800f398:	f001 fb52 	bl	8010a40 <__malloc_unlock>
 800f39c:	e7a1      	b.n	800f2e2 <_malloc_r+0x22>
 800f39e:	6025      	str	r5, [r4, #0]
 800f3a0:	e7de      	b.n	800f360 <_malloc_r+0xa0>
 800f3a2:	bf00      	nop
 800f3a4:	200016e8 	.word	0x200016e8

0800f3a8 <__cvt>:
 800f3a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3ac:	ec55 4b10 	vmov	r4, r5, d0
 800f3b0:	2d00      	cmp	r5, #0
 800f3b2:	460e      	mov	r6, r1
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	462b      	mov	r3, r5
 800f3b8:	bfbb      	ittet	lt
 800f3ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f3be:	461d      	movlt	r5, r3
 800f3c0:	2300      	movge	r3, #0
 800f3c2:	232d      	movlt	r3, #45	; 0x2d
 800f3c4:	700b      	strb	r3, [r1, #0]
 800f3c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f3cc:	4691      	mov	r9, r2
 800f3ce:	f023 0820 	bic.w	r8, r3, #32
 800f3d2:	bfbc      	itt	lt
 800f3d4:	4622      	movlt	r2, r4
 800f3d6:	4614      	movlt	r4, r2
 800f3d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f3dc:	d005      	beq.n	800f3ea <__cvt+0x42>
 800f3de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f3e2:	d100      	bne.n	800f3e6 <__cvt+0x3e>
 800f3e4:	3601      	adds	r6, #1
 800f3e6:	2102      	movs	r1, #2
 800f3e8:	e000      	b.n	800f3ec <__cvt+0x44>
 800f3ea:	2103      	movs	r1, #3
 800f3ec:	ab03      	add	r3, sp, #12
 800f3ee:	9301      	str	r3, [sp, #4]
 800f3f0:	ab02      	add	r3, sp, #8
 800f3f2:	9300      	str	r3, [sp, #0]
 800f3f4:	ec45 4b10 	vmov	d0, r4, r5
 800f3f8:	4653      	mov	r3, sl
 800f3fa:	4632      	mov	r2, r6
 800f3fc:	f000 fd28 	bl	800fe50 <_dtoa_r>
 800f400:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f404:	4607      	mov	r7, r0
 800f406:	d102      	bne.n	800f40e <__cvt+0x66>
 800f408:	f019 0f01 	tst.w	r9, #1
 800f40c:	d022      	beq.n	800f454 <__cvt+0xac>
 800f40e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f412:	eb07 0906 	add.w	r9, r7, r6
 800f416:	d110      	bne.n	800f43a <__cvt+0x92>
 800f418:	783b      	ldrb	r3, [r7, #0]
 800f41a:	2b30      	cmp	r3, #48	; 0x30
 800f41c:	d10a      	bne.n	800f434 <__cvt+0x8c>
 800f41e:	2200      	movs	r2, #0
 800f420:	2300      	movs	r3, #0
 800f422:	4620      	mov	r0, r4
 800f424:	4629      	mov	r1, r5
 800f426:	f7f1 fb57 	bl	8000ad8 <__aeabi_dcmpeq>
 800f42a:	b918      	cbnz	r0, 800f434 <__cvt+0x8c>
 800f42c:	f1c6 0601 	rsb	r6, r6, #1
 800f430:	f8ca 6000 	str.w	r6, [sl]
 800f434:	f8da 3000 	ldr.w	r3, [sl]
 800f438:	4499      	add	r9, r3
 800f43a:	2200      	movs	r2, #0
 800f43c:	2300      	movs	r3, #0
 800f43e:	4620      	mov	r0, r4
 800f440:	4629      	mov	r1, r5
 800f442:	f7f1 fb49 	bl	8000ad8 <__aeabi_dcmpeq>
 800f446:	b108      	cbz	r0, 800f44c <__cvt+0xa4>
 800f448:	f8cd 900c 	str.w	r9, [sp, #12]
 800f44c:	2230      	movs	r2, #48	; 0x30
 800f44e:	9b03      	ldr	r3, [sp, #12]
 800f450:	454b      	cmp	r3, r9
 800f452:	d307      	bcc.n	800f464 <__cvt+0xbc>
 800f454:	9b03      	ldr	r3, [sp, #12]
 800f456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f458:	1bdb      	subs	r3, r3, r7
 800f45a:	4638      	mov	r0, r7
 800f45c:	6013      	str	r3, [r2, #0]
 800f45e:	b004      	add	sp, #16
 800f460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f464:	1c59      	adds	r1, r3, #1
 800f466:	9103      	str	r1, [sp, #12]
 800f468:	701a      	strb	r2, [r3, #0]
 800f46a:	e7f0      	b.n	800f44e <__cvt+0xa6>

0800f46c <__exponent>:
 800f46c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f46e:	4603      	mov	r3, r0
 800f470:	2900      	cmp	r1, #0
 800f472:	bfb8      	it	lt
 800f474:	4249      	neglt	r1, r1
 800f476:	f803 2b02 	strb.w	r2, [r3], #2
 800f47a:	bfb4      	ite	lt
 800f47c:	222d      	movlt	r2, #45	; 0x2d
 800f47e:	222b      	movge	r2, #43	; 0x2b
 800f480:	2909      	cmp	r1, #9
 800f482:	7042      	strb	r2, [r0, #1]
 800f484:	dd2a      	ble.n	800f4dc <__exponent+0x70>
 800f486:	f10d 0407 	add.w	r4, sp, #7
 800f48a:	46a4      	mov	ip, r4
 800f48c:	270a      	movs	r7, #10
 800f48e:	46a6      	mov	lr, r4
 800f490:	460a      	mov	r2, r1
 800f492:	fb91 f6f7 	sdiv	r6, r1, r7
 800f496:	fb07 1516 	mls	r5, r7, r6, r1
 800f49a:	3530      	adds	r5, #48	; 0x30
 800f49c:	2a63      	cmp	r2, #99	; 0x63
 800f49e:	f104 34ff 	add.w	r4, r4, #4294967295
 800f4a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f4a6:	4631      	mov	r1, r6
 800f4a8:	dcf1      	bgt.n	800f48e <__exponent+0x22>
 800f4aa:	3130      	adds	r1, #48	; 0x30
 800f4ac:	f1ae 0502 	sub.w	r5, lr, #2
 800f4b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f4b4:	1c44      	adds	r4, r0, #1
 800f4b6:	4629      	mov	r1, r5
 800f4b8:	4561      	cmp	r1, ip
 800f4ba:	d30a      	bcc.n	800f4d2 <__exponent+0x66>
 800f4bc:	f10d 0209 	add.w	r2, sp, #9
 800f4c0:	eba2 020e 	sub.w	r2, r2, lr
 800f4c4:	4565      	cmp	r5, ip
 800f4c6:	bf88      	it	hi
 800f4c8:	2200      	movhi	r2, #0
 800f4ca:	4413      	add	r3, r2
 800f4cc:	1a18      	subs	r0, r3, r0
 800f4ce:	b003      	add	sp, #12
 800f4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f4da:	e7ed      	b.n	800f4b8 <__exponent+0x4c>
 800f4dc:	2330      	movs	r3, #48	; 0x30
 800f4de:	3130      	adds	r1, #48	; 0x30
 800f4e0:	7083      	strb	r3, [r0, #2]
 800f4e2:	70c1      	strb	r1, [r0, #3]
 800f4e4:	1d03      	adds	r3, r0, #4
 800f4e6:	e7f1      	b.n	800f4cc <__exponent+0x60>

0800f4e8 <_printf_float>:
 800f4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ec:	ed2d 8b02 	vpush	{d8}
 800f4f0:	b08d      	sub	sp, #52	; 0x34
 800f4f2:	460c      	mov	r4, r1
 800f4f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f4f8:	4616      	mov	r6, r2
 800f4fa:	461f      	mov	r7, r3
 800f4fc:	4605      	mov	r5, r0
 800f4fe:	f001 fa95 	bl	8010a2c <_localeconv_r>
 800f502:	f8d0 a000 	ldr.w	sl, [r0]
 800f506:	4650      	mov	r0, sl
 800f508:	f7f0 fe6a 	bl	80001e0 <strlen>
 800f50c:	2300      	movs	r3, #0
 800f50e:	930a      	str	r3, [sp, #40]	; 0x28
 800f510:	6823      	ldr	r3, [r4, #0]
 800f512:	9305      	str	r3, [sp, #20]
 800f514:	f8d8 3000 	ldr.w	r3, [r8]
 800f518:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f51c:	3307      	adds	r3, #7
 800f51e:	f023 0307 	bic.w	r3, r3, #7
 800f522:	f103 0208 	add.w	r2, r3, #8
 800f526:	f8c8 2000 	str.w	r2, [r8]
 800f52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f532:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f536:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f53a:	9307      	str	r3, [sp, #28]
 800f53c:	f8cd 8018 	str.w	r8, [sp, #24]
 800f540:	ee08 0a10 	vmov	s16, r0
 800f544:	4b9f      	ldr	r3, [pc, #636]	; (800f7c4 <_printf_float+0x2dc>)
 800f546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f54a:	f04f 32ff 	mov.w	r2, #4294967295
 800f54e:	f7f1 faf5 	bl	8000b3c <__aeabi_dcmpun>
 800f552:	bb88      	cbnz	r0, 800f5b8 <_printf_float+0xd0>
 800f554:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f558:	4b9a      	ldr	r3, [pc, #616]	; (800f7c4 <_printf_float+0x2dc>)
 800f55a:	f04f 32ff 	mov.w	r2, #4294967295
 800f55e:	f7f1 facf 	bl	8000b00 <__aeabi_dcmple>
 800f562:	bb48      	cbnz	r0, 800f5b8 <_printf_float+0xd0>
 800f564:	2200      	movs	r2, #0
 800f566:	2300      	movs	r3, #0
 800f568:	4640      	mov	r0, r8
 800f56a:	4649      	mov	r1, r9
 800f56c:	f7f1 fabe 	bl	8000aec <__aeabi_dcmplt>
 800f570:	b110      	cbz	r0, 800f578 <_printf_float+0x90>
 800f572:	232d      	movs	r3, #45	; 0x2d
 800f574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f578:	4b93      	ldr	r3, [pc, #588]	; (800f7c8 <_printf_float+0x2e0>)
 800f57a:	4894      	ldr	r0, [pc, #592]	; (800f7cc <_printf_float+0x2e4>)
 800f57c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f580:	bf94      	ite	ls
 800f582:	4698      	movls	r8, r3
 800f584:	4680      	movhi	r8, r0
 800f586:	2303      	movs	r3, #3
 800f588:	6123      	str	r3, [r4, #16]
 800f58a:	9b05      	ldr	r3, [sp, #20]
 800f58c:	f023 0204 	bic.w	r2, r3, #4
 800f590:	6022      	str	r2, [r4, #0]
 800f592:	f04f 0900 	mov.w	r9, #0
 800f596:	9700      	str	r7, [sp, #0]
 800f598:	4633      	mov	r3, r6
 800f59a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f59c:	4621      	mov	r1, r4
 800f59e:	4628      	mov	r0, r5
 800f5a0:	f000 f9d8 	bl	800f954 <_printf_common>
 800f5a4:	3001      	adds	r0, #1
 800f5a6:	f040 8090 	bne.w	800f6ca <_printf_float+0x1e2>
 800f5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ae:	b00d      	add	sp, #52	; 0x34
 800f5b0:	ecbd 8b02 	vpop	{d8}
 800f5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b8:	4642      	mov	r2, r8
 800f5ba:	464b      	mov	r3, r9
 800f5bc:	4640      	mov	r0, r8
 800f5be:	4649      	mov	r1, r9
 800f5c0:	f7f1 fabc 	bl	8000b3c <__aeabi_dcmpun>
 800f5c4:	b140      	cbz	r0, 800f5d8 <_printf_float+0xf0>
 800f5c6:	464b      	mov	r3, r9
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	bfbc      	itt	lt
 800f5cc:	232d      	movlt	r3, #45	; 0x2d
 800f5ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f5d2:	487f      	ldr	r0, [pc, #508]	; (800f7d0 <_printf_float+0x2e8>)
 800f5d4:	4b7f      	ldr	r3, [pc, #508]	; (800f7d4 <_printf_float+0x2ec>)
 800f5d6:	e7d1      	b.n	800f57c <_printf_float+0x94>
 800f5d8:	6863      	ldr	r3, [r4, #4]
 800f5da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f5de:	9206      	str	r2, [sp, #24]
 800f5e0:	1c5a      	adds	r2, r3, #1
 800f5e2:	d13f      	bne.n	800f664 <_printf_float+0x17c>
 800f5e4:	2306      	movs	r3, #6
 800f5e6:	6063      	str	r3, [r4, #4]
 800f5e8:	9b05      	ldr	r3, [sp, #20]
 800f5ea:	6861      	ldr	r1, [r4, #4]
 800f5ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	9303      	str	r3, [sp, #12]
 800f5f4:	ab0a      	add	r3, sp, #40	; 0x28
 800f5f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f5fa:	ab09      	add	r3, sp, #36	; 0x24
 800f5fc:	ec49 8b10 	vmov	d0, r8, r9
 800f600:	9300      	str	r3, [sp, #0]
 800f602:	6022      	str	r2, [r4, #0]
 800f604:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f608:	4628      	mov	r0, r5
 800f60a:	f7ff fecd 	bl	800f3a8 <__cvt>
 800f60e:	9b06      	ldr	r3, [sp, #24]
 800f610:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f612:	2b47      	cmp	r3, #71	; 0x47
 800f614:	4680      	mov	r8, r0
 800f616:	d108      	bne.n	800f62a <_printf_float+0x142>
 800f618:	1cc8      	adds	r0, r1, #3
 800f61a:	db02      	blt.n	800f622 <_printf_float+0x13a>
 800f61c:	6863      	ldr	r3, [r4, #4]
 800f61e:	4299      	cmp	r1, r3
 800f620:	dd41      	ble.n	800f6a6 <_printf_float+0x1be>
 800f622:	f1ab 0b02 	sub.w	fp, fp, #2
 800f626:	fa5f fb8b 	uxtb.w	fp, fp
 800f62a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f62e:	d820      	bhi.n	800f672 <_printf_float+0x18a>
 800f630:	3901      	subs	r1, #1
 800f632:	465a      	mov	r2, fp
 800f634:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f638:	9109      	str	r1, [sp, #36]	; 0x24
 800f63a:	f7ff ff17 	bl	800f46c <__exponent>
 800f63e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f640:	1813      	adds	r3, r2, r0
 800f642:	2a01      	cmp	r2, #1
 800f644:	4681      	mov	r9, r0
 800f646:	6123      	str	r3, [r4, #16]
 800f648:	dc02      	bgt.n	800f650 <_printf_float+0x168>
 800f64a:	6822      	ldr	r2, [r4, #0]
 800f64c:	07d2      	lsls	r2, r2, #31
 800f64e:	d501      	bpl.n	800f654 <_printf_float+0x16c>
 800f650:	3301      	adds	r3, #1
 800f652:	6123      	str	r3, [r4, #16]
 800f654:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d09c      	beq.n	800f596 <_printf_float+0xae>
 800f65c:	232d      	movs	r3, #45	; 0x2d
 800f65e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f662:	e798      	b.n	800f596 <_printf_float+0xae>
 800f664:	9a06      	ldr	r2, [sp, #24]
 800f666:	2a47      	cmp	r2, #71	; 0x47
 800f668:	d1be      	bne.n	800f5e8 <_printf_float+0x100>
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1bc      	bne.n	800f5e8 <_printf_float+0x100>
 800f66e:	2301      	movs	r3, #1
 800f670:	e7b9      	b.n	800f5e6 <_printf_float+0xfe>
 800f672:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f676:	d118      	bne.n	800f6aa <_printf_float+0x1c2>
 800f678:	2900      	cmp	r1, #0
 800f67a:	6863      	ldr	r3, [r4, #4]
 800f67c:	dd0b      	ble.n	800f696 <_printf_float+0x1ae>
 800f67e:	6121      	str	r1, [r4, #16]
 800f680:	b913      	cbnz	r3, 800f688 <_printf_float+0x1a0>
 800f682:	6822      	ldr	r2, [r4, #0]
 800f684:	07d0      	lsls	r0, r2, #31
 800f686:	d502      	bpl.n	800f68e <_printf_float+0x1a6>
 800f688:	3301      	adds	r3, #1
 800f68a:	440b      	add	r3, r1
 800f68c:	6123      	str	r3, [r4, #16]
 800f68e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f690:	f04f 0900 	mov.w	r9, #0
 800f694:	e7de      	b.n	800f654 <_printf_float+0x16c>
 800f696:	b913      	cbnz	r3, 800f69e <_printf_float+0x1b6>
 800f698:	6822      	ldr	r2, [r4, #0]
 800f69a:	07d2      	lsls	r2, r2, #31
 800f69c:	d501      	bpl.n	800f6a2 <_printf_float+0x1ba>
 800f69e:	3302      	adds	r3, #2
 800f6a0:	e7f4      	b.n	800f68c <_printf_float+0x1a4>
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	e7f2      	b.n	800f68c <_printf_float+0x1a4>
 800f6a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f6aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6ac:	4299      	cmp	r1, r3
 800f6ae:	db05      	blt.n	800f6bc <_printf_float+0x1d4>
 800f6b0:	6823      	ldr	r3, [r4, #0]
 800f6b2:	6121      	str	r1, [r4, #16]
 800f6b4:	07d8      	lsls	r0, r3, #31
 800f6b6:	d5ea      	bpl.n	800f68e <_printf_float+0x1a6>
 800f6b8:	1c4b      	adds	r3, r1, #1
 800f6ba:	e7e7      	b.n	800f68c <_printf_float+0x1a4>
 800f6bc:	2900      	cmp	r1, #0
 800f6be:	bfd4      	ite	le
 800f6c0:	f1c1 0202 	rsble	r2, r1, #2
 800f6c4:	2201      	movgt	r2, #1
 800f6c6:	4413      	add	r3, r2
 800f6c8:	e7e0      	b.n	800f68c <_printf_float+0x1a4>
 800f6ca:	6823      	ldr	r3, [r4, #0]
 800f6cc:	055a      	lsls	r2, r3, #21
 800f6ce:	d407      	bmi.n	800f6e0 <_printf_float+0x1f8>
 800f6d0:	6923      	ldr	r3, [r4, #16]
 800f6d2:	4642      	mov	r2, r8
 800f6d4:	4631      	mov	r1, r6
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	47b8      	blx	r7
 800f6da:	3001      	adds	r0, #1
 800f6dc:	d12c      	bne.n	800f738 <_printf_float+0x250>
 800f6de:	e764      	b.n	800f5aa <_printf_float+0xc2>
 800f6e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f6e4:	f240 80e0 	bls.w	800f8a8 <_printf_float+0x3c0>
 800f6e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	f7f1 f9f2 	bl	8000ad8 <__aeabi_dcmpeq>
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	d034      	beq.n	800f762 <_printf_float+0x27a>
 800f6f8:	4a37      	ldr	r2, [pc, #220]	; (800f7d8 <_printf_float+0x2f0>)
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	4631      	mov	r1, r6
 800f6fe:	4628      	mov	r0, r5
 800f700:	47b8      	blx	r7
 800f702:	3001      	adds	r0, #1
 800f704:	f43f af51 	beq.w	800f5aa <_printf_float+0xc2>
 800f708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f70c:	429a      	cmp	r2, r3
 800f70e:	db02      	blt.n	800f716 <_printf_float+0x22e>
 800f710:	6823      	ldr	r3, [r4, #0]
 800f712:	07d8      	lsls	r0, r3, #31
 800f714:	d510      	bpl.n	800f738 <_printf_float+0x250>
 800f716:	ee18 3a10 	vmov	r3, s16
 800f71a:	4652      	mov	r2, sl
 800f71c:	4631      	mov	r1, r6
 800f71e:	4628      	mov	r0, r5
 800f720:	47b8      	blx	r7
 800f722:	3001      	adds	r0, #1
 800f724:	f43f af41 	beq.w	800f5aa <_printf_float+0xc2>
 800f728:	f04f 0800 	mov.w	r8, #0
 800f72c:	f104 091a 	add.w	r9, r4, #26
 800f730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f732:	3b01      	subs	r3, #1
 800f734:	4543      	cmp	r3, r8
 800f736:	dc09      	bgt.n	800f74c <_printf_float+0x264>
 800f738:	6823      	ldr	r3, [r4, #0]
 800f73a:	079b      	lsls	r3, r3, #30
 800f73c:	f100 8105 	bmi.w	800f94a <_printf_float+0x462>
 800f740:	68e0      	ldr	r0, [r4, #12]
 800f742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f744:	4298      	cmp	r0, r3
 800f746:	bfb8      	it	lt
 800f748:	4618      	movlt	r0, r3
 800f74a:	e730      	b.n	800f5ae <_printf_float+0xc6>
 800f74c:	2301      	movs	r3, #1
 800f74e:	464a      	mov	r2, r9
 800f750:	4631      	mov	r1, r6
 800f752:	4628      	mov	r0, r5
 800f754:	47b8      	blx	r7
 800f756:	3001      	adds	r0, #1
 800f758:	f43f af27 	beq.w	800f5aa <_printf_float+0xc2>
 800f75c:	f108 0801 	add.w	r8, r8, #1
 800f760:	e7e6      	b.n	800f730 <_printf_float+0x248>
 800f762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f764:	2b00      	cmp	r3, #0
 800f766:	dc39      	bgt.n	800f7dc <_printf_float+0x2f4>
 800f768:	4a1b      	ldr	r2, [pc, #108]	; (800f7d8 <_printf_float+0x2f0>)
 800f76a:	2301      	movs	r3, #1
 800f76c:	4631      	mov	r1, r6
 800f76e:	4628      	mov	r0, r5
 800f770:	47b8      	blx	r7
 800f772:	3001      	adds	r0, #1
 800f774:	f43f af19 	beq.w	800f5aa <_printf_float+0xc2>
 800f778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f77c:	4313      	orrs	r3, r2
 800f77e:	d102      	bne.n	800f786 <_printf_float+0x29e>
 800f780:	6823      	ldr	r3, [r4, #0]
 800f782:	07d9      	lsls	r1, r3, #31
 800f784:	d5d8      	bpl.n	800f738 <_printf_float+0x250>
 800f786:	ee18 3a10 	vmov	r3, s16
 800f78a:	4652      	mov	r2, sl
 800f78c:	4631      	mov	r1, r6
 800f78e:	4628      	mov	r0, r5
 800f790:	47b8      	blx	r7
 800f792:	3001      	adds	r0, #1
 800f794:	f43f af09 	beq.w	800f5aa <_printf_float+0xc2>
 800f798:	f04f 0900 	mov.w	r9, #0
 800f79c:	f104 0a1a 	add.w	sl, r4, #26
 800f7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7a2:	425b      	negs	r3, r3
 800f7a4:	454b      	cmp	r3, r9
 800f7a6:	dc01      	bgt.n	800f7ac <_printf_float+0x2c4>
 800f7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7aa:	e792      	b.n	800f6d2 <_printf_float+0x1ea>
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	4652      	mov	r2, sl
 800f7b0:	4631      	mov	r1, r6
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	47b8      	blx	r7
 800f7b6:	3001      	adds	r0, #1
 800f7b8:	f43f aef7 	beq.w	800f5aa <_printf_float+0xc2>
 800f7bc:	f109 0901 	add.w	r9, r9, #1
 800f7c0:	e7ee      	b.n	800f7a0 <_printf_float+0x2b8>
 800f7c2:	bf00      	nop
 800f7c4:	7fefffff 	.word	0x7fefffff
 800f7c8:	08011f94 	.word	0x08011f94
 800f7cc:	08011f98 	.word	0x08011f98
 800f7d0:	08011fa0 	.word	0x08011fa0
 800f7d4:	08011f9c 	.word	0x08011f9c
 800f7d8:	08011fa4 	.word	0x08011fa4
 800f7dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	bfa8      	it	ge
 800f7e4:	461a      	movge	r2, r3
 800f7e6:	2a00      	cmp	r2, #0
 800f7e8:	4691      	mov	r9, r2
 800f7ea:	dc37      	bgt.n	800f85c <_printf_float+0x374>
 800f7ec:	f04f 0b00 	mov.w	fp, #0
 800f7f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f7f4:	f104 021a 	add.w	r2, r4, #26
 800f7f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f7fa:	9305      	str	r3, [sp, #20]
 800f7fc:	eba3 0309 	sub.w	r3, r3, r9
 800f800:	455b      	cmp	r3, fp
 800f802:	dc33      	bgt.n	800f86c <_printf_float+0x384>
 800f804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f808:	429a      	cmp	r2, r3
 800f80a:	db3b      	blt.n	800f884 <_printf_float+0x39c>
 800f80c:	6823      	ldr	r3, [r4, #0]
 800f80e:	07da      	lsls	r2, r3, #31
 800f810:	d438      	bmi.n	800f884 <_printf_float+0x39c>
 800f812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f814:	9a05      	ldr	r2, [sp, #20]
 800f816:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f818:	1a9a      	subs	r2, r3, r2
 800f81a:	eba3 0901 	sub.w	r9, r3, r1
 800f81e:	4591      	cmp	r9, r2
 800f820:	bfa8      	it	ge
 800f822:	4691      	movge	r9, r2
 800f824:	f1b9 0f00 	cmp.w	r9, #0
 800f828:	dc35      	bgt.n	800f896 <_printf_float+0x3ae>
 800f82a:	f04f 0800 	mov.w	r8, #0
 800f82e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f832:	f104 0a1a 	add.w	sl, r4, #26
 800f836:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f83a:	1a9b      	subs	r3, r3, r2
 800f83c:	eba3 0309 	sub.w	r3, r3, r9
 800f840:	4543      	cmp	r3, r8
 800f842:	f77f af79 	ble.w	800f738 <_printf_float+0x250>
 800f846:	2301      	movs	r3, #1
 800f848:	4652      	mov	r2, sl
 800f84a:	4631      	mov	r1, r6
 800f84c:	4628      	mov	r0, r5
 800f84e:	47b8      	blx	r7
 800f850:	3001      	adds	r0, #1
 800f852:	f43f aeaa 	beq.w	800f5aa <_printf_float+0xc2>
 800f856:	f108 0801 	add.w	r8, r8, #1
 800f85a:	e7ec      	b.n	800f836 <_printf_float+0x34e>
 800f85c:	4613      	mov	r3, r2
 800f85e:	4631      	mov	r1, r6
 800f860:	4642      	mov	r2, r8
 800f862:	4628      	mov	r0, r5
 800f864:	47b8      	blx	r7
 800f866:	3001      	adds	r0, #1
 800f868:	d1c0      	bne.n	800f7ec <_printf_float+0x304>
 800f86a:	e69e      	b.n	800f5aa <_printf_float+0xc2>
 800f86c:	2301      	movs	r3, #1
 800f86e:	4631      	mov	r1, r6
 800f870:	4628      	mov	r0, r5
 800f872:	9205      	str	r2, [sp, #20]
 800f874:	47b8      	blx	r7
 800f876:	3001      	adds	r0, #1
 800f878:	f43f ae97 	beq.w	800f5aa <_printf_float+0xc2>
 800f87c:	9a05      	ldr	r2, [sp, #20]
 800f87e:	f10b 0b01 	add.w	fp, fp, #1
 800f882:	e7b9      	b.n	800f7f8 <_printf_float+0x310>
 800f884:	ee18 3a10 	vmov	r3, s16
 800f888:	4652      	mov	r2, sl
 800f88a:	4631      	mov	r1, r6
 800f88c:	4628      	mov	r0, r5
 800f88e:	47b8      	blx	r7
 800f890:	3001      	adds	r0, #1
 800f892:	d1be      	bne.n	800f812 <_printf_float+0x32a>
 800f894:	e689      	b.n	800f5aa <_printf_float+0xc2>
 800f896:	9a05      	ldr	r2, [sp, #20]
 800f898:	464b      	mov	r3, r9
 800f89a:	4442      	add	r2, r8
 800f89c:	4631      	mov	r1, r6
 800f89e:	4628      	mov	r0, r5
 800f8a0:	47b8      	blx	r7
 800f8a2:	3001      	adds	r0, #1
 800f8a4:	d1c1      	bne.n	800f82a <_printf_float+0x342>
 800f8a6:	e680      	b.n	800f5aa <_printf_float+0xc2>
 800f8a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8aa:	2a01      	cmp	r2, #1
 800f8ac:	dc01      	bgt.n	800f8b2 <_printf_float+0x3ca>
 800f8ae:	07db      	lsls	r3, r3, #31
 800f8b0:	d538      	bpl.n	800f924 <_printf_float+0x43c>
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	4642      	mov	r2, r8
 800f8b6:	4631      	mov	r1, r6
 800f8b8:	4628      	mov	r0, r5
 800f8ba:	47b8      	blx	r7
 800f8bc:	3001      	adds	r0, #1
 800f8be:	f43f ae74 	beq.w	800f5aa <_printf_float+0xc2>
 800f8c2:	ee18 3a10 	vmov	r3, s16
 800f8c6:	4652      	mov	r2, sl
 800f8c8:	4631      	mov	r1, r6
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	47b8      	blx	r7
 800f8ce:	3001      	adds	r0, #1
 800f8d0:	f43f ae6b 	beq.w	800f5aa <_printf_float+0xc2>
 800f8d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f8d8:	2200      	movs	r2, #0
 800f8da:	2300      	movs	r3, #0
 800f8dc:	f7f1 f8fc 	bl	8000ad8 <__aeabi_dcmpeq>
 800f8e0:	b9d8      	cbnz	r0, 800f91a <_printf_float+0x432>
 800f8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8e4:	f108 0201 	add.w	r2, r8, #1
 800f8e8:	3b01      	subs	r3, #1
 800f8ea:	4631      	mov	r1, r6
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	47b8      	blx	r7
 800f8f0:	3001      	adds	r0, #1
 800f8f2:	d10e      	bne.n	800f912 <_printf_float+0x42a>
 800f8f4:	e659      	b.n	800f5aa <_printf_float+0xc2>
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	4652      	mov	r2, sl
 800f8fa:	4631      	mov	r1, r6
 800f8fc:	4628      	mov	r0, r5
 800f8fe:	47b8      	blx	r7
 800f900:	3001      	adds	r0, #1
 800f902:	f43f ae52 	beq.w	800f5aa <_printf_float+0xc2>
 800f906:	f108 0801 	add.w	r8, r8, #1
 800f90a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f90c:	3b01      	subs	r3, #1
 800f90e:	4543      	cmp	r3, r8
 800f910:	dcf1      	bgt.n	800f8f6 <_printf_float+0x40e>
 800f912:	464b      	mov	r3, r9
 800f914:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f918:	e6dc      	b.n	800f6d4 <_printf_float+0x1ec>
 800f91a:	f04f 0800 	mov.w	r8, #0
 800f91e:	f104 0a1a 	add.w	sl, r4, #26
 800f922:	e7f2      	b.n	800f90a <_printf_float+0x422>
 800f924:	2301      	movs	r3, #1
 800f926:	4642      	mov	r2, r8
 800f928:	e7df      	b.n	800f8ea <_printf_float+0x402>
 800f92a:	2301      	movs	r3, #1
 800f92c:	464a      	mov	r2, r9
 800f92e:	4631      	mov	r1, r6
 800f930:	4628      	mov	r0, r5
 800f932:	47b8      	blx	r7
 800f934:	3001      	adds	r0, #1
 800f936:	f43f ae38 	beq.w	800f5aa <_printf_float+0xc2>
 800f93a:	f108 0801 	add.w	r8, r8, #1
 800f93e:	68e3      	ldr	r3, [r4, #12]
 800f940:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f942:	1a5b      	subs	r3, r3, r1
 800f944:	4543      	cmp	r3, r8
 800f946:	dcf0      	bgt.n	800f92a <_printf_float+0x442>
 800f948:	e6fa      	b.n	800f740 <_printf_float+0x258>
 800f94a:	f04f 0800 	mov.w	r8, #0
 800f94e:	f104 0919 	add.w	r9, r4, #25
 800f952:	e7f4      	b.n	800f93e <_printf_float+0x456>

0800f954 <_printf_common>:
 800f954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f958:	4616      	mov	r6, r2
 800f95a:	4699      	mov	r9, r3
 800f95c:	688a      	ldr	r2, [r1, #8]
 800f95e:	690b      	ldr	r3, [r1, #16]
 800f960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f964:	4293      	cmp	r3, r2
 800f966:	bfb8      	it	lt
 800f968:	4613      	movlt	r3, r2
 800f96a:	6033      	str	r3, [r6, #0]
 800f96c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f970:	4607      	mov	r7, r0
 800f972:	460c      	mov	r4, r1
 800f974:	b10a      	cbz	r2, 800f97a <_printf_common+0x26>
 800f976:	3301      	adds	r3, #1
 800f978:	6033      	str	r3, [r6, #0]
 800f97a:	6823      	ldr	r3, [r4, #0]
 800f97c:	0699      	lsls	r1, r3, #26
 800f97e:	bf42      	ittt	mi
 800f980:	6833      	ldrmi	r3, [r6, #0]
 800f982:	3302      	addmi	r3, #2
 800f984:	6033      	strmi	r3, [r6, #0]
 800f986:	6825      	ldr	r5, [r4, #0]
 800f988:	f015 0506 	ands.w	r5, r5, #6
 800f98c:	d106      	bne.n	800f99c <_printf_common+0x48>
 800f98e:	f104 0a19 	add.w	sl, r4, #25
 800f992:	68e3      	ldr	r3, [r4, #12]
 800f994:	6832      	ldr	r2, [r6, #0]
 800f996:	1a9b      	subs	r3, r3, r2
 800f998:	42ab      	cmp	r3, r5
 800f99a:	dc26      	bgt.n	800f9ea <_printf_common+0x96>
 800f99c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f9a0:	1e13      	subs	r3, r2, #0
 800f9a2:	6822      	ldr	r2, [r4, #0]
 800f9a4:	bf18      	it	ne
 800f9a6:	2301      	movne	r3, #1
 800f9a8:	0692      	lsls	r2, r2, #26
 800f9aa:	d42b      	bmi.n	800fa04 <_printf_common+0xb0>
 800f9ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9b0:	4649      	mov	r1, r9
 800f9b2:	4638      	mov	r0, r7
 800f9b4:	47c0      	blx	r8
 800f9b6:	3001      	adds	r0, #1
 800f9b8:	d01e      	beq.n	800f9f8 <_printf_common+0xa4>
 800f9ba:	6823      	ldr	r3, [r4, #0]
 800f9bc:	68e5      	ldr	r5, [r4, #12]
 800f9be:	6832      	ldr	r2, [r6, #0]
 800f9c0:	f003 0306 	and.w	r3, r3, #6
 800f9c4:	2b04      	cmp	r3, #4
 800f9c6:	bf08      	it	eq
 800f9c8:	1aad      	subeq	r5, r5, r2
 800f9ca:	68a3      	ldr	r3, [r4, #8]
 800f9cc:	6922      	ldr	r2, [r4, #16]
 800f9ce:	bf0c      	ite	eq
 800f9d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f9d4:	2500      	movne	r5, #0
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	bfc4      	itt	gt
 800f9da:	1a9b      	subgt	r3, r3, r2
 800f9dc:	18ed      	addgt	r5, r5, r3
 800f9de:	2600      	movs	r6, #0
 800f9e0:	341a      	adds	r4, #26
 800f9e2:	42b5      	cmp	r5, r6
 800f9e4:	d11a      	bne.n	800fa1c <_printf_common+0xc8>
 800f9e6:	2000      	movs	r0, #0
 800f9e8:	e008      	b.n	800f9fc <_printf_common+0xa8>
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	4652      	mov	r2, sl
 800f9ee:	4649      	mov	r1, r9
 800f9f0:	4638      	mov	r0, r7
 800f9f2:	47c0      	blx	r8
 800f9f4:	3001      	adds	r0, #1
 800f9f6:	d103      	bne.n	800fa00 <_printf_common+0xac>
 800f9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa00:	3501      	adds	r5, #1
 800fa02:	e7c6      	b.n	800f992 <_printf_common+0x3e>
 800fa04:	18e1      	adds	r1, r4, r3
 800fa06:	1c5a      	adds	r2, r3, #1
 800fa08:	2030      	movs	r0, #48	; 0x30
 800fa0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa0e:	4422      	add	r2, r4
 800fa10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa18:	3302      	adds	r3, #2
 800fa1a:	e7c7      	b.n	800f9ac <_printf_common+0x58>
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	4622      	mov	r2, r4
 800fa20:	4649      	mov	r1, r9
 800fa22:	4638      	mov	r0, r7
 800fa24:	47c0      	blx	r8
 800fa26:	3001      	adds	r0, #1
 800fa28:	d0e6      	beq.n	800f9f8 <_printf_common+0xa4>
 800fa2a:	3601      	adds	r6, #1
 800fa2c:	e7d9      	b.n	800f9e2 <_printf_common+0x8e>
	...

0800fa30 <_printf_i>:
 800fa30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa34:	7e0f      	ldrb	r7, [r1, #24]
 800fa36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa38:	2f78      	cmp	r7, #120	; 0x78
 800fa3a:	4691      	mov	r9, r2
 800fa3c:	4680      	mov	r8, r0
 800fa3e:	460c      	mov	r4, r1
 800fa40:	469a      	mov	sl, r3
 800fa42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa46:	d807      	bhi.n	800fa58 <_printf_i+0x28>
 800fa48:	2f62      	cmp	r7, #98	; 0x62
 800fa4a:	d80a      	bhi.n	800fa62 <_printf_i+0x32>
 800fa4c:	2f00      	cmp	r7, #0
 800fa4e:	f000 80d8 	beq.w	800fc02 <_printf_i+0x1d2>
 800fa52:	2f58      	cmp	r7, #88	; 0x58
 800fa54:	f000 80a3 	beq.w	800fb9e <_printf_i+0x16e>
 800fa58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa60:	e03a      	b.n	800fad8 <_printf_i+0xa8>
 800fa62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa66:	2b15      	cmp	r3, #21
 800fa68:	d8f6      	bhi.n	800fa58 <_printf_i+0x28>
 800fa6a:	a101      	add	r1, pc, #4	; (adr r1, 800fa70 <_printf_i+0x40>)
 800fa6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa70:	0800fac9 	.word	0x0800fac9
 800fa74:	0800fadd 	.word	0x0800fadd
 800fa78:	0800fa59 	.word	0x0800fa59
 800fa7c:	0800fa59 	.word	0x0800fa59
 800fa80:	0800fa59 	.word	0x0800fa59
 800fa84:	0800fa59 	.word	0x0800fa59
 800fa88:	0800fadd 	.word	0x0800fadd
 800fa8c:	0800fa59 	.word	0x0800fa59
 800fa90:	0800fa59 	.word	0x0800fa59
 800fa94:	0800fa59 	.word	0x0800fa59
 800fa98:	0800fa59 	.word	0x0800fa59
 800fa9c:	0800fbe9 	.word	0x0800fbe9
 800faa0:	0800fb0d 	.word	0x0800fb0d
 800faa4:	0800fbcb 	.word	0x0800fbcb
 800faa8:	0800fa59 	.word	0x0800fa59
 800faac:	0800fa59 	.word	0x0800fa59
 800fab0:	0800fc0b 	.word	0x0800fc0b
 800fab4:	0800fa59 	.word	0x0800fa59
 800fab8:	0800fb0d 	.word	0x0800fb0d
 800fabc:	0800fa59 	.word	0x0800fa59
 800fac0:	0800fa59 	.word	0x0800fa59
 800fac4:	0800fbd3 	.word	0x0800fbd3
 800fac8:	682b      	ldr	r3, [r5, #0]
 800faca:	1d1a      	adds	r2, r3, #4
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	602a      	str	r2, [r5, #0]
 800fad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fad8:	2301      	movs	r3, #1
 800fada:	e0a3      	b.n	800fc24 <_printf_i+0x1f4>
 800fadc:	6820      	ldr	r0, [r4, #0]
 800fade:	6829      	ldr	r1, [r5, #0]
 800fae0:	0606      	lsls	r6, r0, #24
 800fae2:	f101 0304 	add.w	r3, r1, #4
 800fae6:	d50a      	bpl.n	800fafe <_printf_i+0xce>
 800fae8:	680e      	ldr	r6, [r1, #0]
 800faea:	602b      	str	r3, [r5, #0]
 800faec:	2e00      	cmp	r6, #0
 800faee:	da03      	bge.n	800faf8 <_printf_i+0xc8>
 800faf0:	232d      	movs	r3, #45	; 0x2d
 800faf2:	4276      	negs	r6, r6
 800faf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800faf8:	485e      	ldr	r0, [pc, #376]	; (800fc74 <_printf_i+0x244>)
 800fafa:	230a      	movs	r3, #10
 800fafc:	e019      	b.n	800fb32 <_printf_i+0x102>
 800fafe:	680e      	ldr	r6, [r1, #0]
 800fb00:	602b      	str	r3, [r5, #0]
 800fb02:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fb06:	bf18      	it	ne
 800fb08:	b236      	sxthne	r6, r6
 800fb0a:	e7ef      	b.n	800faec <_printf_i+0xbc>
 800fb0c:	682b      	ldr	r3, [r5, #0]
 800fb0e:	6820      	ldr	r0, [r4, #0]
 800fb10:	1d19      	adds	r1, r3, #4
 800fb12:	6029      	str	r1, [r5, #0]
 800fb14:	0601      	lsls	r1, r0, #24
 800fb16:	d501      	bpl.n	800fb1c <_printf_i+0xec>
 800fb18:	681e      	ldr	r6, [r3, #0]
 800fb1a:	e002      	b.n	800fb22 <_printf_i+0xf2>
 800fb1c:	0646      	lsls	r6, r0, #25
 800fb1e:	d5fb      	bpl.n	800fb18 <_printf_i+0xe8>
 800fb20:	881e      	ldrh	r6, [r3, #0]
 800fb22:	4854      	ldr	r0, [pc, #336]	; (800fc74 <_printf_i+0x244>)
 800fb24:	2f6f      	cmp	r7, #111	; 0x6f
 800fb26:	bf0c      	ite	eq
 800fb28:	2308      	moveq	r3, #8
 800fb2a:	230a      	movne	r3, #10
 800fb2c:	2100      	movs	r1, #0
 800fb2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb32:	6865      	ldr	r5, [r4, #4]
 800fb34:	60a5      	str	r5, [r4, #8]
 800fb36:	2d00      	cmp	r5, #0
 800fb38:	bfa2      	ittt	ge
 800fb3a:	6821      	ldrge	r1, [r4, #0]
 800fb3c:	f021 0104 	bicge.w	r1, r1, #4
 800fb40:	6021      	strge	r1, [r4, #0]
 800fb42:	b90e      	cbnz	r6, 800fb48 <_printf_i+0x118>
 800fb44:	2d00      	cmp	r5, #0
 800fb46:	d04d      	beq.n	800fbe4 <_printf_i+0x1b4>
 800fb48:	4615      	mov	r5, r2
 800fb4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb4e:	fb03 6711 	mls	r7, r3, r1, r6
 800fb52:	5dc7      	ldrb	r7, [r0, r7]
 800fb54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb58:	4637      	mov	r7, r6
 800fb5a:	42bb      	cmp	r3, r7
 800fb5c:	460e      	mov	r6, r1
 800fb5e:	d9f4      	bls.n	800fb4a <_printf_i+0x11a>
 800fb60:	2b08      	cmp	r3, #8
 800fb62:	d10b      	bne.n	800fb7c <_printf_i+0x14c>
 800fb64:	6823      	ldr	r3, [r4, #0]
 800fb66:	07de      	lsls	r6, r3, #31
 800fb68:	d508      	bpl.n	800fb7c <_printf_i+0x14c>
 800fb6a:	6923      	ldr	r3, [r4, #16]
 800fb6c:	6861      	ldr	r1, [r4, #4]
 800fb6e:	4299      	cmp	r1, r3
 800fb70:	bfde      	ittt	le
 800fb72:	2330      	movle	r3, #48	; 0x30
 800fb74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb78:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb7c:	1b52      	subs	r2, r2, r5
 800fb7e:	6122      	str	r2, [r4, #16]
 800fb80:	f8cd a000 	str.w	sl, [sp]
 800fb84:	464b      	mov	r3, r9
 800fb86:	aa03      	add	r2, sp, #12
 800fb88:	4621      	mov	r1, r4
 800fb8a:	4640      	mov	r0, r8
 800fb8c:	f7ff fee2 	bl	800f954 <_printf_common>
 800fb90:	3001      	adds	r0, #1
 800fb92:	d14c      	bne.n	800fc2e <_printf_i+0x1fe>
 800fb94:	f04f 30ff 	mov.w	r0, #4294967295
 800fb98:	b004      	add	sp, #16
 800fb9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb9e:	4835      	ldr	r0, [pc, #212]	; (800fc74 <_printf_i+0x244>)
 800fba0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fba4:	6829      	ldr	r1, [r5, #0]
 800fba6:	6823      	ldr	r3, [r4, #0]
 800fba8:	f851 6b04 	ldr.w	r6, [r1], #4
 800fbac:	6029      	str	r1, [r5, #0]
 800fbae:	061d      	lsls	r5, r3, #24
 800fbb0:	d514      	bpl.n	800fbdc <_printf_i+0x1ac>
 800fbb2:	07df      	lsls	r7, r3, #31
 800fbb4:	bf44      	itt	mi
 800fbb6:	f043 0320 	orrmi.w	r3, r3, #32
 800fbba:	6023      	strmi	r3, [r4, #0]
 800fbbc:	b91e      	cbnz	r6, 800fbc6 <_printf_i+0x196>
 800fbbe:	6823      	ldr	r3, [r4, #0]
 800fbc0:	f023 0320 	bic.w	r3, r3, #32
 800fbc4:	6023      	str	r3, [r4, #0]
 800fbc6:	2310      	movs	r3, #16
 800fbc8:	e7b0      	b.n	800fb2c <_printf_i+0xfc>
 800fbca:	6823      	ldr	r3, [r4, #0]
 800fbcc:	f043 0320 	orr.w	r3, r3, #32
 800fbd0:	6023      	str	r3, [r4, #0]
 800fbd2:	2378      	movs	r3, #120	; 0x78
 800fbd4:	4828      	ldr	r0, [pc, #160]	; (800fc78 <_printf_i+0x248>)
 800fbd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fbda:	e7e3      	b.n	800fba4 <_printf_i+0x174>
 800fbdc:	0659      	lsls	r1, r3, #25
 800fbde:	bf48      	it	mi
 800fbe0:	b2b6      	uxthmi	r6, r6
 800fbe2:	e7e6      	b.n	800fbb2 <_printf_i+0x182>
 800fbe4:	4615      	mov	r5, r2
 800fbe6:	e7bb      	b.n	800fb60 <_printf_i+0x130>
 800fbe8:	682b      	ldr	r3, [r5, #0]
 800fbea:	6826      	ldr	r6, [r4, #0]
 800fbec:	6961      	ldr	r1, [r4, #20]
 800fbee:	1d18      	adds	r0, r3, #4
 800fbf0:	6028      	str	r0, [r5, #0]
 800fbf2:	0635      	lsls	r5, r6, #24
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	d501      	bpl.n	800fbfc <_printf_i+0x1cc>
 800fbf8:	6019      	str	r1, [r3, #0]
 800fbfa:	e002      	b.n	800fc02 <_printf_i+0x1d2>
 800fbfc:	0670      	lsls	r0, r6, #25
 800fbfe:	d5fb      	bpl.n	800fbf8 <_printf_i+0x1c8>
 800fc00:	8019      	strh	r1, [r3, #0]
 800fc02:	2300      	movs	r3, #0
 800fc04:	6123      	str	r3, [r4, #16]
 800fc06:	4615      	mov	r5, r2
 800fc08:	e7ba      	b.n	800fb80 <_printf_i+0x150>
 800fc0a:	682b      	ldr	r3, [r5, #0]
 800fc0c:	1d1a      	adds	r2, r3, #4
 800fc0e:	602a      	str	r2, [r5, #0]
 800fc10:	681d      	ldr	r5, [r3, #0]
 800fc12:	6862      	ldr	r2, [r4, #4]
 800fc14:	2100      	movs	r1, #0
 800fc16:	4628      	mov	r0, r5
 800fc18:	f7f0 faea 	bl	80001f0 <memchr>
 800fc1c:	b108      	cbz	r0, 800fc22 <_printf_i+0x1f2>
 800fc1e:	1b40      	subs	r0, r0, r5
 800fc20:	6060      	str	r0, [r4, #4]
 800fc22:	6863      	ldr	r3, [r4, #4]
 800fc24:	6123      	str	r3, [r4, #16]
 800fc26:	2300      	movs	r3, #0
 800fc28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc2c:	e7a8      	b.n	800fb80 <_printf_i+0x150>
 800fc2e:	6923      	ldr	r3, [r4, #16]
 800fc30:	462a      	mov	r2, r5
 800fc32:	4649      	mov	r1, r9
 800fc34:	4640      	mov	r0, r8
 800fc36:	47d0      	blx	sl
 800fc38:	3001      	adds	r0, #1
 800fc3a:	d0ab      	beq.n	800fb94 <_printf_i+0x164>
 800fc3c:	6823      	ldr	r3, [r4, #0]
 800fc3e:	079b      	lsls	r3, r3, #30
 800fc40:	d413      	bmi.n	800fc6a <_printf_i+0x23a>
 800fc42:	68e0      	ldr	r0, [r4, #12]
 800fc44:	9b03      	ldr	r3, [sp, #12]
 800fc46:	4298      	cmp	r0, r3
 800fc48:	bfb8      	it	lt
 800fc4a:	4618      	movlt	r0, r3
 800fc4c:	e7a4      	b.n	800fb98 <_printf_i+0x168>
 800fc4e:	2301      	movs	r3, #1
 800fc50:	4632      	mov	r2, r6
 800fc52:	4649      	mov	r1, r9
 800fc54:	4640      	mov	r0, r8
 800fc56:	47d0      	blx	sl
 800fc58:	3001      	adds	r0, #1
 800fc5a:	d09b      	beq.n	800fb94 <_printf_i+0x164>
 800fc5c:	3501      	adds	r5, #1
 800fc5e:	68e3      	ldr	r3, [r4, #12]
 800fc60:	9903      	ldr	r1, [sp, #12]
 800fc62:	1a5b      	subs	r3, r3, r1
 800fc64:	42ab      	cmp	r3, r5
 800fc66:	dcf2      	bgt.n	800fc4e <_printf_i+0x21e>
 800fc68:	e7eb      	b.n	800fc42 <_printf_i+0x212>
 800fc6a:	2500      	movs	r5, #0
 800fc6c:	f104 0619 	add.w	r6, r4, #25
 800fc70:	e7f5      	b.n	800fc5e <_printf_i+0x22e>
 800fc72:	bf00      	nop
 800fc74:	08011fa6 	.word	0x08011fa6
 800fc78:	08011fb7 	.word	0x08011fb7

0800fc7c <realloc>:
 800fc7c:	4b02      	ldr	r3, [pc, #8]	; (800fc88 <realloc+0xc>)
 800fc7e:	460a      	mov	r2, r1
 800fc80:	4601      	mov	r1, r0
 800fc82:	6818      	ldr	r0, [r3, #0]
 800fc84:	f001 ba7c 	b.w	8011180 <_realloc_r>
 800fc88:	20000048 	.word	0x20000048

0800fc8c <_sbrk_r>:
 800fc8c:	b538      	push	{r3, r4, r5, lr}
 800fc8e:	4d06      	ldr	r5, [pc, #24]	; (800fca8 <_sbrk_r+0x1c>)
 800fc90:	2300      	movs	r3, #0
 800fc92:	4604      	mov	r4, r0
 800fc94:	4608      	mov	r0, r1
 800fc96:	602b      	str	r3, [r5, #0]
 800fc98:	f7f5 fd0a 	bl	80056b0 <_sbrk>
 800fc9c:	1c43      	adds	r3, r0, #1
 800fc9e:	d102      	bne.n	800fca6 <_sbrk_r+0x1a>
 800fca0:	682b      	ldr	r3, [r5, #0]
 800fca2:	b103      	cbz	r3, 800fca6 <_sbrk_r+0x1a>
 800fca4:	6023      	str	r3, [r4, #0]
 800fca6:	bd38      	pop	{r3, r4, r5, pc}
 800fca8:	200016f0 	.word	0x200016f0

0800fcac <_raise_r>:
 800fcac:	291f      	cmp	r1, #31
 800fcae:	b538      	push	{r3, r4, r5, lr}
 800fcb0:	4604      	mov	r4, r0
 800fcb2:	460d      	mov	r5, r1
 800fcb4:	d904      	bls.n	800fcc0 <_raise_r+0x14>
 800fcb6:	2316      	movs	r3, #22
 800fcb8:	6003      	str	r3, [r0, #0]
 800fcba:	f04f 30ff 	mov.w	r0, #4294967295
 800fcbe:	bd38      	pop	{r3, r4, r5, pc}
 800fcc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fcc2:	b112      	cbz	r2, 800fcca <_raise_r+0x1e>
 800fcc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fcc8:	b94b      	cbnz	r3, 800fcde <_raise_r+0x32>
 800fcca:	4620      	mov	r0, r4
 800fccc:	f000 f830 	bl	800fd30 <_getpid_r>
 800fcd0:	462a      	mov	r2, r5
 800fcd2:	4601      	mov	r1, r0
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcda:	f000 b817 	b.w	800fd0c <_kill_r>
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d00a      	beq.n	800fcf8 <_raise_r+0x4c>
 800fce2:	1c59      	adds	r1, r3, #1
 800fce4:	d103      	bne.n	800fcee <_raise_r+0x42>
 800fce6:	2316      	movs	r3, #22
 800fce8:	6003      	str	r3, [r0, #0]
 800fcea:	2001      	movs	r0, #1
 800fcec:	e7e7      	b.n	800fcbe <_raise_r+0x12>
 800fcee:	2400      	movs	r4, #0
 800fcf0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fcf4:	4628      	mov	r0, r5
 800fcf6:	4798      	blx	r3
 800fcf8:	2000      	movs	r0, #0
 800fcfa:	e7e0      	b.n	800fcbe <_raise_r+0x12>

0800fcfc <raise>:
 800fcfc:	4b02      	ldr	r3, [pc, #8]	; (800fd08 <raise+0xc>)
 800fcfe:	4601      	mov	r1, r0
 800fd00:	6818      	ldr	r0, [r3, #0]
 800fd02:	f7ff bfd3 	b.w	800fcac <_raise_r>
 800fd06:	bf00      	nop
 800fd08:	20000048 	.word	0x20000048

0800fd0c <_kill_r>:
 800fd0c:	b538      	push	{r3, r4, r5, lr}
 800fd0e:	4d07      	ldr	r5, [pc, #28]	; (800fd2c <_kill_r+0x20>)
 800fd10:	2300      	movs	r3, #0
 800fd12:	4604      	mov	r4, r0
 800fd14:	4608      	mov	r0, r1
 800fd16:	4611      	mov	r1, r2
 800fd18:	602b      	str	r3, [r5, #0]
 800fd1a:	f7f5 fc41 	bl	80055a0 <_kill>
 800fd1e:	1c43      	adds	r3, r0, #1
 800fd20:	d102      	bne.n	800fd28 <_kill_r+0x1c>
 800fd22:	682b      	ldr	r3, [r5, #0]
 800fd24:	b103      	cbz	r3, 800fd28 <_kill_r+0x1c>
 800fd26:	6023      	str	r3, [r4, #0]
 800fd28:	bd38      	pop	{r3, r4, r5, pc}
 800fd2a:	bf00      	nop
 800fd2c:	200016f0 	.word	0x200016f0

0800fd30 <_getpid_r>:
 800fd30:	f7f5 bc2e 	b.w	8005590 <_getpid>

0800fd34 <quorem>:
 800fd34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd38:	6903      	ldr	r3, [r0, #16]
 800fd3a:	690c      	ldr	r4, [r1, #16]
 800fd3c:	42a3      	cmp	r3, r4
 800fd3e:	4607      	mov	r7, r0
 800fd40:	f2c0 8081 	blt.w	800fe46 <quorem+0x112>
 800fd44:	3c01      	subs	r4, #1
 800fd46:	f101 0814 	add.w	r8, r1, #20
 800fd4a:	f100 0514 	add.w	r5, r0, #20
 800fd4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd52:	9301      	str	r3, [sp, #4]
 800fd54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fd64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd68:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd6c:	d331      	bcc.n	800fdd2 <quorem+0x9e>
 800fd6e:	f04f 0e00 	mov.w	lr, #0
 800fd72:	4640      	mov	r0, r8
 800fd74:	46ac      	mov	ip, r5
 800fd76:	46f2      	mov	sl, lr
 800fd78:	f850 2b04 	ldr.w	r2, [r0], #4
 800fd7c:	b293      	uxth	r3, r2
 800fd7e:	fb06 e303 	mla	r3, r6, r3, lr
 800fd82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	ebaa 0303 	sub.w	r3, sl, r3
 800fd8c:	f8dc a000 	ldr.w	sl, [ip]
 800fd90:	0c12      	lsrs	r2, r2, #16
 800fd92:	fa13 f38a 	uxtah	r3, r3, sl
 800fd96:	fb06 e202 	mla	r2, r6, r2, lr
 800fd9a:	9300      	str	r3, [sp, #0]
 800fd9c:	9b00      	ldr	r3, [sp, #0]
 800fd9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fda2:	b292      	uxth	r2, r2
 800fda4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fda8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fdac:	f8bd 3000 	ldrh.w	r3, [sp]
 800fdb0:	4581      	cmp	r9, r0
 800fdb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fdb6:	f84c 3b04 	str.w	r3, [ip], #4
 800fdba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fdbe:	d2db      	bcs.n	800fd78 <quorem+0x44>
 800fdc0:	f855 300b 	ldr.w	r3, [r5, fp]
 800fdc4:	b92b      	cbnz	r3, 800fdd2 <quorem+0x9e>
 800fdc6:	9b01      	ldr	r3, [sp, #4]
 800fdc8:	3b04      	subs	r3, #4
 800fdca:	429d      	cmp	r5, r3
 800fdcc:	461a      	mov	r2, r3
 800fdce:	d32e      	bcc.n	800fe2e <quorem+0xfa>
 800fdd0:	613c      	str	r4, [r7, #16]
 800fdd2:	4638      	mov	r0, r7
 800fdd4:	f001 f8bc 	bl	8010f50 <__mcmp>
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	db24      	blt.n	800fe26 <quorem+0xf2>
 800fddc:	3601      	adds	r6, #1
 800fdde:	4628      	mov	r0, r5
 800fde0:	f04f 0c00 	mov.w	ip, #0
 800fde4:	f858 2b04 	ldr.w	r2, [r8], #4
 800fde8:	f8d0 e000 	ldr.w	lr, [r0]
 800fdec:	b293      	uxth	r3, r2
 800fdee:	ebac 0303 	sub.w	r3, ip, r3
 800fdf2:	0c12      	lsrs	r2, r2, #16
 800fdf4:	fa13 f38e 	uxtah	r3, r3, lr
 800fdf8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fdfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe00:	b29b      	uxth	r3, r3
 800fe02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe06:	45c1      	cmp	r9, r8
 800fe08:	f840 3b04 	str.w	r3, [r0], #4
 800fe0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fe10:	d2e8      	bcs.n	800fde4 <quorem+0xb0>
 800fe12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe1a:	b922      	cbnz	r2, 800fe26 <quorem+0xf2>
 800fe1c:	3b04      	subs	r3, #4
 800fe1e:	429d      	cmp	r5, r3
 800fe20:	461a      	mov	r2, r3
 800fe22:	d30a      	bcc.n	800fe3a <quorem+0x106>
 800fe24:	613c      	str	r4, [r7, #16]
 800fe26:	4630      	mov	r0, r6
 800fe28:	b003      	add	sp, #12
 800fe2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe2e:	6812      	ldr	r2, [r2, #0]
 800fe30:	3b04      	subs	r3, #4
 800fe32:	2a00      	cmp	r2, #0
 800fe34:	d1cc      	bne.n	800fdd0 <quorem+0x9c>
 800fe36:	3c01      	subs	r4, #1
 800fe38:	e7c7      	b.n	800fdca <quorem+0x96>
 800fe3a:	6812      	ldr	r2, [r2, #0]
 800fe3c:	3b04      	subs	r3, #4
 800fe3e:	2a00      	cmp	r2, #0
 800fe40:	d1f0      	bne.n	800fe24 <quorem+0xf0>
 800fe42:	3c01      	subs	r4, #1
 800fe44:	e7eb      	b.n	800fe1e <quorem+0xea>
 800fe46:	2000      	movs	r0, #0
 800fe48:	e7ee      	b.n	800fe28 <quorem+0xf4>
 800fe4a:	0000      	movs	r0, r0
 800fe4c:	0000      	movs	r0, r0
	...

0800fe50 <_dtoa_r>:
 800fe50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe54:	ed2d 8b04 	vpush	{d8-d9}
 800fe58:	ec57 6b10 	vmov	r6, r7, d0
 800fe5c:	b093      	sub	sp, #76	; 0x4c
 800fe5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fe60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fe64:	9106      	str	r1, [sp, #24]
 800fe66:	ee10 aa10 	vmov	sl, s0
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	9209      	str	r2, [sp, #36]	; 0x24
 800fe6e:	930c      	str	r3, [sp, #48]	; 0x30
 800fe70:	46bb      	mov	fp, r7
 800fe72:	b975      	cbnz	r5, 800fe92 <_dtoa_r+0x42>
 800fe74:	2010      	movs	r0, #16
 800fe76:	f7ff f991 	bl	800f19c <malloc>
 800fe7a:	4602      	mov	r2, r0
 800fe7c:	6260      	str	r0, [r4, #36]	; 0x24
 800fe7e:	b920      	cbnz	r0, 800fe8a <_dtoa_r+0x3a>
 800fe80:	4ba7      	ldr	r3, [pc, #668]	; (8010120 <_dtoa_r+0x2d0>)
 800fe82:	21ea      	movs	r1, #234	; 0xea
 800fe84:	48a7      	ldr	r0, [pc, #668]	; (8010124 <_dtoa_r+0x2d4>)
 800fe86:	f001 f9ab 	bl	80111e0 <__assert_func>
 800fe8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fe8e:	6005      	str	r5, [r0, #0]
 800fe90:	60c5      	str	r5, [r0, #12]
 800fe92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe94:	6819      	ldr	r1, [r3, #0]
 800fe96:	b151      	cbz	r1, 800feae <_dtoa_r+0x5e>
 800fe98:	685a      	ldr	r2, [r3, #4]
 800fe9a:	604a      	str	r2, [r1, #4]
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	4093      	lsls	r3, r2
 800fea0:	608b      	str	r3, [r1, #8]
 800fea2:	4620      	mov	r0, r4
 800fea4:	f000 fe12 	bl	8010acc <_Bfree>
 800fea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800feaa:	2200      	movs	r2, #0
 800feac:	601a      	str	r2, [r3, #0]
 800feae:	1e3b      	subs	r3, r7, #0
 800feb0:	bfaa      	itet	ge
 800feb2:	2300      	movge	r3, #0
 800feb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800feb8:	f8c8 3000 	strge.w	r3, [r8]
 800febc:	4b9a      	ldr	r3, [pc, #616]	; (8010128 <_dtoa_r+0x2d8>)
 800febe:	bfbc      	itt	lt
 800fec0:	2201      	movlt	r2, #1
 800fec2:	f8c8 2000 	strlt.w	r2, [r8]
 800fec6:	ea33 030b 	bics.w	r3, r3, fp
 800feca:	d11b      	bne.n	800ff04 <_dtoa_r+0xb4>
 800fecc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fece:	f242 730f 	movw	r3, #9999	; 0x270f
 800fed2:	6013      	str	r3, [r2, #0]
 800fed4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fed8:	4333      	orrs	r3, r6
 800feda:	f000 8592 	beq.w	8010a02 <_dtoa_r+0xbb2>
 800fede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fee0:	b963      	cbnz	r3, 800fefc <_dtoa_r+0xac>
 800fee2:	4b92      	ldr	r3, [pc, #584]	; (801012c <_dtoa_r+0x2dc>)
 800fee4:	e022      	b.n	800ff2c <_dtoa_r+0xdc>
 800fee6:	4b92      	ldr	r3, [pc, #584]	; (8010130 <_dtoa_r+0x2e0>)
 800fee8:	9301      	str	r3, [sp, #4]
 800feea:	3308      	adds	r3, #8
 800feec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800feee:	6013      	str	r3, [r2, #0]
 800fef0:	9801      	ldr	r0, [sp, #4]
 800fef2:	b013      	add	sp, #76	; 0x4c
 800fef4:	ecbd 8b04 	vpop	{d8-d9}
 800fef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fefc:	4b8b      	ldr	r3, [pc, #556]	; (801012c <_dtoa_r+0x2dc>)
 800fefe:	9301      	str	r3, [sp, #4]
 800ff00:	3303      	adds	r3, #3
 800ff02:	e7f3      	b.n	800feec <_dtoa_r+0x9c>
 800ff04:	2200      	movs	r2, #0
 800ff06:	2300      	movs	r3, #0
 800ff08:	4650      	mov	r0, sl
 800ff0a:	4659      	mov	r1, fp
 800ff0c:	f7f0 fde4 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff10:	ec4b ab19 	vmov	d9, sl, fp
 800ff14:	4680      	mov	r8, r0
 800ff16:	b158      	cbz	r0, 800ff30 <_dtoa_r+0xe0>
 800ff18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	6013      	str	r3, [r2, #0]
 800ff1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	f000 856b 	beq.w	80109fc <_dtoa_r+0xbac>
 800ff26:	4883      	ldr	r0, [pc, #524]	; (8010134 <_dtoa_r+0x2e4>)
 800ff28:	6018      	str	r0, [r3, #0]
 800ff2a:	1e43      	subs	r3, r0, #1
 800ff2c:	9301      	str	r3, [sp, #4]
 800ff2e:	e7df      	b.n	800fef0 <_dtoa_r+0xa0>
 800ff30:	ec4b ab10 	vmov	d0, sl, fp
 800ff34:	aa10      	add	r2, sp, #64	; 0x40
 800ff36:	a911      	add	r1, sp, #68	; 0x44
 800ff38:	4620      	mov	r0, r4
 800ff3a:	f001 f8af 	bl	801109c <__d2b>
 800ff3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ff42:	ee08 0a10 	vmov	s16, r0
 800ff46:	2d00      	cmp	r5, #0
 800ff48:	f000 8084 	beq.w	8010054 <_dtoa_r+0x204>
 800ff4c:	ee19 3a90 	vmov	r3, s19
 800ff50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ff58:	4656      	mov	r6, sl
 800ff5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ff5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ff62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ff66:	4b74      	ldr	r3, [pc, #464]	; (8010138 <_dtoa_r+0x2e8>)
 800ff68:	2200      	movs	r2, #0
 800ff6a:	4630      	mov	r0, r6
 800ff6c:	4639      	mov	r1, r7
 800ff6e:	f7f0 f993 	bl	8000298 <__aeabi_dsub>
 800ff72:	a365      	add	r3, pc, #404	; (adr r3, 8010108 <_dtoa_r+0x2b8>)
 800ff74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff78:	f7f0 fb46 	bl	8000608 <__aeabi_dmul>
 800ff7c:	a364      	add	r3, pc, #400	; (adr r3, 8010110 <_dtoa_r+0x2c0>)
 800ff7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff82:	f7f0 f98b 	bl	800029c <__adddf3>
 800ff86:	4606      	mov	r6, r0
 800ff88:	4628      	mov	r0, r5
 800ff8a:	460f      	mov	r7, r1
 800ff8c:	f7f0 fad2 	bl	8000534 <__aeabi_i2d>
 800ff90:	a361      	add	r3, pc, #388	; (adr r3, 8010118 <_dtoa_r+0x2c8>)
 800ff92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff96:	f7f0 fb37 	bl	8000608 <__aeabi_dmul>
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	4630      	mov	r0, r6
 800ffa0:	4639      	mov	r1, r7
 800ffa2:	f7f0 f97b 	bl	800029c <__adddf3>
 800ffa6:	4606      	mov	r6, r0
 800ffa8:	460f      	mov	r7, r1
 800ffaa:	f7f0 fddd 	bl	8000b68 <__aeabi_d2iz>
 800ffae:	2200      	movs	r2, #0
 800ffb0:	9000      	str	r0, [sp, #0]
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	4639      	mov	r1, r7
 800ffb8:	f7f0 fd98 	bl	8000aec <__aeabi_dcmplt>
 800ffbc:	b150      	cbz	r0, 800ffd4 <_dtoa_r+0x184>
 800ffbe:	9800      	ldr	r0, [sp, #0]
 800ffc0:	f7f0 fab8 	bl	8000534 <__aeabi_i2d>
 800ffc4:	4632      	mov	r2, r6
 800ffc6:	463b      	mov	r3, r7
 800ffc8:	f7f0 fd86 	bl	8000ad8 <__aeabi_dcmpeq>
 800ffcc:	b910      	cbnz	r0, 800ffd4 <_dtoa_r+0x184>
 800ffce:	9b00      	ldr	r3, [sp, #0]
 800ffd0:	3b01      	subs	r3, #1
 800ffd2:	9300      	str	r3, [sp, #0]
 800ffd4:	9b00      	ldr	r3, [sp, #0]
 800ffd6:	2b16      	cmp	r3, #22
 800ffd8:	d85a      	bhi.n	8010090 <_dtoa_r+0x240>
 800ffda:	9a00      	ldr	r2, [sp, #0]
 800ffdc:	4b57      	ldr	r3, [pc, #348]	; (801013c <_dtoa_r+0x2ec>)
 800ffde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ffe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe6:	ec51 0b19 	vmov	r0, r1, d9
 800ffea:	f7f0 fd7f 	bl	8000aec <__aeabi_dcmplt>
 800ffee:	2800      	cmp	r0, #0
 800fff0:	d050      	beq.n	8010094 <_dtoa_r+0x244>
 800fff2:	9b00      	ldr	r3, [sp, #0]
 800fff4:	3b01      	subs	r3, #1
 800fff6:	9300      	str	r3, [sp, #0]
 800fff8:	2300      	movs	r3, #0
 800fffa:	930b      	str	r3, [sp, #44]	; 0x2c
 800fffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fffe:	1b5d      	subs	r5, r3, r5
 8010000:	1e6b      	subs	r3, r5, #1
 8010002:	9305      	str	r3, [sp, #20]
 8010004:	bf45      	ittet	mi
 8010006:	f1c5 0301 	rsbmi	r3, r5, #1
 801000a:	9304      	strmi	r3, [sp, #16]
 801000c:	2300      	movpl	r3, #0
 801000e:	2300      	movmi	r3, #0
 8010010:	bf4c      	ite	mi
 8010012:	9305      	strmi	r3, [sp, #20]
 8010014:	9304      	strpl	r3, [sp, #16]
 8010016:	9b00      	ldr	r3, [sp, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	db3d      	blt.n	8010098 <_dtoa_r+0x248>
 801001c:	9b05      	ldr	r3, [sp, #20]
 801001e:	9a00      	ldr	r2, [sp, #0]
 8010020:	920a      	str	r2, [sp, #40]	; 0x28
 8010022:	4413      	add	r3, r2
 8010024:	9305      	str	r3, [sp, #20]
 8010026:	2300      	movs	r3, #0
 8010028:	9307      	str	r3, [sp, #28]
 801002a:	9b06      	ldr	r3, [sp, #24]
 801002c:	2b09      	cmp	r3, #9
 801002e:	f200 8089 	bhi.w	8010144 <_dtoa_r+0x2f4>
 8010032:	2b05      	cmp	r3, #5
 8010034:	bfc4      	itt	gt
 8010036:	3b04      	subgt	r3, #4
 8010038:	9306      	strgt	r3, [sp, #24]
 801003a:	9b06      	ldr	r3, [sp, #24]
 801003c:	f1a3 0302 	sub.w	r3, r3, #2
 8010040:	bfcc      	ite	gt
 8010042:	2500      	movgt	r5, #0
 8010044:	2501      	movle	r5, #1
 8010046:	2b03      	cmp	r3, #3
 8010048:	f200 8087 	bhi.w	801015a <_dtoa_r+0x30a>
 801004c:	e8df f003 	tbb	[pc, r3]
 8010050:	59383a2d 	.word	0x59383a2d
 8010054:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010058:	441d      	add	r5, r3
 801005a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801005e:	2b20      	cmp	r3, #32
 8010060:	bfc1      	itttt	gt
 8010062:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010066:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801006a:	fa0b f303 	lslgt.w	r3, fp, r3
 801006e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010072:	bfda      	itte	le
 8010074:	f1c3 0320 	rsble	r3, r3, #32
 8010078:	fa06 f003 	lslle.w	r0, r6, r3
 801007c:	4318      	orrgt	r0, r3
 801007e:	f7f0 fa49 	bl	8000514 <__aeabi_ui2d>
 8010082:	2301      	movs	r3, #1
 8010084:	4606      	mov	r6, r0
 8010086:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801008a:	3d01      	subs	r5, #1
 801008c:	930e      	str	r3, [sp, #56]	; 0x38
 801008e:	e76a      	b.n	800ff66 <_dtoa_r+0x116>
 8010090:	2301      	movs	r3, #1
 8010092:	e7b2      	b.n	800fffa <_dtoa_r+0x1aa>
 8010094:	900b      	str	r0, [sp, #44]	; 0x2c
 8010096:	e7b1      	b.n	800fffc <_dtoa_r+0x1ac>
 8010098:	9b04      	ldr	r3, [sp, #16]
 801009a:	9a00      	ldr	r2, [sp, #0]
 801009c:	1a9b      	subs	r3, r3, r2
 801009e:	9304      	str	r3, [sp, #16]
 80100a0:	4253      	negs	r3, r2
 80100a2:	9307      	str	r3, [sp, #28]
 80100a4:	2300      	movs	r3, #0
 80100a6:	930a      	str	r3, [sp, #40]	; 0x28
 80100a8:	e7bf      	b.n	801002a <_dtoa_r+0x1da>
 80100aa:	2300      	movs	r3, #0
 80100ac:	9308      	str	r3, [sp, #32]
 80100ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	dc55      	bgt.n	8010160 <_dtoa_r+0x310>
 80100b4:	2301      	movs	r3, #1
 80100b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80100ba:	461a      	mov	r2, r3
 80100bc:	9209      	str	r2, [sp, #36]	; 0x24
 80100be:	e00c      	b.n	80100da <_dtoa_r+0x28a>
 80100c0:	2301      	movs	r3, #1
 80100c2:	e7f3      	b.n	80100ac <_dtoa_r+0x25c>
 80100c4:	2300      	movs	r3, #0
 80100c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100c8:	9308      	str	r3, [sp, #32]
 80100ca:	9b00      	ldr	r3, [sp, #0]
 80100cc:	4413      	add	r3, r2
 80100ce:	9302      	str	r3, [sp, #8]
 80100d0:	3301      	adds	r3, #1
 80100d2:	2b01      	cmp	r3, #1
 80100d4:	9303      	str	r3, [sp, #12]
 80100d6:	bfb8      	it	lt
 80100d8:	2301      	movlt	r3, #1
 80100da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80100dc:	2200      	movs	r2, #0
 80100de:	6042      	str	r2, [r0, #4]
 80100e0:	2204      	movs	r2, #4
 80100e2:	f102 0614 	add.w	r6, r2, #20
 80100e6:	429e      	cmp	r6, r3
 80100e8:	6841      	ldr	r1, [r0, #4]
 80100ea:	d93d      	bls.n	8010168 <_dtoa_r+0x318>
 80100ec:	4620      	mov	r0, r4
 80100ee:	f000 fcad 	bl	8010a4c <_Balloc>
 80100f2:	9001      	str	r0, [sp, #4]
 80100f4:	2800      	cmp	r0, #0
 80100f6:	d13b      	bne.n	8010170 <_dtoa_r+0x320>
 80100f8:	4b11      	ldr	r3, [pc, #68]	; (8010140 <_dtoa_r+0x2f0>)
 80100fa:	4602      	mov	r2, r0
 80100fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010100:	e6c0      	b.n	800fe84 <_dtoa_r+0x34>
 8010102:	2301      	movs	r3, #1
 8010104:	e7df      	b.n	80100c6 <_dtoa_r+0x276>
 8010106:	bf00      	nop
 8010108:	636f4361 	.word	0x636f4361
 801010c:	3fd287a7 	.word	0x3fd287a7
 8010110:	8b60c8b3 	.word	0x8b60c8b3
 8010114:	3fc68a28 	.word	0x3fc68a28
 8010118:	509f79fb 	.word	0x509f79fb
 801011c:	3fd34413 	.word	0x3fd34413
 8010120:	08011fd5 	.word	0x08011fd5
 8010124:	08011fec 	.word	0x08011fec
 8010128:	7ff00000 	.word	0x7ff00000
 801012c:	08011fd1 	.word	0x08011fd1
 8010130:	08011fc8 	.word	0x08011fc8
 8010134:	08011fa5 	.word	0x08011fa5
 8010138:	3ff80000 	.word	0x3ff80000
 801013c:	080120e0 	.word	0x080120e0
 8010140:	08012047 	.word	0x08012047
 8010144:	2501      	movs	r5, #1
 8010146:	2300      	movs	r3, #0
 8010148:	9306      	str	r3, [sp, #24]
 801014a:	9508      	str	r5, [sp, #32]
 801014c:	f04f 33ff 	mov.w	r3, #4294967295
 8010150:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010154:	2200      	movs	r2, #0
 8010156:	2312      	movs	r3, #18
 8010158:	e7b0      	b.n	80100bc <_dtoa_r+0x26c>
 801015a:	2301      	movs	r3, #1
 801015c:	9308      	str	r3, [sp, #32]
 801015e:	e7f5      	b.n	801014c <_dtoa_r+0x2fc>
 8010160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010162:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010166:	e7b8      	b.n	80100da <_dtoa_r+0x28a>
 8010168:	3101      	adds	r1, #1
 801016a:	6041      	str	r1, [r0, #4]
 801016c:	0052      	lsls	r2, r2, #1
 801016e:	e7b8      	b.n	80100e2 <_dtoa_r+0x292>
 8010170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010172:	9a01      	ldr	r2, [sp, #4]
 8010174:	601a      	str	r2, [r3, #0]
 8010176:	9b03      	ldr	r3, [sp, #12]
 8010178:	2b0e      	cmp	r3, #14
 801017a:	f200 809d 	bhi.w	80102b8 <_dtoa_r+0x468>
 801017e:	2d00      	cmp	r5, #0
 8010180:	f000 809a 	beq.w	80102b8 <_dtoa_r+0x468>
 8010184:	9b00      	ldr	r3, [sp, #0]
 8010186:	2b00      	cmp	r3, #0
 8010188:	dd32      	ble.n	80101f0 <_dtoa_r+0x3a0>
 801018a:	4ab7      	ldr	r2, [pc, #732]	; (8010468 <_dtoa_r+0x618>)
 801018c:	f003 030f 	and.w	r3, r3, #15
 8010190:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010194:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010198:	9b00      	ldr	r3, [sp, #0]
 801019a:	05d8      	lsls	r0, r3, #23
 801019c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80101a0:	d516      	bpl.n	80101d0 <_dtoa_r+0x380>
 80101a2:	4bb2      	ldr	r3, [pc, #712]	; (801046c <_dtoa_r+0x61c>)
 80101a4:	ec51 0b19 	vmov	r0, r1, d9
 80101a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80101ac:	f7f0 fb56 	bl	800085c <__aeabi_ddiv>
 80101b0:	f007 070f 	and.w	r7, r7, #15
 80101b4:	4682      	mov	sl, r0
 80101b6:	468b      	mov	fp, r1
 80101b8:	2503      	movs	r5, #3
 80101ba:	4eac      	ldr	r6, [pc, #688]	; (801046c <_dtoa_r+0x61c>)
 80101bc:	b957      	cbnz	r7, 80101d4 <_dtoa_r+0x384>
 80101be:	4642      	mov	r2, r8
 80101c0:	464b      	mov	r3, r9
 80101c2:	4650      	mov	r0, sl
 80101c4:	4659      	mov	r1, fp
 80101c6:	f7f0 fb49 	bl	800085c <__aeabi_ddiv>
 80101ca:	4682      	mov	sl, r0
 80101cc:	468b      	mov	fp, r1
 80101ce:	e028      	b.n	8010222 <_dtoa_r+0x3d2>
 80101d0:	2502      	movs	r5, #2
 80101d2:	e7f2      	b.n	80101ba <_dtoa_r+0x36a>
 80101d4:	07f9      	lsls	r1, r7, #31
 80101d6:	d508      	bpl.n	80101ea <_dtoa_r+0x39a>
 80101d8:	4640      	mov	r0, r8
 80101da:	4649      	mov	r1, r9
 80101dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80101e0:	f7f0 fa12 	bl	8000608 <__aeabi_dmul>
 80101e4:	3501      	adds	r5, #1
 80101e6:	4680      	mov	r8, r0
 80101e8:	4689      	mov	r9, r1
 80101ea:	107f      	asrs	r7, r7, #1
 80101ec:	3608      	adds	r6, #8
 80101ee:	e7e5      	b.n	80101bc <_dtoa_r+0x36c>
 80101f0:	f000 809b 	beq.w	801032a <_dtoa_r+0x4da>
 80101f4:	9b00      	ldr	r3, [sp, #0]
 80101f6:	4f9d      	ldr	r7, [pc, #628]	; (801046c <_dtoa_r+0x61c>)
 80101f8:	425e      	negs	r6, r3
 80101fa:	4b9b      	ldr	r3, [pc, #620]	; (8010468 <_dtoa_r+0x618>)
 80101fc:	f006 020f 	and.w	r2, r6, #15
 8010200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010208:	ec51 0b19 	vmov	r0, r1, d9
 801020c:	f7f0 f9fc 	bl	8000608 <__aeabi_dmul>
 8010210:	1136      	asrs	r6, r6, #4
 8010212:	4682      	mov	sl, r0
 8010214:	468b      	mov	fp, r1
 8010216:	2300      	movs	r3, #0
 8010218:	2502      	movs	r5, #2
 801021a:	2e00      	cmp	r6, #0
 801021c:	d17a      	bne.n	8010314 <_dtoa_r+0x4c4>
 801021e:	2b00      	cmp	r3, #0
 8010220:	d1d3      	bne.n	80101ca <_dtoa_r+0x37a>
 8010222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010224:	2b00      	cmp	r3, #0
 8010226:	f000 8082 	beq.w	801032e <_dtoa_r+0x4de>
 801022a:	4b91      	ldr	r3, [pc, #580]	; (8010470 <_dtoa_r+0x620>)
 801022c:	2200      	movs	r2, #0
 801022e:	4650      	mov	r0, sl
 8010230:	4659      	mov	r1, fp
 8010232:	f7f0 fc5b 	bl	8000aec <__aeabi_dcmplt>
 8010236:	2800      	cmp	r0, #0
 8010238:	d079      	beq.n	801032e <_dtoa_r+0x4de>
 801023a:	9b03      	ldr	r3, [sp, #12]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d076      	beq.n	801032e <_dtoa_r+0x4de>
 8010240:	9b02      	ldr	r3, [sp, #8]
 8010242:	2b00      	cmp	r3, #0
 8010244:	dd36      	ble.n	80102b4 <_dtoa_r+0x464>
 8010246:	9b00      	ldr	r3, [sp, #0]
 8010248:	4650      	mov	r0, sl
 801024a:	4659      	mov	r1, fp
 801024c:	1e5f      	subs	r7, r3, #1
 801024e:	2200      	movs	r2, #0
 8010250:	4b88      	ldr	r3, [pc, #544]	; (8010474 <_dtoa_r+0x624>)
 8010252:	f7f0 f9d9 	bl	8000608 <__aeabi_dmul>
 8010256:	9e02      	ldr	r6, [sp, #8]
 8010258:	4682      	mov	sl, r0
 801025a:	468b      	mov	fp, r1
 801025c:	3501      	adds	r5, #1
 801025e:	4628      	mov	r0, r5
 8010260:	f7f0 f968 	bl	8000534 <__aeabi_i2d>
 8010264:	4652      	mov	r2, sl
 8010266:	465b      	mov	r3, fp
 8010268:	f7f0 f9ce 	bl	8000608 <__aeabi_dmul>
 801026c:	4b82      	ldr	r3, [pc, #520]	; (8010478 <_dtoa_r+0x628>)
 801026e:	2200      	movs	r2, #0
 8010270:	f7f0 f814 	bl	800029c <__adddf3>
 8010274:	46d0      	mov	r8, sl
 8010276:	46d9      	mov	r9, fp
 8010278:	4682      	mov	sl, r0
 801027a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801027e:	2e00      	cmp	r6, #0
 8010280:	d158      	bne.n	8010334 <_dtoa_r+0x4e4>
 8010282:	4b7e      	ldr	r3, [pc, #504]	; (801047c <_dtoa_r+0x62c>)
 8010284:	2200      	movs	r2, #0
 8010286:	4640      	mov	r0, r8
 8010288:	4649      	mov	r1, r9
 801028a:	f7f0 f805 	bl	8000298 <__aeabi_dsub>
 801028e:	4652      	mov	r2, sl
 8010290:	465b      	mov	r3, fp
 8010292:	4680      	mov	r8, r0
 8010294:	4689      	mov	r9, r1
 8010296:	f7f0 fc47 	bl	8000b28 <__aeabi_dcmpgt>
 801029a:	2800      	cmp	r0, #0
 801029c:	f040 8295 	bne.w	80107ca <_dtoa_r+0x97a>
 80102a0:	4652      	mov	r2, sl
 80102a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80102a6:	4640      	mov	r0, r8
 80102a8:	4649      	mov	r1, r9
 80102aa:	f7f0 fc1f 	bl	8000aec <__aeabi_dcmplt>
 80102ae:	2800      	cmp	r0, #0
 80102b0:	f040 8289 	bne.w	80107c6 <_dtoa_r+0x976>
 80102b4:	ec5b ab19 	vmov	sl, fp, d9
 80102b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	f2c0 8148 	blt.w	8010550 <_dtoa_r+0x700>
 80102c0:	9a00      	ldr	r2, [sp, #0]
 80102c2:	2a0e      	cmp	r2, #14
 80102c4:	f300 8144 	bgt.w	8010550 <_dtoa_r+0x700>
 80102c8:	4b67      	ldr	r3, [pc, #412]	; (8010468 <_dtoa_r+0x618>)
 80102ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80102d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f280 80d5 	bge.w	8010484 <_dtoa_r+0x634>
 80102da:	9b03      	ldr	r3, [sp, #12]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	f300 80d1 	bgt.w	8010484 <_dtoa_r+0x634>
 80102e2:	f040 826f 	bne.w	80107c4 <_dtoa_r+0x974>
 80102e6:	4b65      	ldr	r3, [pc, #404]	; (801047c <_dtoa_r+0x62c>)
 80102e8:	2200      	movs	r2, #0
 80102ea:	4640      	mov	r0, r8
 80102ec:	4649      	mov	r1, r9
 80102ee:	f7f0 f98b 	bl	8000608 <__aeabi_dmul>
 80102f2:	4652      	mov	r2, sl
 80102f4:	465b      	mov	r3, fp
 80102f6:	f7f0 fc0d 	bl	8000b14 <__aeabi_dcmpge>
 80102fa:	9e03      	ldr	r6, [sp, #12]
 80102fc:	4637      	mov	r7, r6
 80102fe:	2800      	cmp	r0, #0
 8010300:	f040 8245 	bne.w	801078e <_dtoa_r+0x93e>
 8010304:	9d01      	ldr	r5, [sp, #4]
 8010306:	2331      	movs	r3, #49	; 0x31
 8010308:	f805 3b01 	strb.w	r3, [r5], #1
 801030c:	9b00      	ldr	r3, [sp, #0]
 801030e:	3301      	adds	r3, #1
 8010310:	9300      	str	r3, [sp, #0]
 8010312:	e240      	b.n	8010796 <_dtoa_r+0x946>
 8010314:	07f2      	lsls	r2, r6, #31
 8010316:	d505      	bpl.n	8010324 <_dtoa_r+0x4d4>
 8010318:	e9d7 2300 	ldrd	r2, r3, [r7]
 801031c:	f7f0 f974 	bl	8000608 <__aeabi_dmul>
 8010320:	3501      	adds	r5, #1
 8010322:	2301      	movs	r3, #1
 8010324:	1076      	asrs	r6, r6, #1
 8010326:	3708      	adds	r7, #8
 8010328:	e777      	b.n	801021a <_dtoa_r+0x3ca>
 801032a:	2502      	movs	r5, #2
 801032c:	e779      	b.n	8010222 <_dtoa_r+0x3d2>
 801032e:	9f00      	ldr	r7, [sp, #0]
 8010330:	9e03      	ldr	r6, [sp, #12]
 8010332:	e794      	b.n	801025e <_dtoa_r+0x40e>
 8010334:	9901      	ldr	r1, [sp, #4]
 8010336:	4b4c      	ldr	r3, [pc, #304]	; (8010468 <_dtoa_r+0x618>)
 8010338:	4431      	add	r1, r6
 801033a:	910d      	str	r1, [sp, #52]	; 0x34
 801033c:	9908      	ldr	r1, [sp, #32]
 801033e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010342:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010346:	2900      	cmp	r1, #0
 8010348:	d043      	beq.n	80103d2 <_dtoa_r+0x582>
 801034a:	494d      	ldr	r1, [pc, #308]	; (8010480 <_dtoa_r+0x630>)
 801034c:	2000      	movs	r0, #0
 801034e:	f7f0 fa85 	bl	800085c <__aeabi_ddiv>
 8010352:	4652      	mov	r2, sl
 8010354:	465b      	mov	r3, fp
 8010356:	f7ef ff9f 	bl	8000298 <__aeabi_dsub>
 801035a:	9d01      	ldr	r5, [sp, #4]
 801035c:	4682      	mov	sl, r0
 801035e:	468b      	mov	fp, r1
 8010360:	4649      	mov	r1, r9
 8010362:	4640      	mov	r0, r8
 8010364:	f7f0 fc00 	bl	8000b68 <__aeabi_d2iz>
 8010368:	4606      	mov	r6, r0
 801036a:	f7f0 f8e3 	bl	8000534 <__aeabi_i2d>
 801036e:	4602      	mov	r2, r0
 8010370:	460b      	mov	r3, r1
 8010372:	4640      	mov	r0, r8
 8010374:	4649      	mov	r1, r9
 8010376:	f7ef ff8f 	bl	8000298 <__aeabi_dsub>
 801037a:	3630      	adds	r6, #48	; 0x30
 801037c:	f805 6b01 	strb.w	r6, [r5], #1
 8010380:	4652      	mov	r2, sl
 8010382:	465b      	mov	r3, fp
 8010384:	4680      	mov	r8, r0
 8010386:	4689      	mov	r9, r1
 8010388:	f7f0 fbb0 	bl	8000aec <__aeabi_dcmplt>
 801038c:	2800      	cmp	r0, #0
 801038e:	d163      	bne.n	8010458 <_dtoa_r+0x608>
 8010390:	4642      	mov	r2, r8
 8010392:	464b      	mov	r3, r9
 8010394:	4936      	ldr	r1, [pc, #216]	; (8010470 <_dtoa_r+0x620>)
 8010396:	2000      	movs	r0, #0
 8010398:	f7ef ff7e 	bl	8000298 <__aeabi_dsub>
 801039c:	4652      	mov	r2, sl
 801039e:	465b      	mov	r3, fp
 80103a0:	f7f0 fba4 	bl	8000aec <__aeabi_dcmplt>
 80103a4:	2800      	cmp	r0, #0
 80103a6:	f040 80b5 	bne.w	8010514 <_dtoa_r+0x6c4>
 80103aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103ac:	429d      	cmp	r5, r3
 80103ae:	d081      	beq.n	80102b4 <_dtoa_r+0x464>
 80103b0:	4b30      	ldr	r3, [pc, #192]	; (8010474 <_dtoa_r+0x624>)
 80103b2:	2200      	movs	r2, #0
 80103b4:	4650      	mov	r0, sl
 80103b6:	4659      	mov	r1, fp
 80103b8:	f7f0 f926 	bl	8000608 <__aeabi_dmul>
 80103bc:	4b2d      	ldr	r3, [pc, #180]	; (8010474 <_dtoa_r+0x624>)
 80103be:	4682      	mov	sl, r0
 80103c0:	468b      	mov	fp, r1
 80103c2:	4640      	mov	r0, r8
 80103c4:	4649      	mov	r1, r9
 80103c6:	2200      	movs	r2, #0
 80103c8:	f7f0 f91e 	bl	8000608 <__aeabi_dmul>
 80103cc:	4680      	mov	r8, r0
 80103ce:	4689      	mov	r9, r1
 80103d0:	e7c6      	b.n	8010360 <_dtoa_r+0x510>
 80103d2:	4650      	mov	r0, sl
 80103d4:	4659      	mov	r1, fp
 80103d6:	f7f0 f917 	bl	8000608 <__aeabi_dmul>
 80103da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103dc:	9d01      	ldr	r5, [sp, #4]
 80103de:	930f      	str	r3, [sp, #60]	; 0x3c
 80103e0:	4682      	mov	sl, r0
 80103e2:	468b      	mov	fp, r1
 80103e4:	4649      	mov	r1, r9
 80103e6:	4640      	mov	r0, r8
 80103e8:	f7f0 fbbe 	bl	8000b68 <__aeabi_d2iz>
 80103ec:	4606      	mov	r6, r0
 80103ee:	f7f0 f8a1 	bl	8000534 <__aeabi_i2d>
 80103f2:	3630      	adds	r6, #48	; 0x30
 80103f4:	4602      	mov	r2, r0
 80103f6:	460b      	mov	r3, r1
 80103f8:	4640      	mov	r0, r8
 80103fa:	4649      	mov	r1, r9
 80103fc:	f7ef ff4c 	bl	8000298 <__aeabi_dsub>
 8010400:	f805 6b01 	strb.w	r6, [r5], #1
 8010404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010406:	429d      	cmp	r5, r3
 8010408:	4680      	mov	r8, r0
 801040a:	4689      	mov	r9, r1
 801040c:	f04f 0200 	mov.w	r2, #0
 8010410:	d124      	bne.n	801045c <_dtoa_r+0x60c>
 8010412:	4b1b      	ldr	r3, [pc, #108]	; (8010480 <_dtoa_r+0x630>)
 8010414:	4650      	mov	r0, sl
 8010416:	4659      	mov	r1, fp
 8010418:	f7ef ff40 	bl	800029c <__adddf3>
 801041c:	4602      	mov	r2, r0
 801041e:	460b      	mov	r3, r1
 8010420:	4640      	mov	r0, r8
 8010422:	4649      	mov	r1, r9
 8010424:	f7f0 fb80 	bl	8000b28 <__aeabi_dcmpgt>
 8010428:	2800      	cmp	r0, #0
 801042a:	d173      	bne.n	8010514 <_dtoa_r+0x6c4>
 801042c:	4652      	mov	r2, sl
 801042e:	465b      	mov	r3, fp
 8010430:	4913      	ldr	r1, [pc, #76]	; (8010480 <_dtoa_r+0x630>)
 8010432:	2000      	movs	r0, #0
 8010434:	f7ef ff30 	bl	8000298 <__aeabi_dsub>
 8010438:	4602      	mov	r2, r0
 801043a:	460b      	mov	r3, r1
 801043c:	4640      	mov	r0, r8
 801043e:	4649      	mov	r1, r9
 8010440:	f7f0 fb54 	bl	8000aec <__aeabi_dcmplt>
 8010444:	2800      	cmp	r0, #0
 8010446:	f43f af35 	beq.w	80102b4 <_dtoa_r+0x464>
 801044a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801044c:	1e6b      	subs	r3, r5, #1
 801044e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010450:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010454:	2b30      	cmp	r3, #48	; 0x30
 8010456:	d0f8      	beq.n	801044a <_dtoa_r+0x5fa>
 8010458:	9700      	str	r7, [sp, #0]
 801045a:	e049      	b.n	80104f0 <_dtoa_r+0x6a0>
 801045c:	4b05      	ldr	r3, [pc, #20]	; (8010474 <_dtoa_r+0x624>)
 801045e:	f7f0 f8d3 	bl	8000608 <__aeabi_dmul>
 8010462:	4680      	mov	r8, r0
 8010464:	4689      	mov	r9, r1
 8010466:	e7bd      	b.n	80103e4 <_dtoa_r+0x594>
 8010468:	080120e0 	.word	0x080120e0
 801046c:	080120b8 	.word	0x080120b8
 8010470:	3ff00000 	.word	0x3ff00000
 8010474:	40240000 	.word	0x40240000
 8010478:	401c0000 	.word	0x401c0000
 801047c:	40140000 	.word	0x40140000
 8010480:	3fe00000 	.word	0x3fe00000
 8010484:	9d01      	ldr	r5, [sp, #4]
 8010486:	4656      	mov	r6, sl
 8010488:	465f      	mov	r7, fp
 801048a:	4642      	mov	r2, r8
 801048c:	464b      	mov	r3, r9
 801048e:	4630      	mov	r0, r6
 8010490:	4639      	mov	r1, r7
 8010492:	f7f0 f9e3 	bl	800085c <__aeabi_ddiv>
 8010496:	f7f0 fb67 	bl	8000b68 <__aeabi_d2iz>
 801049a:	4682      	mov	sl, r0
 801049c:	f7f0 f84a 	bl	8000534 <__aeabi_i2d>
 80104a0:	4642      	mov	r2, r8
 80104a2:	464b      	mov	r3, r9
 80104a4:	f7f0 f8b0 	bl	8000608 <__aeabi_dmul>
 80104a8:	4602      	mov	r2, r0
 80104aa:	460b      	mov	r3, r1
 80104ac:	4630      	mov	r0, r6
 80104ae:	4639      	mov	r1, r7
 80104b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80104b4:	f7ef fef0 	bl	8000298 <__aeabi_dsub>
 80104b8:	f805 6b01 	strb.w	r6, [r5], #1
 80104bc:	9e01      	ldr	r6, [sp, #4]
 80104be:	9f03      	ldr	r7, [sp, #12]
 80104c0:	1bae      	subs	r6, r5, r6
 80104c2:	42b7      	cmp	r7, r6
 80104c4:	4602      	mov	r2, r0
 80104c6:	460b      	mov	r3, r1
 80104c8:	d135      	bne.n	8010536 <_dtoa_r+0x6e6>
 80104ca:	f7ef fee7 	bl	800029c <__adddf3>
 80104ce:	4642      	mov	r2, r8
 80104d0:	464b      	mov	r3, r9
 80104d2:	4606      	mov	r6, r0
 80104d4:	460f      	mov	r7, r1
 80104d6:	f7f0 fb27 	bl	8000b28 <__aeabi_dcmpgt>
 80104da:	b9d0      	cbnz	r0, 8010512 <_dtoa_r+0x6c2>
 80104dc:	4642      	mov	r2, r8
 80104de:	464b      	mov	r3, r9
 80104e0:	4630      	mov	r0, r6
 80104e2:	4639      	mov	r1, r7
 80104e4:	f7f0 faf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80104e8:	b110      	cbz	r0, 80104f0 <_dtoa_r+0x6a0>
 80104ea:	f01a 0f01 	tst.w	sl, #1
 80104ee:	d110      	bne.n	8010512 <_dtoa_r+0x6c2>
 80104f0:	4620      	mov	r0, r4
 80104f2:	ee18 1a10 	vmov	r1, s16
 80104f6:	f000 fae9 	bl	8010acc <_Bfree>
 80104fa:	2300      	movs	r3, #0
 80104fc:	9800      	ldr	r0, [sp, #0]
 80104fe:	702b      	strb	r3, [r5, #0]
 8010500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010502:	3001      	adds	r0, #1
 8010504:	6018      	str	r0, [r3, #0]
 8010506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010508:	2b00      	cmp	r3, #0
 801050a:	f43f acf1 	beq.w	800fef0 <_dtoa_r+0xa0>
 801050e:	601d      	str	r5, [r3, #0]
 8010510:	e4ee      	b.n	800fef0 <_dtoa_r+0xa0>
 8010512:	9f00      	ldr	r7, [sp, #0]
 8010514:	462b      	mov	r3, r5
 8010516:	461d      	mov	r5, r3
 8010518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801051c:	2a39      	cmp	r2, #57	; 0x39
 801051e:	d106      	bne.n	801052e <_dtoa_r+0x6de>
 8010520:	9a01      	ldr	r2, [sp, #4]
 8010522:	429a      	cmp	r2, r3
 8010524:	d1f7      	bne.n	8010516 <_dtoa_r+0x6c6>
 8010526:	9901      	ldr	r1, [sp, #4]
 8010528:	2230      	movs	r2, #48	; 0x30
 801052a:	3701      	adds	r7, #1
 801052c:	700a      	strb	r2, [r1, #0]
 801052e:	781a      	ldrb	r2, [r3, #0]
 8010530:	3201      	adds	r2, #1
 8010532:	701a      	strb	r2, [r3, #0]
 8010534:	e790      	b.n	8010458 <_dtoa_r+0x608>
 8010536:	4ba6      	ldr	r3, [pc, #664]	; (80107d0 <_dtoa_r+0x980>)
 8010538:	2200      	movs	r2, #0
 801053a:	f7f0 f865 	bl	8000608 <__aeabi_dmul>
 801053e:	2200      	movs	r2, #0
 8010540:	2300      	movs	r3, #0
 8010542:	4606      	mov	r6, r0
 8010544:	460f      	mov	r7, r1
 8010546:	f7f0 fac7 	bl	8000ad8 <__aeabi_dcmpeq>
 801054a:	2800      	cmp	r0, #0
 801054c:	d09d      	beq.n	801048a <_dtoa_r+0x63a>
 801054e:	e7cf      	b.n	80104f0 <_dtoa_r+0x6a0>
 8010550:	9a08      	ldr	r2, [sp, #32]
 8010552:	2a00      	cmp	r2, #0
 8010554:	f000 80d7 	beq.w	8010706 <_dtoa_r+0x8b6>
 8010558:	9a06      	ldr	r2, [sp, #24]
 801055a:	2a01      	cmp	r2, #1
 801055c:	f300 80ba 	bgt.w	80106d4 <_dtoa_r+0x884>
 8010560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010562:	2a00      	cmp	r2, #0
 8010564:	f000 80b2 	beq.w	80106cc <_dtoa_r+0x87c>
 8010568:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801056c:	9e07      	ldr	r6, [sp, #28]
 801056e:	9d04      	ldr	r5, [sp, #16]
 8010570:	9a04      	ldr	r2, [sp, #16]
 8010572:	441a      	add	r2, r3
 8010574:	9204      	str	r2, [sp, #16]
 8010576:	9a05      	ldr	r2, [sp, #20]
 8010578:	2101      	movs	r1, #1
 801057a:	441a      	add	r2, r3
 801057c:	4620      	mov	r0, r4
 801057e:	9205      	str	r2, [sp, #20]
 8010580:	f000 fb5c 	bl	8010c3c <__i2b>
 8010584:	4607      	mov	r7, r0
 8010586:	2d00      	cmp	r5, #0
 8010588:	dd0c      	ble.n	80105a4 <_dtoa_r+0x754>
 801058a:	9b05      	ldr	r3, [sp, #20]
 801058c:	2b00      	cmp	r3, #0
 801058e:	dd09      	ble.n	80105a4 <_dtoa_r+0x754>
 8010590:	42ab      	cmp	r3, r5
 8010592:	9a04      	ldr	r2, [sp, #16]
 8010594:	bfa8      	it	ge
 8010596:	462b      	movge	r3, r5
 8010598:	1ad2      	subs	r2, r2, r3
 801059a:	9204      	str	r2, [sp, #16]
 801059c:	9a05      	ldr	r2, [sp, #20]
 801059e:	1aed      	subs	r5, r5, r3
 80105a0:	1ad3      	subs	r3, r2, r3
 80105a2:	9305      	str	r3, [sp, #20]
 80105a4:	9b07      	ldr	r3, [sp, #28]
 80105a6:	b31b      	cbz	r3, 80105f0 <_dtoa_r+0x7a0>
 80105a8:	9b08      	ldr	r3, [sp, #32]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	f000 80af 	beq.w	801070e <_dtoa_r+0x8be>
 80105b0:	2e00      	cmp	r6, #0
 80105b2:	dd13      	ble.n	80105dc <_dtoa_r+0x78c>
 80105b4:	4639      	mov	r1, r7
 80105b6:	4632      	mov	r2, r6
 80105b8:	4620      	mov	r0, r4
 80105ba:	f000 fbff 	bl	8010dbc <__pow5mult>
 80105be:	ee18 2a10 	vmov	r2, s16
 80105c2:	4601      	mov	r1, r0
 80105c4:	4607      	mov	r7, r0
 80105c6:	4620      	mov	r0, r4
 80105c8:	f000 fb4e 	bl	8010c68 <__multiply>
 80105cc:	ee18 1a10 	vmov	r1, s16
 80105d0:	4680      	mov	r8, r0
 80105d2:	4620      	mov	r0, r4
 80105d4:	f000 fa7a 	bl	8010acc <_Bfree>
 80105d8:	ee08 8a10 	vmov	s16, r8
 80105dc:	9b07      	ldr	r3, [sp, #28]
 80105de:	1b9a      	subs	r2, r3, r6
 80105e0:	d006      	beq.n	80105f0 <_dtoa_r+0x7a0>
 80105e2:	ee18 1a10 	vmov	r1, s16
 80105e6:	4620      	mov	r0, r4
 80105e8:	f000 fbe8 	bl	8010dbc <__pow5mult>
 80105ec:	ee08 0a10 	vmov	s16, r0
 80105f0:	2101      	movs	r1, #1
 80105f2:	4620      	mov	r0, r4
 80105f4:	f000 fb22 	bl	8010c3c <__i2b>
 80105f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	4606      	mov	r6, r0
 80105fe:	f340 8088 	ble.w	8010712 <_dtoa_r+0x8c2>
 8010602:	461a      	mov	r2, r3
 8010604:	4601      	mov	r1, r0
 8010606:	4620      	mov	r0, r4
 8010608:	f000 fbd8 	bl	8010dbc <__pow5mult>
 801060c:	9b06      	ldr	r3, [sp, #24]
 801060e:	2b01      	cmp	r3, #1
 8010610:	4606      	mov	r6, r0
 8010612:	f340 8081 	ble.w	8010718 <_dtoa_r+0x8c8>
 8010616:	f04f 0800 	mov.w	r8, #0
 801061a:	6933      	ldr	r3, [r6, #16]
 801061c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010620:	6918      	ldr	r0, [r3, #16]
 8010622:	f000 fabb 	bl	8010b9c <__hi0bits>
 8010626:	f1c0 0020 	rsb	r0, r0, #32
 801062a:	9b05      	ldr	r3, [sp, #20]
 801062c:	4418      	add	r0, r3
 801062e:	f010 001f 	ands.w	r0, r0, #31
 8010632:	f000 8092 	beq.w	801075a <_dtoa_r+0x90a>
 8010636:	f1c0 0320 	rsb	r3, r0, #32
 801063a:	2b04      	cmp	r3, #4
 801063c:	f340 808a 	ble.w	8010754 <_dtoa_r+0x904>
 8010640:	f1c0 001c 	rsb	r0, r0, #28
 8010644:	9b04      	ldr	r3, [sp, #16]
 8010646:	4403      	add	r3, r0
 8010648:	9304      	str	r3, [sp, #16]
 801064a:	9b05      	ldr	r3, [sp, #20]
 801064c:	4403      	add	r3, r0
 801064e:	4405      	add	r5, r0
 8010650:	9305      	str	r3, [sp, #20]
 8010652:	9b04      	ldr	r3, [sp, #16]
 8010654:	2b00      	cmp	r3, #0
 8010656:	dd07      	ble.n	8010668 <_dtoa_r+0x818>
 8010658:	ee18 1a10 	vmov	r1, s16
 801065c:	461a      	mov	r2, r3
 801065e:	4620      	mov	r0, r4
 8010660:	f000 fc06 	bl	8010e70 <__lshift>
 8010664:	ee08 0a10 	vmov	s16, r0
 8010668:	9b05      	ldr	r3, [sp, #20]
 801066a:	2b00      	cmp	r3, #0
 801066c:	dd05      	ble.n	801067a <_dtoa_r+0x82a>
 801066e:	4631      	mov	r1, r6
 8010670:	461a      	mov	r2, r3
 8010672:	4620      	mov	r0, r4
 8010674:	f000 fbfc 	bl	8010e70 <__lshift>
 8010678:	4606      	mov	r6, r0
 801067a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801067c:	2b00      	cmp	r3, #0
 801067e:	d06e      	beq.n	801075e <_dtoa_r+0x90e>
 8010680:	ee18 0a10 	vmov	r0, s16
 8010684:	4631      	mov	r1, r6
 8010686:	f000 fc63 	bl	8010f50 <__mcmp>
 801068a:	2800      	cmp	r0, #0
 801068c:	da67      	bge.n	801075e <_dtoa_r+0x90e>
 801068e:	9b00      	ldr	r3, [sp, #0]
 8010690:	3b01      	subs	r3, #1
 8010692:	ee18 1a10 	vmov	r1, s16
 8010696:	9300      	str	r3, [sp, #0]
 8010698:	220a      	movs	r2, #10
 801069a:	2300      	movs	r3, #0
 801069c:	4620      	mov	r0, r4
 801069e:	f000 fa37 	bl	8010b10 <__multadd>
 80106a2:	9b08      	ldr	r3, [sp, #32]
 80106a4:	ee08 0a10 	vmov	s16, r0
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	f000 81b1 	beq.w	8010a10 <_dtoa_r+0xbc0>
 80106ae:	2300      	movs	r3, #0
 80106b0:	4639      	mov	r1, r7
 80106b2:	220a      	movs	r2, #10
 80106b4:	4620      	mov	r0, r4
 80106b6:	f000 fa2b 	bl	8010b10 <__multadd>
 80106ba:	9b02      	ldr	r3, [sp, #8]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	4607      	mov	r7, r0
 80106c0:	f300 808e 	bgt.w	80107e0 <_dtoa_r+0x990>
 80106c4:	9b06      	ldr	r3, [sp, #24]
 80106c6:	2b02      	cmp	r3, #2
 80106c8:	dc51      	bgt.n	801076e <_dtoa_r+0x91e>
 80106ca:	e089      	b.n	80107e0 <_dtoa_r+0x990>
 80106cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80106ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80106d2:	e74b      	b.n	801056c <_dtoa_r+0x71c>
 80106d4:	9b03      	ldr	r3, [sp, #12]
 80106d6:	1e5e      	subs	r6, r3, #1
 80106d8:	9b07      	ldr	r3, [sp, #28]
 80106da:	42b3      	cmp	r3, r6
 80106dc:	bfbf      	itttt	lt
 80106de:	9b07      	ldrlt	r3, [sp, #28]
 80106e0:	9607      	strlt	r6, [sp, #28]
 80106e2:	1af2      	sublt	r2, r6, r3
 80106e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80106e6:	bfb6      	itet	lt
 80106e8:	189b      	addlt	r3, r3, r2
 80106ea:	1b9e      	subge	r6, r3, r6
 80106ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80106ee:	9b03      	ldr	r3, [sp, #12]
 80106f0:	bfb8      	it	lt
 80106f2:	2600      	movlt	r6, #0
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	bfb7      	itett	lt
 80106f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80106fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010700:	1a9d      	sublt	r5, r3, r2
 8010702:	2300      	movlt	r3, #0
 8010704:	e734      	b.n	8010570 <_dtoa_r+0x720>
 8010706:	9e07      	ldr	r6, [sp, #28]
 8010708:	9d04      	ldr	r5, [sp, #16]
 801070a:	9f08      	ldr	r7, [sp, #32]
 801070c:	e73b      	b.n	8010586 <_dtoa_r+0x736>
 801070e:	9a07      	ldr	r2, [sp, #28]
 8010710:	e767      	b.n	80105e2 <_dtoa_r+0x792>
 8010712:	9b06      	ldr	r3, [sp, #24]
 8010714:	2b01      	cmp	r3, #1
 8010716:	dc18      	bgt.n	801074a <_dtoa_r+0x8fa>
 8010718:	f1ba 0f00 	cmp.w	sl, #0
 801071c:	d115      	bne.n	801074a <_dtoa_r+0x8fa>
 801071e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010722:	b993      	cbnz	r3, 801074a <_dtoa_r+0x8fa>
 8010724:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010728:	0d1b      	lsrs	r3, r3, #20
 801072a:	051b      	lsls	r3, r3, #20
 801072c:	b183      	cbz	r3, 8010750 <_dtoa_r+0x900>
 801072e:	9b04      	ldr	r3, [sp, #16]
 8010730:	3301      	adds	r3, #1
 8010732:	9304      	str	r3, [sp, #16]
 8010734:	9b05      	ldr	r3, [sp, #20]
 8010736:	3301      	adds	r3, #1
 8010738:	9305      	str	r3, [sp, #20]
 801073a:	f04f 0801 	mov.w	r8, #1
 801073e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010740:	2b00      	cmp	r3, #0
 8010742:	f47f af6a 	bne.w	801061a <_dtoa_r+0x7ca>
 8010746:	2001      	movs	r0, #1
 8010748:	e76f      	b.n	801062a <_dtoa_r+0x7da>
 801074a:	f04f 0800 	mov.w	r8, #0
 801074e:	e7f6      	b.n	801073e <_dtoa_r+0x8ee>
 8010750:	4698      	mov	r8, r3
 8010752:	e7f4      	b.n	801073e <_dtoa_r+0x8ee>
 8010754:	f43f af7d 	beq.w	8010652 <_dtoa_r+0x802>
 8010758:	4618      	mov	r0, r3
 801075a:	301c      	adds	r0, #28
 801075c:	e772      	b.n	8010644 <_dtoa_r+0x7f4>
 801075e:	9b03      	ldr	r3, [sp, #12]
 8010760:	2b00      	cmp	r3, #0
 8010762:	dc37      	bgt.n	80107d4 <_dtoa_r+0x984>
 8010764:	9b06      	ldr	r3, [sp, #24]
 8010766:	2b02      	cmp	r3, #2
 8010768:	dd34      	ble.n	80107d4 <_dtoa_r+0x984>
 801076a:	9b03      	ldr	r3, [sp, #12]
 801076c:	9302      	str	r3, [sp, #8]
 801076e:	9b02      	ldr	r3, [sp, #8]
 8010770:	b96b      	cbnz	r3, 801078e <_dtoa_r+0x93e>
 8010772:	4631      	mov	r1, r6
 8010774:	2205      	movs	r2, #5
 8010776:	4620      	mov	r0, r4
 8010778:	f000 f9ca 	bl	8010b10 <__multadd>
 801077c:	4601      	mov	r1, r0
 801077e:	4606      	mov	r6, r0
 8010780:	ee18 0a10 	vmov	r0, s16
 8010784:	f000 fbe4 	bl	8010f50 <__mcmp>
 8010788:	2800      	cmp	r0, #0
 801078a:	f73f adbb 	bgt.w	8010304 <_dtoa_r+0x4b4>
 801078e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010790:	9d01      	ldr	r5, [sp, #4]
 8010792:	43db      	mvns	r3, r3
 8010794:	9300      	str	r3, [sp, #0]
 8010796:	f04f 0800 	mov.w	r8, #0
 801079a:	4631      	mov	r1, r6
 801079c:	4620      	mov	r0, r4
 801079e:	f000 f995 	bl	8010acc <_Bfree>
 80107a2:	2f00      	cmp	r7, #0
 80107a4:	f43f aea4 	beq.w	80104f0 <_dtoa_r+0x6a0>
 80107a8:	f1b8 0f00 	cmp.w	r8, #0
 80107ac:	d005      	beq.n	80107ba <_dtoa_r+0x96a>
 80107ae:	45b8      	cmp	r8, r7
 80107b0:	d003      	beq.n	80107ba <_dtoa_r+0x96a>
 80107b2:	4641      	mov	r1, r8
 80107b4:	4620      	mov	r0, r4
 80107b6:	f000 f989 	bl	8010acc <_Bfree>
 80107ba:	4639      	mov	r1, r7
 80107bc:	4620      	mov	r0, r4
 80107be:	f000 f985 	bl	8010acc <_Bfree>
 80107c2:	e695      	b.n	80104f0 <_dtoa_r+0x6a0>
 80107c4:	2600      	movs	r6, #0
 80107c6:	4637      	mov	r7, r6
 80107c8:	e7e1      	b.n	801078e <_dtoa_r+0x93e>
 80107ca:	9700      	str	r7, [sp, #0]
 80107cc:	4637      	mov	r7, r6
 80107ce:	e599      	b.n	8010304 <_dtoa_r+0x4b4>
 80107d0:	40240000 	.word	0x40240000
 80107d4:	9b08      	ldr	r3, [sp, #32]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	f000 80ca 	beq.w	8010970 <_dtoa_r+0xb20>
 80107dc:	9b03      	ldr	r3, [sp, #12]
 80107de:	9302      	str	r3, [sp, #8]
 80107e0:	2d00      	cmp	r5, #0
 80107e2:	dd05      	ble.n	80107f0 <_dtoa_r+0x9a0>
 80107e4:	4639      	mov	r1, r7
 80107e6:	462a      	mov	r2, r5
 80107e8:	4620      	mov	r0, r4
 80107ea:	f000 fb41 	bl	8010e70 <__lshift>
 80107ee:	4607      	mov	r7, r0
 80107f0:	f1b8 0f00 	cmp.w	r8, #0
 80107f4:	d05b      	beq.n	80108ae <_dtoa_r+0xa5e>
 80107f6:	6879      	ldr	r1, [r7, #4]
 80107f8:	4620      	mov	r0, r4
 80107fa:	f000 f927 	bl	8010a4c <_Balloc>
 80107fe:	4605      	mov	r5, r0
 8010800:	b928      	cbnz	r0, 801080e <_dtoa_r+0x9be>
 8010802:	4b87      	ldr	r3, [pc, #540]	; (8010a20 <_dtoa_r+0xbd0>)
 8010804:	4602      	mov	r2, r0
 8010806:	f240 21ea 	movw	r1, #746	; 0x2ea
 801080a:	f7ff bb3b 	b.w	800fe84 <_dtoa_r+0x34>
 801080e:	693a      	ldr	r2, [r7, #16]
 8010810:	3202      	adds	r2, #2
 8010812:	0092      	lsls	r2, r2, #2
 8010814:	f107 010c 	add.w	r1, r7, #12
 8010818:	300c      	adds	r0, #12
 801081a:	f7fe fccf 	bl	800f1bc <memcpy>
 801081e:	2201      	movs	r2, #1
 8010820:	4629      	mov	r1, r5
 8010822:	4620      	mov	r0, r4
 8010824:	f000 fb24 	bl	8010e70 <__lshift>
 8010828:	9b01      	ldr	r3, [sp, #4]
 801082a:	f103 0901 	add.w	r9, r3, #1
 801082e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010832:	4413      	add	r3, r2
 8010834:	9305      	str	r3, [sp, #20]
 8010836:	f00a 0301 	and.w	r3, sl, #1
 801083a:	46b8      	mov	r8, r7
 801083c:	9304      	str	r3, [sp, #16]
 801083e:	4607      	mov	r7, r0
 8010840:	4631      	mov	r1, r6
 8010842:	ee18 0a10 	vmov	r0, s16
 8010846:	f7ff fa75 	bl	800fd34 <quorem>
 801084a:	4641      	mov	r1, r8
 801084c:	9002      	str	r0, [sp, #8]
 801084e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010852:	ee18 0a10 	vmov	r0, s16
 8010856:	f000 fb7b 	bl	8010f50 <__mcmp>
 801085a:	463a      	mov	r2, r7
 801085c:	9003      	str	r0, [sp, #12]
 801085e:	4631      	mov	r1, r6
 8010860:	4620      	mov	r0, r4
 8010862:	f000 fb91 	bl	8010f88 <__mdiff>
 8010866:	68c2      	ldr	r2, [r0, #12]
 8010868:	f109 3bff 	add.w	fp, r9, #4294967295
 801086c:	4605      	mov	r5, r0
 801086e:	bb02      	cbnz	r2, 80108b2 <_dtoa_r+0xa62>
 8010870:	4601      	mov	r1, r0
 8010872:	ee18 0a10 	vmov	r0, s16
 8010876:	f000 fb6b 	bl	8010f50 <__mcmp>
 801087a:	4602      	mov	r2, r0
 801087c:	4629      	mov	r1, r5
 801087e:	4620      	mov	r0, r4
 8010880:	9207      	str	r2, [sp, #28]
 8010882:	f000 f923 	bl	8010acc <_Bfree>
 8010886:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801088a:	ea43 0102 	orr.w	r1, r3, r2
 801088e:	9b04      	ldr	r3, [sp, #16]
 8010890:	430b      	orrs	r3, r1
 8010892:	464d      	mov	r5, r9
 8010894:	d10f      	bne.n	80108b6 <_dtoa_r+0xa66>
 8010896:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801089a:	d02a      	beq.n	80108f2 <_dtoa_r+0xaa2>
 801089c:	9b03      	ldr	r3, [sp, #12]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	dd02      	ble.n	80108a8 <_dtoa_r+0xa58>
 80108a2:	9b02      	ldr	r3, [sp, #8]
 80108a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80108a8:	f88b a000 	strb.w	sl, [fp]
 80108ac:	e775      	b.n	801079a <_dtoa_r+0x94a>
 80108ae:	4638      	mov	r0, r7
 80108b0:	e7ba      	b.n	8010828 <_dtoa_r+0x9d8>
 80108b2:	2201      	movs	r2, #1
 80108b4:	e7e2      	b.n	801087c <_dtoa_r+0xa2c>
 80108b6:	9b03      	ldr	r3, [sp, #12]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	db04      	blt.n	80108c6 <_dtoa_r+0xa76>
 80108bc:	9906      	ldr	r1, [sp, #24]
 80108be:	430b      	orrs	r3, r1
 80108c0:	9904      	ldr	r1, [sp, #16]
 80108c2:	430b      	orrs	r3, r1
 80108c4:	d122      	bne.n	801090c <_dtoa_r+0xabc>
 80108c6:	2a00      	cmp	r2, #0
 80108c8:	ddee      	ble.n	80108a8 <_dtoa_r+0xa58>
 80108ca:	ee18 1a10 	vmov	r1, s16
 80108ce:	2201      	movs	r2, #1
 80108d0:	4620      	mov	r0, r4
 80108d2:	f000 facd 	bl	8010e70 <__lshift>
 80108d6:	4631      	mov	r1, r6
 80108d8:	ee08 0a10 	vmov	s16, r0
 80108dc:	f000 fb38 	bl	8010f50 <__mcmp>
 80108e0:	2800      	cmp	r0, #0
 80108e2:	dc03      	bgt.n	80108ec <_dtoa_r+0xa9c>
 80108e4:	d1e0      	bne.n	80108a8 <_dtoa_r+0xa58>
 80108e6:	f01a 0f01 	tst.w	sl, #1
 80108ea:	d0dd      	beq.n	80108a8 <_dtoa_r+0xa58>
 80108ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80108f0:	d1d7      	bne.n	80108a2 <_dtoa_r+0xa52>
 80108f2:	2339      	movs	r3, #57	; 0x39
 80108f4:	f88b 3000 	strb.w	r3, [fp]
 80108f8:	462b      	mov	r3, r5
 80108fa:	461d      	mov	r5, r3
 80108fc:	3b01      	subs	r3, #1
 80108fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010902:	2a39      	cmp	r2, #57	; 0x39
 8010904:	d071      	beq.n	80109ea <_dtoa_r+0xb9a>
 8010906:	3201      	adds	r2, #1
 8010908:	701a      	strb	r2, [r3, #0]
 801090a:	e746      	b.n	801079a <_dtoa_r+0x94a>
 801090c:	2a00      	cmp	r2, #0
 801090e:	dd07      	ble.n	8010920 <_dtoa_r+0xad0>
 8010910:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010914:	d0ed      	beq.n	80108f2 <_dtoa_r+0xaa2>
 8010916:	f10a 0301 	add.w	r3, sl, #1
 801091a:	f88b 3000 	strb.w	r3, [fp]
 801091e:	e73c      	b.n	801079a <_dtoa_r+0x94a>
 8010920:	9b05      	ldr	r3, [sp, #20]
 8010922:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010926:	4599      	cmp	r9, r3
 8010928:	d047      	beq.n	80109ba <_dtoa_r+0xb6a>
 801092a:	ee18 1a10 	vmov	r1, s16
 801092e:	2300      	movs	r3, #0
 8010930:	220a      	movs	r2, #10
 8010932:	4620      	mov	r0, r4
 8010934:	f000 f8ec 	bl	8010b10 <__multadd>
 8010938:	45b8      	cmp	r8, r7
 801093a:	ee08 0a10 	vmov	s16, r0
 801093e:	f04f 0300 	mov.w	r3, #0
 8010942:	f04f 020a 	mov.w	r2, #10
 8010946:	4641      	mov	r1, r8
 8010948:	4620      	mov	r0, r4
 801094a:	d106      	bne.n	801095a <_dtoa_r+0xb0a>
 801094c:	f000 f8e0 	bl	8010b10 <__multadd>
 8010950:	4680      	mov	r8, r0
 8010952:	4607      	mov	r7, r0
 8010954:	f109 0901 	add.w	r9, r9, #1
 8010958:	e772      	b.n	8010840 <_dtoa_r+0x9f0>
 801095a:	f000 f8d9 	bl	8010b10 <__multadd>
 801095e:	4639      	mov	r1, r7
 8010960:	4680      	mov	r8, r0
 8010962:	2300      	movs	r3, #0
 8010964:	220a      	movs	r2, #10
 8010966:	4620      	mov	r0, r4
 8010968:	f000 f8d2 	bl	8010b10 <__multadd>
 801096c:	4607      	mov	r7, r0
 801096e:	e7f1      	b.n	8010954 <_dtoa_r+0xb04>
 8010970:	9b03      	ldr	r3, [sp, #12]
 8010972:	9302      	str	r3, [sp, #8]
 8010974:	9d01      	ldr	r5, [sp, #4]
 8010976:	ee18 0a10 	vmov	r0, s16
 801097a:	4631      	mov	r1, r6
 801097c:	f7ff f9da 	bl	800fd34 <quorem>
 8010980:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010984:	9b01      	ldr	r3, [sp, #4]
 8010986:	f805 ab01 	strb.w	sl, [r5], #1
 801098a:	1aea      	subs	r2, r5, r3
 801098c:	9b02      	ldr	r3, [sp, #8]
 801098e:	4293      	cmp	r3, r2
 8010990:	dd09      	ble.n	80109a6 <_dtoa_r+0xb56>
 8010992:	ee18 1a10 	vmov	r1, s16
 8010996:	2300      	movs	r3, #0
 8010998:	220a      	movs	r2, #10
 801099a:	4620      	mov	r0, r4
 801099c:	f000 f8b8 	bl	8010b10 <__multadd>
 80109a0:	ee08 0a10 	vmov	s16, r0
 80109a4:	e7e7      	b.n	8010976 <_dtoa_r+0xb26>
 80109a6:	9b02      	ldr	r3, [sp, #8]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	bfc8      	it	gt
 80109ac:	461d      	movgt	r5, r3
 80109ae:	9b01      	ldr	r3, [sp, #4]
 80109b0:	bfd8      	it	le
 80109b2:	2501      	movle	r5, #1
 80109b4:	441d      	add	r5, r3
 80109b6:	f04f 0800 	mov.w	r8, #0
 80109ba:	ee18 1a10 	vmov	r1, s16
 80109be:	2201      	movs	r2, #1
 80109c0:	4620      	mov	r0, r4
 80109c2:	f000 fa55 	bl	8010e70 <__lshift>
 80109c6:	4631      	mov	r1, r6
 80109c8:	ee08 0a10 	vmov	s16, r0
 80109cc:	f000 fac0 	bl	8010f50 <__mcmp>
 80109d0:	2800      	cmp	r0, #0
 80109d2:	dc91      	bgt.n	80108f8 <_dtoa_r+0xaa8>
 80109d4:	d102      	bne.n	80109dc <_dtoa_r+0xb8c>
 80109d6:	f01a 0f01 	tst.w	sl, #1
 80109da:	d18d      	bne.n	80108f8 <_dtoa_r+0xaa8>
 80109dc:	462b      	mov	r3, r5
 80109de:	461d      	mov	r5, r3
 80109e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109e4:	2a30      	cmp	r2, #48	; 0x30
 80109e6:	d0fa      	beq.n	80109de <_dtoa_r+0xb8e>
 80109e8:	e6d7      	b.n	801079a <_dtoa_r+0x94a>
 80109ea:	9a01      	ldr	r2, [sp, #4]
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d184      	bne.n	80108fa <_dtoa_r+0xaaa>
 80109f0:	9b00      	ldr	r3, [sp, #0]
 80109f2:	3301      	adds	r3, #1
 80109f4:	9300      	str	r3, [sp, #0]
 80109f6:	2331      	movs	r3, #49	; 0x31
 80109f8:	7013      	strb	r3, [r2, #0]
 80109fa:	e6ce      	b.n	801079a <_dtoa_r+0x94a>
 80109fc:	4b09      	ldr	r3, [pc, #36]	; (8010a24 <_dtoa_r+0xbd4>)
 80109fe:	f7ff ba95 	b.w	800ff2c <_dtoa_r+0xdc>
 8010a02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	f47f aa6e 	bne.w	800fee6 <_dtoa_r+0x96>
 8010a0a:	4b07      	ldr	r3, [pc, #28]	; (8010a28 <_dtoa_r+0xbd8>)
 8010a0c:	f7ff ba8e 	b.w	800ff2c <_dtoa_r+0xdc>
 8010a10:	9b02      	ldr	r3, [sp, #8]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	dcae      	bgt.n	8010974 <_dtoa_r+0xb24>
 8010a16:	9b06      	ldr	r3, [sp, #24]
 8010a18:	2b02      	cmp	r3, #2
 8010a1a:	f73f aea8 	bgt.w	801076e <_dtoa_r+0x91e>
 8010a1e:	e7a9      	b.n	8010974 <_dtoa_r+0xb24>
 8010a20:	08012047 	.word	0x08012047
 8010a24:	08011fa4 	.word	0x08011fa4
 8010a28:	08011fc8 	.word	0x08011fc8

08010a2c <_localeconv_r>:
 8010a2c:	4800      	ldr	r0, [pc, #0]	; (8010a30 <_localeconv_r+0x4>)
 8010a2e:	4770      	bx	lr
 8010a30:	2000019c 	.word	0x2000019c

08010a34 <__malloc_lock>:
 8010a34:	4801      	ldr	r0, [pc, #4]	; (8010a3c <__malloc_lock+0x8>)
 8010a36:	f000 bc04 	b.w	8011242 <__retarget_lock_acquire_recursive>
 8010a3a:	bf00      	nop
 8010a3c:	200016f4 	.word	0x200016f4

08010a40 <__malloc_unlock>:
 8010a40:	4801      	ldr	r0, [pc, #4]	; (8010a48 <__malloc_unlock+0x8>)
 8010a42:	f000 bbff 	b.w	8011244 <__retarget_lock_release_recursive>
 8010a46:	bf00      	nop
 8010a48:	200016f4 	.word	0x200016f4

08010a4c <_Balloc>:
 8010a4c:	b570      	push	{r4, r5, r6, lr}
 8010a4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a50:	4604      	mov	r4, r0
 8010a52:	460d      	mov	r5, r1
 8010a54:	b976      	cbnz	r6, 8010a74 <_Balloc+0x28>
 8010a56:	2010      	movs	r0, #16
 8010a58:	f7fe fba0 	bl	800f19c <malloc>
 8010a5c:	4602      	mov	r2, r0
 8010a5e:	6260      	str	r0, [r4, #36]	; 0x24
 8010a60:	b920      	cbnz	r0, 8010a6c <_Balloc+0x20>
 8010a62:	4b18      	ldr	r3, [pc, #96]	; (8010ac4 <_Balloc+0x78>)
 8010a64:	4818      	ldr	r0, [pc, #96]	; (8010ac8 <_Balloc+0x7c>)
 8010a66:	2166      	movs	r1, #102	; 0x66
 8010a68:	f000 fbba 	bl	80111e0 <__assert_func>
 8010a6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a70:	6006      	str	r6, [r0, #0]
 8010a72:	60c6      	str	r6, [r0, #12]
 8010a74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010a76:	68f3      	ldr	r3, [r6, #12]
 8010a78:	b183      	cbz	r3, 8010a9c <_Balloc+0x50>
 8010a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a7c:	68db      	ldr	r3, [r3, #12]
 8010a7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010a82:	b9b8      	cbnz	r0, 8010ab4 <_Balloc+0x68>
 8010a84:	2101      	movs	r1, #1
 8010a86:	fa01 f605 	lsl.w	r6, r1, r5
 8010a8a:	1d72      	adds	r2, r6, #5
 8010a8c:	0092      	lsls	r2, r2, #2
 8010a8e:	4620      	mov	r0, r4
 8010a90:	f000 fb60 	bl	8011154 <_calloc_r>
 8010a94:	b160      	cbz	r0, 8010ab0 <_Balloc+0x64>
 8010a96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010a9a:	e00e      	b.n	8010aba <_Balloc+0x6e>
 8010a9c:	2221      	movs	r2, #33	; 0x21
 8010a9e:	2104      	movs	r1, #4
 8010aa0:	4620      	mov	r0, r4
 8010aa2:	f000 fb57 	bl	8011154 <_calloc_r>
 8010aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010aa8:	60f0      	str	r0, [r6, #12]
 8010aaa:	68db      	ldr	r3, [r3, #12]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d1e4      	bne.n	8010a7a <_Balloc+0x2e>
 8010ab0:	2000      	movs	r0, #0
 8010ab2:	bd70      	pop	{r4, r5, r6, pc}
 8010ab4:	6802      	ldr	r2, [r0, #0]
 8010ab6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010aba:	2300      	movs	r3, #0
 8010abc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010ac0:	e7f7      	b.n	8010ab2 <_Balloc+0x66>
 8010ac2:	bf00      	nop
 8010ac4:	08011fd5 	.word	0x08011fd5
 8010ac8:	08012058 	.word	0x08012058

08010acc <_Bfree>:
 8010acc:	b570      	push	{r4, r5, r6, lr}
 8010ace:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010ad0:	4605      	mov	r5, r0
 8010ad2:	460c      	mov	r4, r1
 8010ad4:	b976      	cbnz	r6, 8010af4 <_Bfree+0x28>
 8010ad6:	2010      	movs	r0, #16
 8010ad8:	f7fe fb60 	bl	800f19c <malloc>
 8010adc:	4602      	mov	r2, r0
 8010ade:	6268      	str	r0, [r5, #36]	; 0x24
 8010ae0:	b920      	cbnz	r0, 8010aec <_Bfree+0x20>
 8010ae2:	4b09      	ldr	r3, [pc, #36]	; (8010b08 <_Bfree+0x3c>)
 8010ae4:	4809      	ldr	r0, [pc, #36]	; (8010b0c <_Bfree+0x40>)
 8010ae6:	218a      	movs	r1, #138	; 0x8a
 8010ae8:	f000 fb7a 	bl	80111e0 <__assert_func>
 8010aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010af0:	6006      	str	r6, [r0, #0]
 8010af2:	60c6      	str	r6, [r0, #12]
 8010af4:	b13c      	cbz	r4, 8010b06 <_Bfree+0x3a>
 8010af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010af8:	6862      	ldr	r2, [r4, #4]
 8010afa:	68db      	ldr	r3, [r3, #12]
 8010afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b00:	6021      	str	r1, [r4, #0]
 8010b02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010b06:	bd70      	pop	{r4, r5, r6, pc}
 8010b08:	08011fd5 	.word	0x08011fd5
 8010b0c:	08012058 	.word	0x08012058

08010b10 <__multadd>:
 8010b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b14:	690d      	ldr	r5, [r1, #16]
 8010b16:	4607      	mov	r7, r0
 8010b18:	460c      	mov	r4, r1
 8010b1a:	461e      	mov	r6, r3
 8010b1c:	f101 0c14 	add.w	ip, r1, #20
 8010b20:	2000      	movs	r0, #0
 8010b22:	f8dc 3000 	ldr.w	r3, [ip]
 8010b26:	b299      	uxth	r1, r3
 8010b28:	fb02 6101 	mla	r1, r2, r1, r6
 8010b2c:	0c1e      	lsrs	r6, r3, #16
 8010b2e:	0c0b      	lsrs	r3, r1, #16
 8010b30:	fb02 3306 	mla	r3, r2, r6, r3
 8010b34:	b289      	uxth	r1, r1
 8010b36:	3001      	adds	r0, #1
 8010b38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010b3c:	4285      	cmp	r5, r0
 8010b3e:	f84c 1b04 	str.w	r1, [ip], #4
 8010b42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010b46:	dcec      	bgt.n	8010b22 <__multadd+0x12>
 8010b48:	b30e      	cbz	r6, 8010b8e <__multadd+0x7e>
 8010b4a:	68a3      	ldr	r3, [r4, #8]
 8010b4c:	42ab      	cmp	r3, r5
 8010b4e:	dc19      	bgt.n	8010b84 <__multadd+0x74>
 8010b50:	6861      	ldr	r1, [r4, #4]
 8010b52:	4638      	mov	r0, r7
 8010b54:	3101      	adds	r1, #1
 8010b56:	f7ff ff79 	bl	8010a4c <_Balloc>
 8010b5a:	4680      	mov	r8, r0
 8010b5c:	b928      	cbnz	r0, 8010b6a <__multadd+0x5a>
 8010b5e:	4602      	mov	r2, r0
 8010b60:	4b0c      	ldr	r3, [pc, #48]	; (8010b94 <__multadd+0x84>)
 8010b62:	480d      	ldr	r0, [pc, #52]	; (8010b98 <__multadd+0x88>)
 8010b64:	21b5      	movs	r1, #181	; 0xb5
 8010b66:	f000 fb3b 	bl	80111e0 <__assert_func>
 8010b6a:	6922      	ldr	r2, [r4, #16]
 8010b6c:	3202      	adds	r2, #2
 8010b6e:	f104 010c 	add.w	r1, r4, #12
 8010b72:	0092      	lsls	r2, r2, #2
 8010b74:	300c      	adds	r0, #12
 8010b76:	f7fe fb21 	bl	800f1bc <memcpy>
 8010b7a:	4621      	mov	r1, r4
 8010b7c:	4638      	mov	r0, r7
 8010b7e:	f7ff ffa5 	bl	8010acc <_Bfree>
 8010b82:	4644      	mov	r4, r8
 8010b84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010b88:	3501      	adds	r5, #1
 8010b8a:	615e      	str	r6, [r3, #20]
 8010b8c:	6125      	str	r5, [r4, #16]
 8010b8e:	4620      	mov	r0, r4
 8010b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b94:	08012047 	.word	0x08012047
 8010b98:	08012058 	.word	0x08012058

08010b9c <__hi0bits>:
 8010b9c:	0c03      	lsrs	r3, r0, #16
 8010b9e:	041b      	lsls	r3, r3, #16
 8010ba0:	b9d3      	cbnz	r3, 8010bd8 <__hi0bits+0x3c>
 8010ba2:	0400      	lsls	r0, r0, #16
 8010ba4:	2310      	movs	r3, #16
 8010ba6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010baa:	bf04      	itt	eq
 8010bac:	0200      	lsleq	r0, r0, #8
 8010bae:	3308      	addeq	r3, #8
 8010bb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010bb4:	bf04      	itt	eq
 8010bb6:	0100      	lsleq	r0, r0, #4
 8010bb8:	3304      	addeq	r3, #4
 8010bba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010bbe:	bf04      	itt	eq
 8010bc0:	0080      	lsleq	r0, r0, #2
 8010bc2:	3302      	addeq	r3, #2
 8010bc4:	2800      	cmp	r0, #0
 8010bc6:	db05      	blt.n	8010bd4 <__hi0bits+0x38>
 8010bc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010bcc:	f103 0301 	add.w	r3, r3, #1
 8010bd0:	bf08      	it	eq
 8010bd2:	2320      	moveq	r3, #32
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	4770      	bx	lr
 8010bd8:	2300      	movs	r3, #0
 8010bda:	e7e4      	b.n	8010ba6 <__hi0bits+0xa>

08010bdc <__lo0bits>:
 8010bdc:	6803      	ldr	r3, [r0, #0]
 8010bde:	f013 0207 	ands.w	r2, r3, #7
 8010be2:	4601      	mov	r1, r0
 8010be4:	d00b      	beq.n	8010bfe <__lo0bits+0x22>
 8010be6:	07da      	lsls	r2, r3, #31
 8010be8:	d423      	bmi.n	8010c32 <__lo0bits+0x56>
 8010bea:	0798      	lsls	r0, r3, #30
 8010bec:	bf49      	itett	mi
 8010bee:	085b      	lsrmi	r3, r3, #1
 8010bf0:	089b      	lsrpl	r3, r3, #2
 8010bf2:	2001      	movmi	r0, #1
 8010bf4:	600b      	strmi	r3, [r1, #0]
 8010bf6:	bf5c      	itt	pl
 8010bf8:	600b      	strpl	r3, [r1, #0]
 8010bfa:	2002      	movpl	r0, #2
 8010bfc:	4770      	bx	lr
 8010bfe:	b298      	uxth	r0, r3
 8010c00:	b9a8      	cbnz	r0, 8010c2e <__lo0bits+0x52>
 8010c02:	0c1b      	lsrs	r3, r3, #16
 8010c04:	2010      	movs	r0, #16
 8010c06:	b2da      	uxtb	r2, r3
 8010c08:	b90a      	cbnz	r2, 8010c0e <__lo0bits+0x32>
 8010c0a:	3008      	adds	r0, #8
 8010c0c:	0a1b      	lsrs	r3, r3, #8
 8010c0e:	071a      	lsls	r2, r3, #28
 8010c10:	bf04      	itt	eq
 8010c12:	091b      	lsreq	r3, r3, #4
 8010c14:	3004      	addeq	r0, #4
 8010c16:	079a      	lsls	r2, r3, #30
 8010c18:	bf04      	itt	eq
 8010c1a:	089b      	lsreq	r3, r3, #2
 8010c1c:	3002      	addeq	r0, #2
 8010c1e:	07da      	lsls	r2, r3, #31
 8010c20:	d403      	bmi.n	8010c2a <__lo0bits+0x4e>
 8010c22:	085b      	lsrs	r3, r3, #1
 8010c24:	f100 0001 	add.w	r0, r0, #1
 8010c28:	d005      	beq.n	8010c36 <__lo0bits+0x5a>
 8010c2a:	600b      	str	r3, [r1, #0]
 8010c2c:	4770      	bx	lr
 8010c2e:	4610      	mov	r0, r2
 8010c30:	e7e9      	b.n	8010c06 <__lo0bits+0x2a>
 8010c32:	2000      	movs	r0, #0
 8010c34:	4770      	bx	lr
 8010c36:	2020      	movs	r0, #32
 8010c38:	4770      	bx	lr
	...

08010c3c <__i2b>:
 8010c3c:	b510      	push	{r4, lr}
 8010c3e:	460c      	mov	r4, r1
 8010c40:	2101      	movs	r1, #1
 8010c42:	f7ff ff03 	bl	8010a4c <_Balloc>
 8010c46:	4602      	mov	r2, r0
 8010c48:	b928      	cbnz	r0, 8010c56 <__i2b+0x1a>
 8010c4a:	4b05      	ldr	r3, [pc, #20]	; (8010c60 <__i2b+0x24>)
 8010c4c:	4805      	ldr	r0, [pc, #20]	; (8010c64 <__i2b+0x28>)
 8010c4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010c52:	f000 fac5 	bl	80111e0 <__assert_func>
 8010c56:	2301      	movs	r3, #1
 8010c58:	6144      	str	r4, [r0, #20]
 8010c5a:	6103      	str	r3, [r0, #16]
 8010c5c:	bd10      	pop	{r4, pc}
 8010c5e:	bf00      	nop
 8010c60:	08012047 	.word	0x08012047
 8010c64:	08012058 	.word	0x08012058

08010c68 <__multiply>:
 8010c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c6c:	4691      	mov	r9, r2
 8010c6e:	690a      	ldr	r2, [r1, #16]
 8010c70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	bfb8      	it	lt
 8010c78:	460b      	movlt	r3, r1
 8010c7a:	460c      	mov	r4, r1
 8010c7c:	bfbc      	itt	lt
 8010c7e:	464c      	movlt	r4, r9
 8010c80:	4699      	movlt	r9, r3
 8010c82:	6927      	ldr	r7, [r4, #16]
 8010c84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010c88:	68a3      	ldr	r3, [r4, #8]
 8010c8a:	6861      	ldr	r1, [r4, #4]
 8010c8c:	eb07 060a 	add.w	r6, r7, sl
 8010c90:	42b3      	cmp	r3, r6
 8010c92:	b085      	sub	sp, #20
 8010c94:	bfb8      	it	lt
 8010c96:	3101      	addlt	r1, #1
 8010c98:	f7ff fed8 	bl	8010a4c <_Balloc>
 8010c9c:	b930      	cbnz	r0, 8010cac <__multiply+0x44>
 8010c9e:	4602      	mov	r2, r0
 8010ca0:	4b44      	ldr	r3, [pc, #272]	; (8010db4 <__multiply+0x14c>)
 8010ca2:	4845      	ldr	r0, [pc, #276]	; (8010db8 <__multiply+0x150>)
 8010ca4:	f240 115d 	movw	r1, #349	; 0x15d
 8010ca8:	f000 fa9a 	bl	80111e0 <__assert_func>
 8010cac:	f100 0514 	add.w	r5, r0, #20
 8010cb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010cb4:	462b      	mov	r3, r5
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	4543      	cmp	r3, r8
 8010cba:	d321      	bcc.n	8010d00 <__multiply+0x98>
 8010cbc:	f104 0314 	add.w	r3, r4, #20
 8010cc0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010cc4:	f109 0314 	add.w	r3, r9, #20
 8010cc8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010ccc:	9202      	str	r2, [sp, #8]
 8010cce:	1b3a      	subs	r2, r7, r4
 8010cd0:	3a15      	subs	r2, #21
 8010cd2:	f022 0203 	bic.w	r2, r2, #3
 8010cd6:	3204      	adds	r2, #4
 8010cd8:	f104 0115 	add.w	r1, r4, #21
 8010cdc:	428f      	cmp	r7, r1
 8010cde:	bf38      	it	cc
 8010ce0:	2204      	movcc	r2, #4
 8010ce2:	9201      	str	r2, [sp, #4]
 8010ce4:	9a02      	ldr	r2, [sp, #8]
 8010ce6:	9303      	str	r3, [sp, #12]
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d80c      	bhi.n	8010d06 <__multiply+0x9e>
 8010cec:	2e00      	cmp	r6, #0
 8010cee:	dd03      	ble.n	8010cf8 <__multiply+0x90>
 8010cf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d05a      	beq.n	8010dae <__multiply+0x146>
 8010cf8:	6106      	str	r6, [r0, #16]
 8010cfa:	b005      	add	sp, #20
 8010cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d00:	f843 2b04 	str.w	r2, [r3], #4
 8010d04:	e7d8      	b.n	8010cb8 <__multiply+0x50>
 8010d06:	f8b3 a000 	ldrh.w	sl, [r3]
 8010d0a:	f1ba 0f00 	cmp.w	sl, #0
 8010d0e:	d024      	beq.n	8010d5a <__multiply+0xf2>
 8010d10:	f104 0e14 	add.w	lr, r4, #20
 8010d14:	46a9      	mov	r9, r5
 8010d16:	f04f 0c00 	mov.w	ip, #0
 8010d1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010d1e:	f8d9 1000 	ldr.w	r1, [r9]
 8010d22:	fa1f fb82 	uxth.w	fp, r2
 8010d26:	b289      	uxth	r1, r1
 8010d28:	fb0a 110b 	mla	r1, sl, fp, r1
 8010d2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010d30:	f8d9 2000 	ldr.w	r2, [r9]
 8010d34:	4461      	add	r1, ip
 8010d36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010d3a:	fb0a c20b 	mla	r2, sl, fp, ip
 8010d3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010d42:	b289      	uxth	r1, r1
 8010d44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010d48:	4577      	cmp	r7, lr
 8010d4a:	f849 1b04 	str.w	r1, [r9], #4
 8010d4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010d52:	d8e2      	bhi.n	8010d1a <__multiply+0xb2>
 8010d54:	9a01      	ldr	r2, [sp, #4]
 8010d56:	f845 c002 	str.w	ip, [r5, r2]
 8010d5a:	9a03      	ldr	r2, [sp, #12]
 8010d5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010d60:	3304      	adds	r3, #4
 8010d62:	f1b9 0f00 	cmp.w	r9, #0
 8010d66:	d020      	beq.n	8010daa <__multiply+0x142>
 8010d68:	6829      	ldr	r1, [r5, #0]
 8010d6a:	f104 0c14 	add.w	ip, r4, #20
 8010d6e:	46ae      	mov	lr, r5
 8010d70:	f04f 0a00 	mov.w	sl, #0
 8010d74:	f8bc b000 	ldrh.w	fp, [ip]
 8010d78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010d7c:	fb09 220b 	mla	r2, r9, fp, r2
 8010d80:	4492      	add	sl, r2
 8010d82:	b289      	uxth	r1, r1
 8010d84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010d88:	f84e 1b04 	str.w	r1, [lr], #4
 8010d8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010d90:	f8be 1000 	ldrh.w	r1, [lr]
 8010d94:	0c12      	lsrs	r2, r2, #16
 8010d96:	fb09 1102 	mla	r1, r9, r2, r1
 8010d9a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010d9e:	4567      	cmp	r7, ip
 8010da0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010da4:	d8e6      	bhi.n	8010d74 <__multiply+0x10c>
 8010da6:	9a01      	ldr	r2, [sp, #4]
 8010da8:	50a9      	str	r1, [r5, r2]
 8010daa:	3504      	adds	r5, #4
 8010dac:	e79a      	b.n	8010ce4 <__multiply+0x7c>
 8010dae:	3e01      	subs	r6, #1
 8010db0:	e79c      	b.n	8010cec <__multiply+0x84>
 8010db2:	bf00      	nop
 8010db4:	08012047 	.word	0x08012047
 8010db8:	08012058 	.word	0x08012058

08010dbc <__pow5mult>:
 8010dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dc0:	4615      	mov	r5, r2
 8010dc2:	f012 0203 	ands.w	r2, r2, #3
 8010dc6:	4606      	mov	r6, r0
 8010dc8:	460f      	mov	r7, r1
 8010dca:	d007      	beq.n	8010ddc <__pow5mult+0x20>
 8010dcc:	4c25      	ldr	r4, [pc, #148]	; (8010e64 <__pow5mult+0xa8>)
 8010dce:	3a01      	subs	r2, #1
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010dd6:	f7ff fe9b 	bl	8010b10 <__multadd>
 8010dda:	4607      	mov	r7, r0
 8010ddc:	10ad      	asrs	r5, r5, #2
 8010dde:	d03d      	beq.n	8010e5c <__pow5mult+0xa0>
 8010de0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010de2:	b97c      	cbnz	r4, 8010e04 <__pow5mult+0x48>
 8010de4:	2010      	movs	r0, #16
 8010de6:	f7fe f9d9 	bl	800f19c <malloc>
 8010dea:	4602      	mov	r2, r0
 8010dec:	6270      	str	r0, [r6, #36]	; 0x24
 8010dee:	b928      	cbnz	r0, 8010dfc <__pow5mult+0x40>
 8010df0:	4b1d      	ldr	r3, [pc, #116]	; (8010e68 <__pow5mult+0xac>)
 8010df2:	481e      	ldr	r0, [pc, #120]	; (8010e6c <__pow5mult+0xb0>)
 8010df4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010df8:	f000 f9f2 	bl	80111e0 <__assert_func>
 8010dfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e00:	6004      	str	r4, [r0, #0]
 8010e02:	60c4      	str	r4, [r0, #12]
 8010e04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010e08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e0c:	b94c      	cbnz	r4, 8010e22 <__pow5mult+0x66>
 8010e0e:	f240 2171 	movw	r1, #625	; 0x271
 8010e12:	4630      	mov	r0, r6
 8010e14:	f7ff ff12 	bl	8010c3c <__i2b>
 8010e18:	2300      	movs	r3, #0
 8010e1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e1e:	4604      	mov	r4, r0
 8010e20:	6003      	str	r3, [r0, #0]
 8010e22:	f04f 0900 	mov.w	r9, #0
 8010e26:	07eb      	lsls	r3, r5, #31
 8010e28:	d50a      	bpl.n	8010e40 <__pow5mult+0x84>
 8010e2a:	4639      	mov	r1, r7
 8010e2c:	4622      	mov	r2, r4
 8010e2e:	4630      	mov	r0, r6
 8010e30:	f7ff ff1a 	bl	8010c68 <__multiply>
 8010e34:	4639      	mov	r1, r7
 8010e36:	4680      	mov	r8, r0
 8010e38:	4630      	mov	r0, r6
 8010e3a:	f7ff fe47 	bl	8010acc <_Bfree>
 8010e3e:	4647      	mov	r7, r8
 8010e40:	106d      	asrs	r5, r5, #1
 8010e42:	d00b      	beq.n	8010e5c <__pow5mult+0xa0>
 8010e44:	6820      	ldr	r0, [r4, #0]
 8010e46:	b938      	cbnz	r0, 8010e58 <__pow5mult+0x9c>
 8010e48:	4622      	mov	r2, r4
 8010e4a:	4621      	mov	r1, r4
 8010e4c:	4630      	mov	r0, r6
 8010e4e:	f7ff ff0b 	bl	8010c68 <__multiply>
 8010e52:	6020      	str	r0, [r4, #0]
 8010e54:	f8c0 9000 	str.w	r9, [r0]
 8010e58:	4604      	mov	r4, r0
 8010e5a:	e7e4      	b.n	8010e26 <__pow5mult+0x6a>
 8010e5c:	4638      	mov	r0, r7
 8010e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e62:	bf00      	nop
 8010e64:	080121a8 	.word	0x080121a8
 8010e68:	08011fd5 	.word	0x08011fd5
 8010e6c:	08012058 	.word	0x08012058

08010e70 <__lshift>:
 8010e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e74:	460c      	mov	r4, r1
 8010e76:	6849      	ldr	r1, [r1, #4]
 8010e78:	6923      	ldr	r3, [r4, #16]
 8010e7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010e7e:	68a3      	ldr	r3, [r4, #8]
 8010e80:	4607      	mov	r7, r0
 8010e82:	4691      	mov	r9, r2
 8010e84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010e88:	f108 0601 	add.w	r6, r8, #1
 8010e8c:	42b3      	cmp	r3, r6
 8010e8e:	db0b      	blt.n	8010ea8 <__lshift+0x38>
 8010e90:	4638      	mov	r0, r7
 8010e92:	f7ff fddb 	bl	8010a4c <_Balloc>
 8010e96:	4605      	mov	r5, r0
 8010e98:	b948      	cbnz	r0, 8010eae <__lshift+0x3e>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	4b2a      	ldr	r3, [pc, #168]	; (8010f48 <__lshift+0xd8>)
 8010e9e:	482b      	ldr	r0, [pc, #172]	; (8010f4c <__lshift+0xdc>)
 8010ea0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010ea4:	f000 f99c 	bl	80111e0 <__assert_func>
 8010ea8:	3101      	adds	r1, #1
 8010eaa:	005b      	lsls	r3, r3, #1
 8010eac:	e7ee      	b.n	8010e8c <__lshift+0x1c>
 8010eae:	2300      	movs	r3, #0
 8010eb0:	f100 0114 	add.w	r1, r0, #20
 8010eb4:	f100 0210 	add.w	r2, r0, #16
 8010eb8:	4618      	mov	r0, r3
 8010eba:	4553      	cmp	r3, sl
 8010ebc:	db37      	blt.n	8010f2e <__lshift+0xbe>
 8010ebe:	6920      	ldr	r0, [r4, #16]
 8010ec0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010ec4:	f104 0314 	add.w	r3, r4, #20
 8010ec8:	f019 091f 	ands.w	r9, r9, #31
 8010ecc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ed0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010ed4:	d02f      	beq.n	8010f36 <__lshift+0xc6>
 8010ed6:	f1c9 0e20 	rsb	lr, r9, #32
 8010eda:	468a      	mov	sl, r1
 8010edc:	f04f 0c00 	mov.w	ip, #0
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	fa02 f209 	lsl.w	r2, r2, r9
 8010ee6:	ea42 020c 	orr.w	r2, r2, ip
 8010eea:	f84a 2b04 	str.w	r2, [sl], #4
 8010eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ef2:	4298      	cmp	r0, r3
 8010ef4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010ef8:	d8f2      	bhi.n	8010ee0 <__lshift+0x70>
 8010efa:	1b03      	subs	r3, r0, r4
 8010efc:	3b15      	subs	r3, #21
 8010efe:	f023 0303 	bic.w	r3, r3, #3
 8010f02:	3304      	adds	r3, #4
 8010f04:	f104 0215 	add.w	r2, r4, #21
 8010f08:	4290      	cmp	r0, r2
 8010f0a:	bf38      	it	cc
 8010f0c:	2304      	movcc	r3, #4
 8010f0e:	f841 c003 	str.w	ip, [r1, r3]
 8010f12:	f1bc 0f00 	cmp.w	ip, #0
 8010f16:	d001      	beq.n	8010f1c <__lshift+0xac>
 8010f18:	f108 0602 	add.w	r6, r8, #2
 8010f1c:	3e01      	subs	r6, #1
 8010f1e:	4638      	mov	r0, r7
 8010f20:	612e      	str	r6, [r5, #16]
 8010f22:	4621      	mov	r1, r4
 8010f24:	f7ff fdd2 	bl	8010acc <_Bfree>
 8010f28:	4628      	mov	r0, r5
 8010f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010f32:	3301      	adds	r3, #1
 8010f34:	e7c1      	b.n	8010eba <__lshift+0x4a>
 8010f36:	3904      	subs	r1, #4
 8010f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f40:	4298      	cmp	r0, r3
 8010f42:	d8f9      	bhi.n	8010f38 <__lshift+0xc8>
 8010f44:	e7ea      	b.n	8010f1c <__lshift+0xac>
 8010f46:	bf00      	nop
 8010f48:	08012047 	.word	0x08012047
 8010f4c:	08012058 	.word	0x08012058

08010f50 <__mcmp>:
 8010f50:	b530      	push	{r4, r5, lr}
 8010f52:	6902      	ldr	r2, [r0, #16]
 8010f54:	690c      	ldr	r4, [r1, #16]
 8010f56:	1b12      	subs	r2, r2, r4
 8010f58:	d10e      	bne.n	8010f78 <__mcmp+0x28>
 8010f5a:	f100 0314 	add.w	r3, r0, #20
 8010f5e:	3114      	adds	r1, #20
 8010f60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010f64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010f68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010f6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010f70:	42a5      	cmp	r5, r4
 8010f72:	d003      	beq.n	8010f7c <__mcmp+0x2c>
 8010f74:	d305      	bcc.n	8010f82 <__mcmp+0x32>
 8010f76:	2201      	movs	r2, #1
 8010f78:	4610      	mov	r0, r2
 8010f7a:	bd30      	pop	{r4, r5, pc}
 8010f7c:	4283      	cmp	r3, r0
 8010f7e:	d3f3      	bcc.n	8010f68 <__mcmp+0x18>
 8010f80:	e7fa      	b.n	8010f78 <__mcmp+0x28>
 8010f82:	f04f 32ff 	mov.w	r2, #4294967295
 8010f86:	e7f7      	b.n	8010f78 <__mcmp+0x28>

08010f88 <__mdiff>:
 8010f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f8c:	460c      	mov	r4, r1
 8010f8e:	4606      	mov	r6, r0
 8010f90:	4611      	mov	r1, r2
 8010f92:	4620      	mov	r0, r4
 8010f94:	4690      	mov	r8, r2
 8010f96:	f7ff ffdb 	bl	8010f50 <__mcmp>
 8010f9a:	1e05      	subs	r5, r0, #0
 8010f9c:	d110      	bne.n	8010fc0 <__mdiff+0x38>
 8010f9e:	4629      	mov	r1, r5
 8010fa0:	4630      	mov	r0, r6
 8010fa2:	f7ff fd53 	bl	8010a4c <_Balloc>
 8010fa6:	b930      	cbnz	r0, 8010fb6 <__mdiff+0x2e>
 8010fa8:	4b3a      	ldr	r3, [pc, #232]	; (8011094 <__mdiff+0x10c>)
 8010faa:	4602      	mov	r2, r0
 8010fac:	f240 2132 	movw	r1, #562	; 0x232
 8010fb0:	4839      	ldr	r0, [pc, #228]	; (8011098 <__mdiff+0x110>)
 8010fb2:	f000 f915 	bl	80111e0 <__assert_func>
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010fbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fc0:	bfa4      	itt	ge
 8010fc2:	4643      	movge	r3, r8
 8010fc4:	46a0      	movge	r8, r4
 8010fc6:	4630      	mov	r0, r6
 8010fc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010fcc:	bfa6      	itte	ge
 8010fce:	461c      	movge	r4, r3
 8010fd0:	2500      	movge	r5, #0
 8010fd2:	2501      	movlt	r5, #1
 8010fd4:	f7ff fd3a 	bl	8010a4c <_Balloc>
 8010fd8:	b920      	cbnz	r0, 8010fe4 <__mdiff+0x5c>
 8010fda:	4b2e      	ldr	r3, [pc, #184]	; (8011094 <__mdiff+0x10c>)
 8010fdc:	4602      	mov	r2, r0
 8010fde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010fe2:	e7e5      	b.n	8010fb0 <__mdiff+0x28>
 8010fe4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010fe8:	6926      	ldr	r6, [r4, #16]
 8010fea:	60c5      	str	r5, [r0, #12]
 8010fec:	f104 0914 	add.w	r9, r4, #20
 8010ff0:	f108 0514 	add.w	r5, r8, #20
 8010ff4:	f100 0e14 	add.w	lr, r0, #20
 8010ff8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010ffc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011000:	f108 0210 	add.w	r2, r8, #16
 8011004:	46f2      	mov	sl, lr
 8011006:	2100      	movs	r1, #0
 8011008:	f859 3b04 	ldr.w	r3, [r9], #4
 801100c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011010:	fa1f f883 	uxth.w	r8, r3
 8011014:	fa11 f18b 	uxtah	r1, r1, fp
 8011018:	0c1b      	lsrs	r3, r3, #16
 801101a:	eba1 0808 	sub.w	r8, r1, r8
 801101e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011022:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011026:	fa1f f888 	uxth.w	r8, r8
 801102a:	1419      	asrs	r1, r3, #16
 801102c:	454e      	cmp	r6, r9
 801102e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011032:	f84a 3b04 	str.w	r3, [sl], #4
 8011036:	d8e7      	bhi.n	8011008 <__mdiff+0x80>
 8011038:	1b33      	subs	r3, r6, r4
 801103a:	3b15      	subs	r3, #21
 801103c:	f023 0303 	bic.w	r3, r3, #3
 8011040:	3304      	adds	r3, #4
 8011042:	3415      	adds	r4, #21
 8011044:	42a6      	cmp	r6, r4
 8011046:	bf38      	it	cc
 8011048:	2304      	movcc	r3, #4
 801104a:	441d      	add	r5, r3
 801104c:	4473      	add	r3, lr
 801104e:	469e      	mov	lr, r3
 8011050:	462e      	mov	r6, r5
 8011052:	4566      	cmp	r6, ip
 8011054:	d30e      	bcc.n	8011074 <__mdiff+0xec>
 8011056:	f10c 0203 	add.w	r2, ip, #3
 801105a:	1b52      	subs	r2, r2, r5
 801105c:	f022 0203 	bic.w	r2, r2, #3
 8011060:	3d03      	subs	r5, #3
 8011062:	45ac      	cmp	ip, r5
 8011064:	bf38      	it	cc
 8011066:	2200      	movcc	r2, #0
 8011068:	441a      	add	r2, r3
 801106a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801106e:	b17b      	cbz	r3, 8011090 <__mdiff+0x108>
 8011070:	6107      	str	r7, [r0, #16]
 8011072:	e7a3      	b.n	8010fbc <__mdiff+0x34>
 8011074:	f856 8b04 	ldr.w	r8, [r6], #4
 8011078:	fa11 f288 	uxtah	r2, r1, r8
 801107c:	1414      	asrs	r4, r2, #16
 801107e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011082:	b292      	uxth	r2, r2
 8011084:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011088:	f84e 2b04 	str.w	r2, [lr], #4
 801108c:	1421      	asrs	r1, r4, #16
 801108e:	e7e0      	b.n	8011052 <__mdiff+0xca>
 8011090:	3f01      	subs	r7, #1
 8011092:	e7ea      	b.n	801106a <__mdiff+0xe2>
 8011094:	08012047 	.word	0x08012047
 8011098:	08012058 	.word	0x08012058

0801109c <__d2b>:
 801109c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80110a0:	4689      	mov	r9, r1
 80110a2:	2101      	movs	r1, #1
 80110a4:	ec57 6b10 	vmov	r6, r7, d0
 80110a8:	4690      	mov	r8, r2
 80110aa:	f7ff fccf 	bl	8010a4c <_Balloc>
 80110ae:	4604      	mov	r4, r0
 80110b0:	b930      	cbnz	r0, 80110c0 <__d2b+0x24>
 80110b2:	4602      	mov	r2, r0
 80110b4:	4b25      	ldr	r3, [pc, #148]	; (801114c <__d2b+0xb0>)
 80110b6:	4826      	ldr	r0, [pc, #152]	; (8011150 <__d2b+0xb4>)
 80110b8:	f240 310a 	movw	r1, #778	; 0x30a
 80110bc:	f000 f890 	bl	80111e0 <__assert_func>
 80110c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80110c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80110c8:	bb35      	cbnz	r5, 8011118 <__d2b+0x7c>
 80110ca:	2e00      	cmp	r6, #0
 80110cc:	9301      	str	r3, [sp, #4]
 80110ce:	d028      	beq.n	8011122 <__d2b+0x86>
 80110d0:	4668      	mov	r0, sp
 80110d2:	9600      	str	r6, [sp, #0]
 80110d4:	f7ff fd82 	bl	8010bdc <__lo0bits>
 80110d8:	9900      	ldr	r1, [sp, #0]
 80110da:	b300      	cbz	r0, 801111e <__d2b+0x82>
 80110dc:	9a01      	ldr	r2, [sp, #4]
 80110de:	f1c0 0320 	rsb	r3, r0, #32
 80110e2:	fa02 f303 	lsl.w	r3, r2, r3
 80110e6:	430b      	orrs	r3, r1
 80110e8:	40c2      	lsrs	r2, r0
 80110ea:	6163      	str	r3, [r4, #20]
 80110ec:	9201      	str	r2, [sp, #4]
 80110ee:	9b01      	ldr	r3, [sp, #4]
 80110f0:	61a3      	str	r3, [r4, #24]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	bf14      	ite	ne
 80110f6:	2202      	movne	r2, #2
 80110f8:	2201      	moveq	r2, #1
 80110fa:	6122      	str	r2, [r4, #16]
 80110fc:	b1d5      	cbz	r5, 8011134 <__d2b+0x98>
 80110fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011102:	4405      	add	r5, r0
 8011104:	f8c9 5000 	str.w	r5, [r9]
 8011108:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801110c:	f8c8 0000 	str.w	r0, [r8]
 8011110:	4620      	mov	r0, r4
 8011112:	b003      	add	sp, #12
 8011114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801111c:	e7d5      	b.n	80110ca <__d2b+0x2e>
 801111e:	6161      	str	r1, [r4, #20]
 8011120:	e7e5      	b.n	80110ee <__d2b+0x52>
 8011122:	a801      	add	r0, sp, #4
 8011124:	f7ff fd5a 	bl	8010bdc <__lo0bits>
 8011128:	9b01      	ldr	r3, [sp, #4]
 801112a:	6163      	str	r3, [r4, #20]
 801112c:	2201      	movs	r2, #1
 801112e:	6122      	str	r2, [r4, #16]
 8011130:	3020      	adds	r0, #32
 8011132:	e7e3      	b.n	80110fc <__d2b+0x60>
 8011134:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011138:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801113c:	f8c9 0000 	str.w	r0, [r9]
 8011140:	6918      	ldr	r0, [r3, #16]
 8011142:	f7ff fd2b 	bl	8010b9c <__hi0bits>
 8011146:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801114a:	e7df      	b.n	801110c <__d2b+0x70>
 801114c:	08012047 	.word	0x08012047
 8011150:	08012058 	.word	0x08012058

08011154 <_calloc_r>:
 8011154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011156:	fba1 2402 	umull	r2, r4, r1, r2
 801115a:	b94c      	cbnz	r4, 8011170 <_calloc_r+0x1c>
 801115c:	4611      	mov	r1, r2
 801115e:	9201      	str	r2, [sp, #4]
 8011160:	f7fe f8ae 	bl	800f2c0 <_malloc_r>
 8011164:	9a01      	ldr	r2, [sp, #4]
 8011166:	4605      	mov	r5, r0
 8011168:	b930      	cbnz	r0, 8011178 <_calloc_r+0x24>
 801116a:	4628      	mov	r0, r5
 801116c:	b003      	add	sp, #12
 801116e:	bd30      	pop	{r4, r5, pc}
 8011170:	220c      	movs	r2, #12
 8011172:	6002      	str	r2, [r0, #0]
 8011174:	2500      	movs	r5, #0
 8011176:	e7f8      	b.n	801116a <_calloc_r+0x16>
 8011178:	4621      	mov	r1, r4
 801117a:	f7fe f82d 	bl	800f1d8 <memset>
 801117e:	e7f4      	b.n	801116a <_calloc_r+0x16>

08011180 <_realloc_r>:
 8011180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011184:	4680      	mov	r8, r0
 8011186:	4614      	mov	r4, r2
 8011188:	460e      	mov	r6, r1
 801118a:	b921      	cbnz	r1, 8011196 <_realloc_r+0x16>
 801118c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011190:	4611      	mov	r1, r2
 8011192:	f7fe b895 	b.w	800f2c0 <_malloc_r>
 8011196:	b92a      	cbnz	r2, 80111a4 <_realloc_r+0x24>
 8011198:	f7fe f826 	bl	800f1e8 <_free_r>
 801119c:	4625      	mov	r5, r4
 801119e:	4628      	mov	r0, r5
 80111a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111a4:	f000 f861 	bl	801126a <_malloc_usable_size_r>
 80111a8:	4284      	cmp	r4, r0
 80111aa:	4607      	mov	r7, r0
 80111ac:	d802      	bhi.n	80111b4 <_realloc_r+0x34>
 80111ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80111b2:	d812      	bhi.n	80111da <_realloc_r+0x5a>
 80111b4:	4621      	mov	r1, r4
 80111b6:	4640      	mov	r0, r8
 80111b8:	f7fe f882 	bl	800f2c0 <_malloc_r>
 80111bc:	4605      	mov	r5, r0
 80111be:	2800      	cmp	r0, #0
 80111c0:	d0ed      	beq.n	801119e <_realloc_r+0x1e>
 80111c2:	42bc      	cmp	r4, r7
 80111c4:	4622      	mov	r2, r4
 80111c6:	4631      	mov	r1, r6
 80111c8:	bf28      	it	cs
 80111ca:	463a      	movcs	r2, r7
 80111cc:	f7fd fff6 	bl	800f1bc <memcpy>
 80111d0:	4631      	mov	r1, r6
 80111d2:	4640      	mov	r0, r8
 80111d4:	f7fe f808 	bl	800f1e8 <_free_r>
 80111d8:	e7e1      	b.n	801119e <_realloc_r+0x1e>
 80111da:	4635      	mov	r5, r6
 80111dc:	e7df      	b.n	801119e <_realloc_r+0x1e>
	...

080111e0 <__assert_func>:
 80111e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111e2:	4614      	mov	r4, r2
 80111e4:	461a      	mov	r2, r3
 80111e6:	4b09      	ldr	r3, [pc, #36]	; (801120c <__assert_func+0x2c>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	4605      	mov	r5, r0
 80111ec:	68d8      	ldr	r0, [r3, #12]
 80111ee:	b14c      	cbz	r4, 8011204 <__assert_func+0x24>
 80111f0:	4b07      	ldr	r3, [pc, #28]	; (8011210 <__assert_func+0x30>)
 80111f2:	9100      	str	r1, [sp, #0]
 80111f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111f8:	4906      	ldr	r1, [pc, #24]	; (8011214 <__assert_func+0x34>)
 80111fa:	462b      	mov	r3, r5
 80111fc:	f000 f80e 	bl	801121c <fiprintf>
 8011200:	f7fd ff9a 	bl	800f138 <abort>
 8011204:	4b04      	ldr	r3, [pc, #16]	; (8011218 <__assert_func+0x38>)
 8011206:	461c      	mov	r4, r3
 8011208:	e7f3      	b.n	80111f2 <__assert_func+0x12>
 801120a:	bf00      	nop
 801120c:	20000048 	.word	0x20000048
 8011210:	080121b4 	.word	0x080121b4
 8011214:	080121c1 	.word	0x080121c1
 8011218:	080121ef 	.word	0x080121ef

0801121c <fiprintf>:
 801121c:	b40e      	push	{r1, r2, r3}
 801121e:	b503      	push	{r0, r1, lr}
 8011220:	4601      	mov	r1, r0
 8011222:	ab03      	add	r3, sp, #12
 8011224:	4805      	ldr	r0, [pc, #20]	; (801123c <fiprintf+0x20>)
 8011226:	f853 2b04 	ldr.w	r2, [r3], #4
 801122a:	6800      	ldr	r0, [r0, #0]
 801122c:	9301      	str	r3, [sp, #4]
 801122e:	f000 f84d 	bl	80112cc <_vfiprintf_r>
 8011232:	b002      	add	sp, #8
 8011234:	f85d eb04 	ldr.w	lr, [sp], #4
 8011238:	b003      	add	sp, #12
 801123a:	4770      	bx	lr
 801123c:	20000048 	.word	0x20000048

08011240 <__retarget_lock_init_recursive>:
 8011240:	4770      	bx	lr

08011242 <__retarget_lock_acquire_recursive>:
 8011242:	4770      	bx	lr

08011244 <__retarget_lock_release_recursive>:
 8011244:	4770      	bx	lr

08011246 <__ascii_mbtowc>:
 8011246:	b082      	sub	sp, #8
 8011248:	b901      	cbnz	r1, 801124c <__ascii_mbtowc+0x6>
 801124a:	a901      	add	r1, sp, #4
 801124c:	b142      	cbz	r2, 8011260 <__ascii_mbtowc+0x1a>
 801124e:	b14b      	cbz	r3, 8011264 <__ascii_mbtowc+0x1e>
 8011250:	7813      	ldrb	r3, [r2, #0]
 8011252:	600b      	str	r3, [r1, #0]
 8011254:	7812      	ldrb	r2, [r2, #0]
 8011256:	1e10      	subs	r0, r2, #0
 8011258:	bf18      	it	ne
 801125a:	2001      	movne	r0, #1
 801125c:	b002      	add	sp, #8
 801125e:	4770      	bx	lr
 8011260:	4610      	mov	r0, r2
 8011262:	e7fb      	b.n	801125c <__ascii_mbtowc+0x16>
 8011264:	f06f 0001 	mvn.w	r0, #1
 8011268:	e7f8      	b.n	801125c <__ascii_mbtowc+0x16>

0801126a <_malloc_usable_size_r>:
 801126a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801126e:	1f18      	subs	r0, r3, #4
 8011270:	2b00      	cmp	r3, #0
 8011272:	bfbc      	itt	lt
 8011274:	580b      	ldrlt	r3, [r1, r0]
 8011276:	18c0      	addlt	r0, r0, r3
 8011278:	4770      	bx	lr

0801127a <__sfputc_r>:
 801127a:	6893      	ldr	r3, [r2, #8]
 801127c:	3b01      	subs	r3, #1
 801127e:	2b00      	cmp	r3, #0
 8011280:	b410      	push	{r4}
 8011282:	6093      	str	r3, [r2, #8]
 8011284:	da08      	bge.n	8011298 <__sfputc_r+0x1e>
 8011286:	6994      	ldr	r4, [r2, #24]
 8011288:	42a3      	cmp	r3, r4
 801128a:	db01      	blt.n	8011290 <__sfputc_r+0x16>
 801128c:	290a      	cmp	r1, #10
 801128e:	d103      	bne.n	8011298 <__sfputc_r+0x1e>
 8011290:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011294:	f000 b94a 	b.w	801152c <__swbuf_r>
 8011298:	6813      	ldr	r3, [r2, #0]
 801129a:	1c58      	adds	r0, r3, #1
 801129c:	6010      	str	r0, [r2, #0]
 801129e:	7019      	strb	r1, [r3, #0]
 80112a0:	4608      	mov	r0, r1
 80112a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112a6:	4770      	bx	lr

080112a8 <__sfputs_r>:
 80112a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112aa:	4606      	mov	r6, r0
 80112ac:	460f      	mov	r7, r1
 80112ae:	4614      	mov	r4, r2
 80112b0:	18d5      	adds	r5, r2, r3
 80112b2:	42ac      	cmp	r4, r5
 80112b4:	d101      	bne.n	80112ba <__sfputs_r+0x12>
 80112b6:	2000      	movs	r0, #0
 80112b8:	e007      	b.n	80112ca <__sfputs_r+0x22>
 80112ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112be:	463a      	mov	r2, r7
 80112c0:	4630      	mov	r0, r6
 80112c2:	f7ff ffda 	bl	801127a <__sfputc_r>
 80112c6:	1c43      	adds	r3, r0, #1
 80112c8:	d1f3      	bne.n	80112b2 <__sfputs_r+0xa>
 80112ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080112cc <_vfiprintf_r>:
 80112cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112d0:	460d      	mov	r5, r1
 80112d2:	b09d      	sub	sp, #116	; 0x74
 80112d4:	4614      	mov	r4, r2
 80112d6:	4698      	mov	r8, r3
 80112d8:	4606      	mov	r6, r0
 80112da:	b118      	cbz	r0, 80112e4 <_vfiprintf_r+0x18>
 80112dc:	6983      	ldr	r3, [r0, #24]
 80112de:	b90b      	cbnz	r3, 80112e4 <_vfiprintf_r+0x18>
 80112e0:	f000 fb0c 	bl	80118fc <__sinit>
 80112e4:	4b89      	ldr	r3, [pc, #548]	; (801150c <_vfiprintf_r+0x240>)
 80112e6:	429d      	cmp	r5, r3
 80112e8:	d11b      	bne.n	8011322 <_vfiprintf_r+0x56>
 80112ea:	6875      	ldr	r5, [r6, #4]
 80112ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112ee:	07d9      	lsls	r1, r3, #31
 80112f0:	d405      	bmi.n	80112fe <_vfiprintf_r+0x32>
 80112f2:	89ab      	ldrh	r3, [r5, #12]
 80112f4:	059a      	lsls	r2, r3, #22
 80112f6:	d402      	bmi.n	80112fe <_vfiprintf_r+0x32>
 80112f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112fa:	f7ff ffa2 	bl	8011242 <__retarget_lock_acquire_recursive>
 80112fe:	89ab      	ldrh	r3, [r5, #12]
 8011300:	071b      	lsls	r3, r3, #28
 8011302:	d501      	bpl.n	8011308 <_vfiprintf_r+0x3c>
 8011304:	692b      	ldr	r3, [r5, #16]
 8011306:	b9eb      	cbnz	r3, 8011344 <_vfiprintf_r+0x78>
 8011308:	4629      	mov	r1, r5
 801130a:	4630      	mov	r0, r6
 801130c:	f000 f96e 	bl	80115ec <__swsetup_r>
 8011310:	b1c0      	cbz	r0, 8011344 <_vfiprintf_r+0x78>
 8011312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011314:	07dc      	lsls	r4, r3, #31
 8011316:	d50e      	bpl.n	8011336 <_vfiprintf_r+0x6a>
 8011318:	f04f 30ff 	mov.w	r0, #4294967295
 801131c:	b01d      	add	sp, #116	; 0x74
 801131e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011322:	4b7b      	ldr	r3, [pc, #492]	; (8011510 <_vfiprintf_r+0x244>)
 8011324:	429d      	cmp	r5, r3
 8011326:	d101      	bne.n	801132c <_vfiprintf_r+0x60>
 8011328:	68b5      	ldr	r5, [r6, #8]
 801132a:	e7df      	b.n	80112ec <_vfiprintf_r+0x20>
 801132c:	4b79      	ldr	r3, [pc, #484]	; (8011514 <_vfiprintf_r+0x248>)
 801132e:	429d      	cmp	r5, r3
 8011330:	bf08      	it	eq
 8011332:	68f5      	ldreq	r5, [r6, #12]
 8011334:	e7da      	b.n	80112ec <_vfiprintf_r+0x20>
 8011336:	89ab      	ldrh	r3, [r5, #12]
 8011338:	0598      	lsls	r0, r3, #22
 801133a:	d4ed      	bmi.n	8011318 <_vfiprintf_r+0x4c>
 801133c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801133e:	f7ff ff81 	bl	8011244 <__retarget_lock_release_recursive>
 8011342:	e7e9      	b.n	8011318 <_vfiprintf_r+0x4c>
 8011344:	2300      	movs	r3, #0
 8011346:	9309      	str	r3, [sp, #36]	; 0x24
 8011348:	2320      	movs	r3, #32
 801134a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801134e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011352:	2330      	movs	r3, #48	; 0x30
 8011354:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011518 <_vfiprintf_r+0x24c>
 8011358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801135c:	f04f 0901 	mov.w	r9, #1
 8011360:	4623      	mov	r3, r4
 8011362:	469a      	mov	sl, r3
 8011364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011368:	b10a      	cbz	r2, 801136e <_vfiprintf_r+0xa2>
 801136a:	2a25      	cmp	r2, #37	; 0x25
 801136c:	d1f9      	bne.n	8011362 <_vfiprintf_r+0x96>
 801136e:	ebba 0b04 	subs.w	fp, sl, r4
 8011372:	d00b      	beq.n	801138c <_vfiprintf_r+0xc0>
 8011374:	465b      	mov	r3, fp
 8011376:	4622      	mov	r2, r4
 8011378:	4629      	mov	r1, r5
 801137a:	4630      	mov	r0, r6
 801137c:	f7ff ff94 	bl	80112a8 <__sfputs_r>
 8011380:	3001      	adds	r0, #1
 8011382:	f000 80aa 	beq.w	80114da <_vfiprintf_r+0x20e>
 8011386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011388:	445a      	add	r2, fp
 801138a:	9209      	str	r2, [sp, #36]	; 0x24
 801138c:	f89a 3000 	ldrb.w	r3, [sl]
 8011390:	2b00      	cmp	r3, #0
 8011392:	f000 80a2 	beq.w	80114da <_vfiprintf_r+0x20e>
 8011396:	2300      	movs	r3, #0
 8011398:	f04f 32ff 	mov.w	r2, #4294967295
 801139c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113a0:	f10a 0a01 	add.w	sl, sl, #1
 80113a4:	9304      	str	r3, [sp, #16]
 80113a6:	9307      	str	r3, [sp, #28]
 80113a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113ac:	931a      	str	r3, [sp, #104]	; 0x68
 80113ae:	4654      	mov	r4, sl
 80113b0:	2205      	movs	r2, #5
 80113b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113b6:	4858      	ldr	r0, [pc, #352]	; (8011518 <_vfiprintf_r+0x24c>)
 80113b8:	f7ee ff1a 	bl	80001f0 <memchr>
 80113bc:	9a04      	ldr	r2, [sp, #16]
 80113be:	b9d8      	cbnz	r0, 80113f8 <_vfiprintf_r+0x12c>
 80113c0:	06d1      	lsls	r1, r2, #27
 80113c2:	bf44      	itt	mi
 80113c4:	2320      	movmi	r3, #32
 80113c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113ca:	0713      	lsls	r3, r2, #28
 80113cc:	bf44      	itt	mi
 80113ce:	232b      	movmi	r3, #43	; 0x2b
 80113d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113d4:	f89a 3000 	ldrb.w	r3, [sl]
 80113d8:	2b2a      	cmp	r3, #42	; 0x2a
 80113da:	d015      	beq.n	8011408 <_vfiprintf_r+0x13c>
 80113dc:	9a07      	ldr	r2, [sp, #28]
 80113de:	4654      	mov	r4, sl
 80113e0:	2000      	movs	r0, #0
 80113e2:	f04f 0c0a 	mov.w	ip, #10
 80113e6:	4621      	mov	r1, r4
 80113e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113ec:	3b30      	subs	r3, #48	; 0x30
 80113ee:	2b09      	cmp	r3, #9
 80113f0:	d94e      	bls.n	8011490 <_vfiprintf_r+0x1c4>
 80113f2:	b1b0      	cbz	r0, 8011422 <_vfiprintf_r+0x156>
 80113f4:	9207      	str	r2, [sp, #28]
 80113f6:	e014      	b.n	8011422 <_vfiprintf_r+0x156>
 80113f8:	eba0 0308 	sub.w	r3, r0, r8
 80113fc:	fa09 f303 	lsl.w	r3, r9, r3
 8011400:	4313      	orrs	r3, r2
 8011402:	9304      	str	r3, [sp, #16]
 8011404:	46a2      	mov	sl, r4
 8011406:	e7d2      	b.n	80113ae <_vfiprintf_r+0xe2>
 8011408:	9b03      	ldr	r3, [sp, #12]
 801140a:	1d19      	adds	r1, r3, #4
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	9103      	str	r1, [sp, #12]
 8011410:	2b00      	cmp	r3, #0
 8011412:	bfbb      	ittet	lt
 8011414:	425b      	neglt	r3, r3
 8011416:	f042 0202 	orrlt.w	r2, r2, #2
 801141a:	9307      	strge	r3, [sp, #28]
 801141c:	9307      	strlt	r3, [sp, #28]
 801141e:	bfb8      	it	lt
 8011420:	9204      	strlt	r2, [sp, #16]
 8011422:	7823      	ldrb	r3, [r4, #0]
 8011424:	2b2e      	cmp	r3, #46	; 0x2e
 8011426:	d10c      	bne.n	8011442 <_vfiprintf_r+0x176>
 8011428:	7863      	ldrb	r3, [r4, #1]
 801142a:	2b2a      	cmp	r3, #42	; 0x2a
 801142c:	d135      	bne.n	801149a <_vfiprintf_r+0x1ce>
 801142e:	9b03      	ldr	r3, [sp, #12]
 8011430:	1d1a      	adds	r2, r3, #4
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	9203      	str	r2, [sp, #12]
 8011436:	2b00      	cmp	r3, #0
 8011438:	bfb8      	it	lt
 801143a:	f04f 33ff 	movlt.w	r3, #4294967295
 801143e:	3402      	adds	r4, #2
 8011440:	9305      	str	r3, [sp, #20]
 8011442:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011528 <_vfiprintf_r+0x25c>
 8011446:	7821      	ldrb	r1, [r4, #0]
 8011448:	2203      	movs	r2, #3
 801144a:	4650      	mov	r0, sl
 801144c:	f7ee fed0 	bl	80001f0 <memchr>
 8011450:	b140      	cbz	r0, 8011464 <_vfiprintf_r+0x198>
 8011452:	2340      	movs	r3, #64	; 0x40
 8011454:	eba0 000a 	sub.w	r0, r0, sl
 8011458:	fa03 f000 	lsl.w	r0, r3, r0
 801145c:	9b04      	ldr	r3, [sp, #16]
 801145e:	4303      	orrs	r3, r0
 8011460:	3401      	adds	r4, #1
 8011462:	9304      	str	r3, [sp, #16]
 8011464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011468:	482c      	ldr	r0, [pc, #176]	; (801151c <_vfiprintf_r+0x250>)
 801146a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801146e:	2206      	movs	r2, #6
 8011470:	f7ee febe 	bl	80001f0 <memchr>
 8011474:	2800      	cmp	r0, #0
 8011476:	d03f      	beq.n	80114f8 <_vfiprintf_r+0x22c>
 8011478:	4b29      	ldr	r3, [pc, #164]	; (8011520 <_vfiprintf_r+0x254>)
 801147a:	bb1b      	cbnz	r3, 80114c4 <_vfiprintf_r+0x1f8>
 801147c:	9b03      	ldr	r3, [sp, #12]
 801147e:	3307      	adds	r3, #7
 8011480:	f023 0307 	bic.w	r3, r3, #7
 8011484:	3308      	adds	r3, #8
 8011486:	9303      	str	r3, [sp, #12]
 8011488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801148a:	443b      	add	r3, r7
 801148c:	9309      	str	r3, [sp, #36]	; 0x24
 801148e:	e767      	b.n	8011360 <_vfiprintf_r+0x94>
 8011490:	fb0c 3202 	mla	r2, ip, r2, r3
 8011494:	460c      	mov	r4, r1
 8011496:	2001      	movs	r0, #1
 8011498:	e7a5      	b.n	80113e6 <_vfiprintf_r+0x11a>
 801149a:	2300      	movs	r3, #0
 801149c:	3401      	adds	r4, #1
 801149e:	9305      	str	r3, [sp, #20]
 80114a0:	4619      	mov	r1, r3
 80114a2:	f04f 0c0a 	mov.w	ip, #10
 80114a6:	4620      	mov	r0, r4
 80114a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114ac:	3a30      	subs	r2, #48	; 0x30
 80114ae:	2a09      	cmp	r2, #9
 80114b0:	d903      	bls.n	80114ba <_vfiprintf_r+0x1ee>
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d0c5      	beq.n	8011442 <_vfiprintf_r+0x176>
 80114b6:	9105      	str	r1, [sp, #20]
 80114b8:	e7c3      	b.n	8011442 <_vfiprintf_r+0x176>
 80114ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80114be:	4604      	mov	r4, r0
 80114c0:	2301      	movs	r3, #1
 80114c2:	e7f0      	b.n	80114a6 <_vfiprintf_r+0x1da>
 80114c4:	ab03      	add	r3, sp, #12
 80114c6:	9300      	str	r3, [sp, #0]
 80114c8:	462a      	mov	r2, r5
 80114ca:	4b16      	ldr	r3, [pc, #88]	; (8011524 <_vfiprintf_r+0x258>)
 80114cc:	a904      	add	r1, sp, #16
 80114ce:	4630      	mov	r0, r6
 80114d0:	f7fe f80a 	bl	800f4e8 <_printf_float>
 80114d4:	4607      	mov	r7, r0
 80114d6:	1c78      	adds	r0, r7, #1
 80114d8:	d1d6      	bne.n	8011488 <_vfiprintf_r+0x1bc>
 80114da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114dc:	07d9      	lsls	r1, r3, #31
 80114de:	d405      	bmi.n	80114ec <_vfiprintf_r+0x220>
 80114e0:	89ab      	ldrh	r3, [r5, #12]
 80114e2:	059a      	lsls	r2, r3, #22
 80114e4:	d402      	bmi.n	80114ec <_vfiprintf_r+0x220>
 80114e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114e8:	f7ff feac 	bl	8011244 <__retarget_lock_release_recursive>
 80114ec:	89ab      	ldrh	r3, [r5, #12]
 80114ee:	065b      	lsls	r3, r3, #25
 80114f0:	f53f af12 	bmi.w	8011318 <_vfiprintf_r+0x4c>
 80114f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114f6:	e711      	b.n	801131c <_vfiprintf_r+0x50>
 80114f8:	ab03      	add	r3, sp, #12
 80114fa:	9300      	str	r3, [sp, #0]
 80114fc:	462a      	mov	r2, r5
 80114fe:	4b09      	ldr	r3, [pc, #36]	; (8011524 <_vfiprintf_r+0x258>)
 8011500:	a904      	add	r1, sp, #16
 8011502:	4630      	mov	r0, r6
 8011504:	f7fe fa94 	bl	800fa30 <_printf_i>
 8011508:	e7e4      	b.n	80114d4 <_vfiprintf_r+0x208>
 801150a:	bf00      	nop
 801150c:	0801232c 	.word	0x0801232c
 8011510:	0801234c 	.word	0x0801234c
 8011514:	0801230c 	.word	0x0801230c
 8011518:	080121fa 	.word	0x080121fa
 801151c:	08012204 	.word	0x08012204
 8011520:	0800f4e9 	.word	0x0800f4e9
 8011524:	080112a9 	.word	0x080112a9
 8011528:	08012200 	.word	0x08012200

0801152c <__swbuf_r>:
 801152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801152e:	460e      	mov	r6, r1
 8011530:	4614      	mov	r4, r2
 8011532:	4605      	mov	r5, r0
 8011534:	b118      	cbz	r0, 801153e <__swbuf_r+0x12>
 8011536:	6983      	ldr	r3, [r0, #24]
 8011538:	b90b      	cbnz	r3, 801153e <__swbuf_r+0x12>
 801153a:	f000 f9df 	bl	80118fc <__sinit>
 801153e:	4b21      	ldr	r3, [pc, #132]	; (80115c4 <__swbuf_r+0x98>)
 8011540:	429c      	cmp	r4, r3
 8011542:	d12b      	bne.n	801159c <__swbuf_r+0x70>
 8011544:	686c      	ldr	r4, [r5, #4]
 8011546:	69a3      	ldr	r3, [r4, #24]
 8011548:	60a3      	str	r3, [r4, #8]
 801154a:	89a3      	ldrh	r3, [r4, #12]
 801154c:	071a      	lsls	r2, r3, #28
 801154e:	d52f      	bpl.n	80115b0 <__swbuf_r+0x84>
 8011550:	6923      	ldr	r3, [r4, #16]
 8011552:	b36b      	cbz	r3, 80115b0 <__swbuf_r+0x84>
 8011554:	6923      	ldr	r3, [r4, #16]
 8011556:	6820      	ldr	r0, [r4, #0]
 8011558:	1ac0      	subs	r0, r0, r3
 801155a:	6963      	ldr	r3, [r4, #20]
 801155c:	b2f6      	uxtb	r6, r6
 801155e:	4283      	cmp	r3, r0
 8011560:	4637      	mov	r7, r6
 8011562:	dc04      	bgt.n	801156e <__swbuf_r+0x42>
 8011564:	4621      	mov	r1, r4
 8011566:	4628      	mov	r0, r5
 8011568:	f000 f934 	bl	80117d4 <_fflush_r>
 801156c:	bb30      	cbnz	r0, 80115bc <__swbuf_r+0x90>
 801156e:	68a3      	ldr	r3, [r4, #8]
 8011570:	3b01      	subs	r3, #1
 8011572:	60a3      	str	r3, [r4, #8]
 8011574:	6823      	ldr	r3, [r4, #0]
 8011576:	1c5a      	adds	r2, r3, #1
 8011578:	6022      	str	r2, [r4, #0]
 801157a:	701e      	strb	r6, [r3, #0]
 801157c:	6963      	ldr	r3, [r4, #20]
 801157e:	3001      	adds	r0, #1
 8011580:	4283      	cmp	r3, r0
 8011582:	d004      	beq.n	801158e <__swbuf_r+0x62>
 8011584:	89a3      	ldrh	r3, [r4, #12]
 8011586:	07db      	lsls	r3, r3, #31
 8011588:	d506      	bpl.n	8011598 <__swbuf_r+0x6c>
 801158a:	2e0a      	cmp	r6, #10
 801158c:	d104      	bne.n	8011598 <__swbuf_r+0x6c>
 801158e:	4621      	mov	r1, r4
 8011590:	4628      	mov	r0, r5
 8011592:	f000 f91f 	bl	80117d4 <_fflush_r>
 8011596:	b988      	cbnz	r0, 80115bc <__swbuf_r+0x90>
 8011598:	4638      	mov	r0, r7
 801159a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801159c:	4b0a      	ldr	r3, [pc, #40]	; (80115c8 <__swbuf_r+0x9c>)
 801159e:	429c      	cmp	r4, r3
 80115a0:	d101      	bne.n	80115a6 <__swbuf_r+0x7a>
 80115a2:	68ac      	ldr	r4, [r5, #8]
 80115a4:	e7cf      	b.n	8011546 <__swbuf_r+0x1a>
 80115a6:	4b09      	ldr	r3, [pc, #36]	; (80115cc <__swbuf_r+0xa0>)
 80115a8:	429c      	cmp	r4, r3
 80115aa:	bf08      	it	eq
 80115ac:	68ec      	ldreq	r4, [r5, #12]
 80115ae:	e7ca      	b.n	8011546 <__swbuf_r+0x1a>
 80115b0:	4621      	mov	r1, r4
 80115b2:	4628      	mov	r0, r5
 80115b4:	f000 f81a 	bl	80115ec <__swsetup_r>
 80115b8:	2800      	cmp	r0, #0
 80115ba:	d0cb      	beq.n	8011554 <__swbuf_r+0x28>
 80115bc:	f04f 37ff 	mov.w	r7, #4294967295
 80115c0:	e7ea      	b.n	8011598 <__swbuf_r+0x6c>
 80115c2:	bf00      	nop
 80115c4:	0801232c 	.word	0x0801232c
 80115c8:	0801234c 	.word	0x0801234c
 80115cc:	0801230c 	.word	0x0801230c

080115d0 <__ascii_wctomb>:
 80115d0:	b149      	cbz	r1, 80115e6 <__ascii_wctomb+0x16>
 80115d2:	2aff      	cmp	r2, #255	; 0xff
 80115d4:	bf85      	ittet	hi
 80115d6:	238a      	movhi	r3, #138	; 0x8a
 80115d8:	6003      	strhi	r3, [r0, #0]
 80115da:	700a      	strbls	r2, [r1, #0]
 80115dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80115e0:	bf98      	it	ls
 80115e2:	2001      	movls	r0, #1
 80115e4:	4770      	bx	lr
 80115e6:	4608      	mov	r0, r1
 80115e8:	4770      	bx	lr
	...

080115ec <__swsetup_r>:
 80115ec:	4b32      	ldr	r3, [pc, #200]	; (80116b8 <__swsetup_r+0xcc>)
 80115ee:	b570      	push	{r4, r5, r6, lr}
 80115f0:	681d      	ldr	r5, [r3, #0]
 80115f2:	4606      	mov	r6, r0
 80115f4:	460c      	mov	r4, r1
 80115f6:	b125      	cbz	r5, 8011602 <__swsetup_r+0x16>
 80115f8:	69ab      	ldr	r3, [r5, #24]
 80115fa:	b913      	cbnz	r3, 8011602 <__swsetup_r+0x16>
 80115fc:	4628      	mov	r0, r5
 80115fe:	f000 f97d 	bl	80118fc <__sinit>
 8011602:	4b2e      	ldr	r3, [pc, #184]	; (80116bc <__swsetup_r+0xd0>)
 8011604:	429c      	cmp	r4, r3
 8011606:	d10f      	bne.n	8011628 <__swsetup_r+0x3c>
 8011608:	686c      	ldr	r4, [r5, #4]
 801160a:	89a3      	ldrh	r3, [r4, #12]
 801160c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011610:	0719      	lsls	r1, r3, #28
 8011612:	d42c      	bmi.n	801166e <__swsetup_r+0x82>
 8011614:	06dd      	lsls	r5, r3, #27
 8011616:	d411      	bmi.n	801163c <__swsetup_r+0x50>
 8011618:	2309      	movs	r3, #9
 801161a:	6033      	str	r3, [r6, #0]
 801161c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011620:	81a3      	strh	r3, [r4, #12]
 8011622:	f04f 30ff 	mov.w	r0, #4294967295
 8011626:	e03e      	b.n	80116a6 <__swsetup_r+0xba>
 8011628:	4b25      	ldr	r3, [pc, #148]	; (80116c0 <__swsetup_r+0xd4>)
 801162a:	429c      	cmp	r4, r3
 801162c:	d101      	bne.n	8011632 <__swsetup_r+0x46>
 801162e:	68ac      	ldr	r4, [r5, #8]
 8011630:	e7eb      	b.n	801160a <__swsetup_r+0x1e>
 8011632:	4b24      	ldr	r3, [pc, #144]	; (80116c4 <__swsetup_r+0xd8>)
 8011634:	429c      	cmp	r4, r3
 8011636:	bf08      	it	eq
 8011638:	68ec      	ldreq	r4, [r5, #12]
 801163a:	e7e6      	b.n	801160a <__swsetup_r+0x1e>
 801163c:	0758      	lsls	r0, r3, #29
 801163e:	d512      	bpl.n	8011666 <__swsetup_r+0x7a>
 8011640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011642:	b141      	cbz	r1, 8011656 <__swsetup_r+0x6a>
 8011644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011648:	4299      	cmp	r1, r3
 801164a:	d002      	beq.n	8011652 <__swsetup_r+0x66>
 801164c:	4630      	mov	r0, r6
 801164e:	f7fd fdcb 	bl	800f1e8 <_free_r>
 8011652:	2300      	movs	r3, #0
 8011654:	6363      	str	r3, [r4, #52]	; 0x34
 8011656:	89a3      	ldrh	r3, [r4, #12]
 8011658:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801165c:	81a3      	strh	r3, [r4, #12]
 801165e:	2300      	movs	r3, #0
 8011660:	6063      	str	r3, [r4, #4]
 8011662:	6923      	ldr	r3, [r4, #16]
 8011664:	6023      	str	r3, [r4, #0]
 8011666:	89a3      	ldrh	r3, [r4, #12]
 8011668:	f043 0308 	orr.w	r3, r3, #8
 801166c:	81a3      	strh	r3, [r4, #12]
 801166e:	6923      	ldr	r3, [r4, #16]
 8011670:	b94b      	cbnz	r3, 8011686 <__swsetup_r+0x9a>
 8011672:	89a3      	ldrh	r3, [r4, #12]
 8011674:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801167c:	d003      	beq.n	8011686 <__swsetup_r+0x9a>
 801167e:	4621      	mov	r1, r4
 8011680:	4630      	mov	r0, r6
 8011682:	f000 f9fd 	bl	8011a80 <__smakebuf_r>
 8011686:	89a0      	ldrh	r0, [r4, #12]
 8011688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801168c:	f010 0301 	ands.w	r3, r0, #1
 8011690:	d00a      	beq.n	80116a8 <__swsetup_r+0xbc>
 8011692:	2300      	movs	r3, #0
 8011694:	60a3      	str	r3, [r4, #8]
 8011696:	6963      	ldr	r3, [r4, #20]
 8011698:	425b      	negs	r3, r3
 801169a:	61a3      	str	r3, [r4, #24]
 801169c:	6923      	ldr	r3, [r4, #16]
 801169e:	b943      	cbnz	r3, 80116b2 <__swsetup_r+0xc6>
 80116a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80116a4:	d1ba      	bne.n	801161c <__swsetup_r+0x30>
 80116a6:	bd70      	pop	{r4, r5, r6, pc}
 80116a8:	0781      	lsls	r1, r0, #30
 80116aa:	bf58      	it	pl
 80116ac:	6963      	ldrpl	r3, [r4, #20]
 80116ae:	60a3      	str	r3, [r4, #8]
 80116b0:	e7f4      	b.n	801169c <__swsetup_r+0xb0>
 80116b2:	2000      	movs	r0, #0
 80116b4:	e7f7      	b.n	80116a6 <__swsetup_r+0xba>
 80116b6:	bf00      	nop
 80116b8:	20000048 	.word	0x20000048
 80116bc:	0801232c 	.word	0x0801232c
 80116c0:	0801234c 	.word	0x0801234c
 80116c4:	0801230c 	.word	0x0801230c

080116c8 <__sflush_r>:
 80116c8:	898a      	ldrh	r2, [r1, #12]
 80116ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116ce:	4605      	mov	r5, r0
 80116d0:	0710      	lsls	r0, r2, #28
 80116d2:	460c      	mov	r4, r1
 80116d4:	d458      	bmi.n	8011788 <__sflush_r+0xc0>
 80116d6:	684b      	ldr	r3, [r1, #4]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	dc05      	bgt.n	80116e8 <__sflush_r+0x20>
 80116dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80116de:	2b00      	cmp	r3, #0
 80116e0:	dc02      	bgt.n	80116e8 <__sflush_r+0x20>
 80116e2:	2000      	movs	r0, #0
 80116e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116ea:	2e00      	cmp	r6, #0
 80116ec:	d0f9      	beq.n	80116e2 <__sflush_r+0x1a>
 80116ee:	2300      	movs	r3, #0
 80116f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80116f4:	682f      	ldr	r7, [r5, #0]
 80116f6:	602b      	str	r3, [r5, #0]
 80116f8:	d032      	beq.n	8011760 <__sflush_r+0x98>
 80116fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80116fc:	89a3      	ldrh	r3, [r4, #12]
 80116fe:	075a      	lsls	r2, r3, #29
 8011700:	d505      	bpl.n	801170e <__sflush_r+0x46>
 8011702:	6863      	ldr	r3, [r4, #4]
 8011704:	1ac0      	subs	r0, r0, r3
 8011706:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011708:	b10b      	cbz	r3, 801170e <__sflush_r+0x46>
 801170a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801170c:	1ac0      	subs	r0, r0, r3
 801170e:	2300      	movs	r3, #0
 8011710:	4602      	mov	r2, r0
 8011712:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011714:	6a21      	ldr	r1, [r4, #32]
 8011716:	4628      	mov	r0, r5
 8011718:	47b0      	blx	r6
 801171a:	1c43      	adds	r3, r0, #1
 801171c:	89a3      	ldrh	r3, [r4, #12]
 801171e:	d106      	bne.n	801172e <__sflush_r+0x66>
 8011720:	6829      	ldr	r1, [r5, #0]
 8011722:	291d      	cmp	r1, #29
 8011724:	d82c      	bhi.n	8011780 <__sflush_r+0xb8>
 8011726:	4a2a      	ldr	r2, [pc, #168]	; (80117d0 <__sflush_r+0x108>)
 8011728:	40ca      	lsrs	r2, r1
 801172a:	07d6      	lsls	r6, r2, #31
 801172c:	d528      	bpl.n	8011780 <__sflush_r+0xb8>
 801172e:	2200      	movs	r2, #0
 8011730:	6062      	str	r2, [r4, #4]
 8011732:	04d9      	lsls	r1, r3, #19
 8011734:	6922      	ldr	r2, [r4, #16]
 8011736:	6022      	str	r2, [r4, #0]
 8011738:	d504      	bpl.n	8011744 <__sflush_r+0x7c>
 801173a:	1c42      	adds	r2, r0, #1
 801173c:	d101      	bne.n	8011742 <__sflush_r+0x7a>
 801173e:	682b      	ldr	r3, [r5, #0]
 8011740:	b903      	cbnz	r3, 8011744 <__sflush_r+0x7c>
 8011742:	6560      	str	r0, [r4, #84]	; 0x54
 8011744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011746:	602f      	str	r7, [r5, #0]
 8011748:	2900      	cmp	r1, #0
 801174a:	d0ca      	beq.n	80116e2 <__sflush_r+0x1a>
 801174c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011750:	4299      	cmp	r1, r3
 8011752:	d002      	beq.n	801175a <__sflush_r+0x92>
 8011754:	4628      	mov	r0, r5
 8011756:	f7fd fd47 	bl	800f1e8 <_free_r>
 801175a:	2000      	movs	r0, #0
 801175c:	6360      	str	r0, [r4, #52]	; 0x34
 801175e:	e7c1      	b.n	80116e4 <__sflush_r+0x1c>
 8011760:	6a21      	ldr	r1, [r4, #32]
 8011762:	2301      	movs	r3, #1
 8011764:	4628      	mov	r0, r5
 8011766:	47b0      	blx	r6
 8011768:	1c41      	adds	r1, r0, #1
 801176a:	d1c7      	bne.n	80116fc <__sflush_r+0x34>
 801176c:	682b      	ldr	r3, [r5, #0]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d0c4      	beq.n	80116fc <__sflush_r+0x34>
 8011772:	2b1d      	cmp	r3, #29
 8011774:	d001      	beq.n	801177a <__sflush_r+0xb2>
 8011776:	2b16      	cmp	r3, #22
 8011778:	d101      	bne.n	801177e <__sflush_r+0xb6>
 801177a:	602f      	str	r7, [r5, #0]
 801177c:	e7b1      	b.n	80116e2 <__sflush_r+0x1a>
 801177e:	89a3      	ldrh	r3, [r4, #12]
 8011780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011784:	81a3      	strh	r3, [r4, #12]
 8011786:	e7ad      	b.n	80116e4 <__sflush_r+0x1c>
 8011788:	690f      	ldr	r7, [r1, #16]
 801178a:	2f00      	cmp	r7, #0
 801178c:	d0a9      	beq.n	80116e2 <__sflush_r+0x1a>
 801178e:	0793      	lsls	r3, r2, #30
 8011790:	680e      	ldr	r6, [r1, #0]
 8011792:	bf08      	it	eq
 8011794:	694b      	ldreq	r3, [r1, #20]
 8011796:	600f      	str	r7, [r1, #0]
 8011798:	bf18      	it	ne
 801179a:	2300      	movne	r3, #0
 801179c:	eba6 0807 	sub.w	r8, r6, r7
 80117a0:	608b      	str	r3, [r1, #8]
 80117a2:	f1b8 0f00 	cmp.w	r8, #0
 80117a6:	dd9c      	ble.n	80116e2 <__sflush_r+0x1a>
 80117a8:	6a21      	ldr	r1, [r4, #32]
 80117aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80117ac:	4643      	mov	r3, r8
 80117ae:	463a      	mov	r2, r7
 80117b0:	4628      	mov	r0, r5
 80117b2:	47b0      	blx	r6
 80117b4:	2800      	cmp	r0, #0
 80117b6:	dc06      	bgt.n	80117c6 <__sflush_r+0xfe>
 80117b8:	89a3      	ldrh	r3, [r4, #12]
 80117ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117be:	81a3      	strh	r3, [r4, #12]
 80117c0:	f04f 30ff 	mov.w	r0, #4294967295
 80117c4:	e78e      	b.n	80116e4 <__sflush_r+0x1c>
 80117c6:	4407      	add	r7, r0
 80117c8:	eba8 0800 	sub.w	r8, r8, r0
 80117cc:	e7e9      	b.n	80117a2 <__sflush_r+0xda>
 80117ce:	bf00      	nop
 80117d0:	20400001 	.word	0x20400001

080117d4 <_fflush_r>:
 80117d4:	b538      	push	{r3, r4, r5, lr}
 80117d6:	690b      	ldr	r3, [r1, #16]
 80117d8:	4605      	mov	r5, r0
 80117da:	460c      	mov	r4, r1
 80117dc:	b913      	cbnz	r3, 80117e4 <_fflush_r+0x10>
 80117de:	2500      	movs	r5, #0
 80117e0:	4628      	mov	r0, r5
 80117e2:	bd38      	pop	{r3, r4, r5, pc}
 80117e4:	b118      	cbz	r0, 80117ee <_fflush_r+0x1a>
 80117e6:	6983      	ldr	r3, [r0, #24]
 80117e8:	b90b      	cbnz	r3, 80117ee <_fflush_r+0x1a>
 80117ea:	f000 f887 	bl	80118fc <__sinit>
 80117ee:	4b14      	ldr	r3, [pc, #80]	; (8011840 <_fflush_r+0x6c>)
 80117f0:	429c      	cmp	r4, r3
 80117f2:	d11b      	bne.n	801182c <_fflush_r+0x58>
 80117f4:	686c      	ldr	r4, [r5, #4]
 80117f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d0ef      	beq.n	80117de <_fflush_r+0xa>
 80117fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011800:	07d0      	lsls	r0, r2, #31
 8011802:	d404      	bmi.n	801180e <_fflush_r+0x3a>
 8011804:	0599      	lsls	r1, r3, #22
 8011806:	d402      	bmi.n	801180e <_fflush_r+0x3a>
 8011808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801180a:	f7ff fd1a 	bl	8011242 <__retarget_lock_acquire_recursive>
 801180e:	4628      	mov	r0, r5
 8011810:	4621      	mov	r1, r4
 8011812:	f7ff ff59 	bl	80116c8 <__sflush_r>
 8011816:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011818:	07da      	lsls	r2, r3, #31
 801181a:	4605      	mov	r5, r0
 801181c:	d4e0      	bmi.n	80117e0 <_fflush_r+0xc>
 801181e:	89a3      	ldrh	r3, [r4, #12]
 8011820:	059b      	lsls	r3, r3, #22
 8011822:	d4dd      	bmi.n	80117e0 <_fflush_r+0xc>
 8011824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011826:	f7ff fd0d 	bl	8011244 <__retarget_lock_release_recursive>
 801182a:	e7d9      	b.n	80117e0 <_fflush_r+0xc>
 801182c:	4b05      	ldr	r3, [pc, #20]	; (8011844 <_fflush_r+0x70>)
 801182e:	429c      	cmp	r4, r3
 8011830:	d101      	bne.n	8011836 <_fflush_r+0x62>
 8011832:	68ac      	ldr	r4, [r5, #8]
 8011834:	e7df      	b.n	80117f6 <_fflush_r+0x22>
 8011836:	4b04      	ldr	r3, [pc, #16]	; (8011848 <_fflush_r+0x74>)
 8011838:	429c      	cmp	r4, r3
 801183a:	bf08      	it	eq
 801183c:	68ec      	ldreq	r4, [r5, #12]
 801183e:	e7da      	b.n	80117f6 <_fflush_r+0x22>
 8011840:	0801232c 	.word	0x0801232c
 8011844:	0801234c 	.word	0x0801234c
 8011848:	0801230c 	.word	0x0801230c

0801184c <std>:
 801184c:	2300      	movs	r3, #0
 801184e:	b510      	push	{r4, lr}
 8011850:	4604      	mov	r4, r0
 8011852:	e9c0 3300 	strd	r3, r3, [r0]
 8011856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801185a:	6083      	str	r3, [r0, #8]
 801185c:	8181      	strh	r1, [r0, #12]
 801185e:	6643      	str	r3, [r0, #100]	; 0x64
 8011860:	81c2      	strh	r2, [r0, #14]
 8011862:	6183      	str	r3, [r0, #24]
 8011864:	4619      	mov	r1, r3
 8011866:	2208      	movs	r2, #8
 8011868:	305c      	adds	r0, #92	; 0x5c
 801186a:	f7fd fcb5 	bl	800f1d8 <memset>
 801186e:	4b05      	ldr	r3, [pc, #20]	; (8011884 <std+0x38>)
 8011870:	6263      	str	r3, [r4, #36]	; 0x24
 8011872:	4b05      	ldr	r3, [pc, #20]	; (8011888 <std+0x3c>)
 8011874:	62a3      	str	r3, [r4, #40]	; 0x28
 8011876:	4b05      	ldr	r3, [pc, #20]	; (801188c <std+0x40>)
 8011878:	62e3      	str	r3, [r4, #44]	; 0x2c
 801187a:	4b05      	ldr	r3, [pc, #20]	; (8011890 <std+0x44>)
 801187c:	6224      	str	r4, [r4, #32]
 801187e:	6323      	str	r3, [r4, #48]	; 0x30
 8011880:	bd10      	pop	{r4, pc}
 8011882:	bf00      	nop
 8011884:	08011b01 	.word	0x08011b01
 8011888:	08011b23 	.word	0x08011b23
 801188c:	08011b5b 	.word	0x08011b5b
 8011890:	08011b7f 	.word	0x08011b7f

08011894 <_cleanup_r>:
 8011894:	4901      	ldr	r1, [pc, #4]	; (801189c <_cleanup_r+0x8>)
 8011896:	f000 b8af 	b.w	80119f8 <_fwalk_reent>
 801189a:	bf00      	nop
 801189c:	080117d5 	.word	0x080117d5

080118a0 <__sfmoreglue>:
 80118a0:	b570      	push	{r4, r5, r6, lr}
 80118a2:	2268      	movs	r2, #104	; 0x68
 80118a4:	1e4d      	subs	r5, r1, #1
 80118a6:	4355      	muls	r5, r2
 80118a8:	460e      	mov	r6, r1
 80118aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80118ae:	f7fd fd07 	bl	800f2c0 <_malloc_r>
 80118b2:	4604      	mov	r4, r0
 80118b4:	b140      	cbz	r0, 80118c8 <__sfmoreglue+0x28>
 80118b6:	2100      	movs	r1, #0
 80118b8:	e9c0 1600 	strd	r1, r6, [r0]
 80118bc:	300c      	adds	r0, #12
 80118be:	60a0      	str	r0, [r4, #8]
 80118c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80118c4:	f7fd fc88 	bl	800f1d8 <memset>
 80118c8:	4620      	mov	r0, r4
 80118ca:	bd70      	pop	{r4, r5, r6, pc}

080118cc <__sfp_lock_acquire>:
 80118cc:	4801      	ldr	r0, [pc, #4]	; (80118d4 <__sfp_lock_acquire+0x8>)
 80118ce:	f7ff bcb8 	b.w	8011242 <__retarget_lock_acquire_recursive>
 80118d2:	bf00      	nop
 80118d4:	200016f5 	.word	0x200016f5

080118d8 <__sfp_lock_release>:
 80118d8:	4801      	ldr	r0, [pc, #4]	; (80118e0 <__sfp_lock_release+0x8>)
 80118da:	f7ff bcb3 	b.w	8011244 <__retarget_lock_release_recursive>
 80118de:	bf00      	nop
 80118e0:	200016f5 	.word	0x200016f5

080118e4 <__sinit_lock_acquire>:
 80118e4:	4801      	ldr	r0, [pc, #4]	; (80118ec <__sinit_lock_acquire+0x8>)
 80118e6:	f7ff bcac 	b.w	8011242 <__retarget_lock_acquire_recursive>
 80118ea:	bf00      	nop
 80118ec:	200016f6 	.word	0x200016f6

080118f0 <__sinit_lock_release>:
 80118f0:	4801      	ldr	r0, [pc, #4]	; (80118f8 <__sinit_lock_release+0x8>)
 80118f2:	f7ff bca7 	b.w	8011244 <__retarget_lock_release_recursive>
 80118f6:	bf00      	nop
 80118f8:	200016f6 	.word	0x200016f6

080118fc <__sinit>:
 80118fc:	b510      	push	{r4, lr}
 80118fe:	4604      	mov	r4, r0
 8011900:	f7ff fff0 	bl	80118e4 <__sinit_lock_acquire>
 8011904:	69a3      	ldr	r3, [r4, #24]
 8011906:	b11b      	cbz	r3, 8011910 <__sinit+0x14>
 8011908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801190c:	f7ff bff0 	b.w	80118f0 <__sinit_lock_release>
 8011910:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011914:	6523      	str	r3, [r4, #80]	; 0x50
 8011916:	4b13      	ldr	r3, [pc, #76]	; (8011964 <__sinit+0x68>)
 8011918:	4a13      	ldr	r2, [pc, #76]	; (8011968 <__sinit+0x6c>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	62a2      	str	r2, [r4, #40]	; 0x28
 801191e:	42a3      	cmp	r3, r4
 8011920:	bf04      	itt	eq
 8011922:	2301      	moveq	r3, #1
 8011924:	61a3      	streq	r3, [r4, #24]
 8011926:	4620      	mov	r0, r4
 8011928:	f000 f820 	bl	801196c <__sfp>
 801192c:	6060      	str	r0, [r4, #4]
 801192e:	4620      	mov	r0, r4
 8011930:	f000 f81c 	bl	801196c <__sfp>
 8011934:	60a0      	str	r0, [r4, #8]
 8011936:	4620      	mov	r0, r4
 8011938:	f000 f818 	bl	801196c <__sfp>
 801193c:	2200      	movs	r2, #0
 801193e:	60e0      	str	r0, [r4, #12]
 8011940:	2104      	movs	r1, #4
 8011942:	6860      	ldr	r0, [r4, #4]
 8011944:	f7ff ff82 	bl	801184c <std>
 8011948:	68a0      	ldr	r0, [r4, #8]
 801194a:	2201      	movs	r2, #1
 801194c:	2109      	movs	r1, #9
 801194e:	f7ff ff7d 	bl	801184c <std>
 8011952:	68e0      	ldr	r0, [r4, #12]
 8011954:	2202      	movs	r2, #2
 8011956:	2112      	movs	r1, #18
 8011958:	f7ff ff78 	bl	801184c <std>
 801195c:	2301      	movs	r3, #1
 801195e:	61a3      	str	r3, [r4, #24]
 8011960:	e7d2      	b.n	8011908 <__sinit+0xc>
 8011962:	bf00      	nop
 8011964:	08011f90 	.word	0x08011f90
 8011968:	08011895 	.word	0x08011895

0801196c <__sfp>:
 801196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801196e:	4607      	mov	r7, r0
 8011970:	f7ff ffac 	bl	80118cc <__sfp_lock_acquire>
 8011974:	4b1e      	ldr	r3, [pc, #120]	; (80119f0 <__sfp+0x84>)
 8011976:	681e      	ldr	r6, [r3, #0]
 8011978:	69b3      	ldr	r3, [r6, #24]
 801197a:	b913      	cbnz	r3, 8011982 <__sfp+0x16>
 801197c:	4630      	mov	r0, r6
 801197e:	f7ff ffbd 	bl	80118fc <__sinit>
 8011982:	3648      	adds	r6, #72	; 0x48
 8011984:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011988:	3b01      	subs	r3, #1
 801198a:	d503      	bpl.n	8011994 <__sfp+0x28>
 801198c:	6833      	ldr	r3, [r6, #0]
 801198e:	b30b      	cbz	r3, 80119d4 <__sfp+0x68>
 8011990:	6836      	ldr	r6, [r6, #0]
 8011992:	e7f7      	b.n	8011984 <__sfp+0x18>
 8011994:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011998:	b9d5      	cbnz	r5, 80119d0 <__sfp+0x64>
 801199a:	4b16      	ldr	r3, [pc, #88]	; (80119f4 <__sfp+0x88>)
 801199c:	60e3      	str	r3, [r4, #12]
 801199e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80119a2:	6665      	str	r5, [r4, #100]	; 0x64
 80119a4:	f7ff fc4c 	bl	8011240 <__retarget_lock_init_recursive>
 80119a8:	f7ff ff96 	bl	80118d8 <__sfp_lock_release>
 80119ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80119b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80119b4:	6025      	str	r5, [r4, #0]
 80119b6:	61a5      	str	r5, [r4, #24]
 80119b8:	2208      	movs	r2, #8
 80119ba:	4629      	mov	r1, r5
 80119bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80119c0:	f7fd fc0a 	bl	800f1d8 <memset>
 80119c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80119c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80119cc:	4620      	mov	r0, r4
 80119ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119d0:	3468      	adds	r4, #104	; 0x68
 80119d2:	e7d9      	b.n	8011988 <__sfp+0x1c>
 80119d4:	2104      	movs	r1, #4
 80119d6:	4638      	mov	r0, r7
 80119d8:	f7ff ff62 	bl	80118a0 <__sfmoreglue>
 80119dc:	4604      	mov	r4, r0
 80119de:	6030      	str	r0, [r6, #0]
 80119e0:	2800      	cmp	r0, #0
 80119e2:	d1d5      	bne.n	8011990 <__sfp+0x24>
 80119e4:	f7ff ff78 	bl	80118d8 <__sfp_lock_release>
 80119e8:	230c      	movs	r3, #12
 80119ea:	603b      	str	r3, [r7, #0]
 80119ec:	e7ee      	b.n	80119cc <__sfp+0x60>
 80119ee:	bf00      	nop
 80119f0:	08011f90 	.word	0x08011f90
 80119f4:	ffff0001 	.word	0xffff0001

080119f8 <_fwalk_reent>:
 80119f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119fc:	4606      	mov	r6, r0
 80119fe:	4688      	mov	r8, r1
 8011a00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011a04:	2700      	movs	r7, #0
 8011a06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a0a:	f1b9 0901 	subs.w	r9, r9, #1
 8011a0e:	d505      	bpl.n	8011a1c <_fwalk_reent+0x24>
 8011a10:	6824      	ldr	r4, [r4, #0]
 8011a12:	2c00      	cmp	r4, #0
 8011a14:	d1f7      	bne.n	8011a06 <_fwalk_reent+0xe>
 8011a16:	4638      	mov	r0, r7
 8011a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a1c:	89ab      	ldrh	r3, [r5, #12]
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	d907      	bls.n	8011a32 <_fwalk_reent+0x3a>
 8011a22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a26:	3301      	adds	r3, #1
 8011a28:	d003      	beq.n	8011a32 <_fwalk_reent+0x3a>
 8011a2a:	4629      	mov	r1, r5
 8011a2c:	4630      	mov	r0, r6
 8011a2e:	47c0      	blx	r8
 8011a30:	4307      	orrs	r7, r0
 8011a32:	3568      	adds	r5, #104	; 0x68
 8011a34:	e7e9      	b.n	8011a0a <_fwalk_reent+0x12>

08011a36 <__swhatbuf_r>:
 8011a36:	b570      	push	{r4, r5, r6, lr}
 8011a38:	460e      	mov	r6, r1
 8011a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a3e:	2900      	cmp	r1, #0
 8011a40:	b096      	sub	sp, #88	; 0x58
 8011a42:	4614      	mov	r4, r2
 8011a44:	461d      	mov	r5, r3
 8011a46:	da08      	bge.n	8011a5a <__swhatbuf_r+0x24>
 8011a48:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	602a      	str	r2, [r5, #0]
 8011a50:	061a      	lsls	r2, r3, #24
 8011a52:	d410      	bmi.n	8011a76 <__swhatbuf_r+0x40>
 8011a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a58:	e00e      	b.n	8011a78 <__swhatbuf_r+0x42>
 8011a5a:	466a      	mov	r2, sp
 8011a5c:	f000 f8b6 	bl	8011bcc <_fstat_r>
 8011a60:	2800      	cmp	r0, #0
 8011a62:	dbf1      	blt.n	8011a48 <__swhatbuf_r+0x12>
 8011a64:	9a01      	ldr	r2, [sp, #4]
 8011a66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011a6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011a6e:	425a      	negs	r2, r3
 8011a70:	415a      	adcs	r2, r3
 8011a72:	602a      	str	r2, [r5, #0]
 8011a74:	e7ee      	b.n	8011a54 <__swhatbuf_r+0x1e>
 8011a76:	2340      	movs	r3, #64	; 0x40
 8011a78:	2000      	movs	r0, #0
 8011a7a:	6023      	str	r3, [r4, #0]
 8011a7c:	b016      	add	sp, #88	; 0x58
 8011a7e:	bd70      	pop	{r4, r5, r6, pc}

08011a80 <__smakebuf_r>:
 8011a80:	898b      	ldrh	r3, [r1, #12]
 8011a82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011a84:	079d      	lsls	r5, r3, #30
 8011a86:	4606      	mov	r6, r0
 8011a88:	460c      	mov	r4, r1
 8011a8a:	d507      	bpl.n	8011a9c <__smakebuf_r+0x1c>
 8011a8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011a90:	6023      	str	r3, [r4, #0]
 8011a92:	6123      	str	r3, [r4, #16]
 8011a94:	2301      	movs	r3, #1
 8011a96:	6163      	str	r3, [r4, #20]
 8011a98:	b002      	add	sp, #8
 8011a9a:	bd70      	pop	{r4, r5, r6, pc}
 8011a9c:	ab01      	add	r3, sp, #4
 8011a9e:	466a      	mov	r2, sp
 8011aa0:	f7ff ffc9 	bl	8011a36 <__swhatbuf_r>
 8011aa4:	9900      	ldr	r1, [sp, #0]
 8011aa6:	4605      	mov	r5, r0
 8011aa8:	4630      	mov	r0, r6
 8011aaa:	f7fd fc09 	bl	800f2c0 <_malloc_r>
 8011aae:	b948      	cbnz	r0, 8011ac4 <__smakebuf_r+0x44>
 8011ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ab4:	059a      	lsls	r2, r3, #22
 8011ab6:	d4ef      	bmi.n	8011a98 <__smakebuf_r+0x18>
 8011ab8:	f023 0303 	bic.w	r3, r3, #3
 8011abc:	f043 0302 	orr.w	r3, r3, #2
 8011ac0:	81a3      	strh	r3, [r4, #12]
 8011ac2:	e7e3      	b.n	8011a8c <__smakebuf_r+0xc>
 8011ac4:	4b0d      	ldr	r3, [pc, #52]	; (8011afc <__smakebuf_r+0x7c>)
 8011ac6:	62b3      	str	r3, [r6, #40]	; 0x28
 8011ac8:	89a3      	ldrh	r3, [r4, #12]
 8011aca:	6020      	str	r0, [r4, #0]
 8011acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ad0:	81a3      	strh	r3, [r4, #12]
 8011ad2:	9b00      	ldr	r3, [sp, #0]
 8011ad4:	6163      	str	r3, [r4, #20]
 8011ad6:	9b01      	ldr	r3, [sp, #4]
 8011ad8:	6120      	str	r0, [r4, #16]
 8011ada:	b15b      	cbz	r3, 8011af4 <__smakebuf_r+0x74>
 8011adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ae0:	4630      	mov	r0, r6
 8011ae2:	f000 f885 	bl	8011bf0 <_isatty_r>
 8011ae6:	b128      	cbz	r0, 8011af4 <__smakebuf_r+0x74>
 8011ae8:	89a3      	ldrh	r3, [r4, #12]
 8011aea:	f023 0303 	bic.w	r3, r3, #3
 8011aee:	f043 0301 	orr.w	r3, r3, #1
 8011af2:	81a3      	strh	r3, [r4, #12]
 8011af4:	89a0      	ldrh	r0, [r4, #12]
 8011af6:	4305      	orrs	r5, r0
 8011af8:	81a5      	strh	r5, [r4, #12]
 8011afa:	e7cd      	b.n	8011a98 <__smakebuf_r+0x18>
 8011afc:	08011895 	.word	0x08011895

08011b00 <__sread>:
 8011b00:	b510      	push	{r4, lr}
 8011b02:	460c      	mov	r4, r1
 8011b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b08:	f000 f894 	bl	8011c34 <_read_r>
 8011b0c:	2800      	cmp	r0, #0
 8011b0e:	bfab      	itete	ge
 8011b10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011b12:	89a3      	ldrhlt	r3, [r4, #12]
 8011b14:	181b      	addge	r3, r3, r0
 8011b16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011b1a:	bfac      	ite	ge
 8011b1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8011b1e:	81a3      	strhlt	r3, [r4, #12]
 8011b20:	bd10      	pop	{r4, pc}

08011b22 <__swrite>:
 8011b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b26:	461f      	mov	r7, r3
 8011b28:	898b      	ldrh	r3, [r1, #12]
 8011b2a:	05db      	lsls	r3, r3, #23
 8011b2c:	4605      	mov	r5, r0
 8011b2e:	460c      	mov	r4, r1
 8011b30:	4616      	mov	r6, r2
 8011b32:	d505      	bpl.n	8011b40 <__swrite+0x1e>
 8011b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b38:	2302      	movs	r3, #2
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	f000 f868 	bl	8011c10 <_lseek_r>
 8011b40:	89a3      	ldrh	r3, [r4, #12]
 8011b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b4a:	81a3      	strh	r3, [r4, #12]
 8011b4c:	4632      	mov	r2, r6
 8011b4e:	463b      	mov	r3, r7
 8011b50:	4628      	mov	r0, r5
 8011b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b56:	f000 b817 	b.w	8011b88 <_write_r>

08011b5a <__sseek>:
 8011b5a:	b510      	push	{r4, lr}
 8011b5c:	460c      	mov	r4, r1
 8011b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b62:	f000 f855 	bl	8011c10 <_lseek_r>
 8011b66:	1c43      	adds	r3, r0, #1
 8011b68:	89a3      	ldrh	r3, [r4, #12]
 8011b6a:	bf15      	itete	ne
 8011b6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8011b6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011b72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011b76:	81a3      	strheq	r3, [r4, #12]
 8011b78:	bf18      	it	ne
 8011b7a:	81a3      	strhne	r3, [r4, #12]
 8011b7c:	bd10      	pop	{r4, pc}

08011b7e <__sclose>:
 8011b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b82:	f000 b813 	b.w	8011bac <_close_r>
	...

08011b88 <_write_r>:
 8011b88:	b538      	push	{r3, r4, r5, lr}
 8011b8a:	4d07      	ldr	r5, [pc, #28]	; (8011ba8 <_write_r+0x20>)
 8011b8c:	4604      	mov	r4, r0
 8011b8e:	4608      	mov	r0, r1
 8011b90:	4611      	mov	r1, r2
 8011b92:	2200      	movs	r2, #0
 8011b94:	602a      	str	r2, [r5, #0]
 8011b96:	461a      	mov	r2, r3
 8011b98:	f7f3 fd39 	bl	800560e <_write>
 8011b9c:	1c43      	adds	r3, r0, #1
 8011b9e:	d102      	bne.n	8011ba6 <_write_r+0x1e>
 8011ba0:	682b      	ldr	r3, [r5, #0]
 8011ba2:	b103      	cbz	r3, 8011ba6 <_write_r+0x1e>
 8011ba4:	6023      	str	r3, [r4, #0]
 8011ba6:	bd38      	pop	{r3, r4, r5, pc}
 8011ba8:	200016f0 	.word	0x200016f0

08011bac <_close_r>:
 8011bac:	b538      	push	{r3, r4, r5, lr}
 8011bae:	4d06      	ldr	r5, [pc, #24]	; (8011bc8 <_close_r+0x1c>)
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	4604      	mov	r4, r0
 8011bb4:	4608      	mov	r0, r1
 8011bb6:	602b      	str	r3, [r5, #0]
 8011bb8:	f7f3 fd45 	bl	8005646 <_close>
 8011bbc:	1c43      	adds	r3, r0, #1
 8011bbe:	d102      	bne.n	8011bc6 <_close_r+0x1a>
 8011bc0:	682b      	ldr	r3, [r5, #0]
 8011bc2:	b103      	cbz	r3, 8011bc6 <_close_r+0x1a>
 8011bc4:	6023      	str	r3, [r4, #0]
 8011bc6:	bd38      	pop	{r3, r4, r5, pc}
 8011bc8:	200016f0 	.word	0x200016f0

08011bcc <_fstat_r>:
 8011bcc:	b538      	push	{r3, r4, r5, lr}
 8011bce:	4d07      	ldr	r5, [pc, #28]	; (8011bec <_fstat_r+0x20>)
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	4604      	mov	r4, r0
 8011bd4:	4608      	mov	r0, r1
 8011bd6:	4611      	mov	r1, r2
 8011bd8:	602b      	str	r3, [r5, #0]
 8011bda:	f7f3 fd40 	bl	800565e <_fstat>
 8011bde:	1c43      	adds	r3, r0, #1
 8011be0:	d102      	bne.n	8011be8 <_fstat_r+0x1c>
 8011be2:	682b      	ldr	r3, [r5, #0]
 8011be4:	b103      	cbz	r3, 8011be8 <_fstat_r+0x1c>
 8011be6:	6023      	str	r3, [r4, #0]
 8011be8:	bd38      	pop	{r3, r4, r5, pc}
 8011bea:	bf00      	nop
 8011bec:	200016f0 	.word	0x200016f0

08011bf0 <_isatty_r>:
 8011bf0:	b538      	push	{r3, r4, r5, lr}
 8011bf2:	4d06      	ldr	r5, [pc, #24]	; (8011c0c <_isatty_r+0x1c>)
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	4608      	mov	r0, r1
 8011bfa:	602b      	str	r3, [r5, #0]
 8011bfc:	f7f3 fd3f 	bl	800567e <_isatty>
 8011c00:	1c43      	adds	r3, r0, #1
 8011c02:	d102      	bne.n	8011c0a <_isatty_r+0x1a>
 8011c04:	682b      	ldr	r3, [r5, #0]
 8011c06:	b103      	cbz	r3, 8011c0a <_isatty_r+0x1a>
 8011c08:	6023      	str	r3, [r4, #0]
 8011c0a:	bd38      	pop	{r3, r4, r5, pc}
 8011c0c:	200016f0 	.word	0x200016f0

08011c10 <_lseek_r>:
 8011c10:	b538      	push	{r3, r4, r5, lr}
 8011c12:	4d07      	ldr	r5, [pc, #28]	; (8011c30 <_lseek_r+0x20>)
 8011c14:	4604      	mov	r4, r0
 8011c16:	4608      	mov	r0, r1
 8011c18:	4611      	mov	r1, r2
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	602a      	str	r2, [r5, #0]
 8011c1e:	461a      	mov	r2, r3
 8011c20:	f7f3 fd38 	bl	8005694 <_lseek>
 8011c24:	1c43      	adds	r3, r0, #1
 8011c26:	d102      	bne.n	8011c2e <_lseek_r+0x1e>
 8011c28:	682b      	ldr	r3, [r5, #0]
 8011c2a:	b103      	cbz	r3, 8011c2e <_lseek_r+0x1e>
 8011c2c:	6023      	str	r3, [r4, #0]
 8011c2e:	bd38      	pop	{r3, r4, r5, pc}
 8011c30:	200016f0 	.word	0x200016f0

08011c34 <_read_r>:
 8011c34:	b538      	push	{r3, r4, r5, lr}
 8011c36:	4d07      	ldr	r5, [pc, #28]	; (8011c54 <_read_r+0x20>)
 8011c38:	4604      	mov	r4, r0
 8011c3a:	4608      	mov	r0, r1
 8011c3c:	4611      	mov	r1, r2
 8011c3e:	2200      	movs	r2, #0
 8011c40:	602a      	str	r2, [r5, #0]
 8011c42:	461a      	mov	r2, r3
 8011c44:	f7f3 fcc6 	bl	80055d4 <_read>
 8011c48:	1c43      	adds	r3, r0, #1
 8011c4a:	d102      	bne.n	8011c52 <_read_r+0x1e>
 8011c4c:	682b      	ldr	r3, [r5, #0]
 8011c4e:	b103      	cbz	r3, 8011c52 <_read_r+0x1e>
 8011c50:	6023      	str	r3, [r4, #0]
 8011c52:	bd38      	pop	{r3, r4, r5, pc}
 8011c54:	200016f0 	.word	0x200016f0

08011c58 <_init>:
 8011c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c5a:	bf00      	nop
 8011c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c5e:	bc08      	pop	{r3}
 8011c60:	469e      	mov	lr, r3
 8011c62:	4770      	bx	lr

08011c64 <_fini>:
 8011c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c66:	bf00      	nop
 8011c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c6a:	bc08      	pop	{r3}
 8011c6c:	469e      	mov	lr, r3
 8011c6e:	4770      	bx	lr
