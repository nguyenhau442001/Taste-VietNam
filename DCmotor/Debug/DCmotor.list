
DCmotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  08011c30  08011c30  00021c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012334  08012334  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  08012334  08012334  00022334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801233c  0801233c  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801233c  0801233c  0002233c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012344  08012344  00022344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08012348  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c08  20000218  08012560  00030218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001e20  08012560  00031e20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ad85  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005597  00000000  00000000  0005afcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d48  00000000  00000000  00060568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ba0  00000000  00000000  000622b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc61  00000000  00000000  00063e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025a45  00000000  00000000  00081ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a15e6  00000000  00000000  000a74f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148adc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f80  00000000  00000000  00148b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011c14 	.word	0x08011c14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08011c14 	.word	0x08011c14

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <HAL_GPIO_EXTI_Callback>:
float rpm_left_velocity,rpm_right_velocity,previous_rpm_left_velocity,previous_rpm_right_velocity;
float previous_pos,pos;
float AntiWindupError,ResetError;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
 static unsigned char state0,state1,state2,state3;
 static bool LEFT_ENCODER_A,RIGHT_ENCODER_A, LEFT_ENCODER_B,RIGHT_ENCODER_B;
 /* MOTOR A */
 if (GPIO_Pin == GPIO_PIN_12)
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f6c:	f040 80a1 	bne.w	80010b2 <HAL_GPIO_EXTI_Callback+0x156>
 {
   // chương trình ngắt của chân 12

	 LEFT_ENCODER_A=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12);
 8000f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f74:	4892      	ldr	r0, [pc, #584]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x264>)
 8000f76:	f005 fb2b 	bl	80065d0 <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf14      	ite	ne
 8000f80:	2301      	movne	r3, #1
 8000f82:	2300      	moveq	r3, #0
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b8f      	ldr	r3, [pc, #572]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x268>)
 8000f88:	701a      	strb	r2, [r3, #0]
	 state0=state0|LEFT_ENCODER_A;
 8000f8a:	4b8e      	ldr	r3, [pc, #568]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x268>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b8d      	ldr	r3, [pc, #564]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b8b      	ldr	r3, [pc, #556]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f9a:	701a      	strb	r2, [r3, #0]

	 state0=state0<<1;
 8000f9c:	4b8a      	ldr	r3, [pc, #552]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b88      	ldr	r3, [pc, #544]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fa6:	701a      	strb	r2, [r3, #0]
	 LEFT_ENCODER_B=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13);
 8000fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fac:	4884      	ldr	r0, [pc, #528]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x264>)
 8000fae:	f005 fb0f 	bl	80065d0 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b83      	ldr	r3, [pc, #524]	; (80011cc <HAL_GPIO_EXTI_Callback+0x270>)
 8000fc0:	701a      	strb	r2, [r3, #0]
	 state0=state0|LEFT_ENCODER_B;
 8000fc2:	4b82      	ldr	r3, [pc, #520]	; (80011cc <HAL_GPIO_EXTI_Callback+0x270>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b7f      	ldr	r3, [pc, #508]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b7d      	ldr	r3, [pc, #500]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fd2:	701a      	strb	r2, [r3, #0]
	 state0=state0 & 0x03;
 8000fd4:	4b7c      	ldr	r3, [pc, #496]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b7a      	ldr	r3, [pc, #488]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fe0:	701a      	strb	r2, [r3, #0]

	 switch(state0)
 8000fe2:	4b79      	ldr	r3, [pc, #484]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d85d      	bhi.n	80010a6 <HAL_GPIO_EXTI_Callback+0x14a>
 8000fea:	a201      	add	r2, pc, #4	; (adr r2, 8000ff0 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff0:	08001001 	.word	0x08001001
 8000ff4:	08001027 	.word	0x08001027
 8000ff8:	0800104d 	.word	0x0800104d
 8000ffc:	08001073 	.word	0x08001073
	 {
		 	 	 	 	 case 0:
							 	 if(left_previous==1){left_count++;}
 8001000:	4b73      	ldr	r3, [pc, #460]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d104      	bne.n	8001012 <HAL_GPIO_EXTI_Callback+0xb6>
 8001008:	4b72      	ldr	r3, [pc, #456]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	4a71      	ldr	r2, [pc, #452]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001010:	6013      	str	r3, [r2, #0]
							 	 if(left_previous==2) {left_count--;}
 8001012:	4b6f      	ldr	r3, [pc, #444]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d13e      	bne.n	8001098 <HAL_GPIO_EXTI_Callback+0x13c>
 800101a:	4b6e      	ldr	r3, [pc, #440]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3b01      	subs	r3, #1
 8001020:	4a6c      	ldr	r2, [pc, #432]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001022:	6013      	str	r3, [r2, #0]
							 	 break;
 8001024:	e038      	b.n	8001098 <HAL_GPIO_EXTI_Callback+0x13c>
		 	 	 	 	 case 1:
		 	 	 	 		 	 if(left_previous==3){left_count++;}
 8001026:	4b6a      	ldr	r3, [pc, #424]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d104      	bne.n	8001038 <HAL_GPIO_EXTI_Callback+0xdc>
 800102e:	4b69      	ldr	r3, [pc, #420]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	4a67      	ldr	r2, [pc, #412]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001036:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==0){left_count--;}
 8001038:	4b65      	ldr	r3, [pc, #404]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d12d      	bne.n	800109c <HAL_GPIO_EXTI_Callback+0x140>
 8001040:	4b64      	ldr	r3, [pc, #400]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3b01      	subs	r3, #1
 8001046:	4a63      	ldr	r2, [pc, #396]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001048:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 800104a:	e027      	b.n	800109c <HAL_GPIO_EXTI_Callback+0x140>
		 	 	 	 	 case 2:
		 	 	 	 		 	 if(left_previous==0){left_count++;}
 800104c:	4b60      	ldr	r3, [pc, #384]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d104      	bne.n	800105e <HAL_GPIO_EXTI_Callback+0x102>
 8001054:	4b5f      	ldr	r3, [pc, #380]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a5e      	ldr	r2, [pc, #376]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800105c:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==3) {left_count--;}
 800105e:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d11c      	bne.n	80010a0 <HAL_GPIO_EXTI_Callback+0x144>
 8001066:	4b5b      	ldr	r3, [pc, #364]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	3b01      	subs	r3, #1
 800106c:	4a59      	ldr	r2, [pc, #356]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800106e:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001070:	e016      	b.n	80010a0 <HAL_GPIO_EXTI_Callback+0x144>
		 	 	 	 	 case 3:
		 	 	 	 		 	 if(left_previous==2){left_count++;}
 8001072:	4b57      	ldr	r3, [pc, #348]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d104      	bne.n	8001084 <HAL_GPIO_EXTI_Callback+0x128>
 800107a:	4b56      	ldr	r3, [pc, #344]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a54      	ldr	r2, [pc, #336]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001082:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==1) {left_count--;}
 8001084:	4b52      	ldr	r3, [pc, #328]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d10b      	bne.n	80010a4 <HAL_GPIO_EXTI_Callback+0x148>
 800108c:	4b51      	ldr	r3, [pc, #324]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	3b01      	subs	r3, #1
 8001092:	4a50      	ldr	r2, [pc, #320]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001094:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001096:	e005      	b.n	80010a4 <HAL_GPIO_EXTI_Callback+0x148>
							 	 break;
 8001098:	bf00      	nop
 800109a:	e004      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x14a>
		 	 	 	 		 	 break;
 800109c:	bf00      	nop
 800109e:	e002      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x14a>
		 	 	 	 		 	 break;
 80010a0:	bf00      	nop
 80010a2:	e000      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x14a>
		 	 	 	 		 	 break;
 80010a4:	bf00      	nop
	 }
	 left_previous=state0;
 80010a6:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b48      	ldr	r3, [pc, #288]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 80010ae:	601a      	str	r2, [r3, #0]
		 	 	 	 		 	 if(right_previous==1) {right_count--;}
		 	 	 	 		 	 break;
		 }
		 right_previous=state3;
	 }
}
 80010b0:	e215      	b.n	80014de <HAL_GPIO_EXTI_Callback+0x582>
	 else if (GPIO_Pin == GPIO_PIN_13)
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010b8:	f040 80b0 	bne.w	800121c <HAL_GPIO_EXTI_Callback+0x2c0>
		 LEFT_ENCODER_A=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12);
 80010bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c0:	483f      	ldr	r0, [pc, #252]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x264>)
 80010c2:	f005 fa85 	bl	80065d0 <HAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf14      	ite	ne
 80010cc:	2301      	movne	r3, #1
 80010ce:	2300      	moveq	r3, #0
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x268>)
 80010d4:	701a      	strb	r2, [r3, #0]
		 state1=state1|LEFT_ENCODER_A;
 80010d6:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x268>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b3c      	ldr	r3, [pc, #240]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010e6:	701a      	strb	r2, [r3, #0]
		 state1=state1<<1;
 80010e8:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010f2:	701a      	strb	r2, [r3, #0]
		 LEFT_ENCODER_B=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13);
 80010f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f8:	4831      	ldr	r0, [pc, #196]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x264>)
 80010fa:	f005 fa69 	bl	80065d0 <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf14      	ite	ne
 8001104:	2301      	movne	r3, #1
 8001106:	2300      	moveq	r3, #0
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_GPIO_EXTI_Callback+0x270>)
 800110c:	701a      	strb	r2, [r3, #0]
		 state1=state1|LEFT_ENCODER_B;
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_GPIO_EXTI_Callback+0x270>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4313      	orrs	r3, r2
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 800111e:	701a      	strb	r2, [r3, #0]
		 state1=state1 & 0x03;
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 800112c:	701a      	strb	r2, [r3, #0]
		 switch(state1)
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d86c      	bhi.n	8001210 <HAL_GPIO_EXTI_Callback+0x2b4>
 8001136:	a201      	add	r2, pc, #4	; (adr r2, 800113c <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113c:	0800114d 	.word	0x0800114d
 8001140:	08001173 	.word	0x08001173
 8001144:	08001199 	.word	0x08001199
 8001148:	080011dd 	.word	0x080011dd
							 	 if(left_previous==1){left_count++;}
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d104      	bne.n	800115e <HAL_GPIO_EXTI_Callback+0x202>
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800115c:	6013      	str	r3, [r2, #0]
							 	 if(left_previous==2) {left_count--;}
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d14d      	bne.n	8001202 <HAL_GPIO_EXTI_Callback+0x2a6>
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3b01      	subs	r3, #1
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800116e:	6013      	str	r3, [r2, #0]
							 	 break;
 8001170:	e047      	b.n	8001202 <HAL_GPIO_EXTI_Callback+0x2a6>
		 	 	 	 		 	 if(left_previous==3){left_count++;}
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d104      	bne.n	8001184 <HAL_GPIO_EXTI_Callback+0x228>
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001182:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==0){left_count--;}
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d13c      	bne.n	8001206 <HAL_GPIO_EXTI_Callback+0x2aa>
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3b01      	subs	r3, #1
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001194:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001196:	e036      	b.n	8001206 <HAL_GPIO_EXTI_Callback+0x2aa>
		 	 	 	 		 	 if(left_previous==0){left_count++;}
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d104      	bne.n	80011aa <HAL_GPIO_EXTI_Callback+0x24e>
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80011a8:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==3) {left_count--;}
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d12b      	bne.n	800120a <HAL_GPIO_EXTI_Callback+0x2ae>
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80011ba:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 80011bc:	e025      	b.n	800120a <HAL_GPIO_EXTI_Callback+0x2ae>
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
 80011c4:	20000234 	.word	0x20000234
 80011c8:	20000235 	.word	0x20000235
 80011cc:	20000236 	.word	0x20000236
 80011d0:	200016ec 	.word	0x200016ec
 80011d4:	2000173c 	.word	0x2000173c
 80011d8:	20000237 	.word	0x20000237
		 	 	 	 		 	 if(left_previous==2){left_count++;}
 80011dc:	4b93      	ldr	r3, [pc, #588]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d104      	bne.n	80011ee <HAL_GPIO_EXTI_Callback+0x292>
 80011e4:	4b92      	ldr	r3, [pc, #584]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a91      	ldr	r2, [pc, #580]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80011ec:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==1) {left_count--;}
 80011ee:	4b8f      	ldr	r3, [pc, #572]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d10b      	bne.n	800120e <HAL_GPIO_EXTI_Callback+0x2b2>
 80011f6:	4b8e      	ldr	r3, [pc, #568]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	4a8c      	ldr	r2, [pc, #560]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80011fe:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001200:	e005      	b.n	800120e <HAL_GPIO_EXTI_Callback+0x2b2>
							 	 break;
 8001202:	bf00      	nop
 8001204:	e004      	b.n	8001210 <HAL_GPIO_EXTI_Callback+0x2b4>
		 	 	 	 		 	 break;
 8001206:	bf00      	nop
 8001208:	e002      	b.n	8001210 <HAL_GPIO_EXTI_Callback+0x2b4>
		 	 	 	 		 	 break;
 800120a:	bf00      	nop
 800120c:	e000      	b.n	8001210 <HAL_GPIO_EXTI_Callback+0x2b4>
		 	 	 	 		 	 break;
 800120e:	bf00      	nop
		 left_previous=state1;
 8001210:	4b88      	ldr	r3, [pc, #544]	; (8001434 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b85      	ldr	r3, [pc, #532]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 8001218:	601a      	str	r2, [r3, #0]
}
 800121a:	e160      	b.n	80014de <HAL_GPIO_EXTI_Callback+0x582>
	 else if (GPIO_Pin == GPIO_PIN_10)		 // LEFT CHANNEL B
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001222:	f040 80a2 	bne.w	800136a <HAL_GPIO_EXTI_Callback+0x40e>
		 RIGHT_ENCODER_A=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10);
 8001226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122a:	4883      	ldr	r0, [pc, #524]	; (8001438 <HAL_GPIO_EXTI_Callback+0x4dc>)
 800122c:	f005 f9d0 	bl	80065d0 <HAL_GPIO_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b7f      	ldr	r3, [pc, #508]	; (800143c <HAL_GPIO_EXTI_Callback+0x4e0>)
 800123e:	701a      	strb	r2, [r3, #0]
		 state2=state2|RIGHT_ENCODER_A;
 8001240:	4b7e      	ldr	r3, [pc, #504]	; (800143c <HAL_GPIO_EXTI_Callback+0x4e0>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b7e      	ldr	r3, [pc, #504]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4313      	orrs	r3, r2
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b7c      	ldr	r3, [pc, #496]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001250:	701a      	strb	r2, [r3, #0]
		 state2=state2<<1;
 8001252:	4b7b      	ldr	r3, [pc, #492]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b79      	ldr	r3, [pc, #484]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800125c:	701a      	strb	r2, [r3, #0]
		 RIGHT_ENCODER_B=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_11);
 800125e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001262:	4875      	ldr	r0, [pc, #468]	; (8001438 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001264:	f005 f9b4 	bl	80065d0 <HAL_GPIO_ReadPin>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf14      	ite	ne
 800126e:	2301      	movne	r3, #1
 8001270:	2300      	moveq	r3, #0
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b73      	ldr	r3, [pc, #460]	; (8001444 <HAL_GPIO_EXTI_Callback+0x4e8>)
 8001276:	701a      	strb	r2, [r3, #0]
		 state2=state2|RIGHT_ENCODER_B;
 8001278:	4b72      	ldr	r3, [pc, #456]	; (8001444 <HAL_GPIO_EXTI_Callback+0x4e8>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b70      	ldr	r3, [pc, #448]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b6e      	ldr	r3, [pc, #440]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001288:	701a      	strb	r2, [r3, #0]
		 state2=state2 & 0x03;
 800128a:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b6a      	ldr	r3, [pc, #424]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001296:	701a      	strb	r2, [r3, #0]
		 switch(state2)
 8001298:	4b69      	ldr	r3, [pc, #420]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d85e      	bhi.n	800135e <HAL_GPIO_EXTI_Callback+0x402>
 80012a0:	a201      	add	r2, pc, #4	; (adr r2, 80012a8 <HAL_GPIO_EXTI_Callback+0x34c>)
 80012a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a6:	bf00      	nop
 80012a8:	080012b9 	.word	0x080012b9
 80012ac:	080012df 	.word	0x080012df
 80012b0:	08001305 	.word	0x08001305
 80012b4:	0800132b 	.word	0x0800132b
				 if(right_previous==1){right_count++;}
 80012b8:	4b63      	ldr	r3, [pc, #396]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d104      	bne.n	80012ca <HAL_GPIO_EXTI_Callback+0x36e>
 80012c0:	4b62      	ldr	r3, [pc, #392]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a61      	ldr	r2, [pc, #388]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012c8:	6013      	str	r3, [r2, #0]
				 if(right_previous==2){right_count--;}
 80012ca:	4b5f      	ldr	r3, [pc, #380]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d13e      	bne.n	8001350 <HAL_GPIO_EXTI_Callback+0x3f4>
 80012d2:	4b5e      	ldr	r3, [pc, #376]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	4a5c      	ldr	r2, [pc, #368]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012da:	6013      	str	r3, [r2, #0]
				 break;
 80012dc:	e038      	b.n	8001350 <HAL_GPIO_EXTI_Callback+0x3f4>
	 	 		 	 if(right_previous==3){right_count++;}
 80012de:	4b5a      	ldr	r3, [pc, #360]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d104      	bne.n	80012f0 <HAL_GPIO_EXTI_Callback+0x394>
 80012e6:	4b59      	ldr	r3, [pc, #356]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	4a57      	ldr	r2, [pc, #348]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012ee:	6013      	str	r3, [r2, #0]
	 	 		 	 if(right_previous==0){right_count--;}
 80012f0:	4b55      	ldr	r3, [pc, #340]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d12d      	bne.n	8001354 <HAL_GPIO_EXTI_Callback+0x3f8>
 80012f8:	4b54      	ldr	r3, [pc, #336]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	4a53      	ldr	r2, [pc, #332]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001300:	6013      	str	r3, [r2, #0]
	 	 		 	 break;
 8001302:	e027      	b.n	8001354 <HAL_GPIO_EXTI_Callback+0x3f8>
	 	 		 	 if(right_previous==0){right_count++;}
 8001304:	4b50      	ldr	r3, [pc, #320]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d104      	bne.n	8001316 <HAL_GPIO_EXTI_Callback+0x3ba>
 800130c:	4b4f      	ldr	r3, [pc, #316]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	4a4e      	ldr	r2, [pc, #312]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001314:	6013      	str	r3, [r2, #0]
	 	 		 	 if(right_previous==3) {right_count--;}
 8001316:	4b4c      	ldr	r3, [pc, #304]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d11c      	bne.n	8001358 <HAL_GPIO_EXTI_Callback+0x3fc>
 800131e:	4b4b      	ldr	r3, [pc, #300]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3b01      	subs	r3, #1
 8001324:	4a49      	ldr	r2, [pc, #292]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001326:	6013      	str	r3, [r2, #0]
	 	 		 	 break;
 8001328:	e016      	b.n	8001358 <HAL_GPIO_EXTI_Callback+0x3fc>
	 	 		 	 if(right_previous==2){right_count++;}
 800132a:	4b47      	ldr	r3, [pc, #284]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d104      	bne.n	800133c <HAL_GPIO_EXTI_Callback+0x3e0>
 8001332:	4b46      	ldr	r3, [pc, #280]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	4a44      	ldr	r2, [pc, #272]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800133a:	6013      	str	r3, [r2, #0]
	 	 		 	 if(right_previous==1) {right_count--;}
 800133c:	4b42      	ldr	r3, [pc, #264]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d10b      	bne.n	800135c <HAL_GPIO_EXTI_Callback+0x400>
 8001344:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3b01      	subs	r3, #1
 800134a:	4a40      	ldr	r2, [pc, #256]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800134c:	6013      	str	r3, [r2, #0]
	 	 		 	 break;
 800134e:	e005      	b.n	800135c <HAL_GPIO_EXTI_Callback+0x400>
				 break;
 8001350:	bf00      	nop
 8001352:	e004      	b.n	800135e <HAL_GPIO_EXTI_Callback+0x402>
	 	 		 	 break;
 8001354:	bf00      	nop
 8001356:	e002      	b.n	800135e <HAL_GPIO_EXTI_Callback+0x402>
	 	 		 	 break;
 8001358:	bf00      	nop
 800135a:	e000      	b.n	800135e <HAL_GPIO_EXTI_Callback+0x402>
	 	 		 	 break;
 800135c:	bf00      	nop
		 right_previous=state2;
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	e0b9      	b.n	80014de <HAL_GPIO_EXTI_Callback+0x582>
	 else if (GPIO_Pin == GPIO_PIN_11)
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001370:	f040 80b5 	bne.w	80014de <HAL_GPIO_EXTI_Callback+0x582>
		 RIGHT_ENCODER_A=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10);
 8001374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001378:	482f      	ldr	r0, [pc, #188]	; (8001438 <HAL_GPIO_EXTI_Callback+0x4dc>)
 800137a:	f005 f929 	bl	80065d0 <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf14      	ite	ne
 8001384:	2301      	movne	r3, #1
 8001386:	2300      	moveq	r3, #0
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <HAL_GPIO_EXTI_Callback+0x4e0>)
 800138c:	701a      	strb	r2, [r3, #0]
		 state3=state3|RIGHT_ENCODER_A;
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <HAL_GPIO_EXTI_Callback+0x4e0>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4313      	orrs	r3, r2
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 800139e:	701a      	strb	r2, [r3, #0]
		 state3=state3<<1;
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013aa:	701a      	strb	r2, [r3, #0]
		 RIGHT_ENCODER_B=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_11);
 80013ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b0:	4821      	ldr	r0, [pc, #132]	; (8001438 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80013b2:	f005 f90d 	bl	80065d0 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	bf14      	ite	ne
 80013bc:	2301      	movne	r3, #1
 80013be:	2300      	moveq	r3, #0
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_GPIO_EXTI_Callback+0x4e8>)
 80013c4:	701a      	strb	r2, [r3, #0]
		 state3=state3|RIGHT_ENCODER_B;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <HAL_GPIO_EXTI_Callback+0x4e8>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013d6:	701a      	strb	r2, [r3, #0]
		 state3=state3 & 0x03;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013e4:	701a      	strb	r2, [r3, #0]
		 switch(state3)
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d872      	bhi.n	80014d4 <HAL_GPIO_EXTI_Callback+0x578>
 80013ee:	a201      	add	r2, pc, #4	; (adr r2, 80013f4 <HAL_GPIO_EXTI_Callback+0x498>)
 80013f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f4:	08001405 	.word	0x08001405
 80013f8:	08001455 	.word	0x08001455
 80013fc:	0800147b 	.word	0x0800147b
 8001400:	080014a1 	.word	0x080014a1
								 if(right_previous==1){right_count++;}
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d104      	bne.n	8001416 <HAL_GPIO_EXTI_Callback+0x4ba>
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001414:	6013      	str	r3, [r2, #0]
								 if(right_previous==2){right_count--;}
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d153      	bne.n	80014c6 <HAL_GPIO_EXTI_Callback+0x56a>
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3b01      	subs	r3, #1
 8001424:	4a09      	ldr	r2, [pc, #36]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001426:	6013      	str	r3, [r2, #0]
								 break;
 8001428:	e04d      	b.n	80014c6 <HAL_GPIO_EXTI_Callback+0x56a>
 800142a:	bf00      	nop
 800142c:	200016ec 	.word	0x200016ec
 8001430:	2000173c 	.word	0x2000173c
 8001434:	20000237 	.word	0x20000237
 8001438:	40021000 	.word	0x40021000
 800143c:	20000238 	.word	0x20000238
 8001440:	20000239 	.word	0x20000239
 8001444:	2000023a 	.word	0x2000023a
 8001448:	20001730 	.word	0x20001730
 800144c:	200016f4 	.word	0x200016f4
 8001450:	2000023b 	.word	0x2000023b
		 	 	 	 		 	 if(right_previous==3){right_count++;}
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d104      	bne.n	8001466 <HAL_GPIO_EXTI_Callback+0x50a>
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	4a22      	ldr	r2, [pc, #136]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 8001464:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(right_previous==0){right_count--;}
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d12d      	bne.n	80014ca <HAL_GPIO_EXTI_Callback+0x56e>
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3b01      	subs	r3, #1
 8001474:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 8001476:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001478:	e027      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0x56e>
		 	 	 	 		 	 if(right_previous==0){right_count++;}
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d104      	bne.n	800148c <HAL_GPIO_EXTI_Callback+0x530>
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	4a18      	ldr	r2, [pc, #96]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 800148a:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(right_previous==3) {right_count--;}
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b03      	cmp	r3, #3
 8001492:	d11c      	bne.n	80014ce <HAL_GPIO_EXTI_Callback+0x572>
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 800149c:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 800149e:	e016      	b.n	80014ce <HAL_GPIO_EXTI_Callback+0x572>
		 	 	 	 		 	 if(right_previous==2){right_count++;}
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d104      	bne.n	80014b2 <HAL_GPIO_EXTI_Callback+0x556>
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 80014b0:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(right_previous==1) {right_count--;}
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d10b      	bne.n	80014d2 <HAL_GPIO_EXTI_Callback+0x576>
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3b01      	subs	r3, #1
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 80014c2:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 80014c4:	e005      	b.n	80014d2 <HAL_GPIO_EXTI_Callback+0x576>
								 break;
 80014c6:	bf00      	nop
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_EXTI_Callback+0x578>
		 	 	 	 		 	 break;
 80014ca:	bf00      	nop
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_EXTI_Callback+0x578>
		 	 	 	 		 	 break;
 80014ce:	bf00      	nop
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_EXTI_Callback+0x578>
		 	 	 	 		 	 break;
 80014d2:	bf00      	nop
		 right_previous=state3;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x594>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20001730 	.word	0x20001730
 80014ec:	200016f4 	.word	0x200016f4
 80014f0:	2000023b 	.word	0x2000023b
 80014f4:	00000000 	.word	0x00000000

080014f8 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	cnt++;
 8001500:	4b61      	ldr	r3, [pc, #388]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	4a60      	ldr	r2, [pc, #384]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001508:	6013      	str	r3, [r2, #0]
	if(cnt==(1000*SAMPLE_TIME)) //1 cnt = 0.001s, default:100 = 0.1s
 800150a:	4b5f      	ldr	r3, [pc, #380]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b32      	cmp	r3, #50	; 0x32
 8001510:	f040 80ab 	bne.w	800166a <HAL_TIM_PeriodElapsedCallback+0x172>
	{

		rads_left_velocity  = left_count*2*PI/(5376*0.001*cnt);
 8001514:	4b5d      	ldr	r3, [pc, #372]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f80a 	bl	8000534 <__aeabi_i2d>
 8001520:	a355      	add	r3, pc, #340	; (adr r3, 8001678 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	f7ff f86f 	bl	8000608 <__aeabi_dmul>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4614      	mov	r4, r2
 8001530:	461d      	mov	r5, r3
 8001532:	4b55      	ldr	r3, [pc, #340]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe fffc 	bl	8000534 <__aeabi_i2d>
 800153c:	a350      	add	r3, pc, #320	; (adr r3, 8001680 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7ff f861 	bl	8000608 <__aeabi_dmul>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4620      	mov	r0, r4
 800154c:	4629      	mov	r1, r5
 800154e:	f7ff f985 	bl	800085c <__aeabi_ddiv>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fb2d 	bl	8000bb8 <__aeabi_d2f>
 800155e:	4603      	mov	r3, r0
 8001560:	4a4b      	ldr	r2, [pc, #300]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001562:	6013      	str	r3, [r2, #0]
		rpm_left_velocity   = left_count*60/(5376*0.001*cnt);
 8001564:	4b49      	ldr	r3, [pc, #292]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4613      	mov	r3, r2
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	1a9b      	subs	r3, r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ffdf 	bl	8000534 <__aeabi_i2d>
 8001576:	4604      	mov	r4, r0
 8001578:	460d      	mov	r5, r1
 800157a:	4b43      	ldr	r3, [pc, #268]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffd8 	bl	8000534 <__aeabi_i2d>
 8001584:	a33e      	add	r3, pc, #248	; (adr r3, 8001680 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f83d 	bl	8000608 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7ff f961 	bl	800085c <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff fb09 	bl	8000bb8 <__aeabi_d2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4a3a      	ldr	r2, [pc, #232]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80015aa:	6013      	str	r3, [r2, #0]

		rads_right_velocity = right_count*2*PI/(5376*0.001*cnt);
 80015ac:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffbe 	bl	8000534 <__aeabi_i2d>
 80015b8:	a32f      	add	r3, pc, #188	; (adr r3, 8001678 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7ff f823 	bl	8000608 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4614      	mov	r4, r2
 80015c8:	461d      	mov	r5, r3
 80015ca:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffb0 	bl	8000534 <__aeabi_i2d>
 80015d4:	a32a      	add	r3, pc, #168	; (adr r3, 8001680 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff f815 	bl	8000608 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4620      	mov	r0, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	f7ff f939 	bl	800085c <__aeabi_ddiv>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff fae1 	bl	8000bb8 <__aeabi_d2f>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a28      	ldr	r2, [pc, #160]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80015fa:	6013      	str	r3, [r2, #0]
		rpm_right_velocity  = right_count*60/(5376*0.001*cnt);
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4613      	mov	r3, r2
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	1a9b      	subs	r3, r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff93 	bl	8000534 <__aeabi_i2d>
 800160e:	4604      	mov	r4, r0
 8001610:	460d      	mov	r5, r1
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ff8c 	bl	8000534 <__aeabi_i2d>
 800161c:	a318      	add	r3, pc, #96	; (adr r3, 8001680 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7fe fff1 	bl	8000608 <__aeabi_dmul>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4620      	mov	r0, r4
 800162c:	4629      	mov	r1, r5
 800162e:	f7ff f915 	bl	800085c <__aeabi_ddiv>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff fabd 	bl	8000bb8 <__aeabi_d2f>
 800163e:	4603      	mov	r3, r0
 8001640:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001642:	6013      	str	r3, [r2, #0]

//		pos=previous_pos+right_count*360/5376;
//		previous_pos=pos;
		printf("%0.5f\n",rpm_right_velocity);
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff85 	bl	8000558 <__aeabi_f2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4814      	ldr	r0, [pc, #80]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001654:	f00e fad6 	bl	800fc04 <iprintf>
		left_count=0;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
		right_count=0;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
		cnt=0;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
	}
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bdb0      	pop	{r4, r5, r7, pc}
 8001672:	bf00      	nop
 8001674:	f3af 8000 	nop.w
 8001678:	54442d18 	.word	0x54442d18
 800167c:	400921fb 	.word	0x400921fb
 8001680:	24dd2f1b 	.word	0x24dd2f1b
 8001684:	40158106 	.word	0x40158106
 8001688:	20001700 	.word	0x20001700
 800168c:	2000173c 	.word	0x2000173c
 8001690:	20001728 	.word	0x20001728
 8001694:	20001720 	.word	0x20001720
 8001698:	200016f4 	.word	0x200016f4
 800169c:	20001714 	.word	0x20001714
 80016a0:	20001738 	.word	0x20001738
 80016a4:	08011c30 	.word	0x08011c30

080016a8 <PID>:
float CurrentError;
void PID(float *SetPoint, float* ControlledVariable,float* PidOutput)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
	// PWM mode has the range from 0 to 400.
	float HighLimit=400,ManipulatedVariable,ManipulatedVariableHat,uk,ui;
 80016b4:	4b68      	ldr	r3, [pc, #416]	; (8001858 <PID+0x1b0>)
 80016b6:	623b      	str	r3, [r7, #32]
	static float previous_ui;

	// Calculate the error
	CurrentError=*SetPoint-fabs(*ControlledVariable);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	ed93 7a00 	vldr	s14, [r3]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	eef0 7ae7 	vabs.f32	s15, s15
 80016c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016cc:	4b63      	ldr	r3, [pc, #396]	; (800185c <PID+0x1b4>)
 80016ce:	edc3 7a00 	vstr	s15, [r3]

	// Proportion
	uk=Kp*CurrentError;
 80016d2:	4b62      	ldr	r3, [pc, #392]	; (800185c <PID+0x1b4>)
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80016dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e0:	edc7 7a07 	vstr	s15, [r7, #28]

	// Integration
	ui=previous_ui+Ki*CurrentError*SAMPLE_TIME;
 80016e4:	4b5e      	ldr	r3, [pc, #376]	; (8001860 <PID+0x1b8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff35 	bl	8000558 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	4b5a      	ldr	r3, [pc, #360]	; (800185c <PID+0x1b4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe ff2e 	bl	8000558 <__aeabi_f2d>
 80016fc:	a350      	add	r3, pc, #320	; (adr r3, 8001840 <PID+0x198>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7fe ff81 	bl	8000608 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	a34e      	add	r3, pc, #312	; (adr r3, 8001848 <PID+0x1a0>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7fe ff78 	bl	8000608 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4620      	mov	r0, r4
 800171e:	4629      	mov	r1, r5
 8001720:	f7fe fdbc 	bl	800029c <__adddf3>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f7ff fa44 	bl	8000bb8 <__aeabi_d2f>
 8001730:	4603      	mov	r3, r0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
	ManipulatedVariable=ui+uk;
 8001734:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001738:	edd7 7a07 	vldr	s15, [r7, #28]
 800173c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001740:	edc7 7a06 	vstr	s15, [r7, #24]

	if(ManipulatedVariable<HighLimit)
 8001744:	ed97 7a06 	vldr	s14, [r7, #24]
 8001748:	edd7 7a08 	vldr	s15, [r7, #32]
 800174c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001754:	d508      	bpl.n	8001768 <PID+0xc0>
	{
		ManipulatedVariableHat=ManipulatedVariable;
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	617b      	str	r3, [r7, #20]
		ResetError=0;
 800175a:	4b42      	ldr	r3, [pc, #264]	; (8001864 <PID+0x1bc>)
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
		*PidOutput=ManipulatedVariable;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	601a      	str	r2, [r3, #0]
	}
	if(ManipulatedVariable>HighLimit)
 8001768:	ed97 7a06 	vldr	s14, [r7, #24]
 800176c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001770:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001778:	dd59      	ble.n	800182e <PID+0x186>
	{
		ManipulatedVariableHat=HighLimit;
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	617b      	str	r3, [r7, #20]
		ResetError=ManipulatedVariableHat-ManipulatedVariable;
 800177e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001782:	edd7 7a06 	vldr	s15, [r7, #24]
 8001786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178a:	4b36      	ldr	r3, [pc, #216]	; (8001864 <PID+0x1bc>)
 800178c:	edc3 7a00 	vstr	s15, [r3]
		AntiWindupError=Ki*CurrentError+ResetError*Kb;
 8001790:	4b32      	ldr	r3, [pc, #200]	; (800185c <PID+0x1b4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fedf 	bl	8000558 <__aeabi_f2d>
 800179a:	a329      	add	r3, pc, #164	; (adr r3, 8001840 <PID+0x198>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7fe ff32 	bl	8000608 <__aeabi_dmul>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4614      	mov	r4, r2
 80017aa:	461d      	mov	r5, r3
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <PID+0x1bc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fed1 	bl	8000558 <__aeabi_f2d>
 80017b6:	a326      	add	r3, pc, #152	; (adr r3, 8001850 <PID+0x1a8>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7fe ff24 	bl	8000608 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4620      	mov	r0, r4
 80017c6:	4629      	mov	r1, r5
 80017c8:	f7fe fd68 	bl	800029c <__adddf3>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f9f0 	bl	8000bb8 <__aeabi_d2f>
 80017d8:	4603      	mov	r3, r0
 80017da:	4a23      	ldr	r2, [pc, #140]	; (8001868 <PID+0x1c0>)
 80017dc:	6013      	str	r3, [r2, #0]
		ui=previous_ui+AntiWindupError*SAMPLE_TIME;
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <PID+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe feb8 	bl	8000558 <__aeabi_f2d>
 80017e8:	4604      	mov	r4, r0
 80017ea:	460d      	mov	r5, r1
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <PID+0x1c0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe feb1 	bl	8000558 <__aeabi_f2d>
 80017f6:	a314      	add	r3, pc, #80	; (adr r3, 8001848 <PID+0x1a0>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7fe ff04 	bl	8000608 <__aeabi_dmul>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4620      	mov	r0, r4
 8001806:	4629      	mov	r1, r5
 8001808:	f7fe fd48 	bl	800029c <__adddf3>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f7ff f9d0 	bl	8000bb8 <__aeabi_d2f>
 8001818:	4603      	mov	r3, r0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
		*PidOutput=uk+ui;
 800181c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001820:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	edc3 7a00 	vstr	s15, [r3]
	}
	previous_ui=ui;
 800182e:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <PID+0x1b8>)
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	6013      	str	r3, [r2, #0]

}
 8001834:	bf00      	nop
 8001836:	3728      	adds	r7, #40	; 0x28
 8001838:	46bd      	mov	sp, r7
 800183a:	bdb0      	pop	{r4, r5, r7, pc}
 800183c:	f3af 8000 	nop.w
 8001840:	9999999a 	.word	0x9999999a
 8001844:	402e9999 	.word	0x402e9999
 8001848:	9999999a 	.word	0x9999999a
 800184c:	3fa99999 	.word	0x3fa99999
 8001850:	fdf3b646 	.word	0xfdf3b646
 8001854:	403638d4 	.word	0x403638d4
 8001858:	43c80000 	.word	0x43c80000
 800185c:	20001724 	.word	0x20001724
 8001860:	2000023c 	.word	0x2000023c
 8001864:	20001734 	.word	0x20001734
 8001868:	2000170c 	.word	0x2000170c

0800186c <ReadEncoder>:

void ReadEncoder()
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <ComputeVelocity>:

void ComputeVelocity()
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <SubcribeVelocityFromRos>:

void SubcribeVelocityFromRos(const double linear_velocity,const double angular_velocity,float *left_velocity,float *right_velocity)
{
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001892:	ed87 1b02 	vstr	d1, [r7, #8]
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]

	// Calculate vel of each wheel
	*left_velocity  = ((2*(linear_velocity)-(angular_velocity)*WHEEL_SEPARATION))/2;  // unit: m/s
 800189a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	f7fe fcfb 	bl	800029c <__adddf3>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4614      	mov	r4, r2
 80018ac:	461d      	mov	r5, r3
 80018ae:	a367      	add	r3, pc, #412	; (adr r3, 8001a4c <SubcribeVelocityFromRos+0x1c4>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018b8:	f7fe fea6 	bl	8000608 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4620      	mov	r0, r4
 80018c2:	4629      	mov	r1, r5
 80018c4:	f7fe fce8 	bl	8000298 <__aeabi_dsub>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018d8:	f7fe ffc0 	bl	800085c <__aeabi_ddiv>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f7ff f968 	bl	8000bb8 <__aeabi_d2f>
 80018e8:	4602      	mov	r2, r0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	601a      	str	r2, [r3, #0]
	*right_velocity = ((2*(linear_velocity)+(angular_velocity)*WHEEL_SEPARATION))/2;
 80018ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	f7fe fcd1 	bl	800029c <__adddf3>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4614      	mov	r4, r2
 8001900:	461d      	mov	r5, r3
 8001902:	a352      	add	r3, pc, #328	; (adr r3, 8001a4c <SubcribeVelocityFromRos+0x1c4>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800190c:	f7fe fe7c 	bl	8000608 <__aeabi_dmul>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4620      	mov	r0, r4
 8001916:	4629      	mov	r1, r5
 8001918:	f7fe fcc0 	bl	800029c <__adddf3>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800192c:	f7fe ff96 	bl	800085c <__aeabi_ddiv>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f7ff f93e 	bl	8000bb8 <__aeabi_d2f>
 800193c:	4602      	mov	r2, r0
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	601a      	str	r2, [r3, #0]

	//v=omega.r => omega=v/r (rad/s)
	*left_velocity  = (*left_velocity)/WHEEL_RADIUS;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fe06 	bl	8000558 <__aeabi_f2d>
 800194c:	a341      	add	r3, pc, #260	; (adr r3, 8001a54 <SubcribeVelocityFromRos+0x1cc>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7fe ff83 	bl	800085c <__aeabi_ddiv>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff f92b 	bl	8000bb8 <__aeabi_d2f>
 8001962:	4602      	mov	r2, r0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	601a      	str	r2, [r3, #0]
	*right_velocity = (*right_velocity)/WHEEL_RADIUS;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fdf3 	bl	8000558 <__aeabi_f2d>
 8001972:	a338      	add	r3, pc, #224	; (adr r3, 8001a54 <SubcribeVelocityFromRos+0x1cc>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe ff70 	bl	800085c <__aeabi_ddiv>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	f7ff f918 	bl	8000bb8 <__aeabi_d2f>
 8001988:	4602      	mov	r2, r0
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	601a      	str	r2, [r3, #0]

	// convert to RPM
	*left_velocity  = ((*left_velocity)*60)/(2*PI);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001a40 <SubcribeVelocityFromRos+0x1b8>
 8001998:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199c:	ee17 0a90 	vmov	r0, s15
 80019a0:	f7fe fdda 	bl	8000558 <__aeabi_f2d>
 80019a4:	a324      	add	r3, pc, #144	; (adr r3, 8001a38 <SubcribeVelocityFromRos+0x1b0>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f7fe ff57 	bl	800085c <__aeabi_ddiv>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f7ff f8ff 	bl	8000bb8 <__aeabi_d2f>
 80019ba:	4602      	mov	r2, r0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	601a      	str	r2, [r3, #0]
	*right_velocity = ((*right_velocity)*60)/(2*PI);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001a40 <SubcribeVelocityFromRos+0x1b8>
 80019ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ce:	ee17 0a90 	vmov	r0, s15
 80019d2:	f7fe fdc1 	bl	8000558 <__aeabi_f2d>
 80019d6:	a318      	add	r3, pc, #96	; (adr r3, 8001a38 <SubcribeVelocityFromRos+0x1b0>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe ff3e 	bl	800085c <__aeabi_ddiv>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff f8e6 	bl	8000bb8 <__aeabi_d2f>
 80019ec:	4602      	mov	r2, r0
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	601a      	str	r2, [r3, #0]

	// Determine the direction with the sign of value corresponding
	// (0,1): clockwise, (1,0): counter clockwise.

	if((left_velocity>0)&&(right_velocity>0))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d018      	beq.n	8001a2a <SubcribeVelocityFromRos+0x1a2>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d015      	beq.n	8001a2a <SubcribeVelocityFromRos+0x1a2>
	{
		  // IN1,IN2 pin    (motor A)
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 80019fe:	2201      	movs	r2, #1
 8001a00:	2102      	movs	r1, #2
 8001a02:	4810      	ldr	r0, [pc, #64]	; (8001a44 <SubcribeVelocityFromRos+0x1bc>)
 8001a04:	f004 fdfc 	bl	8006600 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2104      	movs	r1, #4
 8001a0c:	480d      	ldr	r0, [pc, #52]	; (8001a44 <SubcribeVelocityFromRos+0x1bc>)
 8001a0e:	f004 fdf7 	bl	8006600 <HAL_GPIO_WritePin>

		  // IN3,IN4 pin	(motor B)
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a18:	480b      	ldr	r0, [pc, #44]	; (8001a48 <SubcribeVelocityFromRos+0x1c0>)
 8001a1a:	f004 fdf1 	bl	8006600 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a24:	4808      	ldr	r0, [pc, #32]	; (8001a48 <SubcribeVelocityFromRos+0x1c0>)
 8001a26:	f004 fdeb 	bl	8006600 <HAL_GPIO_WritePin>
		  // IN3,IN4 pin	(motor B)
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
	}

}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bdb0      	pop	{r4, r5, r7, pc}
 8001a32:	bf00      	nop
 8001a34:	f3af 8000 	nop.w
 8001a38:	54442d18 	.word	0x54442d18
 8001a3c:	401921fb 	.word	0x401921fb
 8001a40:	42700000 	.word	0x42700000
 8001a44:	40020400 	.word	0x40020400
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	33333333 	.word	0x33333333
 8001a50:	3fd33333 	.word	0x3fd33333
 8001a54:	9999999a 	.word	0x9999999a
 8001a58:	3fa99999 	.word	0x3fa99999

08001a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a60:	f003 fe88 	bl	8005774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a64:	f000 f846 	bl	8001af4 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a68:	f000 f8b6 	bl	8001bd8 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a6c:	f000 fb04 	bl	8002078 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001a70:	f000 fada 	bl	8002028 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001a74:	f000 f8d6 	bl	8001c24 <_ZL12MX_I2C1_Initv>
  MX_I2S2_Init();
 8001a78:	f000 f908 	bl	8001c8c <_ZL12MX_I2S2_Initv>
  MX_I2S3_Init();
 8001a7c:	f000 f93a 	bl	8001cf4 <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 8001a80:	f000 f96c 	bl	8001d5c <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 8001a84:	f00c ffda 	bl	800ea3c <MX_USB_HOST_Init>
  MX_TIM3_Init();
 8001a88:	f000 fa00 	bl	8001e8c <_ZL12MX_TIM3_Initv>
  MX_TIM2_Init();
 8001a8c:	f000 f9a2 	bl	8001dd4 <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 8001a90:	f000 fa9c 	bl	8001fcc <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 8001a94:	f002 fb10 	bl	80040b8 <setup>
  HAL_TIM_Base_Start_IT(&htim2);
 8001a98:	4812      	ldr	r0, [pc, #72]	; (8001ae4 <main+0x88>)
 8001a9a:	f007 feab 	bl	80097f4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4811      	ldr	r0, [pc, #68]	; (8001ae8 <main+0x8c>)
 8001aa2:	f007 ff63 	bl	800996c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8001aa6:	2108      	movs	r1, #8
 8001aa8:	480f      	ldr	r0, [pc, #60]	; (8001ae8 <main+0x8c>)
 8001aaa:	f007 ff5f 	bl	800996c <HAL_TIM_PWM_Start>


  // IN1,IN2 pin   (motor A)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	480e      	ldr	r0, [pc, #56]	; (8001aec <main+0x90>)
 8001ab4:	f004 fda4 	bl	8006600 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2104      	movs	r1, #4
 8001abc:	480b      	ldr	r0, [pc, #44]	; (8001aec <main+0x90>)
 8001abe:	f004 fd9f 	bl	8006600 <HAL_GPIO_WritePin>

  // IN3,IN4 pin	(motor B)
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_RESET);    // (0,1): < 0: forward. (1,0): >0 : reverse.
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac8:	4809      	ldr	r0, [pc, #36]	; (8001af0 <main+0x94>)
 8001aca:	f004 fd99 	bl	8006600 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ad4:	4806      	ldr	r0, [pc, #24]	; (8001af0 <main+0x94>)
 8001ad6:	f004 fd93 	bl	8006600 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001ada:	f00c ffd5 	bl	800ea88 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    loop();
 8001ade:	f002 fb01 	bl	80040e4 <loop>
    MX_USB_HOST_Process();
 8001ae2:	e7fa      	b.n	8001ada <main+0x7e>
 8001ae4:	2000037c 	.word	0x2000037c
 8001ae8:	200003c4 	.word	0x200003c4
 8001aec:	40020400 	.word	0x40020400
 8001af0:	40021000 	.word	0x40021000

08001af4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b094      	sub	sp, #80	; 0x50
 8001af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001afa:	f107 0320 	add.w	r3, r7, #32
 8001afe:	2230      	movs	r2, #48	; 0x30
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f00d fb2c 	bl	800f160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <_Z18SystemClock_Configv+0xdc>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	4a2b      	ldr	r2, [pc, #172]	; (8001bd0 <_Z18SystemClock_Configv+0xdc>)
 8001b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b26:	6413      	str	r3, [r2, #64]	; 0x40
 8001b28:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <_Z18SystemClock_Configv+0xdc>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b34:	2300      	movs	r3, #0
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <_Z18SystemClock_Configv+0xe0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a25      	ldr	r2, [pc, #148]	; (8001bd4 <_Z18SystemClock_Configv+0xe0>)
 8001b3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <_Z18SystemClock_Configv+0xe0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b50:	2301      	movs	r3, #1
 8001b52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b64:	2304      	movs	r3, #4
 8001b66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001b68:	23c0      	movs	r3, #192	; 0xc0
 8001b6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001b70:	2308      	movs	r3, #8
 8001b72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b74:	f107 0320 	add.w	r3, r7, #32
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f006 ff7b 	bl	8008a74 <HAL_RCC_OscConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf14      	ite	ne
 8001b84:	2301      	movne	r3, #1
 8001b86:	2300      	moveq	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001b8e:	f000 fb97 	bl	80022c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b92:	230f      	movs	r3, #15
 8001b94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b96:	2302      	movs	r3, #2
 8001b98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ba2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	2103      	movs	r1, #3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f007 f9d8 	bl	8008f64 <HAL_RCC_ClockConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bf14      	ite	ne
 8001bba:	2301      	movne	r3, #1
 8001bbc:	2300      	moveq	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001bc4:	f000 fb7c 	bl	80022c0 <Error_Handler>
  }
}
 8001bc8:	bf00      	nop
 8001bca:	3750      	adds	r7, #80	; 0x50
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40007000 	.word	0x40007000

08001bd8 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bde:	463b      	mov	r3, r7
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
 8001bec:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001bf2:	23c8      	movs	r3, #200	; 0xc8
 8001bf4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bfe:	463b      	mov	r3, r7
 8001c00:	4618      	mov	r0, r3
 8001c02:	f007 fbcf 	bl	80093a4 <HAL_RCCEx_PeriphCLKConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 8001c16:	f000 fb53 	bl	80022c0 <Error_Handler>
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c2a:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <_ZL12MX_I2C1_Initv+0x60>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c30:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <_ZL12MX_I2C1_Initv+0x64>)
 8001c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c60:	4807      	ldr	r0, [pc, #28]	; (8001c80 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c62:	f006 f923 	bl	8007eac <HAL_I2C_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf14      	ite	ne
 8001c6c:	2301      	movne	r3, #1
 8001c6e:	2300      	moveq	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001c76:	f000 fb23 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000240 	.word	0x20000240
 8001c84:	40005400 	.word	0x40005400
 8001c88:	000186a0 	.word	0x000186a0

08001c8c <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001c90:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001c92:	4a16      	ldr	r2, [pc, #88]	; (8001cec <_ZL12MX_I2S2_Initv+0x60>)
 8001c94:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001ca4:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001caa:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cb2:	4a0f      	ldr	r2, [pc, #60]	; (8001cf0 <_ZL12MX_I2S2_Initv+0x64>)
 8001cb4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001cc8:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cca:	f006 fa33 	bl	8008134 <HAL_I2S_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	bf14      	ite	ne
 8001cd4:	2301      	movne	r3, #1
 8001cd6:	2300      	moveq	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <_ZL12MX_I2S2_Initv+0x56>
  {
    Error_Handler();
 8001cde:	f000 faef 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000294 	.word	0x20000294
 8001cec:	40003800 	.word	0x40003800
 8001cf0:	00017700 	.word	0x00017700

08001cf4 <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001cfa:	4a16      	ldr	r2, [pc, #88]	; (8001d54 <_ZL12MX_I2S3_Initv+0x60>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d04:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d18:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d1c:	4a0e      	ldr	r2, [pc, #56]	; (8001d58 <_ZL12MX_I2S3_Initv+0x64>)
 8001d1e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001d32:	4807      	ldr	r0, [pc, #28]	; (8001d50 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d34:	f006 f9fe 	bl	8008134 <HAL_I2S_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf14      	ite	ne
 8001d3e:	2301      	movne	r3, #1
 8001d40:	2300      	moveq	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 8001d48:	f000 faba 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200002dc 	.word	0x200002dc
 8001d54:	40003c00 	.word	0x40003c00
 8001d58:	00017700 	.word	0x00017700

08001d5c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d62:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <_ZL12MX_SPI1_Initv+0x74>)
 8001d64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d6e:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d74:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001da8:	220a      	movs	r2, #10
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dac:	4807      	ldr	r0, [pc, #28]	; (8001dcc <_ZL12MX_SPI1_Initv+0x70>)
 8001dae:	f007 fc49 	bl	8009644 <HAL_SPI_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf14      	ite	ne
 8001db8:	2301      	movne	r3, #1
 8001dba:	2300      	moveq	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001dc2:	f000 fa7d 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000324 	.word	0x20000324
 8001dd0:	40013000 	.word	0x40013000

08001dd4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dda:	f107 0308 	add.w	r3, r7, #8
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de8:	463b      	mov	r3, r7
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001df2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001df8:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001dfa:	222f      	movs	r2, #47	; 0x2f
 8001dfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001e04:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e18:	481b      	ldr	r0, [pc, #108]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e1a:	f007 fc9c 	bl	8009756 <HAL_TIM_Base_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001e2e:	f000 fa47 	bl	80022c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4812      	ldr	r0, [pc, #72]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e40:	f008 f80e 	bl	8009e60 <HAL_TIM_ConfigClockSource>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf14      	ite	ne
 8001e4a:	2301      	movne	r3, #1
 8001e4c:	2300      	moveq	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001e54:	f000 fa34 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e60:	463b      	mov	r3, r7
 8001e62:	4619      	mov	r1, r3
 8001e64:	4808      	ldr	r0, [pc, #32]	; (8001e88 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e66:	f008 fbb7 	bl	800a5d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001e7a:	f000 fa21 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000037c 	.word	0x2000037c

08001e8c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08e      	sub	sp, #56	; 0x38
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea0:	f107 0320 	add.w	r3, r7, #32
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
 8001eb8:	615a      	str	r2, [r3, #20]
 8001eba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ebc:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001ebe:	4a42      	ldr	r2, [pc, #264]	; (8001fc8 <_ZL12MX_TIM3_Initv+0x13c>)
 8001ec0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 8001ec2:	4b40      	ldr	r3, [pc, #256]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001ec4:	220b      	movs	r2, #11
 8001ec6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec8:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 8001ece:	4b3d      	ldr	r3, [pc, #244]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001ed0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001ed4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001edc:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ee2:	4838      	ldr	r0, [pc, #224]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001ee4:	f007 fc37 	bl	8009756 <HAL_TIM_Base_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf14      	ite	ne
 8001eee:	2301      	movne	r3, #1
 8001ef0:	2300      	moveq	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8001ef8:	f000 f9e2 	bl	80022c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f06:	4619      	mov	r1, r3
 8001f08:	482e      	ldr	r0, [pc, #184]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001f0a:	f007 ffa9 	bl	8009e60 <HAL_TIM_ConfigClockSource>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bf14      	ite	ne
 8001f14:	2301      	movne	r3, #1
 8001f16:	2300      	moveq	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8001f1e:	f000 f9cf 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f22:	4828      	ldr	r0, [pc, #160]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001f24:	f007 fcc8 	bl	80098b8 <HAL_TIM_PWM_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf14      	ite	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	2300      	moveq	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8001f38:	f000 f9c2 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f44:	f107 0320 	add.w	r3, r7, #32
 8001f48:	4619      	mov	r1, r3
 8001f4a:	481e      	ldr	r0, [pc, #120]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001f4c:	f008 fb44 	bl	800a5d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8001f60:	f000 f9ae 	bl	80022c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f64:	2360      	movs	r3, #96	; 0x60
 8001f66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	2200      	movs	r2, #0
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4812      	ldr	r0, [pc, #72]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001f7c:	f007 feae 	bl	8009cdc <HAL_TIM_PWM_ConfigChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bf14      	ite	ne
 8001f86:	2301      	movne	r3, #1
 8001f88:	2300      	moveq	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8001f90:	f000 f996 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	2208      	movs	r2, #8
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480a      	ldr	r0, [pc, #40]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001f9c:	f007 fe9e 	bl	8009cdc <HAL_TIM_PWM_ConfigChannel>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf14      	ite	ne
 8001fa6:	2301      	movne	r3, #1
 8001fa8:	2300      	moveq	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8001fb0:	f000 f986 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <_ZL12MX_TIM3_Initv+0x138>)
 8001fb6:	f003 f901 	bl	80051bc <HAL_TIM_MspPostInit>

}
 8001fba:	bf00      	nop
 8001fbc:	3738      	adds	r7, #56	; 0x38
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200003c4 	.word	0x200003c4
 8001fc8:	40000400 	.word	0x40000400

08001fcc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001fd2:	4a14      	ldr	r2, [pc, #80]	; (8002024 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001fd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001fd8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001fdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002002:	4807      	ldr	r0, [pc, #28]	; (8002020 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002004:	f008 fb6a 	bl	800a6dc <HAL_UART_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	bf14      	ite	ne
 800200e:	2301      	movne	r3, #1
 8002010:	2300      	moveq	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002018:	f000 f952 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	2000040c 	.word	0x2000040c
 8002024:	40011000 	.word	0x40011000

08002028 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <_ZL11MX_DMA_Initv+0x4c>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <_ZL11MX_DMA_Initv+0x4c>)
 8002038:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <_ZL11MX_DMA_Initv+0x4c>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	203a      	movs	r0, #58	; 0x3a
 8002050:	f003 fd01 	bl	8005a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002054:	203a      	movs	r0, #58	; 0x3a
 8002056:	f003 fd1a 	bl	8005a8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	2046      	movs	r0, #70	; 0x46
 8002060:	f003 fcf9 	bl	8005a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002064:	2046      	movs	r0, #70	; 0x46
 8002066:	f003 fd12 	bl	8005a8e <HAL_NVIC_EnableIRQ>

}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800

08002078 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08c      	sub	sp, #48	; 0x30
 800207c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207e:	f107 031c 	add.w	r3, r7, #28
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
 800208c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	4b85      	ldr	r3, [pc, #532]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a84      	ldr	r2, [pc, #528]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 8002098:	f043 0310 	orr.w	r3, r3, #16
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b82      	ldr	r3, [pc, #520]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	61bb      	str	r3, [r7, #24]
 80020a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	4b7e      	ldr	r3, [pc, #504]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a7d      	ldr	r2, [pc, #500]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b7b      	ldr	r3, [pc, #492]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	4b77      	ldr	r3, [pc, #476]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a76      	ldr	r2, [pc, #472]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b74      	ldr	r3, [pc, #464]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b70      	ldr	r3, [pc, #448]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a6f      	ldr	r2, [pc, #444]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	4b69      	ldr	r3, [pc, #420]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a68      	ldr	r2, [pc, #416]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b66      	ldr	r3, [pc, #408]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	4b62      	ldr	r3, [pc, #392]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a61      	ldr	r2, [pc, #388]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <_ZL12MX_GPIO_Initv+0x230>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8002136:	2200      	movs	r2, #0
 8002138:	f44f 7142 	mov.w	r1, #776	; 0x308
 800213c:	485b      	ldr	r0, [pc, #364]	; (80022ac <_ZL12MX_GPIO_Initv+0x234>)
 800213e:	f004 fa5f 	bl	8006600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002142:	2201      	movs	r2, #1
 8002144:	2101      	movs	r1, #1
 8002146:	485a      	ldr	r0, [pc, #360]	; (80022b0 <_ZL12MX_GPIO_Initv+0x238>)
 8002148:	f004 fa5a 	bl	8006600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 800214c:	2200      	movs	r2, #0
 800214e:	2106      	movs	r1, #6
 8002150:	4858      	ldr	r0, [pc, #352]	; (80022b4 <_ZL12MX_GPIO_Initv+0x23c>)
 8002152:	f004 fa55 	bl	8006600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002156:	2200      	movs	r2, #0
 8002158:	f24f 0110 	movw	r1, #61456	; 0xf010
 800215c:	4856      	ldr	r0, [pc, #344]	; (80022b8 <_ZL12MX_GPIO_Initv+0x240>)
 800215e:	f004 fa4f 	bl	8006600 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8002162:	2304      	movs	r3, #4
 8002164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800216e:	f107 031c 	add.w	r3, r7, #28
 8002172:	4619      	mov	r1, r3
 8002174:	484d      	ldr	r0, [pc, #308]	; (80022ac <_ZL12MX_GPIO_Initv+0x234>)
 8002176:	f004 f8a7 	bl	80062c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|IN3_Pin|IN4_Pin;
 800217a:	f44f 7342 	mov.w	r3, #776	; 0x308
 800217e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002180:	2301      	movs	r3, #1
 8002182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	4619      	mov	r1, r3
 8002192:	4846      	ldr	r0, [pc, #280]	; (80022ac <_ZL12MX_GPIO_Initv+0x234>)
 8002194:	f004 f898 	bl	80062c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8002198:	2332      	movs	r3, #50	; 0x32
 800219a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800219c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80021a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	4619      	mov	r1, r3
 80021ac:	483f      	ldr	r0, [pc, #252]	; (80022ac <_ZL12MX_GPIO_Initv+0x234>)
 80021ae:	f004 f88b 	bl	80062c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80021b2:	2301      	movs	r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b6:	2301      	movs	r3, #1
 80021b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	4619      	mov	r1, r3
 80021c8:	4839      	ldr	r0, [pc, #228]	; (80022b0 <_ZL12MX_GPIO_Initv+0x238>)
 80021ca:	f004 f87d 	bl	80062c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021ce:	2301      	movs	r3, #1
 80021d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021d2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80021d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	4619      	mov	r1, r3
 80021e2:	4836      	ldr	r0, [pc, #216]	; (80022bc <_ZL12MX_GPIO_Initv+0x244>)
 80021e4:	f004 f870 	bl	80062c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 80021e8:	2306      	movs	r3, #6
 80021ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ec:	2301      	movs	r3, #1
 80021ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f8:	f107 031c 	add.w	r3, r7, #28
 80021fc:	4619      	mov	r1, r3
 80021fe:	482d      	ldr	r0, [pc, #180]	; (80022b4 <_ZL12MX_GPIO_Initv+0x23c>)
 8002200:	f004 f862 	bl	80062c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_ENCODER_A_Pin LEFT_ENCODER_B_Pin RIGHT_ENCODER_A_Pin RIGHT_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = LEFT_ENCODER_A_Pin|LEFT_ENCODER_B_Pin|RIGHT_ENCODER_A_Pin|RIGHT_ENCODER_B_Pin;
 8002204:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800220a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800220e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	4824      	ldr	r0, [pc, #144]	; (80022ac <_ZL12MX_GPIO_Initv+0x234>)
 800221c:	f004 f854 	bl	80062c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002226:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800222a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	4619      	mov	r1, r3
 8002236:	481f      	ldr	r0, [pc, #124]	; (80022b4 <_ZL12MX_GPIO_Initv+0x23c>)
 8002238:	f004 f846 	bl	80062c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800223c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002242:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	4619      	mov	r1, r3
 8002252:	4819      	ldr	r0, [pc, #100]	; (80022b8 <_ZL12MX_GPIO_Initv+0x240>)
 8002254:	f004 f838 	bl	80062c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002258:	f24f 0310 	movw	r3, #61456	; 0xf010
 800225c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225e:	2301      	movs	r3, #1
 8002260:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800226a:	f107 031c 	add.w	r3, r7, #28
 800226e:	4619      	mov	r1, r3
 8002270:	4811      	ldr	r0, [pc, #68]	; (80022b8 <_ZL12MX_GPIO_Initv+0x240>)
 8002272:	f004 f829 	bl	80062c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002276:	2320      	movs	r3, #32
 8002278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002282:	f107 031c 	add.w	r3, r7, #28
 8002286:	4619      	mov	r1, r3
 8002288:	480b      	ldr	r0, [pc, #44]	; (80022b8 <_ZL12MX_GPIO_Initv+0x240>)
 800228a:	f004 f81d 	bl	80062c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	2028      	movs	r0, #40	; 0x28
 8002294:	f003 fbdf 	bl	8005a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002298:	2028      	movs	r0, #40	; 0x28
 800229a:	f003 fbf8 	bl	8005a8e <HAL_NVIC_EnableIRQ>

}
 800229e:	bf00      	nop
 80022a0:	3730      	adds	r7, #48	; 0x30
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40020800 	.word	0x40020800
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020c00 	.word	0x40020c00
 80022bc:	40020000 	.word	0x40020000

080022c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c4:	b672      	cpsid	i
}
 80022c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <Error_Handler+0x8>

080022ca <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	ed87 0a01 	vstr	s0, [r7, #4]
 80022d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022d8:	eef0 7ae7 	vabs.f32	s15, s15
 80022dc:	eeb0 0a67 	vmov.f32	s0, s15
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	ed87 0a01 	vstr	s0, [r7, #4]
 80022f4:	ed97 0a01 	vldr	s0, [r7, #4]
 80022f8:	f00c febe 	bl	800f078 <roundf>
 80022fc:	eef0 7a40 	vmov.f32	s15, s0
 8002300:	eeb0 0a67 	vmov.f32	s0, s15
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <_ZN3ros3MsgC1Ev+0x1c>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	08011f28 	.word	0x08011f28

0800234c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
      data()
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ffe8 	bl	800232c <_ZN3ros3MsgC1Ev>
 800235c:	4a06      	ldr	r2, [pc, #24]	; (8002378 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ffcf 	bl	800230a <_ZN3ros4TimeC1Ev>
    {
    }
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	08011f10 	.word	0x08011f10

0800237c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6859      	ldr	r1, [r3, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	4413      	add	r3, r2
 8002394:	b2ca      	uxtb	r2, r1
 8002396:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	0a19      	lsrs	r1, r3, #8
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3301      	adds	r3, #1
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	b2ca      	uxtb	r2, r1
 80023a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	0c19      	lsrs	r1, r3, #16
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3302      	adds	r3, #2
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	b2ca      	uxtb	r2, r1
 80023ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	0e19      	lsrs	r1, r3, #24
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3303      	adds	r3, #3
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	4413      	add	r3, r2
 80023ca:	b2ca      	uxtb	r2, r1
 80023cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3304      	adds	r3, #4
 80023d2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6899      	ldr	r1, [r3, #8]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	b2ca      	uxtb	r2, r1
 80023e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0a19      	lsrs	r1, r3, #8
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3301      	adds	r3, #1
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	b2ca      	uxtb	r2, r1
 80023f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	0c19      	lsrs	r1, r3, #16
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	3302      	adds	r3, #2
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	4413      	add	r3, r2
 8002402:	b2ca      	uxtb	r2, r1
 8002404:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	0e19      	lsrs	r1, r3, #24
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3303      	adds	r3, #3
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	4413      	add	r3, r2
 8002414:	b2ca      	uxtb	r2, r1
 8002416:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3304      	adds	r3, #4
 800241c:	60fb      	str	r3, [r7, #12]
      return offset;
 800241e:	68fb      	ldr	r3, [r7, #12]
    }
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	4413      	add	r3, r2
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3301      	adds	r3, #1
 8002450:	6839      	ldr	r1, [r7, #0]
 8002452:	440b      	add	r3, r1
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3302      	adds	r3, #2
 8002466:	6839      	ldr	r1, [r7, #0]
 8002468:	440b      	add	r3, r1
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	041b      	lsls	r3, r3, #16
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3303      	adds	r3, #3
 800247c:	6839      	ldr	r1, [r7, #0]
 800247e:	440b      	add	r3, r1
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	061b      	lsls	r3, r3, #24
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3304      	adds	r3, #4
 800248e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	4413      	add	r3, r2
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	3301      	adds	r3, #1
 80024a6:	6839      	ldr	r1, [r7, #0]
 80024a8:	440b      	add	r3, r1
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3302      	adds	r3, #2
 80024bc:	6839      	ldr	r1, [r7, #0]
 80024be:	440b      	add	r3, r1
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	041b      	lsls	r3, r3, #16
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3303      	adds	r3, #3
 80024d2:	6839      	ldr	r1, [r7, #0]
 80024d4:	440b      	add	r3, r1
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	061b      	lsls	r3, r3, #24
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3304      	adds	r3, #4
 80024e4:	60fb      	str	r3, [r7, #12]
     return offset;
 80024e6:	68fb      	ldr	r3, [r7, #12]
    }
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	08011c38 	.word	0x08011c38

08002510 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	08011c48 	.word	0x08011c48

0800252c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fef8 	bl	800232c <_ZN3ros3MsgC1Ev>
 800253c:	4a0b      	ldr	r2, [pc, #44]	; (800256c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	809a      	strh	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a07      	ldr	r2, [pc, #28]	; (8002570 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002552:	60da      	str	r2, [r3, #12]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a06      	ldr	r2, [pc, #24]	; (8002570 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002558:	611a      	str	r2, [r3, #16]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	615a      	str	r2, [r3, #20]
    {
    }
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	08011ef8 	.word	0x08011ef8
 8002570:	08011c6c 	.word	0x08011c6c

08002574 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8899      	ldrh	r1, [r3, #4]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	4413      	add	r3, r2
 800258c:	b2ca      	uxtb	r2, r1
 800258e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	889b      	ldrh	r3, [r3, #4]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	b299      	uxth	r1, r3
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	3301      	adds	r3, #1
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	b2ca      	uxtb	r2, r1
 80025a2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	3302      	adds	r3, #2
 80025a8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fd fe16 	bl	80001e0 <strlen>
 80025b4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	69b9      	ldr	r1, [r7, #24]
 80025be:	4618      	mov	r0, r3
 80025c0:	f001 fde6 	bl	8004190 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	3304      	adds	r3, #4
 80025c8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	18d0      	adds	r0, r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4619      	mov	r1, r3
 80025d8:	f00c fdb4 	bl	800f144 <memcpy>
      offset += length_topic_name;
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	4413      	add	r3, r2
 80025e2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd fdf9 	bl	80001e0 <strlen>
 80025ee:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	6979      	ldr	r1, [r7, #20]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f001 fdc9 	bl	8004190 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3304      	adds	r3, #4
 8002602:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	18d0      	adds	r0, r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4619      	mov	r1, r3
 8002612:	f00c fd97 	bl	800f144 <memcpy>
      offset += length_message_type;
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	4413      	add	r3, r2
 800261c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd fddc 	bl	80001e0 <strlen>
 8002628:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	4413      	add	r3, r2
 8002630:	6939      	ldr	r1, [r7, #16]
 8002632:	4618      	mov	r0, r3
 8002634:	f001 fdac 	bl	8004190 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	3304      	adds	r3, #4
 800263c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	18d0      	adds	r0, r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4619      	mov	r1, r3
 800264c:	f00c fd7a 	bl	800f144 <memcpy>
      offset += length_md5sum;
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800265e:	68f9      	ldr	r1, [r7, #12]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	4413      	add	r3, r2
 8002666:	b2ca      	uxtb	r2, r1
 8002668:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	0a19      	lsrs	r1, r3, #8
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3301      	adds	r3, #1
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	4413      	add	r3, r2
 8002676:	b2ca      	uxtb	r2, r1
 8002678:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	0c19      	lsrs	r1, r3, #16
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3302      	adds	r3, #2
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	4413      	add	r3, r2
 8002686:	b2ca      	uxtb	r2, r1
 8002688:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	0e19      	lsrs	r1, r3, #24
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3303      	adds	r3, #3
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	4413      	add	r3, r2
 8002696:	b2ca      	uxtb	r2, r1
 8002698:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3304      	adds	r3, #4
 800269e:	61fb      	str	r3, [r7, #28]
      return offset;
 80026a0:	69fb      	ldr	r3, [r7, #28]
    }
 80026a2:	4618      	mov	r0, r3
 80026a4:	3720      	adds	r7, #32
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b08a      	sub	sp, #40	; 0x28
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	889b      	ldrh	r3, [r3, #4]
 80026ca:	b21a      	sxth	r2, r3
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	3301      	adds	r3, #1
 80026d0:	6839      	ldr	r1, [r7, #0]
 80026d2:	440b      	add	r3, r1
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	b21b      	sxth	r3, r3
 80026da:	4313      	orrs	r3, r2
 80026dc:	b21b      	sxth	r3, r3
 80026de:	b29a      	uxth	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	3302      	adds	r3, #2
 80026e8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	441a      	add	r2, r3
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f001 fd68 	bl	80041cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	3304      	adds	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	4413      	add	r3, r2
 800270c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270e:	429a      	cmp	r2, r3
 8002710:	d20c      	bcs.n	800272c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	441a      	add	r2, r3
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	3b01      	subs	r3, #1
 800271c:	6839      	ldr	r1, [r7, #0]
 800271e:	440b      	add	r3, r1
 8002720:	7812      	ldrb	r2, [r2, #0]
 8002722:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	3301      	adds	r3, #1
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
 800272a:	e7ec      	b.n	8002706 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	4413      	add	r3, r2
 8002732:	3b01      	subs	r3, #1
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	4413      	add	r3, r2
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	3b01      	subs	r3, #1
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	441a      	add	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	4413      	add	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	441a      	add	r2, r3
 8002756:	f107 0310 	add.w	r3, r7, #16
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f001 fd35 	bl	80041cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	3304      	adds	r3, #4
 8002766:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	623b      	str	r3, [r7, #32]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4413      	add	r3, r2
 8002772:	6a3a      	ldr	r2, [r7, #32]
 8002774:	429a      	cmp	r2, r3
 8002776:	d20c      	bcs.n	8002792 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	441a      	add	r2, r3
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	3b01      	subs	r3, #1
 8002782:	6839      	ldr	r1, [r7, #0]
 8002784:	440b      	add	r3, r1
 8002786:	7812      	ldrb	r2, [r2, #0]
 8002788:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	3301      	adds	r3, #1
 800278e:	623b      	str	r3, [r7, #32]
 8002790:	e7ec      	b.n	800276c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	3b01      	subs	r3, #1
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	4413      	add	r3, r2
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	441a      	add	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	441a      	add	r2, r3
 80027bc:	f107 030c 	add.w	r3, r7, #12
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 fd02 	bl	80041cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	3304      	adds	r3, #4
 80027cc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d20c      	bcs.n	80027f8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	441a      	add	r2, r3
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	6839      	ldr	r1, [r7, #0]
 80027ea:	440b      	add	r3, r1
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3301      	adds	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	e7ec      	b.n	80027d2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4413      	add	r3, r2
 80027fe:	3b01      	subs	r3, #1
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	4413      	add	r3, r2
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	3b01      	subs	r3, #1
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	441a      	add	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4413      	add	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	6839      	ldr	r1, [r7, #0]
 8002826:	440a      	add	r2, r1
 8002828:	7812      	ldrb	r2, [r2, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	3301      	adds	r3, #1
 8002834:	6839      	ldr	r1, [r7, #0]
 8002836:	440b      	add	r3, r1
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	4313      	orrs	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	3302      	adds	r3, #2
 8002846:	6839      	ldr	r1, [r7, #0]
 8002848:	440b      	add	r3, r1
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	041b      	lsls	r3, r3, #16
 800284e:	4313      	orrs	r3, r2
 8002850:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	3303      	adds	r3, #3
 8002858:	6839      	ldr	r1, [r7, #0]
 800285a:	440b      	add	r3, r1
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	061b      	lsls	r3, r3, #24
 8002860:	4313      	orrs	r3, r2
 8002862:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	3304      	adds	r3, #4
 800286e:	61bb      	str	r3, [r7, #24]
     return offset;
 8002870:	69bb      	ldr	r3, [r7, #24]
    }
 8002872:	4618      	mov	r0, r3
 8002874:	3728      	adds	r7, #40	; 0x28
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	08011c70 	.word	0x08011c70

08002898 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	08011c8c 	.word	0x08011c8c

080028b4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fd34 	bl	800232c <_ZN3ros3MsgC1Ev>
 80028c4:	4a06      	ldr	r2, [pc, #24]	; (80028e0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	711a      	strb	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80028d4:	609a      	str	r2, [r3, #8]
    {
    }
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	08011ee0 	.word	0x08011ee0
 80028e4:	08011c6c 	.word	0x08011c6c

080028e8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	7912      	ldrb	r2, [r2, #4]
 8002900:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3301      	adds	r3, #1
 8002906:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fc67 	bl	80001e0 <strlen>
 8002912:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	4413      	add	r3, r2
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	4618      	mov	r0, r3
 800291e:	f001 fc37 	bl	8004190 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3304      	adds	r3, #4
 8002926:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	18d0      	adds	r0, r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	4619      	mov	r1, r3
 8002936:	f00c fc05 	bl	800f144 <memcpy>
      offset += length_msg;
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4413      	add	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
      return offset;
 8002942:	68fb      	ldr	r3, [r7, #12]
    }
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	4413      	add	r3, r2
 8002960:	781a      	ldrb	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	3301      	adds	r3, #1
 800296a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	441a      	add	r2, r3
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f001 fc27 	bl	80041cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	3304      	adds	r3, #4
 8002982:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4413      	add	r3, r2
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	429a      	cmp	r2, r3
 8002992:	d20c      	bcs.n	80029ae <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	441a      	add	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	3b01      	subs	r3, #1
 800299e:	6839      	ldr	r1, [r7, #0]
 80029a0:	440b      	add	r3, r1
 80029a2:	7812      	ldrb	r2, [r2, #0]
 80029a4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	3301      	adds	r3, #1
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	e7ec      	b.n	8002988 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	3b01      	subs	r3, #1
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	4413      	add	r3, r2
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	441a      	add	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4413      	add	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
     return offset;
 80029d2:	693b      	ldr	r3, [r7, #16]
    }
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	08011cb0 	.word	0x08011cb0

080029f8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	08011cc4 	.word	0x08011cc4

08002a14 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fc84 	bl	800232c <_ZN3ros3MsgC1Ev>
 8002a24:	4a11      	ldr	r2, [pc, #68]	; (8002a6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	60da      	str	r2, [r3, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	615a      	str	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	61da      	str	r2, [r3, #28]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	621a      	str	r2, [r3, #32]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	08011ec8 	.word	0x08011ec8

08002a70 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6859      	ldr	r1, [r3, #4]
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	4413      	add	r3, r2
 8002a88:	b2ca      	uxtb	r2, r1
 8002a8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	0a19      	lsrs	r1, r3, #8
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	3301      	adds	r3, #1
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	4413      	add	r3, r2
 8002a9a:	b2ca      	uxtb	r2, r1
 8002a9c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	0c19      	lsrs	r1, r3, #16
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	b2ca      	uxtb	r2, r1
 8002aae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	0e19      	lsrs	r1, r3, #24
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	3303      	adds	r3, #3
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	4413      	add	r3, r2
 8002abe:	b2ca      	uxtb	r2, r1
 8002ac0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002ac8:	2300      	movs	r3, #0
 8002aca:	623b      	str	r3, [r7, #32]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	6a3a      	ldr	r2, [r7, #32]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d22b      	bcs.n	8002b2e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002ae4:	6939      	ldr	r1, [r7, #16]
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	b2ca      	uxtb	r2, r1
 8002aee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	0a19      	lsrs	r1, r3, #8
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	3301      	adds	r3, #1
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	b2ca      	uxtb	r2, r1
 8002afe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	0c19      	lsrs	r1, r3, #16
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	3302      	adds	r3, #2
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	b2ca      	uxtb	r2, r1
 8002b0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	0e19      	lsrs	r1, r3, #24
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	3303      	adds	r3, #3
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	b2ca      	uxtb	r2, r1
 8002b1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	3304      	adds	r3, #4
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	623b      	str	r3, [r7, #32]
 8002b2c:	e7ce      	b.n	8002acc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6919      	ldr	r1, [r3, #16]
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	4413      	add	r3, r2
 8002b38:	b2ca      	uxtb	r2, r1
 8002b3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	0a19      	lsrs	r1, r3, #8
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	3301      	adds	r3, #1
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	4413      	add	r3, r2
 8002b4a:	b2ca      	uxtb	r2, r1
 8002b4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	0c19      	lsrs	r1, r3, #16
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	3302      	adds	r3, #2
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	b2ca      	uxtb	r2, r1
 8002b5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	0e19      	lsrs	r1, r3, #24
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	3303      	adds	r3, #3
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b2ca      	uxtb	r2, r1
 8002b70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	3304      	adds	r3, #4
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d22b      	bcs.n	8002bde <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002b94:	68f9      	ldr	r1, [r7, #12]
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	b2ca      	uxtb	r2, r1
 8002b9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	0a19      	lsrs	r1, r3, #8
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	b2ca      	uxtb	r2, r1
 8002bae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	0c19      	lsrs	r1, r3, #16
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	4413      	add	r3, r2
 8002bbc:	b2ca      	uxtb	r2, r1
 8002bbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	0e19      	lsrs	r1, r3, #24
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	3303      	adds	r3, #3
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	b2ca      	uxtb	r2, r1
 8002bce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]
 8002bdc:	e7ce      	b.n	8002b7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69d9      	ldr	r1, [r3, #28]
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	b2ca      	uxtb	r2, r1
 8002bea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	0a19      	lsrs	r1, r3, #8
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b2ca      	uxtb	r2, r1
 8002bfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	0c19      	lsrs	r1, r3, #16
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	3302      	adds	r3, #2
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b2ca      	uxtb	r2, r1
 8002c0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	0e19      	lsrs	r1, r3, #24
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	3303      	adds	r3, #3
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	b2ca      	uxtb	r2, r1
 8002c20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	3304      	adds	r3, #4
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d228      	bcs.n	8002c88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd facc 	bl	80001e0 <strlen>
 8002c48:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	6979      	ldr	r1, [r7, #20]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 fa9c 	bl	8004190 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	18d0      	adds	r0, r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4619      	mov	r1, r3
 8002c74:	f00c fa66 	bl	800f144 <memcpy>
      offset += length_stringsi;
 8002c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	3301      	adds	r3, #1
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	e7d1      	b.n	8002c2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3728      	adds	r7, #40	; 0x28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b08e      	sub	sp, #56	; 0x38
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cac:	3301      	adds	r3, #1
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	6a3a      	ldr	r2, [r7, #32]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbe:	3302      	adds	r3, #2
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	041b      	lsls	r3, r3, #16
 8002cc8:	6a3a      	ldr	r2, [r7, #32]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd0:	3303      	adds	r3, #3
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	6a3a      	ldr	r2, [r7, #32]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	6a3a      	ldr	r2, [r7, #32]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d90a      	bls.n	8002d06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f00c ff9a 	bl	800fc34 <realloc>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a3a      	ldr	r2, [r7, #32]
 8002d0a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d236      	bcs.n	8002d88 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d22:	6839      	ldr	r1, [r7, #0]
 8002d24:	440a      	add	r2, r1
 8002d26:	7812      	ldrb	r2, [r2, #0]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d30:	3301      	adds	r3, #1
 8002d32:	6839      	ldr	r1, [r7, #0]
 8002d34:	440b      	add	r3, r1
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d42:	3302      	adds	r3, #2
 8002d44:	6839      	ldr	r1, [r7, #0]
 8002d46:	440b      	add	r3, r1
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	041b      	lsls	r3, r3, #16
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d54:	3303      	adds	r3, #3
 8002d56:	6839      	ldr	r1, [r7, #0]
 8002d58:	440b      	add	r3, r1
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	061b      	lsls	r3, r3, #24
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	3208      	adds	r2, #8
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	3301      	adds	r3, #1
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
 8002d86:	e7c3      	b.n	8002d10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d94:	3301      	adds	r3, #1
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	4413      	add	r3, r2
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da6:	3302      	adds	r3, #2
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	041b      	lsls	r3, r3, #16
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	3303      	adds	r3, #3
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	061b      	lsls	r3, r3, #24
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dca:	3304      	adds	r3, #4
 8002dcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d90a      	bls.n	8002dee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4619      	mov	r1, r3
 8002de2:	4610      	mov	r0, r2
 8002de4:	f00c ff26 	bl	800fc34 <realloc>
 8002de8:	4602      	mov	r2, r0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002df4:	2300      	movs	r3, #0
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d236      	bcs.n	8002e70 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e0a:	6839      	ldr	r1, [r7, #0]
 8002e0c:	440a      	add	r2, r1
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e18:	3301      	adds	r3, #1
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	440b      	add	r3, r1
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	6839      	ldr	r1, [r7, #0]
 8002e2e:	440b      	add	r3, r1
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	041b      	lsls	r3, r3, #16
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3c:	3303      	adds	r3, #3
 8002e3e:	6839      	ldr	r1, [r7, #0]
 8002e40:	440b      	add	r3, r1
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e52:	3304      	adds	r3, #4
 8002e54:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	3214      	adds	r2, #20
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e6e:	e7c3      	b.n	8002df8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	4413      	add	r3, r2
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	4413      	add	r3, r2
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8e:	3302      	adds	r3, #2
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	041b      	lsls	r3, r3, #16
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea0:	3303      	adds	r3, #3
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	061b      	lsls	r3, r3, #24
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d90a      	bls.n	8002ed6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f00c feb2 	bl	800fc34 <realloc>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002edc:	2300      	movs	r3, #0
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d23f      	bcs.n	8002f6a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	441a      	add	r2, r3
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 f968 	bl	80041cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efe:	3304      	adds	r3, #4
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
 8002f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d20c      	bcs.n	8002f2c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	441a      	add	r2, r3
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	6839      	ldr	r1, [r7, #0]
 8002f1e:	440b      	add	r3, r1
 8002f20:	7812      	ldrb	r2, [r2, #0]
 8002f22:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	3301      	adds	r3, #1
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	e7ec      	b.n	8002f06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4413      	add	r3, r2
 8002f32:	3b01      	subs	r3, #1
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	4413      	add	r3, r2
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	441a      	add	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	3220      	adds	r2, #32
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	3301      	adds	r3, #1
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f68:	e7ba      	b.n	8002ee0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3738      	adds	r7, #56	; 0x38
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	08011e04 	.word	0x08011e04

08002f90 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	08011ce8 	.word	0x08011ce8

08002fac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	611a      	str	r2, [r3, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68d8      	ldr	r0, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6891      	ldr	r1, [r2, #8]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	4798      	blx	r3
 8002ff8:	4603      	mov	r3, r0
  };
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
  }
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8003030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <_ZN13STM32HardwareC1Ev+0x34>)
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	2000040c 	.word	0x2000040c

08003078 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f804 	bl	800308e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3304      	adds	r3, #4
 800309e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030a2:	4619      	mov	r1, r3
 80030a4:	f007 fbe6 	bl	800a874 <HAL_UART_Receive_DMA>
    }
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80030b8:	f04f 33ff 	mov.w	r3, #4294967295
 80030bc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff ffa8 	bl	800301a <_ZN13STM32Hardware10getRdmaIndEv>
 80030ca:	4603      	mov	r3, r0
 80030cc:	429c      	cmp	r4, r3
 80030ce:	bf14      	ite	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	2300      	moveq	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d012      	beq.n	8003100 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80030e0:	1c59      	adds	r1, r3, #1
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	791b      	ldrb	r3, [r3, #4]
 80030ee:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80030f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 8003100:	68fb      	ldr	r3, [r7, #12]
    }
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bd90      	pop	{r4, r7, pc}
	...

0800310c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b20      	cmp	r3, #32
 8003120:	d108      	bne.n	8003134 <_ZN13STM32Hardware5flushEv+0x28>
 8003122:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	f083 0301 	eor.w	r3, r3, #1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <_ZN13STM32Hardware5flushEv+0x28>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <_ZN13STM32Hardware5flushEv+0x2a>
 8003134:	2300      	movs	r3, #0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d03f      	beq.n	80031ba <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 800313a:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <_ZN13STM32Hardware5flushEv+0xb8>)
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800314c:	429a      	cmp	r2, r3
 800314e:	d031      	beq.n	80031b4 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800315c:	429a      	cmp	r2, r3
 800315e:	d20a      	bcs.n	8003176 <_ZN13STM32Hardware5flushEv+0x6a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003166:	b29a      	uxth	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800316e:	b29b      	uxth	r3, r3
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	b29b      	uxth	r3, r3
 8003174:	e006      	b.n	8003184 <_ZN13STM32Hardware5flushEv+0x78>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800317c:	b29b      	uxth	r3, r3
 800317e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8003182:	b29b      	uxth	r3, r3
 8003184:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003190:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	89fa      	ldrh	r2, [r7, #14]
 800319a:	4619      	mov	r1, r3
 800319c:	f007 faec 	bl	800a778 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80031a6:	89fb      	ldrh	r3, [r7, #14]
 80031a8:	4413      	add	r3, r2
 80031aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        }
        mutex = false;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <_ZN13STM32Hardware5flushEv+0xb8>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
      }
    }
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000510 	.word	0x20000510

080031c8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
      uint16_t n = length;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	827b      	strh	r3, [r7, #18]
      n = n <= tbuflen ? n : tbuflen;
 80031da:	8a7b      	ldrh	r3, [r7, #18]
 80031dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e0:	d803      	bhi.n	80031ea <_ZN13STM32Hardware5writeEPhi+0x22>
 80031e2:	f107 0312 	add.w	r3, r7, #18
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	e001      	b.n	80031ee <_ZN13STM32Hardware5writeEPhi+0x26>
 80031ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ee:	827b      	strh	r3, [r7, #18]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80031f0:	8a7b      	ldrh	r3, [r7, #18]
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80031fa:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80031fe:	4293      	cmp	r3, r2
 8003200:	bf28      	it	cs
 8003202:	4613      	movcs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800320c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	4618      	mov	r0, r3
 800321a:	f00b ff93 	bl	800f144 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003224:	8a7a      	ldrh	r2, [r7, #18]
 8003226:	4413      	add	r3, r2
 8003228:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

      if(n != n_tail){
 8003232:	8a7b      	ldrh	r3, [r7, #18]
 8003234:	461a      	mov	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	4293      	cmp	r3, r2
 800323a:	d00c      	beq.n	8003256 <_ZN13STM32Hardware5writeEPhi+0x8e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	18d1      	adds	r1, r2, r3
 8003248:	8a7b      	ldrh	r3, [r7, #18]
 800324a:	461a      	mov	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	461a      	mov	r2, r3
 8003252:	f00b ff77 	bl	800f144 <memcpy>
      }

      flush();
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f7ff ff58 	bl	800310c <_ZN13STM32Hardware5flushEv>
    }
 800325c:	bf00      	nop
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	f002 fae8 	bl	8005840 <HAL_GetTick>
 8003270:	4603      	mov	r3, r0
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff f850 	bl	800232c <_ZN3ros3MsgC1Ev>
 800328c:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	08011e84 	.word	0x08011e84

080032cc <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80032cc:	b480      	push	{r7}
 80032ce:	b08b      	sub	sp, #44	; 0x2c
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80032e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80032e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ea:	6838      	ldr	r0, [r7, #0]
 80032ec:	4401      	add	r1, r0
 80032ee:	b2d3      	uxtb	r3, r2
 80032f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80032f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	0a02      	lsrs	r2, r0, #8
 8003300:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003304:	0a0b      	lsrs	r3, r1, #8
 8003306:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003308:	3101      	adds	r1, #1
 800330a:	6838      	ldr	r0, [r7, #0]
 800330c:	4401      	add	r1, r0
 800330e:	b2d3      	uxtb	r3, r2
 8003310:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003312:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	0c02      	lsrs	r2, r0, #16
 8003320:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003324:	0c0b      	lsrs	r3, r1, #16
 8003326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003328:	3102      	adds	r1, #2
 800332a:	6838      	ldr	r0, [r7, #0]
 800332c:	4401      	add	r1, r0
 800332e:	b2d3      	uxtb	r3, r2
 8003330:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003332:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	0e02      	lsrs	r2, r0, #24
 8003340:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003344:	0e0b      	lsrs	r3, r1, #24
 8003346:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003348:	3103      	adds	r1, #3
 800334a:	6838      	ldr	r0, [r7, #0]
 800334c:	4401      	add	r1, r0
 800334e:	b2d3      	uxtb	r3, r2
 8003350:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003352:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	000a      	movs	r2, r1
 8003360:	2300      	movs	r3, #0
 8003362:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003364:	3104      	adds	r1, #4
 8003366:	6838      	ldr	r0, [r7, #0]
 8003368:	4401      	add	r1, r0
 800336a:	b2d3      	uxtb	r3, r2
 800336c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800336e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	0a0a      	lsrs	r2, r1, #8
 800337c:	2300      	movs	r3, #0
 800337e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003380:	3105      	adds	r1, #5
 8003382:	6838      	ldr	r0, [r7, #0]
 8003384:	4401      	add	r1, r0
 8003386:	b2d3      	uxtb	r3, r2
 8003388:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800338a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	0c0a      	lsrs	r2, r1, #16
 8003398:	2300      	movs	r3, #0
 800339a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800339c:	3106      	adds	r1, #6
 800339e:	6838      	ldr	r0, [r7, #0]
 80033a0:	4401      	add	r1, r0
 80033a2:	b2d3      	uxtb	r3, r2
 80033a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80033a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	0e0a      	lsrs	r2, r1, #24
 80033b4:	2300      	movs	r3, #0
 80033b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b8:	3107      	adds	r1, #7
 80033ba:	6838      	ldr	r0, [r7, #0]
 80033bc:	4401      	add	r1, r0
 80033be:	b2d3      	uxtb	r3, r2
 80033c0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	3308      	adds	r3, #8
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80033ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80033d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d8:	6838      	ldr	r0, [r7, #0]
 80033da:	4401      	add	r1, r0
 80033dc:	b2d3      	uxtb	r3, r2
 80033de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80033e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	0a02      	lsrs	r2, r0, #8
 80033ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80033f2:	0a0b      	lsrs	r3, r1, #8
 80033f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033f6:	3101      	adds	r1, #1
 80033f8:	6838      	ldr	r0, [r7, #0]
 80033fa:	4401      	add	r1, r0
 80033fc:	b2d3      	uxtb	r3, r2
 80033fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003400:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	0c02      	lsrs	r2, r0, #16
 800340e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003412:	0c0b      	lsrs	r3, r1, #16
 8003414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003416:	3102      	adds	r1, #2
 8003418:	6838      	ldr	r0, [r7, #0]
 800341a:	4401      	add	r1, r0
 800341c:	b2d3      	uxtb	r3, r2
 800341e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003420:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	0e02      	lsrs	r2, r0, #24
 800342e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003432:	0e0b      	lsrs	r3, r1, #24
 8003434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003436:	3103      	adds	r1, #3
 8003438:	6838      	ldr	r0, [r7, #0]
 800343a:	4401      	add	r1, r0
 800343c:	b2d3      	uxtb	r3, r2
 800343e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003440:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	000a      	movs	r2, r1
 800344e:	2300      	movs	r3, #0
 8003450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003452:	3104      	adds	r1, #4
 8003454:	6838      	ldr	r0, [r7, #0]
 8003456:	4401      	add	r1, r0
 8003458:	b2d3      	uxtb	r3, r2
 800345a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800345c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	0a0a      	lsrs	r2, r1, #8
 800346a:	2300      	movs	r3, #0
 800346c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800346e:	3105      	adds	r1, #5
 8003470:	6838      	ldr	r0, [r7, #0]
 8003472:	4401      	add	r1, r0
 8003474:	b2d3      	uxtb	r3, r2
 8003476:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003478:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	0c0a      	lsrs	r2, r1, #16
 8003486:	2300      	movs	r3, #0
 8003488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800348a:	3106      	adds	r1, #6
 800348c:	6838      	ldr	r0, [r7, #0]
 800348e:	4401      	add	r1, r0
 8003490:	b2d3      	uxtb	r3, r2
 8003492:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003494:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	0e0a      	lsrs	r2, r1, #24
 80034a2:	2300      	movs	r3, #0
 80034a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a6:	3107      	adds	r1, #7
 80034a8:	6838      	ldr	r0, [r7, #0]
 80034aa:	4401      	add	r1, r0
 80034ac:	b2d3      	uxtb	r3, r2
 80034ae:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	3308      	adds	r3, #8
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80034bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80034c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c6:	6838      	ldr	r0, [r7, #0]
 80034c8:	4401      	add	r1, r0
 80034ca:	b2d3      	uxtb	r3, r2
 80034cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80034ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	0a02      	lsrs	r2, r0, #8
 80034dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80034e0:	0a0b      	lsrs	r3, r1, #8
 80034e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034e4:	3101      	adds	r1, #1
 80034e6:	6838      	ldr	r0, [r7, #0]
 80034e8:	4401      	add	r1, r0
 80034ea:	b2d3      	uxtb	r3, r2
 80034ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80034ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	0c02      	lsrs	r2, r0, #16
 80034fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003500:	0c0b      	lsrs	r3, r1, #16
 8003502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003504:	3102      	adds	r1, #2
 8003506:	6838      	ldr	r0, [r7, #0]
 8003508:	4401      	add	r1, r0
 800350a:	b2d3      	uxtb	r3, r2
 800350c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800350e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	0e02      	lsrs	r2, r0, #24
 800351c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003520:	0e0b      	lsrs	r3, r1, #24
 8003522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003524:	3103      	adds	r1, #3
 8003526:	6838      	ldr	r0, [r7, #0]
 8003528:	4401      	add	r1, r0
 800352a:	b2d3      	uxtb	r3, r2
 800352c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800352e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	000a      	movs	r2, r1
 800353c:	2300      	movs	r3, #0
 800353e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003540:	3104      	adds	r1, #4
 8003542:	6838      	ldr	r0, [r7, #0]
 8003544:	4401      	add	r1, r0
 8003546:	b2d3      	uxtb	r3, r2
 8003548:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800354a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	0a0a      	lsrs	r2, r1, #8
 8003558:	2300      	movs	r3, #0
 800355a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800355c:	3105      	adds	r1, #5
 800355e:	6838      	ldr	r0, [r7, #0]
 8003560:	4401      	add	r1, r0
 8003562:	b2d3      	uxtb	r3, r2
 8003564:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003566:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	0c0a      	lsrs	r2, r1, #16
 8003574:	2300      	movs	r3, #0
 8003576:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003578:	3106      	adds	r1, #6
 800357a:	6838      	ldr	r0, [r7, #0]
 800357c:	4401      	add	r1, r0
 800357e:	b2d3      	uxtb	r3, r2
 8003580:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003582:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	0e0a      	lsrs	r2, r1, #24
 8003590:	2300      	movs	r3, #0
 8003592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003594:	3107      	adds	r1, #7
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	4401      	add	r1, r0
 800359a:	b2d3      	uxtb	r3, r2
 800359c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	3308      	adds	r3, #8
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80035a6:	4618      	mov	r0, r3
 80035a8:	372c      	adds	r7, #44	; 0x2c
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80035b2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80035b6:	b0eb      	sub	sp, #428	; 0x1ac
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80035be:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80035d4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80035d8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80035dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035e0:	4413      	add	r3, r2
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2200      	movs	r2, #0
 80035e8:	461c      	mov	r4, r3
 80035ea:	4615      	mov	r5, r2
 80035ec:	ea40 0804 	orr.w	r8, r0, r4
 80035f0:	ea41 0905 	orr.w	r9, r1, r5
 80035f4:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035f8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80035fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003606:	4413      	add	r3, r2
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2200      	movs	r2, #0
 800360e:	469a      	mov	sl, r3
 8003610:	4693      	mov	fp, r2
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800361e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003622:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003626:	ea40 0402 	orr.w	r4, r0, r2
 800362a:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800362e:	430b      	orrs	r3, r1
 8003630:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003634:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003638:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800363c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003640:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003644:	1c9a      	adds	r2, r3, #2
 8003646:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800364a:	4413      	add	r3, r2
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2200      	movs	r2, #0
 8003652:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003656:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003666:	464c      	mov	r4, r9
 8003668:	0423      	lsls	r3, r4, #16
 800366a:	4644      	mov	r4, r8
 800366c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003670:	4644      	mov	r4, r8
 8003672:	0422      	lsls	r2, r4, #16
 8003674:	ea40 0402 	orr.w	r4, r0, r2
 8003678:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800367c:	430b      	orrs	r3, r1
 800367e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003682:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8003686:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800368a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800368e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003692:	1cda      	adds	r2, r3, #3
 8003694:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003698:	4413      	add	r3, r2
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80036a4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80036a8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80036ac:	4623      	mov	r3, r4
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80036b4:	4623      	mov	r3, r4
 80036b6:	061b      	lsls	r3, r3, #24
 80036b8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80036bc:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80036c0:	4623      	mov	r3, r4
 80036c2:	4303      	orrs	r3, r0
 80036c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80036c8:	462b      	mov	r3, r5
 80036ca:	430b      	orrs	r3, r1
 80036cc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80036d0:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80036d4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80036d8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80036dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036e0:	1d1a      	adds	r2, r3, #4
 80036e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036e6:	4413      	add	r3, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2200      	movs	r2, #0
 80036ee:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80036f2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003702:	0023      	movs	r3, r4
 8003704:	2200      	movs	r2, #0
 8003706:	ea40 0402 	orr.w	r4, r0, r2
 800370a:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800370e:	430b      	orrs	r3, r1
 8003710:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003714:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003718:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800371c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003720:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003724:	1d5a      	adds	r2, r3, #5
 8003726:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800372a:	4413      	add	r3, r2
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2200      	movs	r2, #0
 8003732:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003736:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003746:	0223      	lsls	r3, r4, #8
 8003748:	2200      	movs	r2, #0
 800374a:	ea40 0402 	orr.w	r4, r0, r2
 800374e:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003752:	430b      	orrs	r3, r1
 8003754:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003758:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800375c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003760:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003764:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003768:	1d9a      	adds	r2, r3, #6
 800376a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800376e:	4413      	add	r3, r2
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2200      	movs	r2, #0
 8003776:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800377a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800378a:	0423      	lsls	r3, r4, #16
 800378c:	2200      	movs	r2, #0
 800378e:	ea40 0402 	orr.w	r4, r0, r2
 8003792:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003796:	430b      	orrs	r3, r1
 8003798:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800379c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80037a0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80037a4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037ac:	1dda      	adds	r2, r3, #7
 80037ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037b2:	4413      	add	r3, r2
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2200      	movs	r2, #0
 80037ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80037be:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80037ce:	0623      	lsls	r3, r4, #24
 80037d0:	2200      	movs	r2, #0
 80037d2:	ea40 0402 	orr.w	r4, r0, r2
 80037d6:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80037da:	430b      	orrs	r3, r1
 80037dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80037e0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80037e4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80037e8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037ec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80037f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80037f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037f8:	3308      	adds	r3, #8
 80037fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800380a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800380e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003812:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003816:	4413      	add	r3, r2
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2200      	movs	r2, #0
 800381e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003822:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003826:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800382a:	4623      	mov	r3, r4
 800382c:	4303      	orrs	r3, r0
 800382e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003832:	462b      	mov	r3, r5
 8003834:	430b      	orrs	r3, r1
 8003836:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800383a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800383e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003842:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003846:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003850:	4413      	add	r3, r2
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2200      	movs	r2, #0
 8003858:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800385c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800386c:	464c      	mov	r4, r9
 800386e:	0223      	lsls	r3, r4, #8
 8003870:	4644      	mov	r4, r8
 8003872:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003876:	4644      	mov	r4, r8
 8003878:	0222      	lsls	r2, r4, #8
 800387a:	ea40 0402 	orr.w	r4, r0, r2
 800387e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003882:	430b      	orrs	r3, r1
 8003884:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003888:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800388c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003890:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003894:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003898:	1c9a      	adds	r2, r3, #2
 800389a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800389e:	4413      	add	r3, r2
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80038ba:	464c      	mov	r4, r9
 80038bc:	0423      	lsls	r3, r4, #16
 80038be:	4644      	mov	r4, r8
 80038c0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80038c4:	4644      	mov	r4, r8
 80038c6:	0422      	lsls	r2, r4, #16
 80038c8:	ea40 0402 	orr.w	r4, r0, r2
 80038cc:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80038d0:	430b      	orrs	r3, r1
 80038d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038d6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80038da:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80038de:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80038e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038e6:	1cda      	adds	r2, r3, #3
 80038e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038ec:	4413      	add	r3, r2
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2200      	movs	r2, #0
 80038f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038f8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038fc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003900:	4623      	mov	r3, r4
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003908:	4623      	mov	r3, r4
 800390a:	061b      	lsls	r3, r3, #24
 800390c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003910:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003914:	4623      	mov	r3, r4
 8003916:	4303      	orrs	r3, r0
 8003918:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800391c:	462b      	mov	r3, r5
 800391e:	430b      	orrs	r3, r1
 8003920:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003924:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003928:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800392c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003930:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003934:	1d1a      	adds	r2, r3, #4
 8003936:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800393a:	4413      	add	r3, r2
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2200      	movs	r2, #0
 8003942:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003946:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003956:	0023      	movs	r3, r4
 8003958:	2200      	movs	r2, #0
 800395a:	ea40 0402 	orr.w	r4, r0, r2
 800395e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003962:	430b      	orrs	r3, r1
 8003964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003968:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800396c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003970:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003974:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003978:	1d5a      	adds	r2, r3, #5
 800397a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800397e:	4413      	add	r3, r2
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2200      	movs	r2, #0
 8003986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800398a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800399a:	0223      	lsls	r3, r4, #8
 800399c:	2200      	movs	r2, #0
 800399e:	ea40 0402 	orr.w	r4, r0, r2
 80039a2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80039a6:	430b      	orrs	r3, r1
 80039a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039ac:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80039b0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80039b4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039b8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039bc:	1d9a      	adds	r2, r3, #6
 80039be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039c2:	4413      	add	r3, r2
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2200      	movs	r2, #0
 80039ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80039de:	0423      	lsls	r3, r4, #16
 80039e0:	2200      	movs	r2, #0
 80039e2:	ea40 0402 	orr.w	r4, r0, r2
 80039e6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80039ea:	430b      	orrs	r3, r1
 80039ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039f0:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80039f4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80039f8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a00:	1dda      	adds	r2, r3, #7
 8003a02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a06:	4413      	add	r3, r2
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003a22:	0623      	lsls	r3, r4, #24
 8003a24:	2200      	movs	r2, #0
 8003a26:	ea40 0402 	orr.w	r4, r0, r2
 8003a2a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003a34:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003a38:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003a3c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a40:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003a44:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003a48:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a5e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003a62:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003a66:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a6a:	4413      	add	r3, r2
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2200      	movs	r2, #0
 8003a72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a76:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a7a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003a7e:	4623      	mov	r3, r4
 8003a80:	4303      	orrs	r3, r0
 8003a82:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a84:	462b      	mov	r3, r5
 8003a86:	430b      	orrs	r3, r1
 8003a88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a8a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003a8e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a92:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003a96:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003aa0:	4413      	add	r3, r2
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	673b      	str	r3, [r7, #112]	; 0x70
 8003aaa:	677a      	str	r2, [r7, #116]	; 0x74
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ab8:	464c      	mov	r4, r9
 8003aba:	0223      	lsls	r3, r4, #8
 8003abc:	4644      	mov	r4, r8
 8003abe:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ac2:	4644      	mov	r4, r8
 8003ac4:	0222      	lsls	r2, r4, #8
 8003ac6:	ea40 0402 	orr.w	r4, r0, r2
 8003aca:	66bc      	str	r4, [r7, #104]	; 0x68
 8003acc:	430b      	orrs	r3, r1
 8003ace:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ad0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003ad4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ad8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003adc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ae0:	1c9a      	adds	r2, r3, #2
 8003ae2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ae6:	4413      	add	r3, r2
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2200      	movs	r2, #0
 8003aee:	663b      	str	r3, [r7, #96]	; 0x60
 8003af0:	667a      	str	r2, [r7, #100]	; 0x64
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003afe:	464c      	mov	r4, r9
 8003b00:	0423      	lsls	r3, r4, #16
 8003b02:	4644      	mov	r4, r8
 8003b04:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003b08:	4644      	mov	r4, r8
 8003b0a:	0422      	lsls	r2, r4, #16
 8003b0c:	ea40 0402 	orr.w	r4, r0, r2
 8003b10:	65bc      	str	r4, [r7, #88]	; 0x58
 8003b12:	430b      	orrs	r3, r1
 8003b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b16:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003b1a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b1e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b26:	1cda      	adds	r2, r3, #3
 8003b28:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b2c:	4413      	add	r3, r2
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2200      	movs	r2, #0
 8003b34:	653b      	str	r3, [r7, #80]	; 0x50
 8003b36:	657a      	str	r2, [r7, #84]	; 0x54
 8003b38:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003b3c:	4623      	mov	r3, r4
 8003b3e:	0a1b      	lsrs	r3, r3, #8
 8003b40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b42:	4623      	mov	r3, r4
 8003b44:	061b      	lsls	r3, r3, #24
 8003b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b48:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003b4c:	4623      	mov	r3, r4
 8003b4e:	4303      	orrs	r3, r0
 8003b50:	643b      	str	r3, [r7, #64]	; 0x40
 8003b52:	462b      	mov	r3, r5
 8003b54:	430b      	orrs	r3, r1
 8003b56:	647b      	str	r3, [r7, #68]	; 0x44
 8003b58:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003b5c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b60:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b68:	1d1a      	adds	r2, r3, #4
 8003b6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b6e:	4413      	add	r3, r2
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2200      	movs	r2, #0
 8003b76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003b84:	0023      	movs	r3, r4
 8003b86:	2200      	movs	r2, #0
 8003b88:	ea40 0402 	orr.w	r4, r0, r2
 8003b8c:	633c      	str	r4, [r7, #48]	; 0x30
 8003b8e:	430b      	orrs	r3, r1
 8003b90:	637b      	str	r3, [r7, #52]	; 0x34
 8003b92:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003b96:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b9a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b9e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ba2:	1d5a      	adds	r2, r3, #5
 8003ba4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ba8:	4413      	add	r3, r2
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2200      	movs	r2, #0
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003bbe:	0223      	lsls	r3, r4, #8
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	ea40 0402 	orr.w	r4, r0, r2
 8003bc6:	623c      	str	r4, [r7, #32]
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
 8003bcc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003bd0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003bd4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003bd8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bdc:	3306      	adds	r3, #6
 8003bde:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003be2:	4413      	add	r3, r2
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2200      	movs	r2, #0
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	61fa      	str	r2, [r7, #28]
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	69bc      	ldr	r4, [r7, #24]
 8003bf8:	0423      	lsls	r3, r4, #16
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	ea40 0402 	orr.w	r4, r0, r2
 8003c00:	613c      	str	r4, [r7, #16]
 8003c02:	430b      	orrs	r3, r1
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003c0a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c0e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c12:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c16:	3307      	adds	r3, #7
 8003c18:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003c1c:	4413      	add	r3, r2
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2200      	movs	r2, #0
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	60fa      	str	r2, [r7, #12]
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	68bc      	ldr	r4, [r7, #8]
 8003c32:	0623      	lsls	r3, r4, #24
 8003c34:	2200      	movs	r2, #0
 8003c36:	ea40 0402 	orr.w	r4, r0, r2
 8003c3a:	603c      	str	r4, [r7, #0]
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003c44:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003c48:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003c4c:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003c50:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003c54:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c58:	3308      	adds	r3, #8
 8003c5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003c5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003c62:	4618      	mov	r0, r3
 8003c64:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003c6e:	4770      	bx	lr

08003c70 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	08011d0c 	.word	0x08011d0c

08003c8c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003c96:	4618      	mov	r0, r3
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	08011d24 	.word	0x08011d24

08003ca8 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
      data("")
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe fb3a 	bl	800232c <_ZN3ros3MsgC1Ev>
 8003cb8:	4a05      	ldr	r2, [pc, #20]	; (8003cd0 <_ZN8std_msgs6StringC1Ev+0x28>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a04      	ldr	r2, [pc, #16]	; (8003cd4 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8003cc2:	605a      	str	r2, [r3, #4]
    {
    }
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	08011e6c 	.word	0x08011e6c
 8003cd4:	08011c6c 	.word	0x08011c6c

08003cd8 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fa78 	bl	80001e0 <strlen>
 8003cf0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fa48 	bl	8004190 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3304      	adds	r3, #4
 8003d04:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	18d0      	adds	r0, r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	4619      	mov	r1, r3
 8003d14:	f00b fa16 	bl	800f144 <memcpy>
      offset += length_data;
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
      return offset;
 8003d20:	68fb      	ldr	r3, [r7, #12]
    }
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	441a      	add	r2, r3
 8003d3e:	f107 030c 	add.w	r3, r7, #12
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fa41 	bl	80041cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4413      	add	r3, r2
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d20c      	bcs.n	8003d7a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	441a      	add	r2, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	6839      	ldr	r1, [r7, #0]
 8003d6c:	440b      	add	r3, r1
 8003d6e:	7812      	ldrb	r2, [r2, #0]
 8003d70:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	3301      	adds	r3, #1
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	e7ec      	b.n	8003d54 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4413      	add	r3, r2
 8003d80:	3b01      	subs	r3, #1
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	4413      	add	r3, r2
 8003d86:	2200      	movs	r2, #0
 8003d88:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	441a      	add	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
     return offset;
 8003d9e:	693b      	ldr	r3, [r7, #16]
    }
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	08011d48 	.word	0x08011d48

08003dc4 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	4b03      	ldr	r3, [pc, #12]	; (8003ddc <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	08011d58 	.word	0x08011d58

08003de0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fe fa9e 	bl	800232c <_ZN3ros3MsgC1Ev>
 8003df0:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3308      	adds	r3, #8
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff fa3e 	bl	800327c <_ZN13geometry_msgs7Vector3C1Ev>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3328      	adds	r3, #40	; 0x28
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fa39 	bl	800327c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	08011e54 	.word	0x08011e54

08003e18 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f103 0008 	add.w	r0, r3, #8
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	4413      	add	r3, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	f7ff fa4a 	bl	80032cc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f7ff fa3d 	bl	80032cc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003e52:	4602      	mov	r2, r0
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
      return offset;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
    }
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f103 0008 	add.w	r0, r3, #8
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	4619      	mov	r1, r3
 8003e80:	f7ff fb97 	bl	80035b2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003e84:	4602      	mov	r2, r0
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	4413      	add	r3, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f7ff fb8a 	bl	80035b2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
     return offset;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
    }
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	08011d7c 	.word	0x08011d7c

08003ecc <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	08011d90 	.word	0x08011d90

08003ee8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	4a04      	ldr	r2, [pc, #16]	; (8003f04 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	08011eb4 	.word	0x08011eb4

08003f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 1024,
         int OUTPUT_SIZE = 1024>
class NodeHandle_ : public NodeHandleBase_
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff ffe8 	bl	8003ee8 <_ZN3ros15NodeHandleBase_C1Ev>
 8003f18:	4a45      	ldr	r2, [pc, #276]	; (8004030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff f88c 	bl	8003040 <_ZN13STM32HardwareC1Ev>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f00b f903 	bl	800f160 <memset>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f00b f8fa 	bl	800f160 <memset>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f72:	3324      	adds	r3, #36	; 0x24
 8003f74:	2264      	movs	r2, #100	; 0x64
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f00b f8f1 	bl	800f160 <memset>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f84:	3388      	adds	r3, #136	; 0x88
 8003f86:	2264      	movs	r2, #100	; 0x64
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f00b f8e8 	bl	800f160 <memset>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f96:	461a      	mov	r2, r3
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2300      	movs	r3, #0
 8003fec:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004004:	461a      	mov	r2, r3
 8004006:	2300      	movs	r3, #0
 8004008:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800401e:	3314      	adds	r3, #20
 8004020:	4618      	mov	r0, r3
 8004022:	f7fe fcf7 	bl	8002a14 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	08011e40 	.word	0x08011e40

08004034 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE>:
extern float rpm_left_velocity,rpm_right_velocity;
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;

void commandVelocityCallback(const geometry_msgs::Twist& cmd_vel_msg)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
	SubcribeVelocityFromRos(cmd_vel_msg.linear.x,cmd_vel_msg.angular.z,&left_vel,&right_vel);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	ed93 7b04 	vldr	d7, [r3, #16]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8004048:	4907      	ldr	r1, [pc, #28]	; (8004068 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x34>)
 800404a:	4808      	ldr	r0, [pc, #32]	; (800406c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x38>)
 800404c:	eeb0 1a46 	vmov.f32	s2, s12
 8004050:	eef0 1a66 	vmov.f32	s3, s13
 8004054:	eeb0 0a47 	vmov.f32	s0, s14
 8004058:	eef0 0a67 	vmov.f32	s1, s15
 800405c:	f7fd fc14 	bl	8001888 <SubcribeVelocityFromRos>
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20000014 	.word	0x20000014
 800406c:	20000010 	.word	0x20000010

08004070 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8004078:	4805      	ldr	r0, [pc, #20]	; (8004090 <HAL_UART_TxCpltCallback+0x20>)
 800407a:	f000 f901 	bl	8004280 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 800407e:	4603      	mov	r3, r0
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff f843 	bl	800310c <_ZN13STM32Hardware5flushEv>
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000514 	.word	0x20000514

08004094 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 800409c:	4805      	ldr	r0, [pc, #20]	; (80040b4 <HAL_UART_RxCpltCallback+0x20>)
 800409e:	f000 f8ef 	bl	8004280 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 80040a2:	4603      	mov	r3, r0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe fff2 	bl	800308e <_ZN13STM32Hardware10reset_rbufEv>
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000514 	.word	0x20000514

080040b8 <setup>:

void setup(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  nh.initNode();
 80040bc:	4806      	ldr	r0, [pc, #24]	; (80040d8 <setup+0x20>)
 80040be:	f000 f8eb 	bl	8004298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
  nh.advertise(chatter);
 80040c2:	4906      	ldr	r1, [pc, #24]	; (80040dc <setup+0x24>)
 80040c4:	4804      	ldr	r0, [pc, #16]	; (80040d8 <setup+0x20>)
 80040c6:	f000 f910 	bl	80042ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
  nh.subscribe(cmd_vel_sub);
 80040ca:	4905      	ldr	r1, [pc, #20]	; (80040e0 <setup+0x28>)
 80040cc:	4802      	ldr	r0, [pc, #8]	; (80040d8 <setup+0x20>)
 80040ce:	f000 f93c 	bl	800434a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E>


}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000514 	.word	0x20000514
 80040dc:	20001658 	.word	0x20001658
 80040e0:	20001670 	.word	0x20001670

080040e4 <loop>:

void loop(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0

  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 80040e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040ec:	481f      	ldr	r0, [pc, #124]	; (800416c <loop+0x88>)
 80040ee:	f002 faa0 	bl	8006632 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 80040f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040f6:	481d      	ldr	r0, [pc, #116]	; (800416c <loop+0x88>)
 80040f8:	f002 fa9b 	bl	8006632 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 80040fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004100:	481a      	ldr	r0, [pc, #104]	; (800416c <loop+0x88>)
 8004102:	f002 fa96 	bl	8006632 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8004106:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800410a:	4818      	ldr	r0, [pc, #96]	; (800416c <loop+0x88>)
 800410c:	f002 fa91 	bl	8006632 <HAL_GPIO_TogglePin>

  ReadEncoder();
 8004110:	f7fd fbac 	bl	800186c <ReadEncoder>
  ComputeVelocity();
 8004114:	f7fd fbb1 	bl	800187a <ComputeVelocity>

  PID(&left_vel,&rpm_left_velocity,&LeftPidOut);
 8004118:	4a15      	ldr	r2, [pc, #84]	; (8004170 <loop+0x8c>)
 800411a:	4916      	ldr	r1, [pc, #88]	; (8004174 <loop+0x90>)
 800411c:	4816      	ldr	r0, [pc, #88]	; (8004178 <loop+0x94>)
 800411e:	f7fd fac3 	bl	80016a8 <PID>
//    PID(&right_vel,&rpm_right_velocity,&RightPidOut);
  HAL_Delay(1000*SAMPLE_TIME);
 8004122:	2032      	movs	r0, #50	; 0x32
 8004124:	f001 fb98 	bl	8005858 <HAL_Delay>
	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,fabs(round(LeftPidOut)));
 8004128:	4b11      	ldr	r3, [pc, #68]	; (8004170 <loop+0x8c>)
 800412a:	edd3 7a00 	vldr	s15, [r3]
 800412e:	eeb0 0a67 	vmov.f32	s0, s15
 8004132:	f7fe f8da 	bl	80022ea <_ZSt5roundf>
 8004136:	eef0 7a40 	vmov.f32	s15, s0
 800413a:	eeb0 0a67 	vmov.f32	s0, s15
 800413e:	f7fe f8c4 	bl	80022ca <_ZSt4fabsf>
 8004142:	eef0 7a40 	vmov.f32	s15, s0
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <loop+0x98>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800414e:	ee17 2a90 	vmov	r2, s15
 8004152:	63da      	str	r2, [r3, #60]	; 0x3c
//	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,fabs(round(RightPidOut)));

//	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,fabs(round(200)));
  str_msg.data = hello;
 8004154:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <loop+0x9c>)
 8004156:	4a0b      	ldr	r2, [pc, #44]	; (8004184 <loop+0xa0>)
 8004158:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 800415a:	4909      	ldr	r1, [pc, #36]	; (8004180 <loop+0x9c>)
 800415c:	480a      	ldr	r0, [pc, #40]	; (8004188 <loop+0xa4>)
 800415e:	f7fe ff3c 	bl	8002fda <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 8004162:	480a      	ldr	r0, [pc, #40]	; (800418c <loop+0xa8>)
 8004164:	f000 f91c 	bl	80043a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
//
//  HAL_Delay(100);
}
 8004168:	bf00      	nop
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40020c00 	.word	0x40020c00
 8004170:	200016d0 	.word	0x200016d0
 8004174:	20001720 	.word	0x20001720
 8004178:	20000010 	.word	0x20000010
 800417c:	200003c4 	.word	0x200003c4
 8004180:	20001650 	.word	0x20001650
 8004184:	20000000 	.word	0x20000000
 8004188:	20001658 	.word	0x20001658
 800418c:	20000514 	.word	0x20000514

08004190 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d80d      	bhi.n	80041c0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	fa22 f103 	lsr.w	r1, r2, r3
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	b2ca      	uxtb	r2, r1
 80041b6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3301      	adds	r3, #1
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	e7ee      	b.n	800419e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d811      	bhi.n	800420a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6839      	ldr	r1, [r7, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	440a      	add	r2, r1
 80041f0:	7812      	ldrb	r2, [r2, #0]
 80041f2:	4611      	mov	r1, r2
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	00d2      	lsls	r2, r2, #3
 80041f8:	fa01 f202 	lsl.w	r2, r1, r2
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3301      	adds	r3, #1
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	e7ea      	b.n	80041e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	4a04      	ldr	r2, [pc, #16]	; (8004234 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	08011e9c 	.word	0x08011e9c

08004238 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff ffe5 	bl	8004218 <_ZN3ros11Subscriber_C1Ev>
 800424e:	4a0b      	ldr	r2, [pc, #44]	; (800427c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3310      	adds	r3, #16
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fdc1 	bl	8003de0 <_ZN13geometry_msgs5TwistC1Ev>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	659a      	str	r2, [r3, #88]	; 0x58
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	609a      	str	r2, [r3, #8]
  };
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	08011e28 	.word	0x08011e28

08004280 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
  }
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fe fee7 	bl	8003078 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b0:	461a      	mov	r2, r3
 80042b2:	2300      	movs	r3, #0
 80042b4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    bytes_ = 0;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042be:	461a      	mov	r2, r3
 80042c0:	2300      	movs	r3, #0
 80042c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    index_ = 0;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042cc:	461a      	mov	r2, r3
 80042ce:	2300      	movs	r3, #0
 80042d0:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    topic_ = 0;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042da:	461a      	mov	r2, r3
 80042dc:	2300      	movs	r3, #0
 80042de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  };
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80042ea:	b480      	push	{r7}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b18      	cmp	r3, #24
 80042fc:	dc1e      	bgt.n	800433c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d111      	bne.n	8004334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	60da      	str	r2, [r3, #12]
        return true;
 8004330:	2301      	movs	r3, #1
 8004332:	e004      	b.n	800433e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	3301      	adds	r3, #1
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	e7dd      	b.n	80042f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 800433c:	2300      	movs	r3, #0
  }
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b18      	cmp	r3, #24
 800435c:	dc19      	bgt.n	8004392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10d      	bne.n	800438a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004376:	6839      	ldr	r1, [r7, #0]
 8004378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	605a      	str	r2, [r3, #4]
        return true;
 8004386:	2301      	movs	r3, #1
 8004388:	e004      	b.n	8004394 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3301      	adds	r3, #1
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e7e2      	b.n	8004358 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8004392:	2300      	movs	r3, #0
  }
 8004394:	4618      	mov	r0, r3
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce() override
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe ff59 	bl	8003264 <_ZN13STM32Hardware4timeEv>
 80043b2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d905      	bls.n	80043d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    if (mode_ != MODE_FIRST_FF)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043dc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00e      	beq.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ea:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d906      	bls.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fa:	461a      	mov	r2, r3
 80043fc:	2300      	movs	r3, #0
 80043fe:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
      if (spin_timeout_ > 0)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8004408:	2b00      	cmp	r3, #0
 800440a:	d014      	beq.n	8004436 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe ff27 	bl	8003264 <_ZN13STM32Hardware4timeEv>
 8004416:	4602      	mov	r2, r0
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	1ad2      	subs	r2, r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8004422:	429a      	cmp	r2, r3
 8004424:	bf8c      	ite	hi
 8004426:	2301      	movhi	r3, #1
 8004428:	2300      	movls	r3, #0
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 8004430:	f06f 0301 	mvn.w	r3, #1
 8004434:	e221      	b.n	800487a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3304      	adds	r3, #4
 800443a:	4618      	mov	r0, r3
 800443c:	f7fe fe38 	bl	80030b0 <_ZN13STM32Hardware4readEv>
 8004440:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	f2c0 81fa 	blt.w	800483e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004450:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4413      	add	r3, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800445e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004468:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800446c:	2b07      	cmp	r3, #7
 800446e:	d12b      	bne.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004476:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8004482:	f8c1 20f8 	str.w	r2, [r1, #248]	; 0xf8
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	b2d1      	uxtb	r1, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	4413      	add	r3, r2
 800448e:	460a      	mov	r2, r1
 8004490:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800449a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800449e:	3b01      	subs	r3, #1
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1a4      	bne.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044be:	461a      	mov	r2, r3
 80044c0:	2308      	movs	r3, #8
 80044c2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80044c6:	e79c      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d130      	bne.n	8004538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2bff      	cmp	r3, #255	; 0xff
 80044da:	d112      	bne.n	8004502 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80044e6:	3301      	adds	r3, #1
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044ee:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3314      	adds	r3, #20
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044fc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8004500:	e77f      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3304      	adds	r3, #4
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe feac 	bl	8003264 <_ZN13STM32Hardware4timeEv>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	; 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	bf8c      	ite	hi
 800451a:	2301      	movhi	r3, #1
 800451c:	2300      	movls	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	f43f af6e 	beq.w	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          return SPIN_TIMEOUT;
 8004532:	f06f 0301 	mvn.w	r3, #1
 8004536:	e1a0      	b.n	800487a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800453e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004542:	2b01      	cmp	r3, #1
 8004544:	d121      	bne.n	800458a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2bfe      	cmp	r3, #254	; 0xfe
 800454a:	d10b      	bne.n	8004564 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004552:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004556:	3301      	adds	r3, #1
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800455e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004562:	e74e      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456a:	461a      	mov	r2, r3
 800456c:	2300      	movs	r3, #0
 800456e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          if (configured_ == false)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004578:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	f47f af40 	bne.w	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f97d 	bl	8004882 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 8004588:	e73b      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004590:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004594:	2b02      	cmp	r3, #2
 8004596:	d120      	bne.n	80045da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459e:	461a      	mov	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        index_ = 0;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ac:	461a      	mov	r2, r3
 80045ae:	2300      	movs	r3, #0
 80045b0:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80045be:	3301      	adds	r3, #1
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045c6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte for calculating size checksum */
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d0:	461a      	mov	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80045d8:	e713      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d118      	bne.n	800461a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ee:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	4413      	add	r3, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        mode_++;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004608:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800460c:	3301      	adds	r3, #1
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004614:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004618:	e6f3      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004620:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004624:	2b04      	cmp	r3, #4
 8004626:	d11f      	bne.n	8004668 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800462e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004632:	425a      	negs	r2, r3
 8004634:	b2db      	uxtb	r3, r3
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	bf58      	it	pl
 800463a:	4253      	negpl	r3, r2
 800463c:	2bff      	cmp	r3, #255	; 0xff
 800463e:	d10b      	bne.n	8004658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004646:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800464a:	3301      	adds	r3, #1
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004652:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004656:	e6d4      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465e:	461a      	mov	r2, r3
 8004660:	2300      	movs	r3, #0
 8004662:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004666:	e6cc      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004672:	2b05      	cmp	r3, #5
 8004674:	d119      	bne.n	80046aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800467c:	461a      	mov	r2, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800468e:	3301      	adds	r3, #1
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004696:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte included in checksum */
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a0:	461a      	mov	r2, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80046a8:	e6ab      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80046b4:	2b06      	cmp	r3, #6
 80046b6:	d123      	bne.n	8004700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046be:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	4413      	add	r3, r2
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_ = MODE_MESSAGE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d8:	461a      	mov	r2, r3
 80046da:	2307      	movs	r3, #7
 80046dc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if (bytes_ == 0)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f47f ae89 	bne.w	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f6:	461a      	mov	r2, r3
 80046f8:	2308      	movs	r3, #8
 80046fa:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80046fe:	e680      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004706:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800470a:	2b08      	cmp	r3, #8
 800470c:	f47f ae79 	bne.w	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004716:	461a      	mov	r2, r3
 8004718:	2300      	movs	r3, #0
 800471a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if ((checksum_ % 256) == 255)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004724:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004728:	425a      	negs	r2, r3
 800472a:	b2db      	uxtb	r3, r3
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	bf58      	it	pl
 8004730:	4253      	negpl	r3, r2
 8004732:	2bff      	cmp	r3, #255	; 0xff
 8004734:	f47f ae65 	bne.w	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d116      	bne.n	8004774 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f89b 	bl	8004882 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f8b6 	bl	80048be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004758:	461a      	mov	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            last_sync_receive_time = c_time;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004766:	461a      	mov	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            return SPIN_ERR;
 800476e:	f04f 33ff 	mov.w	r3, #4294967295
 8004772:	e082      	b.n	800487a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800477e:	2b0a      	cmp	r3, #10
 8004780:	d107      	bne.n	8004792 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f978 	bl	8004a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 8004790:	e637      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004798:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800479c:	2b06      	cmp	r3, #6
 800479e:	d111      	bne.n	80047c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80047a6:	3314      	adds	r3, #20
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	f602 0224 	addw	r2, r2, #2084	; 0x824
 80047ae:	4611      	mov	r1, r2
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fe fa6e 	bl	8002c92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80047c2:	e61e      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047ce:	2b0b      	cmp	r3, #11
 80047d0:	d106      	bne.n	80047e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80047de:	e610      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047ea:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80047f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f43f ae02 	beq.w	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004804:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004808:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004812:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800481c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004820:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800482a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8004838:	4611      	mov	r1, r2
 800483a:	4798      	blx	r3
    while (true)
 800483c:	e5e1      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 800483e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004846:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800484a:	2b00      	cmp	r3, #0
 800484c:	d014      	beq.n	8004878 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004854:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004860:	4293      	cmp	r3, r2
 8004862:	d909      	bls.n	8004878 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f80c 	bl	8004882 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004870:	461a      	mov	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return SPIN_OK;
 8004878:	2300      	movs	r3, #0
  }
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004882:	b580      	push	{r7, lr}
 8004884:	b086      	sub	sp, #24
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800488a:	f107 030c 	add.w	r3, r7, #12
 800488e:	4618      	mov	r0, r3
 8004890:	f7fd fd5c 	bl	800234c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f107 020c 	add.w	r2, r7, #12
 800489e:	210a      	movs	r1, #10
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4798      	blx	r3
    rt_time = hardware_.time();
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3304      	adds	r3, #4
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fe fcdb 	bl	8003264 <_ZN13STM32Hardware4timeEv>
 80048ae:	4602      	mov	r2, r0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 80048b6:	bf00      	nop
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80048be:	b590      	push	{r4, r7, lr}
 80048c0:	b08b      	sub	sp, #44	; 0x2c
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80048c6:	f107 030c 	add.w	r3, r7, #12
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fd fe2e 	bl	800252c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80048d0:	2300      	movs	r3, #0
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	2b18      	cmp	r3, #24
 80048d8:	dc63      	bgt.n	80049a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d056      	beq.n	800499a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	6859      	ldr	r1, [r3, #4]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3308      	adds	r3, #8
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4608      	mov	r0, r1
 800493a:	4798      	blx	r3
 800493c:	4603      	mov	r3, r0
 800493e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	6859      	ldr	r1, [r3, #4]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	330c      	adds	r3, #12
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4608      	mov	r0, r1
 8004968:	4798      	blx	r3
 800496a:	4603      	mov	r3, r0
 800496c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800496e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004972:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681c      	ldr	r4, [r3, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe fb3a 	bl	8003002 <_ZN3ros9Publisher15getEndpointTypeEv>
 800498e:	4601      	mov	r1, r0
 8004990:	f107 030c 	add.w	r3, r7, #12
 8004994:	461a      	mov	r2, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	3301      	adds	r3, #1
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
 80049a0:	e798      	b.n	80048d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80049a2:	2300      	movs	r3, #0
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	2b18      	cmp	r3, #24
 80049aa:	dc5f      	bgt.n	8004a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b0:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80049b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d053      	beq.n	8004a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c0:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80049c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d2:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80049d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e2:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80049e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ee:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80049f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3308      	adds	r3, #8
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4608      	mov	r0, r1
 80049fe:	4798      	blx	r3
 8004a00:	4603      	mov	r3, r0
 8004a02:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a08:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004a0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a14:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	330c      	adds	r3, #12
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4608      	mov	r0, r1
 8004a24:	4798      	blx	r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a2e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681c      	ldr	r4, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004a3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a46:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3304      	adds	r3, #4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4608      	mov	r0, r1
 8004a56:	4798      	blx	r3
 8004a58:	4601      	mov	r1, r0
 8004a5a:	f107 030c 	add.w	r3, r7, #12
 8004a5e:	461a      	mov	r2, r3
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	3301      	adds	r3, #1
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6a:	e79c      	b.n	80049a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
 8004a78:	bf00      	nop
 8004a7a:	372c      	adds	r7, #44	; 0x2c
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd90      	pop	{r4, r7, pc}

08004a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004a8a:	f107 0308 	add.w	r3, r7, #8
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fd fc5c 	bl	800234c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fe fbe3 	bl	8003264 <_ZN13STM32Hardware4timeEv>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004aaa:	f107 0308 	add.w	r3, r7, #8
 8004aae:	6839      	ldr	r1, [r7, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fd fcbb 	bl	800242c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	4916      	ldr	r1, [pc, #88]	; (8004b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8004abc:	fba1 1303 	umull	r1, r3, r1, r3
 8004ac0:	099b      	lsrs	r3, r3, #6
 8004ac2:	4413      	add	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004ac6:	6939      	ldr	r1, [r7, #16]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8004acc:	fba3 0302 	umull	r0, r3, r3, r2
 8004ad0:	099b      	lsrs	r3, r3, #6
 8004ad2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ad6:	fb00 f303 	mul.w	r3, r0, r3
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	4a0e      	ldr	r2, [pc, #56]	; (8004b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8004ade:	fb02 f303 	mul.w	r3, r2, r3
 8004ae2:	440b      	add	r3, r1
 8004ae4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004ae6:	f107 0308 	add.w	r3, r7, #8
 8004aea:	3304      	adds	r3, #4
 8004aec:	4619      	mov	r1, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f8aa 	bl	8004c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fe fbb3 	bl	8003264 <_ZN13STM32Hardware4timeEv>
 8004afe:	4602      	mov	r2, r0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b06:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
 8004b0a:	bf00      	nop
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	10624dd3 	.word	0x10624dd3
 8004b18:	000f4240 	.word	0x000f4240

08004b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b63      	cmp	r3, #99	; 0x63
 8004b2c:	dd0b      	ble.n	8004b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b34:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004b38:	f083 0301 	eor.w	r3, r3, #1
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	e079      	b.n	8004c3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	f602 4224 	addw	r2, r2, #3108	; 0xc24
 8004b52:	3207      	adds	r2, #7
 8004b54:	4611      	mov	r1, r2
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	4798      	blx	r3
 8004b5a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	22ff      	movs	r2, #255	; 0xff
 8004b60:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24
    message_out[1] = PROTOCOL_VER;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	22fe      	movs	r2, #254	; 0xfe
 8004b68:	f883 2c25 	strb.w	r2, [r3, #3109]	; 0xc25
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f883 2c26 	strb.w	r2, [r3, #3110]	; 0xc26
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f883 2c27 	strb.w	r2, [r3, #3111]	; 0xc27
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 2c26 	ldrb.w	r2, [r3, #3110]	; 0xc26
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 3c27 	ldrb.w	r3, [r3, #3111]	; 0xc27
 8004b92:	4413      	add	r3, r2
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	43db      	mvns	r3, r3
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	b21b      	sxth	r3, r3
 8004bae:	121b      	asrs	r3, r3, #8
 8004bb0:	b21b      	sxth	r3, r3
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a

    /* calculate checksum */
    int chk = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004bbe:	2305      	movs	r3, #5
 8004bc0:	61bb      	str	r3, [r7, #24]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	3306      	adds	r3, #6
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	dc0d      	bgt.n	8004be8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	3301      	adds	r3, #1
 8004be4:	61bb      	str	r3, [r7, #24]
 8004be6:	e7ec      	b.n	8004bc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	3307      	adds	r3, #7
 8004bec:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	425a      	negs	r2, r3
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	bf58      	it	pl
 8004bf8:	4253      	negpl	r3, r2
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	1c59      	adds	r1, r3, #1
 8004c00:	6179      	str	r1, [r7, #20]
 8004c02:	43d2      	mvns	r2, r2
 8004c04:	b2d1      	uxtb	r1, r2
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4413      	add	r3, r2
 8004c0a:	460a      	mov	r2, r1
 8004c0c:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24

    if (l <= OUTPUT_SIZE)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c16:	dc0a      	bgt.n	8004c2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1d18      	adds	r0, r3, #4
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4619      	mov	r1, r3
 8004c26:	f7fe facf 	bl	80031c8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	e005      	b.n	8004c3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004c2e:	4905      	ldr	r1, [pc, #20]	; (8004c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f849 	bl	8004cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8004c36:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	08011db4 	.word	0x08011db4

08004c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3304      	adds	r3, #4
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fe fb04 	bl	8003264 <_ZN13STM32Hardware4timeEv>
 8004c5c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4915      	ldr	r1, [pc, #84]	; (8004cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x74>)
 8004c66:	fba1 1303 	umull	r1, r3, r1, r3
 8004c6a:	099b      	lsrs	r3, r3, #6
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	1e5a      	subs	r2, r3, #1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6859      	ldr	r1, [r3, #4]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x74>)
 8004c7e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c82:	099b      	lsrs	r3, r3, #6
 8004c84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c88:	fb00 f303 	mul.w	r3, r0, r3
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	4a0c      	ldr	r2, [pc, #48]	; (8004cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x78>)
 8004c90:	fb02 f303 	mul.w	r3, r2, r3
 8004c94:	1aca      	subs	r2, r1, r3
 8004c96:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x7c>)
 8004c98:	4413      	add	r3, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8004cac:	4619      	mov	r1, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	f000 fd0a 	bl	80056c8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	10624dd3 	.word	0x10624dd3
 8004cc0:	000f4240 	.word	0x000f4240
 8004cc4:	3b9aca00 	.word	0x3b9aca00

08004cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	2103      	movs	r1, #3
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f804 	bl	8004ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8004cdc:	bf00      	nop
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	460b      	mov	r3, r1
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004cf2:	f107 0314 	add.w	r3, r7, #20
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fd fddc 	bl	80028b4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004cfc:	7afb      	ldrb	r3, [r7, #11]
 8004cfe:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f107 0214 	add.w	r2, r7, #20
 8004d0e:	2107      	movs	r1, #7
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	4798      	blx	r3
  }
 8004d14:	bf00      	nop
 8004d16:	3720      	adds	r7, #32
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <_Z41__static_initialization_and_destruction_0ii>:
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d116      	bne.n	8004d5a <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d111      	bne.n	8004d5a <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8004d36:	480b      	ldr	r0, [pc, #44]	; (8004d64 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004d38:	f7ff f8e6 	bl	8003f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
std_msgs::String str_msg;
 8004d3c:	480a      	ldr	r0, [pc, #40]	; (8004d68 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004d3e:	f7fe ffb3 	bl	8003ca8 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8004d42:	2300      	movs	r3, #0
 8004d44:	4a08      	ldr	r2, [pc, #32]	; (8004d68 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004d46:	4909      	ldr	r1, [pc, #36]	; (8004d6c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004d48:	4809      	ldr	r0, [pc, #36]	; (8004d70 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004d4a:	f7fe f92f 	bl	8002fac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> cmd_vel_sub("cmd_vel", commandVelocityCallback);
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4a08      	ldr	r2, [pc, #32]	; (8004d74 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004d52:	4909      	ldr	r1, [pc, #36]	; (8004d78 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004d54:	4809      	ldr	r0, [pc, #36]	; (8004d7c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004d56:	f7ff fa6f 	bl	8004238 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8004d5a:	bf00      	nop
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000514 	.word	0x20000514
 8004d68:	20001650 	.word	0x20001650
 8004d6c:	08011df0 	.word	0x08011df0
 8004d70:	20001658 	.word	0x20001658
 8004d74:	08004035 	.word	0x08004035
 8004d78:	08011df8 	.word	0x08011df8
 8004d7c:	20001670 	.word	0x20001670

08004d80 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3310      	adds	r3, #16
 8004d8e:	6839      	ldr	r1, [r7, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff f867 	bl	8003e64 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	3210      	adds	r2, #16
 8004d9e:	4610      	mov	r0, r2
 8004da0:	4798      	blx	r3
  }
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004db6:	4618      	mov	r0, r3
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3310      	adds	r3, #16
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff f86e 	bl	8003eb0 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004dd4:	4603      	mov	r3, r0
  }
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b082      	sub	sp, #8
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3310      	adds	r3, #16
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff f86e 	bl	8003ecc <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004df0:	4603      	mov	r3, r0
  }
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected() override
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
    return configured_;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e08:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  };
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <_GLOBAL__sub_I_nh>:
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e20:	2001      	movs	r0, #1
 8004e22:	f7ff ff7b 	bl	8004d1c <_Z41__static_initialization_and_destruction_0ii>
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e2e:	2300      	movs	r3, #0
 8004e30:	607b      	str	r3, [r7, #4]
 8004e32:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <HAL_MspInit+0x4c>)
 8004e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e36:	4a0f      	ldr	r2, [pc, #60]	; (8004e74 <HAL_MspInit+0x4c>)
 8004e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <HAL_MspInit+0x4c>)
 8004e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e46:	607b      	str	r3, [r7, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	603b      	str	r3, [r7, #0]
 8004e4e:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <HAL_MspInit+0x4c>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <HAL_MspInit+0x4c>)
 8004e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e58:	6413      	str	r3, [r2, #64]	; 0x40
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <HAL_MspInit+0x4c>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004e66:	2007      	movs	r0, #7
 8004e68:	f000 fdea 	bl	8005a40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e6c:	bf00      	nop
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40023800 	.word	0x40023800

08004e78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e80:	f107 0314 	add.w	r3, r7, #20
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	609a      	str	r2, [r3, #8]
 8004e8c:	60da      	str	r2, [r3, #12]
 8004e8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a19      	ldr	r2, [pc, #100]	; (8004efc <HAL_I2C_MspInit+0x84>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d12c      	bne.n	8004ef4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	613b      	str	r3, [r7, #16]
 8004e9e:	4b18      	ldr	r3, [pc, #96]	; (8004f00 <HAL_I2C_MspInit+0x88>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	4a17      	ldr	r2, [pc, #92]	; (8004f00 <HAL_I2C_MspInit+0x88>)
 8004ea4:	f043 0302 	orr.w	r3, r3, #2
 8004ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eaa:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <HAL_I2C_MspInit+0x88>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	613b      	str	r3, [r7, #16]
 8004eb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004eb6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ebc:	2312      	movs	r3, #18
 8004ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004ec8:	2304      	movs	r3, #4
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ecc:	f107 0314 	add.w	r3, r7, #20
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	480c      	ldr	r0, [pc, #48]	; (8004f04 <HAL_I2C_MspInit+0x8c>)
 8004ed4:	f001 f9f8 	bl	80062c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <HAL_I2C_MspInit+0x88>)
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	4a07      	ldr	r2, [pc, #28]	; (8004f00 <HAL_I2C_MspInit+0x88>)
 8004ee2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <HAL_I2C_MspInit+0x88>)
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004ef4:	bf00      	nop
 8004ef6:	3728      	adds	r7, #40	; 0x28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40005400 	.word	0x40005400
 8004f00:	40023800 	.word	0x40023800
 8004f04:	40020400 	.word	0x40020400

08004f08 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08e      	sub	sp, #56	; 0x38
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	609a      	str	r2, [r3, #8]
 8004f1c:	60da      	str	r2, [r3, #12]
 8004f1e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a59      	ldr	r2, [pc, #356]	; (800508c <HAL_I2S_MspInit+0x184>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d15b      	bne.n	8004fe2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	623b      	str	r3, [r7, #32]
 8004f2e:	4b58      	ldr	r3, [pc, #352]	; (8005090 <HAL_I2S_MspInit+0x188>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	4a57      	ldr	r2, [pc, #348]	; (8005090 <HAL_I2S_MspInit+0x188>)
 8004f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f38:	6413      	str	r3, [r2, #64]	; 0x40
 8004f3a:	4b55      	ldr	r3, [pc, #340]	; (8005090 <HAL_I2S_MspInit+0x188>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f42:	623b      	str	r3, [r7, #32]
 8004f44:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
 8004f4a:	4b51      	ldr	r3, [pc, #324]	; (8005090 <HAL_I2S_MspInit+0x188>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	4a50      	ldr	r2, [pc, #320]	; (8005090 <HAL_I2S_MspInit+0x188>)
 8004f50:	f043 0304 	orr.w	r3, r3, #4
 8004f54:	6313      	str	r3, [r2, #48]	; 0x30
 8004f56:	4b4e      	ldr	r3, [pc, #312]	; (8005090 <HAL_I2S_MspInit+0x188>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	f003 0304 	and.w	r3, r3, #4
 8004f5e:	61fb      	str	r3, [r7, #28]
 8004f60:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	4b4a      	ldr	r3, [pc, #296]	; (8005090 <HAL_I2S_MspInit+0x188>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	4a49      	ldr	r2, [pc, #292]	; (8005090 <HAL_I2S_MspInit+0x188>)
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
 8004f70:	6313      	str	r3, [r2, #48]	; 0x30
 8004f72:	4b47      	ldr	r3, [pc, #284]	; (8005090 <HAL_I2S_MspInit+0x188>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	61bb      	str	r3, [r7, #24]
 8004f7c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f7e:	2304      	movs	r3, #4
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f82:	2302      	movs	r3, #2
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8004f8e:	2306      	movs	r3, #6
 8004f90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f96:	4619      	mov	r1, r3
 8004f98:	483e      	ldr	r0, [pc, #248]	; (8005094 <HAL_I2S_MspInit+0x18c>)
 8004f9a:	f001 f995 	bl	80062c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8004f9e:	2308      	movs	r3, #8
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004faa:	2300      	movs	r3, #0
 8004fac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004fae:	2305      	movs	r3, #5
 8004fb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8004fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4836      	ldr	r0, [pc, #216]	; (8005094 <HAL_I2S_MspInit+0x18c>)
 8004fba:	f001 f985 	bl	80062c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8004fbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004fd0:	2305      	movs	r3, #5
 8004fd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fd8:	4619      	mov	r1, r3
 8004fda:	482f      	ldr	r0, [pc, #188]	; (8005098 <HAL_I2S_MspInit+0x190>)
 8004fdc:	f001 f974 	bl	80062c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004fe0:	e04f      	b.n	8005082 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a2d      	ldr	r2, [pc, #180]	; (800509c <HAL_I2S_MspInit+0x194>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d14a      	bne.n	8005082 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	4b27      	ldr	r3, [pc, #156]	; (8005090 <HAL_I2S_MspInit+0x188>)
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	4a26      	ldr	r2, [pc, #152]	; (8005090 <HAL_I2S_MspInit+0x188>)
 8004ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffc:	4b24      	ldr	r3, [pc, #144]	; (8005090 <HAL_I2S_MspInit+0x188>)
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	4b20      	ldr	r3, [pc, #128]	; (8005090 <HAL_I2S_MspInit+0x188>)
 800500e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005010:	4a1f      	ldr	r2, [pc, #124]	; (8005090 <HAL_I2S_MspInit+0x188>)
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	6313      	str	r3, [r2, #48]	; 0x30
 8005018:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <HAL_I2S_MspInit+0x188>)
 800501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	4b19      	ldr	r3, [pc, #100]	; (8005090 <HAL_I2S_MspInit+0x188>)
 800502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502c:	4a18      	ldr	r2, [pc, #96]	; (8005090 <HAL_I2S_MspInit+0x188>)
 800502e:	f043 0304 	orr.w	r3, r3, #4
 8005032:	6313      	str	r3, [r2, #48]	; 0x30
 8005034:	4b16      	ldr	r3, [pc, #88]	; (8005090 <HAL_I2S_MspInit+0x188>)
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8005040:	2310      	movs	r3, #16
 8005042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005044:	2302      	movs	r3, #2
 8005046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005048:	2300      	movs	r3, #0
 800504a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800504c:	2300      	movs	r3, #0
 800504e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005050:	2306      	movs	r3, #6
 8005052:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8005054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005058:	4619      	mov	r1, r3
 800505a:	4811      	ldr	r0, [pc, #68]	; (80050a0 <HAL_I2S_MspInit+0x198>)
 800505c:	f001 f934 	bl	80062c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8005060:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005066:	2302      	movs	r3, #2
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506a:	2300      	movs	r3, #0
 800506c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800506e:	2300      	movs	r3, #0
 8005070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005072:	2306      	movs	r3, #6
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800507a:	4619      	mov	r1, r3
 800507c:	4805      	ldr	r0, [pc, #20]	; (8005094 <HAL_I2S_MspInit+0x18c>)
 800507e:	f001 f923 	bl	80062c8 <HAL_GPIO_Init>
}
 8005082:	bf00      	nop
 8005084:	3738      	adds	r7, #56	; 0x38
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40003800 	.word	0x40003800
 8005090:	40023800 	.word	0x40023800
 8005094:	40020800 	.word	0x40020800
 8005098:	40020400 	.word	0x40020400
 800509c:	40003c00 	.word	0x40003c00
 80050a0:	40020000 	.word	0x40020000

080050a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08a      	sub	sp, #40	; 0x28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ac:	f107 0314 	add.w	r3, r7, #20
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	605a      	str	r2, [r3, #4]
 80050b6:	609a      	str	r2, [r3, #8]
 80050b8:	60da      	str	r2, [r3, #12]
 80050ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a19      	ldr	r2, [pc, #100]	; (8005128 <HAL_SPI_MspInit+0x84>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d12b      	bne.n	800511e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80050c6:	2300      	movs	r3, #0
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	4b18      	ldr	r3, [pc, #96]	; (800512c <HAL_SPI_MspInit+0x88>)
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	4a17      	ldr	r2, [pc, #92]	; (800512c <HAL_SPI_MspInit+0x88>)
 80050d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050d4:	6453      	str	r3, [r2, #68]	; 0x44
 80050d6:	4b15      	ldr	r3, [pc, #84]	; (800512c <HAL_SPI_MspInit+0x88>)
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	4b11      	ldr	r3, [pc, #68]	; (800512c <HAL_SPI_MspInit+0x88>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	4a10      	ldr	r2, [pc, #64]	; (800512c <HAL_SPI_MspInit+0x88>)
 80050ec:	f043 0301 	orr.w	r3, r3, #1
 80050f0:	6313      	str	r3, [r2, #48]	; 0x30
 80050f2:	4b0e      	ldr	r3, [pc, #56]	; (800512c <HAL_SPI_MspInit+0x88>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80050fe:	23e0      	movs	r3, #224	; 0xe0
 8005100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005102:	2302      	movs	r3, #2
 8005104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005106:	2300      	movs	r3, #0
 8005108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800510a:	2303      	movs	r3, #3
 800510c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800510e:	2305      	movs	r3, #5
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005112:	f107 0314 	add.w	r3, r7, #20
 8005116:	4619      	mov	r1, r3
 8005118:	4805      	ldr	r0, [pc, #20]	; (8005130 <HAL_SPI_MspInit+0x8c>)
 800511a:	f001 f8d5 	bl	80062c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800511e:	bf00      	nop
 8005120:	3728      	adds	r7, #40	; 0x28
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40013000 	.word	0x40013000
 800512c:	40023800 	.word	0x40023800
 8005130:	40020000 	.word	0x40020000

08005134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005144:	d116      	bne.n	8005174 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	4b1a      	ldr	r3, [pc, #104]	; (80051b4 <HAL_TIM_Base_MspInit+0x80>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <HAL_TIM_Base_MspInit+0x80>)
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	6413      	str	r3, [r2, #64]	; 0x40
 8005156:	4b17      	ldr	r3, [pc, #92]	; (80051b4 <HAL_TIM_Base_MspInit+0x80>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 8005162:	2202      	movs	r2, #2
 8005164:	2100      	movs	r1, #0
 8005166:	201c      	movs	r0, #28
 8005168:	f000 fc75 	bl	8005a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800516c:	201c      	movs	r0, #28
 800516e:	f000 fc8e 	bl	8005a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005172:	e01a      	b.n	80051aa <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a0f      	ldr	r2, [pc, #60]	; (80051b8 <HAL_TIM_Base_MspInit+0x84>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d115      	bne.n	80051aa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800517e:	2300      	movs	r3, #0
 8005180:	60bb      	str	r3, [r7, #8]
 8005182:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <HAL_TIM_Base_MspInit+0x80>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <HAL_TIM_Base_MspInit+0x80>)
 8005188:	f043 0302 	orr.w	r3, r3, #2
 800518c:	6413      	str	r3, [r2, #64]	; 0x40
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <HAL_TIM_Base_MspInit+0x80>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	60bb      	str	r3, [r7, #8]
 8005198:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 3);
 800519a:	2203      	movs	r2, #3
 800519c:	2100      	movs	r1, #0
 800519e:	201d      	movs	r0, #29
 80051a0:	f000 fc59 	bl	8005a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80051a4:	201d      	movs	r0, #29
 80051a6:	f000 fc72 	bl	8005a8e <HAL_NVIC_EnableIRQ>
}
 80051aa:	bf00      	nop
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40023800 	.word	0x40023800
 80051b8:	40000400 	.word	0x40000400

080051bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	; 0x28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051c4:	f107 0314 	add.w	r3, r7, #20
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	605a      	str	r2, [r3, #4]
 80051ce:	609a      	str	r2, [r3, #8]
 80051d0:	60da      	str	r2, [r3, #12]
 80051d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a21      	ldr	r2, [pc, #132]	; (8005260 <HAL_TIM_MspPostInit+0xa4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d13b      	bne.n	8005256 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051de:	2300      	movs	r3, #0
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	4b20      	ldr	r3, [pc, #128]	; (8005264 <HAL_TIM_MspPostInit+0xa8>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	4a1f      	ldr	r2, [pc, #124]	; (8005264 <HAL_TIM_MspPostInit+0xa8>)
 80051e8:	f043 0302 	orr.w	r3, r3, #2
 80051ec:	6313      	str	r3, [r2, #48]	; 0x30
 80051ee:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <HAL_TIM_MspPostInit+0xa8>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	4b19      	ldr	r3, [pc, #100]	; (8005264 <HAL_TIM_MspPostInit+0xa8>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	4a18      	ldr	r2, [pc, #96]	; (8005264 <HAL_TIM_MspPostInit+0xa8>)
 8005204:	f043 0304 	orr.w	r3, r3, #4
 8005208:	6313      	str	r3, [r2, #48]	; 0x30
 800520a:	4b16      	ldr	r3, [pc, #88]	; (8005264 <HAL_TIM_MspPostInit+0xa8>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005216:	2301      	movs	r3, #1
 8005218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800521a:	2302      	movs	r3, #2
 800521c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005222:	2300      	movs	r3, #0
 8005224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005226:	2302      	movs	r3, #2
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800522a:	f107 0314 	add.w	r3, r7, #20
 800522e:	4619      	mov	r1, r3
 8005230:	480d      	ldr	r0, [pc, #52]	; (8005268 <HAL_TIM_MspPostInit+0xac>)
 8005232:	f001 f849 	bl	80062c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005236:	2340      	movs	r3, #64	; 0x40
 8005238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800523a:	2302      	movs	r3, #2
 800523c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523e:	2300      	movs	r3, #0
 8005240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005242:	2300      	movs	r3, #0
 8005244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005246:	2302      	movs	r3, #2
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800524a:	f107 0314 	add.w	r3, r7, #20
 800524e:	4619      	mov	r1, r3
 8005250:	4806      	ldr	r0, [pc, #24]	; (800526c <HAL_TIM_MspPostInit+0xb0>)
 8005252:	f001 f839 	bl	80062c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005256:	bf00      	nop
 8005258:	3728      	adds	r7, #40	; 0x28
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40000400 	.word	0x40000400
 8005264:	40023800 	.word	0x40023800
 8005268:	40020400 	.word	0x40020400
 800526c:	40020800 	.word	0x40020800

08005270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08a      	sub	sp, #40	; 0x28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005278:	f107 0314 	add.w	r3, r7, #20
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	605a      	str	r2, [r3, #4]
 8005282:	609a      	str	r2, [r3, #8]
 8005284:	60da      	str	r2, [r3, #12]
 8005286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a5b      	ldr	r2, [pc, #364]	; (80053fc <HAL_UART_MspInit+0x18c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	f040 80af 	bne.w	80053f2 <HAL_UART_MspInit+0x182>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005294:	2300      	movs	r3, #0
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	4b59      	ldr	r3, [pc, #356]	; (8005400 <HAL_UART_MspInit+0x190>)
 800529a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529c:	4a58      	ldr	r2, [pc, #352]	; (8005400 <HAL_UART_MspInit+0x190>)
 800529e:	f043 0310 	orr.w	r3, r3, #16
 80052a2:	6453      	str	r3, [r2, #68]	; 0x44
 80052a4:	4b56      	ldr	r3, [pc, #344]	; (8005400 <HAL_UART_MspInit+0x190>)
 80052a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	4b52      	ldr	r3, [pc, #328]	; (8005400 <HAL_UART_MspInit+0x190>)
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	4a51      	ldr	r2, [pc, #324]	; (8005400 <HAL_UART_MspInit+0x190>)
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	6313      	str	r3, [r2, #48]	; 0x30
 80052c0:	4b4f      	ldr	r3, [pc, #316]	; (8005400 <HAL_UART_MspInit+0x190>)
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052cc:	2300      	movs	r3, #0
 80052ce:	60bb      	str	r3, [r7, #8]
 80052d0:	4b4b      	ldr	r3, [pc, #300]	; (8005400 <HAL_UART_MspInit+0x190>)
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	4a4a      	ldr	r2, [pc, #296]	; (8005400 <HAL_UART_MspInit+0x190>)
 80052d6:	f043 0302 	orr.w	r3, r3, #2
 80052da:	6313      	str	r3, [r2, #48]	; 0x30
 80052dc:	4b48      	ldr	r3, [pc, #288]	; (8005400 <HAL_UART_MspInit+0x190>)
 80052de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80052e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ee:	2302      	movs	r3, #2
 80052f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052f6:	2303      	movs	r3, #3
 80052f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052fa:	2307      	movs	r3, #7
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052fe:	f107 0314 	add.w	r3, r7, #20
 8005302:	4619      	mov	r1, r3
 8005304:	483f      	ldr	r0, [pc, #252]	; (8005404 <HAL_UART_MspInit+0x194>)
 8005306:	f000 ffdf 	bl	80062c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800530a:	2380      	movs	r3, #128	; 0x80
 800530c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800530e:	2302      	movs	r3, #2
 8005310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005316:	2303      	movs	r3, #3
 8005318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800531a:	2307      	movs	r3, #7
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800531e:	f107 0314 	add.w	r3, r7, #20
 8005322:	4619      	mov	r1, r3
 8005324:	4838      	ldr	r0, [pc, #224]	; (8005408 <HAL_UART_MspInit+0x198>)
 8005326:	f000 ffcf 	bl	80062c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800532a:	4b38      	ldr	r3, [pc, #224]	; (800540c <HAL_UART_MspInit+0x19c>)
 800532c:	4a38      	ldr	r2, [pc, #224]	; (8005410 <HAL_UART_MspInit+0x1a0>)
 800532e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005330:	4b36      	ldr	r3, [pc, #216]	; (800540c <HAL_UART_MspInit+0x19c>)
 8005332:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005336:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005338:	4b34      	ldr	r3, [pc, #208]	; (800540c <HAL_UART_MspInit+0x19c>)
 800533a:	2200      	movs	r2, #0
 800533c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800533e:	4b33      	ldr	r3, [pc, #204]	; (800540c <HAL_UART_MspInit+0x19c>)
 8005340:	2200      	movs	r2, #0
 8005342:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005344:	4b31      	ldr	r3, [pc, #196]	; (800540c <HAL_UART_MspInit+0x19c>)
 8005346:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800534a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800534c:	4b2f      	ldr	r3, [pc, #188]	; (800540c <HAL_UART_MspInit+0x19c>)
 800534e:	2200      	movs	r2, #0
 8005350:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005352:	4b2e      	ldr	r3, [pc, #184]	; (800540c <HAL_UART_MspInit+0x19c>)
 8005354:	2200      	movs	r2, #0
 8005356:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005358:	4b2c      	ldr	r3, [pc, #176]	; (800540c <HAL_UART_MspInit+0x19c>)
 800535a:	2200      	movs	r2, #0
 800535c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800535e:	4b2b      	ldr	r3, [pc, #172]	; (800540c <HAL_UART_MspInit+0x19c>)
 8005360:	2200      	movs	r2, #0
 8005362:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005364:	4b29      	ldr	r3, [pc, #164]	; (800540c <HAL_UART_MspInit+0x19c>)
 8005366:	2200      	movs	r2, #0
 8005368:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800536a:	4828      	ldr	r0, [pc, #160]	; (800540c <HAL_UART_MspInit+0x19c>)
 800536c:	f000 fbaa 	bl	8005ac4 <HAL_DMA_Init>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8005376:	f7fc ffa3 	bl	80022c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a23      	ldr	r2, [pc, #140]	; (800540c <HAL_UART_MspInit+0x19c>)
 800537e:	639a      	str	r2, [r3, #56]	; 0x38
 8005380:	4a22      	ldr	r2, [pc, #136]	; (800540c <HAL_UART_MspInit+0x19c>)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8005386:	4b23      	ldr	r3, [pc, #140]	; (8005414 <HAL_UART_MspInit+0x1a4>)
 8005388:	4a23      	ldr	r2, [pc, #140]	; (8005418 <HAL_UART_MspInit+0x1a8>)
 800538a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800538c:	4b21      	ldr	r3, [pc, #132]	; (8005414 <HAL_UART_MspInit+0x1a4>)
 800538e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005392:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005394:	4b1f      	ldr	r3, [pc, #124]	; (8005414 <HAL_UART_MspInit+0x1a4>)
 8005396:	2240      	movs	r2, #64	; 0x40
 8005398:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800539a:	4b1e      	ldr	r3, [pc, #120]	; (8005414 <HAL_UART_MspInit+0x1a4>)
 800539c:	2200      	movs	r2, #0
 800539e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80053a0:	4b1c      	ldr	r3, [pc, #112]	; (8005414 <HAL_UART_MspInit+0x1a4>)
 80053a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053a8:	4b1a      	ldr	r3, [pc, #104]	; (8005414 <HAL_UART_MspInit+0x1a4>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053ae:	4b19      	ldr	r3, [pc, #100]	; (8005414 <HAL_UART_MspInit+0x1a4>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80053b4:	4b17      	ldr	r3, [pc, #92]	; (8005414 <HAL_UART_MspInit+0x1a4>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80053ba:	4b16      	ldr	r3, [pc, #88]	; (8005414 <HAL_UART_MspInit+0x1a4>)
 80053bc:	2200      	movs	r2, #0
 80053be:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053c0:	4b14      	ldr	r3, [pc, #80]	; (8005414 <HAL_UART_MspInit+0x1a4>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80053c6:	4813      	ldr	r0, [pc, #76]	; (8005414 <HAL_UART_MspInit+0x1a4>)
 80053c8:	f000 fb7c 	bl	8005ac4 <HAL_DMA_Init>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 80053d2:	f7fc ff75 	bl	80022c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a0e      	ldr	r2, [pc, #56]	; (8005414 <HAL_UART_MspInit+0x1a4>)
 80053da:	635a      	str	r2, [r3, #52]	; 0x34
 80053dc:	4a0d      	ldr	r2, [pc, #52]	; (8005414 <HAL_UART_MspInit+0x1a4>)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80053e2:	2200      	movs	r2, #0
 80053e4:	2100      	movs	r1, #0
 80053e6:	2025      	movs	r0, #37	; 0x25
 80053e8:	f000 fb35 	bl	8005a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80053ec:	2025      	movs	r0, #37	; 0x25
 80053ee:	f000 fb4e 	bl	8005a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80053f2:	bf00      	nop
 80053f4:	3728      	adds	r7, #40	; 0x28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40011000 	.word	0x40011000
 8005400:	40023800 	.word	0x40023800
 8005404:	40020000 	.word	0x40020000
 8005408:	40020400 	.word	0x40020400
 800540c:	20000450 	.word	0x20000450
 8005410:	40026440 	.word	0x40026440
 8005414:	200004b0 	.word	0x200004b0
 8005418:	400264b8 	.word	0x400264b8

0800541c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005420:	e7fe      	b.n	8005420 <NMI_Handler+0x4>

08005422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005426:	e7fe      	b.n	8005426 <HardFault_Handler+0x4>

08005428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800542c:	e7fe      	b.n	800542c <MemManage_Handler+0x4>

0800542e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800542e:	b480      	push	{r7}
 8005430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005432:	e7fe      	b.n	8005432 <BusFault_Handler+0x4>

08005434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005438:	e7fe      	b.n	8005438 <UsageFault_Handler+0x4>

0800543a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800543a:	b480      	push	{r7}
 800543c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800543e:	bf00      	nop
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800544c:	bf00      	nop
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005456:	b480      	push	{r7}
 8005458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800545a:	bf00      	nop
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005468:	f000 f9d6 	bl	8005818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800546c:	bf00      	nop
 800546e:	bd80      	pop	{r7, pc}

08005470 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005474:	4802      	ldr	r0, [pc, #8]	; (8005480 <TIM2_IRQHandler+0x10>)
 8005476:	f004 fb29 	bl	8009acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800547a:	bf00      	nop
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	2000037c 	.word	0x2000037c

08005484 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005488:	4802      	ldr	r0, [pc, #8]	; (8005494 <TIM3_IRQHandler+0x10>)
 800548a:	f004 fb1f 	bl	8009acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800548e:	bf00      	nop
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	200003c4 	.word	0x200003c4

08005498 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800549c:	4802      	ldr	r0, [pc, #8]	; (80054a8 <USART1_IRQHandler+0x10>)
 800549e:	f005 fa19 	bl	800a8d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	2000040c 	.word	0x2000040c

080054ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_ENCODER_A_Pin);
 80054b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80054b4:	f001 f8d8 	bl	8006668 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_ENCODER_B_Pin);
 80054b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80054bc:	f001 f8d4 	bl	8006668 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_ENCODER_A_Pin);
 80054c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80054c4:	f001 f8d0 	bl	8006668 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_ENCODER_B_Pin);
 80054c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80054cc:	f001 f8cc 	bl	8006668 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80054d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80054d4:	f001 f8c8 	bl	8006668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80054d8:	bf00      	nop
 80054da:	bd80      	pop	{r7, pc}

080054dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80054e0:	4802      	ldr	r0, [pc, #8]	; (80054ec <DMA2_Stream2_IRQHandler+0x10>)
 80054e2:	f000 fc87 	bl	8005df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80054e6:	bf00      	nop
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20000450 	.word	0x20000450

080054f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80054f4:	4802      	ldr	r0, [pc, #8]	; (8005500 <OTG_FS_IRQHandler+0x10>)
 80054f6:	f001 fb39 	bl	8006b6c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80054fa:	bf00      	nop
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20001b1c 	.word	0x20001b1c

08005504 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005508:	4802      	ldr	r0, [pc, #8]	; (8005514 <DMA2_Stream7_IRQHandler+0x10>)
 800550a:	f000 fc73 	bl	8005df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800550e:	bf00      	nop
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	200004b0 	.word	0x200004b0

08005518 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
	return 1;
 800551c:	2301      	movs	r3, #1
}
 800551e:	4618      	mov	r0, r3
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <_kill>:

int _kill(int pid, int sig)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005532:	f009 fdcd 	bl	800f0d0 <__errno>
 8005536:	4603      	mov	r3, r0
 8005538:	2216      	movs	r2, #22
 800553a:	601a      	str	r2, [r3, #0]
	return -1;
 800553c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <_exit>:

void _exit (int status)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005550:	f04f 31ff 	mov.w	r1, #4294967295
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff ffe7 	bl	8005528 <_kill>
	while (1) {}		/* Make sure we hang here */
 800555a:	e7fe      	b.n	800555a <_exit+0x12>

0800555c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	e00a      	b.n	8005584 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800556e:	f3af 8000 	nop.w
 8005572:	4601      	mov	r1, r0
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	60ba      	str	r2, [r7, #8]
 800557a:	b2ca      	uxtb	r2, r1
 800557c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	3301      	adds	r3, #1
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	429a      	cmp	r2, r3
 800558a:	dbf0      	blt.n	800556e <_read+0x12>
	}

return len;
 800558c:	687b      	ldr	r3, [r7, #4]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b086      	sub	sp, #24
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055a2:	2300      	movs	r3, #0
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	e009      	b.n	80055bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	60ba      	str	r2, [r7, #8]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	3301      	adds	r3, #1
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	dbf1      	blt.n	80055a8 <_write+0x12>
	}
	return len;
 80055c4:	687b      	ldr	r3, [r7, #4]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <_close>:

int _close(int file)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
	return -1;
 80055d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055da:	4618      	mov	r0, r3
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055f6:	605a      	str	r2, [r3, #4]
	return 0;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <_isatty>:

int _isatty(int file)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
	return 1;
 800560e:	2301      	movs	r3, #1
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
	return 0;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
	...

08005638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005640:	4a14      	ldr	r2, [pc, #80]	; (8005694 <_sbrk+0x5c>)
 8005642:	4b15      	ldr	r3, [pc, #84]	; (8005698 <_sbrk+0x60>)
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800564c:	4b13      	ldr	r3, [pc, #76]	; (800569c <_sbrk+0x64>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005654:	4b11      	ldr	r3, [pc, #68]	; (800569c <_sbrk+0x64>)
 8005656:	4a12      	ldr	r2, [pc, #72]	; (80056a0 <_sbrk+0x68>)
 8005658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800565a:	4b10      	ldr	r3, [pc, #64]	; (800569c <_sbrk+0x64>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4413      	add	r3, r2
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	429a      	cmp	r2, r3
 8005666:	d207      	bcs.n	8005678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005668:	f009 fd32 	bl	800f0d0 <__errno>
 800566c:	4603      	mov	r3, r0
 800566e:	220c      	movs	r2, #12
 8005670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005672:	f04f 33ff 	mov.w	r3, #4294967295
 8005676:	e009      	b.n	800568c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005678:	4b08      	ldr	r3, [pc, #32]	; (800569c <_sbrk+0x64>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800567e:	4b07      	ldr	r3, [pc, #28]	; (800569c <_sbrk+0x64>)
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4413      	add	r3, r2
 8005686:	4a05      	ldr	r2, [pc, #20]	; (800569c <_sbrk+0x64>)
 8005688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800568a:	68fb      	ldr	r3, [r7, #12]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20020000 	.word	0x20020000
 8005698:	00000400 	.word	0x00000400
 800569c:	200016d4 	.word	0x200016d4
 80056a0:	20001e20 	.word	0x20001e20

080056a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <SystemInit+0x20>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ae:	4a05      	ldr	r2, [pc, #20]	; (80056c4 <SystemInit+0x20>)
 80056b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056b8:	bf00      	nop
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	e000ed00 	.word	0xe000ed00

080056c8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	0a5a      	lsrs	r2, r3, #9
 80056d8:	490f      	ldr	r1, [pc, #60]	; (8005718 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80056da:	fba1 1202 	umull	r1, r2, r1, r2
 80056de:	09d2      	lsrs	r2, r2, #7
 80056e0:	490e      	ldr	r1, [pc, #56]	; (800571c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80056e2:	fb01 f202 	mul.w	r2, r1, r2
 80056e6:	1a9b      	subs	r3, r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	0a5b      	lsrs	r3, r3, #9
 80056f0:	4a09      	ldr	r2, [pc, #36]	; (8005718 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	09db      	lsrs	r3, r3, #7
 80056f8:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	441a      	add	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	601a      	str	r2, [r3, #0]
}
 800570c:	bf00      	nop
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	00044b83 	.word	0x00044b83
 800571c:	3b9aca00 	.word	0x3b9aca00

08005720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005758 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005724:	480d      	ldr	r0, [pc, #52]	; (800575c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005726:	490e      	ldr	r1, [pc, #56]	; (8005760 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005728:	4a0e      	ldr	r2, [pc, #56]	; (8005764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800572a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800572c:	e002      	b.n	8005734 <LoopCopyDataInit>

0800572e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800572e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005732:	3304      	adds	r3, #4

08005734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005738:	d3f9      	bcc.n	800572e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800573a:	4a0b      	ldr	r2, [pc, #44]	; (8005768 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800573c:	4c0b      	ldr	r4, [pc, #44]	; (800576c <LoopFillZerobss+0x26>)
  movs r3, #0
 800573e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005740:	e001      	b.n	8005746 <LoopFillZerobss>

08005742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005744:	3204      	adds	r2, #4

08005746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005748:	d3fb      	bcc.n	8005742 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800574a:	f7ff ffab 	bl	80056a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800574e:	f009 fcc5 	bl	800f0dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005752:	f7fc f983 	bl	8001a5c <main>
  bx  lr    
 8005756:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800575c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005760:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8005764:	08012348 	.word	0x08012348
  ldr r2, =_sbss
 8005768:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800576c:	20001e20 	.word	0x20001e20

08005770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005770:	e7fe      	b.n	8005770 <ADC_IRQHandler>
	...

08005774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005778:	4b0e      	ldr	r3, [pc, #56]	; (80057b4 <HAL_Init+0x40>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a0d      	ldr	r2, [pc, #52]	; (80057b4 <HAL_Init+0x40>)
 800577e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005784:	4b0b      	ldr	r3, [pc, #44]	; (80057b4 <HAL_Init+0x40>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a0a      	ldr	r2, [pc, #40]	; (80057b4 <HAL_Init+0x40>)
 800578a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800578e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005790:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <HAL_Init+0x40>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a07      	ldr	r2, [pc, #28]	; (80057b4 <HAL_Init+0x40>)
 8005796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800579a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800579c:	2003      	movs	r0, #3
 800579e:	f000 f94f 	bl	8005a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057a2:	2000      	movs	r0, #0
 80057a4:	f000 f808 	bl	80057b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057a8:	f7ff fb3e 	bl	8004e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40023c00 	.word	0x40023c00

080057b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057c0:	4b12      	ldr	r3, [pc, #72]	; (800580c <HAL_InitTick+0x54>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	4b12      	ldr	r3, [pc, #72]	; (8005810 <HAL_InitTick+0x58>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	4619      	mov	r1, r3
 80057ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80057d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 f967 	bl	8005aaa <HAL_SYSTICK_Config>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e00e      	b.n	8005804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b0f      	cmp	r3, #15
 80057ea:	d80a      	bhi.n	8005802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057ec:	2200      	movs	r2, #0
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	f04f 30ff 	mov.w	r0, #4294967295
 80057f4:	f000 f92f 	bl	8005a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80057f8:	4a06      	ldr	r2, [pc, #24]	; (8005814 <HAL_InitTick+0x5c>)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	e000      	b.n	8005804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
}
 8005804:	4618      	mov	r0, r3
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20000018 	.word	0x20000018
 8005810:	20000020 	.word	0x20000020
 8005814:	2000001c 	.word	0x2000001c

08005818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800581c:	4b06      	ldr	r3, [pc, #24]	; (8005838 <HAL_IncTick+0x20>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	461a      	mov	r2, r3
 8005822:	4b06      	ldr	r3, [pc, #24]	; (800583c <HAL_IncTick+0x24>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4413      	add	r3, r2
 8005828:	4a04      	ldr	r2, [pc, #16]	; (800583c <HAL_IncTick+0x24>)
 800582a:	6013      	str	r3, [r2, #0]
}
 800582c:	bf00      	nop
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	20000020 	.word	0x20000020
 800583c:	20001740 	.word	0x20001740

08005840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  return uwTick;
 8005844:	4b03      	ldr	r3, [pc, #12]	; (8005854 <HAL_GetTick+0x14>)
 8005846:	681b      	ldr	r3, [r3, #0]
}
 8005848:	4618      	mov	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20001740 	.word	0x20001740

08005858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005860:	f7ff ffee 	bl	8005840 <HAL_GetTick>
 8005864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005870:	d005      	beq.n	800587e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005872:	4b0a      	ldr	r3, [pc, #40]	; (800589c <HAL_Delay+0x44>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800587e:	bf00      	nop
 8005880:	f7ff ffde 	bl	8005840 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	429a      	cmp	r2, r3
 800588e:	d8f7      	bhi.n	8005880 <HAL_Delay+0x28>
  {
  }
}
 8005890:	bf00      	nop
 8005892:	bf00      	nop
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20000020 	.word	0x20000020

080058a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <__NVIC_SetPriorityGrouping+0x44>)
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058bc:	4013      	ands	r3, r2
 80058be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058d2:	4a04      	ldr	r2, [pc, #16]	; (80058e4 <__NVIC_SetPriorityGrouping+0x44>)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	60d3      	str	r3, [r2, #12]
}
 80058d8:	bf00      	nop
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	e000ed00 	.word	0xe000ed00

080058e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058ec:	4b04      	ldr	r3, [pc, #16]	; (8005900 <__NVIC_GetPriorityGrouping+0x18>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	0a1b      	lsrs	r3, r3, #8
 80058f2:	f003 0307 	and.w	r3, r3, #7
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	e000ed00 	.word	0xe000ed00

08005904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	4603      	mov	r3, r0
 800590c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800590e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005912:	2b00      	cmp	r3, #0
 8005914:	db0b      	blt.n	800592e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005916:	79fb      	ldrb	r3, [r7, #7]
 8005918:	f003 021f 	and.w	r2, r3, #31
 800591c:	4907      	ldr	r1, [pc, #28]	; (800593c <__NVIC_EnableIRQ+0x38>)
 800591e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005922:	095b      	lsrs	r3, r3, #5
 8005924:	2001      	movs	r0, #1
 8005926:	fa00 f202 	lsl.w	r2, r0, r2
 800592a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	e000e100 	.word	0xe000e100

08005940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	4603      	mov	r3, r0
 8005948:	6039      	str	r1, [r7, #0]
 800594a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800594c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005950:	2b00      	cmp	r3, #0
 8005952:	db0a      	blt.n	800596a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	b2da      	uxtb	r2, r3
 8005958:	490c      	ldr	r1, [pc, #48]	; (800598c <__NVIC_SetPriority+0x4c>)
 800595a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800595e:	0112      	lsls	r2, r2, #4
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	440b      	add	r3, r1
 8005964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005968:	e00a      	b.n	8005980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	b2da      	uxtb	r2, r3
 800596e:	4908      	ldr	r1, [pc, #32]	; (8005990 <__NVIC_SetPriority+0x50>)
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	3b04      	subs	r3, #4
 8005978:	0112      	lsls	r2, r2, #4
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	440b      	add	r3, r1
 800597e:	761a      	strb	r2, [r3, #24]
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	e000e100 	.word	0xe000e100
 8005990:	e000ed00 	.word	0xe000ed00

08005994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005994:	b480      	push	{r7}
 8005996:	b089      	sub	sp, #36	; 0x24
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f003 0307 	and.w	r3, r3, #7
 80059a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f1c3 0307 	rsb	r3, r3, #7
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	bf28      	it	cs
 80059b2:	2304      	movcs	r3, #4
 80059b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	3304      	adds	r3, #4
 80059ba:	2b06      	cmp	r3, #6
 80059bc:	d902      	bls.n	80059c4 <NVIC_EncodePriority+0x30>
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	3b03      	subs	r3, #3
 80059c2:	e000      	b.n	80059c6 <NVIC_EncodePriority+0x32>
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059c8:	f04f 32ff 	mov.w	r2, #4294967295
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43da      	mvns	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	401a      	ands	r2, r3
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059dc:	f04f 31ff 	mov.w	r1, #4294967295
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	fa01 f303 	lsl.w	r3, r1, r3
 80059e6:	43d9      	mvns	r1, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059ec:	4313      	orrs	r3, r2
         );
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3724      	adds	r7, #36	; 0x24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
	...

080059fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a0c:	d301      	bcc.n	8005a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e00f      	b.n	8005a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a12:	4a0a      	ldr	r2, [pc, #40]	; (8005a3c <SysTick_Config+0x40>)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a1a:	210f      	movs	r1, #15
 8005a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a20:	f7ff ff8e 	bl	8005940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a24:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <SysTick_Config+0x40>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a2a:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <SysTick_Config+0x40>)
 8005a2c:	2207      	movs	r2, #7
 8005a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	e000e010 	.word	0xe000e010

08005a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff ff29 	bl	80058a0 <__NVIC_SetPriorityGrouping>
}
 8005a4e:	bf00      	nop
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b086      	sub	sp, #24
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
 8005a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a68:	f7ff ff3e 	bl	80058e8 <__NVIC_GetPriorityGrouping>
 8005a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	6978      	ldr	r0, [r7, #20]
 8005a74:	f7ff ff8e 	bl	8005994 <NVIC_EncodePriority>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a7e:	4611      	mov	r1, r2
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff ff5d 	bl	8005940 <__NVIC_SetPriority>
}
 8005a86:	bf00      	nop
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b082      	sub	sp, #8
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	4603      	mov	r3, r0
 8005a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff ff31 	bl	8005904 <__NVIC_EnableIRQ>
}
 8005aa2:	bf00      	nop
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b082      	sub	sp, #8
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff ffa2 	bl	80059fc <SysTick_Config>
 8005ab8:	4603      	mov	r3, r0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
	...

08005ac4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ad0:	f7ff feb6 	bl	8005840 <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e099      	b.n	8005c14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0201 	bic.w	r2, r2, #1
 8005afe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b00:	e00f      	b.n	8005b22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b02:	f7ff fe9d 	bl	8005840 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b05      	cmp	r3, #5
 8005b0e:	d908      	bls.n	8005b22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2220      	movs	r2, #32
 8005b14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e078      	b.n	8005c14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e8      	bne.n	8005b02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4b38      	ldr	r3, [pc, #224]	; (8005c1c <HAL_DMA_Init+0x158>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	d107      	bne.n	8005b8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b84:	4313      	orrs	r3, r2
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f023 0307 	bic.w	r3, r3, #7
 8005ba2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d117      	bne.n	8005be6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00e      	beq.n	8005be6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fb01 	bl	80061d0 <DMA_CheckFifoParam>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2240      	movs	r2, #64	; 0x40
 8005bd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005be2:	2301      	movs	r3, #1
 8005be4:	e016      	b.n	8005c14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fab8 	bl	8006164 <DMA_CalcBaseAndBitshift>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfc:	223f      	movs	r2, #63	; 0x3f
 8005bfe:	409a      	lsls	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	f010803f 	.word	0xf010803f

08005c20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d101      	bne.n	8005c46 <HAL_DMA_Start_IT+0x26>
 8005c42:	2302      	movs	r3, #2
 8005c44:	e040      	b.n	8005cc8 <HAL_DMA_Start_IT+0xa8>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d12f      	bne.n	8005cba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 fa4a 	bl	8006108 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c78:	223f      	movs	r2, #63	; 0x3f
 8005c7a:	409a      	lsls	r2, r3
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0216 	orr.w	r2, r2, #22
 8005c8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0208 	orr.w	r2, r2, #8
 8005ca6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0201 	orr.w	r2, r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	e005      	b.n	8005cc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cdc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005cde:	f7ff fdaf 	bl	8005840 <HAL_GetTick>
 8005ce2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d008      	beq.n	8005d02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2280      	movs	r2, #128	; 0x80
 8005cf4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e052      	b.n	8005da8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0216 	bic.w	r2, r2, #22
 8005d10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695a      	ldr	r2, [r3, #20]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d103      	bne.n	8005d32 <HAL_DMA_Abort+0x62>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d007      	beq.n	8005d42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0208 	bic.w	r2, r2, #8
 8005d40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0201 	bic.w	r2, r2, #1
 8005d50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d52:	e013      	b.n	8005d7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d54:	f7ff fd74 	bl	8005840 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b05      	cmp	r3, #5
 8005d60:	d90c      	bls.n	8005d7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2203      	movs	r2, #3
 8005d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e015      	b.n	8005da8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e4      	bne.n	8005d54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8e:	223f      	movs	r2, #63	; 0x3f
 8005d90:	409a      	lsls	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d004      	beq.n	8005dce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2280      	movs	r2, #128	; 0x80
 8005dc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e00c      	b.n	8005de8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2205      	movs	r2, #5
 8005dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0201 	bic.w	r2, r2, #1
 8005de4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e00:	4b8e      	ldr	r3, [pc, #568]	; (800603c <HAL_DMA_IRQHandler+0x248>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a8e      	ldr	r2, [pc, #568]	; (8006040 <HAL_DMA_IRQHandler+0x24c>)
 8005e06:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0a:	0a9b      	lsrs	r3, r3, #10
 8005e0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1e:	2208      	movs	r2, #8
 8005e20:	409a      	lsls	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4013      	ands	r3, r2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d01a      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d013      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0204 	bic.w	r2, r2, #4
 8005e46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4c:	2208      	movs	r2, #8
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e58:	f043 0201 	orr.w	r2, r3, #1
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e64:	2201      	movs	r2, #1
 8005e66:	409a      	lsls	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d012      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00b      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e82:	2201      	movs	r2, #1
 8005e84:	409a      	lsls	r2, r3
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8e:	f043 0202 	orr.w	r2, r3, #2
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9a:	2204      	movs	r2, #4
 8005e9c:	409a      	lsls	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d012      	beq.n	8005ecc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00b      	beq.n	8005ecc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb8:	2204      	movs	r2, #4
 8005eba:	409a      	lsls	r2, r3
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec4:	f043 0204 	orr.w	r2, r3, #4
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed0:	2210      	movs	r2, #16
 8005ed2:	409a      	lsls	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d043      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d03c      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eee:	2210      	movs	r2, #16
 8005ef0:	409a      	lsls	r2, r3
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d018      	beq.n	8005f36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d108      	bne.n	8005f24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d024      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	4798      	blx	r3
 8005f22:	e01f      	b.n	8005f64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01b      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
 8005f34:	e016      	b.n	8005f64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d107      	bne.n	8005f54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0208 	bic.w	r2, r2, #8
 8005f52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f68:	2220      	movs	r2, #32
 8005f6a:	409a      	lsls	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 808f 	beq.w	8006094 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 8087 	beq.w	8006094 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	409a      	lsls	r2, r3
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b05      	cmp	r3, #5
 8005f9c:	d136      	bne.n	800600c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0216 	bic.w	r2, r2, #22
 8005fac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695a      	ldr	r2, [r3, #20]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d103      	bne.n	8005fce <HAL_DMA_IRQHandler+0x1da>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0208 	bic.w	r2, r2, #8
 8005fdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe2:	223f      	movs	r2, #63	; 0x3f
 8005fe4:	409a      	lsls	r2, r3
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d07e      	beq.n	8006100 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
        }
        return;
 800600a:	e079      	b.n	8006100 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01d      	beq.n	8006056 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10d      	bne.n	8006044 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602c:	2b00      	cmp	r3, #0
 800602e:	d031      	beq.n	8006094 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	4798      	blx	r3
 8006038:	e02c      	b.n	8006094 <HAL_DMA_IRQHandler+0x2a0>
 800603a:	bf00      	nop
 800603c:	20000018 	.word	0x20000018
 8006040:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d023      	beq.n	8006094 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	4798      	blx	r3
 8006054:	e01e      	b.n	8006094 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10f      	bne.n	8006084 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0210 	bic.w	r2, r2, #16
 8006072:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006098:	2b00      	cmp	r3, #0
 800609a:	d032      	beq.n	8006102 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d022      	beq.n	80060ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2205      	movs	r2, #5
 80060ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0201 	bic.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	3301      	adds	r3, #1
 80060c4:	60bb      	str	r3, [r7, #8]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d307      	bcc.n	80060dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f2      	bne.n	80060c0 <HAL_DMA_IRQHandler+0x2cc>
 80060da:	e000      	b.n	80060de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80060dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d005      	beq.n	8006102 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	4798      	blx	r3
 80060fe:	e000      	b.n	8006102 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006100:	bf00      	nop
    }
  }
}
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006124:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	2b40      	cmp	r3, #64	; 0x40
 8006134:	d108      	bne.n	8006148 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006146:	e007      	b.n	8006158 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	60da      	str	r2, [r3, #12]
}
 8006158:	bf00      	nop
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	3b10      	subs	r3, #16
 8006174:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <DMA_CalcBaseAndBitshift+0x64>)
 8006176:	fba2 2303 	umull	r2, r3, r2, r3
 800617a:	091b      	lsrs	r3, r3, #4
 800617c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800617e:	4a13      	ldr	r2, [pc, #76]	; (80061cc <DMA_CalcBaseAndBitshift+0x68>)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b03      	cmp	r3, #3
 8006190:	d909      	bls.n	80061a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800619a:	f023 0303 	bic.w	r3, r3, #3
 800619e:	1d1a      	adds	r2, r3, #4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	659a      	str	r2, [r3, #88]	; 0x58
 80061a4:	e007      	b.n	80061b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80061ae:	f023 0303 	bic.w	r3, r3, #3
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	aaaaaaab 	.word	0xaaaaaaab
 80061cc:	08011f50 	.word	0x08011f50

080061d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d11f      	bne.n	800622a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d856      	bhi.n	800629e <DMA_CheckFifoParam+0xce>
 80061f0:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <DMA_CheckFifoParam+0x28>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	08006209 	.word	0x08006209
 80061fc:	0800621b 	.word	0x0800621b
 8006200:	08006209 	.word	0x08006209
 8006204:	0800629f 	.word	0x0800629f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d046      	beq.n	80062a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006218:	e043      	b.n	80062a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006222:	d140      	bne.n	80062a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006228:	e03d      	b.n	80062a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006232:	d121      	bne.n	8006278 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b03      	cmp	r3, #3
 8006238:	d837      	bhi.n	80062aa <DMA_CheckFifoParam+0xda>
 800623a:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <DMA_CheckFifoParam+0x70>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	08006251 	.word	0x08006251
 8006244:	08006257 	.word	0x08006257
 8006248:	08006251 	.word	0x08006251
 800624c:	08006269 	.word	0x08006269
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	73fb      	strb	r3, [r7, #15]
      break;
 8006254:	e030      	b.n	80062b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d025      	beq.n	80062ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006266:	e022      	b.n	80062ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006270:	d11f      	bne.n	80062b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006276:	e01c      	b.n	80062b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d903      	bls.n	8006286 <DMA_CheckFifoParam+0xb6>
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2b03      	cmp	r3, #3
 8006282:	d003      	beq.n	800628c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006284:	e018      	b.n	80062b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	73fb      	strb	r3, [r7, #15]
      break;
 800628a:	e015      	b.n	80062b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00e      	beq.n	80062b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	73fb      	strb	r3, [r7, #15]
      break;
 800629c:	e00b      	b.n	80062b6 <DMA_CheckFifoParam+0xe6>
      break;
 800629e:	bf00      	nop
 80062a0:	e00a      	b.n	80062b8 <DMA_CheckFifoParam+0xe8>
      break;
 80062a2:	bf00      	nop
 80062a4:	e008      	b.n	80062b8 <DMA_CheckFifoParam+0xe8>
      break;
 80062a6:	bf00      	nop
 80062a8:	e006      	b.n	80062b8 <DMA_CheckFifoParam+0xe8>
      break;
 80062aa:	bf00      	nop
 80062ac:	e004      	b.n	80062b8 <DMA_CheckFifoParam+0xe8>
      break;
 80062ae:	bf00      	nop
 80062b0:	e002      	b.n	80062b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80062b2:	bf00      	nop
 80062b4:	e000      	b.n	80062b8 <DMA_CheckFifoParam+0xe8>
      break;
 80062b6:	bf00      	nop
    }
  } 
  
  return status; 
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop

080062c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b089      	sub	sp, #36	; 0x24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062da:	2300      	movs	r3, #0
 80062dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062de:	2300      	movs	r3, #0
 80062e0:	61fb      	str	r3, [r7, #28]
 80062e2:	e159      	b.n	8006598 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062e4:	2201      	movs	r2, #1
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4013      	ands	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	f040 8148 	bne.w	8006592 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	2b01      	cmp	r3, #1
 800630c:	d005      	beq.n	800631a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006316:	2b02      	cmp	r3, #2
 8006318:	d130      	bne.n	800637c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	2203      	movs	r2, #3
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	43db      	mvns	r3, r3
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	4013      	ands	r3, r2
 8006330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	fa02 f303 	lsl.w	r3, r2, r3
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	4313      	orrs	r3, r2
 8006342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006350:	2201      	movs	r2, #1
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	43db      	mvns	r3, r3
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	4013      	ands	r3, r2
 800635e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	091b      	lsrs	r3, r3, #4
 8006366:	f003 0201 	and.w	r2, r3, #1
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	4313      	orrs	r3, r2
 8006374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	2b03      	cmp	r3, #3
 8006386:	d017      	beq.n	80063b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	2203      	movs	r2, #3
 8006394:	fa02 f303 	lsl.w	r3, r2, r3
 8006398:	43db      	mvns	r3, r3
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	4013      	ands	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f003 0303 	and.w	r3, r3, #3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d123      	bne.n	800640c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	08da      	lsrs	r2, r3, #3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3208      	adds	r2, #8
 80063cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	220f      	movs	r2, #15
 80063dc:	fa02 f303 	lsl.w	r3, r2, r3
 80063e0:	43db      	mvns	r3, r3
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	4013      	ands	r3, r2
 80063e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	691a      	ldr	r2, [r3, #16]
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	fa02 f303 	lsl.w	r3, r2, r3
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	08da      	lsrs	r2, r3, #3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3208      	adds	r2, #8
 8006406:	69b9      	ldr	r1, [r7, #24]
 8006408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	2203      	movs	r2, #3
 8006418:	fa02 f303 	lsl.w	r3, r2, r3
 800641c:	43db      	mvns	r3, r3
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	4013      	ands	r3, r2
 8006422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f003 0203 	and.w	r2, r3, #3
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	4313      	orrs	r3, r2
 8006438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 80a2 	beq.w	8006592 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	4b57      	ldr	r3, [pc, #348]	; (80065b0 <HAL_GPIO_Init+0x2e8>)
 8006454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006456:	4a56      	ldr	r2, [pc, #344]	; (80065b0 <HAL_GPIO_Init+0x2e8>)
 8006458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800645c:	6453      	str	r3, [r2, #68]	; 0x44
 800645e:	4b54      	ldr	r3, [pc, #336]	; (80065b0 <HAL_GPIO_Init+0x2e8>)
 8006460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800646a:	4a52      	ldr	r2, [pc, #328]	; (80065b4 <HAL_GPIO_Init+0x2ec>)
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	089b      	lsrs	r3, r3, #2
 8006470:	3302      	adds	r3, #2
 8006472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	220f      	movs	r2, #15
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	43db      	mvns	r3, r3
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	4013      	ands	r3, r2
 800648c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a49      	ldr	r2, [pc, #292]	; (80065b8 <HAL_GPIO_Init+0x2f0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d019      	beq.n	80064ca <HAL_GPIO_Init+0x202>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a48      	ldr	r2, [pc, #288]	; (80065bc <HAL_GPIO_Init+0x2f4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <HAL_GPIO_Init+0x1fe>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a47      	ldr	r2, [pc, #284]	; (80065c0 <HAL_GPIO_Init+0x2f8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00d      	beq.n	80064c2 <HAL_GPIO_Init+0x1fa>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a46      	ldr	r2, [pc, #280]	; (80065c4 <HAL_GPIO_Init+0x2fc>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d007      	beq.n	80064be <HAL_GPIO_Init+0x1f6>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a45      	ldr	r2, [pc, #276]	; (80065c8 <HAL_GPIO_Init+0x300>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d101      	bne.n	80064ba <HAL_GPIO_Init+0x1f2>
 80064b6:	2304      	movs	r3, #4
 80064b8:	e008      	b.n	80064cc <HAL_GPIO_Init+0x204>
 80064ba:	2307      	movs	r3, #7
 80064bc:	e006      	b.n	80064cc <HAL_GPIO_Init+0x204>
 80064be:	2303      	movs	r3, #3
 80064c0:	e004      	b.n	80064cc <HAL_GPIO_Init+0x204>
 80064c2:	2302      	movs	r3, #2
 80064c4:	e002      	b.n	80064cc <HAL_GPIO_Init+0x204>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <HAL_GPIO_Init+0x204>
 80064ca:	2300      	movs	r3, #0
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	f002 0203 	and.w	r2, r2, #3
 80064d2:	0092      	lsls	r2, r2, #2
 80064d4:	4093      	lsls	r3, r2
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	4313      	orrs	r3, r2
 80064da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064dc:	4935      	ldr	r1, [pc, #212]	; (80065b4 <HAL_GPIO_Init+0x2ec>)
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	089b      	lsrs	r3, r3, #2
 80064e2:	3302      	adds	r3, #2
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064ea:	4b38      	ldr	r3, [pc, #224]	; (80065cc <HAL_GPIO_Init+0x304>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	43db      	mvns	r3, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4013      	ands	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800650e:	4a2f      	ldr	r2, [pc, #188]	; (80065cc <HAL_GPIO_Init+0x304>)
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006514:	4b2d      	ldr	r3, [pc, #180]	; (80065cc <HAL_GPIO_Init+0x304>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	43db      	mvns	r3, r3
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	4013      	ands	r3, r2
 8006522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006538:	4a24      	ldr	r2, [pc, #144]	; (80065cc <HAL_GPIO_Init+0x304>)
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800653e:	4b23      	ldr	r3, [pc, #140]	; (80065cc <HAL_GPIO_Init+0x304>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	43db      	mvns	r3, r3
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	4013      	ands	r3, r2
 800654c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006562:	4a1a      	ldr	r2, [pc, #104]	; (80065cc <HAL_GPIO_Init+0x304>)
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006568:	4b18      	ldr	r3, [pc, #96]	; (80065cc <HAL_GPIO_Init+0x304>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	43db      	mvns	r3, r3
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	4013      	ands	r3, r2
 8006576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800658c:	4a0f      	ldr	r2, [pc, #60]	; (80065cc <HAL_GPIO_Init+0x304>)
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	3301      	adds	r3, #1
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	2b0f      	cmp	r3, #15
 800659c:	f67f aea2 	bls.w	80062e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	3724      	adds	r7, #36	; 0x24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40023800 	.word	0x40023800
 80065b4:	40013800 	.word	0x40013800
 80065b8:	40020000 	.word	0x40020000
 80065bc:	40020400 	.word	0x40020400
 80065c0:	40020800 	.word	0x40020800
 80065c4:	40020c00 	.word	0x40020c00
 80065c8:	40021000 	.word	0x40021000
 80065cc:	40013c00 	.word	0x40013c00

080065d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	460b      	mov	r3, r1
 80065da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	887b      	ldrh	r3, [r7, #2]
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80065e8:	2301      	movs	r3, #1
 80065ea:	73fb      	strb	r3, [r7, #15]
 80065ec:	e001      	b.n	80065f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	807b      	strh	r3, [r7, #2]
 800660c:	4613      	mov	r3, r2
 800660e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006610:	787b      	ldrb	r3, [r7, #1]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006616:	887a      	ldrh	r2, [r7, #2]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800661c:	e003      	b.n	8006626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800661e:	887b      	ldrh	r3, [r7, #2]
 8006620:	041a      	lsls	r2, r3, #16
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	619a      	str	r2, [r3, #24]
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	460b      	mov	r3, r1
 800663c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006644:	887a      	ldrh	r2, [r7, #2]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4013      	ands	r3, r2
 800664a:	041a      	lsls	r2, r3, #16
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	43d9      	mvns	r1, r3
 8006650:	887b      	ldrh	r3, [r7, #2]
 8006652:	400b      	ands	r3, r1
 8006654:	431a      	orrs	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	619a      	str	r2, [r3, #24]
}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
	...

08006668 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006672:	4b08      	ldr	r3, [pc, #32]	; (8006694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006674:	695a      	ldr	r2, [r3, #20]
 8006676:	88fb      	ldrh	r3, [r7, #6]
 8006678:	4013      	ands	r3, r2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d006      	beq.n	800668c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800667e:	4a05      	ldr	r2, [pc, #20]	; (8006694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006680:	88fb      	ldrh	r3, [r7, #6]
 8006682:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006684:	88fb      	ldrh	r3, [r7, #6]
 8006686:	4618      	mov	r0, r3
 8006688:	f7fa fc68 	bl	8000f5c <HAL_GPIO_EXTI_Callback>
  }
}
 800668c:	bf00      	nop
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	40013c00 	.word	0x40013c00

08006698 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800669a:	b08f      	sub	sp, #60	; 0x3c
 800669c:	af0a      	add	r7, sp, #40	; 0x28
 800669e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e054      	b.n	8006754 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d106      	bne.n	80066ca <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f008 fa17 	bl	800eaf8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2203      	movs	r2, #3
 80066ce:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d102      	bne.n	80066e4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f005 fa45 	bl	800bb78 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	687e      	ldr	r6, [r7, #4]
 80066f6:	466d      	mov	r5, sp
 80066f8:	f106 0410 	add.w	r4, r6, #16
 80066fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006704:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006708:	e885 0003 	stmia.w	r5, {r0, r1}
 800670c:	1d33      	adds	r3, r6, #4
 800670e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006710:	6838      	ldr	r0, [r7, #0]
 8006712:	f005 f9bf 	bl	800ba94 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2101      	movs	r1, #1
 800671c:	4618      	mov	r0, r3
 800671e:	f005 fa3c 	bl	800bb9a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	603b      	str	r3, [r7, #0]
 8006728:	687e      	ldr	r6, [r7, #4]
 800672a:	466d      	mov	r5, sp
 800672c:	f106 0410 	add.w	r4, r6, #16
 8006730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006738:	e894 0003 	ldmia.w	r4, {r0, r1}
 800673c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006740:	1d33      	adds	r3, r6, #4
 8006742:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006744:	6838      	ldr	r0, [r7, #0]
 8006746:	f005 fbc5 	bl	800bed4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800675c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800675c:	b590      	push	{r4, r7, lr}
 800675e:	b089      	sub	sp, #36	; 0x24
 8006760:	af04      	add	r7, sp, #16
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	4608      	mov	r0, r1
 8006766:	4611      	mov	r1, r2
 8006768:	461a      	mov	r2, r3
 800676a:	4603      	mov	r3, r0
 800676c:	70fb      	strb	r3, [r7, #3]
 800676e:	460b      	mov	r3, r1
 8006770:	70bb      	strb	r3, [r7, #2]
 8006772:	4613      	mov	r3, r2
 8006774:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_HCD_HC_Init+0x28>
 8006780:	2302      	movs	r3, #2
 8006782:	e076      	b.n	8006872 <HAL_HCD_HC_Init+0x116>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	212c      	movs	r1, #44	; 0x2c
 8006792:	fb01 f303 	mul.w	r3, r1, r3
 8006796:	4413      	add	r3, r2
 8006798:	333d      	adds	r3, #61	; 0x3d
 800679a:	2200      	movs	r2, #0
 800679c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800679e:	78fb      	ldrb	r3, [r7, #3]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	212c      	movs	r1, #44	; 0x2c
 80067a4:	fb01 f303 	mul.w	r3, r1, r3
 80067a8:	4413      	add	r3, r2
 80067aa:	3338      	adds	r3, #56	; 0x38
 80067ac:	787a      	ldrb	r2, [r7, #1]
 80067ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	212c      	movs	r1, #44	; 0x2c
 80067b6:	fb01 f303 	mul.w	r3, r1, r3
 80067ba:	4413      	add	r3, r2
 80067bc:	3340      	adds	r3, #64	; 0x40
 80067be:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80067c0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80067c2:	78fb      	ldrb	r3, [r7, #3]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	212c      	movs	r1, #44	; 0x2c
 80067c8:	fb01 f303 	mul.w	r3, r1, r3
 80067cc:	4413      	add	r3, r2
 80067ce:	3339      	adds	r3, #57	; 0x39
 80067d0:	78fa      	ldrb	r2, [r7, #3]
 80067d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80067d4:	78fb      	ldrb	r3, [r7, #3]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	212c      	movs	r1, #44	; 0x2c
 80067da:	fb01 f303 	mul.w	r3, r1, r3
 80067de:	4413      	add	r3, r2
 80067e0:	333f      	adds	r3, #63	; 0x3f
 80067e2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80067e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	78ba      	ldrb	r2, [r7, #2]
 80067ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067f0:	b2d0      	uxtb	r0, r2
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	212c      	movs	r1, #44	; 0x2c
 80067f6:	fb01 f303 	mul.w	r3, r1, r3
 80067fa:	4413      	add	r3, r2
 80067fc:	333a      	adds	r3, #58	; 0x3a
 80067fe:	4602      	mov	r2, r0
 8006800:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8006802:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006806:	2b00      	cmp	r3, #0
 8006808:	da09      	bge.n	800681e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	212c      	movs	r1, #44	; 0x2c
 8006810:	fb01 f303 	mul.w	r3, r1, r3
 8006814:	4413      	add	r3, r2
 8006816:	333b      	adds	r3, #59	; 0x3b
 8006818:	2201      	movs	r2, #1
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	e008      	b.n	8006830 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	212c      	movs	r1, #44	; 0x2c
 8006824:	fb01 f303 	mul.w	r3, r1, r3
 8006828:	4413      	add	r3, r2
 800682a:	333b      	adds	r3, #59	; 0x3b
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	212c      	movs	r1, #44	; 0x2c
 8006836:	fb01 f303 	mul.w	r3, r1, r3
 800683a:	4413      	add	r3, r2
 800683c:	333c      	adds	r3, #60	; 0x3c
 800683e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006842:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	787c      	ldrb	r4, [r7, #1]
 800684a:	78ba      	ldrb	r2, [r7, #2]
 800684c:	78f9      	ldrb	r1, [r7, #3]
 800684e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006850:	9302      	str	r3, [sp, #8]
 8006852:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	f897 3020 	ldrb.w	r3, [r7, #32]
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	4623      	mov	r3, r4
 8006860:	f005 fcbe 	bl	800c1e0 <USB_HC_Init>
 8006864:	4603      	mov	r3, r0
 8006866:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006870:	7bfb      	ldrb	r3, [r7, #15]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	bd90      	pop	{r4, r7, pc}

0800687a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	460b      	mov	r3, r1
 8006884:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006890:	2b01      	cmp	r3, #1
 8006892:	d101      	bne.n	8006898 <HAL_HCD_HC_Halt+0x1e>
 8006894:	2302      	movs	r3, #2
 8006896:	e00f      	b.n	80068b8 <HAL_HCD_HC_Halt+0x3e>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	78fa      	ldrb	r2, [r7, #3]
 80068a6:	4611      	mov	r1, r2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f005 ff0e 	bl	800c6ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	4608      	mov	r0, r1
 80068ca:	4611      	mov	r1, r2
 80068cc:	461a      	mov	r2, r3
 80068ce:	4603      	mov	r3, r0
 80068d0:	70fb      	strb	r3, [r7, #3]
 80068d2:	460b      	mov	r3, r1
 80068d4:	70bb      	strb	r3, [r7, #2]
 80068d6:	4613      	mov	r3, r2
 80068d8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	212c      	movs	r1, #44	; 0x2c
 80068e0:	fb01 f303 	mul.w	r3, r1, r3
 80068e4:	4413      	add	r3, r2
 80068e6:	333b      	adds	r3, #59	; 0x3b
 80068e8:	78ba      	ldrb	r2, [r7, #2]
 80068ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	212c      	movs	r1, #44	; 0x2c
 80068f2:	fb01 f303 	mul.w	r3, r1, r3
 80068f6:	4413      	add	r3, r2
 80068f8:	333f      	adds	r3, #63	; 0x3f
 80068fa:	787a      	ldrb	r2, [r7, #1]
 80068fc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80068fe:	7c3b      	ldrb	r3, [r7, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d112      	bne.n	800692a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	212c      	movs	r1, #44	; 0x2c
 800690a:	fb01 f303 	mul.w	r3, r1, r3
 800690e:	4413      	add	r3, r2
 8006910:	3342      	adds	r3, #66	; 0x42
 8006912:	2203      	movs	r2, #3
 8006914:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	212c      	movs	r1, #44	; 0x2c
 800691c:	fb01 f303 	mul.w	r3, r1, r3
 8006920:	4413      	add	r3, r2
 8006922:	333d      	adds	r3, #61	; 0x3d
 8006924:	7f3a      	ldrb	r2, [r7, #28]
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	e008      	b.n	800693c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800692a:	78fb      	ldrb	r3, [r7, #3]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	212c      	movs	r1, #44	; 0x2c
 8006930:	fb01 f303 	mul.w	r3, r1, r3
 8006934:	4413      	add	r3, r2
 8006936:	3342      	adds	r3, #66	; 0x42
 8006938:	2202      	movs	r2, #2
 800693a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800693c:	787b      	ldrb	r3, [r7, #1]
 800693e:	2b03      	cmp	r3, #3
 8006940:	f200 80c6 	bhi.w	8006ad0 <HAL_HCD_HC_SubmitRequest+0x210>
 8006944:	a201      	add	r2, pc, #4	; (adr r2, 800694c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8006946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694a:	bf00      	nop
 800694c:	0800695d 	.word	0x0800695d
 8006950:	08006abd 	.word	0x08006abd
 8006954:	080069c1 	.word	0x080069c1
 8006958:	08006a3f 	.word	0x08006a3f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800695c:	7c3b      	ldrb	r3, [r7, #16]
 800695e:	2b01      	cmp	r3, #1
 8006960:	f040 80b8 	bne.w	8006ad4 <HAL_HCD_HC_SubmitRequest+0x214>
 8006964:	78bb      	ldrb	r3, [r7, #2]
 8006966:	2b00      	cmp	r3, #0
 8006968:	f040 80b4 	bne.w	8006ad4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800696c:	8b3b      	ldrh	r3, [r7, #24]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d108      	bne.n	8006984 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006972:	78fb      	ldrb	r3, [r7, #3]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	212c      	movs	r1, #44	; 0x2c
 8006978:	fb01 f303 	mul.w	r3, r1, r3
 800697c:	4413      	add	r3, r2
 800697e:	3355      	adds	r3, #85	; 0x55
 8006980:	2201      	movs	r2, #1
 8006982:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	212c      	movs	r1, #44	; 0x2c
 800698a:	fb01 f303 	mul.w	r3, r1, r3
 800698e:	4413      	add	r3, r2
 8006990:	3355      	adds	r3, #85	; 0x55
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d109      	bne.n	80069ac <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	212c      	movs	r1, #44	; 0x2c
 800699e:	fb01 f303 	mul.w	r3, r1, r3
 80069a2:	4413      	add	r3, r2
 80069a4:	3342      	adds	r3, #66	; 0x42
 80069a6:	2200      	movs	r2, #0
 80069a8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80069aa:	e093      	b.n	8006ad4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80069ac:	78fb      	ldrb	r3, [r7, #3]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	212c      	movs	r1, #44	; 0x2c
 80069b2:	fb01 f303 	mul.w	r3, r1, r3
 80069b6:	4413      	add	r3, r2
 80069b8:	3342      	adds	r3, #66	; 0x42
 80069ba:	2202      	movs	r2, #2
 80069bc:	701a      	strb	r2, [r3, #0]
      break;
 80069be:	e089      	b.n	8006ad4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80069c0:	78bb      	ldrb	r3, [r7, #2]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d11d      	bne.n	8006a02 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80069c6:	78fb      	ldrb	r3, [r7, #3]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	212c      	movs	r1, #44	; 0x2c
 80069cc:	fb01 f303 	mul.w	r3, r1, r3
 80069d0:	4413      	add	r3, r2
 80069d2:	3355      	adds	r3, #85	; 0x55
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d109      	bne.n	80069ee <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80069da:	78fb      	ldrb	r3, [r7, #3]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	212c      	movs	r1, #44	; 0x2c
 80069e0:	fb01 f303 	mul.w	r3, r1, r3
 80069e4:	4413      	add	r3, r2
 80069e6:	3342      	adds	r3, #66	; 0x42
 80069e8:	2200      	movs	r2, #0
 80069ea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80069ec:	e073      	b.n	8006ad6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	212c      	movs	r1, #44	; 0x2c
 80069f4:	fb01 f303 	mul.w	r3, r1, r3
 80069f8:	4413      	add	r3, r2
 80069fa:	3342      	adds	r3, #66	; 0x42
 80069fc:	2202      	movs	r2, #2
 80069fe:	701a      	strb	r2, [r3, #0]
      break;
 8006a00:	e069      	b.n	8006ad6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006a02:	78fb      	ldrb	r3, [r7, #3]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	212c      	movs	r1, #44	; 0x2c
 8006a08:	fb01 f303 	mul.w	r3, r1, r3
 8006a0c:	4413      	add	r3, r2
 8006a0e:	3354      	adds	r3, #84	; 0x54
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d109      	bne.n	8006a2a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006a16:	78fb      	ldrb	r3, [r7, #3]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	212c      	movs	r1, #44	; 0x2c
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	4413      	add	r3, r2
 8006a22:	3342      	adds	r3, #66	; 0x42
 8006a24:	2200      	movs	r2, #0
 8006a26:	701a      	strb	r2, [r3, #0]
      break;
 8006a28:	e055      	b.n	8006ad6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	212c      	movs	r1, #44	; 0x2c
 8006a30:	fb01 f303 	mul.w	r3, r1, r3
 8006a34:	4413      	add	r3, r2
 8006a36:	3342      	adds	r3, #66	; 0x42
 8006a38:	2202      	movs	r2, #2
 8006a3a:	701a      	strb	r2, [r3, #0]
      break;
 8006a3c:	e04b      	b.n	8006ad6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006a3e:	78bb      	ldrb	r3, [r7, #2]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d11d      	bne.n	8006a80 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006a44:	78fb      	ldrb	r3, [r7, #3]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	212c      	movs	r1, #44	; 0x2c
 8006a4a:	fb01 f303 	mul.w	r3, r1, r3
 8006a4e:	4413      	add	r3, r2
 8006a50:	3355      	adds	r3, #85	; 0x55
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d109      	bne.n	8006a6c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006a58:	78fb      	ldrb	r3, [r7, #3]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	212c      	movs	r1, #44	; 0x2c
 8006a5e:	fb01 f303 	mul.w	r3, r1, r3
 8006a62:	4413      	add	r3, r2
 8006a64:	3342      	adds	r3, #66	; 0x42
 8006a66:	2200      	movs	r2, #0
 8006a68:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006a6a:	e034      	b.n	8006ad6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006a6c:	78fb      	ldrb	r3, [r7, #3]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	212c      	movs	r1, #44	; 0x2c
 8006a72:	fb01 f303 	mul.w	r3, r1, r3
 8006a76:	4413      	add	r3, r2
 8006a78:	3342      	adds	r3, #66	; 0x42
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	701a      	strb	r2, [r3, #0]
      break;
 8006a7e:	e02a      	b.n	8006ad6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	212c      	movs	r1, #44	; 0x2c
 8006a86:	fb01 f303 	mul.w	r3, r1, r3
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3354      	adds	r3, #84	; 0x54
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d109      	bne.n	8006aa8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	212c      	movs	r1, #44	; 0x2c
 8006a9a:	fb01 f303 	mul.w	r3, r1, r3
 8006a9e:	4413      	add	r3, r2
 8006aa0:	3342      	adds	r3, #66	; 0x42
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	701a      	strb	r2, [r3, #0]
      break;
 8006aa6:	e016      	b.n	8006ad6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	212c      	movs	r1, #44	; 0x2c
 8006aae:	fb01 f303 	mul.w	r3, r1, r3
 8006ab2:	4413      	add	r3, r2
 8006ab4:	3342      	adds	r3, #66	; 0x42
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	701a      	strb	r2, [r3, #0]
      break;
 8006aba:	e00c      	b.n	8006ad6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	212c      	movs	r1, #44	; 0x2c
 8006ac2:	fb01 f303 	mul.w	r3, r1, r3
 8006ac6:	4413      	add	r3, r2
 8006ac8:	3342      	adds	r3, #66	; 0x42
 8006aca:	2200      	movs	r2, #0
 8006acc:	701a      	strb	r2, [r3, #0]
      break;
 8006ace:	e002      	b.n	8006ad6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006ad0:	bf00      	nop
 8006ad2:	e000      	b.n	8006ad6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006ad4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	212c      	movs	r1, #44	; 0x2c
 8006adc:	fb01 f303 	mul.w	r3, r1, r3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	3344      	adds	r3, #68	; 0x44
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	8b3a      	ldrh	r2, [r7, #24]
 8006aec:	6879      	ldr	r1, [r7, #4]
 8006aee:	202c      	movs	r0, #44	; 0x2c
 8006af0:	fb00 f303 	mul.w	r3, r0, r3
 8006af4:	440b      	add	r3, r1
 8006af6:	334c      	adds	r3, #76	; 0x4c
 8006af8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006afa:	78fb      	ldrb	r3, [r7, #3]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	212c      	movs	r1, #44	; 0x2c
 8006b00:	fb01 f303 	mul.w	r3, r1, r3
 8006b04:	4413      	add	r3, r2
 8006b06:	3360      	adds	r3, #96	; 0x60
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	212c      	movs	r1, #44	; 0x2c
 8006b12:	fb01 f303 	mul.w	r3, r1, r3
 8006b16:	4413      	add	r3, r2
 8006b18:	3350      	adds	r3, #80	; 0x50
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006b1e:	78fb      	ldrb	r3, [r7, #3]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	212c      	movs	r1, #44	; 0x2c
 8006b24:	fb01 f303 	mul.w	r3, r1, r3
 8006b28:	4413      	add	r3, r2
 8006b2a:	3339      	adds	r3, #57	; 0x39
 8006b2c:	78fa      	ldrb	r2, [r7, #3]
 8006b2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	212c      	movs	r1, #44	; 0x2c
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	4413      	add	r3, r2
 8006b3c:	3361      	adds	r3, #97	; 0x61
 8006b3e:	2200      	movs	r2, #0
 8006b40:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	222c      	movs	r2, #44	; 0x2c
 8006b4a:	fb02 f303 	mul.w	r3, r2, r3
 8006b4e:	3338      	adds	r3, #56	; 0x38
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	18d1      	adds	r1, r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f005 fc62 	bl	800c424 <USB_HC_StartXfer>
 8006b60:	4603      	mov	r3, r0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop

08006b6c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f005 f963 	bl	800be4e <USB_GetMode>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	f040 80f6 	bne.w	8006d7c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f005 f947 	bl	800be28 <USB_ReadInterrupts>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 80ec 	beq.w	8006d7a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f005 f93e 	bl	800be28 <USB_ReadInterrupts>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bb6:	d104      	bne.n	8006bc2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006bc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f005 f92e 	bl	800be28 <USB_ReadInterrupts>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd6:	d104      	bne.n	8006be2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006be0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f005 f91e 	bl	800be28 <USB_ReadInterrupts>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bf2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bf6:	d104      	bne.n	8006c02 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006c00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f005 f90e 	bl	800be28 <USB_ReadInterrupts>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d103      	bne.n	8006c1e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f005 f900 	bl	800be28 <USB_ReadInterrupts>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c32:	d11c      	bne.n	8006c6e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006c3c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10f      	bne.n	8006c6e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006c4e:	2110      	movs	r1, #16
 8006c50:	6938      	ldr	r0, [r7, #16]
 8006c52:	f004 ffef 	bl	800bc34 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006c56:	6938      	ldr	r0, [r7, #16]
 8006c58:	f005 f820 	bl	800bc9c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2101      	movs	r1, #1
 8006c62:	4618      	mov	r0, r3
 8006c64:	f005 f9f6 	bl	800c054 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f007 ffc3 	bl	800ebf4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f005 f8d8 	bl	800be28 <USB_ReadInterrupts>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c82:	d102      	bne.n	8006c8a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 f89e 	bl	8007dc6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f005 f8ca 	bl	800be28 <USB_ReadInterrupts>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f003 0308 	and.w	r3, r3, #8
 8006c9a:	2b08      	cmp	r3, #8
 8006c9c:	d106      	bne.n	8006cac <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f007 ff8c 	bl	800ebbc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2208      	movs	r2, #8
 8006caa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f005 f8b9 	bl	800be28 <USB_ReadInterrupts>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f003 0310 	and.w	r3, r3, #16
 8006cbc:	2b10      	cmp	r3, #16
 8006cbe:	d101      	bne.n	8006cc4 <HAL_HCD_IRQHandler+0x158>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e000      	b.n	8006cc6 <HAL_HCD_IRQHandler+0x15a>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d012      	beq.n	8006cf0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	699a      	ldr	r2, [r3, #24]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0210 	bic.w	r2, r2, #16
 8006cd8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 ffa1 	bl	8007c22 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0210 	orr.w	r2, r2, #16
 8006cee:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f005 f897 	bl	800be28 <USB_ReadInterrupts>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d04:	d13a      	bne.n	8006d7c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f005 fccc 	bl	800c6a8 <USB_HC_ReadInterrupt>
 8006d10:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006d12:	2300      	movs	r3, #0
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	e025      	b.n	8006d64 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	fa22 f303 	lsr.w	r3, r2, r3
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d018      	beq.n	8006d5e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d42:	d106      	bne.n	8006d52 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f8ab 	bl	8006ea6 <HCD_HC_IN_IRQHandler>
 8006d50:	e005      	b.n	8006d5e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	4619      	mov	r1, r3
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fbf9 	bl	8007550 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	3301      	adds	r3, #1
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d3d4      	bcc.n	8006d18 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d76:	615a      	str	r2, [r3, #20]
 8006d78:	e000      	b.n	8006d7c <HAL_HCD_IRQHandler+0x210>
      return;
 8006d7a:	bf00      	nop
    }
  }
}
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b082      	sub	sp, #8
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_HCD_Start+0x16>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e013      	b.n	8006dc0 <HAL_HCD_Start+0x3e>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2101      	movs	r1, #1
 8006da6:	4618      	mov	r0, r3
 8006da8:	f005 f9b8 	bl	800c11c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f004 fed0 	bl	800bb56 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d101      	bne.n	8006dde <HAL_HCD_Stop+0x16>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	e00d      	b.n	8006dfa <HAL_HCD_Stop+0x32>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f005 fda6 	bl	800c93c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b082      	sub	sp, #8
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f005 f95a 	bl	800c0c8 <USB_ResetPort>
 8006e14:	4603      	mov	r3, r0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006e2a:	78fb      	ldrb	r3, [r7, #3]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	212c      	movs	r1, #44	; 0x2c
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	4413      	add	r3, r2
 8006e36:	3360      	adds	r3, #96	; 0x60
 8006e38:	781b      	ldrb	r3, [r3, #0]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006e52:	78fb      	ldrb	r3, [r7, #3]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	212c      	movs	r1, #44	; 0x2c
 8006e58:	fb01 f303 	mul.w	r3, r1, r3
 8006e5c:	4413      	add	r3, r2
 8006e5e:	3350      	adds	r3, #80	; 0x50
 8006e60:	681b      	ldr	r3, [r3, #0]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f005 f99e 	bl	800c1bc <USB_GetCurrentFrame>
 8006e80:	4603      	mov	r3, r0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f005 f979 	bl	800c18e <USB_GetHostSpeed>
 8006e9c:	4603      	mov	r3, r0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b086      	sub	sp, #24
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006ebc:	78fb      	ldrb	r3, [r7, #3]
 8006ebe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d11a      	bne.n	8006f0c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	212c      	movs	r1, #44	; 0x2c
 8006eee:	fb01 f303 	mul.w	r3, r1, r3
 8006ef2:	4413      	add	r3, r2
 8006ef4:	3361      	adds	r3, #97	; 0x61
 8006ef6:	2206      	movs	r2, #6
 8006ef8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	4611      	mov	r1, r2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f005 fbe0 	bl	800c6ca <USB_HC_Halt>
 8006f0a:	e0af      	b.n	800706c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f22:	d11b      	bne.n	8006f5c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f30:	461a      	mov	r2, r3
 8006f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f36:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	212c      	movs	r1, #44	; 0x2c
 8006f3e:	fb01 f303 	mul.w	r3, r1, r3
 8006f42:	4413      	add	r3, r2
 8006f44:	3361      	adds	r3, #97	; 0x61
 8006f46:	2207      	movs	r2, #7
 8006f48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	4611      	mov	r1, r2
 8006f54:	4618      	mov	r0, r3
 8006f56:	f005 fbb8 	bl	800c6ca <USB_HC_Halt>
 8006f5a:	e087      	b.n	800706c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f003 0320 	and.w	r3, r3, #32
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	d109      	bne.n	8006f86 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7e:	461a      	mov	r2, r3
 8006f80:	2320      	movs	r3, #32
 8006f82:	6093      	str	r3, [r2, #8]
 8006f84:	e072      	b.n	800706c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f003 0308 	and.w	r3, r3, #8
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d11a      	bne.n	8006fd2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa8:	461a      	mov	r2, r3
 8006faa:	2308      	movs	r3, #8
 8006fac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	212c      	movs	r1, #44	; 0x2c
 8006fb4:	fb01 f303 	mul.w	r3, r1, r3
 8006fb8:	4413      	add	r3, r2
 8006fba:	3361      	adds	r3, #97	; 0x61
 8006fbc:	2205      	movs	r2, #5
 8006fbe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	4611      	mov	r1, r2
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f005 fb7d 	bl	800c6ca <USB_HC_Halt>
 8006fd0:	e04c      	b.n	800706c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe8:	d11b      	bne.n	8007022 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ffc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	212c      	movs	r1, #44	; 0x2c
 8007004:	fb01 f303 	mul.w	r3, r1, r3
 8007008:	4413      	add	r3, r2
 800700a:	3361      	adds	r3, #97	; 0x61
 800700c:	2208      	movs	r2, #8
 800700e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	4611      	mov	r1, r2
 800701a:	4618      	mov	r0, r3
 800701c:	f005 fb55 	bl	800c6ca <USB_HC_Halt>
 8007020:	e024      	b.n	800706c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	4413      	add	r3, r2
 800702a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007034:	2b80      	cmp	r3, #128	; 0x80
 8007036:	d119      	bne.n	800706c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	4413      	add	r3, r2
 8007040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007044:	461a      	mov	r2, r3
 8007046:	2380      	movs	r3, #128	; 0x80
 8007048:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	212c      	movs	r1, #44	; 0x2c
 8007050:	fb01 f303 	mul.w	r3, r1, r3
 8007054:	4413      	add	r3, r2
 8007056:	3361      	adds	r3, #97	; 0x61
 8007058:	2206      	movs	r2, #6
 800705a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	b2d2      	uxtb	r2, r2
 8007064:	4611      	mov	r1, r2
 8007066:	4618      	mov	r0, r3
 8007068:	f005 fb2f 	bl	800c6ca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	4413      	add	r3, r2
 8007074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800707e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007082:	d112      	bne.n	80070aa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	4611      	mov	r1, r2
 800708e:	4618      	mov	r0, r3
 8007090:	f005 fb1b 	bl	800c6ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	4413      	add	r3, r2
 800709c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a0:	461a      	mov	r2, r3
 80070a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070a6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80070a8:	e24e      	b.n	8007548 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b01      	cmp	r3, #1
 80070be:	f040 80df 	bne.w	8007280 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d019      	beq.n	80070fe <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	212c      	movs	r1, #44	; 0x2c
 80070d0:	fb01 f303 	mul.w	r3, r1, r3
 80070d4:	4413      	add	r3, r2
 80070d6:	3348      	adds	r3, #72	; 0x48
 80070d8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	0159      	lsls	r1, r3, #5
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	440b      	add	r3, r1
 80070e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80070ec:	1ad2      	subs	r2, r2, r3
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	202c      	movs	r0, #44	; 0x2c
 80070f4:	fb00 f303 	mul.w	r3, r0, r3
 80070f8:	440b      	add	r3, r1
 80070fa:	3350      	adds	r3, #80	; 0x50
 80070fc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	212c      	movs	r1, #44	; 0x2c
 8007104:	fb01 f303 	mul.w	r3, r1, r3
 8007108:	4413      	add	r3, r2
 800710a:	3361      	adds	r3, #97	; 0x61
 800710c:	2201      	movs	r2, #1
 800710e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	212c      	movs	r1, #44	; 0x2c
 8007116:	fb01 f303 	mul.w	r3, r1, r3
 800711a:	4413      	add	r3, r2
 800711c:	335c      	adds	r3, #92	; 0x5c
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	4413      	add	r3, r2
 800712a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800712e:	461a      	mov	r2, r3
 8007130:	2301      	movs	r3, #1
 8007132:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	212c      	movs	r1, #44	; 0x2c
 800713a:	fb01 f303 	mul.w	r3, r1, r3
 800713e:	4413      	add	r3, r2
 8007140:	333f      	adds	r3, #63	; 0x3f
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d009      	beq.n	800715c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	212c      	movs	r1, #44	; 0x2c
 800714e:	fb01 f303 	mul.w	r3, r1, r3
 8007152:	4413      	add	r3, r2
 8007154:	333f      	adds	r3, #63	; 0x3f
 8007156:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007158:	2b02      	cmp	r3, #2
 800715a:	d111      	bne.n	8007180 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	b2d2      	uxtb	r2, r2
 8007164:	4611      	mov	r1, r2
 8007166:	4618      	mov	r0, r3
 8007168:	f005 faaf 	bl	800c6ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	4413      	add	r3, r2
 8007174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007178:	461a      	mov	r2, r3
 800717a:	2310      	movs	r3, #16
 800717c:	6093      	str	r3, [r2, #8]
 800717e:	e03a      	b.n	80071f6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	212c      	movs	r1, #44	; 0x2c
 8007186:	fb01 f303 	mul.w	r3, r1, r3
 800718a:	4413      	add	r3, r2
 800718c:	333f      	adds	r3, #63	; 0x3f
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2b03      	cmp	r3, #3
 8007192:	d009      	beq.n	80071a8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	212c      	movs	r1, #44	; 0x2c
 800719a:	fb01 f303 	mul.w	r3, r1, r3
 800719e:	4413      	add	r3, r2
 80071a0:	333f      	adds	r3, #63	; 0x3f
 80071a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d126      	bne.n	80071f6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	0151      	lsls	r1, r2, #5
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	440a      	add	r2, r1
 80071be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071c6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	212c      	movs	r1, #44	; 0x2c
 80071ce:	fb01 f303 	mul.w	r3, r1, r3
 80071d2:	4413      	add	r3, r2
 80071d4:	3360      	adds	r3, #96	; 0x60
 80071d6:	2201      	movs	r2, #1
 80071d8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	b2d9      	uxtb	r1, r3
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	202c      	movs	r0, #44	; 0x2c
 80071e4:	fb00 f303 	mul.w	r3, r0, r3
 80071e8:	4413      	add	r3, r2
 80071ea:	3360      	adds	r3, #96	; 0x60
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f007 fd0d 	bl	800ec10 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d12b      	bne.n	8007256 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	212c      	movs	r1, #44	; 0x2c
 8007204:	fb01 f303 	mul.w	r3, r1, r3
 8007208:	4413      	add	r3, r2
 800720a:	3348      	adds	r3, #72	; 0x48
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	202c      	movs	r0, #44	; 0x2c
 8007214:	fb00 f202 	mul.w	r2, r0, r2
 8007218:	440a      	add	r2, r1
 800721a:	3240      	adds	r2, #64	; 0x40
 800721c:	8812      	ldrh	r2, [r2, #0]
 800721e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 818e 	beq.w	8007548 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	212c      	movs	r1, #44	; 0x2c
 8007232:	fb01 f303 	mul.w	r3, r1, r3
 8007236:	4413      	add	r3, r2
 8007238:	3354      	adds	r3, #84	; 0x54
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	f083 0301 	eor.w	r3, r3, #1
 8007240:	b2d8      	uxtb	r0, r3
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	212c      	movs	r1, #44	; 0x2c
 8007248:	fb01 f303 	mul.w	r3, r1, r3
 800724c:	4413      	add	r3, r2
 800724e:	3354      	adds	r3, #84	; 0x54
 8007250:	4602      	mov	r2, r0
 8007252:	701a      	strb	r2, [r3, #0]
}
 8007254:	e178      	b.n	8007548 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	212c      	movs	r1, #44	; 0x2c
 800725c:	fb01 f303 	mul.w	r3, r1, r3
 8007260:	4413      	add	r3, r2
 8007262:	3354      	adds	r3, #84	; 0x54
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	f083 0301 	eor.w	r3, r3, #1
 800726a:	b2d8      	uxtb	r0, r3
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	212c      	movs	r1, #44	; 0x2c
 8007272:	fb01 f303 	mul.w	r3, r1, r3
 8007276:	4413      	add	r3, r2
 8007278:	3354      	adds	r3, #84	; 0x54
 800727a:	4602      	mov	r2, r0
 800727c:	701a      	strb	r2, [r3, #0]
}
 800727e:	e163      	b.n	8007548 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	4413      	add	r3, r2
 8007288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b02      	cmp	r3, #2
 8007294:	f040 80f6 	bne.w	8007484 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	212c      	movs	r1, #44	; 0x2c
 800729e:	fb01 f303 	mul.w	r3, r1, r3
 80072a2:	4413      	add	r3, r2
 80072a4:	3361      	adds	r3, #97	; 0x61
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d109      	bne.n	80072c0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	212c      	movs	r1, #44	; 0x2c
 80072b2:	fb01 f303 	mul.w	r3, r1, r3
 80072b6:	4413      	add	r3, r2
 80072b8:	3360      	adds	r3, #96	; 0x60
 80072ba:	2201      	movs	r2, #1
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	e0c9      	b.n	8007454 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	212c      	movs	r1, #44	; 0x2c
 80072c6:	fb01 f303 	mul.w	r3, r1, r3
 80072ca:	4413      	add	r3, r2
 80072cc:	3361      	adds	r3, #97	; 0x61
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b05      	cmp	r3, #5
 80072d2:	d109      	bne.n	80072e8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	212c      	movs	r1, #44	; 0x2c
 80072da:	fb01 f303 	mul.w	r3, r1, r3
 80072de:	4413      	add	r3, r2
 80072e0:	3360      	adds	r3, #96	; 0x60
 80072e2:	2205      	movs	r2, #5
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	e0b5      	b.n	8007454 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	212c      	movs	r1, #44	; 0x2c
 80072ee:	fb01 f303 	mul.w	r3, r1, r3
 80072f2:	4413      	add	r3, r2
 80072f4:	3361      	adds	r3, #97	; 0x61
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b06      	cmp	r3, #6
 80072fa:	d009      	beq.n	8007310 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	212c      	movs	r1, #44	; 0x2c
 8007302:	fb01 f303 	mul.w	r3, r1, r3
 8007306:	4413      	add	r3, r2
 8007308:	3361      	adds	r3, #97	; 0x61
 800730a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800730c:	2b08      	cmp	r3, #8
 800730e:	d150      	bne.n	80073b2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	212c      	movs	r1, #44	; 0x2c
 8007316:	fb01 f303 	mul.w	r3, r1, r3
 800731a:	4413      	add	r3, r2
 800731c:	335c      	adds	r3, #92	; 0x5c
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	1c5a      	adds	r2, r3, #1
 8007322:	6879      	ldr	r1, [r7, #4]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	202c      	movs	r0, #44	; 0x2c
 8007328:	fb00 f303 	mul.w	r3, r0, r3
 800732c:	440b      	add	r3, r1
 800732e:	335c      	adds	r3, #92	; 0x5c
 8007330:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	212c      	movs	r1, #44	; 0x2c
 8007338:	fb01 f303 	mul.w	r3, r1, r3
 800733c:	4413      	add	r3, r2
 800733e:	335c      	adds	r3, #92	; 0x5c
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b02      	cmp	r3, #2
 8007344:	d912      	bls.n	800736c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	212c      	movs	r1, #44	; 0x2c
 800734c:	fb01 f303 	mul.w	r3, r1, r3
 8007350:	4413      	add	r3, r2
 8007352:	335c      	adds	r3, #92	; 0x5c
 8007354:	2200      	movs	r2, #0
 8007356:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	212c      	movs	r1, #44	; 0x2c
 800735e:	fb01 f303 	mul.w	r3, r1, r3
 8007362:	4413      	add	r3, r2
 8007364:	3360      	adds	r3, #96	; 0x60
 8007366:	2204      	movs	r2, #4
 8007368:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800736a:	e073      	b.n	8007454 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	212c      	movs	r1, #44	; 0x2c
 8007372:	fb01 f303 	mul.w	r3, r1, r3
 8007376:	4413      	add	r3, r2
 8007378:	3360      	adds	r3, #96	; 0x60
 800737a:	2202      	movs	r2, #2
 800737c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	4413      	add	r3, r2
 8007386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007394:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800739c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073aa:	461a      	mov	r2, r3
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80073b0:	e050      	b.n	8007454 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	212c      	movs	r1, #44	; 0x2c
 80073b8:	fb01 f303 	mul.w	r3, r1, r3
 80073bc:	4413      	add	r3, r2
 80073be:	3361      	adds	r3, #97	; 0x61
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d122      	bne.n	800740c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	212c      	movs	r1, #44	; 0x2c
 80073cc:	fb01 f303 	mul.w	r3, r1, r3
 80073d0:	4413      	add	r3, r2
 80073d2:	3360      	adds	r3, #96	; 0x60
 80073d4:	2202      	movs	r2, #2
 80073d6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073ee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073f6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007404:	461a      	mov	r2, r3
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	6013      	str	r3, [r2, #0]
 800740a:	e023      	b.n	8007454 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	212c      	movs	r1, #44	; 0x2c
 8007412:	fb01 f303 	mul.w	r3, r1, r3
 8007416:	4413      	add	r3, r2
 8007418:	3361      	adds	r3, #97	; 0x61
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b07      	cmp	r3, #7
 800741e:	d119      	bne.n	8007454 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	212c      	movs	r1, #44	; 0x2c
 8007426:	fb01 f303 	mul.w	r3, r1, r3
 800742a:	4413      	add	r3, r2
 800742c:	335c      	adds	r3, #92	; 0x5c
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	202c      	movs	r0, #44	; 0x2c
 8007438:	fb00 f303 	mul.w	r3, r0, r3
 800743c:	440b      	add	r3, r1
 800743e:	335c      	adds	r3, #92	; 0x5c
 8007440:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	212c      	movs	r1, #44	; 0x2c
 8007448:	fb01 f303 	mul.w	r3, r1, r3
 800744c:	4413      	add	r3, r2
 800744e:	3360      	adds	r3, #96	; 0x60
 8007450:	2204      	movs	r2, #4
 8007452:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	4413      	add	r3, r2
 800745c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007460:	461a      	mov	r2, r3
 8007462:	2302      	movs	r3, #2
 8007464:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	b2d9      	uxtb	r1, r3
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	202c      	movs	r0, #44	; 0x2c
 8007470:	fb00 f303 	mul.w	r3, r0, r3
 8007474:	4413      	add	r3, r2
 8007476:	3360      	adds	r3, #96	; 0x60
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f007 fbc7 	bl	800ec10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007482:	e061      	b.n	8007548 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	4413      	add	r3, r2
 800748c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f003 0310 	and.w	r3, r3, #16
 8007496:	2b10      	cmp	r3, #16
 8007498:	d156      	bne.n	8007548 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	212c      	movs	r1, #44	; 0x2c
 80074a0:	fb01 f303 	mul.w	r3, r1, r3
 80074a4:	4413      	add	r3, r2
 80074a6:	333f      	adds	r3, #63	; 0x3f
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b03      	cmp	r3, #3
 80074ac:	d111      	bne.n	80074d2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	212c      	movs	r1, #44	; 0x2c
 80074b4:	fb01 f303 	mul.w	r3, r1, r3
 80074b8:	4413      	add	r3, r2
 80074ba:	335c      	adds	r3, #92	; 0x5c
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	4611      	mov	r1, r2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f005 f8fd 	bl	800c6ca <USB_HC_Halt>
 80074d0:	e031      	b.n	8007536 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	212c      	movs	r1, #44	; 0x2c
 80074d8:	fb01 f303 	mul.w	r3, r1, r3
 80074dc:	4413      	add	r3, r2
 80074de:	333f      	adds	r3, #63	; 0x3f
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d009      	beq.n	80074fa <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	212c      	movs	r1, #44	; 0x2c
 80074ec:	fb01 f303 	mul.w	r3, r1, r3
 80074f0:	4413      	add	r3, r2
 80074f2:	333f      	adds	r3, #63	; 0x3f
 80074f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d11d      	bne.n	8007536 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	212c      	movs	r1, #44	; 0x2c
 8007500:	fb01 f303 	mul.w	r3, r1, r3
 8007504:	4413      	add	r3, r2
 8007506:	335c      	adds	r3, #92	; 0x5c
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d110      	bne.n	8007536 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	212c      	movs	r1, #44	; 0x2c
 800751a:	fb01 f303 	mul.w	r3, r1, r3
 800751e:	4413      	add	r3, r2
 8007520:	3361      	adds	r3, #97	; 0x61
 8007522:	2203      	movs	r2, #3
 8007524:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	b2d2      	uxtb	r2, r2
 800752e:	4611      	mov	r1, r2
 8007530:	4618      	mov	r0, r3
 8007532:	f005 f8ca 	bl	800c6ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	4413      	add	r3, r2
 800753e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007542:	461a      	mov	r2, r3
 8007544:	2310      	movs	r3, #16
 8007546:	6093      	str	r3, [r2, #8]
}
 8007548:	bf00      	nop
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8007566:	78fb      	ldrb	r3, [r7, #3]
 8007568:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	4413      	add	r3, r2
 8007572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b04      	cmp	r3, #4
 800757e:	d11a      	bne.n	80075b6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	4413      	add	r3, r2
 8007588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800758c:	461a      	mov	r2, r3
 800758e:	2304      	movs	r3, #4
 8007590:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	212c      	movs	r1, #44	; 0x2c
 8007598:	fb01 f303 	mul.w	r3, r1, r3
 800759c:	4413      	add	r3, r2
 800759e:	3361      	adds	r3, #97	; 0x61
 80075a0:	2206      	movs	r2, #6
 80075a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	4611      	mov	r1, r2
 80075ae:	4618      	mov	r0, r3
 80075b0:	f005 f88b 	bl	800c6ca <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80075b4:	e331      	b.n	8007c1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f003 0320 	and.w	r3, r3, #32
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	d12e      	bne.n	800762a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d8:	461a      	mov	r2, r3
 80075da:	2320      	movs	r3, #32
 80075dc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	212c      	movs	r1, #44	; 0x2c
 80075e4:	fb01 f303 	mul.w	r3, r1, r3
 80075e8:	4413      	add	r3, r2
 80075ea:	333d      	adds	r3, #61	; 0x3d
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	f040 8313 	bne.w	8007c1a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	212c      	movs	r1, #44	; 0x2c
 80075fa:	fb01 f303 	mul.w	r3, r1, r3
 80075fe:	4413      	add	r3, r2
 8007600:	333d      	adds	r3, #61	; 0x3d
 8007602:	2200      	movs	r2, #0
 8007604:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	212c      	movs	r1, #44	; 0x2c
 800760c:	fb01 f303 	mul.w	r3, r1, r3
 8007610:	4413      	add	r3, r2
 8007612:	3360      	adds	r3, #96	; 0x60
 8007614:	2202      	movs	r2, #2
 8007616:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	4611      	mov	r1, r2
 8007622:	4618      	mov	r0, r3
 8007624:	f005 f851 	bl	800c6ca <USB_HC_Halt>
}
 8007628:	e2f7      	b.n	8007c1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	4413      	add	r3, r2
 8007632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800763c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007640:	d112      	bne.n	8007668 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	4413      	add	r3, r2
 800764a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800764e:	461a      	mov	r2, r3
 8007650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007654:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	b2d2      	uxtb	r2, r2
 800765e:	4611      	mov	r1, r2
 8007660:	4618      	mov	r0, r3
 8007662:	f005 f832 	bl	800c6ca <USB_HC_Halt>
}
 8007666:	e2d8      	b.n	8007c1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	4413      	add	r3, r2
 8007670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b01      	cmp	r3, #1
 800767c:	d140      	bne.n	8007700 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	212c      	movs	r1, #44	; 0x2c
 8007684:	fb01 f303 	mul.w	r3, r1, r3
 8007688:	4413      	add	r3, r2
 800768a:	335c      	adds	r3, #92	; 0x5c
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	4413      	add	r3, r2
 8007698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a2:	2b40      	cmp	r3, #64	; 0x40
 80076a4:	d111      	bne.n	80076ca <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	212c      	movs	r1, #44	; 0x2c
 80076ac:	fb01 f303 	mul.w	r3, r1, r3
 80076b0:	4413      	add	r3, r2
 80076b2:	333d      	adds	r3, #61	; 0x3d
 80076b4:	2201      	movs	r2, #1
 80076b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c4:	461a      	mov	r2, r3
 80076c6:	2340      	movs	r3, #64	; 0x40
 80076c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d6:	461a      	mov	r2, r3
 80076d8:	2301      	movs	r3, #1
 80076da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	212c      	movs	r1, #44	; 0x2c
 80076e2:	fb01 f303 	mul.w	r3, r1, r3
 80076e6:	4413      	add	r3, r2
 80076e8:	3361      	adds	r3, #97	; 0x61
 80076ea:	2201      	movs	r2, #1
 80076ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	b2d2      	uxtb	r2, r2
 80076f6:	4611      	mov	r1, r2
 80076f8:	4618      	mov	r0, r3
 80076fa:	f004 ffe6 	bl	800c6ca <USB_HC_Halt>
}
 80076fe:	e28c      	b.n	8007c1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	4413      	add	r3, r2
 8007708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007712:	2b40      	cmp	r3, #64	; 0x40
 8007714:	d12c      	bne.n	8007770 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	212c      	movs	r1, #44	; 0x2c
 800771c:	fb01 f303 	mul.w	r3, r1, r3
 8007720:	4413      	add	r3, r2
 8007722:	3361      	adds	r3, #97	; 0x61
 8007724:	2204      	movs	r2, #4
 8007726:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	212c      	movs	r1, #44	; 0x2c
 800772e:	fb01 f303 	mul.w	r3, r1, r3
 8007732:	4413      	add	r3, r2
 8007734:	333d      	adds	r3, #61	; 0x3d
 8007736:	2201      	movs	r2, #1
 8007738:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	212c      	movs	r1, #44	; 0x2c
 8007740:	fb01 f303 	mul.w	r3, r1, r3
 8007744:	4413      	add	r3, r2
 8007746:	335c      	adds	r3, #92	; 0x5c
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f004 ffb7 	bl	800c6ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	4413      	add	r3, r2
 8007764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007768:	461a      	mov	r2, r3
 800776a:	2340      	movs	r3, #64	; 0x40
 800776c:	6093      	str	r3, [r2, #8]
}
 800776e:	e254      	b.n	8007c1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	4413      	add	r3, r2
 8007778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f003 0308 	and.w	r3, r3, #8
 8007782:	2b08      	cmp	r3, #8
 8007784:	d11a      	bne.n	80077bc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	4413      	add	r3, r2
 800778e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007792:	461a      	mov	r2, r3
 8007794:	2308      	movs	r3, #8
 8007796:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	212c      	movs	r1, #44	; 0x2c
 800779e:	fb01 f303 	mul.w	r3, r1, r3
 80077a2:	4413      	add	r3, r2
 80077a4:	3361      	adds	r3, #97	; 0x61
 80077a6:	2205      	movs	r2, #5
 80077a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	b2d2      	uxtb	r2, r2
 80077b2:	4611      	mov	r1, r2
 80077b4:	4618      	mov	r0, r3
 80077b6:	f004 ff88 	bl	800c6ca <USB_HC_Halt>
}
 80077ba:	e22e      	b.n	8007c1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f003 0310 	and.w	r3, r3, #16
 80077ce:	2b10      	cmp	r3, #16
 80077d0:	d140      	bne.n	8007854 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	212c      	movs	r1, #44	; 0x2c
 80077d8:	fb01 f303 	mul.w	r3, r1, r3
 80077dc:	4413      	add	r3, r2
 80077de:	335c      	adds	r3, #92	; 0x5c
 80077e0:	2200      	movs	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	212c      	movs	r1, #44	; 0x2c
 80077ea:	fb01 f303 	mul.w	r3, r1, r3
 80077ee:	4413      	add	r3, r2
 80077f0:	3361      	adds	r3, #97	; 0x61
 80077f2:	2203      	movs	r2, #3
 80077f4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	212c      	movs	r1, #44	; 0x2c
 80077fc:	fb01 f303 	mul.w	r3, r1, r3
 8007800:	4413      	add	r3, r2
 8007802:	333d      	adds	r3, #61	; 0x3d
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d112      	bne.n	8007830 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	212c      	movs	r1, #44	; 0x2c
 8007810:	fb01 f303 	mul.w	r3, r1, r3
 8007814:	4413      	add	r3, r2
 8007816:	333c      	adds	r3, #60	; 0x3c
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d108      	bne.n	8007830 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	212c      	movs	r1, #44	; 0x2c
 8007824:	fb01 f303 	mul.w	r3, r1, r3
 8007828:	4413      	add	r3, r2
 800782a:	333d      	adds	r3, #61	; 0x3d
 800782c:	2201      	movs	r2, #1
 800782e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	b2d2      	uxtb	r2, r2
 8007838:	4611      	mov	r1, r2
 800783a:	4618      	mov	r0, r3
 800783c:	f004 ff45 	bl	800c6ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	4413      	add	r3, r2
 8007848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800784c:	461a      	mov	r2, r3
 800784e:	2310      	movs	r3, #16
 8007850:	6093      	str	r3, [r2, #8]
}
 8007852:	e1e2      	b.n	8007c1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	4413      	add	r3, r2
 800785c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007866:	2b80      	cmp	r3, #128	; 0x80
 8007868:	d164      	bne.n	8007934 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d111      	bne.n	8007896 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	212c      	movs	r1, #44	; 0x2c
 8007878:	fb01 f303 	mul.w	r3, r1, r3
 800787c:	4413      	add	r3, r2
 800787e:	3361      	adds	r3, #97	; 0x61
 8007880:	2206      	movs	r2, #6
 8007882:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	4611      	mov	r1, r2
 800788e:	4618      	mov	r0, r3
 8007890:	f004 ff1b 	bl	800c6ca <USB_HC_Halt>
 8007894:	e044      	b.n	8007920 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	212c      	movs	r1, #44	; 0x2c
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	4413      	add	r3, r2
 80078a2:	335c      	adds	r3, #92	; 0x5c
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	6879      	ldr	r1, [r7, #4]
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	202c      	movs	r0, #44	; 0x2c
 80078ae:	fb00 f303 	mul.w	r3, r0, r3
 80078b2:	440b      	add	r3, r1
 80078b4:	335c      	adds	r3, #92	; 0x5c
 80078b6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	212c      	movs	r1, #44	; 0x2c
 80078be:	fb01 f303 	mul.w	r3, r1, r3
 80078c2:	4413      	add	r3, r2
 80078c4:	335c      	adds	r3, #92	; 0x5c
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d920      	bls.n	800790e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	212c      	movs	r1, #44	; 0x2c
 80078d2:	fb01 f303 	mul.w	r3, r1, r3
 80078d6:	4413      	add	r3, r2
 80078d8:	335c      	adds	r3, #92	; 0x5c
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	212c      	movs	r1, #44	; 0x2c
 80078e4:	fb01 f303 	mul.w	r3, r1, r3
 80078e8:	4413      	add	r3, r2
 80078ea:	3360      	adds	r3, #96	; 0x60
 80078ec:	2204      	movs	r2, #4
 80078ee:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	b2d9      	uxtb	r1, r3
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	202c      	movs	r0, #44	; 0x2c
 80078fa:	fb00 f303 	mul.w	r3, r0, r3
 80078fe:	4413      	add	r3, r2
 8007900:	3360      	adds	r3, #96	; 0x60
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	461a      	mov	r2, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f007 f982 	bl	800ec10 <HAL_HCD_HC_NotifyURBChange_Callback>
 800790c:	e008      	b.n	8007920 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	212c      	movs	r1, #44	; 0x2c
 8007914:	fb01 f303 	mul.w	r3, r1, r3
 8007918:	4413      	add	r3, r2
 800791a:	3360      	adds	r3, #96	; 0x60
 800791c:	2202      	movs	r2, #2
 800791e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	4413      	add	r3, r2
 8007928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800792c:	461a      	mov	r2, r3
 800792e:	2380      	movs	r3, #128	; 0x80
 8007930:	6093      	str	r3, [r2, #8]
}
 8007932:	e172      	b.n	8007c1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	4413      	add	r3, r2
 800793c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800794a:	d11b      	bne.n	8007984 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	212c      	movs	r1, #44	; 0x2c
 8007952:	fb01 f303 	mul.w	r3, r1, r3
 8007956:	4413      	add	r3, r2
 8007958:	3361      	adds	r3, #97	; 0x61
 800795a:	2208      	movs	r2, #8
 800795c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	b2d2      	uxtb	r2, r2
 8007966:	4611      	mov	r1, r2
 8007968:	4618      	mov	r0, r3
 800796a:	f004 feae 	bl	800c6ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	4413      	add	r3, r2
 8007976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800797a:	461a      	mov	r2, r3
 800797c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007980:	6093      	str	r3, [r2, #8]
}
 8007982:	e14a      	b.n	8007c1a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	4413      	add	r3, r2
 800798c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b02      	cmp	r3, #2
 8007998:	f040 813f 	bne.w	8007c1a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	212c      	movs	r1, #44	; 0x2c
 80079a2:	fb01 f303 	mul.w	r3, r1, r3
 80079a6:	4413      	add	r3, r2
 80079a8:	3361      	adds	r3, #97	; 0x61
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d17d      	bne.n	8007aac <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	212c      	movs	r1, #44	; 0x2c
 80079b6:	fb01 f303 	mul.w	r3, r1, r3
 80079ba:	4413      	add	r3, r2
 80079bc:	3360      	adds	r3, #96	; 0x60
 80079be:	2201      	movs	r2, #1
 80079c0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	212c      	movs	r1, #44	; 0x2c
 80079c8:	fb01 f303 	mul.w	r3, r1, r3
 80079cc:	4413      	add	r3, r2
 80079ce:	333f      	adds	r3, #63	; 0x3f
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d00a      	beq.n	80079ec <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	212c      	movs	r1, #44	; 0x2c
 80079dc:	fb01 f303 	mul.w	r3, r1, r3
 80079e0:	4413      	add	r3, r2
 80079e2:	333f      	adds	r3, #63	; 0x3f
 80079e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	f040 8100 	bne.w	8007bec <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d113      	bne.n	8007a1c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	212c      	movs	r1, #44	; 0x2c
 80079fa:	fb01 f303 	mul.w	r3, r1, r3
 80079fe:	4413      	add	r3, r2
 8007a00:	3355      	adds	r3, #85	; 0x55
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	f083 0301 	eor.w	r3, r3, #1
 8007a08:	b2d8      	uxtb	r0, r3
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	212c      	movs	r1, #44	; 0x2c
 8007a10:	fb01 f303 	mul.w	r3, r1, r3
 8007a14:	4413      	add	r3, r2
 8007a16:	3355      	adds	r3, #85	; 0x55
 8007a18:	4602      	mov	r2, r0
 8007a1a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	f040 80e3 	bne.w	8007bec <HCD_HC_OUT_IRQHandler+0x69c>
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	212c      	movs	r1, #44	; 0x2c
 8007a2c:	fb01 f303 	mul.w	r3, r1, r3
 8007a30:	4413      	add	r3, r2
 8007a32:	334c      	adds	r3, #76	; 0x4c
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 80d8 	beq.w	8007bec <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	212c      	movs	r1, #44	; 0x2c
 8007a42:	fb01 f303 	mul.w	r3, r1, r3
 8007a46:	4413      	add	r3, r2
 8007a48:	334c      	adds	r3, #76	; 0x4c
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6879      	ldr	r1, [r7, #4]
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	202c      	movs	r0, #44	; 0x2c
 8007a52:	fb00 f202 	mul.w	r2, r0, r2
 8007a56:	440a      	add	r2, r1
 8007a58:	3240      	adds	r2, #64	; 0x40
 8007a5a:	8812      	ldrh	r2, [r2, #0]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	6879      	ldr	r1, [r7, #4]
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	202c      	movs	r0, #44	; 0x2c
 8007a66:	fb00 f202 	mul.w	r2, r0, r2
 8007a6a:	440a      	add	r2, r1
 8007a6c:	3240      	adds	r2, #64	; 0x40
 8007a6e:	8812      	ldrh	r2, [r2, #0]
 8007a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80b5 	beq.w	8007bec <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	212c      	movs	r1, #44	; 0x2c
 8007a88:	fb01 f303 	mul.w	r3, r1, r3
 8007a8c:	4413      	add	r3, r2
 8007a8e:	3355      	adds	r3, #85	; 0x55
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	f083 0301 	eor.w	r3, r3, #1
 8007a96:	b2d8      	uxtb	r0, r3
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	212c      	movs	r1, #44	; 0x2c
 8007a9e:	fb01 f303 	mul.w	r3, r1, r3
 8007aa2:	4413      	add	r3, r2
 8007aa4:	3355      	adds	r3, #85	; 0x55
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	701a      	strb	r2, [r3, #0]
 8007aaa:	e09f      	b.n	8007bec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	212c      	movs	r1, #44	; 0x2c
 8007ab2:	fb01 f303 	mul.w	r3, r1, r3
 8007ab6:	4413      	add	r3, r2
 8007ab8:	3361      	adds	r3, #97	; 0x61
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d109      	bne.n	8007ad4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	212c      	movs	r1, #44	; 0x2c
 8007ac6:	fb01 f303 	mul.w	r3, r1, r3
 8007aca:	4413      	add	r3, r2
 8007acc:	3360      	adds	r3, #96	; 0x60
 8007ace:	2202      	movs	r2, #2
 8007ad0:	701a      	strb	r2, [r3, #0]
 8007ad2:	e08b      	b.n	8007bec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	212c      	movs	r1, #44	; 0x2c
 8007ada:	fb01 f303 	mul.w	r3, r1, r3
 8007ade:	4413      	add	r3, r2
 8007ae0:	3361      	adds	r3, #97	; 0x61
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b04      	cmp	r3, #4
 8007ae6:	d109      	bne.n	8007afc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	212c      	movs	r1, #44	; 0x2c
 8007aee:	fb01 f303 	mul.w	r3, r1, r3
 8007af2:	4413      	add	r3, r2
 8007af4:	3360      	adds	r3, #96	; 0x60
 8007af6:	2202      	movs	r2, #2
 8007af8:	701a      	strb	r2, [r3, #0]
 8007afa:	e077      	b.n	8007bec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	212c      	movs	r1, #44	; 0x2c
 8007b02:	fb01 f303 	mul.w	r3, r1, r3
 8007b06:	4413      	add	r3, r2
 8007b08:	3361      	adds	r3, #97	; 0x61
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b05      	cmp	r3, #5
 8007b0e:	d109      	bne.n	8007b24 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	212c      	movs	r1, #44	; 0x2c
 8007b16:	fb01 f303 	mul.w	r3, r1, r3
 8007b1a:	4413      	add	r3, r2
 8007b1c:	3360      	adds	r3, #96	; 0x60
 8007b1e:	2205      	movs	r2, #5
 8007b20:	701a      	strb	r2, [r3, #0]
 8007b22:	e063      	b.n	8007bec <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	212c      	movs	r1, #44	; 0x2c
 8007b2a:	fb01 f303 	mul.w	r3, r1, r3
 8007b2e:	4413      	add	r3, r2
 8007b30:	3361      	adds	r3, #97	; 0x61
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	2b06      	cmp	r3, #6
 8007b36:	d009      	beq.n	8007b4c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	212c      	movs	r1, #44	; 0x2c
 8007b3e:	fb01 f303 	mul.w	r3, r1, r3
 8007b42:	4413      	add	r3, r2
 8007b44:	3361      	adds	r3, #97	; 0x61
 8007b46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007b48:	2b08      	cmp	r3, #8
 8007b4a:	d14f      	bne.n	8007bec <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	212c      	movs	r1, #44	; 0x2c
 8007b52:	fb01 f303 	mul.w	r3, r1, r3
 8007b56:	4413      	add	r3, r2
 8007b58:	335c      	adds	r3, #92	; 0x5c
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	6879      	ldr	r1, [r7, #4]
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	202c      	movs	r0, #44	; 0x2c
 8007b64:	fb00 f303 	mul.w	r3, r0, r3
 8007b68:	440b      	add	r3, r1
 8007b6a:	335c      	adds	r3, #92	; 0x5c
 8007b6c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	212c      	movs	r1, #44	; 0x2c
 8007b74:	fb01 f303 	mul.w	r3, r1, r3
 8007b78:	4413      	add	r3, r2
 8007b7a:	335c      	adds	r3, #92	; 0x5c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d912      	bls.n	8007ba8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	212c      	movs	r1, #44	; 0x2c
 8007b88:	fb01 f303 	mul.w	r3, r1, r3
 8007b8c:	4413      	add	r3, r2
 8007b8e:	335c      	adds	r3, #92	; 0x5c
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	212c      	movs	r1, #44	; 0x2c
 8007b9a:	fb01 f303 	mul.w	r3, r1, r3
 8007b9e:	4413      	add	r3, r2
 8007ba0:	3360      	adds	r3, #96	; 0x60
 8007ba2:	2204      	movs	r2, #4
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	e021      	b.n	8007bec <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	212c      	movs	r1, #44	; 0x2c
 8007bae:	fb01 f303 	mul.w	r3, r1, r3
 8007bb2:	4413      	add	r3, r2
 8007bb4:	3360      	adds	r3, #96	; 0x60
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bd0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bd8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be6:	461a      	mov	r2, r3
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	b2d9      	uxtb	r1, r3
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	202c      	movs	r0, #44	; 0x2c
 8007c08:	fb00 f303 	mul.w	r3, r0, r3
 8007c0c:	4413      	add	r3, r2
 8007c0e:	3360      	adds	r3, #96	; 0x60
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f006 fffb 	bl	800ec10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007c1a:	bf00      	nop
 8007c1c:	3720      	adds	r7, #32
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b08a      	sub	sp, #40	; 0x28
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	f003 030f 	and.w	r3, r3, #15
 8007c42:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	0c5b      	lsrs	r3, r3, #17
 8007c48:	f003 030f 	and.w	r3, r3, #15
 8007c4c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	091b      	lsrs	r3, r3, #4
 8007c52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c56:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d004      	beq.n	8007c68 <HCD_RXQLVL_IRQHandler+0x46>
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	2b05      	cmp	r3, #5
 8007c62:	f000 80a9 	beq.w	8007db8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007c66:	e0aa      	b.n	8007dbe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f000 80a6 	beq.w	8007dbc <HCD_RXQLVL_IRQHandler+0x19a>
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	212c      	movs	r1, #44	; 0x2c
 8007c76:	fb01 f303 	mul.w	r3, r1, r3
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3344      	adds	r3, #68	; 0x44
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 809b 	beq.w	8007dbc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	212c      	movs	r1, #44	; 0x2c
 8007c8c:	fb01 f303 	mul.w	r3, r1, r3
 8007c90:	4413      	add	r3, r2
 8007c92:	3350      	adds	r3, #80	; 0x50
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	441a      	add	r2, r3
 8007c9a:	6879      	ldr	r1, [r7, #4]
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	202c      	movs	r0, #44	; 0x2c
 8007ca0:	fb00 f303 	mul.w	r3, r0, r3
 8007ca4:	440b      	add	r3, r1
 8007ca6:	334c      	adds	r3, #76	; 0x4c
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d87a      	bhi.n	8007da4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6818      	ldr	r0, [r3, #0]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	212c      	movs	r1, #44	; 0x2c
 8007cb8:	fb01 f303 	mul.w	r3, r1, r3
 8007cbc:	4413      	add	r3, r2
 8007cbe:	3344      	adds	r3, #68	; 0x44
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	b292      	uxth	r2, r2
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	f004 f856 	bl	800bd78 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	212c      	movs	r1, #44	; 0x2c
 8007cd2:	fb01 f303 	mul.w	r3, r1, r3
 8007cd6:	4413      	add	r3, r2
 8007cd8:	3344      	adds	r3, #68	; 0x44
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	441a      	add	r2, r3
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	202c      	movs	r0, #44	; 0x2c
 8007ce6:	fb00 f303 	mul.w	r3, r0, r3
 8007cea:	440b      	add	r3, r1
 8007cec:	3344      	adds	r3, #68	; 0x44
 8007cee:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	212c      	movs	r1, #44	; 0x2c
 8007cf6:	fb01 f303 	mul.w	r3, r1, r3
 8007cfa:	4413      	add	r3, r2
 8007cfc:	3350      	adds	r3, #80	; 0x50
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	441a      	add	r2, r3
 8007d04:	6879      	ldr	r1, [r7, #4]
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	202c      	movs	r0, #44	; 0x2c
 8007d0a:	fb00 f303 	mul.w	r3, r0, r3
 8007d0e:	440b      	add	r3, r1
 8007d10:	3350      	adds	r3, #80	; 0x50
 8007d12:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	0cdb      	lsrs	r3, r3, #19
 8007d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d28:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	212c      	movs	r1, #44	; 0x2c
 8007d30:	fb01 f303 	mul.w	r3, r1, r3
 8007d34:	4413      	add	r3, r2
 8007d36:	3340      	adds	r3, #64	; 0x40
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d13c      	bne.n	8007dbc <HCD_RXQLVL_IRQHandler+0x19a>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d039      	beq.n	8007dbc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d5e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d66:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d74:	461a      	mov	r2, r3
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	212c      	movs	r1, #44	; 0x2c
 8007d80:	fb01 f303 	mul.w	r3, r1, r3
 8007d84:	4413      	add	r3, r2
 8007d86:	3354      	adds	r3, #84	; 0x54
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	f083 0301 	eor.w	r3, r3, #1
 8007d8e:	b2d8      	uxtb	r0, r3
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	212c      	movs	r1, #44	; 0x2c
 8007d96:	fb01 f303 	mul.w	r3, r1, r3
 8007d9a:	4413      	add	r3, r2
 8007d9c:	3354      	adds	r3, #84	; 0x54
 8007d9e:	4602      	mov	r2, r0
 8007da0:	701a      	strb	r2, [r3, #0]
      break;
 8007da2:	e00b      	b.n	8007dbc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	212c      	movs	r1, #44	; 0x2c
 8007daa:	fb01 f303 	mul.w	r3, r1, r3
 8007dae:	4413      	add	r3, r2
 8007db0:	3360      	adds	r3, #96	; 0x60
 8007db2:	2204      	movs	r2, #4
 8007db4:	701a      	strb	r2, [r3, #0]
      break;
 8007db6:	e001      	b.n	8007dbc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007db8:	bf00      	nop
 8007dba:	e000      	b.n	8007dbe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007dbc:	bf00      	nop
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	3728      	adds	r7, #40	; 0x28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b086      	sub	sp, #24
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007df2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f003 0302 	and.w	r3, r3, #2
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d10b      	bne.n	8007e16 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d102      	bne.n	8007e0e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f006 fee5 	bl	800ebd8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f043 0302 	orr.w	r3, r3, #2
 8007e14:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f003 0308 	and.w	r3, r3, #8
 8007e1c:	2b08      	cmp	r3, #8
 8007e1e:	d132      	bne.n	8007e86 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f043 0308 	orr.w	r3, r3, #8
 8007e26:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f003 0304 	and.w	r3, r3, #4
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d126      	bne.n	8007e80 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d113      	bne.n	8007e62 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007e40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e44:	d106      	bne.n	8007e54 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2102      	movs	r1, #2
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f004 f901 	bl	800c054 <USB_InitFSLSPClkSel>
 8007e52:	e011      	b.n	8007e78 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2101      	movs	r1, #1
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f004 f8fa 	bl	800c054 <USB_InitFSLSPClkSel>
 8007e60:	e00a      	b.n	8007e78 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d106      	bne.n	8007e78 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e70:	461a      	mov	r2, r3
 8007e72:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007e76:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f006 fed7 	bl	800ec2c <HAL_HCD_PortEnabled_Callback>
 8007e7e:	e002      	b.n	8007e86 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f006 fee1 	bl	800ec48 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f003 0320 	and.w	r3, r3, #32
 8007e8c:	2b20      	cmp	r3, #32
 8007e8e:	d103      	bne.n	8007e98 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f043 0320 	orr.w	r3, r3, #32
 8007e96:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	6013      	str	r3, [r2, #0]
}
 8007ea4:	bf00      	nop
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e12b      	b.n	8008116 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d106      	bne.n	8007ed8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7fc ffd0 	bl	8004e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2224      	movs	r2, #36	; 0x24
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0201 	bic.w	r2, r2, #1
 8007eee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007efe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007f10:	f001 fa20 	bl	8009354 <HAL_RCC_GetPCLK1Freq>
 8007f14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	4a81      	ldr	r2, [pc, #516]	; (8008120 <HAL_I2C_Init+0x274>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d807      	bhi.n	8007f30 <HAL_I2C_Init+0x84>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4a80      	ldr	r2, [pc, #512]	; (8008124 <HAL_I2C_Init+0x278>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	bf94      	ite	ls
 8007f28:	2301      	movls	r3, #1
 8007f2a:	2300      	movhi	r3, #0
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	e006      	b.n	8007f3e <HAL_I2C_Init+0x92>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4a7d      	ldr	r2, [pc, #500]	; (8008128 <HAL_I2C_Init+0x27c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	bf94      	ite	ls
 8007f38:	2301      	movls	r3, #1
 8007f3a:	2300      	movhi	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e0e7      	b.n	8008116 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4a78      	ldr	r2, [pc, #480]	; (800812c <HAL_I2C_Init+0x280>)
 8007f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f4e:	0c9b      	lsrs	r3, r3, #18
 8007f50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	4a6a      	ldr	r2, [pc, #424]	; (8008120 <HAL_I2C_Init+0x274>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d802      	bhi.n	8007f80 <HAL_I2C_Init+0xd4>
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	e009      	b.n	8007f94 <HAL_I2C_Init+0xe8>
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007f86:	fb02 f303 	mul.w	r3, r2, r3
 8007f8a:	4a69      	ldr	r2, [pc, #420]	; (8008130 <HAL_I2C_Init+0x284>)
 8007f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f90:	099b      	lsrs	r3, r3, #6
 8007f92:	3301      	adds	r3, #1
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	6812      	ldr	r2, [r2, #0]
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007fa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	495c      	ldr	r1, [pc, #368]	; (8008120 <HAL_I2C_Init+0x274>)
 8007fb0:	428b      	cmp	r3, r1
 8007fb2:	d819      	bhi.n	8007fe8 <HAL_I2C_Init+0x13c>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	1e59      	subs	r1, r3, #1
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	005b      	lsls	r3, r3, #1
 8007fbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fc2:	1c59      	adds	r1, r3, #1
 8007fc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007fc8:	400b      	ands	r3, r1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <HAL_I2C_Init+0x138>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	1e59      	subs	r1, r3, #1
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fdc:	3301      	adds	r3, #1
 8007fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fe2:	e051      	b.n	8008088 <HAL_I2C_Init+0x1dc>
 8007fe4:	2304      	movs	r3, #4
 8007fe6:	e04f      	b.n	8008088 <HAL_I2C_Init+0x1dc>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d111      	bne.n	8008014 <HAL_I2C_Init+0x168>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	1e58      	subs	r0, r3, #1
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6859      	ldr	r1, [r3, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	005b      	lsls	r3, r3, #1
 8007ffc:	440b      	add	r3, r1
 8007ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8008002:	3301      	adds	r3, #1
 8008004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008008:	2b00      	cmp	r3, #0
 800800a:	bf0c      	ite	eq
 800800c:	2301      	moveq	r3, #1
 800800e:	2300      	movne	r3, #0
 8008010:	b2db      	uxtb	r3, r3
 8008012:	e012      	b.n	800803a <HAL_I2C_Init+0x18e>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	1e58      	subs	r0, r3, #1
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6859      	ldr	r1, [r3, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	440b      	add	r3, r1
 8008022:	0099      	lsls	r1, r3, #2
 8008024:	440b      	add	r3, r1
 8008026:	fbb0 f3f3 	udiv	r3, r0, r3
 800802a:	3301      	adds	r3, #1
 800802c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008030:	2b00      	cmp	r3, #0
 8008032:	bf0c      	ite	eq
 8008034:	2301      	moveq	r3, #1
 8008036:	2300      	movne	r3, #0
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <HAL_I2C_Init+0x196>
 800803e:	2301      	movs	r3, #1
 8008040:	e022      	b.n	8008088 <HAL_I2C_Init+0x1dc>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10e      	bne.n	8008068 <HAL_I2C_Init+0x1bc>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	1e58      	subs	r0, r3, #1
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6859      	ldr	r1, [r3, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	440b      	add	r3, r1
 8008058:	fbb0 f3f3 	udiv	r3, r0, r3
 800805c:	3301      	adds	r3, #1
 800805e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008066:	e00f      	b.n	8008088 <HAL_I2C_Init+0x1dc>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	1e58      	subs	r0, r3, #1
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6859      	ldr	r1, [r3, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	440b      	add	r3, r1
 8008076:	0099      	lsls	r1, r3, #2
 8008078:	440b      	add	r3, r1
 800807a:	fbb0 f3f3 	udiv	r3, r0, r3
 800807e:	3301      	adds	r3, #1
 8008080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008084:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008088:	6879      	ldr	r1, [r7, #4]
 800808a:	6809      	ldr	r1, [r1, #0]
 800808c:	4313      	orrs	r3, r2
 800808e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	69da      	ldr	r2, [r3, #28]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	431a      	orrs	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	430a      	orrs	r2, r1
 80080aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80080b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	6911      	ldr	r1, [r2, #16]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	68d2      	ldr	r2, [r2, #12]
 80080c2:	4311      	orrs	r1, r2
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	6812      	ldr	r2, [r2, #0]
 80080c8:	430b      	orrs	r3, r1
 80080ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	695a      	ldr	r2, [r3, #20]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	431a      	orrs	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f042 0201 	orr.w	r2, r2, #1
 80080f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	000186a0 	.word	0x000186a0
 8008124:	001e847f 	.word	0x001e847f
 8008128:	003d08ff 	.word	0x003d08ff
 800812c:	431bde83 	.word	0x431bde83
 8008130:	10624dd3 	.word	0x10624dd3

08008134 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e128      	b.n	8008398 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d109      	bne.n	8008166 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a90      	ldr	r2, [pc, #576]	; (80083a0 <HAL_I2S_Init+0x26c>)
 800815e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7fc fed1 	bl	8004f08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2202      	movs	r2, #2
 800816a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	6812      	ldr	r2, [r2, #0]
 8008178:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800817c:	f023 030f 	bic.w	r3, r3, #15
 8008180:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2202      	movs	r2, #2
 8008188:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	2b02      	cmp	r3, #2
 8008190:	d060      	beq.n	8008254 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d102      	bne.n	80081a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800819a:	2310      	movs	r3, #16
 800819c:	617b      	str	r3, [r7, #20]
 800819e:	e001      	b.n	80081a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80081a0:	2320      	movs	r3, #32
 80081a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	2b20      	cmp	r3, #32
 80081aa:	d802      	bhi.n	80081b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	005b      	lsls	r3, r3, #1
 80081b0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80081b2:	2001      	movs	r0, #1
 80081b4:	f001 f9e6 	bl	8009584 <HAL_RCCEx_GetPeriphCLKFreq>
 80081b8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c2:	d125      	bne.n	8008210 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d010      	beq.n	80081ee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80081d6:	4613      	mov	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	461a      	mov	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e8:	3305      	adds	r3, #5
 80081ea:	613b      	str	r3, [r7, #16]
 80081ec:	e01f      	b.n	800822e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80081f8:	4613      	mov	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	461a      	mov	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	fbb2 f3f3 	udiv	r3, r2, r3
 800820a:	3305      	adds	r3, #5
 800820c:	613b      	str	r3, [r7, #16]
 800820e:	e00e      	b.n	800822e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	fbb2 f2f3 	udiv	r2, r2, r3
 8008218:	4613      	mov	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	461a      	mov	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	fbb2 f3f3 	udiv	r3, r2, r3
 800822a:	3305      	adds	r3, #5
 800822c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	4a5c      	ldr	r2, [pc, #368]	; (80083a4 <HAL_I2S_Init+0x270>)
 8008232:	fba2 2303 	umull	r2, r3, r2, r3
 8008236:	08db      	lsrs	r3, r3, #3
 8008238:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	085b      	lsrs	r3, r3, #1
 800824a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	021b      	lsls	r3, r3, #8
 8008250:	61bb      	str	r3, [r7, #24]
 8008252:	e003      	b.n	800825c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008254:	2302      	movs	r3, #2
 8008256:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d902      	bls.n	8008268 <HAL_I2S_Init+0x134>
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	2bff      	cmp	r3, #255	; 0xff
 8008266:	d907      	bls.n	8008278 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800826c:	f043 0210 	orr.w	r2, r3, #16
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e08f      	b.n	8008398 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	691a      	ldr	r2, [r3, #16]
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	ea42 0103 	orr.w	r1, r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69fa      	ldr	r2, [r7, #28]
 8008288:	430a      	orrs	r2, r1
 800828a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008296:	f023 030f 	bic.w	r3, r3, #15
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	6851      	ldr	r1, [r2, #4]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	6892      	ldr	r2, [r2, #8]
 80082a2:	4311      	orrs	r1, r2
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	68d2      	ldr	r2, [r2, #12]
 80082a8:	4311      	orrs	r1, r2
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	6992      	ldr	r2, [r2, #24]
 80082ae:	430a      	orrs	r2, r1
 80082b0:	431a      	orrs	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d161      	bne.n	8008388 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a38      	ldr	r2, [pc, #224]	; (80083a8 <HAL_I2S_Init+0x274>)
 80082c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a37      	ldr	r2, [pc, #220]	; (80083ac <HAL_I2S_Init+0x278>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d101      	bne.n	80082d8 <HAL_I2S_Init+0x1a4>
 80082d4:	4b36      	ldr	r3, [pc, #216]	; (80083b0 <HAL_I2S_Init+0x27c>)
 80082d6:	e001      	b.n	80082dc <HAL_I2S_Init+0x1a8>
 80082d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	6812      	ldr	r2, [r2, #0]
 80082e2:	4932      	ldr	r1, [pc, #200]	; (80083ac <HAL_I2S_Init+0x278>)
 80082e4:	428a      	cmp	r2, r1
 80082e6:	d101      	bne.n	80082ec <HAL_I2S_Init+0x1b8>
 80082e8:	4a31      	ldr	r2, [pc, #196]	; (80083b0 <HAL_I2S_Init+0x27c>)
 80082ea:	e001      	b.n	80082f0 <HAL_I2S_Init+0x1bc>
 80082ec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80082f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80082f4:	f023 030f 	bic.w	r3, r3, #15
 80082f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a2b      	ldr	r2, [pc, #172]	; (80083ac <HAL_I2S_Init+0x278>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d101      	bne.n	8008308 <HAL_I2S_Init+0x1d4>
 8008304:	4b2a      	ldr	r3, [pc, #168]	; (80083b0 <HAL_I2S_Init+0x27c>)
 8008306:	e001      	b.n	800830c <HAL_I2S_Init+0x1d8>
 8008308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800830c:	2202      	movs	r2, #2
 800830e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a25      	ldr	r2, [pc, #148]	; (80083ac <HAL_I2S_Init+0x278>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d101      	bne.n	800831e <HAL_I2S_Init+0x1ea>
 800831a:	4b25      	ldr	r3, [pc, #148]	; (80083b0 <HAL_I2S_Init+0x27c>)
 800831c:	e001      	b.n	8008322 <HAL_I2S_Init+0x1ee>
 800831e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800832e:	d003      	beq.n	8008338 <HAL_I2S_Init+0x204>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d103      	bne.n	8008340 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8008338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800833c:	613b      	str	r3, [r7, #16]
 800833e:	e001      	b.n	8008344 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8008340:	2300      	movs	r3, #0
 8008342:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800834e:	4313      	orrs	r3, r2
 8008350:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008358:	4313      	orrs	r3, r2
 800835a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008362:	4313      	orrs	r3, r2
 8008364:	b29a      	uxth	r2, r3
 8008366:	897b      	ldrh	r3, [r7, #10]
 8008368:	4313      	orrs	r3, r2
 800836a:	b29b      	uxth	r3, r3
 800836c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008370:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a0d      	ldr	r2, [pc, #52]	; (80083ac <HAL_I2S_Init+0x278>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d101      	bne.n	8008380 <HAL_I2S_Init+0x24c>
 800837c:	4b0c      	ldr	r3, [pc, #48]	; (80083b0 <HAL_I2S_Init+0x27c>)
 800837e:	e001      	b.n	8008384 <HAL_I2S_Init+0x250>
 8008380:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008384:	897a      	ldrh	r2, [r7, #10]
 8008386:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3720      	adds	r7, #32
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	080084ab 	.word	0x080084ab
 80083a4:	cccccccd 	.word	0xcccccccd
 80083a8:	080085c1 	.word	0x080085c1
 80083ac:	40003800 	.word	0x40003800
 80083b0:	40003400 	.word	0x40003400

080083b4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fc:	881a      	ldrh	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	1c9a      	adds	r2, r3, #2
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008412:	b29b      	uxth	r3, r3
 8008414:	3b01      	subs	r3, #1
 8008416:	b29a      	uxth	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008420:	b29b      	uxth	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10e      	bne.n	8008444 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008434:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7ff ffb8 	bl	80083b4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008444:	bf00      	nop
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68da      	ldr	r2, [r3, #12]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845e:	b292      	uxth	r2, r2
 8008460:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008466:	1c9a      	adds	r2, r3, #2
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008470:	b29b      	uxth	r3, r3
 8008472:	3b01      	subs	r3, #1
 8008474:	b29a      	uxth	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800847e:	b29b      	uxth	r3, r3
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10e      	bne.n	80084a2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008492:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff ff93 	bl	80083c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80084a2:	bf00      	nop
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b086      	sub	sp, #24
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b04      	cmp	r3, #4
 80084c4:	d13a      	bne.n	800853c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d109      	bne.n	80084e4 <I2S_IRQHandler+0x3a>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084da:	2b40      	cmp	r3, #64	; 0x40
 80084dc:	d102      	bne.n	80084e4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7ff ffb4 	bl	800844c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ea:	2b40      	cmp	r3, #64	; 0x40
 80084ec:	d126      	bne.n	800853c <I2S_IRQHandler+0x92>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f003 0320 	and.w	r3, r3, #32
 80084f8:	2b20      	cmp	r3, #32
 80084fa:	d11f      	bne.n	800853c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800850a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800850c:	2300      	movs	r3, #0
 800850e:	613b      	str	r3, [r7, #16]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	613b      	str	r3, [r7, #16]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	613b      	str	r3, [r7, #16]
 8008520:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800852e:	f043 0202 	orr.w	r2, r3, #2
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff ff50 	bl	80083dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b03      	cmp	r3, #3
 8008546:	d136      	bne.n	80085b6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b02      	cmp	r3, #2
 8008550:	d109      	bne.n	8008566 <I2S_IRQHandler+0xbc>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800855c:	2b80      	cmp	r3, #128	; 0x80
 800855e:	d102      	bne.n	8008566 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7ff ff45 	bl	80083f0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f003 0308 	and.w	r3, r3, #8
 800856c:	2b08      	cmp	r3, #8
 800856e:	d122      	bne.n	80085b6 <I2S_IRQHandler+0x10c>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f003 0320 	and.w	r3, r3, #32
 800857a:	2b20      	cmp	r3, #32
 800857c:	d11b      	bne.n	80085b6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800858c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800858e:	2300      	movs	r3, #0
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	60fb      	str	r3, [r7, #12]
 800859a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a8:	f043 0204 	orr.w	r2, r3, #4
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7ff ff13 	bl	80083dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80085b6:	bf00      	nop
 80085b8:	3718      	adds	r7, #24
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
	...

080085c0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a92      	ldr	r2, [pc, #584]	; (8008820 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d101      	bne.n	80085de <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80085da:	4b92      	ldr	r3, [pc, #584]	; (8008824 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80085dc:	e001      	b.n	80085e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80085de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a8b      	ldr	r2, [pc, #556]	; (8008820 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d101      	bne.n	80085fc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80085f8:	4b8a      	ldr	r3, [pc, #552]	; (8008824 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80085fa:	e001      	b.n	8008600 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80085fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800860c:	d004      	beq.n	8008618 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	f040 8099 	bne.w	800874a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	f003 0302 	and.w	r3, r3, #2
 800861e:	2b02      	cmp	r3, #2
 8008620:	d107      	bne.n	8008632 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f925 	bl	800887c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	f003 0301 	and.w	r3, r3, #1
 8008638:	2b01      	cmp	r3, #1
 800863a:	d107      	bne.n	800864c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008642:	2b00      	cmp	r3, #0
 8008644:	d002      	beq.n	800864c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f9c8 	bl	80089dc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008652:	2b40      	cmp	r3, #64	; 0x40
 8008654:	d13a      	bne.n	80086cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b00      	cmp	r3, #0
 800865e:	d035      	beq.n	80086cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a6e      	ldr	r2, [pc, #440]	; (8008820 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d101      	bne.n	800866e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800866a:	4b6e      	ldr	r3, [pc, #440]	; (8008824 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800866c:	e001      	b.n	8008672 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800866e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4969      	ldr	r1, [pc, #420]	; (8008820 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800867a:	428b      	cmp	r3, r1
 800867c:	d101      	bne.n	8008682 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800867e:	4b69      	ldr	r3, [pc, #420]	; (8008824 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008680:	e001      	b.n	8008686 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8008682:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008686:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800868a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800869a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800869c:	2300      	movs	r3, #0
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	60fb      	str	r3, [r7, #12]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086be:	f043 0202 	orr.w	r2, r3, #2
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7ff fe88 	bl	80083dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	f003 0308 	and.w	r3, r3, #8
 80086d2:	2b08      	cmp	r3, #8
 80086d4:	f040 80c3 	bne.w	800885e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f003 0320 	and.w	r3, r3, #32
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 80bd 	beq.w	800885e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80086f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a49      	ldr	r2, [pc, #292]	; (8008820 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d101      	bne.n	8008702 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80086fe:	4b49      	ldr	r3, [pc, #292]	; (8008824 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008700:	e001      	b.n	8008706 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8008702:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4944      	ldr	r1, [pc, #272]	; (8008820 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800870e:	428b      	cmp	r3, r1
 8008710:	d101      	bne.n	8008716 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8008712:	4b44      	ldr	r3, [pc, #272]	; (8008824 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008714:	e001      	b.n	800871a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8008716:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800871a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800871e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008720:	2300      	movs	r3, #0
 8008722:	60bb      	str	r3, [r7, #8]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	60bb      	str	r3, [r7, #8]
 800872c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800873a:	f043 0204 	orr.w	r2, r3, #4
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7ff fe4a 	bl	80083dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008748:	e089      	b.n	800885e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	f003 0302 	and.w	r3, r3, #2
 8008750:	2b02      	cmp	r3, #2
 8008752:	d107      	bne.n	8008764 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f8be 	bl	80088e0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b01      	cmp	r3, #1
 800876c:	d107      	bne.n	800877e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008774:	2b00      	cmp	r3, #0
 8008776:	d002      	beq.n	800877e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f8fd 	bl	8008978 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008784:	2b40      	cmp	r3, #64	; 0x40
 8008786:	d12f      	bne.n	80087e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f003 0320 	and.w	r3, r3, #32
 800878e:	2b00      	cmp	r3, #0
 8008790:	d02a      	beq.n	80087e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80087a0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a1e      	ldr	r2, [pc, #120]	; (8008820 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d101      	bne.n	80087b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80087ac:	4b1d      	ldr	r3, [pc, #116]	; (8008824 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80087ae:	e001      	b.n	80087b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80087b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4919      	ldr	r1, [pc, #100]	; (8008820 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80087bc:	428b      	cmp	r3, r1
 80087be:	d101      	bne.n	80087c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80087c0:	4b18      	ldr	r3, [pc, #96]	; (8008824 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80087c2:	e001      	b.n	80087c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80087c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80087c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80087cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087da:	f043 0202 	orr.w	r2, r3, #2
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff fdfa 	bl	80083dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	f003 0308 	and.w	r3, r3, #8
 80087ee:	2b08      	cmp	r3, #8
 80087f0:	d136      	bne.n	8008860 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f003 0320 	and.w	r3, r3, #32
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d031      	beq.n	8008860 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a07      	ldr	r2, [pc, #28]	; (8008820 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d101      	bne.n	800880a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8008806:	4b07      	ldr	r3, [pc, #28]	; (8008824 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008808:	e001      	b.n	800880e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800880a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4902      	ldr	r1, [pc, #8]	; (8008820 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008816:	428b      	cmp	r3, r1
 8008818:	d106      	bne.n	8008828 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800881a:	4b02      	ldr	r3, [pc, #8]	; (8008824 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800881c:	e006      	b.n	800882c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800881e:	bf00      	nop
 8008820:	40003800 	.word	0x40003800
 8008824:	40003400 	.word	0x40003400
 8008828:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800882c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008830:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008840:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800884e:	f043 0204 	orr.w	r2, r3, #4
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7ff fdc0 	bl	80083dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800885c:	e000      	b.n	8008860 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800885e:	bf00      	nop
}
 8008860:	bf00      	nop
 8008862:	3720      	adds	r7, #32
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	1c99      	adds	r1, r3, #2
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	6251      	str	r1, [r2, #36]	; 0x24
 800888e:	881a      	ldrh	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800889a:	b29b      	uxth	r3, r3
 800889c:	3b01      	subs	r3, #1
 800889e:	b29a      	uxth	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d113      	bne.n	80088d6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	685a      	ldr	r2, [r3, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80088bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d106      	bne.n	80088d6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f7ff ffc9 	bl	8008868 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80088d6:	bf00      	nop
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
	...

080088e0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ec:	1c99      	adds	r1, r3, #2
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	6251      	str	r1, [r2, #36]	; 0x24
 80088f2:	8819      	ldrh	r1, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a1d      	ldr	r2, [pc, #116]	; (8008970 <I2SEx_TxISR_I2SExt+0x90>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d101      	bne.n	8008902 <I2SEx_TxISR_I2SExt+0x22>
 80088fe:	4b1d      	ldr	r3, [pc, #116]	; (8008974 <I2SEx_TxISR_I2SExt+0x94>)
 8008900:	e001      	b.n	8008906 <I2SEx_TxISR_I2SExt+0x26>
 8008902:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008906:	460a      	mov	r2, r1
 8008908:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800890e:	b29b      	uxth	r3, r3
 8008910:	3b01      	subs	r3, #1
 8008912:	b29a      	uxth	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800891c:	b29b      	uxth	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d121      	bne.n	8008966 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a12      	ldr	r2, [pc, #72]	; (8008970 <I2SEx_TxISR_I2SExt+0x90>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d101      	bne.n	8008930 <I2SEx_TxISR_I2SExt+0x50>
 800892c:	4b11      	ldr	r3, [pc, #68]	; (8008974 <I2SEx_TxISR_I2SExt+0x94>)
 800892e:	e001      	b.n	8008934 <I2SEx_TxISR_I2SExt+0x54>
 8008930:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	490d      	ldr	r1, [pc, #52]	; (8008970 <I2SEx_TxISR_I2SExt+0x90>)
 800893c:	428b      	cmp	r3, r1
 800893e:	d101      	bne.n	8008944 <I2SEx_TxISR_I2SExt+0x64>
 8008940:	4b0c      	ldr	r3, [pc, #48]	; (8008974 <I2SEx_TxISR_I2SExt+0x94>)
 8008942:	e001      	b.n	8008948 <I2SEx_TxISR_I2SExt+0x68>
 8008944:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008948:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800894c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008952:	b29b      	uxth	r3, r3
 8008954:	2b00      	cmp	r3, #0
 8008956:	d106      	bne.n	8008966 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7ff ff81 	bl	8008868 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008966:	bf00      	nop
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	40003800 	.word	0x40003800
 8008974:	40003400 	.word	0x40003400

08008978 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68d8      	ldr	r0, [r3, #12]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898a:	1c99      	adds	r1, r3, #2
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008990:	b282      	uxth	r2, r0
 8008992:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008998:	b29b      	uxth	r3, r3
 800899a:	3b01      	subs	r3, #1
 800899c:	b29a      	uxth	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d113      	bne.n	80089d4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685a      	ldr	r2, [r3, #4]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80089ba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d106      	bne.n	80089d4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7ff ff4a 	bl	8008868 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a20      	ldr	r2, [pc, #128]	; (8008a6c <I2SEx_RxISR_I2SExt+0x90>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d101      	bne.n	80089f2 <I2SEx_RxISR_I2SExt+0x16>
 80089ee:	4b20      	ldr	r3, [pc, #128]	; (8008a70 <I2SEx_RxISR_I2SExt+0x94>)
 80089f0:	e001      	b.n	80089f6 <I2SEx_RxISR_I2SExt+0x1a>
 80089f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80089f6:	68d8      	ldr	r0, [r3, #12]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fc:	1c99      	adds	r1, r3, #2
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008a02:	b282      	uxth	r2, r0
 8008a04:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d121      	bne.n	8008a62 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a12      	ldr	r2, [pc, #72]	; (8008a6c <I2SEx_RxISR_I2SExt+0x90>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d101      	bne.n	8008a2c <I2SEx_RxISR_I2SExt+0x50>
 8008a28:	4b11      	ldr	r3, [pc, #68]	; (8008a70 <I2SEx_RxISR_I2SExt+0x94>)
 8008a2a:	e001      	b.n	8008a30 <I2SEx_RxISR_I2SExt+0x54>
 8008a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	490d      	ldr	r1, [pc, #52]	; (8008a6c <I2SEx_RxISR_I2SExt+0x90>)
 8008a38:	428b      	cmp	r3, r1
 8008a3a:	d101      	bne.n	8008a40 <I2SEx_RxISR_I2SExt+0x64>
 8008a3c:	4b0c      	ldr	r3, [pc, #48]	; (8008a70 <I2SEx_RxISR_I2SExt+0x94>)
 8008a3e:	e001      	b.n	8008a44 <I2SEx_RxISR_I2SExt+0x68>
 8008a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008a44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008a48:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d106      	bne.n	8008a62 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff ff03 	bl	8008868 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008a62:	bf00      	nop
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	40003800 	.word	0x40003800
 8008a70:	40003400 	.word	0x40003400

08008a74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e267      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d075      	beq.n	8008b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008a92:	4b88      	ldr	r3, [pc, #544]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f003 030c 	and.w	r3, r3, #12
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	d00c      	beq.n	8008ab8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a9e:	4b85      	ldr	r3, [pc, #532]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008aa6:	2b08      	cmp	r3, #8
 8008aa8:	d112      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008aaa:	4b82      	ldr	r3, [pc, #520]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ab6:	d10b      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ab8:	4b7e      	ldr	r3, [pc, #504]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d05b      	beq.n	8008b7c <HAL_RCC_OscConfig+0x108>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d157      	bne.n	8008b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e242      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ad8:	d106      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x74>
 8008ada:	4b76      	ldr	r3, [pc, #472]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a75      	ldr	r2, [pc, #468]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ae4:	6013      	str	r3, [r2, #0]
 8008ae6:	e01d      	b.n	8008b24 <HAL_RCC_OscConfig+0xb0>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008af0:	d10c      	bne.n	8008b0c <HAL_RCC_OscConfig+0x98>
 8008af2:	4b70      	ldr	r3, [pc, #448]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a6f      	ldr	r2, [pc, #444]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008afc:	6013      	str	r3, [r2, #0]
 8008afe:	4b6d      	ldr	r3, [pc, #436]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a6c      	ldr	r2, [pc, #432]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b08:	6013      	str	r3, [r2, #0]
 8008b0a:	e00b      	b.n	8008b24 <HAL_RCC_OscConfig+0xb0>
 8008b0c:	4b69      	ldr	r3, [pc, #420]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a68      	ldr	r2, [pc, #416]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b16:	6013      	str	r3, [r2, #0]
 8008b18:	4b66      	ldr	r3, [pc, #408]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a65      	ldr	r2, [pc, #404]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d013      	beq.n	8008b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b2c:	f7fc fe88 	bl	8005840 <HAL_GetTick>
 8008b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b32:	e008      	b.n	8008b46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b34:	f7fc fe84 	bl	8005840 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	2b64      	cmp	r3, #100	; 0x64
 8008b40:	d901      	bls.n	8008b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e207      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b46:	4b5b      	ldr	r3, [pc, #364]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0f0      	beq.n	8008b34 <HAL_RCC_OscConfig+0xc0>
 8008b52:	e014      	b.n	8008b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b54:	f7fc fe74 	bl	8005840 <HAL_GetTick>
 8008b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b5a:	e008      	b.n	8008b6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b5c:	f7fc fe70 	bl	8005840 <HAL_GetTick>
 8008b60:	4602      	mov	r2, r0
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	2b64      	cmp	r3, #100	; 0x64
 8008b68:	d901      	bls.n	8008b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e1f3      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b6e:	4b51      	ldr	r3, [pc, #324]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1f0      	bne.n	8008b5c <HAL_RCC_OscConfig+0xe8>
 8008b7a:	e000      	b.n	8008b7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0302 	and.w	r3, r3, #2
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d063      	beq.n	8008c52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b8a:	4b4a      	ldr	r3, [pc, #296]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f003 030c 	and.w	r3, r3, #12
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00b      	beq.n	8008bae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b96:	4b47      	ldr	r3, [pc, #284]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b9e:	2b08      	cmp	r3, #8
 8008ba0:	d11c      	bne.n	8008bdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ba2:	4b44      	ldr	r3, [pc, #272]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d116      	bne.n	8008bdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bae:	4b41      	ldr	r3, [pc, #260]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d005      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x152>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d001      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e1c7      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bc6:	4b3b      	ldr	r3, [pc, #236]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	00db      	lsls	r3, r3, #3
 8008bd4:	4937      	ldr	r1, [pc, #220]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bda:	e03a      	b.n	8008c52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d020      	beq.n	8008c26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008be4:	4b34      	ldr	r3, [pc, #208]	; (8008cb8 <HAL_RCC_OscConfig+0x244>)
 8008be6:	2201      	movs	r2, #1
 8008be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bea:	f7fc fe29 	bl	8005840 <HAL_GetTick>
 8008bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bf0:	e008      	b.n	8008c04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bf2:	f7fc fe25 	bl	8005840 <HAL_GetTick>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d901      	bls.n	8008c04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e1a8      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c04:	4b2b      	ldr	r3, [pc, #172]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d0f0      	beq.n	8008bf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c10:	4b28      	ldr	r3, [pc, #160]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	00db      	lsls	r3, r3, #3
 8008c1e:	4925      	ldr	r1, [pc, #148]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008c20:	4313      	orrs	r3, r2
 8008c22:	600b      	str	r3, [r1, #0]
 8008c24:	e015      	b.n	8008c52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c26:	4b24      	ldr	r3, [pc, #144]	; (8008cb8 <HAL_RCC_OscConfig+0x244>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c2c:	f7fc fe08 	bl	8005840 <HAL_GetTick>
 8008c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c32:	e008      	b.n	8008c46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c34:	f7fc fe04 	bl	8005840 <HAL_GetTick>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d901      	bls.n	8008c46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e187      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c46:	4b1b      	ldr	r3, [pc, #108]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1f0      	bne.n	8008c34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0308 	and.w	r3, r3, #8
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d036      	beq.n	8008ccc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d016      	beq.n	8008c94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c66:	4b15      	ldr	r3, [pc, #84]	; (8008cbc <HAL_RCC_OscConfig+0x248>)
 8008c68:	2201      	movs	r2, #1
 8008c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c6c:	f7fc fde8 	bl	8005840 <HAL_GetTick>
 8008c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c72:	e008      	b.n	8008c86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c74:	f7fc fde4 	bl	8005840 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d901      	bls.n	8008c86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e167      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c86:	4b0b      	ldr	r3, [pc, #44]	; (8008cb4 <HAL_RCC_OscConfig+0x240>)
 8008c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c8a:	f003 0302 	and.w	r3, r3, #2
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0f0      	beq.n	8008c74 <HAL_RCC_OscConfig+0x200>
 8008c92:	e01b      	b.n	8008ccc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c94:	4b09      	ldr	r3, [pc, #36]	; (8008cbc <HAL_RCC_OscConfig+0x248>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c9a:	f7fc fdd1 	bl	8005840 <HAL_GetTick>
 8008c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ca0:	e00e      	b.n	8008cc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ca2:	f7fc fdcd 	bl	8005840 <HAL_GetTick>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d907      	bls.n	8008cc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e150      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
 8008cb4:	40023800 	.word	0x40023800
 8008cb8:	42470000 	.word	0x42470000
 8008cbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cc0:	4b88      	ldr	r3, [pc, #544]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cc4:	f003 0302 	and.w	r3, r3, #2
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1ea      	bne.n	8008ca2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0304 	and.w	r3, r3, #4
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 8097 	beq.w	8008e08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cde:	4b81      	ldr	r3, [pc, #516]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10f      	bne.n	8008d0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cea:	2300      	movs	r3, #0
 8008cec:	60bb      	str	r3, [r7, #8]
 8008cee:	4b7d      	ldr	r3, [pc, #500]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf2:	4a7c      	ldr	r2, [pc, #496]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8008cfa:	4b7a      	ldr	r3, [pc, #488]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d02:	60bb      	str	r3, [r7, #8]
 8008d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d06:	2301      	movs	r3, #1
 8008d08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d0a:	4b77      	ldr	r3, [pc, #476]	; (8008ee8 <HAL_RCC_OscConfig+0x474>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d118      	bne.n	8008d48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d16:	4b74      	ldr	r3, [pc, #464]	; (8008ee8 <HAL_RCC_OscConfig+0x474>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a73      	ldr	r2, [pc, #460]	; (8008ee8 <HAL_RCC_OscConfig+0x474>)
 8008d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d22:	f7fc fd8d 	bl	8005840 <HAL_GetTick>
 8008d26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d28:	e008      	b.n	8008d3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d2a:	f7fc fd89 	bl	8005840 <HAL_GetTick>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d901      	bls.n	8008d3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e10c      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d3c:	4b6a      	ldr	r3, [pc, #424]	; (8008ee8 <HAL_RCC_OscConfig+0x474>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d0f0      	beq.n	8008d2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d106      	bne.n	8008d5e <HAL_RCC_OscConfig+0x2ea>
 8008d50:	4b64      	ldr	r3, [pc, #400]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d54:	4a63      	ldr	r2, [pc, #396]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008d56:	f043 0301 	orr.w	r3, r3, #1
 8008d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8008d5c:	e01c      	b.n	8008d98 <HAL_RCC_OscConfig+0x324>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	2b05      	cmp	r3, #5
 8008d64:	d10c      	bne.n	8008d80 <HAL_RCC_OscConfig+0x30c>
 8008d66:	4b5f      	ldr	r3, [pc, #380]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6a:	4a5e      	ldr	r2, [pc, #376]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008d6c:	f043 0304 	orr.w	r3, r3, #4
 8008d70:	6713      	str	r3, [r2, #112]	; 0x70
 8008d72:	4b5c      	ldr	r3, [pc, #368]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d76:	4a5b      	ldr	r2, [pc, #364]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008d78:	f043 0301 	orr.w	r3, r3, #1
 8008d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8008d7e:	e00b      	b.n	8008d98 <HAL_RCC_OscConfig+0x324>
 8008d80:	4b58      	ldr	r3, [pc, #352]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d84:	4a57      	ldr	r2, [pc, #348]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008d86:	f023 0301 	bic.w	r3, r3, #1
 8008d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8008d8c:	4b55      	ldr	r3, [pc, #340]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d90:	4a54      	ldr	r2, [pc, #336]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008d92:	f023 0304 	bic.w	r3, r3, #4
 8008d96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d015      	beq.n	8008dcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008da0:	f7fc fd4e 	bl	8005840 <HAL_GetTick>
 8008da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008da6:	e00a      	b.n	8008dbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008da8:	f7fc fd4a 	bl	8005840 <HAL_GetTick>
 8008dac:	4602      	mov	r2, r0
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d901      	bls.n	8008dbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e0cb      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dbe:	4b49      	ldr	r3, [pc, #292]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc2:	f003 0302 	and.w	r3, r3, #2
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d0ee      	beq.n	8008da8 <HAL_RCC_OscConfig+0x334>
 8008dca:	e014      	b.n	8008df6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dcc:	f7fc fd38 	bl	8005840 <HAL_GetTick>
 8008dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dd2:	e00a      	b.n	8008dea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008dd4:	f7fc fd34 	bl	8005840 <HAL_GetTick>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d901      	bls.n	8008dea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e0b5      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dea:	4b3e      	ldr	r3, [pc, #248]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dee:	f003 0302 	and.w	r3, r3, #2
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1ee      	bne.n	8008dd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008df6:	7dfb      	ldrb	r3, [r7, #23]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d105      	bne.n	8008e08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dfc:	4b39      	ldr	r3, [pc, #228]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e00:	4a38      	ldr	r2, [pc, #224]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 80a1 	beq.w	8008f54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e12:	4b34      	ldr	r3, [pc, #208]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f003 030c 	and.w	r3, r3, #12
 8008e1a:	2b08      	cmp	r3, #8
 8008e1c:	d05c      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d141      	bne.n	8008eaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e26:	4b31      	ldr	r3, [pc, #196]	; (8008eec <HAL_RCC_OscConfig+0x478>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e2c:	f7fc fd08 	bl	8005840 <HAL_GetTick>
 8008e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e32:	e008      	b.n	8008e46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e34:	f7fc fd04 	bl	8005840 <HAL_GetTick>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d901      	bls.n	8008e46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e087      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e46:	4b27      	ldr	r3, [pc, #156]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1f0      	bne.n	8008e34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	69da      	ldr	r2, [r3, #28]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e60:	019b      	lsls	r3, r3, #6
 8008e62:	431a      	orrs	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e68:	085b      	lsrs	r3, r3, #1
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	041b      	lsls	r3, r3, #16
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e74:	061b      	lsls	r3, r3, #24
 8008e76:	491b      	ldr	r1, [pc, #108]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e7c:	4b1b      	ldr	r3, [pc, #108]	; (8008eec <HAL_RCC_OscConfig+0x478>)
 8008e7e:	2201      	movs	r2, #1
 8008e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e82:	f7fc fcdd 	bl	8005840 <HAL_GetTick>
 8008e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e88:	e008      	b.n	8008e9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e8a:	f7fc fcd9 	bl	8005840 <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d901      	bls.n	8008e9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e05c      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e9c:	4b11      	ldr	r3, [pc, #68]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0f0      	beq.n	8008e8a <HAL_RCC_OscConfig+0x416>
 8008ea8:	e054      	b.n	8008f54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eaa:	4b10      	ldr	r3, [pc, #64]	; (8008eec <HAL_RCC_OscConfig+0x478>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eb0:	f7fc fcc6 	bl	8005840 <HAL_GetTick>
 8008eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eb6:	e008      	b.n	8008eca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008eb8:	f7fc fcc2 	bl	8005840 <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d901      	bls.n	8008eca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e045      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eca:	4b06      	ldr	r3, [pc, #24]	; (8008ee4 <HAL_RCC_OscConfig+0x470>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1f0      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x444>
 8008ed6:	e03d      	b.n	8008f54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d107      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e038      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
 8008ee4:	40023800 	.word	0x40023800
 8008ee8:	40007000 	.word	0x40007000
 8008eec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ef0:	4b1b      	ldr	r3, [pc, #108]	; (8008f60 <HAL_RCC_OscConfig+0x4ec>)
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d028      	beq.n	8008f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d121      	bne.n	8008f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d11a      	bne.n	8008f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008f20:	4013      	ands	r3, r2
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d111      	bne.n	8008f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f36:	085b      	lsrs	r3, r3, #1
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d107      	bne.n	8008f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d001      	beq.n	8008f54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e000      	b.n	8008f56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3718      	adds	r7, #24
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	40023800 	.word	0x40023800

08008f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d101      	bne.n	8008f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e0cc      	b.n	8009112 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f78:	4b68      	ldr	r3, [pc, #416]	; (800911c <HAL_RCC_ClockConfig+0x1b8>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 0307 	and.w	r3, r3, #7
 8008f80:	683a      	ldr	r2, [r7, #0]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d90c      	bls.n	8008fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f86:	4b65      	ldr	r3, [pc, #404]	; (800911c <HAL_RCC_ClockConfig+0x1b8>)
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	b2d2      	uxtb	r2, r2
 8008f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f8e:	4b63      	ldr	r3, [pc, #396]	; (800911c <HAL_RCC_ClockConfig+0x1b8>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d001      	beq.n	8008fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e0b8      	b.n	8009112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d020      	beq.n	8008fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 0304 	and.w	r3, r3, #4
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d005      	beq.n	8008fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008fb8:	4b59      	ldr	r3, [pc, #356]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	4a58      	ldr	r2, [pc, #352]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 8008fbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008fc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0308 	and.w	r3, r3, #8
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d005      	beq.n	8008fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008fd0:	4b53      	ldr	r3, [pc, #332]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	4a52      	ldr	r2, [pc, #328]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 8008fd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fdc:	4b50      	ldr	r3, [pc, #320]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	494d      	ldr	r1, [pc, #308]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 8008fea:	4313      	orrs	r3, r2
 8008fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d044      	beq.n	8009084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d107      	bne.n	8009012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009002:	4b47      	ldr	r3, [pc, #284]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800900a:	2b00      	cmp	r3, #0
 800900c:	d119      	bne.n	8009042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e07f      	b.n	8009112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	2b02      	cmp	r3, #2
 8009018:	d003      	beq.n	8009022 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800901e:	2b03      	cmp	r3, #3
 8009020:	d107      	bne.n	8009032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009022:	4b3f      	ldr	r3, [pc, #252]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800902a:	2b00      	cmp	r3, #0
 800902c:	d109      	bne.n	8009042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e06f      	b.n	8009112 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009032:	4b3b      	ldr	r3, [pc, #236]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0302 	and.w	r3, r3, #2
 800903a:	2b00      	cmp	r3, #0
 800903c:	d101      	bne.n	8009042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e067      	b.n	8009112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009042:	4b37      	ldr	r3, [pc, #220]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f023 0203 	bic.w	r2, r3, #3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	4934      	ldr	r1, [pc, #208]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 8009050:	4313      	orrs	r3, r2
 8009052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009054:	f7fc fbf4 	bl	8005840 <HAL_GetTick>
 8009058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800905a:	e00a      	b.n	8009072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800905c:	f7fc fbf0 	bl	8005840 <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	f241 3288 	movw	r2, #5000	; 0x1388
 800906a:	4293      	cmp	r3, r2
 800906c:	d901      	bls.n	8009072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e04f      	b.n	8009112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009072:	4b2b      	ldr	r3, [pc, #172]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f003 020c 	and.w	r2, r3, #12
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	429a      	cmp	r2, r3
 8009082:	d1eb      	bne.n	800905c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009084:	4b25      	ldr	r3, [pc, #148]	; (800911c <HAL_RCC_ClockConfig+0x1b8>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0307 	and.w	r3, r3, #7
 800908c:	683a      	ldr	r2, [r7, #0]
 800908e:	429a      	cmp	r2, r3
 8009090:	d20c      	bcs.n	80090ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009092:	4b22      	ldr	r3, [pc, #136]	; (800911c <HAL_RCC_ClockConfig+0x1b8>)
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	b2d2      	uxtb	r2, r2
 8009098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800909a:	4b20      	ldr	r3, [pc, #128]	; (800911c <HAL_RCC_ClockConfig+0x1b8>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0307 	and.w	r3, r3, #7
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d001      	beq.n	80090ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e032      	b.n	8009112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0304 	and.w	r3, r3, #4
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d008      	beq.n	80090ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090b8:	4b19      	ldr	r3, [pc, #100]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	4916      	ldr	r1, [pc, #88]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0308 	and.w	r3, r3, #8
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d009      	beq.n	80090ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80090d6:	4b12      	ldr	r3, [pc, #72]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	490e      	ldr	r1, [pc, #56]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80090ea:	f000 f821 	bl	8009130 <HAL_RCC_GetSysClockFreq>
 80090ee:	4602      	mov	r2, r0
 80090f0:	4b0b      	ldr	r3, [pc, #44]	; (8009120 <HAL_RCC_ClockConfig+0x1bc>)
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	091b      	lsrs	r3, r3, #4
 80090f6:	f003 030f 	and.w	r3, r3, #15
 80090fa:	490a      	ldr	r1, [pc, #40]	; (8009124 <HAL_RCC_ClockConfig+0x1c0>)
 80090fc:	5ccb      	ldrb	r3, [r1, r3]
 80090fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009102:	4a09      	ldr	r2, [pc, #36]	; (8009128 <HAL_RCC_ClockConfig+0x1c4>)
 8009104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009106:	4b09      	ldr	r3, [pc, #36]	; (800912c <HAL_RCC_ClockConfig+0x1c8>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4618      	mov	r0, r3
 800910c:	f7fc fb54 	bl	80057b8 <HAL_InitTick>

  return HAL_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	40023c00 	.word	0x40023c00
 8009120:	40023800 	.word	0x40023800
 8009124:	08011f38 	.word	0x08011f38
 8009128:	20000018 	.word	0x20000018
 800912c:	2000001c 	.word	0x2000001c

08009130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009134:	b094      	sub	sp, #80	; 0x50
 8009136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009138:	2300      	movs	r3, #0
 800913a:	647b      	str	r3, [r7, #68]	; 0x44
 800913c:	2300      	movs	r3, #0
 800913e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009140:	2300      	movs	r3, #0
 8009142:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009144:	2300      	movs	r3, #0
 8009146:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009148:	4b79      	ldr	r3, [pc, #484]	; (8009330 <HAL_RCC_GetSysClockFreq+0x200>)
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f003 030c 	and.w	r3, r3, #12
 8009150:	2b08      	cmp	r3, #8
 8009152:	d00d      	beq.n	8009170 <HAL_RCC_GetSysClockFreq+0x40>
 8009154:	2b08      	cmp	r3, #8
 8009156:	f200 80e1 	bhi.w	800931c <HAL_RCC_GetSysClockFreq+0x1ec>
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <HAL_RCC_GetSysClockFreq+0x34>
 800915e:	2b04      	cmp	r3, #4
 8009160:	d003      	beq.n	800916a <HAL_RCC_GetSysClockFreq+0x3a>
 8009162:	e0db      	b.n	800931c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009164:	4b73      	ldr	r3, [pc, #460]	; (8009334 <HAL_RCC_GetSysClockFreq+0x204>)
 8009166:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009168:	e0db      	b.n	8009322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800916a:	4b73      	ldr	r3, [pc, #460]	; (8009338 <HAL_RCC_GetSysClockFreq+0x208>)
 800916c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800916e:	e0d8      	b.n	8009322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009170:	4b6f      	ldr	r3, [pc, #444]	; (8009330 <HAL_RCC_GetSysClockFreq+0x200>)
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009178:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800917a:	4b6d      	ldr	r3, [pc, #436]	; (8009330 <HAL_RCC_GetSysClockFreq+0x200>)
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d063      	beq.n	800924e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009186:	4b6a      	ldr	r3, [pc, #424]	; (8009330 <HAL_RCC_GetSysClockFreq+0x200>)
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	099b      	lsrs	r3, r3, #6
 800918c:	2200      	movs	r2, #0
 800918e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009190:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009198:	633b      	str	r3, [r7, #48]	; 0x30
 800919a:	2300      	movs	r3, #0
 800919c:	637b      	str	r3, [r7, #52]	; 0x34
 800919e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80091a2:	4622      	mov	r2, r4
 80091a4:	462b      	mov	r3, r5
 80091a6:	f04f 0000 	mov.w	r0, #0
 80091aa:	f04f 0100 	mov.w	r1, #0
 80091ae:	0159      	lsls	r1, r3, #5
 80091b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80091b4:	0150      	lsls	r0, r2, #5
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	4621      	mov	r1, r4
 80091bc:	1a51      	subs	r1, r2, r1
 80091be:	6139      	str	r1, [r7, #16]
 80091c0:	4629      	mov	r1, r5
 80091c2:	eb63 0301 	sbc.w	r3, r3, r1
 80091c6:	617b      	str	r3, [r7, #20]
 80091c8:	f04f 0200 	mov.w	r2, #0
 80091cc:	f04f 0300 	mov.w	r3, #0
 80091d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091d4:	4659      	mov	r1, fp
 80091d6:	018b      	lsls	r3, r1, #6
 80091d8:	4651      	mov	r1, sl
 80091da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80091de:	4651      	mov	r1, sl
 80091e0:	018a      	lsls	r2, r1, #6
 80091e2:	4651      	mov	r1, sl
 80091e4:	ebb2 0801 	subs.w	r8, r2, r1
 80091e8:	4659      	mov	r1, fp
 80091ea:	eb63 0901 	sbc.w	r9, r3, r1
 80091ee:	f04f 0200 	mov.w	r2, #0
 80091f2:	f04f 0300 	mov.w	r3, #0
 80091f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009202:	4690      	mov	r8, r2
 8009204:	4699      	mov	r9, r3
 8009206:	4623      	mov	r3, r4
 8009208:	eb18 0303 	adds.w	r3, r8, r3
 800920c:	60bb      	str	r3, [r7, #8]
 800920e:	462b      	mov	r3, r5
 8009210:	eb49 0303 	adc.w	r3, r9, r3
 8009214:	60fb      	str	r3, [r7, #12]
 8009216:	f04f 0200 	mov.w	r2, #0
 800921a:	f04f 0300 	mov.w	r3, #0
 800921e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009222:	4629      	mov	r1, r5
 8009224:	024b      	lsls	r3, r1, #9
 8009226:	4621      	mov	r1, r4
 8009228:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800922c:	4621      	mov	r1, r4
 800922e:	024a      	lsls	r2, r1, #9
 8009230:	4610      	mov	r0, r2
 8009232:	4619      	mov	r1, r3
 8009234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009236:	2200      	movs	r2, #0
 8009238:	62bb      	str	r3, [r7, #40]	; 0x28
 800923a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800923c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009240:	f7f7 fd0a 	bl	8000c58 <__aeabi_uldivmod>
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	4613      	mov	r3, r2
 800924a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800924c:	e058      	b.n	8009300 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800924e:	4b38      	ldr	r3, [pc, #224]	; (8009330 <HAL_RCC_GetSysClockFreq+0x200>)
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	099b      	lsrs	r3, r3, #6
 8009254:	2200      	movs	r2, #0
 8009256:	4618      	mov	r0, r3
 8009258:	4611      	mov	r1, r2
 800925a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800925e:	623b      	str	r3, [r7, #32]
 8009260:	2300      	movs	r3, #0
 8009262:	627b      	str	r3, [r7, #36]	; 0x24
 8009264:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009268:	4642      	mov	r2, r8
 800926a:	464b      	mov	r3, r9
 800926c:	f04f 0000 	mov.w	r0, #0
 8009270:	f04f 0100 	mov.w	r1, #0
 8009274:	0159      	lsls	r1, r3, #5
 8009276:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800927a:	0150      	lsls	r0, r2, #5
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4641      	mov	r1, r8
 8009282:	ebb2 0a01 	subs.w	sl, r2, r1
 8009286:	4649      	mov	r1, r9
 8009288:	eb63 0b01 	sbc.w	fp, r3, r1
 800928c:	f04f 0200 	mov.w	r2, #0
 8009290:	f04f 0300 	mov.w	r3, #0
 8009294:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009298:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800929c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80092a0:	ebb2 040a 	subs.w	r4, r2, sl
 80092a4:	eb63 050b 	sbc.w	r5, r3, fp
 80092a8:	f04f 0200 	mov.w	r2, #0
 80092ac:	f04f 0300 	mov.w	r3, #0
 80092b0:	00eb      	lsls	r3, r5, #3
 80092b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092b6:	00e2      	lsls	r2, r4, #3
 80092b8:	4614      	mov	r4, r2
 80092ba:	461d      	mov	r5, r3
 80092bc:	4643      	mov	r3, r8
 80092be:	18e3      	adds	r3, r4, r3
 80092c0:	603b      	str	r3, [r7, #0]
 80092c2:	464b      	mov	r3, r9
 80092c4:	eb45 0303 	adc.w	r3, r5, r3
 80092c8:	607b      	str	r3, [r7, #4]
 80092ca:	f04f 0200 	mov.w	r2, #0
 80092ce:	f04f 0300 	mov.w	r3, #0
 80092d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80092d6:	4629      	mov	r1, r5
 80092d8:	028b      	lsls	r3, r1, #10
 80092da:	4621      	mov	r1, r4
 80092dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80092e0:	4621      	mov	r1, r4
 80092e2:	028a      	lsls	r2, r1, #10
 80092e4:	4610      	mov	r0, r2
 80092e6:	4619      	mov	r1, r3
 80092e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092ea:	2200      	movs	r2, #0
 80092ec:	61bb      	str	r3, [r7, #24]
 80092ee:	61fa      	str	r2, [r7, #28]
 80092f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092f4:	f7f7 fcb0 	bl	8000c58 <__aeabi_uldivmod>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	4613      	mov	r3, r2
 80092fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009300:	4b0b      	ldr	r3, [pc, #44]	; (8009330 <HAL_RCC_GetSysClockFreq+0x200>)
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	0c1b      	lsrs	r3, r3, #16
 8009306:	f003 0303 	and.w	r3, r3, #3
 800930a:	3301      	adds	r3, #1
 800930c:	005b      	lsls	r3, r3, #1
 800930e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009310:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009314:	fbb2 f3f3 	udiv	r3, r2, r3
 8009318:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800931a:	e002      	b.n	8009322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800931c:	4b05      	ldr	r3, [pc, #20]	; (8009334 <HAL_RCC_GetSysClockFreq+0x204>)
 800931e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009324:	4618      	mov	r0, r3
 8009326:	3750      	adds	r7, #80	; 0x50
 8009328:	46bd      	mov	sp, r7
 800932a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800932e:	bf00      	nop
 8009330:	40023800 	.word	0x40023800
 8009334:	00f42400 	.word	0x00f42400
 8009338:	007a1200 	.word	0x007a1200

0800933c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800933c:	b480      	push	{r7}
 800933e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009340:	4b03      	ldr	r3, [pc, #12]	; (8009350 <HAL_RCC_GetHCLKFreq+0x14>)
 8009342:	681b      	ldr	r3, [r3, #0]
}
 8009344:	4618      	mov	r0, r3
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	20000018 	.word	0x20000018

08009354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009358:	f7ff fff0 	bl	800933c <HAL_RCC_GetHCLKFreq>
 800935c:	4602      	mov	r2, r0
 800935e:	4b05      	ldr	r3, [pc, #20]	; (8009374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	0a9b      	lsrs	r3, r3, #10
 8009364:	f003 0307 	and.w	r3, r3, #7
 8009368:	4903      	ldr	r1, [pc, #12]	; (8009378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800936a:	5ccb      	ldrb	r3, [r1, r3]
 800936c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009370:	4618      	mov	r0, r3
 8009372:	bd80      	pop	{r7, pc}
 8009374:	40023800 	.word	0x40023800
 8009378:	08011f48 	.word	0x08011f48

0800937c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009380:	f7ff ffdc 	bl	800933c <HAL_RCC_GetHCLKFreq>
 8009384:	4602      	mov	r2, r0
 8009386:	4b05      	ldr	r3, [pc, #20]	; (800939c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	0b5b      	lsrs	r3, r3, #13
 800938c:	f003 0307 	and.w	r3, r3, #7
 8009390:	4903      	ldr	r1, [pc, #12]	; (80093a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009392:	5ccb      	ldrb	r3, [r1, r3]
 8009394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009398:	4618      	mov	r0, r3
 800939a:	bd80      	pop	{r7, pc}
 800939c:	40023800 	.word	0x40023800
 80093a0:	08011f48 	.word	0x08011f48

080093a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80093b0:	2300      	movs	r3, #0
 80093b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0301 	and.w	r3, r3, #1
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d105      	bne.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d038      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80093cc:	4b68      	ldr	r3, [pc, #416]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80093ce:	2200      	movs	r2, #0
 80093d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80093d2:	f7fc fa35 	bl	8005840 <HAL_GetTick>
 80093d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80093d8:	e008      	b.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80093da:	f7fc fa31 	bl	8005840 <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d901      	bls.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e0bd      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80093ec:	4b61      	ldr	r3, [pc, #388]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1f0      	bne.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	019b      	lsls	r3, r3, #6
 8009402:	431a      	orrs	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	071b      	lsls	r3, r3, #28
 800940a:	495a      	ldr	r1, [pc, #360]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800940c:	4313      	orrs	r3, r2
 800940e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009412:	4b57      	ldr	r3, [pc, #348]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009414:	2201      	movs	r2, #1
 8009416:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009418:	f7fc fa12 	bl	8005840 <HAL_GetTick>
 800941c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800941e:	e008      	b.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009420:	f7fc fa0e 	bl	8005840 <HAL_GetTick>
 8009424:	4602      	mov	r2, r0
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	2b02      	cmp	r3, #2
 800942c:	d901      	bls.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	e09a      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009432:	4b50      	ldr	r3, [pc, #320]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0f0      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 0302 	and.w	r3, r3, #2
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 8083 	beq.w	8009552 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800944c:	2300      	movs	r3, #0
 800944e:	60fb      	str	r3, [r7, #12]
 8009450:	4b48      	ldr	r3, [pc, #288]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009454:	4a47      	ldr	r2, [pc, #284]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800945a:	6413      	str	r3, [r2, #64]	; 0x40
 800945c:	4b45      	ldr	r3, [pc, #276]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800945e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009468:	4b43      	ldr	r3, [pc, #268]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a42      	ldr	r2, [pc, #264]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800946e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009472:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009474:	f7fc f9e4 	bl	8005840 <HAL_GetTick>
 8009478:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800947a:	e008      	b.n	800948e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800947c:	f7fc f9e0 	bl	8005840 <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	2b02      	cmp	r3, #2
 8009488:	d901      	bls.n	800948e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e06c      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800948e:	4b3a      	ldr	r3, [pc, #232]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0f0      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800949a:	4b36      	ldr	r3, [pc, #216]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800949c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800949e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094a2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d02f      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094b2:	693a      	ldr	r2, [r7, #16]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d028      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80094b8:	4b2e      	ldr	r3, [pc, #184]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094c0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80094c2:	4b2e      	ldr	r3, [pc, #184]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80094c4:	2201      	movs	r2, #1
 80094c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80094c8:	4b2c      	ldr	r3, [pc, #176]	; (800957c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80094ce:	4a29      	ldr	r2, [pc, #164]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80094d4:	4b27      	ldr	r3, [pc, #156]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d114      	bne.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80094e0:	f7fc f9ae 	bl	8005840 <HAL_GetTick>
 80094e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094e6:	e00a      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094e8:	f7fc f9aa 	bl	8005840 <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d901      	bls.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e034      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094fe:	4b1d      	ldr	r3, [pc, #116]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009502:	f003 0302 	and.w	r3, r3, #2
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0ee      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009516:	d10d      	bne.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8009518:	4b16      	ldr	r3, [pc, #88]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800952c:	4911      	ldr	r1, [pc, #68]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800952e:	4313      	orrs	r3, r2
 8009530:	608b      	str	r3, [r1, #8]
 8009532:	e005      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8009534:	4b0f      	ldr	r3, [pc, #60]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	4a0e      	ldr	r2, [pc, #56]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800953a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800953e:	6093      	str	r3, [r2, #8]
 8009540:	4b0c      	ldr	r3, [pc, #48]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009542:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800954c:	4909      	ldr	r1, [pc, #36]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800954e:	4313      	orrs	r3, r2
 8009550:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0308 	and.w	r3, r3, #8
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	7d1a      	ldrb	r2, [r3, #20]
 8009562:	4b07      	ldr	r3, [pc, #28]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009564:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	42470068 	.word	0x42470068
 8009574:	40023800 	.word	0x40023800
 8009578:	40007000 	.word	0x40007000
 800957c:	42470e40 	.word	0x42470e40
 8009580:	424711e0 	.word	0x424711e0

08009584 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800958c:	2300      	movs	r3, #0
 800958e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8009590:	2300      	movs	r3, #0
 8009592:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009598:	2300      	movs	r3, #0
 800959a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d140      	bne.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80095a2:	4b24      	ldr	r3, [pc, #144]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095aa:	60fb      	str	r3, [r7, #12]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d005      	beq.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d131      	bne.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80095b8:	4b1f      	ldr	r3, [pc, #124]	; (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80095ba:	617b      	str	r3, [r7, #20]
          break;
 80095bc:	e031      	b.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80095be:	4b1d      	ldr	r3, [pc, #116]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095ca:	d109      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80095cc:	4b19      	ldr	r3, [pc, #100]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80095ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095d6:	4a19      	ldr	r2, [pc, #100]	; (800963c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80095d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80095dc:	613b      	str	r3, [r7, #16]
 80095de:	e008      	b.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80095e0:	4b14      	ldr	r3, [pc, #80]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80095e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095ea:	4a15      	ldr	r2, [pc, #84]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80095ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80095f0:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80095f2:	4b10      	ldr	r3, [pc, #64]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80095f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095f8:	099b      	lsrs	r3, r3, #6
 80095fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	fb02 f303 	mul.w	r3, r2, r3
 8009604:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8009606:	4b0b      	ldr	r3, [pc, #44]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800960c:	0f1b      	lsrs	r3, r3, #28
 800960e:	f003 0307 	and.w	r3, r3, #7
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	fbb2 f3f3 	udiv	r3, r2, r3
 8009618:	617b      	str	r3, [r7, #20]
          break;
 800961a:	e002      	b.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]
          break;
 8009620:	bf00      	nop
        }
      }
      break;
 8009622:	bf00      	nop
    }
  }
  return frequency;
 8009624:	697b      	ldr	r3, [r7, #20]
}
 8009626:	4618      	mov	r0, r3
 8009628:	371c      	adds	r7, #28
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	40023800 	.word	0x40023800
 8009638:	00bb8000 	.word	0x00bb8000
 800963c:	007a1200 	.word	0x007a1200
 8009640:	00f42400 	.word	0x00f42400

08009644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d101      	bne.n	8009656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e07b      	b.n	800974e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965a:	2b00      	cmp	r3, #0
 800965c:	d108      	bne.n	8009670 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009666:	d009      	beq.n	800967c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	61da      	str	r2, [r3, #28]
 800966e:	e005      	b.n	800967c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b00      	cmp	r3, #0
 800968c:	d106      	bne.n	800969c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7fb fd04 	bl	80050a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2202      	movs	r2, #2
 80096a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80096c4:	431a      	orrs	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096ce:	431a      	orrs	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	f003 0302 	and.w	r3, r3, #2
 80096d8:	431a      	orrs	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	431a      	orrs	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096ec:	431a      	orrs	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096f6:	431a      	orrs	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a1b      	ldr	r3, [r3, #32]
 80096fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009700:	ea42 0103 	orr.w	r1, r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009708:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	430a      	orrs	r2, r1
 8009712:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	0c1b      	lsrs	r3, r3, #16
 800971a:	f003 0104 	and.w	r1, r3, #4
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009722:	f003 0210 	and.w	r2, r3, #16
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	430a      	orrs	r2, r1
 800972c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	69da      	ldr	r2, [r3, #28]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800973c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b082      	sub	sp, #8
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e041      	b.n	80097ec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800976e:	b2db      	uxtb	r3, r3
 8009770:	2b00      	cmp	r3, #0
 8009772:	d106      	bne.n	8009782 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f7fb fcd9 	bl	8005134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2202      	movs	r2, #2
 8009786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	3304      	adds	r3, #4
 8009792:	4619      	mov	r1, r3
 8009794:	4610      	mov	r0, r2
 8009796:	f000 fc53 	bl	800a040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b01      	cmp	r3, #1
 8009806:	d001      	beq.n	800980c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e044      	b.n	8009896 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2202      	movs	r2, #2
 8009810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68da      	ldr	r2, [r3, #12]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f042 0201 	orr.w	r2, r2, #1
 8009822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a1e      	ldr	r2, [pc, #120]	; (80098a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d018      	beq.n	8009860 <HAL_TIM_Base_Start_IT+0x6c>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009836:	d013      	beq.n	8009860 <HAL_TIM_Base_Start_IT+0x6c>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a1a      	ldr	r2, [pc, #104]	; (80098a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d00e      	beq.n	8009860 <HAL_TIM_Base_Start_IT+0x6c>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a19      	ldr	r2, [pc, #100]	; (80098ac <HAL_TIM_Base_Start_IT+0xb8>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d009      	beq.n	8009860 <HAL_TIM_Base_Start_IT+0x6c>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a17      	ldr	r2, [pc, #92]	; (80098b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d004      	beq.n	8009860 <HAL_TIM_Base_Start_IT+0x6c>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a16      	ldr	r2, [pc, #88]	; (80098b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d111      	bne.n	8009884 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f003 0307 	and.w	r3, r3, #7
 800986a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2b06      	cmp	r3, #6
 8009870:	d010      	beq.n	8009894 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f042 0201 	orr.w	r2, r2, #1
 8009880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009882:	e007      	b.n	8009894 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f042 0201 	orr.w	r2, r2, #1
 8009892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	40010000 	.word	0x40010000
 80098a8:	40000400 	.word	0x40000400
 80098ac:	40000800 	.word	0x40000800
 80098b0:	40000c00 	.word	0x40000c00
 80098b4:	40014000 	.word	0x40014000

080098b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e041      	b.n	800994e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d106      	bne.n	80098e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f839 	bl	8009956 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2202      	movs	r2, #2
 80098e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	3304      	adds	r3, #4
 80098f4:	4619      	mov	r1, r3
 80098f6:	4610      	mov	r0, r2
 80098f8:	f000 fba2 	bl	800a040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009956:	b480      	push	{r7}
 8009958:	b083      	sub	sp, #12
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800995e:	bf00      	nop
 8009960:	370c      	adds	r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
	...

0800996c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d109      	bne.n	8009990 <HAL_TIM_PWM_Start+0x24>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009982:	b2db      	uxtb	r3, r3
 8009984:	2b01      	cmp	r3, #1
 8009986:	bf14      	ite	ne
 8009988:	2301      	movne	r3, #1
 800998a:	2300      	moveq	r3, #0
 800998c:	b2db      	uxtb	r3, r3
 800998e:	e022      	b.n	80099d6 <HAL_TIM_PWM_Start+0x6a>
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	2b04      	cmp	r3, #4
 8009994:	d109      	bne.n	80099aa <HAL_TIM_PWM_Start+0x3e>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800999c:	b2db      	uxtb	r3, r3
 800999e:	2b01      	cmp	r3, #1
 80099a0:	bf14      	ite	ne
 80099a2:	2301      	movne	r3, #1
 80099a4:	2300      	moveq	r3, #0
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	e015      	b.n	80099d6 <HAL_TIM_PWM_Start+0x6a>
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2b08      	cmp	r3, #8
 80099ae:	d109      	bne.n	80099c4 <HAL_TIM_PWM_Start+0x58>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	bf14      	ite	ne
 80099bc:	2301      	movne	r3, #1
 80099be:	2300      	moveq	r3, #0
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	e008      	b.n	80099d6 <HAL_TIM_PWM_Start+0x6a>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	bf14      	ite	ne
 80099d0:	2301      	movne	r3, #1
 80099d2:	2300      	moveq	r3, #0
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e068      	b.n	8009ab0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d104      	bne.n	80099ee <HAL_TIM_PWM_Start+0x82>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099ec:	e013      	b.n	8009a16 <HAL_TIM_PWM_Start+0xaa>
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2b04      	cmp	r3, #4
 80099f2:	d104      	bne.n	80099fe <HAL_TIM_PWM_Start+0x92>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2202      	movs	r2, #2
 80099f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099fc:	e00b      	b.n	8009a16 <HAL_TIM_PWM_Start+0xaa>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	2b08      	cmp	r3, #8
 8009a02:	d104      	bne.n	8009a0e <HAL_TIM_PWM_Start+0xa2>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2202      	movs	r2, #2
 8009a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a0c:	e003      	b.n	8009a16 <HAL_TIM_PWM_Start+0xaa>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2202      	movs	r2, #2
 8009a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	6839      	ldr	r1, [r7, #0]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 fdb4 	bl	800a58c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a23      	ldr	r2, [pc, #140]	; (8009ab8 <HAL_TIM_PWM_Start+0x14c>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d107      	bne.n	8009a3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a1d      	ldr	r2, [pc, #116]	; (8009ab8 <HAL_TIM_PWM_Start+0x14c>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d018      	beq.n	8009a7a <HAL_TIM_PWM_Start+0x10e>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a50:	d013      	beq.n	8009a7a <HAL_TIM_PWM_Start+0x10e>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a19      	ldr	r2, [pc, #100]	; (8009abc <HAL_TIM_PWM_Start+0x150>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d00e      	beq.n	8009a7a <HAL_TIM_PWM_Start+0x10e>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a17      	ldr	r2, [pc, #92]	; (8009ac0 <HAL_TIM_PWM_Start+0x154>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d009      	beq.n	8009a7a <HAL_TIM_PWM_Start+0x10e>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a16      	ldr	r2, [pc, #88]	; (8009ac4 <HAL_TIM_PWM_Start+0x158>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d004      	beq.n	8009a7a <HAL_TIM_PWM_Start+0x10e>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a14      	ldr	r2, [pc, #80]	; (8009ac8 <HAL_TIM_PWM_Start+0x15c>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d111      	bne.n	8009a9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	f003 0307 	and.w	r3, r3, #7
 8009a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2b06      	cmp	r3, #6
 8009a8a:	d010      	beq.n	8009aae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f042 0201 	orr.w	r2, r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a9c:	e007      	b.n	8009aae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f042 0201 	orr.w	r2, r2, #1
 8009aac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	40010000 	.word	0x40010000
 8009abc:	40000400 	.word	0x40000400
 8009ac0:	40000800 	.word	0x40000800
 8009ac4:	40000c00 	.word	0x40000c00
 8009ac8:	40014000 	.word	0x40014000

08009acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	f003 0302 	and.w	r3, r3, #2
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d122      	bne.n	8009b28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	f003 0302 	and.w	r3, r3, #2
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d11b      	bne.n	8009b28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f06f 0202 	mvn.w	r2, #2
 8009af8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2201      	movs	r2, #1
 8009afe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	f003 0303 	and.w	r3, r3, #3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fa77 	bl	800a002 <HAL_TIM_IC_CaptureCallback>
 8009b14:	e005      	b.n	8009b22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 fa69 	bl	8009fee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fa7a 	bl	800a016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	f003 0304 	and.w	r3, r3, #4
 8009b32:	2b04      	cmp	r3, #4
 8009b34:	d122      	bne.n	8009b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	f003 0304 	and.w	r3, r3, #4
 8009b40:	2b04      	cmp	r3, #4
 8009b42:	d11b      	bne.n	8009b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f06f 0204 	mvn.w	r2, #4
 8009b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2202      	movs	r2, #2
 8009b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d003      	beq.n	8009b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fa4d 	bl	800a002 <HAL_TIM_IC_CaptureCallback>
 8009b68:	e005      	b.n	8009b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fa3f 	bl	8009fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fa50 	bl	800a016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	f003 0308 	and.w	r3, r3, #8
 8009b86:	2b08      	cmp	r3, #8
 8009b88:	d122      	bne.n	8009bd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	f003 0308 	and.w	r3, r3, #8
 8009b94:	2b08      	cmp	r3, #8
 8009b96:	d11b      	bne.n	8009bd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f06f 0208 	mvn.w	r2, #8
 8009ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2204      	movs	r2, #4
 8009ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	69db      	ldr	r3, [r3, #28]
 8009bae:	f003 0303 	and.w	r3, r3, #3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fa23 	bl	800a002 <HAL_TIM_IC_CaptureCallback>
 8009bbc:	e005      	b.n	8009bca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fa15 	bl	8009fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fa26 	bl	800a016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	f003 0310 	and.w	r3, r3, #16
 8009bda:	2b10      	cmp	r3, #16
 8009bdc:	d122      	bne.n	8009c24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	f003 0310 	and.w	r3, r3, #16
 8009be8:	2b10      	cmp	r3, #16
 8009bea:	d11b      	bne.n	8009c24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f06f 0210 	mvn.w	r2, #16
 8009bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2208      	movs	r2, #8
 8009bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	69db      	ldr	r3, [r3, #28]
 8009c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d003      	beq.n	8009c12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f9f9 	bl	800a002 <HAL_TIM_IC_CaptureCallback>
 8009c10:	e005      	b.n	8009c1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f9eb 	bl	8009fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f9fc 	bl	800a016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d10e      	bne.n	8009c50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d107      	bne.n	8009c50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f06f 0201 	mvn.w	r2, #1
 8009c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7f7 fc54 	bl	80014f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c5a:	2b80      	cmp	r3, #128	; 0x80
 8009c5c:	d10e      	bne.n	8009c7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c68:	2b80      	cmp	r3, #128	; 0x80
 8009c6a:	d107      	bne.n	8009c7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fd26 	bl	800a6c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c86:	2b40      	cmp	r3, #64	; 0x40
 8009c88:	d10e      	bne.n	8009ca8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c94:	2b40      	cmp	r3, #64	; 0x40
 8009c96:	d107      	bne.n	8009ca8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f9c1 	bl	800a02a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	f003 0320 	and.w	r3, r3, #32
 8009cb2:	2b20      	cmp	r3, #32
 8009cb4:	d10e      	bne.n	8009cd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	f003 0320 	and.w	r3, r3, #32
 8009cc0:	2b20      	cmp	r3, #32
 8009cc2:	d107      	bne.n	8009cd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f06f 0220 	mvn.w	r2, #32
 8009ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fcf0 	bl	800a6b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cd4:	bf00      	nop
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d101      	bne.n	8009cfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	e0ae      	b.n	8009e58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b0c      	cmp	r3, #12
 8009d06:	f200 809f 	bhi.w	8009e48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009d0a:	a201      	add	r2, pc, #4	; (adr r2, 8009d10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d10:	08009d45 	.word	0x08009d45
 8009d14:	08009e49 	.word	0x08009e49
 8009d18:	08009e49 	.word	0x08009e49
 8009d1c:	08009e49 	.word	0x08009e49
 8009d20:	08009d85 	.word	0x08009d85
 8009d24:	08009e49 	.word	0x08009e49
 8009d28:	08009e49 	.word	0x08009e49
 8009d2c:	08009e49 	.word	0x08009e49
 8009d30:	08009dc7 	.word	0x08009dc7
 8009d34:	08009e49 	.word	0x08009e49
 8009d38:	08009e49 	.word	0x08009e49
 8009d3c:	08009e49 	.word	0x08009e49
 8009d40:	08009e07 	.word	0x08009e07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68b9      	ldr	r1, [r7, #8]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 f9f8 	bl	800a140 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	699a      	ldr	r2, [r3, #24]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f042 0208 	orr.w	r2, r2, #8
 8009d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	699a      	ldr	r2, [r3, #24]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f022 0204 	bic.w	r2, r2, #4
 8009d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6999      	ldr	r1, [r3, #24]
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	691a      	ldr	r2, [r3, #16]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	619a      	str	r2, [r3, #24]
      break;
 8009d82:	e064      	b.n	8009e4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68b9      	ldr	r1, [r7, #8]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f000 fa3e 	bl	800a20c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	699a      	ldr	r2, [r3, #24]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	699a      	ldr	r2, [r3, #24]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6999      	ldr	r1, [r3, #24]
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	021a      	lsls	r2, r3, #8
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	619a      	str	r2, [r3, #24]
      break;
 8009dc4:	e043      	b.n	8009e4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68b9      	ldr	r1, [r7, #8]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f000 fa89 	bl	800a2e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	69da      	ldr	r2, [r3, #28]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f042 0208 	orr.w	r2, r2, #8
 8009de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	69da      	ldr	r2, [r3, #28]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f022 0204 	bic.w	r2, r2, #4
 8009df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	69d9      	ldr	r1, [r3, #28]
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	691a      	ldr	r2, [r3, #16]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	430a      	orrs	r2, r1
 8009e02:	61da      	str	r2, [r3, #28]
      break;
 8009e04:	e023      	b.n	8009e4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68b9      	ldr	r1, [r7, #8]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 fad3 	bl	800a3b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	69da      	ldr	r2, [r3, #28]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	69da      	ldr	r2, [r3, #28]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69d9      	ldr	r1, [r3, #28]
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	021a      	lsls	r2, r3, #8
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	430a      	orrs	r2, r1
 8009e44:	61da      	str	r2, [r3, #28]
      break;
 8009e46:	e002      	b.n	8009e4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3718      	adds	r7, #24
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d101      	bne.n	8009e7c <HAL_TIM_ConfigClockSource+0x1c>
 8009e78:	2302      	movs	r3, #2
 8009e7a:	e0b4      	b.n	8009fe6 <HAL_TIM_ConfigClockSource+0x186>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2202      	movs	r2, #2
 8009e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ea2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eb4:	d03e      	beq.n	8009f34 <HAL_TIM_ConfigClockSource+0xd4>
 8009eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eba:	f200 8087 	bhi.w	8009fcc <HAL_TIM_ConfigClockSource+0x16c>
 8009ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ec2:	f000 8086 	beq.w	8009fd2 <HAL_TIM_ConfigClockSource+0x172>
 8009ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eca:	d87f      	bhi.n	8009fcc <HAL_TIM_ConfigClockSource+0x16c>
 8009ecc:	2b70      	cmp	r3, #112	; 0x70
 8009ece:	d01a      	beq.n	8009f06 <HAL_TIM_ConfigClockSource+0xa6>
 8009ed0:	2b70      	cmp	r3, #112	; 0x70
 8009ed2:	d87b      	bhi.n	8009fcc <HAL_TIM_ConfigClockSource+0x16c>
 8009ed4:	2b60      	cmp	r3, #96	; 0x60
 8009ed6:	d050      	beq.n	8009f7a <HAL_TIM_ConfigClockSource+0x11a>
 8009ed8:	2b60      	cmp	r3, #96	; 0x60
 8009eda:	d877      	bhi.n	8009fcc <HAL_TIM_ConfigClockSource+0x16c>
 8009edc:	2b50      	cmp	r3, #80	; 0x50
 8009ede:	d03c      	beq.n	8009f5a <HAL_TIM_ConfigClockSource+0xfa>
 8009ee0:	2b50      	cmp	r3, #80	; 0x50
 8009ee2:	d873      	bhi.n	8009fcc <HAL_TIM_ConfigClockSource+0x16c>
 8009ee4:	2b40      	cmp	r3, #64	; 0x40
 8009ee6:	d058      	beq.n	8009f9a <HAL_TIM_ConfigClockSource+0x13a>
 8009ee8:	2b40      	cmp	r3, #64	; 0x40
 8009eea:	d86f      	bhi.n	8009fcc <HAL_TIM_ConfigClockSource+0x16c>
 8009eec:	2b30      	cmp	r3, #48	; 0x30
 8009eee:	d064      	beq.n	8009fba <HAL_TIM_ConfigClockSource+0x15a>
 8009ef0:	2b30      	cmp	r3, #48	; 0x30
 8009ef2:	d86b      	bhi.n	8009fcc <HAL_TIM_ConfigClockSource+0x16c>
 8009ef4:	2b20      	cmp	r3, #32
 8009ef6:	d060      	beq.n	8009fba <HAL_TIM_ConfigClockSource+0x15a>
 8009ef8:	2b20      	cmp	r3, #32
 8009efa:	d867      	bhi.n	8009fcc <HAL_TIM_ConfigClockSource+0x16c>
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d05c      	beq.n	8009fba <HAL_TIM_ConfigClockSource+0x15a>
 8009f00:	2b10      	cmp	r3, #16
 8009f02:	d05a      	beq.n	8009fba <HAL_TIM_ConfigClockSource+0x15a>
 8009f04:	e062      	b.n	8009fcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6818      	ldr	r0, [r3, #0]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	6899      	ldr	r1, [r3, #8]
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	685a      	ldr	r2, [r3, #4]
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	f000 fb19 	bl	800a54c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	609a      	str	r2, [r3, #8]
      break;
 8009f32:	e04f      	b.n	8009fd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6818      	ldr	r0, [r3, #0]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	6899      	ldr	r1, [r3, #8]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	685a      	ldr	r2, [r3, #4]
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	f000 fb02 	bl	800a54c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	689a      	ldr	r2, [r3, #8]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f56:	609a      	str	r2, [r3, #8]
      break;
 8009f58:	e03c      	b.n	8009fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6818      	ldr	r0, [r3, #0]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	6859      	ldr	r1, [r3, #4]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	461a      	mov	r2, r3
 8009f68:	f000 fa76 	bl	800a458 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2150      	movs	r1, #80	; 0x50
 8009f72:	4618      	mov	r0, r3
 8009f74:	f000 facf 	bl	800a516 <TIM_ITRx_SetConfig>
      break;
 8009f78:	e02c      	b.n	8009fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6818      	ldr	r0, [r3, #0]
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	6859      	ldr	r1, [r3, #4]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	461a      	mov	r2, r3
 8009f88:	f000 fa95 	bl	800a4b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2160      	movs	r1, #96	; 0x60
 8009f92:	4618      	mov	r0, r3
 8009f94:	f000 fabf 	bl	800a516 <TIM_ITRx_SetConfig>
      break;
 8009f98:	e01c      	b.n	8009fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6818      	ldr	r0, [r3, #0]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	6859      	ldr	r1, [r3, #4]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	f000 fa56 	bl	800a458 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2140      	movs	r1, #64	; 0x40
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f000 faaf 	bl	800a516 <TIM_ITRx_SetConfig>
      break;
 8009fb8:	e00c      	b.n	8009fd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	f000 faa6 	bl	800a516 <TIM_ITRx_SetConfig>
      break;
 8009fca:	e003      	b.n	8009fd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	73fb      	strb	r3, [r7, #15]
      break;
 8009fd0:	e000      	b.n	8009fd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009fd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b083      	sub	sp, #12
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ff6:	bf00      	nop
 8009ff8:	370c      	adds	r7, #12
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a002:	b480      	push	{r7}
 800a004:	b083      	sub	sp, #12
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a00a:	bf00      	nop
 800a00c:	370c      	adds	r7, #12
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr

0800a016 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a016:	b480      	push	{r7}
 800a018:	b083      	sub	sp, #12
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a01e:	bf00      	nop
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b083      	sub	sp, #12
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a032:	bf00      	nop
 800a034:	370c      	adds	r7, #12
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
	...

0800a040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a34      	ldr	r2, [pc, #208]	; (800a124 <TIM_Base_SetConfig+0xe4>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d00f      	beq.n	800a078 <TIM_Base_SetConfig+0x38>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a05e:	d00b      	beq.n	800a078 <TIM_Base_SetConfig+0x38>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a31      	ldr	r2, [pc, #196]	; (800a128 <TIM_Base_SetConfig+0xe8>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d007      	beq.n	800a078 <TIM_Base_SetConfig+0x38>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a30      	ldr	r2, [pc, #192]	; (800a12c <TIM_Base_SetConfig+0xec>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d003      	beq.n	800a078 <TIM_Base_SetConfig+0x38>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a2f      	ldr	r2, [pc, #188]	; (800a130 <TIM_Base_SetConfig+0xf0>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d108      	bne.n	800a08a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a07e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	4313      	orrs	r3, r2
 800a088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a25      	ldr	r2, [pc, #148]	; (800a124 <TIM_Base_SetConfig+0xe4>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d01b      	beq.n	800a0ca <TIM_Base_SetConfig+0x8a>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a098:	d017      	beq.n	800a0ca <TIM_Base_SetConfig+0x8a>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a22      	ldr	r2, [pc, #136]	; (800a128 <TIM_Base_SetConfig+0xe8>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d013      	beq.n	800a0ca <TIM_Base_SetConfig+0x8a>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a21      	ldr	r2, [pc, #132]	; (800a12c <TIM_Base_SetConfig+0xec>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d00f      	beq.n	800a0ca <TIM_Base_SetConfig+0x8a>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a20      	ldr	r2, [pc, #128]	; (800a130 <TIM_Base_SetConfig+0xf0>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d00b      	beq.n	800a0ca <TIM_Base_SetConfig+0x8a>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a1f      	ldr	r2, [pc, #124]	; (800a134 <TIM_Base_SetConfig+0xf4>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d007      	beq.n	800a0ca <TIM_Base_SetConfig+0x8a>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a1e      	ldr	r2, [pc, #120]	; (800a138 <TIM_Base_SetConfig+0xf8>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d003      	beq.n	800a0ca <TIM_Base_SetConfig+0x8a>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a1d      	ldr	r2, [pc, #116]	; (800a13c <TIM_Base_SetConfig+0xfc>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d108      	bne.n	800a0dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	695b      	ldr	r3, [r3, #20]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	689a      	ldr	r2, [r3, #8]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a08      	ldr	r2, [pc, #32]	; (800a124 <TIM_Base_SetConfig+0xe4>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d103      	bne.n	800a110 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	691a      	ldr	r2, [r3, #16]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	615a      	str	r2, [r3, #20]
}
 800a116:	bf00      	nop
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	40010000 	.word	0x40010000
 800a128:	40000400 	.word	0x40000400
 800a12c:	40000800 	.word	0x40000800
 800a130:	40000c00 	.word	0x40000c00
 800a134:	40014000 	.word	0x40014000
 800a138:	40014400 	.word	0x40014400
 800a13c:	40014800 	.word	0x40014800

0800a140 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	f023 0201 	bic.w	r2, r3, #1
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a16e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f023 0303 	bic.w	r3, r3, #3
 800a176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	4313      	orrs	r3, r2
 800a180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f023 0302 	bic.w	r3, r3, #2
 800a188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	4313      	orrs	r3, r2
 800a192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a1c      	ldr	r2, [pc, #112]	; (800a208 <TIM_OC1_SetConfig+0xc8>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d10c      	bne.n	800a1b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	f023 0308 	bic.w	r3, r3, #8
 800a1a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	f023 0304 	bic.w	r3, r3, #4
 800a1b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a13      	ldr	r2, [pc, #76]	; (800a208 <TIM_OC1_SetConfig+0xc8>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d111      	bne.n	800a1e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	695b      	ldr	r3, [r3, #20]
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	697a      	ldr	r2, [r7, #20]
 800a1fa:	621a      	str	r2, [r3, #32]
}
 800a1fc:	bf00      	nop
 800a1fe:	371c      	adds	r7, #28
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	40010000 	.word	0x40010000

0800a20c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a1b      	ldr	r3, [r3, #32]
 800a21a:	f023 0210 	bic.w	r2, r3, #16
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a23a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	021b      	lsls	r3, r3, #8
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	f023 0320 	bic.w	r3, r3, #32
 800a256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	011b      	lsls	r3, r3, #4
 800a25e:	697a      	ldr	r2, [r7, #20]
 800a260:	4313      	orrs	r3, r2
 800a262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a1e      	ldr	r2, [pc, #120]	; (800a2e0 <TIM_OC2_SetConfig+0xd4>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d10d      	bne.n	800a288 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	011b      	lsls	r3, r3, #4
 800a27a:	697a      	ldr	r2, [r7, #20]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a286:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a15      	ldr	r2, [pc, #84]	; (800a2e0 <TIM_OC2_SetConfig+0xd4>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d113      	bne.n	800a2b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a296:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a29e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	685a      	ldr	r2, [r3, #4]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	621a      	str	r2, [r3, #32]
}
 800a2d2:	bf00      	nop
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	40010000 	.word	0x40010000

0800a2e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b087      	sub	sp, #28
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a1b      	ldr	r3, [r3, #32]
 800a2f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	69db      	ldr	r3, [r3, #28]
 800a30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f023 0303 	bic.w	r3, r3, #3
 800a31a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	4313      	orrs	r3, r2
 800a324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a32c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	021b      	lsls	r3, r3, #8
 800a334:	697a      	ldr	r2, [r7, #20]
 800a336:	4313      	orrs	r3, r2
 800a338:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a1d      	ldr	r2, [pc, #116]	; (800a3b4 <TIM_OC3_SetConfig+0xd0>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d10d      	bne.n	800a35e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a348:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	021b      	lsls	r3, r3, #8
 800a350:	697a      	ldr	r2, [r7, #20]
 800a352:	4313      	orrs	r3, r2
 800a354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a35c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4a14      	ldr	r2, [pc, #80]	; (800a3b4 <TIM_OC3_SetConfig+0xd0>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d113      	bne.n	800a38e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a36c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	011b      	lsls	r3, r3, #4
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	4313      	orrs	r3, r2
 800a380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	699b      	ldr	r3, [r3, #24]
 800a386:	011b      	lsls	r3, r3, #4
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	621a      	str	r2, [r3, #32]
}
 800a3a8:	bf00      	nop
 800a3aa:	371c      	adds	r7, #28
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr
 800a3b4:	40010000 	.word	0x40010000

0800a3b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a1b      	ldr	r3, [r3, #32]
 800a3c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	021b      	lsls	r3, r3, #8
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	031b      	lsls	r3, r3, #12
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a10      	ldr	r2, [pc, #64]	; (800a454 <TIM_OC4_SetConfig+0x9c>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d109      	bne.n	800a42c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a41e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	695b      	ldr	r3, [r3, #20]
 800a424:	019b      	lsls	r3, r3, #6
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	4313      	orrs	r3, r2
 800a42a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	621a      	str	r2, [r3, #32]
}
 800a446:	bf00      	nop
 800a448:	371c      	adds	r7, #28
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	40010000 	.word	0x40010000

0800a458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a458:	b480      	push	{r7}
 800a45a:	b087      	sub	sp, #28
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6a1b      	ldr	r3, [r3, #32]
 800a468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6a1b      	ldr	r3, [r3, #32]
 800a46e:	f023 0201 	bic.w	r2, r3, #1
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	011b      	lsls	r3, r3, #4
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f023 030a 	bic.w	r3, r3, #10
 800a494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	621a      	str	r2, [r3, #32]
}
 800a4aa:	bf00      	nop
 800a4ac:	371c      	adds	r7, #28
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b087      	sub	sp, #28
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	60f8      	str	r0, [r7, #12]
 800a4be:	60b9      	str	r1, [r7, #8]
 800a4c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	f023 0210 	bic.w	r2, r3, #16
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6a1b      	ldr	r3, [r3, #32]
 800a4d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	031b      	lsls	r3, r3, #12
 800a4e6:	697a      	ldr	r2, [r7, #20]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a4f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	011b      	lsls	r3, r3, #4
 800a4f8:	693a      	ldr	r2, [r7, #16]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	621a      	str	r2, [r3, #32]
}
 800a50a:	bf00      	nop
 800a50c:	371c      	adds	r7, #28
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a516:	b480      	push	{r7}
 800a518:	b085      	sub	sp, #20
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a52c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	4313      	orrs	r3, r2
 800a534:	f043 0307 	orr.w	r3, r3, #7
 800a538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	609a      	str	r2, [r3, #8]
}
 800a540:	bf00      	nop
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b087      	sub	sp, #28
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
 800a558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	021a      	lsls	r2, r3, #8
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	431a      	orrs	r2, r3
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	4313      	orrs	r3, r2
 800a574:	697a      	ldr	r2, [r7, #20]
 800a576:	4313      	orrs	r3, r2
 800a578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	609a      	str	r2, [r3, #8]
}
 800a580:	bf00      	nop
 800a582:	371c      	adds	r7, #28
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b087      	sub	sp, #28
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	f003 031f 	and.w	r3, r3, #31
 800a59e:	2201      	movs	r2, #1
 800a5a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6a1a      	ldr	r2, [r3, #32]
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	43db      	mvns	r3, r3
 800a5ae:	401a      	ands	r2, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6a1a      	ldr	r2, [r3, #32]
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	f003 031f 	and.w	r3, r3, #31
 800a5be:	6879      	ldr	r1, [r7, #4]
 800a5c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5c4:	431a      	orrs	r2, r3
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	621a      	str	r2, [r3, #32]
}
 800a5ca:	bf00      	nop
 800a5cc:	371c      	adds	r7, #28
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
	...

0800a5d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d101      	bne.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	e050      	b.n	800a692 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2202      	movs	r2, #2
 800a5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	4313      	orrs	r3, r2
 800a620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a1c      	ldr	r2, [pc, #112]	; (800a6a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d018      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a63c:	d013      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a18      	ldr	r2, [pc, #96]	; (800a6a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d00e      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a16      	ldr	r2, [pc, #88]	; (800a6a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d009      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a15      	ldr	r2, [pc, #84]	; (800a6ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d004      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a13      	ldr	r2, [pc, #76]	; (800a6b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d10c      	bne.n	800a680 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a66c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	4313      	orrs	r3, r2
 800a676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3714      	adds	r7, #20
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	40010000 	.word	0x40010000
 800a6a4:	40000400 	.word	0x40000400
 800a6a8:	40000800 	.word	0x40000800
 800a6ac:	40000c00 	.word	0x40000c00
 800a6b0:	40014000 	.word	0x40014000

0800a6b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d101      	bne.n	800a6ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e03f      	b.n	800a76e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d106      	bne.n	800a708 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7fa fdb4 	bl	8005270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2224      	movs	r2, #36	; 0x24
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68da      	ldr	r2, [r3, #12]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a71e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 ff43 	bl	800b5ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	691a      	ldr	r2, [r3, #16]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a734:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	695a      	ldr	r2, [r3, #20]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a744:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68da      	ldr	r2, [r3, #12]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a754:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2220      	movs	r2, #32
 800a760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2220      	movs	r2, #32
 800a768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
	...

0800a778 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b08c      	sub	sp, #48	; 0x30
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	4613      	mov	r3, r2
 800a784:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	2b20      	cmp	r3, #32
 800a790:	d165      	bne.n	800a85e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d002      	beq.n	800a79e <HAL_UART_Transmit_DMA+0x26>
 800a798:	88fb      	ldrh	r3, [r7, #6]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e05e      	b.n	800a860 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d101      	bne.n	800a7b0 <HAL_UART_Transmit_DMA+0x38>
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	e057      	b.n	800a860 <HAL_UART_Transmit_DMA+0xe8>
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a7b8:	68ba      	ldr	r2, [r7, #8]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	88fa      	ldrh	r2, [r7, #6]
 800a7c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	88fa      	ldrh	r2, [r7, #6]
 800a7c8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2221      	movs	r2, #33	; 0x21
 800a7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7dc:	4a22      	ldr	r2, [pc, #136]	; (800a868 <HAL_UART_Transmit_DMA+0xf0>)
 800a7de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e4:	4a21      	ldr	r2, [pc, #132]	; (800a86c <HAL_UART_Transmit_DMA+0xf4>)
 800a7e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ec:	4a20      	ldr	r2, [pc, #128]	; (800a870 <HAL_UART_Transmit_DMA+0xf8>)
 800a7ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a7f8:	f107 0308 	add.w	r3, r7, #8
 800a7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a804:	6819      	ldr	r1, [r3, #0]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3304      	adds	r3, #4
 800a80c:	461a      	mov	r2, r3
 800a80e:	88fb      	ldrh	r3, [r7, #6]
 800a810:	f7fb fa06 	bl	8005c20 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a81c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	3314      	adds	r3, #20
 800a82c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	e853 3f00 	ldrex	r3, [r3]
 800a834:	617b      	str	r3, [r7, #20]
   return(result);
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a83c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	3314      	adds	r3, #20
 800a844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a846:	627a      	str	r2, [r7, #36]	; 0x24
 800a848:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84a:	6a39      	ldr	r1, [r7, #32]
 800a84c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a84e:	e841 2300 	strex	r3, r2, [r1]
 800a852:	61fb      	str	r3, [r7, #28]
   return(result);
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1e5      	bne.n	800a826 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	e000      	b.n	800a860 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a85e:	2302      	movs	r3, #2
  }
}
 800a860:	4618      	mov	r0, r3
 800a862:	3730      	adds	r7, #48	; 0x30
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	0800ae45 	.word	0x0800ae45
 800a86c:	0800aedf 	.word	0x0800aedf
 800a870:	0800b057 	.word	0x0800b057

0800a874 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	4613      	mov	r3, r2
 800a880:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b20      	cmp	r3, #32
 800a88c:	d11d      	bne.n	800a8ca <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <HAL_UART_Receive_DMA+0x26>
 800a894:	88fb      	ldrh	r3, [r7, #6]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d101      	bne.n	800a89e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	e016      	b.n	800a8cc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d101      	bne.n	800a8ac <HAL_UART_Receive_DMA+0x38>
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	e00f      	b.n	800a8cc <HAL_UART_Receive_DMA+0x58>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a8ba:	88fb      	ldrh	r3, [r7, #6]
 800a8bc:	461a      	mov	r2, r3
 800a8be:	68b9      	ldr	r1, [r7, #8]
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f000 fc13 	bl	800b0ec <UART_Start_Receive_DMA>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	e000      	b.n	800a8cc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a8ca:	2302      	movs	r3, #2
  }
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b0ba      	sub	sp, #232	; 0xe8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a900:	2300      	movs	r3, #0
 800a902:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a90a:	f003 030f 	and.w	r3, r3, #15
 800a90e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10f      	bne.n	800a93a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a91a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a91e:	f003 0320 	and.w	r3, r3, #32
 800a922:	2b00      	cmp	r3, #0
 800a924:	d009      	beq.n	800a93a <HAL_UART_IRQHandler+0x66>
 800a926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a92a:	f003 0320 	and.w	r3, r3, #32
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d003      	beq.n	800a93a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fd7f 	bl	800b436 <UART_Receive_IT>
      return;
 800a938:	e256      	b.n	800ade8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a93a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f000 80de 	beq.w	800ab00 <HAL_UART_IRQHandler+0x22c>
 800a944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a948:	f003 0301 	and.w	r3, r3, #1
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d106      	bne.n	800a95e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a954:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 80d1 	beq.w	800ab00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a95e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00b      	beq.n	800a982 <HAL_UART_IRQHandler+0xae>
 800a96a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a96e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a972:	2b00      	cmp	r3, #0
 800a974:	d005      	beq.n	800a982 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97a:	f043 0201 	orr.w	r2, r3, #1
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a986:	f003 0304 	and.w	r3, r3, #4
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00b      	beq.n	800a9a6 <HAL_UART_IRQHandler+0xd2>
 800a98e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	2b00      	cmp	r3, #0
 800a998:	d005      	beq.n	800a9a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99e:	f043 0202 	orr.w	r2, r3, #2
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a9a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9aa:	f003 0302 	and.w	r3, r3, #2
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00b      	beq.n	800a9ca <HAL_UART_IRQHandler+0xf6>
 800a9b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9b6:	f003 0301 	and.w	r3, r3, #1
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d005      	beq.n	800a9ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c2:	f043 0204 	orr.w	r2, r3, #4
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a9ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ce:	f003 0308 	and.w	r3, r3, #8
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d011      	beq.n	800a9fa <HAL_UART_IRQHandler+0x126>
 800a9d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9da:	f003 0320 	and.w	r3, r3, #32
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d105      	bne.n	800a9ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a9e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9e6:	f003 0301 	and.w	r3, r3, #1
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d005      	beq.n	800a9fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f2:	f043 0208 	orr.w	r2, r3, #8
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 81ed 	beq.w	800adde <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aa04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa08:	f003 0320 	and.w	r3, r3, #32
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d008      	beq.n	800aa22 <HAL_UART_IRQHandler+0x14e>
 800aa10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa14:	f003 0320 	and.w	r3, r3, #32
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d002      	beq.n	800aa22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fd0a 	bl	800b436 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	695b      	ldr	r3, [r3, #20]
 800aa28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa2c:	2b40      	cmp	r3, #64	; 0x40
 800aa2e:	bf0c      	ite	eq
 800aa30:	2301      	moveq	r3, #1
 800aa32:	2300      	movne	r3, #0
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3e:	f003 0308 	and.w	r3, r3, #8
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d103      	bne.n	800aa4e <HAL_UART_IRQHandler+0x17a>
 800aa46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d04f      	beq.n	800aaee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 fc12 	bl	800b278 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5e:	2b40      	cmp	r3, #64	; 0x40
 800aa60:	d141      	bne.n	800aae6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3314      	adds	r3, #20
 800aa68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa70:	e853 3f00 	ldrex	r3, [r3]
 800aa74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aa78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	3314      	adds	r3, #20
 800aa8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800aa8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aa92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800aa9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aa9e:	e841 2300 	strex	r3, r2, [r1]
 800aaa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800aaa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1d9      	bne.n	800aa62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d013      	beq.n	800aade <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaba:	4a7d      	ldr	r2, [pc, #500]	; (800acb0 <HAL_UART_IRQHandler+0x3dc>)
 800aabc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fb f974 	bl	8005db0 <HAL_DMA_Abort_IT>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d016      	beq.n	800aafc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aad8:	4610      	mov	r0, r2
 800aada:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aadc:	e00e      	b.n	800aafc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 f99a 	bl	800ae18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aae4:	e00a      	b.n	800aafc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f996 	bl	800ae18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaec:	e006      	b.n	800aafc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f992 	bl	800ae18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800aafa:	e170      	b.n	800adde <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aafc:	bf00      	nop
    return;
 800aafe:	e16e      	b.n	800adde <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	f040 814a 	bne.w	800ad9e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ab0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab0e:	f003 0310 	and.w	r3, r3, #16
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f000 8143 	beq.w	800ad9e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ab18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab1c:	f003 0310 	and.w	r3, r3, #16
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 813c 	beq.w	800ad9e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ab26:	2300      	movs	r3, #0
 800ab28:	60bb      	str	r3, [r7, #8]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	60bb      	str	r3, [r7, #8]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	60bb      	str	r3, [r7, #8]
 800ab3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab46:	2b40      	cmp	r3, #64	; 0x40
 800ab48:	f040 80b4 	bne.w	800acb4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ab58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f000 8140 	beq.w	800ade2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ab66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	f080 8139 	bcs.w	800ade2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7c:	69db      	ldr	r3, [r3, #28]
 800ab7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab82:	f000 8088 	beq.w	800ac96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	330c      	adds	r3, #12
 800ab8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab94:	e853 3f00 	ldrex	r3, [r3]
 800ab98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ab9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aba4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	330c      	adds	r3, #12
 800abae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800abb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800abb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800abbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800abc2:	e841 2300 	strex	r3, r2, [r1]
 800abc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800abca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1d9      	bne.n	800ab86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	3314      	adds	r3, #20
 800abd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abdc:	e853 3f00 	ldrex	r3, [r3]
 800abe0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800abe2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800abe4:	f023 0301 	bic.w	r3, r3, #1
 800abe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	3314      	adds	r3, #20
 800abf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800abf6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800abfa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800abfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ac02:	e841 2300 	strex	r3, r2, [r1]
 800ac06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ac08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1e1      	bne.n	800abd2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	3314      	adds	r3, #20
 800ac14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac18:	e853 3f00 	ldrex	r3, [r3]
 800ac1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ac1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	3314      	adds	r3, #20
 800ac2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ac32:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ac34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ac38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac3a:	e841 2300 	strex	r3, r2, [r1]
 800ac3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ac40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1e3      	bne.n	800ac0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2220      	movs	r2, #32
 800ac4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	330c      	adds	r3, #12
 800ac5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac5e:	e853 3f00 	ldrex	r3, [r3]
 800ac62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac66:	f023 0310 	bic.w	r3, r3, #16
 800ac6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	330c      	adds	r3, #12
 800ac74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ac78:	65ba      	str	r2, [r7, #88]	; 0x58
 800ac7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac80:	e841 2300 	strex	r3, r2, [r1]
 800ac84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1e3      	bne.n	800ac54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7fb f81d 	bl	8005cd0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	1ad3      	subs	r3, r2, r3
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	4619      	mov	r1, r3
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 f8c0 	bl	800ae2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800acac:	e099      	b.n	800ade2 <HAL_UART_IRQHandler+0x50e>
 800acae:	bf00      	nop
 800acb0:	0800b33f 	.word	0x0800b33f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800acc8:	b29b      	uxth	r3, r3
 800acca:	2b00      	cmp	r3, #0
 800accc:	f000 808b 	beq.w	800ade6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800acd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 8086 	beq.w	800ade6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	330c      	adds	r3, #12
 800ace0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace4:	e853 3f00 	ldrex	r3, [r3]
 800ace8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800acea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800acf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	330c      	adds	r3, #12
 800acfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800acfe:	647a      	str	r2, [r7, #68]	; 0x44
 800ad00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad06:	e841 2300 	strex	r3, r2, [r1]
 800ad0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1e3      	bne.n	800acda <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	3314      	adds	r3, #20
 800ad18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1c:	e853 3f00 	ldrex	r3, [r3]
 800ad20:	623b      	str	r3, [r7, #32]
   return(result);
 800ad22:	6a3b      	ldr	r3, [r7, #32]
 800ad24:	f023 0301 	bic.w	r3, r3, #1
 800ad28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	3314      	adds	r3, #20
 800ad32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ad36:	633a      	str	r2, [r7, #48]	; 0x30
 800ad38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad3e:	e841 2300 	strex	r3, r2, [r1]
 800ad42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1e3      	bne.n	800ad12 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2220      	movs	r2, #32
 800ad4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	330c      	adds	r3, #12
 800ad5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	e853 3f00 	ldrex	r3, [r3]
 800ad66:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f023 0310 	bic.w	r3, r3, #16
 800ad6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	330c      	adds	r3, #12
 800ad78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ad7c:	61fa      	str	r2, [r7, #28]
 800ad7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad80:	69b9      	ldr	r1, [r7, #24]
 800ad82:	69fa      	ldr	r2, [r7, #28]
 800ad84:	e841 2300 	strex	r3, r2, [r1]
 800ad88:	617b      	str	r3, [r7, #20]
   return(result);
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1e3      	bne.n	800ad58 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ad90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad94:	4619      	mov	r1, r3
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 f848 	bl	800ae2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ad9c:	e023      	b.n	800ade6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ad9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d009      	beq.n	800adbe <HAL_UART_IRQHandler+0x4ea>
 800adaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d003      	beq.n	800adbe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fad5 	bl	800b366 <UART_Transmit_IT>
    return;
 800adbc:	e014      	b.n	800ade8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800adbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00e      	beq.n	800ade8 <HAL_UART_IRQHandler+0x514>
 800adca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800add2:	2b00      	cmp	r3, #0
 800add4:	d008      	beq.n	800ade8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fb15 	bl	800b406 <UART_EndTransmit_IT>
    return;
 800addc:	e004      	b.n	800ade8 <HAL_UART_IRQHandler+0x514>
    return;
 800adde:	bf00      	nop
 800ade0:	e002      	b.n	800ade8 <HAL_UART_IRQHandler+0x514>
      return;
 800ade2:	bf00      	nop
 800ade4:	e000      	b.n	800ade8 <HAL_UART_IRQHandler+0x514>
      return;
 800ade6:	bf00      	nop
  }
}
 800ade8:	37e8      	adds	r7, #232	; 0xe8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop

0800adf0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800adf8:	bf00      	nop
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ae0c:	bf00      	nop
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ae20:	bf00      	nop
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	460b      	mov	r3, r1
 800ae36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b090      	sub	sp, #64	; 0x40
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae50:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d137      	bne.n	800aed0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ae60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae62:	2200      	movs	r2, #0
 800ae64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	3314      	adds	r3, #20
 800ae6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae70:	e853 3f00 	ldrex	r3, [r3]
 800ae74:	623b      	str	r3, [r7, #32]
   return(result);
 800ae76:	6a3b      	ldr	r3, [r7, #32]
 800ae78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae7c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	3314      	adds	r3, #20
 800ae84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae86:	633a      	str	r2, [r7, #48]	; 0x30
 800ae88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae8e:	e841 2300 	strex	r3, r2, [r1]
 800ae92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1e5      	bne.n	800ae66 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	330c      	adds	r3, #12
 800aea0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	e853 3f00 	ldrex	r3, [r3]
 800aea8:	60fb      	str	r3, [r7, #12]
   return(result);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeb0:	637b      	str	r3, [r7, #52]	; 0x34
 800aeb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	330c      	adds	r3, #12
 800aeb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aeba:	61fa      	str	r2, [r7, #28]
 800aebc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebe:	69b9      	ldr	r1, [r7, #24]
 800aec0:	69fa      	ldr	r2, [r7, #28]
 800aec2:	e841 2300 	strex	r3, r2, [r1]
 800aec6:	617b      	str	r3, [r7, #20]
   return(result);
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1e5      	bne.n	800ae9a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aece:	e002      	b.n	800aed6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800aed0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aed2:	f7f9 f8cd 	bl	8004070 <HAL_UART_TxCpltCallback>
}
 800aed6:	bf00      	nop
 800aed8:	3740      	adds	r7, #64	; 0x40
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b084      	sub	sp, #16
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f7ff ff7f 	bl	800adf0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aef2:	bf00      	nop
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b09c      	sub	sp, #112	; 0x70
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af06:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af12:	2b00      	cmp	r3, #0
 800af14:	d172      	bne.n	800affc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800af16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af18:	2200      	movs	r2, #0
 800af1a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	330c      	adds	r3, #12
 800af22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af26:	e853 3f00 	ldrex	r3, [r3]
 800af2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af32:	66bb      	str	r3, [r7, #104]	; 0x68
 800af34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	330c      	adds	r3, #12
 800af3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af3c:	65ba      	str	r2, [r7, #88]	; 0x58
 800af3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af44:	e841 2300 	strex	r3, r2, [r1]
 800af48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1e5      	bne.n	800af1c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	3314      	adds	r3, #20
 800af56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5a:	e853 3f00 	ldrex	r3, [r3]
 800af5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af62:	f023 0301 	bic.w	r3, r3, #1
 800af66:	667b      	str	r3, [r7, #100]	; 0x64
 800af68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	3314      	adds	r3, #20
 800af6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800af70:	647a      	str	r2, [r7, #68]	; 0x44
 800af72:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af78:	e841 2300 	strex	r3, r2, [r1]
 800af7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1e5      	bne.n	800af50 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3314      	adds	r3, #20
 800af8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	e853 3f00 	ldrex	r3, [r3]
 800af92:	623b      	str	r3, [r7, #32]
   return(result);
 800af94:	6a3b      	ldr	r3, [r7, #32]
 800af96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af9a:	663b      	str	r3, [r7, #96]	; 0x60
 800af9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	3314      	adds	r3, #20
 800afa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800afa4:	633a      	str	r2, [r7, #48]	; 0x30
 800afa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afac:	e841 2300 	strex	r3, r2, [r1]
 800afb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1e5      	bne.n	800af84 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800afb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afba:	2220      	movs	r2, #32
 800afbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d119      	bne.n	800affc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	330c      	adds	r3, #12
 800afce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	e853 3f00 	ldrex	r3, [r3]
 800afd6:	60fb      	str	r3, [r7, #12]
   return(result);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f023 0310 	bic.w	r3, r3, #16
 800afde:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	330c      	adds	r3, #12
 800afe6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800afe8:	61fa      	str	r2, [r7, #28]
 800afea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afec:	69b9      	ldr	r1, [r7, #24]
 800afee:	69fa      	ldr	r2, [r7, #28]
 800aff0:	e841 2300 	strex	r3, r2, [r1]
 800aff4:	617b      	str	r3, [r7, #20]
   return(result);
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1e5      	bne.n	800afc8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800affc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800affe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b000:	2b01      	cmp	r3, #1
 800b002:	d106      	bne.n	800b012 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b006:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b008:	4619      	mov	r1, r3
 800b00a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b00c:	f7ff ff0e 	bl	800ae2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b010:	e002      	b.n	800b018 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b012:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b014:	f7f9 f83e 	bl	8004094 <HAL_UART_RxCpltCallback>
}
 800b018:	bf00      	nop
 800b01a:	3770      	adds	r7, #112	; 0x70
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b032:	2b01      	cmp	r3, #1
 800b034:	d108      	bne.n	800b048 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b03a:	085b      	lsrs	r3, r3, #1
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	4619      	mov	r1, r3
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f7ff fef3 	bl	800ae2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b046:	e002      	b.n	800b04e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f7ff fedb 	bl	800ae04 <HAL_UART_RxHalfCpltCallback>
}
 800b04e:	bf00      	nop
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b084      	sub	sp, #16
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b05e:	2300      	movs	r3, #0
 800b060:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b066:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b072:	2b80      	cmp	r3, #128	; 0x80
 800b074:	bf0c      	ite	eq
 800b076:	2301      	moveq	r3, #1
 800b078:	2300      	movne	r3, #0
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b084:	b2db      	uxtb	r3, r3
 800b086:	2b21      	cmp	r3, #33	; 0x21
 800b088:	d108      	bne.n	800b09c <UART_DMAError+0x46>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d005      	beq.n	800b09c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	2200      	movs	r2, #0
 800b094:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b096:	68b8      	ldr	r0, [r7, #8]
 800b098:	f000 f8c6 	bl	800b228 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a6:	2b40      	cmp	r3, #64	; 0x40
 800b0a8:	bf0c      	ite	eq
 800b0aa:	2301      	moveq	r3, #1
 800b0ac:	2300      	movne	r3, #0
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b22      	cmp	r3, #34	; 0x22
 800b0bc:	d108      	bne.n	800b0d0 <UART_DMAError+0x7a>
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d005      	beq.n	800b0d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b0ca:	68b8      	ldr	r0, [r7, #8]
 800b0cc:	f000 f8d4 	bl	800b278 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d4:	f043 0210 	orr.w	r2, r3, #16
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b0dc:	68b8      	ldr	r0, [r7, #8]
 800b0de:	f7ff fe9b 	bl	800ae18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0e2:	bf00      	nop
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
	...

0800b0ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b098      	sub	sp, #96	; 0x60
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	88fa      	ldrh	r2, [r7, #6]
 800b104:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2200      	movs	r2, #0
 800b10a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2222      	movs	r2, #34	; 0x22
 800b110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b118:	4a40      	ldr	r2, [pc, #256]	; (800b21c <UART_Start_Receive_DMA+0x130>)
 800b11a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b120:	4a3f      	ldr	r2, [pc, #252]	; (800b220 <UART_Start_Receive_DMA+0x134>)
 800b122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b128:	4a3e      	ldr	r2, [pc, #248]	; (800b224 <UART_Start_Receive_DMA+0x138>)
 800b12a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b130:	2200      	movs	r2, #0
 800b132:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b134:	f107 0308 	add.w	r3, r7, #8
 800b138:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	3304      	adds	r3, #4
 800b144:	4619      	mov	r1, r3
 800b146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	88fb      	ldrh	r3, [r7, #6]
 800b14c:	f7fa fd68 	bl	8005c20 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b150:	2300      	movs	r3, #0
 800b152:	613b      	str	r3, [r7, #16]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	613b      	str	r3, [r7, #16]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	613b      	str	r3, [r7, #16]
 800b164:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d019      	beq.n	800b1aa <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	330c      	adds	r3, #12
 800b17c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b180:	e853 3f00 	ldrex	r3, [r3]
 800b184:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b18c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	330c      	adds	r3, #12
 800b194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b196:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b198:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b19c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b19e:	e841 2300 	strex	r3, r2, [r1]
 800b1a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b1a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1e5      	bne.n	800b176 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	3314      	adds	r3, #20
 800b1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b4:	e853 3f00 	ldrex	r3, [r3]
 800b1b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1bc:	f043 0301 	orr.w	r3, r3, #1
 800b1c0:	657b      	str	r3, [r7, #84]	; 0x54
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	3314      	adds	r3, #20
 800b1c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b1ca:	63ba      	str	r2, [r7, #56]	; 0x38
 800b1cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b1d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1d2:	e841 2300 	strex	r3, r2, [r1]
 800b1d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d1e5      	bne.n	800b1aa <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3314      	adds	r3, #20
 800b1e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	e853 3f00 	ldrex	r3, [r3]
 800b1ec:	617b      	str	r3, [r7, #20]
   return(result);
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1f4:	653b      	str	r3, [r7, #80]	; 0x50
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	3314      	adds	r3, #20
 800b1fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1fe:	627a      	str	r2, [r7, #36]	; 0x24
 800b200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b202:	6a39      	ldr	r1, [r7, #32]
 800b204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b206:	e841 2300 	strex	r3, r2, [r1]
 800b20a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d1e5      	bne.n	800b1de <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3760      	adds	r7, #96	; 0x60
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	0800aefb 	.word	0x0800aefb
 800b220:	0800b021 	.word	0x0800b021
 800b224:	0800b057 	.word	0x0800b057

0800b228 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b228:	b480      	push	{r7}
 800b22a:	b089      	sub	sp, #36	; 0x24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	330c      	adds	r3, #12
 800b236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	e853 3f00 	ldrex	r3, [r3]
 800b23e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b246:	61fb      	str	r3, [r7, #28]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	330c      	adds	r3, #12
 800b24e:	69fa      	ldr	r2, [r7, #28]
 800b250:	61ba      	str	r2, [r7, #24]
 800b252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b254:	6979      	ldr	r1, [r7, #20]
 800b256:	69ba      	ldr	r2, [r7, #24]
 800b258:	e841 2300 	strex	r3, r2, [r1]
 800b25c:	613b      	str	r3, [r7, #16]
   return(result);
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1e5      	bne.n	800b230 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2220      	movs	r2, #32
 800b268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b26c:	bf00      	nop
 800b26e:	3724      	adds	r7, #36	; 0x24
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b278:	b480      	push	{r7}
 800b27a:	b095      	sub	sp, #84	; 0x54
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	330c      	adds	r3, #12
 800b286:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b28a:	e853 3f00 	ldrex	r3, [r3]
 800b28e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b292:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b296:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	330c      	adds	r3, #12
 800b29e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2a0:	643a      	str	r2, [r7, #64]	; 0x40
 800b2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2a8:	e841 2300 	strex	r3, r2, [r1]
 800b2ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1e5      	bne.n	800b280 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	3314      	adds	r3, #20
 800b2ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2bc:	6a3b      	ldr	r3, [r7, #32]
 800b2be:	e853 3f00 	ldrex	r3, [r3]
 800b2c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	f023 0301 	bic.w	r3, r3, #1
 800b2ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	3314      	adds	r3, #20
 800b2d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2dc:	e841 2300 	strex	r3, r2, [r1]
 800b2e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d1e5      	bne.n	800b2b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d119      	bne.n	800b324 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	330c      	adds	r3, #12
 800b2f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	e853 3f00 	ldrex	r3, [r3]
 800b2fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	f023 0310 	bic.w	r3, r3, #16
 800b306:	647b      	str	r3, [r7, #68]	; 0x44
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	330c      	adds	r3, #12
 800b30e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b310:	61ba      	str	r2, [r7, #24]
 800b312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b314:	6979      	ldr	r1, [r7, #20]
 800b316:	69ba      	ldr	r2, [r7, #24]
 800b318:	e841 2300 	strex	r3, r2, [r1]
 800b31c:	613b      	str	r3, [r7, #16]
   return(result);
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1e5      	bne.n	800b2f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2220      	movs	r2, #32
 800b328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b332:	bf00      	nop
 800b334:	3754      	adds	r7, #84	; 0x54
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b084      	sub	sp, #16
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2200      	movs	r2, #0
 800b350:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f7ff fd5d 	bl	800ae18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b35e:	bf00      	nop
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b366:	b480      	push	{r7}
 800b368:	b085      	sub	sp, #20
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b374:	b2db      	uxtb	r3, r3
 800b376:	2b21      	cmp	r3, #33	; 0x21
 800b378:	d13e      	bne.n	800b3f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b382:	d114      	bne.n	800b3ae <UART_Transmit_IT+0x48>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d110      	bne.n	800b3ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a1b      	ldr	r3, [r3, #32]
 800b390:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	881b      	ldrh	r3, [r3, #0]
 800b396:	461a      	mov	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
 800b3a6:	1c9a      	adds	r2, r3, #2
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	621a      	str	r2, [r3, #32]
 800b3ac:	e008      	b.n	800b3c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6a1b      	ldr	r3, [r3, #32]
 800b3b2:	1c59      	adds	r1, r3, #1
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	6211      	str	r1, [r2, #32]
 800b3b8:	781a      	ldrb	r2, [r3, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d10f      	bne.n	800b3f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68da      	ldr	r2, [r3, #12]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68da      	ldr	r2, [r3, #12]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	e000      	b.n	800b3fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b3f8:	2302      	movs	r3, #2
  }
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b082      	sub	sp, #8
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	68da      	ldr	r2, [r3, #12]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b41c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2220      	movs	r2, #32
 800b422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f7f8 fe22 	bl	8004070 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b08c      	sub	sp, #48	; 0x30
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b444:	b2db      	uxtb	r3, r3
 800b446:	2b22      	cmp	r3, #34	; 0x22
 800b448:	f040 80ab 	bne.w	800b5a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b454:	d117      	bne.n	800b486 <UART_Receive_IT+0x50>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d113      	bne.n	800b486 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b45e:	2300      	movs	r3, #0
 800b460:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b466:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	b29b      	uxth	r3, r3
 800b470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b474:	b29a      	uxth	r2, r3
 800b476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b478:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b47e:	1c9a      	adds	r2, r3, #2
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	629a      	str	r2, [r3, #40]	; 0x28
 800b484:	e026      	b.n	800b4d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b48a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b48c:	2300      	movs	r3, #0
 800b48e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b498:	d007      	beq.n	800b4aa <UART_Receive_IT+0x74>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10a      	bne.n	800b4b8 <UART_Receive_IT+0x82>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d106      	bne.n	800b4b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	b2da      	uxtb	r2, r3
 800b4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b4:	701a      	strb	r2, [r3, #0]
 800b4b6:	e008      	b.n	800b4ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4c4:	b2da      	uxtb	r2, r3
 800b4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ce:	1c5a      	adds	r2, r3, #1
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d15a      	bne.n	800b59e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68da      	ldr	r2, [r3, #12]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f022 0220 	bic.w	r2, r2, #32
 800b4f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	68da      	ldr	r2, [r3, #12]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b506:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	695a      	ldr	r2, [r3, #20]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f022 0201 	bic.w	r2, r2, #1
 800b516:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2220      	movs	r2, #32
 800b51c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b524:	2b01      	cmp	r3, #1
 800b526:	d135      	bne.n	800b594 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	330c      	adds	r3, #12
 800b534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	e853 3f00 	ldrex	r3, [r3]
 800b53c:	613b      	str	r3, [r7, #16]
   return(result);
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	f023 0310 	bic.w	r3, r3, #16
 800b544:	627b      	str	r3, [r7, #36]	; 0x24
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	330c      	adds	r3, #12
 800b54c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b54e:	623a      	str	r2, [r7, #32]
 800b550:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b552:	69f9      	ldr	r1, [r7, #28]
 800b554:	6a3a      	ldr	r2, [r7, #32]
 800b556:	e841 2300 	strex	r3, r2, [r1]
 800b55a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1e5      	bne.n	800b52e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f003 0310 	and.w	r3, r3, #16
 800b56c:	2b10      	cmp	r3, #16
 800b56e:	d10a      	bne.n	800b586 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b570:	2300      	movs	r3, #0
 800b572:	60fb      	str	r3, [r7, #12]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	60fb      	str	r3, [r7, #12]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	60fb      	str	r3, [r7, #12]
 800b584:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b58a:	4619      	mov	r1, r3
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f7ff fc4d 	bl	800ae2c <HAL_UARTEx_RxEventCallback>
 800b592:	e002      	b.n	800b59a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f7f8 fd7d 	bl	8004094 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b59a:	2300      	movs	r3, #0
 800b59c:	e002      	b.n	800b5a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	e000      	b.n	800b5a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b5a2:	2302      	movs	r3, #2
  }
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3730      	adds	r7, #48	; 0x30
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5b0:	b0c0      	sub	sp, #256	; 0x100
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b5c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5c8:	68d9      	ldr	r1, [r3, #12]
 800b5ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	ea40 0301 	orr.w	r3, r0, r1
 800b5d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b5d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5da:	689a      	ldr	r2, [r3, #8]
 800b5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	431a      	orrs	r2, r3
 800b5e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5e8:	695b      	ldr	r3, [r3, #20]
 800b5ea:	431a      	orrs	r2, r3
 800b5ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5f0:	69db      	ldr	r3, [r3, #28]
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b604:	f021 010c 	bic.w	r1, r1, #12
 800b608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b612:	430b      	orrs	r3, r1
 800b614:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	695b      	ldr	r3, [r3, #20]
 800b61e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b626:	6999      	ldr	r1, [r3, #24]
 800b628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	ea40 0301 	orr.w	r3, r0, r1
 800b632:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	4b8f      	ldr	r3, [pc, #572]	; (800b878 <UART_SetConfig+0x2cc>)
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d005      	beq.n	800b64c <UART_SetConfig+0xa0>
 800b640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	4b8d      	ldr	r3, [pc, #564]	; (800b87c <UART_SetConfig+0x2d0>)
 800b648:	429a      	cmp	r2, r3
 800b64a:	d104      	bne.n	800b656 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b64c:	f7fd fe96 	bl	800937c <HAL_RCC_GetPCLK2Freq>
 800b650:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b654:	e003      	b.n	800b65e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b656:	f7fd fe7d 	bl	8009354 <HAL_RCC_GetPCLK1Freq>
 800b65a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b65e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b662:	69db      	ldr	r3, [r3, #28]
 800b664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b668:	f040 810c 	bne.w	800b884 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b66c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b670:	2200      	movs	r2, #0
 800b672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b676:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b67a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b67e:	4622      	mov	r2, r4
 800b680:	462b      	mov	r3, r5
 800b682:	1891      	adds	r1, r2, r2
 800b684:	65b9      	str	r1, [r7, #88]	; 0x58
 800b686:	415b      	adcs	r3, r3
 800b688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b68a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b68e:	4621      	mov	r1, r4
 800b690:	eb12 0801 	adds.w	r8, r2, r1
 800b694:	4629      	mov	r1, r5
 800b696:	eb43 0901 	adc.w	r9, r3, r1
 800b69a:	f04f 0200 	mov.w	r2, #0
 800b69e:	f04f 0300 	mov.w	r3, #0
 800b6a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b6a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b6aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b6ae:	4690      	mov	r8, r2
 800b6b0:	4699      	mov	r9, r3
 800b6b2:	4623      	mov	r3, r4
 800b6b4:	eb18 0303 	adds.w	r3, r8, r3
 800b6b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b6bc:	462b      	mov	r3, r5
 800b6be:	eb49 0303 	adc.w	r3, r9, r3
 800b6c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b6c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b6d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b6da:	460b      	mov	r3, r1
 800b6dc:	18db      	adds	r3, r3, r3
 800b6de:	653b      	str	r3, [r7, #80]	; 0x50
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	eb42 0303 	adc.w	r3, r2, r3
 800b6e6:	657b      	str	r3, [r7, #84]	; 0x54
 800b6e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b6ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b6f0:	f7f5 fab2 	bl	8000c58 <__aeabi_uldivmod>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	4b61      	ldr	r3, [pc, #388]	; (800b880 <UART_SetConfig+0x2d4>)
 800b6fa:	fba3 2302 	umull	r2, r3, r3, r2
 800b6fe:	095b      	lsrs	r3, r3, #5
 800b700:	011c      	lsls	r4, r3, #4
 800b702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b706:	2200      	movs	r2, #0
 800b708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b70c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b710:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b714:	4642      	mov	r2, r8
 800b716:	464b      	mov	r3, r9
 800b718:	1891      	adds	r1, r2, r2
 800b71a:	64b9      	str	r1, [r7, #72]	; 0x48
 800b71c:	415b      	adcs	r3, r3
 800b71e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b720:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b724:	4641      	mov	r1, r8
 800b726:	eb12 0a01 	adds.w	sl, r2, r1
 800b72a:	4649      	mov	r1, r9
 800b72c:	eb43 0b01 	adc.w	fp, r3, r1
 800b730:	f04f 0200 	mov.w	r2, #0
 800b734:	f04f 0300 	mov.w	r3, #0
 800b738:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b73c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b744:	4692      	mov	sl, r2
 800b746:	469b      	mov	fp, r3
 800b748:	4643      	mov	r3, r8
 800b74a:	eb1a 0303 	adds.w	r3, sl, r3
 800b74e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b752:	464b      	mov	r3, r9
 800b754:	eb4b 0303 	adc.w	r3, fp, r3
 800b758:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b768:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b76c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b770:	460b      	mov	r3, r1
 800b772:	18db      	adds	r3, r3, r3
 800b774:	643b      	str	r3, [r7, #64]	; 0x40
 800b776:	4613      	mov	r3, r2
 800b778:	eb42 0303 	adc.w	r3, r2, r3
 800b77c:	647b      	str	r3, [r7, #68]	; 0x44
 800b77e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b782:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b786:	f7f5 fa67 	bl	8000c58 <__aeabi_uldivmod>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4611      	mov	r1, r2
 800b790:	4b3b      	ldr	r3, [pc, #236]	; (800b880 <UART_SetConfig+0x2d4>)
 800b792:	fba3 2301 	umull	r2, r3, r3, r1
 800b796:	095b      	lsrs	r3, r3, #5
 800b798:	2264      	movs	r2, #100	; 0x64
 800b79a:	fb02 f303 	mul.w	r3, r2, r3
 800b79e:	1acb      	subs	r3, r1, r3
 800b7a0:	00db      	lsls	r3, r3, #3
 800b7a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b7a6:	4b36      	ldr	r3, [pc, #216]	; (800b880 <UART_SetConfig+0x2d4>)
 800b7a8:	fba3 2302 	umull	r2, r3, r3, r2
 800b7ac:	095b      	lsrs	r3, r3, #5
 800b7ae:	005b      	lsls	r3, r3, #1
 800b7b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b7b4:	441c      	add	r4, r3
 800b7b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b7c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b7c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b7c8:	4642      	mov	r2, r8
 800b7ca:	464b      	mov	r3, r9
 800b7cc:	1891      	adds	r1, r2, r2
 800b7ce:	63b9      	str	r1, [r7, #56]	; 0x38
 800b7d0:	415b      	adcs	r3, r3
 800b7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b7d8:	4641      	mov	r1, r8
 800b7da:	1851      	adds	r1, r2, r1
 800b7dc:	6339      	str	r1, [r7, #48]	; 0x30
 800b7de:	4649      	mov	r1, r9
 800b7e0:	414b      	adcs	r3, r1
 800b7e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b7e4:	f04f 0200 	mov.w	r2, #0
 800b7e8:	f04f 0300 	mov.w	r3, #0
 800b7ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b7f0:	4659      	mov	r1, fp
 800b7f2:	00cb      	lsls	r3, r1, #3
 800b7f4:	4651      	mov	r1, sl
 800b7f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b7fa:	4651      	mov	r1, sl
 800b7fc:	00ca      	lsls	r2, r1, #3
 800b7fe:	4610      	mov	r0, r2
 800b800:	4619      	mov	r1, r3
 800b802:	4603      	mov	r3, r0
 800b804:	4642      	mov	r2, r8
 800b806:	189b      	adds	r3, r3, r2
 800b808:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b80c:	464b      	mov	r3, r9
 800b80e:	460a      	mov	r2, r1
 800b810:	eb42 0303 	adc.w	r3, r2, r3
 800b814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b824:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b82c:	460b      	mov	r3, r1
 800b82e:	18db      	adds	r3, r3, r3
 800b830:	62bb      	str	r3, [r7, #40]	; 0x28
 800b832:	4613      	mov	r3, r2
 800b834:	eb42 0303 	adc.w	r3, r2, r3
 800b838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b83a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b83e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b842:	f7f5 fa09 	bl	8000c58 <__aeabi_uldivmod>
 800b846:	4602      	mov	r2, r0
 800b848:	460b      	mov	r3, r1
 800b84a:	4b0d      	ldr	r3, [pc, #52]	; (800b880 <UART_SetConfig+0x2d4>)
 800b84c:	fba3 1302 	umull	r1, r3, r3, r2
 800b850:	095b      	lsrs	r3, r3, #5
 800b852:	2164      	movs	r1, #100	; 0x64
 800b854:	fb01 f303 	mul.w	r3, r1, r3
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	00db      	lsls	r3, r3, #3
 800b85c:	3332      	adds	r3, #50	; 0x32
 800b85e:	4a08      	ldr	r2, [pc, #32]	; (800b880 <UART_SetConfig+0x2d4>)
 800b860:	fba2 2303 	umull	r2, r3, r2, r3
 800b864:	095b      	lsrs	r3, r3, #5
 800b866:	f003 0207 	and.w	r2, r3, #7
 800b86a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4422      	add	r2, r4
 800b872:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b874:	e105      	b.n	800ba82 <UART_SetConfig+0x4d6>
 800b876:	bf00      	nop
 800b878:	40011000 	.word	0x40011000
 800b87c:	40011400 	.word	0x40011400
 800b880:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b888:	2200      	movs	r2, #0
 800b88a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b88e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b892:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b896:	4642      	mov	r2, r8
 800b898:	464b      	mov	r3, r9
 800b89a:	1891      	adds	r1, r2, r2
 800b89c:	6239      	str	r1, [r7, #32]
 800b89e:	415b      	adcs	r3, r3
 800b8a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b8a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b8a6:	4641      	mov	r1, r8
 800b8a8:	1854      	adds	r4, r2, r1
 800b8aa:	4649      	mov	r1, r9
 800b8ac:	eb43 0501 	adc.w	r5, r3, r1
 800b8b0:	f04f 0200 	mov.w	r2, #0
 800b8b4:	f04f 0300 	mov.w	r3, #0
 800b8b8:	00eb      	lsls	r3, r5, #3
 800b8ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b8be:	00e2      	lsls	r2, r4, #3
 800b8c0:	4614      	mov	r4, r2
 800b8c2:	461d      	mov	r5, r3
 800b8c4:	4643      	mov	r3, r8
 800b8c6:	18e3      	adds	r3, r4, r3
 800b8c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b8cc:	464b      	mov	r3, r9
 800b8ce:	eb45 0303 	adc.w	r3, r5, r3
 800b8d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b8d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b8e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b8e6:	f04f 0200 	mov.w	r2, #0
 800b8ea:	f04f 0300 	mov.w	r3, #0
 800b8ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b8f2:	4629      	mov	r1, r5
 800b8f4:	008b      	lsls	r3, r1, #2
 800b8f6:	4621      	mov	r1, r4
 800b8f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	008a      	lsls	r2, r1, #2
 800b900:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b904:	f7f5 f9a8 	bl	8000c58 <__aeabi_uldivmod>
 800b908:	4602      	mov	r2, r0
 800b90a:	460b      	mov	r3, r1
 800b90c:	4b60      	ldr	r3, [pc, #384]	; (800ba90 <UART_SetConfig+0x4e4>)
 800b90e:	fba3 2302 	umull	r2, r3, r3, r2
 800b912:	095b      	lsrs	r3, r3, #5
 800b914:	011c      	lsls	r4, r3, #4
 800b916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b920:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b924:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b928:	4642      	mov	r2, r8
 800b92a:	464b      	mov	r3, r9
 800b92c:	1891      	adds	r1, r2, r2
 800b92e:	61b9      	str	r1, [r7, #24]
 800b930:	415b      	adcs	r3, r3
 800b932:	61fb      	str	r3, [r7, #28]
 800b934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b938:	4641      	mov	r1, r8
 800b93a:	1851      	adds	r1, r2, r1
 800b93c:	6139      	str	r1, [r7, #16]
 800b93e:	4649      	mov	r1, r9
 800b940:	414b      	adcs	r3, r1
 800b942:	617b      	str	r3, [r7, #20]
 800b944:	f04f 0200 	mov.w	r2, #0
 800b948:	f04f 0300 	mov.w	r3, #0
 800b94c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b950:	4659      	mov	r1, fp
 800b952:	00cb      	lsls	r3, r1, #3
 800b954:	4651      	mov	r1, sl
 800b956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b95a:	4651      	mov	r1, sl
 800b95c:	00ca      	lsls	r2, r1, #3
 800b95e:	4610      	mov	r0, r2
 800b960:	4619      	mov	r1, r3
 800b962:	4603      	mov	r3, r0
 800b964:	4642      	mov	r2, r8
 800b966:	189b      	adds	r3, r3, r2
 800b968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b96c:	464b      	mov	r3, r9
 800b96e:	460a      	mov	r2, r1
 800b970:	eb42 0303 	adc.w	r3, r2, r3
 800b974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	67bb      	str	r3, [r7, #120]	; 0x78
 800b982:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b984:	f04f 0200 	mov.w	r2, #0
 800b988:	f04f 0300 	mov.w	r3, #0
 800b98c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b990:	4649      	mov	r1, r9
 800b992:	008b      	lsls	r3, r1, #2
 800b994:	4641      	mov	r1, r8
 800b996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b99a:	4641      	mov	r1, r8
 800b99c:	008a      	lsls	r2, r1, #2
 800b99e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b9a2:	f7f5 f959 	bl	8000c58 <__aeabi_uldivmod>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	4b39      	ldr	r3, [pc, #228]	; (800ba90 <UART_SetConfig+0x4e4>)
 800b9ac:	fba3 1302 	umull	r1, r3, r3, r2
 800b9b0:	095b      	lsrs	r3, r3, #5
 800b9b2:	2164      	movs	r1, #100	; 0x64
 800b9b4:	fb01 f303 	mul.w	r3, r1, r3
 800b9b8:	1ad3      	subs	r3, r2, r3
 800b9ba:	011b      	lsls	r3, r3, #4
 800b9bc:	3332      	adds	r3, #50	; 0x32
 800b9be:	4a34      	ldr	r2, [pc, #208]	; (800ba90 <UART_SetConfig+0x4e4>)
 800b9c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b9c4:	095b      	lsrs	r3, r3, #5
 800b9c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9ca:	441c      	add	r4, r3
 800b9cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	673b      	str	r3, [r7, #112]	; 0x70
 800b9d4:	677a      	str	r2, [r7, #116]	; 0x74
 800b9d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b9da:	4642      	mov	r2, r8
 800b9dc:	464b      	mov	r3, r9
 800b9de:	1891      	adds	r1, r2, r2
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	415b      	adcs	r3, r3
 800b9e4:	60fb      	str	r3, [r7, #12]
 800b9e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b9ea:	4641      	mov	r1, r8
 800b9ec:	1851      	adds	r1, r2, r1
 800b9ee:	6039      	str	r1, [r7, #0]
 800b9f0:	4649      	mov	r1, r9
 800b9f2:	414b      	adcs	r3, r1
 800b9f4:	607b      	str	r3, [r7, #4]
 800b9f6:	f04f 0200 	mov.w	r2, #0
 800b9fa:	f04f 0300 	mov.w	r3, #0
 800b9fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ba02:	4659      	mov	r1, fp
 800ba04:	00cb      	lsls	r3, r1, #3
 800ba06:	4651      	mov	r1, sl
 800ba08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba0c:	4651      	mov	r1, sl
 800ba0e:	00ca      	lsls	r2, r1, #3
 800ba10:	4610      	mov	r0, r2
 800ba12:	4619      	mov	r1, r3
 800ba14:	4603      	mov	r3, r0
 800ba16:	4642      	mov	r2, r8
 800ba18:	189b      	adds	r3, r3, r2
 800ba1a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba1c:	464b      	mov	r3, r9
 800ba1e:	460a      	mov	r2, r1
 800ba20:	eb42 0303 	adc.w	r3, r2, r3
 800ba24:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	663b      	str	r3, [r7, #96]	; 0x60
 800ba30:	667a      	str	r2, [r7, #100]	; 0x64
 800ba32:	f04f 0200 	mov.w	r2, #0
 800ba36:	f04f 0300 	mov.w	r3, #0
 800ba3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ba3e:	4649      	mov	r1, r9
 800ba40:	008b      	lsls	r3, r1, #2
 800ba42:	4641      	mov	r1, r8
 800ba44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba48:	4641      	mov	r1, r8
 800ba4a:	008a      	lsls	r2, r1, #2
 800ba4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ba50:	f7f5 f902 	bl	8000c58 <__aeabi_uldivmod>
 800ba54:	4602      	mov	r2, r0
 800ba56:	460b      	mov	r3, r1
 800ba58:	4b0d      	ldr	r3, [pc, #52]	; (800ba90 <UART_SetConfig+0x4e4>)
 800ba5a:	fba3 1302 	umull	r1, r3, r3, r2
 800ba5e:	095b      	lsrs	r3, r3, #5
 800ba60:	2164      	movs	r1, #100	; 0x64
 800ba62:	fb01 f303 	mul.w	r3, r1, r3
 800ba66:	1ad3      	subs	r3, r2, r3
 800ba68:	011b      	lsls	r3, r3, #4
 800ba6a:	3332      	adds	r3, #50	; 0x32
 800ba6c:	4a08      	ldr	r2, [pc, #32]	; (800ba90 <UART_SetConfig+0x4e4>)
 800ba6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ba72:	095b      	lsrs	r3, r3, #5
 800ba74:	f003 020f 	and.w	r2, r3, #15
 800ba78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4422      	add	r2, r4
 800ba80:	609a      	str	r2, [r3, #8]
}
 800ba82:	bf00      	nop
 800ba84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba8e:	bf00      	nop
 800ba90:	51eb851f 	.word	0x51eb851f

0800ba94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba94:	b084      	sub	sp, #16
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b084      	sub	sp, #16
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	f107 001c 	add.w	r0, r7, #28
 800baa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d122      	bne.n	800baf2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d105      	bne.n	800bae6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 f9c0 	bl	800be6c <USB_CoreReset>
 800baec:	4603      	mov	r3, r0
 800baee:	73fb      	strb	r3, [r7, #15]
 800baf0:	e01a      	b.n	800bb28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 f9b4 	bl	800be6c <USB_CoreReset>
 800bb04:	4603      	mov	r3, r0
 800bb06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bb08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d106      	bne.n	800bb1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	639a      	str	r2, [r3, #56]	; 0x38
 800bb1a:	e005      	b.n	800bb28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d10b      	bne.n	800bb46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	f043 0206 	orr.w	r2, r3, #6
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	f043 0220 	orr.w	r2, r3, #32
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bb46:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb52:	b004      	add	sp, #16
 800bb54:	4770      	bx	lr

0800bb56 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb56:	b480      	push	{r7}
 800bb58:	b083      	sub	sp, #12
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	f043 0201 	orr.w	r2, r3, #1
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	f023 0201 	bic.w	r2, r3, #1
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	370c      	adds	r7, #12
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b084      	sub	sp, #16
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	460b      	mov	r3, r1
 800bba4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bba6:	2300      	movs	r3, #0
 800bba8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bbb6:	78fb      	ldrb	r3, [r7, #3]
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d115      	bne.n	800bbe8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	68db      	ldr	r3, [r3, #12]
 800bbc0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bbc8:	2001      	movs	r0, #1
 800bbca:	f7f9 fe45 	bl	8005858 <HAL_Delay>
      ms++;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f93a 	bl	800be4e <USB_GetMode>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d01e      	beq.n	800bc1e <USB_SetCurrentMode+0x84>
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2b31      	cmp	r3, #49	; 0x31
 800bbe4:	d9f0      	bls.n	800bbc8 <USB_SetCurrentMode+0x2e>
 800bbe6:	e01a      	b.n	800bc1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bbe8:	78fb      	ldrb	r3, [r7, #3]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d115      	bne.n	800bc1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bbfa:	2001      	movs	r0, #1
 800bbfc:	f7f9 fe2c 	bl	8005858 <HAL_Delay>
      ms++;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	3301      	adds	r3, #1
 800bc04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f921 	bl	800be4e <USB_GetMode>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d005      	beq.n	800bc1e <USB_SetCurrentMode+0x84>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2b31      	cmp	r3, #49	; 0x31
 800bc16:	d9f0      	bls.n	800bbfa <USB_SetCurrentMode+0x60>
 800bc18:	e001      	b.n	800bc1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e005      	b.n	800bc2a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2b32      	cmp	r3, #50	; 0x32
 800bc22:	d101      	bne.n	800bc28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e000      	b.n	800bc2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
	...

0800bc34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	3301      	adds	r3, #1
 800bc46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	4a13      	ldr	r2, [pc, #76]	; (800bc98 <USB_FlushTxFifo+0x64>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d901      	bls.n	800bc54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bc50:	2303      	movs	r3, #3
 800bc52:	e01b      	b.n	800bc8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	daf2      	bge.n	800bc42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	019b      	lsls	r3, r3, #6
 800bc64:	f043 0220 	orr.w	r2, r3, #32
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	4a08      	ldr	r2, [pc, #32]	; (800bc98 <USB_FlushTxFifo+0x64>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d901      	bls.n	800bc7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bc7a:	2303      	movs	r3, #3
 800bc7c:	e006      	b.n	800bc8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	691b      	ldr	r3, [r3, #16]
 800bc82:	f003 0320 	and.w	r3, r3, #32
 800bc86:	2b20      	cmp	r3, #32
 800bc88:	d0f0      	beq.n	800bc6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3714      	adds	r7, #20
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr
 800bc98:	00030d40 	.word	0x00030d40

0800bc9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bca4:	2300      	movs	r3, #0
 800bca6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	4a11      	ldr	r2, [pc, #68]	; (800bcf8 <USB_FlushRxFifo+0x5c>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d901      	bls.n	800bcba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e018      	b.n	800bcec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	daf2      	bge.n	800bca8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2210      	movs	r2, #16
 800bcca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	4a08      	ldr	r2, [pc, #32]	; (800bcf8 <USB_FlushRxFifo+0x5c>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d901      	bls.n	800bcde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	e006      	b.n	800bcec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	f003 0310 	and.w	r3, r3, #16
 800bce6:	2b10      	cmp	r3, #16
 800bce8:	d0f0      	beq.n	800bccc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3714      	adds	r7, #20
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr
 800bcf8:	00030d40 	.word	0x00030d40

0800bcfc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b089      	sub	sp, #36	; 0x24
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	4611      	mov	r1, r2
 800bd08:	461a      	mov	r2, r3
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	71fb      	strb	r3, [r7, #7]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bd1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d123      	bne.n	800bd6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bd22:	88bb      	ldrh	r3, [r7, #4]
 800bd24:	3303      	adds	r3, #3
 800bd26:	089b      	lsrs	r3, r3, #2
 800bd28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	61bb      	str	r3, [r7, #24]
 800bd2e:	e018      	b.n	800bd62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bd30:	79fb      	ldrb	r3, [r7, #7]
 800bd32:	031a      	lsls	r2, r3, #12
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	4413      	add	r3, r2
 800bd38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	3301      	adds	r3, #1
 800bd48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	3301      	adds	r3, #1
 800bd54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bd5c:	69bb      	ldr	r3, [r7, #24]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	61bb      	str	r3, [r7, #24]
 800bd62:	69ba      	ldr	r2, [r7, #24]
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d3e2      	bcc.n	800bd30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3724      	adds	r7, #36	; 0x24
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b08b      	sub	sp, #44	; 0x2c
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	4613      	mov	r3, r2
 800bd84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bd8e:	88fb      	ldrh	r3, [r7, #6]
 800bd90:	089b      	lsrs	r3, r3, #2
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bd96:	88fb      	ldrh	r3, [r7, #6]
 800bd98:	f003 0303 	and.w	r3, r3, #3
 800bd9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bd9e:	2300      	movs	r3, #0
 800bda0:	623b      	str	r3, [r7, #32]
 800bda2:	e014      	b.n	800bdce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdae:	601a      	str	r2, [r3, #0]
    pDest++;
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb8:	3301      	adds	r3, #1
 800bdba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bdc8:	6a3b      	ldr	r3, [r7, #32]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	623b      	str	r3, [r7, #32]
 800bdce:	6a3a      	ldr	r2, [r7, #32]
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d3e6      	bcc.n	800bda4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bdd6:	8bfb      	ldrh	r3, [r7, #30]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d01e      	beq.n	800be1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bddc:	2300      	movs	r3, #0
 800bdde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bde6:	461a      	mov	r2, r3
 800bde8:	f107 0310 	add.w	r3, r7, #16
 800bdec:	6812      	ldr	r2, [r2, #0]
 800bdee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	00db      	lsls	r3, r3, #3
 800bdf8:	fa22 f303 	lsr.w	r3, r2, r3
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be00:	701a      	strb	r2, [r3, #0]
      i++;
 800be02:	6a3b      	ldr	r3, [r7, #32]
 800be04:	3301      	adds	r3, #1
 800be06:	623b      	str	r3, [r7, #32]
      pDest++;
 800be08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0a:	3301      	adds	r3, #1
 800be0c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800be0e:	8bfb      	ldrh	r3, [r7, #30]
 800be10:	3b01      	subs	r3, #1
 800be12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800be14:	8bfb      	ldrh	r3, [r7, #30]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1ea      	bne.n	800bdf0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800be1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	372c      	adds	r7, #44	; 0x2c
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800be28:	b480      	push	{r7}
 800be2a:	b085      	sub	sp, #20
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	695b      	ldr	r3, [r3, #20]
 800be34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	699b      	ldr	r3, [r3, #24]
 800be3a:	68fa      	ldr	r2, [r7, #12]
 800be3c:	4013      	ands	r3, r2
 800be3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800be40:	68fb      	ldr	r3, [r7, #12]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3714      	adds	r7, #20
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr

0800be4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800be4e:	b480      	push	{r7}
 800be50:	b083      	sub	sp, #12
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	695b      	ldr	r3, [r3, #20]
 800be5a:	f003 0301 	and.w	r3, r3, #1
}
 800be5e:	4618      	mov	r0, r3
 800be60:	370c      	adds	r7, #12
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
	...

0800be6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be74:	2300      	movs	r3, #0
 800be76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	3301      	adds	r3, #1
 800be7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	4a13      	ldr	r2, [pc, #76]	; (800bed0 <USB_CoreReset+0x64>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d901      	bls.n	800be8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800be86:	2303      	movs	r3, #3
 800be88:	e01b      	b.n	800bec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	daf2      	bge.n	800be78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800be92:	2300      	movs	r3, #0
 800be94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	f043 0201 	orr.w	r2, r3, #1
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	3301      	adds	r3, #1
 800bea6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	4a09      	ldr	r2, [pc, #36]	; (800bed0 <USB_CoreReset+0x64>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d901      	bls.n	800beb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800beb0:	2303      	movs	r3, #3
 800beb2:	e006      	b.n	800bec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	f003 0301 	and.w	r3, r3, #1
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d0f0      	beq.n	800bea2 <USB_CoreReset+0x36>

  return HAL_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3714      	adds	r7, #20
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop
 800bed0:	00030d40 	.word	0x00030d40

0800bed4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bed4:	b084      	sub	sp, #16
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b086      	sub	sp, #24
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
 800bede:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bee6:	2300      	movs	r3, #0
 800bee8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bef4:	461a      	mov	r2, r3
 800bef6:	2300      	movs	r3, #0
 800bef8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800befe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf0a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf16:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d018      	beq.n	800bf5c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800bf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d10a      	bne.n	800bf46 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf3e:	f043 0304 	orr.w	r3, r3, #4
 800bf42:	6013      	str	r3, [r2, #0]
 800bf44:	e014      	b.n	800bf70 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf54:	f023 0304 	bic.w	r3, r3, #4
 800bf58:	6013      	str	r3, [r2, #0]
 800bf5a:	e009      	b.n	800bf70 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf6a:	f023 0304 	bic.w	r3, r3, #4
 800bf6e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bf70:	2110      	movs	r1, #16
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7ff fe5e 	bl	800bc34 <USB_FlushTxFifo>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d001      	beq.n	800bf82 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f7ff fe8a 	bl	800bc9c <USB_FlushRxFifo>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d001      	beq.n	800bf92 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800bf92:	2300      	movs	r3, #0
 800bf94:	613b      	str	r3, [r7, #16]
 800bf96:	e015      	b.n	800bfc4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	015a      	lsls	r2, r3, #5
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfaa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	015a      	lsls	r2, r3, #5
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfb8:	461a      	mov	r2, r3
 800bfba:	2300      	movs	r3, #0
 800bfbc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	613b      	str	r3, [r7, #16]
 800bfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc6:	693a      	ldr	r2, [r7, #16]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d3e5      	bcc.n	800bf98 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f04f 32ff 	mov.w	r2, #4294967295
 800bfd8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00b      	beq.n	800bffe <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4a13      	ldr	r2, [pc, #76]	; (800c040 <USB_HostInit+0x16c>)
 800bff2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4a13      	ldr	r2, [pc, #76]	; (800c044 <USB_HostInit+0x170>)
 800bff8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800bffc:	e009      	b.n	800c012 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2280      	movs	r2, #128	; 0x80
 800c002:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4a10      	ldr	r2, [pc, #64]	; (800c048 <USB_HostInit+0x174>)
 800c008:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4a0f      	ldr	r2, [pc, #60]	; (800c04c <USB_HostInit+0x178>)
 800c00e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c014:	2b00      	cmp	r3, #0
 800c016:	d105      	bne.n	800c024 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	f043 0210 	orr.w	r2, r3, #16
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	699a      	ldr	r2, [r3, #24]
 800c028:	4b09      	ldr	r3, [pc, #36]	; (800c050 <USB_HostInit+0x17c>)
 800c02a:	4313      	orrs	r3, r2
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c030:	7dfb      	ldrb	r3, [r7, #23]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3718      	adds	r7, #24
 800c036:	46bd      	mov	sp, r7
 800c038:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c03c:	b004      	add	sp, #16
 800c03e:	4770      	bx	lr
 800c040:	01000200 	.word	0x01000200
 800c044:	00e00300 	.word	0x00e00300
 800c048:	00600080 	.word	0x00600080
 800c04c:	004000e0 	.word	0x004000e0
 800c050:	a3200008 	.word	0xa3200008

0800c054 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	460b      	mov	r3, r1
 800c05e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	68fa      	ldr	r2, [r7, #12]
 800c06e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c072:	f023 0303 	bic.w	r3, r3, #3
 800c076:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	78fb      	ldrb	r3, [r7, #3]
 800c082:	f003 0303 	and.w	r3, r3, #3
 800c086:	68f9      	ldr	r1, [r7, #12]
 800c088:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c08c:	4313      	orrs	r3, r2
 800c08e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c090:	78fb      	ldrb	r3, [r7, #3]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d107      	bne.n	800c0a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c09c:	461a      	mov	r2, r3
 800c09e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c0a2:	6053      	str	r3, [r2, #4]
 800c0a4:	e009      	b.n	800c0ba <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c0a6:	78fb      	ldrb	r3, [r7, #3]
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	d106      	bne.n	800c0ba <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	f241 7370 	movw	r3, #6000	; 0x1770
 800c0b8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3714      	adds	r7, #20
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c0e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c0f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c0f8:	2064      	movs	r0, #100	; 0x64
 800c0fa:	f7f9 fbad 	bl	8005858 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c10a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c10c:	200a      	movs	r0, #10
 800c10e:	f7f9 fba3 	bl	8005858 <HAL_Delay>

  return HAL_OK;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3710      	adds	r7, #16
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	460b      	mov	r3, r1
 800c126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c12c:	2300      	movs	r3, #0
 800c12e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c140:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d109      	bne.n	800c160 <USB_DriveVbus+0x44>
 800c14c:	78fb      	ldrb	r3, [r7, #3]
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d106      	bne.n	800c160 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c15a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c15e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c16a:	d109      	bne.n	800c180 <USB_DriveVbus+0x64>
 800c16c:	78fb      	ldrb	r3, [r7, #3]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d106      	bne.n	800c180 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c17a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c17e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c180:	2300      	movs	r3, #0
}
 800c182:	4618      	mov	r0, r3
 800c184:	3714      	adds	r7, #20
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr

0800c18e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c18e:	b480      	push	{r7}
 800c190:	b085      	sub	sp, #20
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c19a:	2300      	movs	r3, #0
 800c19c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	0c5b      	lsrs	r3, r3, #17
 800c1ac:	f003 0303 	and.w	r3, r3, #3
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3714      	adds	r7, #20
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	b29b      	uxth	r3, r3
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3714      	adds	r7, #20
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr
	...

0800c1e0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b088      	sub	sp, #32
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	4608      	mov	r0, r1
 800c1ea:	4611      	mov	r1, r2
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	70fb      	strb	r3, [r7, #3]
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	70bb      	strb	r3, [r7, #2]
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c202:	78fb      	ldrb	r3, [r7, #3]
 800c204:	015a      	lsls	r2, r3, #5
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	4413      	add	r3, r2
 800c20a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c20e:	461a      	mov	r2, r3
 800c210:	f04f 33ff 	mov.w	r3, #4294967295
 800c214:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c216:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c21a:	2b03      	cmp	r3, #3
 800c21c:	d87e      	bhi.n	800c31c <USB_HC_Init+0x13c>
 800c21e:	a201      	add	r2, pc, #4	; (adr r2, 800c224 <USB_HC_Init+0x44>)
 800c220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c224:	0800c235 	.word	0x0800c235
 800c228:	0800c2df 	.word	0x0800c2df
 800c22c:	0800c235 	.word	0x0800c235
 800c230:	0800c2a1 	.word	0x0800c2a1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c234:	78fb      	ldrb	r3, [r7, #3]
 800c236:	015a      	lsls	r2, r3, #5
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	4413      	add	r3, r2
 800c23c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c240:	461a      	mov	r2, r3
 800c242:	f240 439d 	movw	r3, #1181	; 0x49d
 800c246:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c248:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	da10      	bge.n	800c272 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c250:	78fb      	ldrb	r3, [r7, #3]
 800c252:	015a      	lsls	r2, r3, #5
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	4413      	add	r3, r2
 800c258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	78fa      	ldrb	r2, [r7, #3]
 800c260:	0151      	lsls	r1, r2, #5
 800c262:	693a      	ldr	r2, [r7, #16]
 800c264:	440a      	add	r2, r1
 800c266:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c26a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c26e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c270:	e057      	b.n	800c322 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d051      	beq.n	800c322 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c27e:	78fb      	ldrb	r3, [r7, #3]
 800c280:	015a      	lsls	r2, r3, #5
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	4413      	add	r3, r2
 800c286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	78fa      	ldrb	r2, [r7, #3]
 800c28e:	0151      	lsls	r1, r2, #5
 800c290:	693a      	ldr	r2, [r7, #16]
 800c292:	440a      	add	r2, r1
 800c294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c298:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c29c:	60d3      	str	r3, [r2, #12]
      break;
 800c29e:	e040      	b.n	800c322 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c2a0:	78fb      	ldrb	r3, [r7, #3]
 800c2a2:	015a      	lsls	r2, r3, #5
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	f240 639d 	movw	r3, #1693	; 0x69d
 800c2b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c2b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	da34      	bge.n	800c326 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c2bc:	78fb      	ldrb	r3, [r7, #3]
 800c2be:	015a      	lsls	r2, r3, #5
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	78fa      	ldrb	r2, [r7, #3]
 800c2cc:	0151      	lsls	r1, r2, #5
 800c2ce:	693a      	ldr	r2, [r7, #16]
 800c2d0:	440a      	add	r2, r1
 800c2d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2da:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c2dc:	e023      	b.n	800c326 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c2de:	78fb      	ldrb	r3, [r7, #3]
 800c2e0:	015a      	lsls	r2, r3, #5
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	f240 2325 	movw	r3, #549	; 0x225
 800c2f0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c2f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	da17      	bge.n	800c32a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c2fa:	78fb      	ldrb	r3, [r7, #3]
 800c2fc:	015a      	lsls	r2, r3, #5
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	4413      	add	r3, r2
 800c302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	78fa      	ldrb	r2, [r7, #3]
 800c30a:	0151      	lsls	r1, r2, #5
 800c30c:	693a      	ldr	r2, [r7, #16]
 800c30e:	440a      	add	r2, r1
 800c310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c314:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c318:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c31a:	e006      	b.n	800c32a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c31c:	2301      	movs	r3, #1
 800c31e:	77fb      	strb	r3, [r7, #31]
      break;
 800c320:	e004      	b.n	800c32c <USB_HC_Init+0x14c>
      break;
 800c322:	bf00      	nop
 800c324:	e002      	b.n	800c32c <USB_HC_Init+0x14c>
      break;
 800c326:	bf00      	nop
 800c328:	e000      	b.n	800c32c <USB_HC_Init+0x14c>
      break;
 800c32a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c32c:	78fb      	ldrb	r3, [r7, #3]
 800c32e:	015a      	lsls	r2, r3, #5
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	4413      	add	r3, r2
 800c334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	78fa      	ldrb	r2, [r7, #3]
 800c33c:	0151      	lsls	r1, r2, #5
 800c33e:	693a      	ldr	r2, [r7, #16]
 800c340:	440a      	add	r2, r1
 800c342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c346:	f043 0302 	orr.w	r3, r3, #2
 800c34a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c352:	699a      	ldr	r2, [r3, #24]
 800c354:	78fb      	ldrb	r3, [r7, #3]
 800c356:	f003 030f 	and.w	r3, r3, #15
 800c35a:	2101      	movs	r1, #1
 800c35c:	fa01 f303 	lsl.w	r3, r1, r3
 800c360:	6939      	ldr	r1, [r7, #16]
 800c362:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c366:	4313      	orrs	r3, r2
 800c368:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	699b      	ldr	r3, [r3, #24]
 800c36e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c376:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	da03      	bge.n	800c386 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c37e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c382:	61bb      	str	r3, [r7, #24]
 800c384:	e001      	b.n	800c38a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800c386:	2300      	movs	r3, #0
 800c388:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f7ff feff 	bl	800c18e <USB_GetHostSpeed>
 800c390:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c392:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c396:	2b02      	cmp	r3, #2
 800c398:	d106      	bne.n	800c3a8 <USB_HC_Init+0x1c8>
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2b02      	cmp	r3, #2
 800c39e:	d003      	beq.n	800c3a8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c3a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c3a4:	617b      	str	r3, [r7, #20]
 800c3a6:	e001      	b.n	800c3ac <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c3ac:	787b      	ldrb	r3, [r7, #1]
 800c3ae:	059b      	lsls	r3, r3, #22
 800c3b0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c3b4:	78bb      	ldrb	r3, [r7, #2]
 800c3b6:	02db      	lsls	r3, r3, #11
 800c3b8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c3bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c3be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c3c2:	049b      	lsls	r3, r3, #18
 800c3c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c3c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c3ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c3cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c3d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c3d6:	78fb      	ldrb	r3, [r7, #3]
 800c3d8:	0159      	lsls	r1, r3, #5
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	440b      	add	r3, r1
 800c3de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3e2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c3e8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c3ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c3ee:	2b03      	cmp	r3, #3
 800c3f0:	d003      	beq.n	800c3fa <USB_HC_Init+0x21a>
 800c3f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d10f      	bne.n	800c41a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c3fa:	78fb      	ldrb	r3, [r7, #3]
 800c3fc:	015a      	lsls	r2, r3, #5
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	4413      	add	r3, r2
 800c402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	78fa      	ldrb	r2, [r7, #3]
 800c40a:	0151      	lsls	r1, r2, #5
 800c40c:	693a      	ldr	r2, [r7, #16]
 800c40e:	440a      	add	r2, r1
 800c410:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c418:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c41a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3720      	adds	r7, #32
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b08c      	sub	sp, #48	; 0x30
 800c428:	af02      	add	r7, sp, #8
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	4613      	mov	r3, r2
 800c430:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	785b      	ldrb	r3, [r3, #1]
 800c43a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c43c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c440:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d02d      	beq.n	800c4aa <USB_HC_StartXfer+0x86>
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	791b      	ldrb	r3, [r3, #4]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d129      	bne.n	800c4aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c456:	79fb      	ldrb	r3, [r7, #7]
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d117      	bne.n	800c48c <USB_HC_StartXfer+0x68>
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	79db      	ldrb	r3, [r3, #7]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d003      	beq.n	800c46c <USB_HC_StartXfer+0x48>
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	79db      	ldrb	r3, [r3, #7]
 800c468:	2b02      	cmp	r3, #2
 800c46a:	d10f      	bne.n	800c48c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	015a      	lsls	r2, r3, #5
 800c470:	6a3b      	ldr	r3, [r7, #32]
 800c472:	4413      	add	r3, r2
 800c474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	69fa      	ldr	r2, [r7, #28]
 800c47c:	0151      	lsls	r1, r2, #5
 800c47e:	6a3a      	ldr	r2, [r7, #32]
 800c480:	440a      	add	r2, r1
 800c482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c48a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c48c:	79fb      	ldrb	r3, [r7, #7]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10b      	bne.n	800c4aa <USB_HC_StartXfer+0x86>
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	795b      	ldrb	r3, [r3, #5]
 800c496:	2b01      	cmp	r3, #1
 800c498:	d107      	bne.n	800c4aa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	785b      	ldrb	r3, [r3, #1]
 800c49e:	4619      	mov	r1, r3
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f000 fa0f 	bl	800c8c4 <USB_DoPing>
      return HAL_OK;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	e0f8      	b.n	800c69c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	695b      	ldr	r3, [r3, #20]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d018      	beq.n	800c4e4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	695b      	ldr	r3, [r3, #20]
 800c4b6:	68ba      	ldr	r2, [r7, #8]
 800c4b8:	8912      	ldrh	r2, [r2, #8]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	3b01      	subs	r3, #1
 800c4be:	68ba      	ldr	r2, [r7, #8]
 800c4c0:	8912      	ldrh	r2, [r2, #8]
 800c4c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4c6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c4c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c4ca:	8b7b      	ldrh	r3, [r7, #26]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d90b      	bls.n	800c4e8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c4d0:	8b7b      	ldrh	r3, [r7, #26]
 800c4d2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c4d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c4d6:	68ba      	ldr	r2, [r7, #8]
 800c4d8:	8912      	ldrh	r2, [r2, #8]
 800c4da:	fb03 f202 	mul.w	r2, r3, r2
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	611a      	str	r2, [r3, #16]
 800c4e2:	e001      	b.n	800c4e8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	78db      	ldrb	r3, [r3, #3]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d007      	beq.n	800c500 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c4f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	8912      	ldrh	r2, [r2, #8]
 800c4f6:	fb03 f202 	mul.w	r2, r3, r2
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	611a      	str	r2, [r3, #16]
 800c4fe:	e003      	b.n	800c508 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	695a      	ldr	r2, [r3, #20]
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c510:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c512:	04d9      	lsls	r1, r3, #19
 800c514:	4b63      	ldr	r3, [pc, #396]	; (800c6a4 <USB_HC_StartXfer+0x280>)
 800c516:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c518:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	7a9b      	ldrb	r3, [r3, #10]
 800c51e:	075b      	lsls	r3, r3, #29
 800c520:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c524:	69f9      	ldr	r1, [r7, #28]
 800c526:	0148      	lsls	r0, r1, #5
 800c528:	6a39      	ldr	r1, [r7, #32]
 800c52a:	4401      	add	r1, r0
 800c52c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c530:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c532:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c534:	79fb      	ldrb	r3, [r7, #7]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d009      	beq.n	800c54e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	68d9      	ldr	r1, [r3, #12]
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	015a      	lsls	r2, r3, #5
 800c542:	6a3b      	ldr	r3, [r7, #32]
 800c544:	4413      	add	r3, r2
 800c546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c54a:	460a      	mov	r2, r1
 800c54c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c54e:	6a3b      	ldr	r3, [r7, #32]
 800c550:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	f003 0301 	and.w	r3, r3, #1
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	bf0c      	ite	eq
 800c55e:	2301      	moveq	r3, #1
 800c560:	2300      	movne	r3, #0
 800c562:	b2db      	uxtb	r3, r3
 800c564:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	015a      	lsls	r2, r3, #5
 800c56a:	6a3b      	ldr	r3, [r7, #32]
 800c56c:	4413      	add	r3, r2
 800c56e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	69fa      	ldr	r2, [r7, #28]
 800c576:	0151      	lsls	r1, r2, #5
 800c578:	6a3a      	ldr	r2, [r7, #32]
 800c57a:	440a      	add	r2, r1
 800c57c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c580:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c584:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	015a      	lsls	r2, r3, #5
 800c58a:	6a3b      	ldr	r3, [r7, #32]
 800c58c:	4413      	add	r3, r2
 800c58e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	7e7b      	ldrb	r3, [r7, #25]
 800c596:	075b      	lsls	r3, r3, #29
 800c598:	69f9      	ldr	r1, [r7, #28]
 800c59a:	0148      	lsls	r0, r1, #5
 800c59c:	6a39      	ldr	r1, [r7, #32]
 800c59e:	4401      	add	r1, r0
 800c5a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	015a      	lsls	r2, r3, #5
 800c5ac:	6a3b      	ldr	r3, [r7, #32]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c5be:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	78db      	ldrb	r3, [r3, #3]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d004      	beq.n	800c5d2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5ce:	613b      	str	r3, [r7, #16]
 800c5d0:	e003      	b.n	800c5da <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c5d8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c5e0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	015a      	lsls	r2, r3, #5
 800c5e6:	6a3b      	ldr	r3, [r7, #32]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c5f4:	79fb      	ldrb	r3, [r7, #7]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d001      	beq.n	800c5fe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	e04e      	b.n	800c69c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	78db      	ldrb	r3, [r3, #3]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d149      	bne.n	800c69a <USB_HC_StartXfer+0x276>
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	695b      	ldr	r3, [r3, #20]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d045      	beq.n	800c69a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	79db      	ldrb	r3, [r3, #7]
 800c612:	2b03      	cmp	r3, #3
 800c614:	d830      	bhi.n	800c678 <USB_HC_StartXfer+0x254>
 800c616:	a201      	add	r2, pc, #4	; (adr r2, 800c61c <USB_HC_StartXfer+0x1f8>)
 800c618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c61c:	0800c62d 	.word	0x0800c62d
 800c620:	0800c651 	.word	0x0800c651
 800c624:	0800c62d 	.word	0x0800c62d
 800c628:	0800c651 	.word	0x0800c651
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	695b      	ldr	r3, [r3, #20]
 800c630:	3303      	adds	r3, #3
 800c632:	089b      	lsrs	r3, r3, #2
 800c634:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c636:	8afa      	ldrh	r2, [r7, #22]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	429a      	cmp	r2, r3
 800c640:	d91c      	bls.n	800c67c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	699b      	ldr	r3, [r3, #24]
 800c646:	f043 0220 	orr.w	r2, r3, #32
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	619a      	str	r2, [r3, #24]
        }
        break;
 800c64e:	e015      	b.n	800c67c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	695b      	ldr	r3, [r3, #20]
 800c654:	3303      	adds	r3, #3
 800c656:	089b      	lsrs	r3, r3, #2
 800c658:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c65a:	8afa      	ldrh	r2, [r7, #22]
 800c65c:	6a3b      	ldr	r3, [r7, #32]
 800c65e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c662:	691b      	ldr	r3, [r3, #16]
 800c664:	b29b      	uxth	r3, r3
 800c666:	429a      	cmp	r2, r3
 800c668:	d90a      	bls.n	800c680 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	699b      	ldr	r3, [r3, #24]
 800c66e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	619a      	str	r2, [r3, #24]
        }
        break;
 800c676:	e003      	b.n	800c680 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c678:	bf00      	nop
 800c67a:	e002      	b.n	800c682 <USB_HC_StartXfer+0x25e>
        break;
 800c67c:	bf00      	nop
 800c67e:	e000      	b.n	800c682 <USB_HC_StartXfer+0x25e>
        break;
 800c680:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	68d9      	ldr	r1, [r3, #12]
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	785a      	ldrb	r2, [r3, #1]
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	695b      	ldr	r3, [r3, #20]
 800c68e:	b29b      	uxth	r3, r3
 800c690:	2000      	movs	r0, #0
 800c692:	9000      	str	r0, [sp, #0]
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f7ff fb31 	bl	800bcfc <USB_WritePacket>
  }

  return HAL_OK;
 800c69a:	2300      	movs	r3, #0
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3728      	adds	r7, #40	; 0x28
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	1ff80000 	.word	0x1ff80000

0800c6a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6ba:	695b      	ldr	r3, [r3, #20]
 800c6bc:	b29b      	uxth	r3, r3
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3714      	adds	r7, #20
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr

0800c6ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c6ca:	b480      	push	{r7}
 800c6cc:	b089      	sub	sp, #36	; 0x24
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800c6da:	78fb      	ldrb	r3, [r7, #3]
 800c6dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	015a      	lsls	r2, r3, #5
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	0c9b      	lsrs	r3, r3, #18
 800c6f2:	f003 0303 	and.w	r3, r3, #3
 800c6f6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	015a      	lsls	r2, r3, #5
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	4413      	add	r3, r2
 800c700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	0fdb      	lsrs	r3, r3, #31
 800c708:	f003 0301 	and.w	r3, r3, #1
 800c70c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	f003 0320 	and.w	r3, r3, #32
 800c716:	2b20      	cmp	r3, #32
 800c718:	d104      	bne.n	800c724 <USB_HC_Halt+0x5a>
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d101      	bne.n	800c724 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c720:	2300      	movs	r3, #0
 800c722:	e0c8      	b.n	800c8b6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d002      	beq.n	800c730 <USB_HC_Halt+0x66>
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	d163      	bne.n	800c7f8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	015a      	lsls	r2, r3, #5
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	4413      	add	r3, r2
 800c738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	69ba      	ldr	r2, [r7, #24]
 800c740:	0151      	lsls	r1, r2, #5
 800c742:	69fa      	ldr	r2, [r7, #28]
 800c744:	440a      	add	r2, r1
 800c746:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c74a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c74e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	f003 0320 	and.w	r3, r3, #32
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f040 80ab 	bne.w	800c8b4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c762:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c766:	2b00      	cmp	r3, #0
 800c768:	d133      	bne.n	800c7d2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	015a      	lsls	r2, r3, #5
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	4413      	add	r3, r2
 800c772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	69ba      	ldr	r2, [r7, #24]
 800c77a:	0151      	lsls	r1, r2, #5
 800c77c:	69fa      	ldr	r2, [r7, #28]
 800c77e:	440a      	add	r2, r1
 800c780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c788:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	015a      	lsls	r2, r3, #5
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	4413      	add	r3, r2
 800c792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	69ba      	ldr	r2, [r7, #24]
 800c79a:	0151      	lsls	r1, r2, #5
 800c79c:	69fa      	ldr	r2, [r7, #28]
 800c79e:	440a      	add	r2, r1
 800c7a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c7a8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c7b6:	d81d      	bhi.n	800c7f4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c7b8:	69bb      	ldr	r3, [r7, #24]
 800c7ba:	015a      	lsls	r2, r3, #5
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	4413      	add	r3, r2
 800c7c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7ce:	d0ec      	beq.n	800c7aa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c7d0:	e070      	b.n	800c8b4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	015a      	lsls	r2, r3, #5
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	4413      	add	r3, r2
 800c7da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	69ba      	ldr	r2, [r7, #24]
 800c7e2:	0151      	lsls	r1, r2, #5
 800c7e4:	69fa      	ldr	r2, [r7, #28]
 800c7e6:	440a      	add	r2, r1
 800c7e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c7f0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c7f2:	e05f      	b.n	800c8b4 <USB_HC_Halt+0x1ea>
            break;
 800c7f4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c7f6:	e05d      	b.n	800c8b4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c7f8:	69bb      	ldr	r3, [r7, #24]
 800c7fa:	015a      	lsls	r2, r3, #5
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	4413      	add	r3, r2
 800c800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	69ba      	ldr	r2, [r7, #24]
 800c808:	0151      	lsls	r1, r2, #5
 800c80a:	69fa      	ldr	r2, [r7, #28]
 800c80c:	440a      	add	r2, r1
 800c80e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c812:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c816:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c824:	2b00      	cmp	r3, #0
 800c826:	d133      	bne.n	800c890 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c828:	69bb      	ldr	r3, [r7, #24]
 800c82a:	015a      	lsls	r2, r3, #5
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	4413      	add	r3, r2
 800c830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	69ba      	ldr	r2, [r7, #24]
 800c838:	0151      	lsls	r1, r2, #5
 800c83a:	69fa      	ldr	r2, [r7, #28]
 800c83c:	440a      	add	r2, r1
 800c83e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c842:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c846:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c848:	69bb      	ldr	r3, [r7, #24]
 800c84a:	015a      	lsls	r2, r3, #5
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	4413      	add	r3, r2
 800c850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	69ba      	ldr	r2, [r7, #24]
 800c858:	0151      	lsls	r1, r2, #5
 800c85a:	69fa      	ldr	r2, [r7, #28]
 800c85c:	440a      	add	r2, r1
 800c85e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c862:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c866:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	3301      	adds	r3, #1
 800c86c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c874:	d81d      	bhi.n	800c8b2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c876:	69bb      	ldr	r3, [r7, #24]
 800c878:	015a      	lsls	r2, r3, #5
 800c87a:	69fb      	ldr	r3, [r7, #28]
 800c87c:	4413      	add	r3, r2
 800c87e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c88c:	d0ec      	beq.n	800c868 <USB_HC_Halt+0x19e>
 800c88e:	e011      	b.n	800c8b4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	015a      	lsls	r2, r3, #5
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	4413      	add	r3, r2
 800c898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	69ba      	ldr	r2, [r7, #24]
 800c8a0:	0151      	lsls	r1, r2, #5
 800c8a2:	69fa      	ldr	r2, [r7, #28]
 800c8a4:	440a      	add	r2, r1
 800c8a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c8ae:	6013      	str	r3, [r2, #0]
 800c8b0:	e000      	b.n	800c8b4 <USB_HC_Halt+0x1ea>
          break;
 800c8b2:	bf00      	nop
    }
  }

  return HAL_OK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3724      	adds	r7, #36	; 0x24
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr
	...

0800c8c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b087      	sub	sp, #28
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c8d4:	78fb      	ldrb	r3, [r7, #3]
 800c8d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	04da      	lsls	r2, r3, #19
 800c8e0:	4b15      	ldr	r3, [pc, #84]	; (800c938 <USB_DoPing+0x74>)
 800c8e2:	4013      	ands	r3, r2
 800c8e4:	693a      	ldr	r2, [r7, #16]
 800c8e6:	0151      	lsls	r1, r2, #5
 800c8e8:	697a      	ldr	r2, [r7, #20]
 800c8ea:	440a      	add	r2, r1
 800c8ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c8f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	015a      	lsls	r2, r3, #5
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c90c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c914:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	015a      	lsls	r2, r3, #5
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	4413      	add	r3, r2
 800c91e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c922:	461a      	mov	r2, r3
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	371c      	adds	r7, #28
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	1ff80000 	.word	0x1ff80000

0800c93c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b088      	sub	sp, #32
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c944:	2300      	movs	r3, #0
 800c946:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800c94c:	2300      	movs	r3, #0
 800c94e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f7ff f911 	bl	800bb78 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c956:	2110      	movs	r1, #16
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f7ff f96b 	bl	800bc34 <USB_FlushTxFifo>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d001      	beq.n	800c968 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800c964:	2301      	movs	r3, #1
 800c966:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f7ff f997 	bl	800bc9c <USB_FlushRxFifo>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c978:	2300      	movs	r3, #0
 800c97a:	61bb      	str	r3, [r7, #24]
 800c97c:	e01f      	b.n	800c9be <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800c97e:	69bb      	ldr	r3, [r7, #24]
 800c980:	015a      	lsls	r2, r3, #5
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	4413      	add	r3, r2
 800c986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c994:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c99c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c9a4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	015a      	lsls	r2, r3, #5
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c9b8:	69bb      	ldr	r3, [r7, #24]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	61bb      	str	r3, [r7, #24]
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	2b0f      	cmp	r3, #15
 800c9c2:	d9dc      	bls.n	800c97e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	61bb      	str	r3, [r7, #24]
 800c9c8:	e034      	b.n	800ca34 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	015a      	lsls	r2, r3, #5
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c9e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c9e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c9f0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	015a      	lsls	r2, r3, #5
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9fe:	461a      	mov	r2, r3
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	3301      	adds	r3, #1
 800ca08:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca10:	d80c      	bhi.n	800ca2c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	015a      	lsls	r2, r3, #5
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	4413      	add	r3, r2
 800ca1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca28:	d0ec      	beq.n	800ca04 <USB_StopHost+0xc8>
 800ca2a:	e000      	b.n	800ca2e <USB_StopHost+0xf2>
        break;
 800ca2c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	3301      	adds	r3, #1
 800ca32:	61bb      	str	r3, [r7, #24]
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	2b0f      	cmp	r3, #15
 800ca38:	d9c7      	bls.n	800c9ca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca40:	461a      	mov	r2, r3
 800ca42:	f04f 33ff 	mov.w	r3, #4294967295
 800ca46:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca4e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f7ff f880 	bl	800bb56 <USB_EnableGlobalInt>

  return ret;
 800ca56:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3720      	adds	r7, #32
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ca60:	b590      	push	{r4, r7, lr}
 800ca62:	b089      	sub	sp, #36	; 0x24
 800ca64:	af04      	add	r7, sp, #16
 800ca66:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ca68:	2301      	movs	r3, #1
 800ca6a:	2202      	movs	r2, #2
 800ca6c:	2102      	movs	r1, #2
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 fc66 	bl	800d340 <USBH_FindInterface>
 800ca74:	4603      	mov	r3, r0
 800ca76:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ca78:	7bfb      	ldrb	r3, [r7, #15]
 800ca7a:	2bff      	cmp	r3, #255	; 0xff
 800ca7c:	d002      	beq.n	800ca84 <USBH_CDC_InterfaceInit+0x24>
 800ca7e:	7bfb      	ldrb	r3, [r7, #15]
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d901      	bls.n	800ca88 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ca84:	2302      	movs	r3, #2
 800ca86:	e13d      	b.n	800cd04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ca88:	7bfb      	ldrb	r3, [r7, #15]
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f000 fc3b 	bl	800d308 <USBH_SelectInterface>
 800ca92:	4603      	mov	r3, r0
 800ca94:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ca96:	7bbb      	ldrb	r3, [r7, #14]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d001      	beq.n	800caa0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	e131      	b.n	800cd04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800caa6:	2050      	movs	r0, #80	; 0x50
 800caa8:	f002 fb3c 	bl	800f124 <malloc>
 800caac:	4603      	mov	r3, r0
 800caae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cab6:	69db      	ldr	r3, [r3, #28]
 800cab8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d101      	bne.n	800cac4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800cac0:	2302      	movs	r3, #2
 800cac2:	e11f      	b.n	800cd04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800cac4:	2250      	movs	r2, #80	; 0x50
 800cac6:	2100      	movs	r1, #0
 800cac8:	68b8      	ldr	r0, [r7, #8]
 800caca:	f002 fb49 	bl	800f160 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800cace:	7bfb      	ldrb	r3, [r7, #15]
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	211a      	movs	r1, #26
 800cad4:	fb01 f303 	mul.w	r3, r1, r3
 800cad8:	4413      	add	r3, r2
 800cada:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	b25b      	sxtb	r3, r3
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	da15      	bge.n	800cb12 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cae6:	7bfb      	ldrb	r3, [r7, #15]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	211a      	movs	r1, #26
 800caec:	fb01 f303 	mul.w	r3, r1, r3
 800caf0:	4413      	add	r3, r2
 800caf2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800caf6:	781a      	ldrb	r2, [r3, #0]
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cafc:	7bfb      	ldrb	r3, [r7, #15]
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	211a      	movs	r1, #26
 800cb02:	fb01 f303 	mul.w	r3, r1, r3
 800cb06:	4413      	add	r3, r2
 800cb08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cb0c:	881a      	ldrh	r2, [r3, #0]
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	785b      	ldrb	r3, [r3, #1]
 800cb16:	4619      	mov	r1, r3
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f001 ff2c 	bl	800e976 <USBH_AllocPipe>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	461a      	mov	r2, r3
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	7819      	ldrb	r1, [r3, #0]
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	7858      	ldrb	r0, [r3, #1]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cb3a:	68ba      	ldr	r2, [r7, #8]
 800cb3c:	8952      	ldrh	r2, [r2, #10]
 800cb3e:	9202      	str	r2, [sp, #8]
 800cb40:	2203      	movs	r2, #3
 800cb42:	9201      	str	r2, [sp, #4]
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	4623      	mov	r3, r4
 800cb48:	4602      	mov	r2, r0
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f001 fee4 	bl	800e918 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	2200      	movs	r2, #0
 800cb56:	4619      	mov	r1, r3
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f002 f9f3 	bl	800ef44 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800cb5e:	2300      	movs	r3, #0
 800cb60:	2200      	movs	r2, #0
 800cb62:	210a      	movs	r1, #10
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 fbeb 	bl	800d340 <USBH_FindInterface>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800cb6e:	7bfb      	ldrb	r3, [r7, #15]
 800cb70:	2bff      	cmp	r3, #255	; 0xff
 800cb72:	d002      	beq.n	800cb7a <USBH_CDC_InterfaceInit+0x11a>
 800cb74:	7bfb      	ldrb	r3, [r7, #15]
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d901      	bls.n	800cb7e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cb7a:	2302      	movs	r3, #2
 800cb7c:	e0c2      	b.n	800cd04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	211a      	movs	r1, #26
 800cb84:	fb01 f303 	mul.w	r3, r1, r3
 800cb88:	4413      	add	r3, r2
 800cb8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	b25b      	sxtb	r3, r3
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	da16      	bge.n	800cbc4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cb96:	7bfb      	ldrb	r3, [r7, #15]
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	211a      	movs	r1, #26
 800cb9c:	fb01 f303 	mul.w	r3, r1, r3
 800cba0:	4413      	add	r3, r2
 800cba2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cba6:	781a      	ldrb	r2, [r3, #0]
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	211a      	movs	r1, #26
 800cbb2:	fb01 f303 	mul.w	r3, r1, r3
 800cbb6:	4413      	add	r3, r2
 800cbb8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cbbc:	881a      	ldrh	r2, [r3, #0]
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	835a      	strh	r2, [r3, #26]
 800cbc2:	e015      	b.n	800cbf0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	211a      	movs	r1, #26
 800cbca:	fb01 f303 	mul.w	r3, r1, r3
 800cbce:	4413      	add	r3, r2
 800cbd0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cbd4:	781a      	ldrb	r2, [r3, #0]
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cbda:	7bfb      	ldrb	r3, [r7, #15]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	211a      	movs	r1, #26
 800cbe0:	fb01 f303 	mul.w	r3, r1, r3
 800cbe4:	4413      	add	r3, r2
 800cbe6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cbea:	881a      	ldrh	r2, [r3, #0]
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800cbf0:	7bfb      	ldrb	r3, [r7, #15]
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	211a      	movs	r1, #26
 800cbf6:	fb01 f303 	mul.w	r3, r1, r3
 800cbfa:	4413      	add	r3, r2
 800cbfc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	b25b      	sxtb	r3, r3
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	da16      	bge.n	800cc36 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800cc08:	7bfb      	ldrb	r3, [r7, #15]
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	211a      	movs	r1, #26
 800cc0e:	fb01 f303 	mul.w	r3, r1, r3
 800cc12:	4413      	add	r3, r2
 800cc14:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cc18:	781a      	ldrb	r2, [r3, #0]
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800cc1e:	7bfb      	ldrb	r3, [r7, #15]
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	211a      	movs	r1, #26
 800cc24:	fb01 f303 	mul.w	r3, r1, r3
 800cc28:	4413      	add	r3, r2
 800cc2a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800cc2e:	881a      	ldrh	r2, [r3, #0]
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	835a      	strh	r2, [r3, #26]
 800cc34:	e015      	b.n	800cc62 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800cc36:	7bfb      	ldrb	r3, [r7, #15]
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	211a      	movs	r1, #26
 800cc3c:	fb01 f303 	mul.w	r3, r1, r3
 800cc40:	4413      	add	r3, r2
 800cc42:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cc46:	781a      	ldrb	r2, [r3, #0]
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800cc4c:	7bfb      	ldrb	r3, [r7, #15]
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	211a      	movs	r1, #26
 800cc52:	fb01 f303 	mul.w	r3, r1, r3
 800cc56:	4413      	add	r3, r2
 800cc58:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800cc5c:	881a      	ldrh	r2, [r3, #0]
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	7b9b      	ldrb	r3, [r3, #14]
 800cc66:	4619      	mov	r1, r3
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f001 fe84 	bl	800e976 <USBH_AllocPipe>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	461a      	mov	r2, r3
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	7bdb      	ldrb	r3, [r3, #15]
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f001 fe7a 	bl	800e976 <USBH_AllocPipe>
 800cc82:	4603      	mov	r3, r0
 800cc84:	461a      	mov	r2, r3
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	7b59      	ldrb	r1, [r3, #13]
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	7b98      	ldrb	r0, [r3, #14]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cc9e:	68ba      	ldr	r2, [r7, #8]
 800cca0:	8b12      	ldrh	r2, [r2, #24]
 800cca2:	9202      	str	r2, [sp, #8]
 800cca4:	2202      	movs	r2, #2
 800cca6:	9201      	str	r2, [sp, #4]
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	4623      	mov	r3, r4
 800ccac:	4602      	mov	r2, r0
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f001 fe32 	bl	800e918 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	7b19      	ldrb	r1, [r3, #12]
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	7bd8      	ldrb	r0, [r3, #15]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	8b52      	ldrh	r2, [r2, #26]
 800cccc:	9202      	str	r2, [sp, #8]
 800ccce:	2202      	movs	r2, #2
 800ccd0:	9201      	str	r2, [sp, #4]
 800ccd2:	9300      	str	r3, [sp, #0]
 800ccd4:	4623      	mov	r3, r4
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f001 fe1d 	bl	800e918 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	2200      	movs	r2, #0
 800cce2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	7b5b      	ldrb	r3, [r3, #13]
 800ccea:	2200      	movs	r2, #0
 800ccec:	4619      	mov	r1, r3
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f002 f928 	bl	800ef44 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	7b1b      	ldrb	r3, [r3, #12]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f002 f921 	bl	800ef44 <USBH_LL_SetToggle>

  return USBH_OK;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3714      	adds	r7, #20
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd90      	pop	{r4, r7, pc}

0800cd0c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd1a:	69db      	ldr	r3, [r3, #28]
 800cd1c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00e      	beq.n	800cd44 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f001 fe12 	bl	800e956 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	4619      	mov	r1, r3
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f001 fe3d 	bl	800e9b8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2200      	movs	r2, #0
 800cd42:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	7b1b      	ldrb	r3, [r3, #12]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00e      	beq.n	800cd6a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	7b1b      	ldrb	r3, [r3, #12]
 800cd50:	4619      	mov	r1, r3
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f001 fdff 	bl	800e956 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	7b1b      	ldrb	r3, [r3, #12]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f001 fe2a 	bl	800e9b8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2200      	movs	r2, #0
 800cd68:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	7b5b      	ldrb	r3, [r3, #13]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d00e      	beq.n	800cd90 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	7b5b      	ldrb	r3, [r3, #13]
 800cd76:	4619      	mov	r1, r3
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f001 fdec 	bl	800e956 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	7b5b      	ldrb	r3, [r3, #13]
 800cd82:	4619      	mov	r1, r3
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f001 fe17 	bl	800e9b8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd96:	69db      	ldr	r3, [r3, #28]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00b      	beq.n	800cdb4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cda2:	69db      	ldr	r3, [r3, #28]
 800cda4:	4618      	mov	r0, r3
 800cda6:	f002 f9c5 	bl	800f134 <free>
    phost->pActiveClass->pData = 0U;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b084      	sub	sp, #16
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdcc:	69db      	ldr	r3, [r3, #28]
 800cdce:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	3340      	adds	r3, #64	; 0x40
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 f8b1 	bl	800cf3e <GetLineCoding>
 800cddc:	4603      	mov	r3, r0
 800cdde:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800cde0:	7afb      	ldrb	r3, [r7, #11]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d105      	bne.n	800cdf2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cdec:	2102      	movs	r1, #2
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800cdf2:	7afb      	ldrb	r3, [r7, #11]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ce04:	2301      	movs	r3, #1
 800ce06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce12:	69db      	ldr	r3, [r3, #28]
 800ce14:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ce1c:	2b04      	cmp	r3, #4
 800ce1e:	d877      	bhi.n	800cf10 <USBH_CDC_Process+0x114>
 800ce20:	a201      	add	r2, pc, #4	; (adr r2, 800ce28 <USBH_CDC_Process+0x2c>)
 800ce22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce26:	bf00      	nop
 800ce28:	0800ce3d 	.word	0x0800ce3d
 800ce2c:	0800ce43 	.word	0x0800ce43
 800ce30:	0800ce73 	.word	0x0800ce73
 800ce34:	0800cee7 	.word	0x0800cee7
 800ce38:	0800cef5 	.word	0x0800cef5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ce40:	e06d      	b.n	800cf1e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce46:	4619      	mov	r1, r3
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 f897 	bl	800cf7c <SetLineCoding>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ce52:	7bbb      	ldrb	r3, [r7, #14]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d104      	bne.n	800ce62 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	2202      	movs	r2, #2
 800ce5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ce60:	e058      	b.n	800cf14 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ce62:	7bbb      	ldrb	r3, [r7, #14]
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d055      	beq.n	800cf14 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	2204      	movs	r2, #4
 800ce6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ce70:	e050      	b.n	800cf14 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	3340      	adds	r3, #64	; 0x40
 800ce76:	4619      	mov	r1, r3
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f000 f860 	bl	800cf3e <GetLineCoding>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ce82:	7bbb      	ldrb	r3, [r7, #14]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d126      	bne.n	800ced6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce9a:	791b      	ldrb	r3, [r3, #4]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d13b      	bne.n	800cf18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ceaa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d133      	bne.n	800cf18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ceba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d12b      	bne.n	800cf18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cec8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d124      	bne.n	800cf18 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 f958 	bl	800d184 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ced4:	e020      	b.n	800cf18 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ced6:	7bbb      	ldrb	r3, [r7, #14]
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d01d      	beq.n	800cf18 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	2204      	movs	r2, #4
 800cee0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cee4:	e018      	b.n	800cf18 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 f867 	bl	800cfba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 f8da 	bl	800d0a6 <CDC_ProcessReception>
      break;
 800cef2:	e014      	b.n	800cf1e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800cef4:	2100      	movs	r1, #0
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 ffef 	bl	800deda <USBH_ClrFeature>
 800cefc:	4603      	mov	r3, r0
 800cefe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cf00:	7bbb      	ldrb	r3, [r7, #14]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d10a      	bne.n	800cf1c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800cf0e:	e005      	b.n	800cf1c <USBH_CDC_Process+0x120>

    default:
      break;
 800cf10:	bf00      	nop
 800cf12:	e004      	b.n	800cf1e <USBH_CDC_Process+0x122>
      break;
 800cf14:	bf00      	nop
 800cf16:	e002      	b.n	800cf1e <USBH_CDC_Process+0x122>
      break;
 800cf18:	bf00      	nop
 800cf1a:	e000      	b.n	800cf1e <USBH_CDC_Process+0x122>
      break;
 800cf1c:	bf00      	nop

  }

  return status;
 800cf1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3710      	adds	r7, #16
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	370c      	adds	r7, #12
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b082      	sub	sp, #8
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
 800cf46:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	22a1      	movs	r2, #161	; 0xa1
 800cf4c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2221      	movs	r2, #33	; 0x21
 800cf52:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2207      	movs	r2, #7
 800cf64:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	2207      	movs	r2, #7
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f001 fa81 	bl	800e474 <USBH_CtlReq>
 800cf72:	4603      	mov	r3, r0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3708      	adds	r7, #8
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2221      	movs	r2, #33	; 0x21
 800cf8a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2220      	movs	r2, #32
 800cf90:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2207      	movs	r2, #7
 800cfa2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	2207      	movs	r2, #7
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f001 fa62 	bl	800e474 <USBH_CtlReq>
 800cfb0:	4603      	mov	r3, r0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3708      	adds	r7, #8
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b086      	sub	sp, #24
 800cfbe:	af02      	add	r7, sp, #8
 800cfc0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cfc8:	69db      	ldr	r3, [r3, #28]
 800cfca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	d002      	beq.n	800cfe0 <CDC_ProcessTransmission+0x26>
 800cfda:	2b02      	cmp	r3, #2
 800cfdc:	d023      	beq.n	800d026 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800cfde:	e05e      	b.n	800d09e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	8b12      	ldrh	r2, [r2, #24]
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d90b      	bls.n	800d004 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	69d9      	ldr	r1, [r3, #28]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	8b1a      	ldrh	r2, [r3, #24]
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	7b5b      	ldrb	r3, [r3, #13]
 800cff8:	2001      	movs	r0, #1
 800cffa:	9000      	str	r0, [sp, #0]
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f001 fc48 	bl	800e892 <USBH_BulkSendData>
 800d002:	e00b      	b.n	800d01c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800d00c:	b29a      	uxth	r2, r3
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	7b5b      	ldrb	r3, [r3, #13]
 800d012:	2001      	movs	r0, #1
 800d014:	9000      	str	r0, [sp, #0]
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f001 fc3b 	bl	800e892 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2202      	movs	r2, #2
 800d020:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d024:	e03b      	b.n	800d09e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	7b5b      	ldrb	r3, [r3, #13]
 800d02a:	4619      	mov	r1, r3
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f001 ff5f 	bl	800eef0 <USBH_LL_GetURBState>
 800d032:	4603      	mov	r3, r0
 800d034:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800d036:	7afb      	ldrb	r3, [r7, #11]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d128      	bne.n	800d08e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d040:	68fa      	ldr	r2, [r7, #12]
 800d042:	8b12      	ldrh	r2, [r2, #24]
 800d044:	4293      	cmp	r3, r2
 800d046:	d90e      	bls.n	800d066 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	8b12      	ldrh	r2, [r2, #24]
 800d050:	1a9a      	subs	r2, r3, r2
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	69db      	ldr	r3, [r3, #28]
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	8b12      	ldrh	r2, [r2, #24]
 800d05e:	441a      	add	r2, r3
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	61da      	str	r2, [r3, #28]
 800d064:	e002      	b.n	800d06c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2200      	movs	r2, #0
 800d06a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d070:	2b00      	cmp	r3, #0
 800d072:	d004      	beq.n	800d07e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2201      	movs	r2, #1
 800d078:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d07c:	e00e      	b.n	800d09c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2200      	movs	r2, #0
 800d082:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 f868 	bl	800d15c <USBH_CDC_TransmitCallback>
      break;
 800d08c:	e006      	b.n	800d09c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800d08e:	7afb      	ldrb	r3, [r7, #11]
 800d090:	2b02      	cmp	r3, #2
 800d092:	d103      	bne.n	800d09c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2201      	movs	r2, #1
 800d098:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d09c:	bf00      	nop
  }
}
 800d09e:	bf00      	nop
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b086      	sub	sp, #24
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0b4:	69db      	ldr	r3, [r3, #28]
 800d0b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d0c2:	2b03      	cmp	r3, #3
 800d0c4:	d002      	beq.n	800d0cc <CDC_ProcessReception+0x26>
 800d0c6:	2b04      	cmp	r3, #4
 800d0c8:	d00e      	beq.n	800d0e8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800d0ca:	e043      	b.n	800d154 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	6a19      	ldr	r1, [r3, #32]
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	8b5a      	ldrh	r2, [r3, #26]
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	7b1b      	ldrb	r3, [r3, #12]
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f001 fbff 	bl	800e8dc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	2204      	movs	r2, #4
 800d0e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800d0e6:	e035      	b.n	800d154 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	7b1b      	ldrb	r3, [r3, #12]
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f001 fefe 	bl	800eef0 <USBH_LL_GetURBState>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800d0f8:	7cfb      	ldrb	r3, [r7, #19]
 800d0fa:	2b01      	cmp	r3, #1
 800d0fc:	d129      	bne.n	800d152 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	7b1b      	ldrb	r3, [r3, #12]
 800d102:	4619      	mov	r1, r3
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f001 fe61 	bl	800edcc <USBH_LL_GetLastXferSize>
 800d10a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d110:	68fa      	ldr	r2, [r7, #12]
 800d112:	429a      	cmp	r2, r3
 800d114:	d016      	beq.n	800d144 <CDC_ProcessReception+0x9e>
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	8b5b      	ldrh	r3, [r3, #26]
 800d11a:	461a      	mov	r2, r3
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	4293      	cmp	r3, r2
 800d120:	d910      	bls.n	800d144 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	1ad2      	subs	r2, r2, r3
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	6a1a      	ldr	r2, [r3, #32]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	441a      	add	r2, r3
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	2203      	movs	r2, #3
 800d13e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800d142:	e006      	b.n	800d152 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	2200      	movs	r2, #0
 800d148:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f80f 	bl	800d170 <USBH_CDC_ReceiveCallback>
      break;
 800d152:	bf00      	nop
  }
}
 800d154:	bf00      	nop
 800d156:	3718      	adds	r7, #24
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d164:	bf00      	nop
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d178:	bf00      	nop
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d18c:	bf00      	nop
 800d18e:	370c      	adds	r7, #12
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	4613      	mov	r3, r2
 800d1a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d101      	bne.n	800d1b0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d1ac:	2302      	movs	r3, #2
 800d1ae:	e029      	b.n	800d204 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	79fa      	ldrb	r2, [r7, #7]
 800d1b4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	f000 f81f 	bl	800d20c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d003      	beq.n	800d1fc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	68ba      	ldr	r2, [r7, #8]
 800d1f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800d1fc:	68f8      	ldr	r0, [r7, #12]
 800d1fe:	f001 fd31 	bl	800ec64 <USBH_LL_Init>

  return USBH_OK;
 800d202:	2300      	movs	r3, #0
}
 800d204:	4618      	mov	r0, r3
 800d206:	3710      	adds	r7, #16
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b085      	sub	sp, #20
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d214:	2300      	movs	r3, #0
 800d216:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d218:	2300      	movs	r3, #0
 800d21a:	60fb      	str	r3, [r7, #12]
 800d21c:	e009      	b.n	800d232 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	33e0      	adds	r3, #224	; 0xe0
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	4413      	add	r3, r2
 800d228:	2200      	movs	r2, #0
 800d22a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	3301      	adds	r3, #1
 800d230:	60fb      	str	r3, [r7, #12]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2b0f      	cmp	r3, #15
 800d236:	d9f2      	bls.n	800d21e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d238:	2300      	movs	r3, #0
 800d23a:	60fb      	str	r3, [r7, #12]
 800d23c:	e009      	b.n	800d252 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	4413      	add	r3, r2
 800d244:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d248:	2200      	movs	r2, #0
 800d24a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	3301      	adds	r3, #1
 800d250:	60fb      	str	r3, [r7, #12]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d258:	d3f1      	bcc.n	800d23e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2200      	movs	r2, #0
 800d25e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2200      	movs	r2, #0
 800d264:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2201      	movs	r2, #1
 800d26a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2200      	movs	r2, #0
 800d270:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2201      	movs	r2, #1
 800d278:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2240      	movs	r2, #64	; 0x40
 800d27e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2200      	movs	r2, #0
 800d284:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2200      	movs	r2, #0
 800d28a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2201      	movs	r2, #1
 800d292:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d2a6:	2300      	movs	r3, #0
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3714      	adds	r7, #20
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b085      	sub	sp, #20
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d016      	beq.n	800d2f6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d10e      	bne.n	800d2f0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d2d8:	1c59      	adds	r1, r3, #1
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	33de      	adds	r3, #222	; 0xde
 800d2e4:	6839      	ldr	r1, [r7, #0]
 800d2e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	73fb      	strb	r3, [r7, #15]
 800d2ee:	e004      	b.n	800d2fa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d2f0:	2302      	movs	r3, #2
 800d2f2:	73fb      	strb	r3, [r7, #15]
 800d2f4:	e001      	b.n	800d2fa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d2f6:	2302      	movs	r3, #2
 800d2f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3714      	adds	r7, #20
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr

0800d308 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	460b      	mov	r3, r1
 800d312:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d314:	2300      	movs	r3, #0
 800d316:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d31e:	78fa      	ldrb	r2, [r7, #3]
 800d320:	429a      	cmp	r2, r3
 800d322:	d204      	bcs.n	800d32e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	78fa      	ldrb	r2, [r7, #3]
 800d328:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d32c:	e001      	b.n	800d332 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d32e:	2302      	movs	r3, #2
 800d330:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d332:	7bfb      	ldrb	r3, [r7, #15]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3714      	adds	r7, #20
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d340:	b480      	push	{r7}
 800d342:	b087      	sub	sp, #28
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	4608      	mov	r0, r1
 800d34a:	4611      	mov	r1, r2
 800d34c:	461a      	mov	r2, r3
 800d34e:	4603      	mov	r3, r0
 800d350:	70fb      	strb	r3, [r7, #3]
 800d352:	460b      	mov	r3, r1
 800d354:	70bb      	strb	r3, [r7, #2]
 800d356:	4613      	mov	r3, r2
 800d358:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d35a:	2300      	movs	r3, #0
 800d35c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d35e:	2300      	movs	r3, #0
 800d360:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d368:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d36a:	e025      	b.n	800d3b8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d36c:	7dfb      	ldrb	r3, [r7, #23]
 800d36e:	221a      	movs	r2, #26
 800d370:	fb02 f303 	mul.w	r3, r2, r3
 800d374:	3308      	adds	r3, #8
 800d376:	68fa      	ldr	r2, [r7, #12]
 800d378:	4413      	add	r3, r2
 800d37a:	3302      	adds	r3, #2
 800d37c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	795b      	ldrb	r3, [r3, #5]
 800d382:	78fa      	ldrb	r2, [r7, #3]
 800d384:	429a      	cmp	r2, r3
 800d386:	d002      	beq.n	800d38e <USBH_FindInterface+0x4e>
 800d388:	78fb      	ldrb	r3, [r7, #3]
 800d38a:	2bff      	cmp	r3, #255	; 0xff
 800d38c:	d111      	bne.n	800d3b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d392:	78ba      	ldrb	r2, [r7, #2]
 800d394:	429a      	cmp	r2, r3
 800d396:	d002      	beq.n	800d39e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d398:	78bb      	ldrb	r3, [r7, #2]
 800d39a:	2bff      	cmp	r3, #255	; 0xff
 800d39c:	d109      	bne.n	800d3b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d3a2:	787a      	ldrb	r2, [r7, #1]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d002      	beq.n	800d3ae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d3a8:	787b      	ldrb	r3, [r7, #1]
 800d3aa:	2bff      	cmp	r3, #255	; 0xff
 800d3ac:	d101      	bne.n	800d3b2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d3ae:	7dfb      	ldrb	r3, [r7, #23]
 800d3b0:	e006      	b.n	800d3c0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d3b2:	7dfb      	ldrb	r3, [r7, #23]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d3b8:	7dfb      	ldrb	r3, [r7, #23]
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d9d6      	bls.n	800d36c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d3be:	23ff      	movs	r3, #255	; 0xff
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	371c      	adds	r7, #28
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr

0800d3cc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f001 fc81 	bl	800ecdc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800d3da:	2101      	movs	r1, #1
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f001 fd9a 	bl	800ef16 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b088      	sub	sp, #32
 800d3f0:	af04      	add	r7, sp, #16
 800d3f2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d3f4:	2302      	movs	r3, #2
 800d3f6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d402:	b2db      	uxtb	r3, r3
 800d404:	2b01      	cmp	r3, #1
 800d406:	d102      	bne.n	800d40e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2203      	movs	r2, #3
 800d40c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	b2db      	uxtb	r3, r3
 800d414:	2b0b      	cmp	r3, #11
 800d416:	f200 81be 	bhi.w	800d796 <USBH_Process+0x3aa>
 800d41a:	a201      	add	r2, pc, #4	; (adr r2, 800d420 <USBH_Process+0x34>)
 800d41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d420:	0800d451 	.word	0x0800d451
 800d424:	0800d483 	.word	0x0800d483
 800d428:	0800d4eb 	.word	0x0800d4eb
 800d42c:	0800d731 	.word	0x0800d731
 800d430:	0800d797 	.word	0x0800d797
 800d434:	0800d58f 	.word	0x0800d58f
 800d438:	0800d6d7 	.word	0x0800d6d7
 800d43c:	0800d5c5 	.word	0x0800d5c5
 800d440:	0800d5e5 	.word	0x0800d5e5
 800d444:	0800d605 	.word	0x0800d605
 800d448:	0800d649 	.word	0x0800d649
 800d44c:	0800d719 	.word	0x0800d719
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d456:	b2db      	uxtb	r3, r3
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f000 819e 	beq.w	800d79a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2201      	movs	r2, #1
 800d462:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d464:	20c8      	movs	r0, #200	; 0xc8
 800d466:	f001 fd9d 	bl	800efa4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f001 fc93 	bl	800ed96 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2200      	movs	r2, #0
 800d474:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d480:	e18b      	b.n	800d79a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d107      	bne.n	800d49c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2200      	movs	r2, #0
 800d490:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2202      	movs	r2, #2
 800d498:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d49a:	e18d      	b.n	800d7b8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d4a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d4a6:	d914      	bls.n	800d4d2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	b2da      	uxtb	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d4be:	2b03      	cmp	r3, #3
 800d4c0:	d903      	bls.n	800d4ca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	220d      	movs	r2, #13
 800d4c6:	701a      	strb	r2, [r3, #0]
      break;
 800d4c8:	e176      	b.n	800d7b8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	701a      	strb	r2, [r3, #0]
      break;
 800d4d0:	e172      	b.n	800d7b8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d4d8:	f103 020a 	add.w	r2, r3, #10
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d4e2:	200a      	movs	r0, #10
 800d4e4:	f001 fd5e 	bl	800efa4 <USBH_Delay>
      break;
 800d4e8:	e166      	b.n	800d7b8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d005      	beq.n	800d500 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d4fa:	2104      	movs	r1, #4
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d500:	2064      	movs	r0, #100	; 0x64
 800d502:	f001 fd4f 	bl	800efa4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f001 fc1e 	bl	800ed48 <USBH_LL_GetSpeed>
 800d50c:	4603      	mov	r3, r0
 800d50e:	461a      	mov	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2205      	movs	r2, #5
 800d51a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d51c:	2100      	movs	r1, #0
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f001 fa29 	bl	800e976 <USBH_AllocPipe>
 800d524:	4603      	mov	r3, r0
 800d526:	461a      	mov	r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d52c:	2180      	movs	r1, #128	; 0x80
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f001 fa21 	bl	800e976 <USBH_AllocPipe>
 800d534:	4603      	mov	r3, r0
 800d536:	461a      	mov	r2, r3
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	7919      	ldrb	r1, [r3, #4]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d550:	b292      	uxth	r2, r2
 800d552:	9202      	str	r2, [sp, #8]
 800d554:	2200      	movs	r2, #0
 800d556:	9201      	str	r2, [sp, #4]
 800d558:	9300      	str	r3, [sp, #0]
 800d55a:	4603      	mov	r3, r0
 800d55c:	2280      	movs	r2, #128	; 0x80
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f001 f9da 	bl	800e918 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	7959      	ldrb	r1, [r3, #5]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d578:	b292      	uxth	r2, r2
 800d57a:	9202      	str	r2, [sp, #8]
 800d57c:	2200      	movs	r2, #0
 800d57e:	9201      	str	r2, [sp, #4]
 800d580:	9300      	str	r3, [sp, #0]
 800d582:	4603      	mov	r3, r0
 800d584:	2200      	movs	r2, #0
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f001 f9c6 	bl	800e918 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d58c:	e114      	b.n	800d7b8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 f918 	bl	800d7c4 <USBH_HandleEnum>
 800d594:	4603      	mov	r3, r0
 800d596:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d598:	7bbb      	ldrb	r3, [r7, #14]
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	f040 80fe 	bne.w	800d79e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d103      	bne.n	800d5bc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2208      	movs	r2, #8
 800d5b8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d5ba:	e0f0      	b.n	800d79e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2207      	movs	r2, #7
 800d5c0:	701a      	strb	r2, [r3, #0]
      break;
 800d5c2:	e0ec      	b.n	800d79e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	f000 80e9 	beq.w	800d7a2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d5d6:	2101      	movs	r1, #1
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2208      	movs	r2, #8
 800d5e0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800d5e2:	e0de      	b.n	800d7a2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 fc2c 	bl	800de4c <USBH_SetCfg>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	f040 80d5 	bne.w	800d7a6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2209      	movs	r2, #9
 800d600:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d602:	e0d0      	b.n	800d7a6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d60a:	f003 0320 	and.w	r3, r3, #32
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d016      	beq.n	800d640 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800d612:	2101      	movs	r1, #1
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 fc3c 	bl	800de92 <USBH_SetFeature>
 800d61a:	4603      	mov	r3, r0
 800d61c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d61e:	7bbb      	ldrb	r3, [r7, #14]
 800d620:	b2db      	uxtb	r3, r3
 800d622:	2b00      	cmp	r3, #0
 800d624:	d103      	bne.n	800d62e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	220a      	movs	r2, #10
 800d62a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d62c:	e0bd      	b.n	800d7aa <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800d62e:	7bbb      	ldrb	r3, [r7, #14]
 800d630:	b2db      	uxtb	r3, r3
 800d632:	2b03      	cmp	r3, #3
 800d634:	f040 80b9 	bne.w	800d7aa <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	220a      	movs	r2, #10
 800d63c:	701a      	strb	r2, [r3, #0]
      break;
 800d63e:	e0b4      	b.n	800d7aa <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	220a      	movs	r2, #10
 800d644:	701a      	strb	r2, [r3, #0]
      break;
 800d646:	e0b0      	b.n	800d7aa <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d64e:	2b00      	cmp	r3, #0
 800d650:	f000 80ad 	beq.w	800d7ae <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d65c:	2300      	movs	r3, #0
 800d65e:	73fb      	strb	r3, [r7, #15]
 800d660:	e016      	b.n	800d690 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d662:	7bfa      	ldrb	r2, [r7, #15]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	32de      	adds	r2, #222	; 0xde
 800d668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d66c:	791a      	ldrb	r2, [r3, #4]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d674:	429a      	cmp	r2, r3
 800d676:	d108      	bne.n	800d68a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d678:	7bfa      	ldrb	r2, [r7, #15]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	32de      	adds	r2, #222	; 0xde
 800d67e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d688:	e005      	b.n	800d696 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d68a:	7bfb      	ldrb	r3, [r7, #15]
 800d68c:	3301      	adds	r3, #1
 800d68e:	73fb      	strb	r3, [r7, #15]
 800d690:	7bfb      	ldrb	r3, [r7, #15]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d0e5      	beq.n	800d662 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d016      	beq.n	800d6ce <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6a6:	689b      	ldr	r3, [r3, #8]
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	4798      	blx	r3
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d109      	bne.n	800d6c6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2206      	movs	r2, #6
 800d6b6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d6be:	2103      	movs	r1, #3
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d6c4:	e073      	b.n	800d7ae <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	220d      	movs	r2, #13
 800d6ca:	701a      	strb	r2, [r3, #0]
      break;
 800d6cc:	e06f      	b.n	800d7ae <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	220d      	movs	r2, #13
 800d6d2:	701a      	strb	r2, [r3, #0]
      break;
 800d6d4:	e06b      	b.n	800d7ae <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d017      	beq.n	800d710 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6e6:	691b      	ldr	r3, [r3, #16]
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	4798      	blx	r3
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d6f0:	7bbb      	ldrb	r3, [r7, #14]
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d103      	bne.n	800d700 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	220b      	movs	r2, #11
 800d6fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d6fe:	e058      	b.n	800d7b2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800d700:	7bbb      	ldrb	r3, [r7, #14]
 800d702:	b2db      	uxtb	r3, r3
 800d704:	2b02      	cmp	r3, #2
 800d706:	d154      	bne.n	800d7b2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	220d      	movs	r2, #13
 800d70c:	701a      	strb	r2, [r3, #0]
      break;
 800d70e:	e050      	b.n	800d7b2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	220d      	movs	r2, #13
 800d714:	701a      	strb	r2, [r3, #0]
      break;
 800d716:	e04c      	b.n	800d7b2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d049      	beq.n	800d7b6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d728:	695b      	ldr	r3, [r3, #20]
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	4798      	blx	r3
      }
      break;
 800d72e:	e042      	b.n	800d7b6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f7ff fd67 	bl	800d20c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d744:	2b00      	cmp	r3, #0
 800d746:	d009      	beq.n	800d75c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d74e:	68db      	ldr	r3, [r3, #12]
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d762:	2b00      	cmp	r3, #0
 800d764:	d005      	beq.n	800d772 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d76c:	2105      	movs	r1, #5
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d107      	bne.n	800d78e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2200      	movs	r2, #0
 800d782:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7ff fe20 	bl	800d3cc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d78c:	e014      	b.n	800d7b8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f001 faa4 	bl	800ecdc <USBH_LL_Start>
      break;
 800d794:	e010      	b.n	800d7b8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800d796:	bf00      	nop
 800d798:	e00e      	b.n	800d7b8 <USBH_Process+0x3cc>
      break;
 800d79a:	bf00      	nop
 800d79c:	e00c      	b.n	800d7b8 <USBH_Process+0x3cc>
      break;
 800d79e:	bf00      	nop
 800d7a0:	e00a      	b.n	800d7b8 <USBH_Process+0x3cc>
    break;
 800d7a2:	bf00      	nop
 800d7a4:	e008      	b.n	800d7b8 <USBH_Process+0x3cc>
      break;
 800d7a6:	bf00      	nop
 800d7a8:	e006      	b.n	800d7b8 <USBH_Process+0x3cc>
      break;
 800d7aa:	bf00      	nop
 800d7ac:	e004      	b.n	800d7b8 <USBH_Process+0x3cc>
      break;
 800d7ae:	bf00      	nop
 800d7b0:	e002      	b.n	800d7b8 <USBH_Process+0x3cc>
      break;
 800d7b2:	bf00      	nop
 800d7b4:	e000      	b.n	800d7b8 <USBH_Process+0x3cc>
      break;
 800d7b6:	bf00      	nop
  }
  return USBH_OK;
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3710      	adds	r7, #16
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop

0800d7c4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b088      	sub	sp, #32
 800d7c8:	af04      	add	r7, sp, #16
 800d7ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	785b      	ldrb	r3, [r3, #1]
 800d7d8:	2b07      	cmp	r3, #7
 800d7da:	f200 81c1 	bhi.w	800db60 <USBH_HandleEnum+0x39c>
 800d7de:	a201      	add	r2, pc, #4	; (adr r2, 800d7e4 <USBH_HandleEnum+0x20>)
 800d7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e4:	0800d805 	.word	0x0800d805
 800d7e8:	0800d8c3 	.word	0x0800d8c3
 800d7ec:	0800d92d 	.word	0x0800d92d
 800d7f0:	0800d9bb 	.word	0x0800d9bb
 800d7f4:	0800da25 	.word	0x0800da25
 800d7f8:	0800da95 	.word	0x0800da95
 800d7fc:	0800dadb 	.word	0x0800dadb
 800d800:	0800db21 	.word	0x0800db21
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d804:	2108      	movs	r1, #8
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 fa50 	bl	800dcac <USBH_Get_DevDesc>
 800d80c:	4603      	mov	r3, r0
 800d80e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d810:	7bbb      	ldrb	r3, [r7, #14]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d130      	bne.n	800d878 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2201      	movs	r2, #1
 800d824:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	7919      	ldrb	r1, [r3, #4]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d83a:	b292      	uxth	r2, r2
 800d83c:	9202      	str	r2, [sp, #8]
 800d83e:	2200      	movs	r2, #0
 800d840:	9201      	str	r2, [sp, #4]
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	4603      	mov	r3, r0
 800d846:	2280      	movs	r2, #128	; 0x80
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f001 f865 	bl	800e918 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	7959      	ldrb	r1, [r3, #5]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d862:	b292      	uxth	r2, r2
 800d864:	9202      	str	r2, [sp, #8]
 800d866:	2200      	movs	r2, #0
 800d868:	9201      	str	r2, [sp, #4]
 800d86a:	9300      	str	r3, [sp, #0]
 800d86c:	4603      	mov	r3, r0
 800d86e:	2200      	movs	r2, #0
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f001 f851 	bl	800e918 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d876:	e175      	b.n	800db64 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d878:	7bbb      	ldrb	r3, [r7, #14]
 800d87a:	2b03      	cmp	r3, #3
 800d87c:	f040 8172 	bne.w	800db64 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d886:	3301      	adds	r3, #1
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d896:	2b03      	cmp	r3, #3
 800d898:	d903      	bls.n	800d8a2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	220d      	movs	r2, #13
 800d89e:	701a      	strb	r2, [r3, #0]
      break;
 800d8a0:	e160      	b.n	800db64 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	795b      	ldrb	r3, [r3, #5]
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f001 f885 	bl	800e9b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	791b      	ldrb	r3, [r3, #4]
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f001 f87f 	bl	800e9b8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	701a      	strb	r2, [r3, #0]
      break;
 800d8c0:	e150      	b.n	800db64 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d8c2:	2112      	movs	r1, #18
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f000 f9f1 	bl	800dcac <USBH_Get_DevDesc>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d8ce:	7bbb      	ldrb	r3, [r7, #14]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d103      	bne.n	800d8dc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2202      	movs	r2, #2
 800d8d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d8da:	e145      	b.n	800db68 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d8dc:	7bbb      	ldrb	r3, [r7, #14]
 800d8de:	2b03      	cmp	r3, #3
 800d8e0:	f040 8142 	bne.w	800db68 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	b2da      	uxtb	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d8fa:	2b03      	cmp	r3, #3
 800d8fc:	d903      	bls.n	800d906 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	220d      	movs	r2, #13
 800d902:	701a      	strb	r2, [r3, #0]
      break;
 800d904:	e130      	b.n	800db68 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	795b      	ldrb	r3, [r3, #5]
 800d90a:	4619      	mov	r1, r3
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f001 f853 	bl	800e9b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	791b      	ldrb	r3, [r3, #4]
 800d916:	4619      	mov	r1, r3
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f001 f84d 	bl	800e9b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2200      	movs	r2, #0
 800d922:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	701a      	strb	r2, [r3, #0]
      break;
 800d92a:	e11d      	b.n	800db68 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d92c:	2101      	movs	r1, #1
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 fa68 	bl	800de04 <USBH_SetAddress>
 800d934:	4603      	mov	r3, r0
 800d936:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d938:	7bbb      	ldrb	r3, [r7, #14]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d132      	bne.n	800d9a4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d93e:	2002      	movs	r0, #2
 800d940:	f001 fb30 	bl	800efa4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2201      	movs	r2, #1
 800d948:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2203      	movs	r2, #3
 800d950:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	7919      	ldrb	r1, [r3, #4]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d966:	b292      	uxth	r2, r2
 800d968:	9202      	str	r2, [sp, #8]
 800d96a:	2200      	movs	r2, #0
 800d96c:	9201      	str	r2, [sp, #4]
 800d96e:	9300      	str	r3, [sp, #0]
 800d970:	4603      	mov	r3, r0
 800d972:	2280      	movs	r2, #128	; 0x80
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 ffcf 	bl	800e918 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	7959      	ldrb	r1, [r3, #5]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d98a:	687a      	ldr	r2, [r7, #4]
 800d98c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d98e:	b292      	uxth	r2, r2
 800d990:	9202      	str	r2, [sp, #8]
 800d992:	2200      	movs	r2, #0
 800d994:	9201      	str	r2, [sp, #4]
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	4603      	mov	r3, r0
 800d99a:	2200      	movs	r2, #0
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 ffbb 	bl	800e918 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d9a2:	e0e3      	b.n	800db6c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d9a4:	7bbb      	ldrb	r3, [r7, #14]
 800d9a6:	2b03      	cmp	r3, #3
 800d9a8:	f040 80e0 	bne.w	800db6c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	220d      	movs	r2, #13
 800d9b0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	705a      	strb	r2, [r3, #1]
      break;
 800d9b8:	e0d8      	b.n	800db6c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d9ba:	2109      	movs	r1, #9
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f000 f99d 	bl	800dcfc <USBH_Get_CfgDesc>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d9c6:	7bbb      	ldrb	r3, [r7, #14]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d103      	bne.n	800d9d4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2204      	movs	r2, #4
 800d9d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d9d2:	e0cd      	b.n	800db70 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d9d4:	7bbb      	ldrb	r3, [r7, #14]
 800d9d6:	2b03      	cmp	r3, #3
 800d9d8:	f040 80ca 	bne.w	800db70 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	b2da      	uxtb	r2, r3
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d9f2:	2b03      	cmp	r3, #3
 800d9f4:	d903      	bls.n	800d9fe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	220d      	movs	r2, #13
 800d9fa:	701a      	strb	r2, [r3, #0]
      break;
 800d9fc:	e0b8      	b.n	800db70 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	795b      	ldrb	r3, [r3, #5]
 800da02:	4619      	mov	r1, r3
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 ffd7 	bl	800e9b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	791b      	ldrb	r3, [r3, #4]
 800da0e:	4619      	mov	r1, r3
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 ffd1 	bl	800e9b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2200      	movs	r2, #0
 800da1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2200      	movs	r2, #0
 800da20:	701a      	strb	r2, [r3, #0]
      break;
 800da22:	e0a5      	b.n	800db70 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800da2a:	4619      	mov	r1, r3
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f000 f965 	bl	800dcfc <USBH_Get_CfgDesc>
 800da32:	4603      	mov	r3, r0
 800da34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800da36:	7bbb      	ldrb	r3, [r7, #14]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d103      	bne.n	800da44 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2205      	movs	r2, #5
 800da40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800da42:	e097      	b.n	800db74 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800da44:	7bbb      	ldrb	r3, [r7, #14]
 800da46:	2b03      	cmp	r3, #3
 800da48:	f040 8094 	bne.w	800db74 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800da52:	3301      	adds	r3, #1
 800da54:	b2da      	uxtb	r2, r3
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800da62:	2b03      	cmp	r3, #3
 800da64:	d903      	bls.n	800da6e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	220d      	movs	r2, #13
 800da6a:	701a      	strb	r2, [r3, #0]
      break;
 800da6c:	e082      	b.n	800db74 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	795b      	ldrb	r3, [r3, #5]
 800da72:	4619      	mov	r1, r3
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f000 ff9f 	bl	800e9b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	791b      	ldrb	r3, [r3, #4]
 800da7e:	4619      	mov	r1, r3
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 ff99 	bl	800e9b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	701a      	strb	r2, [r3, #0]
      break;
 800da92:	e06f      	b.n	800db74 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d019      	beq.n	800dad2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800daaa:	23ff      	movs	r3, #255	; 0xff
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f000 f949 	bl	800dd44 <USBH_Get_StringDesc>
 800dab2:	4603      	mov	r3, r0
 800dab4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dab6:	7bbb      	ldrb	r3, [r7, #14]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d103      	bne.n	800dac4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2206      	movs	r2, #6
 800dac0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800dac2:	e059      	b.n	800db78 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dac4:	7bbb      	ldrb	r3, [r7, #14]
 800dac6:	2b03      	cmp	r3, #3
 800dac8:	d156      	bne.n	800db78 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2206      	movs	r2, #6
 800dace:	705a      	strb	r2, [r3, #1]
      break;
 800dad0:	e052      	b.n	800db78 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2206      	movs	r2, #6
 800dad6:	705a      	strb	r2, [r3, #1]
      break;
 800dad8:	e04e      	b.n	800db78 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d019      	beq.n	800db18 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800daf0:	23ff      	movs	r3, #255	; 0xff
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 f926 	bl	800dd44 <USBH_Get_StringDesc>
 800daf8:	4603      	mov	r3, r0
 800dafa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dafc:	7bbb      	ldrb	r3, [r7, #14]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d103      	bne.n	800db0a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2207      	movs	r2, #7
 800db06:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800db08:	e038      	b.n	800db7c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800db0a:	7bbb      	ldrb	r3, [r7, #14]
 800db0c:	2b03      	cmp	r3, #3
 800db0e:	d135      	bne.n	800db7c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2207      	movs	r2, #7
 800db14:	705a      	strb	r2, [r3, #1]
      break;
 800db16:	e031      	b.n	800db7c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2207      	movs	r2, #7
 800db1c:	705a      	strb	r2, [r3, #1]
      break;
 800db1e:	e02d      	b.n	800db7c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800db26:	2b00      	cmp	r3, #0
 800db28:	d017      	beq.n	800db5a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800db36:	23ff      	movs	r3, #255	; 0xff
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 f903 	bl	800dd44 <USBH_Get_StringDesc>
 800db3e:	4603      	mov	r3, r0
 800db40:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800db42:	7bbb      	ldrb	r3, [r7, #14]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d102      	bne.n	800db4e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800db48:	2300      	movs	r3, #0
 800db4a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800db4c:	e018      	b.n	800db80 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800db4e:	7bbb      	ldrb	r3, [r7, #14]
 800db50:	2b03      	cmp	r3, #3
 800db52:	d115      	bne.n	800db80 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800db54:	2300      	movs	r3, #0
 800db56:	73fb      	strb	r3, [r7, #15]
      break;
 800db58:	e012      	b.n	800db80 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800db5a:	2300      	movs	r3, #0
 800db5c:	73fb      	strb	r3, [r7, #15]
      break;
 800db5e:	e00f      	b.n	800db80 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800db60:	bf00      	nop
 800db62:	e00e      	b.n	800db82 <USBH_HandleEnum+0x3be>
      break;
 800db64:	bf00      	nop
 800db66:	e00c      	b.n	800db82 <USBH_HandleEnum+0x3be>
      break;
 800db68:	bf00      	nop
 800db6a:	e00a      	b.n	800db82 <USBH_HandleEnum+0x3be>
      break;
 800db6c:	bf00      	nop
 800db6e:	e008      	b.n	800db82 <USBH_HandleEnum+0x3be>
      break;
 800db70:	bf00      	nop
 800db72:	e006      	b.n	800db82 <USBH_HandleEnum+0x3be>
      break;
 800db74:	bf00      	nop
 800db76:	e004      	b.n	800db82 <USBH_HandleEnum+0x3be>
      break;
 800db78:	bf00      	nop
 800db7a:	e002      	b.n	800db82 <USBH_HandleEnum+0x3be>
      break;
 800db7c:	bf00      	nop
 800db7e:	e000      	b.n	800db82 <USBH_HandleEnum+0x3be>
      break;
 800db80:	bf00      	nop
  }
  return Status;
 800db82:	7bfb      	ldrb	r3, [r7, #15]
}
 800db84:	4618      	mov	r0, r3
 800db86:	3710      	adds	r7, #16
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b083      	sub	sp, #12
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	683a      	ldr	r2, [r7, #0]
 800db9a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800db9e:	bf00      	nop
 800dba0:	370c      	adds	r7, #12
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr

0800dbaa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b082      	sub	sp, #8
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dbb8:	1c5a      	adds	r2, r3, #1
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 f804 	bl	800dbce <USBH_HandleSof>
}
 800dbc6:	bf00      	nop
 800dbc8:	3708      	adds	r7, #8
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b082      	sub	sp, #8
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	2b0b      	cmp	r3, #11
 800dbde:	d10a      	bne.n	800dbf6 <USBH_HandleSof+0x28>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d005      	beq.n	800dbf6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dbf0:	699b      	ldr	r3, [r3, #24]
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	4798      	blx	r3
  }
}
 800dbf6:	bf00      	nop
 800dbf8:	3708      	adds	r7, #8
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}

0800dbfe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800dbfe:	b480      	push	{r7}
 800dc00:	b083      	sub	sp, #12
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800dc0e:	bf00      	nop
}
 800dc10:	370c      	adds	r7, #12
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr

0800dc1a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800dc1a:	b480      	push	{r7}
 800dc1c:	b083      	sub	sp, #12
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2200      	movs	r2, #0
 800dc26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800dc2a:	bf00      	nop
}
 800dc2c:	370c      	adds	r7, #12
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr

0800dc36 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800dc36:	b480      	push	{r7}
 800dc38:	b083      	sub	sp, #12
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2201      	movs	r2, #1
 800dc42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2200      	movs	r2, #0
 800dc52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800dc56:	2300      	movs	r3, #0
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	370c      	adds	r7, #12
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2201      	movs	r2, #1
 800dc70:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2200      	movs	r2, #0
 800dc78:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f001 f844 	bl	800ed12 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	791b      	ldrb	r3, [r3, #4]
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f000 fe91 	bl	800e9b8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	795b      	ldrb	r3, [r3, #5]
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 fe8b 	bl	800e9b8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800dca2:	2300      	movs	r3, #0
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b086      	sub	sp, #24
 800dcb0:	af02      	add	r7, sp, #8
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800dcbe:	78fb      	ldrb	r3, [r7, #3]
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	4613      	mov	r3, r2
 800dcc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dcca:	2100      	movs	r1, #0
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f000 f864 	bl	800dd9a <USBH_GetDescriptor>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800dcd6:	7bfb      	ldrb	r3, [r7, #15]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d10a      	bne.n	800dcf2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f203 3026 	addw	r0, r3, #806	; 0x326
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dce8:	78fa      	ldrb	r2, [r7, #3]
 800dcea:	b292      	uxth	r2, r2
 800dcec:	4619      	mov	r1, r3
 800dcee:	f000 f918 	bl	800df22 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af02      	add	r7, sp, #8
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	460b      	mov	r3, r1
 800dd06:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	331c      	adds	r3, #28
 800dd0c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800dd0e:	887b      	ldrh	r3, [r7, #2]
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd18:	2100      	movs	r1, #0
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f000 f83d 	bl	800dd9a <USBH_GetDescriptor>
 800dd20:	4603      	mov	r3, r0
 800dd22:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800dd24:	7bfb      	ldrb	r3, [r7, #15]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d107      	bne.n	800dd3a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800dd2a:	887b      	ldrh	r3, [r7, #2]
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	68b9      	ldr	r1, [r7, #8]
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 f987 	bl	800e044 <USBH_ParseCfgDesc>
 800dd36:	4603      	mov	r3, r0
 800dd38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800dd3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3710      	adds	r7, #16
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b088      	sub	sp, #32
 800dd48:	af02      	add	r7, sp, #8
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	607a      	str	r2, [r7, #4]
 800dd4e:	461a      	mov	r2, r3
 800dd50:	460b      	mov	r3, r1
 800dd52:	72fb      	strb	r3, [r7, #11]
 800dd54:	4613      	mov	r3, r2
 800dd56:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800dd58:	7afb      	ldrb	r3, [r7, #11]
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800dd60:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800dd68:	893b      	ldrh	r3, [r7, #8]
 800dd6a:	9300      	str	r3, [sp, #0]
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	2100      	movs	r1, #0
 800dd70:	68f8      	ldr	r0, [r7, #12]
 800dd72:	f000 f812 	bl	800dd9a <USBH_GetDescriptor>
 800dd76:	4603      	mov	r3, r0
 800dd78:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800dd7a:	7dfb      	ldrb	r3, [r7, #23]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d107      	bne.n	800dd90 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dd86:	893a      	ldrh	r2, [r7, #8]
 800dd88:	6879      	ldr	r1, [r7, #4]
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f000 fb24 	bl	800e3d8 <USBH_ParseStringDesc>
  }

  return status;
 800dd90:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3718      	adds	r7, #24
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}

0800dd9a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800dd9a:	b580      	push	{r7, lr}
 800dd9c:	b084      	sub	sp, #16
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	60f8      	str	r0, [r7, #12]
 800dda2:	607b      	str	r3, [r7, #4]
 800dda4:	460b      	mov	r3, r1
 800dda6:	72fb      	strb	r3, [r7, #11]
 800dda8:	4613      	mov	r3, r2
 800ddaa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	789b      	ldrb	r3, [r3, #2]
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d11c      	bne.n	800ddee <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ddb4:	7afb      	ldrb	r3, [r7, #11]
 800ddb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ddba:	b2da      	uxtb	r2, r3
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2206      	movs	r2, #6
 800ddc4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	893a      	ldrh	r2, [r7, #8]
 800ddca:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ddcc:	893b      	ldrh	r3, [r7, #8]
 800ddce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ddd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ddd6:	d104      	bne.n	800dde2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f240 4209 	movw	r2, #1033	; 0x409
 800ddde:	829a      	strh	r2, [r3, #20]
 800dde0:	e002      	b.n	800dde8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2200      	movs	r2, #0
 800dde6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	8b3a      	ldrh	r2, [r7, #24]
 800ddec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ddee:	8b3b      	ldrh	r3, [r7, #24]
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	6879      	ldr	r1, [r7, #4]
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f000 fb3d 	bl	800e474 <USBH_CtlReq>
 800ddfa:	4603      	mov	r3, r0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	460b      	mov	r3, r1
 800de0e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	789b      	ldrb	r3, [r3, #2]
 800de14:	2b01      	cmp	r3, #1
 800de16:	d10f      	bne.n	800de38 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2205      	movs	r2, #5
 800de22:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800de24:	78fb      	ldrb	r3, [r7, #3]
 800de26:	b29a      	uxth	r2, r3
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2200      	movs	r2, #0
 800de36:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800de38:	2200      	movs	r2, #0
 800de3a:	2100      	movs	r1, #0
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 fb19 	bl	800e474 <USBH_CtlReq>
 800de42:	4603      	mov	r3, r0
}
 800de44:	4618      	mov	r0, r3
 800de46:	3708      	adds	r7, #8
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	460b      	mov	r3, r1
 800de56:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	789b      	ldrb	r3, [r3, #2]
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d10e      	bne.n	800de7e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2200      	movs	r2, #0
 800de64:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2209      	movs	r2, #9
 800de6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	887a      	ldrh	r2, [r7, #2]
 800de70:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2200      	movs	r2, #0
 800de76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2200      	movs	r2, #0
 800de7c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800de7e:	2200      	movs	r2, #0
 800de80:	2100      	movs	r1, #0
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 faf6 	bl	800e474 <USBH_CtlReq>
 800de88:	4603      	mov	r3, r0
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800de92:	b580      	push	{r7, lr}
 800de94:	b082      	sub	sp, #8
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
 800de9a:	460b      	mov	r3, r1
 800de9c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	789b      	ldrb	r3, [r3, #2]
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d10f      	bne.n	800dec6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2200      	movs	r2, #0
 800deaa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2203      	movs	r2, #3
 800deb0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800deb2:	78fb      	ldrb	r3, [r7, #3]
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2200      	movs	r2, #0
 800debe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dec6:	2200      	movs	r2, #0
 800dec8:	2100      	movs	r1, #0
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 fad2 	bl	800e474 <USBH_CtlReq>
 800ded0:	4603      	mov	r3, r0
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b082      	sub	sp, #8
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
 800dee2:	460b      	mov	r3, r1
 800dee4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	789b      	ldrb	r3, [r3, #2]
 800deea:	2b01      	cmp	r3, #1
 800deec:	d10f      	bne.n	800df0e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2202      	movs	r2, #2
 800def2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2201      	movs	r2, #1
 800def8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800df00:	78fb      	ldrb	r3, [r7, #3]
 800df02:	b29a      	uxth	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2200      	movs	r2, #0
 800df0c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800df0e:	2200      	movs	r2, #0
 800df10:	2100      	movs	r1, #0
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 faae 	bl	800e474 <USBH_CtlReq>
 800df18:	4603      	mov	r3, r0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3708      	adds	r7, #8
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800df22:	b480      	push	{r7}
 800df24:	b085      	sub	sp, #20
 800df26:	af00      	add	r7, sp, #0
 800df28:	60f8      	str	r0, [r7, #12]
 800df2a:	60b9      	str	r1, [r7, #8]
 800df2c:	4613      	mov	r3, r2
 800df2e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	781a      	ldrb	r2, [r3, #0]
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	785a      	ldrb	r2, [r3, #1]
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	3302      	adds	r3, #2
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	b29a      	uxth	r2, r3
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	3303      	adds	r3, #3
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	b29b      	uxth	r3, r3
 800df50:	021b      	lsls	r3, r3, #8
 800df52:	b29b      	uxth	r3, r3
 800df54:	4313      	orrs	r3, r2
 800df56:	b29a      	uxth	r2, r3
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	791a      	ldrb	r2, [r3, #4]
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	795a      	ldrb	r2, [r3, #5]
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	799a      	ldrb	r2, [r3, #6]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	79da      	ldrb	r2, [r3, #7]
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	79db      	ldrb	r3, [r3, #7]
 800df80:	2b20      	cmp	r3, #32
 800df82:	dc11      	bgt.n	800dfa8 <USBH_ParseDevDesc+0x86>
 800df84:	2b08      	cmp	r3, #8
 800df86:	db16      	blt.n	800dfb6 <USBH_ParseDevDesc+0x94>
 800df88:	3b08      	subs	r3, #8
 800df8a:	2201      	movs	r2, #1
 800df8c:	fa02 f303 	lsl.w	r3, r2, r3
 800df90:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800df94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df98:	2b00      	cmp	r3, #0
 800df9a:	bf14      	ite	ne
 800df9c:	2301      	movne	r3, #1
 800df9e:	2300      	moveq	r3, #0
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d102      	bne.n	800dfac <USBH_ParseDevDesc+0x8a>
 800dfa6:	e006      	b.n	800dfb6 <USBH_ParseDevDesc+0x94>
 800dfa8:	2b40      	cmp	r3, #64	; 0x40
 800dfaa:	d104      	bne.n	800dfb6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	79da      	ldrb	r2, [r3, #7]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	71da      	strb	r2, [r3, #7]
      break;
 800dfb4:	e003      	b.n	800dfbe <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2240      	movs	r2, #64	; 0x40
 800dfba:	71da      	strb	r2, [r3, #7]
      break;
 800dfbc:	bf00      	nop
  }

  if (length > 8U)
 800dfbe:	88fb      	ldrh	r3, [r7, #6]
 800dfc0:	2b08      	cmp	r3, #8
 800dfc2:	d939      	bls.n	800e038 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	3308      	adds	r3, #8
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	b29a      	uxth	r2, r3
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	3309      	adds	r3, #9
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	021b      	lsls	r3, r3, #8
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	b29a      	uxth	r2, r3
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	330a      	adds	r3, #10
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	b29a      	uxth	r2, r3
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	330b      	adds	r3, #11
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	021b      	lsls	r3, r3, #8
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	4313      	orrs	r3, r2
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	330c      	adds	r3, #12
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	b29a      	uxth	r2, r3
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	330d      	adds	r3, #13
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	021b      	lsls	r3, r3, #8
 800e00e:	b29b      	uxth	r3, r3
 800e010:	4313      	orrs	r3, r2
 800e012:	b29a      	uxth	r2, r3
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	7b9a      	ldrb	r2, [r3, #14]
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	7bda      	ldrb	r2, [r3, #15]
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	7c1a      	ldrb	r2, [r3, #16]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	7c5a      	ldrb	r2, [r3, #17]
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	745a      	strb	r2, [r3, #17]
  }
}
 800e038:	bf00      	nop
 800e03a:	3714      	adds	r7, #20
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b08c      	sub	sp, #48	; 0x30
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	4613      	mov	r3, r2
 800e050:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e058:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800e05a:	2300      	movs	r3, #0
 800e05c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e064:	2300      	movs	r3, #0
 800e066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800e06a:	2300      	movs	r3, #0
 800e06c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	781a      	ldrb	r2, [r3, #0]
 800e078:	6a3b      	ldr	r3, [r7, #32]
 800e07a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	785a      	ldrb	r2, [r3, #1]
 800e080:	6a3b      	ldr	r3, [r7, #32]
 800e082:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	3302      	adds	r3, #2
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	3303      	adds	r3, #3
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	b29b      	uxth	r3, r3
 800e094:	021b      	lsls	r3, r3, #8
 800e096:	b29b      	uxth	r3, r3
 800e098:	4313      	orrs	r3, r2
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0a0:	bf28      	it	cs
 800e0a2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800e0a6:	b29a      	uxth	r2, r3
 800e0a8:	6a3b      	ldr	r3, [r7, #32]
 800e0aa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	791a      	ldrb	r2, [r3, #4]
 800e0b0:	6a3b      	ldr	r3, [r7, #32]
 800e0b2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	795a      	ldrb	r2, [r3, #5]
 800e0b8:	6a3b      	ldr	r3, [r7, #32]
 800e0ba:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	799a      	ldrb	r2, [r3, #6]
 800e0c0:	6a3b      	ldr	r3, [r7, #32]
 800e0c2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	79da      	ldrb	r2, [r3, #7]
 800e0c8:	6a3b      	ldr	r3, [r7, #32]
 800e0ca:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	7a1a      	ldrb	r2, [r3, #8]
 800e0d0:	6a3b      	ldr	r3, [r7, #32]
 800e0d2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800e0d4:	6a3b      	ldr	r3, [r7, #32]
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	2b09      	cmp	r3, #9
 800e0da:	d002      	beq.n	800e0e2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800e0dc:	6a3b      	ldr	r3, [r7, #32]
 800e0de:	2209      	movs	r2, #9
 800e0e0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e0e2:	88fb      	ldrh	r3, [r7, #6]
 800e0e4:	2b09      	cmp	r3, #9
 800e0e6:	f240 809d 	bls.w	800e224 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800e0ea:	2309      	movs	r3, #9
 800e0ec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e0f2:	e081      	b.n	800e1f8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e0f4:	f107 0316 	add.w	r3, r7, #22
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0fc:	f000 f99f 	bl	800e43e <USBH_GetNextDesc>
 800e100:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800e102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e104:	785b      	ldrb	r3, [r3, #1]
 800e106:	2b04      	cmp	r3, #4
 800e108:	d176      	bne.n	800e1f8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800e10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	2b09      	cmp	r3, #9
 800e110:	d002      	beq.n	800e118 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800e112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e114:	2209      	movs	r2, #9
 800e116:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800e118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e11c:	221a      	movs	r2, #26
 800e11e:	fb02 f303 	mul.w	r3, r2, r3
 800e122:	3308      	adds	r3, #8
 800e124:	6a3a      	ldr	r2, [r7, #32]
 800e126:	4413      	add	r3, r2
 800e128:	3302      	adds	r3, #2
 800e12a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e12c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e12e:	69f8      	ldr	r0, [r7, #28]
 800e130:	f000 f87e 	bl	800e230 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e134:	2300      	movs	r3, #0
 800e136:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800e13a:	2300      	movs	r3, #0
 800e13c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e13e:	e043      	b.n	800e1c8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e140:	f107 0316 	add.w	r3, r7, #22
 800e144:	4619      	mov	r1, r3
 800e146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e148:	f000 f979 	bl	800e43e <USBH_GetNextDesc>
 800e14c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e150:	785b      	ldrb	r3, [r3, #1]
 800e152:	2b05      	cmp	r3, #5
 800e154:	d138      	bne.n	800e1c8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800e156:	69fb      	ldr	r3, [r7, #28]
 800e158:	795b      	ldrb	r3, [r3, #5]
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d10f      	bne.n	800e17e <USBH_ParseCfgDesc+0x13a>
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	799b      	ldrb	r3, [r3, #6]
 800e162:	2b02      	cmp	r3, #2
 800e164:	d10b      	bne.n	800e17e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	79db      	ldrb	r3, [r3, #7]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d10f      	bne.n	800e18e <USBH_ParseCfgDesc+0x14a>
 800e16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	2b09      	cmp	r3, #9
 800e174:	d00b      	beq.n	800e18e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800e176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e178:	2209      	movs	r2, #9
 800e17a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e17c:	e007      	b.n	800e18e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800e17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	2b07      	cmp	r3, #7
 800e184:	d004      	beq.n	800e190 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800e186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e188:	2207      	movs	r2, #7
 800e18a:	701a      	strb	r2, [r3, #0]
 800e18c:	e000      	b.n	800e190 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e18e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e194:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e198:	3201      	adds	r2, #1
 800e19a:	00d2      	lsls	r2, r2, #3
 800e19c:	211a      	movs	r1, #26
 800e19e:	fb01 f303 	mul.w	r3, r1, r3
 800e1a2:	4413      	add	r3, r2
 800e1a4:	3308      	adds	r3, #8
 800e1a6:	6a3a      	ldr	r2, [r7, #32]
 800e1a8:	4413      	add	r3, r2
 800e1aa:	3304      	adds	r3, #4
 800e1ac:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800e1ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1b0:	69b9      	ldr	r1, [r7, #24]
 800e1b2:	68f8      	ldr	r0, [r7, #12]
 800e1b4:	f000 f86b 	bl	800e28e <USBH_ParseEPDesc>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800e1be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	791b      	ldrb	r3, [r3, #4]
 800e1cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d204      	bcs.n	800e1de <USBH_ParseCfgDesc+0x19a>
 800e1d4:	6a3b      	ldr	r3, [r7, #32]
 800e1d6:	885a      	ldrh	r2, [r3, #2]
 800e1d8:	8afb      	ldrh	r3, [r7, #22]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d8b0      	bhi.n	800e140 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	791b      	ldrb	r3, [r3, #4]
 800e1e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d201      	bcs.n	800e1ee <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800e1ea:	2303      	movs	r3, #3
 800e1ec:	e01c      	b.n	800e228 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800e1ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d805      	bhi.n	800e20c <USBH_ParseCfgDesc+0x1c8>
 800e200:	6a3b      	ldr	r3, [r7, #32]
 800e202:	885a      	ldrh	r2, [r3, #2]
 800e204:	8afb      	ldrh	r3, [r7, #22]
 800e206:	429a      	cmp	r2, r3
 800e208:	f63f af74 	bhi.w	800e0f4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800e20c:	6a3b      	ldr	r3, [r7, #32]
 800e20e:	791b      	ldrb	r3, [r3, #4]
 800e210:	2b02      	cmp	r3, #2
 800e212:	bf28      	it	cs
 800e214:	2302      	movcs	r3, #2
 800e216:	b2db      	uxtb	r3, r3
 800e218:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d201      	bcs.n	800e224 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800e220:	2303      	movs	r3, #3
 800e222:	e001      	b.n	800e228 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800e224:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3730      	adds	r7, #48	; 0x30
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800e230:	b480      	push	{r7}
 800e232:	b083      	sub	sp, #12
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	781a      	ldrb	r2, [r3, #0]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	785a      	ldrb	r2, [r3, #1]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	789a      	ldrb	r2, [r3, #2]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	78da      	ldrb	r2, [r3, #3]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	791a      	ldrb	r2, [r3, #4]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	795a      	ldrb	r2, [r3, #5]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	799a      	ldrb	r2, [r3, #6]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	79da      	ldrb	r2, [r3, #7]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	7a1a      	ldrb	r2, [r3, #8]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	721a      	strb	r2, [r3, #8]
}
 800e282:	bf00      	nop
 800e284:	370c      	adds	r7, #12
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr

0800e28e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800e28e:	b480      	push	{r7}
 800e290:	b087      	sub	sp, #28
 800e292:	af00      	add	r7, sp, #0
 800e294:	60f8      	str	r0, [r7, #12]
 800e296:	60b9      	str	r1, [r7, #8]
 800e298:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800e29a:	2300      	movs	r3, #0
 800e29c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	781a      	ldrb	r2, [r3, #0]
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	785a      	ldrb	r2, [r3, #1]
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	789a      	ldrb	r2, [r3, #2]
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	78da      	ldrb	r2, [r3, #3]
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	3304      	adds	r3, #4
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	b29a      	uxth	r2, r3
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	3305      	adds	r3, #5
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	021b      	lsls	r3, r3, #8
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	799a      	ldrb	r2, [r3, #6]
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	889b      	ldrh	r3, [r3, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d102      	bne.n	800e2f0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800e2ea:	2303      	movs	r3, #3
 800e2ec:	75fb      	strb	r3, [r7, #23]
 800e2ee:	e033      	b.n	800e358 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	889b      	ldrh	r3, [r3, #4]
 800e2f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e2f8:	f023 0307 	bic.w	r3, r3, #7
 800e2fc:	b29a      	uxth	r2, r3
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	889b      	ldrh	r3, [r3, #4]
 800e306:	b21a      	sxth	r2, r3
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	3304      	adds	r3, #4
 800e30c:	781b      	ldrb	r3, [r3, #0]
 800e30e:	b299      	uxth	r1, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	3305      	adds	r3, #5
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	b29b      	uxth	r3, r3
 800e318:	021b      	lsls	r3, r3, #8
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	430b      	orrs	r3, r1
 800e31e:	b29b      	uxth	r3, r3
 800e320:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e324:	2b00      	cmp	r3, #0
 800e326:	d110      	bne.n	800e34a <USBH_ParseEPDesc+0xbc>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	3304      	adds	r3, #4
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	b299      	uxth	r1, r3
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	3305      	adds	r3, #5
 800e334:	781b      	ldrb	r3, [r3, #0]
 800e336:	b29b      	uxth	r3, r3
 800e338:	021b      	lsls	r3, r3, #8
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	430b      	orrs	r3, r1
 800e33e:	b29b      	uxth	r3, r3
 800e340:	b21b      	sxth	r3, r3
 800e342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e346:	b21b      	sxth	r3, r3
 800e348:	e001      	b.n	800e34e <USBH_ParseEPDesc+0xc0>
 800e34a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e34e:	4313      	orrs	r3, r2
 800e350:	b21b      	sxth	r3, r3
 800e352:	b29a      	uxth	r2, r3
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d116      	bne.n	800e390 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	78db      	ldrb	r3, [r3, #3]
 800e366:	f003 0303 	and.w	r3, r3, #3
 800e36a:	2b01      	cmp	r3, #1
 800e36c:	d005      	beq.n	800e37a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	78db      	ldrb	r3, [r3, #3]
 800e372:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e376:	2b03      	cmp	r3, #3
 800e378:	d127      	bne.n	800e3ca <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	799b      	ldrb	r3, [r3, #6]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d003      	beq.n	800e38a <USBH_ParseEPDesc+0xfc>
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	799b      	ldrb	r3, [r3, #6]
 800e386:	2b10      	cmp	r3, #16
 800e388:	d91f      	bls.n	800e3ca <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e38a:	2303      	movs	r3, #3
 800e38c:	75fb      	strb	r3, [r7, #23]
 800e38e:	e01c      	b.n	800e3ca <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	78db      	ldrb	r3, [r3, #3]
 800e394:	f003 0303 	and.w	r3, r3, #3
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d10a      	bne.n	800e3b2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	799b      	ldrb	r3, [r3, #6]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d003      	beq.n	800e3ac <USBH_ParseEPDesc+0x11e>
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	799b      	ldrb	r3, [r3, #6]
 800e3a8:	2b10      	cmp	r3, #16
 800e3aa:	d90e      	bls.n	800e3ca <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e3ac:	2303      	movs	r3, #3
 800e3ae:	75fb      	strb	r3, [r7, #23]
 800e3b0:	e00b      	b.n	800e3ca <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	78db      	ldrb	r3, [r3, #3]
 800e3b6:	f003 0303 	and.w	r3, r3, #3
 800e3ba:	2b03      	cmp	r3, #3
 800e3bc:	d105      	bne.n	800e3ca <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	799b      	ldrb	r3, [r3, #6]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d101      	bne.n	800e3ca <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e3c6:	2303      	movs	r3, #3
 800e3c8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800e3ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	371c      	adds	r7, #28
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b087      	sub	sp, #28
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	3301      	adds	r3, #1
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	2b03      	cmp	r3, #3
 800e3ee:	d120      	bne.n	800e432 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	1e9a      	subs	r2, r3, #2
 800e3f6:	88fb      	ldrh	r3, [r7, #6]
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	bf28      	it	cs
 800e3fc:	4613      	movcs	r3, r2
 800e3fe:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	3302      	adds	r3, #2
 800e404:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e406:	2300      	movs	r3, #0
 800e408:	82fb      	strh	r3, [r7, #22]
 800e40a:	e00b      	b.n	800e424 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e40c:	8afb      	ldrh	r3, [r7, #22]
 800e40e:	68fa      	ldr	r2, [r7, #12]
 800e410:	4413      	add	r3, r2
 800e412:	781a      	ldrb	r2, [r3, #0]
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	3301      	adds	r3, #1
 800e41c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e41e:	8afb      	ldrh	r3, [r7, #22]
 800e420:	3302      	adds	r3, #2
 800e422:	82fb      	strh	r3, [r7, #22]
 800e424:	8afa      	ldrh	r2, [r7, #22]
 800e426:	8abb      	ldrh	r3, [r7, #20]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d3ef      	bcc.n	800e40c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	2200      	movs	r2, #0
 800e430:	701a      	strb	r2, [r3, #0]
  }
}
 800e432:	bf00      	nop
 800e434:	371c      	adds	r7, #28
 800e436:	46bd      	mov	sp, r7
 800e438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43c:	4770      	bx	lr

0800e43e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e43e:	b480      	push	{r7}
 800e440:	b085      	sub	sp, #20
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
 800e446:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	881a      	ldrh	r2, [r3, #0]
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	b29b      	uxth	r3, r3
 800e452:	4413      	add	r3, r2
 800e454:	b29a      	uxth	r2, r3
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	4413      	add	r3, r2
 800e464:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e466:	68fb      	ldr	r3, [r7, #12]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3714      	adds	r7, #20
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	4613      	mov	r3, r2
 800e480:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e482:	2301      	movs	r3, #1
 800e484:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	789b      	ldrb	r3, [r3, #2]
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d002      	beq.n	800e494 <USBH_CtlReq+0x20>
 800e48e:	2b02      	cmp	r3, #2
 800e490:	d00f      	beq.n	800e4b2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e492:	e027      	b.n	800e4e4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	68ba      	ldr	r2, [r7, #8]
 800e498:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	88fa      	ldrh	r2, [r7, #6]
 800e49e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	2202      	movs	r2, #2
 800e4aa:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	75fb      	strb	r3, [r7, #23]
      break;
 800e4b0:	e018      	b.n	800e4e4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f000 f81c 	bl	800e4f0 <USBH_HandleControl>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e4bc:	7dfb      	ldrb	r3, [r7, #23]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d002      	beq.n	800e4c8 <USBH_CtlReq+0x54>
 800e4c2:	7dfb      	ldrb	r3, [r7, #23]
 800e4c4:	2b03      	cmp	r3, #3
 800e4c6:	d106      	bne.n	800e4d6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	761a      	strb	r2, [r3, #24]
      break;
 800e4d4:	e005      	b.n	800e4e2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e4d6:	7dfb      	ldrb	r3, [r7, #23]
 800e4d8:	2b02      	cmp	r3, #2
 800e4da:	d102      	bne.n	800e4e2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2201      	movs	r2, #1
 800e4e0:	709a      	strb	r2, [r3, #2]
      break;
 800e4e2:	bf00      	nop
  }
  return status;
 800e4e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3718      	adds	r7, #24
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
	...

0800e4f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b086      	sub	sp, #24
 800e4f4:	af02      	add	r7, sp, #8
 800e4f6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	7e1b      	ldrb	r3, [r3, #24]
 800e504:	3b01      	subs	r3, #1
 800e506:	2b0a      	cmp	r3, #10
 800e508:	f200 8156 	bhi.w	800e7b8 <USBH_HandleControl+0x2c8>
 800e50c:	a201      	add	r2, pc, #4	; (adr r2, 800e514 <USBH_HandleControl+0x24>)
 800e50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e512:	bf00      	nop
 800e514:	0800e541 	.word	0x0800e541
 800e518:	0800e55b 	.word	0x0800e55b
 800e51c:	0800e5c5 	.word	0x0800e5c5
 800e520:	0800e5eb 	.word	0x0800e5eb
 800e524:	0800e623 	.word	0x0800e623
 800e528:	0800e64d 	.word	0x0800e64d
 800e52c:	0800e69f 	.word	0x0800e69f
 800e530:	0800e6c1 	.word	0x0800e6c1
 800e534:	0800e6fd 	.word	0x0800e6fd
 800e538:	0800e723 	.word	0x0800e723
 800e53c:	0800e761 	.word	0x0800e761
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f103 0110 	add.w	r1, r3, #16
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	795b      	ldrb	r3, [r3, #5]
 800e54a:	461a      	mov	r2, r3
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 f943 	bl	800e7d8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2202      	movs	r2, #2
 800e556:	761a      	strb	r2, [r3, #24]
      break;
 800e558:	e139      	b.n	800e7ce <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	795b      	ldrb	r3, [r3, #5]
 800e55e:	4619      	mov	r1, r3
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 fcc5 	bl	800eef0 <USBH_LL_GetURBState>
 800e566:	4603      	mov	r3, r0
 800e568:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e56a:	7bbb      	ldrb	r3, [r7, #14]
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d11e      	bne.n	800e5ae <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	7c1b      	ldrb	r3, [r3, #16]
 800e574:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e578:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	8adb      	ldrh	r3, [r3, #22]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00a      	beq.n	800e598 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e582:	7b7b      	ldrb	r3, [r7, #13]
 800e584:	2b80      	cmp	r3, #128	; 0x80
 800e586:	d103      	bne.n	800e590 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2203      	movs	r2, #3
 800e58c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e58e:	e115      	b.n	800e7bc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2205      	movs	r2, #5
 800e594:	761a      	strb	r2, [r3, #24]
      break;
 800e596:	e111      	b.n	800e7bc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800e598:	7b7b      	ldrb	r3, [r7, #13]
 800e59a:	2b80      	cmp	r3, #128	; 0x80
 800e59c:	d103      	bne.n	800e5a6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2209      	movs	r2, #9
 800e5a2:	761a      	strb	r2, [r3, #24]
      break;
 800e5a4:	e10a      	b.n	800e7bc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2207      	movs	r2, #7
 800e5aa:	761a      	strb	r2, [r3, #24]
      break;
 800e5ac:	e106      	b.n	800e7bc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e5ae:	7bbb      	ldrb	r3, [r7, #14]
 800e5b0:	2b04      	cmp	r3, #4
 800e5b2:	d003      	beq.n	800e5bc <USBH_HandleControl+0xcc>
 800e5b4:	7bbb      	ldrb	r3, [r7, #14]
 800e5b6:	2b02      	cmp	r3, #2
 800e5b8:	f040 8100 	bne.w	800e7bc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	220b      	movs	r2, #11
 800e5c0:	761a      	strb	r2, [r3, #24]
      break;
 800e5c2:	e0fb      	b.n	800e7bc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6899      	ldr	r1, [r3, #8]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	899a      	ldrh	r2, [r3, #12]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	791b      	ldrb	r3, [r3, #4]
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f000 f93a 	bl	800e856 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2204      	movs	r2, #4
 800e5e6:	761a      	strb	r2, [r3, #24]
      break;
 800e5e8:	e0f1      	b.n	800e7ce <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	791b      	ldrb	r3, [r3, #4]
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f000 fc7d 	bl	800eef0 <USBH_LL_GetURBState>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e5fa:	7bbb      	ldrb	r3, [r7, #14]
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d102      	bne.n	800e606 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2209      	movs	r2, #9
 800e604:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e606:	7bbb      	ldrb	r3, [r7, #14]
 800e608:	2b05      	cmp	r3, #5
 800e60a:	d102      	bne.n	800e612 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e60c:	2303      	movs	r3, #3
 800e60e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e610:	e0d6      	b.n	800e7c0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800e612:	7bbb      	ldrb	r3, [r7, #14]
 800e614:	2b04      	cmp	r3, #4
 800e616:	f040 80d3 	bne.w	800e7c0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	220b      	movs	r2, #11
 800e61e:	761a      	strb	r2, [r3, #24]
      break;
 800e620:	e0ce      	b.n	800e7c0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6899      	ldr	r1, [r3, #8]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	899a      	ldrh	r2, [r3, #12]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	795b      	ldrb	r3, [r3, #5]
 800e62e:	2001      	movs	r0, #1
 800e630:	9000      	str	r0, [sp, #0]
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f000 f8ea 	bl	800e80c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e63e:	b29a      	uxth	r2, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2206      	movs	r2, #6
 800e648:	761a      	strb	r2, [r3, #24]
      break;
 800e64a:	e0c0      	b.n	800e7ce <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	795b      	ldrb	r3, [r3, #5]
 800e650:	4619      	mov	r1, r3
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 fc4c 	bl	800eef0 <USBH_LL_GetURBState>
 800e658:	4603      	mov	r3, r0
 800e65a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e65c:	7bbb      	ldrb	r3, [r7, #14]
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d103      	bne.n	800e66a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2207      	movs	r2, #7
 800e666:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e668:	e0ac      	b.n	800e7c4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e66a:	7bbb      	ldrb	r3, [r7, #14]
 800e66c:	2b05      	cmp	r3, #5
 800e66e:	d105      	bne.n	800e67c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	220c      	movs	r2, #12
 800e674:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e676:	2303      	movs	r3, #3
 800e678:	73fb      	strb	r3, [r7, #15]
      break;
 800e67a:	e0a3      	b.n	800e7c4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e67c:	7bbb      	ldrb	r3, [r7, #14]
 800e67e:	2b02      	cmp	r3, #2
 800e680:	d103      	bne.n	800e68a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2205      	movs	r2, #5
 800e686:	761a      	strb	r2, [r3, #24]
      break;
 800e688:	e09c      	b.n	800e7c4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e68a:	7bbb      	ldrb	r3, [r7, #14]
 800e68c:	2b04      	cmp	r3, #4
 800e68e:	f040 8099 	bne.w	800e7c4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	220b      	movs	r2, #11
 800e696:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e698:	2302      	movs	r3, #2
 800e69a:	73fb      	strb	r3, [r7, #15]
      break;
 800e69c:	e092      	b.n	800e7c4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	791b      	ldrb	r3, [r3, #4]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	2100      	movs	r1, #0
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 f8d5 	bl	800e856 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e6b2:	b29a      	uxth	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2208      	movs	r2, #8
 800e6bc:	761a      	strb	r2, [r3, #24]

      break;
 800e6be:	e086      	b.n	800e7ce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	791b      	ldrb	r3, [r3, #4]
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f000 fc12 	bl	800eef0 <USBH_LL_GetURBState>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e6d0:	7bbb      	ldrb	r3, [r7, #14]
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d105      	bne.n	800e6e2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	220d      	movs	r2, #13
 800e6da:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e6e0:	e072      	b.n	800e7c8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e6e2:	7bbb      	ldrb	r3, [r7, #14]
 800e6e4:	2b04      	cmp	r3, #4
 800e6e6:	d103      	bne.n	800e6f0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	220b      	movs	r2, #11
 800e6ec:	761a      	strb	r2, [r3, #24]
      break;
 800e6ee:	e06b      	b.n	800e7c8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e6f0:	7bbb      	ldrb	r3, [r7, #14]
 800e6f2:	2b05      	cmp	r3, #5
 800e6f4:	d168      	bne.n	800e7c8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e6f6:	2303      	movs	r3, #3
 800e6f8:	73fb      	strb	r3, [r7, #15]
      break;
 800e6fa:	e065      	b.n	800e7c8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	795b      	ldrb	r3, [r3, #5]
 800e700:	2201      	movs	r2, #1
 800e702:	9200      	str	r2, [sp, #0]
 800e704:	2200      	movs	r2, #0
 800e706:	2100      	movs	r1, #0
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 f87f 	bl	800e80c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e714:	b29a      	uxth	r2, r3
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	220a      	movs	r2, #10
 800e71e:	761a      	strb	r2, [r3, #24]
      break;
 800e720:	e055      	b.n	800e7ce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	795b      	ldrb	r3, [r3, #5]
 800e726:	4619      	mov	r1, r3
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 fbe1 	bl	800eef0 <USBH_LL_GetURBState>
 800e72e:	4603      	mov	r3, r0
 800e730:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e732:	7bbb      	ldrb	r3, [r7, #14]
 800e734:	2b01      	cmp	r3, #1
 800e736:	d105      	bne.n	800e744 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e738:	2300      	movs	r3, #0
 800e73a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	220d      	movs	r2, #13
 800e740:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e742:	e043      	b.n	800e7cc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e744:	7bbb      	ldrb	r3, [r7, #14]
 800e746:	2b02      	cmp	r3, #2
 800e748:	d103      	bne.n	800e752 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2209      	movs	r2, #9
 800e74e:	761a      	strb	r2, [r3, #24]
      break;
 800e750:	e03c      	b.n	800e7cc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e752:	7bbb      	ldrb	r3, [r7, #14]
 800e754:	2b04      	cmp	r3, #4
 800e756:	d139      	bne.n	800e7cc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	220b      	movs	r2, #11
 800e75c:	761a      	strb	r2, [r3, #24]
      break;
 800e75e:	e035      	b.n	800e7cc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	7e5b      	ldrb	r3, [r3, #25]
 800e764:	3301      	adds	r3, #1
 800e766:	b2da      	uxtb	r2, r3
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	765a      	strb	r2, [r3, #25]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	7e5b      	ldrb	r3, [r3, #25]
 800e770:	2b02      	cmp	r3, #2
 800e772:	d806      	bhi.n	800e782 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2201      	movs	r2, #1
 800e778:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2201      	movs	r2, #1
 800e77e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e780:	e025      	b.n	800e7ce <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e788:	2106      	movs	r1, #6
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2200      	movs	r2, #0
 800e792:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	795b      	ldrb	r3, [r3, #5]
 800e798:	4619      	mov	r1, r3
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 f90c 	bl	800e9b8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	791b      	ldrb	r3, [r3, #4]
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 f906 	bl	800e9b8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e7b2:	2302      	movs	r3, #2
 800e7b4:	73fb      	strb	r3, [r7, #15]
      break;
 800e7b6:	e00a      	b.n	800e7ce <USBH_HandleControl+0x2de>

    default:
      break;
 800e7b8:	bf00      	nop
 800e7ba:	e008      	b.n	800e7ce <USBH_HandleControl+0x2de>
      break;
 800e7bc:	bf00      	nop
 800e7be:	e006      	b.n	800e7ce <USBH_HandleControl+0x2de>
      break;
 800e7c0:	bf00      	nop
 800e7c2:	e004      	b.n	800e7ce <USBH_HandleControl+0x2de>
      break;
 800e7c4:	bf00      	nop
 800e7c6:	e002      	b.n	800e7ce <USBH_HandleControl+0x2de>
      break;
 800e7c8:	bf00      	nop
 800e7ca:	e000      	b.n	800e7ce <USBH_HandleControl+0x2de>
      break;
 800e7cc:	bf00      	nop
  }

  return status;
 800e7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3710      	adds	r7, #16
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b088      	sub	sp, #32
 800e7dc:	af04      	add	r7, sp, #16
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	4613      	mov	r3, r2
 800e7e4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e7e6:	79f9      	ldrb	r1, [r7, #7]
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	9303      	str	r3, [sp, #12]
 800e7ec:	2308      	movs	r3, #8
 800e7ee:	9302      	str	r3, [sp, #8]
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	9301      	str	r3, [sp, #4]
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	9300      	str	r3, [sp, #0]
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	68f8      	ldr	r0, [r7, #12]
 800e7fe:	f000 fb46 	bl	800ee8e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e802:	2300      	movs	r3, #0
}
 800e804:	4618      	mov	r0, r3
 800e806:	3710      	adds	r7, #16
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b088      	sub	sp, #32
 800e810:	af04      	add	r7, sp, #16
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	4611      	mov	r1, r2
 800e818:	461a      	mov	r2, r3
 800e81a:	460b      	mov	r3, r1
 800e81c:	80fb      	strh	r3, [r7, #6]
 800e81e:	4613      	mov	r3, r2
 800e820:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d001      	beq.n	800e830 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e82c:	2300      	movs	r3, #0
 800e82e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e830:	7979      	ldrb	r1, [r7, #5]
 800e832:	7e3b      	ldrb	r3, [r7, #24]
 800e834:	9303      	str	r3, [sp, #12]
 800e836:	88fb      	ldrh	r3, [r7, #6]
 800e838:	9302      	str	r3, [sp, #8]
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	9301      	str	r3, [sp, #4]
 800e83e:	2301      	movs	r3, #1
 800e840:	9300      	str	r3, [sp, #0]
 800e842:	2300      	movs	r3, #0
 800e844:	2200      	movs	r2, #0
 800e846:	68f8      	ldr	r0, [r7, #12]
 800e848:	f000 fb21 	bl	800ee8e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b088      	sub	sp, #32
 800e85a:	af04      	add	r7, sp, #16
 800e85c:	60f8      	str	r0, [r7, #12]
 800e85e:	60b9      	str	r1, [r7, #8]
 800e860:	4611      	mov	r1, r2
 800e862:	461a      	mov	r2, r3
 800e864:	460b      	mov	r3, r1
 800e866:	80fb      	strh	r3, [r7, #6]
 800e868:	4613      	mov	r3, r2
 800e86a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e86c:	7979      	ldrb	r1, [r7, #5]
 800e86e:	2300      	movs	r3, #0
 800e870:	9303      	str	r3, [sp, #12]
 800e872:	88fb      	ldrh	r3, [r7, #6]
 800e874:	9302      	str	r3, [sp, #8]
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	9301      	str	r3, [sp, #4]
 800e87a:	2301      	movs	r3, #1
 800e87c:	9300      	str	r3, [sp, #0]
 800e87e:	2300      	movs	r3, #0
 800e880:	2201      	movs	r2, #1
 800e882:	68f8      	ldr	r0, [r7, #12]
 800e884:	f000 fb03 	bl	800ee8e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e888:	2300      	movs	r3, #0

}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3710      	adds	r7, #16
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}

0800e892 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e892:	b580      	push	{r7, lr}
 800e894:	b088      	sub	sp, #32
 800e896:	af04      	add	r7, sp, #16
 800e898:	60f8      	str	r0, [r7, #12]
 800e89a:	60b9      	str	r1, [r7, #8]
 800e89c:	4611      	mov	r1, r2
 800e89e:	461a      	mov	r2, r3
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	80fb      	strh	r3, [r7, #6]
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d001      	beq.n	800e8b6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e8b6:	7979      	ldrb	r1, [r7, #5]
 800e8b8:	7e3b      	ldrb	r3, [r7, #24]
 800e8ba:	9303      	str	r3, [sp, #12]
 800e8bc:	88fb      	ldrh	r3, [r7, #6]
 800e8be:	9302      	str	r3, [sp, #8]
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	9301      	str	r3, [sp, #4]
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	9300      	str	r3, [sp, #0]
 800e8c8:	2302      	movs	r3, #2
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	f000 fade 	bl	800ee8e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e8d2:	2300      	movs	r3, #0
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3710      	adds	r7, #16
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b088      	sub	sp, #32
 800e8e0:	af04      	add	r7, sp, #16
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	4611      	mov	r1, r2
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	80fb      	strh	r3, [r7, #6]
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e8f2:	7979      	ldrb	r1, [r7, #5]
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	9303      	str	r3, [sp, #12]
 800e8f8:	88fb      	ldrh	r3, [r7, #6]
 800e8fa:	9302      	str	r3, [sp, #8]
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	9301      	str	r3, [sp, #4]
 800e900:	2301      	movs	r3, #1
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	2302      	movs	r3, #2
 800e906:	2201      	movs	r2, #1
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f000 fac0 	bl	800ee8e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e90e:	2300      	movs	r3, #0
}
 800e910:	4618      	mov	r0, r3
 800e912:	3710      	adds	r7, #16
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b086      	sub	sp, #24
 800e91c:	af04      	add	r7, sp, #16
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	4608      	mov	r0, r1
 800e922:	4611      	mov	r1, r2
 800e924:	461a      	mov	r2, r3
 800e926:	4603      	mov	r3, r0
 800e928:	70fb      	strb	r3, [r7, #3]
 800e92a:	460b      	mov	r3, r1
 800e92c:	70bb      	strb	r3, [r7, #2]
 800e92e:	4613      	mov	r3, r2
 800e930:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e932:	7878      	ldrb	r0, [r7, #1]
 800e934:	78ba      	ldrb	r2, [r7, #2]
 800e936:	78f9      	ldrb	r1, [r7, #3]
 800e938:	8b3b      	ldrh	r3, [r7, #24]
 800e93a:	9302      	str	r3, [sp, #8]
 800e93c:	7d3b      	ldrb	r3, [r7, #20]
 800e93e:	9301      	str	r3, [sp, #4]
 800e940:	7c3b      	ldrb	r3, [r7, #16]
 800e942:	9300      	str	r3, [sp, #0]
 800e944:	4603      	mov	r3, r0
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f000 fa53 	bl	800edf2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e94c:	2300      	movs	r3, #0
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3708      	adds	r7, #8
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}

0800e956 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e956:	b580      	push	{r7, lr}
 800e958:	b082      	sub	sp, #8
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
 800e95e:	460b      	mov	r3, r1
 800e960:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e962:	78fb      	ldrb	r3, [r7, #3]
 800e964:	4619      	mov	r1, r3
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 fa72 	bl	800ee50 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3708      	adds	r7, #8
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b084      	sub	sp, #16
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
 800e97e:	460b      	mov	r3, r1
 800e980:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 f836 	bl	800e9f4 <USBH_GetFreePipe>
 800e988:	4603      	mov	r3, r0
 800e98a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e98c:	89fb      	ldrh	r3, [r7, #14]
 800e98e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e992:	4293      	cmp	r3, r2
 800e994:	d00a      	beq.n	800e9ac <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e996:	78fa      	ldrb	r2, [r7, #3]
 800e998:	89fb      	ldrh	r3, [r7, #14]
 800e99a:	f003 030f 	and.w	r3, r3, #15
 800e99e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e9a2:	6879      	ldr	r1, [r7, #4]
 800e9a4:	33e0      	adds	r3, #224	; 0xe0
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	440b      	add	r3, r1
 800e9aa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e9ac:	89fb      	ldrh	r3, [r7, #14]
 800e9ae:	b2db      	uxtb	r3, r3
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3710      	adds	r7, #16
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b083      	sub	sp, #12
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
 800e9c0:	460b      	mov	r3, r1
 800e9c2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e9c4:	78fb      	ldrb	r3, [r7, #3]
 800e9c6:	2b0f      	cmp	r3, #15
 800e9c8:	d80d      	bhi.n	800e9e6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e9ca:	78fb      	ldrb	r3, [r7, #3]
 800e9cc:	687a      	ldr	r2, [r7, #4]
 800e9ce:	33e0      	adds	r3, #224	; 0xe0
 800e9d0:	009b      	lsls	r3, r3, #2
 800e9d2:	4413      	add	r3, r2
 800e9d4:	685a      	ldr	r2, [r3, #4]
 800e9d6:	78fb      	ldrb	r3, [r7, #3]
 800e9d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e9dc:	6879      	ldr	r1, [r7, #4]
 800e9de:	33e0      	adds	r3, #224	; 0xe0
 800e9e0:	009b      	lsls	r3, r3, #2
 800e9e2:	440b      	add	r3, r1
 800e9e4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e9e6:	2300      	movs	r3, #0
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b085      	sub	sp, #20
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ea00:	2300      	movs	r3, #0
 800ea02:	73fb      	strb	r3, [r7, #15]
 800ea04:	e00f      	b.n	800ea26 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ea06:	7bfb      	ldrb	r3, [r7, #15]
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	33e0      	adds	r3, #224	; 0xe0
 800ea0c:	009b      	lsls	r3, r3, #2
 800ea0e:	4413      	add	r3, r2
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d102      	bne.n	800ea20 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ea1a:	7bfb      	ldrb	r3, [r7, #15]
 800ea1c:	b29b      	uxth	r3, r3
 800ea1e:	e007      	b.n	800ea30 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ea20:	7bfb      	ldrb	r3, [r7, #15]
 800ea22:	3301      	adds	r3, #1
 800ea24:	73fb      	strb	r3, [r7, #15]
 800ea26:	7bfb      	ldrb	r3, [r7, #15]
 800ea28:	2b0f      	cmp	r3, #15
 800ea2a:	d9ec      	bls.n	800ea06 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ea2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3714      	adds	r7, #20
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr

0800ea3c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ea40:	2201      	movs	r2, #1
 800ea42:	490e      	ldr	r1, [pc, #56]	; (800ea7c <MX_USB_HOST_Init+0x40>)
 800ea44:	480e      	ldr	r0, [pc, #56]	; (800ea80 <MX_USB_HOST_Init+0x44>)
 800ea46:	f7fe fba7 	bl	800d198 <USBH_Init>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d001      	beq.n	800ea54 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ea50:	f7f3 fc36 	bl	80022c0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ea54:	490b      	ldr	r1, [pc, #44]	; (800ea84 <MX_USB_HOST_Init+0x48>)
 800ea56:	480a      	ldr	r0, [pc, #40]	; (800ea80 <MX_USB_HOST_Init+0x44>)
 800ea58:	f7fe fc2c 	bl	800d2b4 <USBH_RegisterClass>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d001      	beq.n	800ea66 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ea62:	f7f3 fc2d 	bl	80022c0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ea66:	4806      	ldr	r0, [pc, #24]	; (800ea80 <MX_USB_HOST_Init+0x44>)
 800ea68:	f7fe fcb0 	bl	800d3cc <USBH_Start>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d001      	beq.n	800ea76 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ea72:	f7f3 fc25 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ea76:	bf00      	nop
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	0800ea9d 	.word	0x0800ea9d
 800ea80:	20001744 	.word	0x20001744
 800ea84:	20000024 	.word	0x20000024

0800ea88 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ea8c:	4802      	ldr	r0, [pc, #8]	; (800ea98 <MX_USB_HOST_Process+0x10>)
 800ea8e:	f7fe fcad 	bl	800d3ec <USBH_Process>
}
 800ea92:	bf00      	nop
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	20001744 	.word	0x20001744

0800ea9c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	460b      	mov	r3, r1
 800eaa6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800eaa8:	78fb      	ldrb	r3, [r7, #3]
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	2b04      	cmp	r3, #4
 800eaae:	d819      	bhi.n	800eae4 <USBH_UserProcess+0x48>
 800eab0:	a201      	add	r2, pc, #4	; (adr r2, 800eab8 <USBH_UserProcess+0x1c>)
 800eab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab6:	bf00      	nop
 800eab8:	0800eae5 	.word	0x0800eae5
 800eabc:	0800ead5 	.word	0x0800ead5
 800eac0:	0800eae5 	.word	0x0800eae5
 800eac4:	0800eadd 	.word	0x0800eadd
 800eac8:	0800eacd 	.word	0x0800eacd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800eacc:	4b09      	ldr	r3, [pc, #36]	; (800eaf4 <USBH_UserProcess+0x58>)
 800eace:	2203      	movs	r2, #3
 800ead0:	701a      	strb	r2, [r3, #0]
  break;
 800ead2:	e008      	b.n	800eae6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ead4:	4b07      	ldr	r3, [pc, #28]	; (800eaf4 <USBH_UserProcess+0x58>)
 800ead6:	2202      	movs	r2, #2
 800ead8:	701a      	strb	r2, [r3, #0]
  break;
 800eada:	e004      	b.n	800eae6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800eadc:	4b05      	ldr	r3, [pc, #20]	; (800eaf4 <USBH_UserProcess+0x58>)
 800eade:	2201      	movs	r2, #1
 800eae0:	701a      	strb	r2, [r3, #0]
  break;
 800eae2:	e000      	b.n	800eae6 <USBH_UserProcess+0x4a>

  default:
  break;
 800eae4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800eae6:	bf00      	nop
 800eae8:	370c      	adds	r7, #12
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop
 800eaf4:	200016d8 	.word	0x200016d8

0800eaf8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b08a      	sub	sp, #40	; 0x28
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb00:	f107 0314 	add.w	r3, r7, #20
 800eb04:	2200      	movs	r2, #0
 800eb06:	601a      	str	r2, [r3, #0]
 800eb08:	605a      	str	r2, [r3, #4]
 800eb0a:	609a      	str	r2, [r3, #8]
 800eb0c:	60da      	str	r2, [r3, #12]
 800eb0e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eb18:	d147      	bne.n	800ebaa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	613b      	str	r3, [r7, #16]
 800eb1e:	4b25      	ldr	r3, [pc, #148]	; (800ebb4 <HAL_HCD_MspInit+0xbc>)
 800eb20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb22:	4a24      	ldr	r2, [pc, #144]	; (800ebb4 <HAL_HCD_MspInit+0xbc>)
 800eb24:	f043 0301 	orr.w	r3, r3, #1
 800eb28:	6313      	str	r3, [r2, #48]	; 0x30
 800eb2a:	4b22      	ldr	r3, [pc, #136]	; (800ebb4 <HAL_HCD_MspInit+0xbc>)
 800eb2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb2e:	f003 0301 	and.w	r3, r3, #1
 800eb32:	613b      	str	r3, [r7, #16]
 800eb34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800eb36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb40:	2300      	movs	r3, #0
 800eb42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800eb44:	f107 0314 	add.w	r3, r7, #20
 800eb48:	4619      	mov	r1, r3
 800eb4a:	481b      	ldr	r0, [pc, #108]	; (800ebb8 <HAL_HCD_MspInit+0xc0>)
 800eb4c:	f7f7 fbbc 	bl	80062c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800eb50:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800eb54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb56:	2302      	movs	r3, #2
 800eb58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb5e:	2303      	movs	r3, #3
 800eb60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800eb62:	230a      	movs	r3, #10
 800eb64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb66:	f107 0314 	add.w	r3, r7, #20
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	4812      	ldr	r0, [pc, #72]	; (800ebb8 <HAL_HCD_MspInit+0xc0>)
 800eb6e:	f7f7 fbab 	bl	80062c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eb72:	4b10      	ldr	r3, [pc, #64]	; (800ebb4 <HAL_HCD_MspInit+0xbc>)
 800eb74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb76:	4a0f      	ldr	r2, [pc, #60]	; (800ebb4 <HAL_HCD_MspInit+0xbc>)
 800eb78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb7c:	6353      	str	r3, [r2, #52]	; 0x34
 800eb7e:	2300      	movs	r3, #0
 800eb80:	60fb      	str	r3, [r7, #12]
 800eb82:	4b0c      	ldr	r3, [pc, #48]	; (800ebb4 <HAL_HCD_MspInit+0xbc>)
 800eb84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb86:	4a0b      	ldr	r2, [pc, #44]	; (800ebb4 <HAL_HCD_MspInit+0xbc>)
 800eb88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eb8c:	6453      	str	r3, [r2, #68]	; 0x44
 800eb8e:	4b09      	ldr	r3, [pc, #36]	; (800ebb4 <HAL_HCD_MspInit+0xbc>)
 800eb90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb96:	60fb      	str	r3, [r7, #12]
 800eb98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	2100      	movs	r1, #0
 800eb9e:	2043      	movs	r0, #67	; 0x43
 800eba0:	f7f6 ff59 	bl	8005a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eba4:	2043      	movs	r0, #67	; 0x43
 800eba6:	f7f6 ff72 	bl	8005a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ebaa:	bf00      	nop
 800ebac:	3728      	adds	r7, #40	; 0x28
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	40023800 	.word	0x40023800
 800ebb8:	40020000 	.word	0x40020000

0800ebbc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7fe ffed 	bl	800dbaa <USBH_LL_IncTimer>
}
 800ebd0:	bf00      	nop
 800ebd2:	3708      	adds	r7, #8
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7ff f825 	bl	800dc36 <USBH_LL_Connect>
}
 800ebec:	bf00      	nop
 800ebee:	3708      	adds	r7, #8
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7ff f82e 	bl	800dc64 <USBH_LL_Disconnect>
}
 800ec08:	bf00      	nop
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	460b      	mov	r3, r1
 800ec1a:	70fb      	strb	r3, [r7, #3]
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ec20:	bf00      	nop
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fe ffdf 	bl	800dbfe <USBH_LL_PortEnabled>
}
 800ec40:	bf00      	nop
 800ec42:	3708      	adds	r7, #8
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7fe ffdf 	bl	800dc1a <USBH_LL_PortDisabled>
}
 800ec5c:	bf00      	nop
 800ec5e:	3708      	adds	r7, #8
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d12a      	bne.n	800eccc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ec76:	4a18      	ldr	r2, [pc, #96]	; (800ecd8 <USBH_LL_Init+0x74>)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	4a15      	ldr	r2, [pc, #84]	; (800ecd8 <USBH_LL_Init+0x74>)
 800ec82:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ec86:	4b14      	ldr	r3, [pc, #80]	; (800ecd8 <USBH_LL_Init+0x74>)
 800ec88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ec8c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ec8e:	4b12      	ldr	r3, [pc, #72]	; (800ecd8 <USBH_LL_Init+0x74>)
 800ec90:	2208      	movs	r2, #8
 800ec92:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ec94:	4b10      	ldr	r3, [pc, #64]	; (800ecd8 <USBH_LL_Init+0x74>)
 800ec96:	2201      	movs	r2, #1
 800ec98:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ec9a:	4b0f      	ldr	r3, [pc, #60]	; (800ecd8 <USBH_LL_Init+0x74>)
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800eca0:	4b0d      	ldr	r3, [pc, #52]	; (800ecd8 <USBH_LL_Init+0x74>)
 800eca2:	2202      	movs	r2, #2
 800eca4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eca6:	4b0c      	ldr	r3, [pc, #48]	; (800ecd8 <USBH_LL_Init+0x74>)
 800eca8:	2200      	movs	r2, #0
 800ecaa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ecac:	480a      	ldr	r0, [pc, #40]	; (800ecd8 <USBH_LL_Init+0x74>)
 800ecae:	f7f7 fcf3 	bl	8006698 <HAL_HCD_Init>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d001      	beq.n	800ecbc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ecb8:	f7f3 fb02 	bl	80022c0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ecbc:	4806      	ldr	r0, [pc, #24]	; (800ecd8 <USBH_LL_Init+0x74>)
 800ecbe:	f7f8 f8d6 	bl	8006e6e <HAL_HCD_GetCurrentFrame>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f7fe ff60 	bl	800db8c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3708      	adds	r7, #8
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	20001b1c 	.word	0x20001b1c

0800ecdc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ece4:	2300      	movs	r3, #0
 800ece6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ece8:	2300      	movs	r3, #0
 800ecea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f7f8 f845 	bl	8006d82 <HAL_HCD_Start>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ecfc:	7bfb      	ldrb	r3, [r7, #15]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f000 f95c 	bl	800efbc <USBH_Get_USB_Status>
 800ed04:	4603      	mov	r3, r0
 800ed06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3710      	adds	r7, #16
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}

0800ed12 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ed12:	b580      	push	{r7, lr}
 800ed14:	b084      	sub	sp, #16
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7f8 f84d 	bl	8006dc8 <HAL_HCD_Stop>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ed32:	7bfb      	ldrb	r3, [r7, #15]
 800ed34:	4618      	mov	r0, r3
 800ed36:	f000 f941 	bl	800efbc <USBH_Get_USB_Status>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3710      	adds	r7, #16
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ed50:	2301      	movs	r3, #1
 800ed52:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7f8 f895 	bl	8006e8a <HAL_HCD_GetCurrentSpeed>
 800ed60:	4603      	mov	r3, r0
 800ed62:	2b02      	cmp	r3, #2
 800ed64:	d00c      	beq.n	800ed80 <USBH_LL_GetSpeed+0x38>
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	d80d      	bhi.n	800ed86 <USBH_LL_GetSpeed+0x3e>
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d002      	beq.n	800ed74 <USBH_LL_GetSpeed+0x2c>
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d003      	beq.n	800ed7a <USBH_LL_GetSpeed+0x32>
 800ed72:	e008      	b.n	800ed86 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ed74:	2300      	movs	r3, #0
 800ed76:	73fb      	strb	r3, [r7, #15]
    break;
 800ed78:	e008      	b.n	800ed8c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ed7e:	e005      	b.n	800ed8c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ed80:	2302      	movs	r3, #2
 800ed82:	73fb      	strb	r3, [r7, #15]
    break;
 800ed84:	e002      	b.n	800ed8c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ed86:	2301      	movs	r3, #1
 800ed88:	73fb      	strb	r3, [r7, #15]
    break;
 800ed8a:	bf00      	nop
  }
  return  speed;
 800ed8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b084      	sub	sp, #16
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eda2:	2300      	movs	r3, #0
 800eda4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800edac:	4618      	mov	r0, r3
 800edae:	f7f8 f828 	bl	8006e02 <HAL_HCD_ResetPort>
 800edb2:	4603      	mov	r3, r0
 800edb4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800edb6:	7bfb      	ldrb	r3, [r7, #15]
 800edb8:	4618      	mov	r0, r3
 800edba:	f000 f8ff 	bl	800efbc <USBH_Get_USB_Status>
 800edbe:	4603      	mov	r3, r0
 800edc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3710      	adds	r7, #16
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	460b      	mov	r3, r1
 800edd6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800edde:	78fa      	ldrb	r2, [r7, #3]
 800ede0:	4611      	mov	r1, r2
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7f8 f82f 	bl	8006e46 <HAL_HCD_HC_GetXferCount>
 800ede8:	4603      	mov	r3, r0
}
 800edea:	4618      	mov	r0, r3
 800edec:	3708      	adds	r7, #8
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800edf2:	b590      	push	{r4, r7, lr}
 800edf4:	b089      	sub	sp, #36	; 0x24
 800edf6:	af04      	add	r7, sp, #16
 800edf8:	6078      	str	r0, [r7, #4]
 800edfa:	4608      	mov	r0, r1
 800edfc:	4611      	mov	r1, r2
 800edfe:	461a      	mov	r2, r3
 800ee00:	4603      	mov	r3, r0
 800ee02:	70fb      	strb	r3, [r7, #3]
 800ee04:	460b      	mov	r3, r1
 800ee06:	70bb      	strb	r3, [r7, #2]
 800ee08:	4613      	mov	r3, r2
 800ee0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee10:	2300      	movs	r3, #0
 800ee12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ee1a:	787c      	ldrb	r4, [r7, #1]
 800ee1c:	78ba      	ldrb	r2, [r7, #2]
 800ee1e:	78f9      	ldrb	r1, [r7, #3]
 800ee20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ee22:	9302      	str	r3, [sp, #8]
 800ee24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ee28:	9301      	str	r3, [sp, #4]
 800ee2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ee2e:	9300      	str	r3, [sp, #0]
 800ee30:	4623      	mov	r3, r4
 800ee32:	f7f7 fc93 	bl	800675c <HAL_HCD_HC_Init>
 800ee36:	4603      	mov	r3, r0
 800ee38:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee3a:	7bfb      	ldrb	r3, [r7, #15]
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f000 f8bd 	bl	800efbc <USBH_Get_USB_Status>
 800ee42:	4603      	mov	r3, r0
 800ee44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3714      	adds	r7, #20
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd90      	pop	{r4, r7, pc}

0800ee50 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	460b      	mov	r3, r1
 800ee5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee60:	2300      	movs	r3, #0
 800ee62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee6a:	78fa      	ldrb	r2, [r7, #3]
 800ee6c:	4611      	mov	r1, r2
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7f7 fd03 	bl	800687a <HAL_HCD_HC_Halt>
 800ee74:	4603      	mov	r3, r0
 800ee76:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee78:	7bfb      	ldrb	r3, [r7, #15]
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f000 f89e 	bl	800efbc <USBH_Get_USB_Status>
 800ee80:	4603      	mov	r3, r0
 800ee82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3710      	adds	r7, #16
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}

0800ee8e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ee8e:	b590      	push	{r4, r7, lr}
 800ee90:	b089      	sub	sp, #36	; 0x24
 800ee92:	af04      	add	r7, sp, #16
 800ee94:	6078      	str	r0, [r7, #4]
 800ee96:	4608      	mov	r0, r1
 800ee98:	4611      	mov	r1, r2
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	70fb      	strb	r3, [r7, #3]
 800eea0:	460b      	mov	r3, r1
 800eea2:	70bb      	strb	r3, [r7, #2]
 800eea4:	4613      	mov	r3, r2
 800eea6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eeac:	2300      	movs	r3, #0
 800eeae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800eeb6:	787c      	ldrb	r4, [r7, #1]
 800eeb8:	78ba      	ldrb	r2, [r7, #2]
 800eeba:	78f9      	ldrb	r1, [r7, #3]
 800eebc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eec0:	9303      	str	r3, [sp, #12]
 800eec2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eec4:	9302      	str	r3, [sp, #8]
 800eec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec8:	9301      	str	r3, [sp, #4]
 800eeca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eece:	9300      	str	r3, [sp, #0]
 800eed0:	4623      	mov	r3, r4
 800eed2:	f7f7 fcf5 	bl	80068c0 <HAL_HCD_HC_SubmitRequest>
 800eed6:	4603      	mov	r3, r0
 800eed8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800eeda:	7bfb      	ldrb	r3, [r7, #15]
 800eedc:	4618      	mov	r0, r3
 800eede:	f000 f86d 	bl	800efbc <USBH_Get_USB_Status>
 800eee2:	4603      	mov	r3, r0
 800eee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eee6:	7bbb      	ldrb	r3, [r7, #14]
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3714      	adds	r7, #20
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd90      	pop	{r4, r7, pc}

0800eef0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b082      	sub	sp, #8
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	460b      	mov	r3, r1
 800eefa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ef02:	78fa      	ldrb	r2, [r7, #3]
 800ef04:	4611      	mov	r1, r2
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7f7 ff89 	bl	8006e1e <HAL_HCD_HC_GetURBState>
 800ef0c:	4603      	mov	r3, r0
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3708      	adds	r7, #8
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ef16:	b580      	push	{r7, lr}
 800ef18:	b082      	sub	sp, #8
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
 800ef1e:	460b      	mov	r3, r1
 800ef20:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d103      	bne.n	800ef34 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ef2c:	78fb      	ldrb	r3, [r7, #3]
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f000 f870 	bl	800f014 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ef34:	20c8      	movs	r0, #200	; 0xc8
 800ef36:	f7f6 fc8f 	bl	8005858 <HAL_Delay>
  return USBH_OK;
 800ef3a:	2300      	movs	r3, #0
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3708      	adds	r7, #8
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b085      	sub	sp, #20
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	70fb      	strb	r3, [r7, #3]
 800ef50:	4613      	mov	r3, r2
 800ef52:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ef5a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ef5c:	78fb      	ldrb	r3, [r7, #3]
 800ef5e:	68fa      	ldr	r2, [r7, #12]
 800ef60:	212c      	movs	r1, #44	; 0x2c
 800ef62:	fb01 f303 	mul.w	r3, r1, r3
 800ef66:	4413      	add	r3, r2
 800ef68:	333b      	adds	r3, #59	; 0x3b
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d009      	beq.n	800ef84 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ef70:	78fb      	ldrb	r3, [r7, #3]
 800ef72:	68fa      	ldr	r2, [r7, #12]
 800ef74:	212c      	movs	r1, #44	; 0x2c
 800ef76:	fb01 f303 	mul.w	r3, r1, r3
 800ef7a:	4413      	add	r3, r2
 800ef7c:	3354      	adds	r3, #84	; 0x54
 800ef7e:	78ba      	ldrb	r2, [r7, #2]
 800ef80:	701a      	strb	r2, [r3, #0]
 800ef82:	e008      	b.n	800ef96 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ef84:	78fb      	ldrb	r3, [r7, #3]
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	212c      	movs	r1, #44	; 0x2c
 800ef8a:	fb01 f303 	mul.w	r3, r1, r3
 800ef8e:	4413      	add	r3, r2
 800ef90:	3355      	adds	r3, #85	; 0x55
 800ef92:	78ba      	ldrb	r2, [r7, #2]
 800ef94:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ef96:	2300      	movs	r3, #0
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3714      	adds	r7, #20
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa2:	4770      	bx	lr

0800efa4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f7f6 fc53 	bl	8005858 <HAL_Delay>
}
 800efb2:	bf00      	nop
 800efb4:	3708      	adds	r7, #8
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
	...

0800efbc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b085      	sub	sp, #20
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	4603      	mov	r3, r0
 800efc4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800efc6:	2300      	movs	r3, #0
 800efc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800efca:	79fb      	ldrb	r3, [r7, #7]
 800efcc:	2b03      	cmp	r3, #3
 800efce:	d817      	bhi.n	800f000 <USBH_Get_USB_Status+0x44>
 800efd0:	a201      	add	r2, pc, #4	; (adr r2, 800efd8 <USBH_Get_USB_Status+0x1c>)
 800efd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efd6:	bf00      	nop
 800efd8:	0800efe9 	.word	0x0800efe9
 800efdc:	0800efef 	.word	0x0800efef
 800efe0:	0800eff5 	.word	0x0800eff5
 800efe4:	0800effb 	.word	0x0800effb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800efe8:	2300      	movs	r3, #0
 800efea:	73fb      	strb	r3, [r7, #15]
    break;
 800efec:	e00b      	b.n	800f006 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800efee:	2302      	movs	r3, #2
 800eff0:	73fb      	strb	r3, [r7, #15]
    break;
 800eff2:	e008      	b.n	800f006 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800eff4:	2301      	movs	r3, #1
 800eff6:	73fb      	strb	r3, [r7, #15]
    break;
 800eff8:	e005      	b.n	800f006 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800effa:	2302      	movs	r3, #2
 800effc:	73fb      	strb	r3, [r7, #15]
    break;
 800effe:	e002      	b.n	800f006 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f000:	2302      	movs	r3, #2
 800f002:	73fb      	strb	r3, [r7, #15]
    break;
 800f004:	bf00      	nop
  }
  return usb_status;
 800f006:	7bfb      	ldrb	r3, [r7, #15]
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3714      	adds	r7, #20
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr

0800f014 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	af00      	add	r7, sp, #0
 800f01a:	4603      	mov	r3, r0
 800f01c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f01e:	79fb      	ldrb	r3, [r7, #7]
 800f020:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f022:	79fb      	ldrb	r3, [r7, #7]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d102      	bne.n	800f02e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800f028:	2300      	movs	r3, #0
 800f02a:	73fb      	strb	r3, [r7, #15]
 800f02c:	e001      	b.n	800f032 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800f02e:	2301      	movs	r3, #1
 800f030:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f032:	7bfb      	ldrb	r3, [r7, #15]
 800f034:	461a      	mov	r2, r3
 800f036:	2101      	movs	r1, #1
 800f038:	4803      	ldr	r0, [pc, #12]	; (800f048 <MX_DriverVbusFS+0x34>)
 800f03a:	f7f7 fae1 	bl	8006600 <HAL_GPIO_WritePin>
}
 800f03e:	bf00      	nop
 800f040:	3710      	adds	r7, #16
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	40020800 	.word	0x40020800

0800f04c <__cxa_pure_virtual>:
 800f04c:	b508      	push	{r3, lr}
 800f04e:	f000 f80d 	bl	800f06c <_ZSt9terminatev>

0800f052 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f052:	b508      	push	{r3, lr}
 800f054:	4780      	blx	r0
 800f056:	f000 f833 	bl	800f0c0 <abort>
	...

0800f05c <_ZSt13get_terminatev>:
 800f05c:	4b02      	ldr	r3, [pc, #8]	; (800f068 <_ZSt13get_terminatev+0xc>)
 800f05e:	6818      	ldr	r0, [r3, #0]
 800f060:	f3bf 8f5b 	dmb	ish
 800f064:	4770      	bx	lr
 800f066:	bf00      	nop
 800f068:	20000044 	.word	0x20000044

0800f06c <_ZSt9terminatev>:
 800f06c:	b508      	push	{r3, lr}
 800f06e:	f7ff fff5 	bl	800f05c <_ZSt13get_terminatev>
 800f072:	f7ff ffee 	bl	800f052 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800f078 <roundf>:
 800f078:	ee10 0a10 	vmov	r0, s0
 800f07c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800f080:	3a7f      	subs	r2, #127	; 0x7f
 800f082:	2a16      	cmp	r2, #22
 800f084:	dc15      	bgt.n	800f0b2 <roundf+0x3a>
 800f086:	2a00      	cmp	r2, #0
 800f088:	da08      	bge.n	800f09c <roundf+0x24>
 800f08a:	3201      	adds	r2, #1
 800f08c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800f090:	d101      	bne.n	800f096 <roundf+0x1e>
 800f092:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800f096:	ee00 3a10 	vmov	s0, r3
 800f09a:	4770      	bx	lr
 800f09c:	4907      	ldr	r1, [pc, #28]	; (800f0bc <roundf+0x44>)
 800f09e:	4111      	asrs	r1, r2
 800f0a0:	4208      	tst	r0, r1
 800f0a2:	d0fa      	beq.n	800f09a <roundf+0x22>
 800f0a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f0a8:	4113      	asrs	r3, r2
 800f0aa:	4403      	add	r3, r0
 800f0ac:	ea23 0301 	bic.w	r3, r3, r1
 800f0b0:	e7f1      	b.n	800f096 <roundf+0x1e>
 800f0b2:	2a80      	cmp	r2, #128	; 0x80
 800f0b4:	d1f1      	bne.n	800f09a <roundf+0x22>
 800f0b6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f0ba:	4770      	bx	lr
 800f0bc:	007fffff 	.word	0x007fffff

0800f0c0 <abort>:
 800f0c0:	b508      	push	{r3, lr}
 800f0c2:	2006      	movs	r0, #6
 800f0c4:	f000 fdf6 	bl	800fcb4 <raise>
 800f0c8:	2001      	movs	r0, #1
 800f0ca:	f7f6 fa3d 	bl	8005548 <_exit>
	...

0800f0d0 <__errno>:
 800f0d0:	4b01      	ldr	r3, [pc, #4]	; (800f0d8 <__errno+0x8>)
 800f0d2:	6818      	ldr	r0, [r3, #0]
 800f0d4:	4770      	bx	lr
 800f0d6:	bf00      	nop
 800f0d8:	20000048 	.word	0x20000048

0800f0dc <__libc_init_array>:
 800f0dc:	b570      	push	{r4, r5, r6, lr}
 800f0de:	4d0d      	ldr	r5, [pc, #52]	; (800f114 <__libc_init_array+0x38>)
 800f0e0:	4c0d      	ldr	r4, [pc, #52]	; (800f118 <__libc_init_array+0x3c>)
 800f0e2:	1b64      	subs	r4, r4, r5
 800f0e4:	10a4      	asrs	r4, r4, #2
 800f0e6:	2600      	movs	r6, #0
 800f0e8:	42a6      	cmp	r6, r4
 800f0ea:	d109      	bne.n	800f100 <__libc_init_array+0x24>
 800f0ec:	4d0b      	ldr	r5, [pc, #44]	; (800f11c <__libc_init_array+0x40>)
 800f0ee:	4c0c      	ldr	r4, [pc, #48]	; (800f120 <__libc_init_array+0x44>)
 800f0f0:	f002 fd90 	bl	8011c14 <_init>
 800f0f4:	1b64      	subs	r4, r4, r5
 800f0f6:	10a4      	asrs	r4, r4, #2
 800f0f8:	2600      	movs	r6, #0
 800f0fa:	42a6      	cmp	r6, r4
 800f0fc:	d105      	bne.n	800f10a <__libc_init_array+0x2e>
 800f0fe:	bd70      	pop	{r4, r5, r6, pc}
 800f100:	f855 3b04 	ldr.w	r3, [r5], #4
 800f104:	4798      	blx	r3
 800f106:	3601      	adds	r6, #1
 800f108:	e7ee      	b.n	800f0e8 <__libc_init_array+0xc>
 800f10a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f10e:	4798      	blx	r3
 800f110:	3601      	adds	r6, #1
 800f112:	e7f2      	b.n	800f0fa <__libc_init_array+0x1e>
 800f114:	0801233c 	.word	0x0801233c
 800f118:	0801233c 	.word	0x0801233c
 800f11c:	0801233c 	.word	0x0801233c
 800f120:	08012344 	.word	0x08012344

0800f124 <malloc>:
 800f124:	4b02      	ldr	r3, [pc, #8]	; (800f130 <malloc+0xc>)
 800f126:	4601      	mov	r1, r0
 800f128:	6818      	ldr	r0, [r3, #0]
 800f12a:	f000 b88d 	b.w	800f248 <_malloc_r>
 800f12e:	bf00      	nop
 800f130:	20000048 	.word	0x20000048

0800f134 <free>:
 800f134:	4b02      	ldr	r3, [pc, #8]	; (800f140 <free+0xc>)
 800f136:	4601      	mov	r1, r0
 800f138:	6818      	ldr	r0, [r3, #0]
 800f13a:	f000 b819 	b.w	800f170 <_free_r>
 800f13e:	bf00      	nop
 800f140:	20000048 	.word	0x20000048

0800f144 <memcpy>:
 800f144:	440a      	add	r2, r1
 800f146:	4291      	cmp	r1, r2
 800f148:	f100 33ff 	add.w	r3, r0, #4294967295
 800f14c:	d100      	bne.n	800f150 <memcpy+0xc>
 800f14e:	4770      	bx	lr
 800f150:	b510      	push	{r4, lr}
 800f152:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f15a:	4291      	cmp	r1, r2
 800f15c:	d1f9      	bne.n	800f152 <memcpy+0xe>
 800f15e:	bd10      	pop	{r4, pc}

0800f160 <memset>:
 800f160:	4402      	add	r2, r0
 800f162:	4603      	mov	r3, r0
 800f164:	4293      	cmp	r3, r2
 800f166:	d100      	bne.n	800f16a <memset+0xa>
 800f168:	4770      	bx	lr
 800f16a:	f803 1b01 	strb.w	r1, [r3], #1
 800f16e:	e7f9      	b.n	800f164 <memset+0x4>

0800f170 <_free_r>:
 800f170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f172:	2900      	cmp	r1, #0
 800f174:	d044      	beq.n	800f200 <_free_r+0x90>
 800f176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f17a:	9001      	str	r0, [sp, #4]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	f1a1 0404 	sub.w	r4, r1, #4
 800f182:	bfb8      	it	lt
 800f184:	18e4      	addlt	r4, r4, r3
 800f186:	f001 fd2b 	bl	8010be0 <__malloc_lock>
 800f18a:	4a1e      	ldr	r2, [pc, #120]	; (800f204 <_free_r+0x94>)
 800f18c:	9801      	ldr	r0, [sp, #4]
 800f18e:	6813      	ldr	r3, [r2, #0]
 800f190:	b933      	cbnz	r3, 800f1a0 <_free_r+0x30>
 800f192:	6063      	str	r3, [r4, #4]
 800f194:	6014      	str	r4, [r2, #0]
 800f196:	b003      	add	sp, #12
 800f198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f19c:	f001 bd26 	b.w	8010bec <__malloc_unlock>
 800f1a0:	42a3      	cmp	r3, r4
 800f1a2:	d908      	bls.n	800f1b6 <_free_r+0x46>
 800f1a4:	6825      	ldr	r5, [r4, #0]
 800f1a6:	1961      	adds	r1, r4, r5
 800f1a8:	428b      	cmp	r3, r1
 800f1aa:	bf01      	itttt	eq
 800f1ac:	6819      	ldreq	r1, [r3, #0]
 800f1ae:	685b      	ldreq	r3, [r3, #4]
 800f1b0:	1949      	addeq	r1, r1, r5
 800f1b2:	6021      	streq	r1, [r4, #0]
 800f1b4:	e7ed      	b.n	800f192 <_free_r+0x22>
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	b10b      	cbz	r3, 800f1c0 <_free_r+0x50>
 800f1bc:	42a3      	cmp	r3, r4
 800f1be:	d9fa      	bls.n	800f1b6 <_free_r+0x46>
 800f1c0:	6811      	ldr	r1, [r2, #0]
 800f1c2:	1855      	adds	r5, r2, r1
 800f1c4:	42a5      	cmp	r5, r4
 800f1c6:	d10b      	bne.n	800f1e0 <_free_r+0x70>
 800f1c8:	6824      	ldr	r4, [r4, #0]
 800f1ca:	4421      	add	r1, r4
 800f1cc:	1854      	adds	r4, r2, r1
 800f1ce:	42a3      	cmp	r3, r4
 800f1d0:	6011      	str	r1, [r2, #0]
 800f1d2:	d1e0      	bne.n	800f196 <_free_r+0x26>
 800f1d4:	681c      	ldr	r4, [r3, #0]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	6053      	str	r3, [r2, #4]
 800f1da:	4421      	add	r1, r4
 800f1dc:	6011      	str	r1, [r2, #0]
 800f1de:	e7da      	b.n	800f196 <_free_r+0x26>
 800f1e0:	d902      	bls.n	800f1e8 <_free_r+0x78>
 800f1e2:	230c      	movs	r3, #12
 800f1e4:	6003      	str	r3, [r0, #0]
 800f1e6:	e7d6      	b.n	800f196 <_free_r+0x26>
 800f1e8:	6825      	ldr	r5, [r4, #0]
 800f1ea:	1961      	adds	r1, r4, r5
 800f1ec:	428b      	cmp	r3, r1
 800f1ee:	bf04      	itt	eq
 800f1f0:	6819      	ldreq	r1, [r3, #0]
 800f1f2:	685b      	ldreq	r3, [r3, #4]
 800f1f4:	6063      	str	r3, [r4, #4]
 800f1f6:	bf04      	itt	eq
 800f1f8:	1949      	addeq	r1, r1, r5
 800f1fa:	6021      	streq	r1, [r4, #0]
 800f1fc:	6054      	str	r4, [r2, #4]
 800f1fe:	e7ca      	b.n	800f196 <_free_r+0x26>
 800f200:	b003      	add	sp, #12
 800f202:	bd30      	pop	{r4, r5, pc}
 800f204:	200016dc 	.word	0x200016dc

0800f208 <sbrk_aligned>:
 800f208:	b570      	push	{r4, r5, r6, lr}
 800f20a:	4e0e      	ldr	r6, [pc, #56]	; (800f244 <sbrk_aligned+0x3c>)
 800f20c:	460c      	mov	r4, r1
 800f20e:	6831      	ldr	r1, [r6, #0]
 800f210:	4605      	mov	r5, r0
 800f212:	b911      	cbnz	r1, 800f21a <sbrk_aligned+0x12>
 800f214:	f000 fd16 	bl	800fc44 <_sbrk_r>
 800f218:	6030      	str	r0, [r6, #0]
 800f21a:	4621      	mov	r1, r4
 800f21c:	4628      	mov	r0, r5
 800f21e:	f000 fd11 	bl	800fc44 <_sbrk_r>
 800f222:	1c43      	adds	r3, r0, #1
 800f224:	d00a      	beq.n	800f23c <sbrk_aligned+0x34>
 800f226:	1cc4      	adds	r4, r0, #3
 800f228:	f024 0403 	bic.w	r4, r4, #3
 800f22c:	42a0      	cmp	r0, r4
 800f22e:	d007      	beq.n	800f240 <sbrk_aligned+0x38>
 800f230:	1a21      	subs	r1, r4, r0
 800f232:	4628      	mov	r0, r5
 800f234:	f000 fd06 	bl	800fc44 <_sbrk_r>
 800f238:	3001      	adds	r0, #1
 800f23a:	d101      	bne.n	800f240 <sbrk_aligned+0x38>
 800f23c:	f04f 34ff 	mov.w	r4, #4294967295
 800f240:	4620      	mov	r0, r4
 800f242:	bd70      	pop	{r4, r5, r6, pc}
 800f244:	200016e0 	.word	0x200016e0

0800f248 <_malloc_r>:
 800f248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f24c:	1ccd      	adds	r5, r1, #3
 800f24e:	f025 0503 	bic.w	r5, r5, #3
 800f252:	3508      	adds	r5, #8
 800f254:	2d0c      	cmp	r5, #12
 800f256:	bf38      	it	cc
 800f258:	250c      	movcc	r5, #12
 800f25a:	2d00      	cmp	r5, #0
 800f25c:	4607      	mov	r7, r0
 800f25e:	db01      	blt.n	800f264 <_malloc_r+0x1c>
 800f260:	42a9      	cmp	r1, r5
 800f262:	d905      	bls.n	800f270 <_malloc_r+0x28>
 800f264:	230c      	movs	r3, #12
 800f266:	603b      	str	r3, [r7, #0]
 800f268:	2600      	movs	r6, #0
 800f26a:	4630      	mov	r0, r6
 800f26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f270:	4e2e      	ldr	r6, [pc, #184]	; (800f32c <_malloc_r+0xe4>)
 800f272:	f001 fcb5 	bl	8010be0 <__malloc_lock>
 800f276:	6833      	ldr	r3, [r6, #0]
 800f278:	461c      	mov	r4, r3
 800f27a:	bb34      	cbnz	r4, 800f2ca <_malloc_r+0x82>
 800f27c:	4629      	mov	r1, r5
 800f27e:	4638      	mov	r0, r7
 800f280:	f7ff ffc2 	bl	800f208 <sbrk_aligned>
 800f284:	1c43      	adds	r3, r0, #1
 800f286:	4604      	mov	r4, r0
 800f288:	d14d      	bne.n	800f326 <_malloc_r+0xde>
 800f28a:	6834      	ldr	r4, [r6, #0]
 800f28c:	4626      	mov	r6, r4
 800f28e:	2e00      	cmp	r6, #0
 800f290:	d140      	bne.n	800f314 <_malloc_r+0xcc>
 800f292:	6823      	ldr	r3, [r4, #0]
 800f294:	4631      	mov	r1, r6
 800f296:	4638      	mov	r0, r7
 800f298:	eb04 0803 	add.w	r8, r4, r3
 800f29c:	f000 fcd2 	bl	800fc44 <_sbrk_r>
 800f2a0:	4580      	cmp	r8, r0
 800f2a2:	d13a      	bne.n	800f31a <_malloc_r+0xd2>
 800f2a4:	6821      	ldr	r1, [r4, #0]
 800f2a6:	3503      	adds	r5, #3
 800f2a8:	1a6d      	subs	r5, r5, r1
 800f2aa:	f025 0503 	bic.w	r5, r5, #3
 800f2ae:	3508      	adds	r5, #8
 800f2b0:	2d0c      	cmp	r5, #12
 800f2b2:	bf38      	it	cc
 800f2b4:	250c      	movcc	r5, #12
 800f2b6:	4629      	mov	r1, r5
 800f2b8:	4638      	mov	r0, r7
 800f2ba:	f7ff ffa5 	bl	800f208 <sbrk_aligned>
 800f2be:	3001      	adds	r0, #1
 800f2c0:	d02b      	beq.n	800f31a <_malloc_r+0xd2>
 800f2c2:	6823      	ldr	r3, [r4, #0]
 800f2c4:	442b      	add	r3, r5
 800f2c6:	6023      	str	r3, [r4, #0]
 800f2c8:	e00e      	b.n	800f2e8 <_malloc_r+0xa0>
 800f2ca:	6822      	ldr	r2, [r4, #0]
 800f2cc:	1b52      	subs	r2, r2, r5
 800f2ce:	d41e      	bmi.n	800f30e <_malloc_r+0xc6>
 800f2d0:	2a0b      	cmp	r2, #11
 800f2d2:	d916      	bls.n	800f302 <_malloc_r+0xba>
 800f2d4:	1961      	adds	r1, r4, r5
 800f2d6:	42a3      	cmp	r3, r4
 800f2d8:	6025      	str	r5, [r4, #0]
 800f2da:	bf18      	it	ne
 800f2dc:	6059      	strne	r1, [r3, #4]
 800f2de:	6863      	ldr	r3, [r4, #4]
 800f2e0:	bf08      	it	eq
 800f2e2:	6031      	streq	r1, [r6, #0]
 800f2e4:	5162      	str	r2, [r4, r5]
 800f2e6:	604b      	str	r3, [r1, #4]
 800f2e8:	4638      	mov	r0, r7
 800f2ea:	f104 060b 	add.w	r6, r4, #11
 800f2ee:	f001 fc7d 	bl	8010bec <__malloc_unlock>
 800f2f2:	f026 0607 	bic.w	r6, r6, #7
 800f2f6:	1d23      	adds	r3, r4, #4
 800f2f8:	1af2      	subs	r2, r6, r3
 800f2fa:	d0b6      	beq.n	800f26a <_malloc_r+0x22>
 800f2fc:	1b9b      	subs	r3, r3, r6
 800f2fe:	50a3      	str	r3, [r4, r2]
 800f300:	e7b3      	b.n	800f26a <_malloc_r+0x22>
 800f302:	6862      	ldr	r2, [r4, #4]
 800f304:	42a3      	cmp	r3, r4
 800f306:	bf0c      	ite	eq
 800f308:	6032      	streq	r2, [r6, #0]
 800f30a:	605a      	strne	r2, [r3, #4]
 800f30c:	e7ec      	b.n	800f2e8 <_malloc_r+0xa0>
 800f30e:	4623      	mov	r3, r4
 800f310:	6864      	ldr	r4, [r4, #4]
 800f312:	e7b2      	b.n	800f27a <_malloc_r+0x32>
 800f314:	4634      	mov	r4, r6
 800f316:	6876      	ldr	r6, [r6, #4]
 800f318:	e7b9      	b.n	800f28e <_malloc_r+0x46>
 800f31a:	230c      	movs	r3, #12
 800f31c:	603b      	str	r3, [r7, #0]
 800f31e:	4638      	mov	r0, r7
 800f320:	f001 fc64 	bl	8010bec <__malloc_unlock>
 800f324:	e7a1      	b.n	800f26a <_malloc_r+0x22>
 800f326:	6025      	str	r5, [r4, #0]
 800f328:	e7de      	b.n	800f2e8 <_malloc_r+0xa0>
 800f32a:	bf00      	nop
 800f32c:	200016dc 	.word	0x200016dc

0800f330 <__cvt>:
 800f330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f334:	ec55 4b10 	vmov	r4, r5, d0
 800f338:	2d00      	cmp	r5, #0
 800f33a:	460e      	mov	r6, r1
 800f33c:	4619      	mov	r1, r3
 800f33e:	462b      	mov	r3, r5
 800f340:	bfbb      	ittet	lt
 800f342:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f346:	461d      	movlt	r5, r3
 800f348:	2300      	movge	r3, #0
 800f34a:	232d      	movlt	r3, #45	; 0x2d
 800f34c:	700b      	strb	r3, [r1, #0]
 800f34e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f350:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f354:	4691      	mov	r9, r2
 800f356:	f023 0820 	bic.w	r8, r3, #32
 800f35a:	bfbc      	itt	lt
 800f35c:	4622      	movlt	r2, r4
 800f35e:	4614      	movlt	r4, r2
 800f360:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f364:	d005      	beq.n	800f372 <__cvt+0x42>
 800f366:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f36a:	d100      	bne.n	800f36e <__cvt+0x3e>
 800f36c:	3601      	adds	r6, #1
 800f36e:	2102      	movs	r1, #2
 800f370:	e000      	b.n	800f374 <__cvt+0x44>
 800f372:	2103      	movs	r1, #3
 800f374:	ab03      	add	r3, sp, #12
 800f376:	9301      	str	r3, [sp, #4]
 800f378:	ab02      	add	r3, sp, #8
 800f37a:	9300      	str	r3, [sp, #0]
 800f37c:	ec45 4b10 	vmov	d0, r4, r5
 800f380:	4653      	mov	r3, sl
 800f382:	4632      	mov	r2, r6
 800f384:	f000 fd40 	bl	800fe08 <_dtoa_r>
 800f388:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f38c:	4607      	mov	r7, r0
 800f38e:	d102      	bne.n	800f396 <__cvt+0x66>
 800f390:	f019 0f01 	tst.w	r9, #1
 800f394:	d022      	beq.n	800f3dc <__cvt+0xac>
 800f396:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f39a:	eb07 0906 	add.w	r9, r7, r6
 800f39e:	d110      	bne.n	800f3c2 <__cvt+0x92>
 800f3a0:	783b      	ldrb	r3, [r7, #0]
 800f3a2:	2b30      	cmp	r3, #48	; 0x30
 800f3a4:	d10a      	bne.n	800f3bc <__cvt+0x8c>
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	4629      	mov	r1, r5
 800f3ae:	f7f1 fb93 	bl	8000ad8 <__aeabi_dcmpeq>
 800f3b2:	b918      	cbnz	r0, 800f3bc <__cvt+0x8c>
 800f3b4:	f1c6 0601 	rsb	r6, r6, #1
 800f3b8:	f8ca 6000 	str.w	r6, [sl]
 800f3bc:	f8da 3000 	ldr.w	r3, [sl]
 800f3c0:	4499      	add	r9, r3
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	4620      	mov	r0, r4
 800f3c8:	4629      	mov	r1, r5
 800f3ca:	f7f1 fb85 	bl	8000ad8 <__aeabi_dcmpeq>
 800f3ce:	b108      	cbz	r0, 800f3d4 <__cvt+0xa4>
 800f3d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800f3d4:	2230      	movs	r2, #48	; 0x30
 800f3d6:	9b03      	ldr	r3, [sp, #12]
 800f3d8:	454b      	cmp	r3, r9
 800f3da:	d307      	bcc.n	800f3ec <__cvt+0xbc>
 800f3dc:	9b03      	ldr	r3, [sp, #12]
 800f3de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f3e0:	1bdb      	subs	r3, r3, r7
 800f3e2:	4638      	mov	r0, r7
 800f3e4:	6013      	str	r3, [r2, #0]
 800f3e6:	b004      	add	sp, #16
 800f3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3ec:	1c59      	adds	r1, r3, #1
 800f3ee:	9103      	str	r1, [sp, #12]
 800f3f0:	701a      	strb	r2, [r3, #0]
 800f3f2:	e7f0      	b.n	800f3d6 <__cvt+0xa6>

0800f3f4 <__exponent>:
 800f3f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	2900      	cmp	r1, #0
 800f3fa:	bfb8      	it	lt
 800f3fc:	4249      	neglt	r1, r1
 800f3fe:	f803 2b02 	strb.w	r2, [r3], #2
 800f402:	bfb4      	ite	lt
 800f404:	222d      	movlt	r2, #45	; 0x2d
 800f406:	222b      	movge	r2, #43	; 0x2b
 800f408:	2909      	cmp	r1, #9
 800f40a:	7042      	strb	r2, [r0, #1]
 800f40c:	dd2a      	ble.n	800f464 <__exponent+0x70>
 800f40e:	f10d 0407 	add.w	r4, sp, #7
 800f412:	46a4      	mov	ip, r4
 800f414:	270a      	movs	r7, #10
 800f416:	46a6      	mov	lr, r4
 800f418:	460a      	mov	r2, r1
 800f41a:	fb91 f6f7 	sdiv	r6, r1, r7
 800f41e:	fb07 1516 	mls	r5, r7, r6, r1
 800f422:	3530      	adds	r5, #48	; 0x30
 800f424:	2a63      	cmp	r2, #99	; 0x63
 800f426:	f104 34ff 	add.w	r4, r4, #4294967295
 800f42a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f42e:	4631      	mov	r1, r6
 800f430:	dcf1      	bgt.n	800f416 <__exponent+0x22>
 800f432:	3130      	adds	r1, #48	; 0x30
 800f434:	f1ae 0502 	sub.w	r5, lr, #2
 800f438:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f43c:	1c44      	adds	r4, r0, #1
 800f43e:	4629      	mov	r1, r5
 800f440:	4561      	cmp	r1, ip
 800f442:	d30a      	bcc.n	800f45a <__exponent+0x66>
 800f444:	f10d 0209 	add.w	r2, sp, #9
 800f448:	eba2 020e 	sub.w	r2, r2, lr
 800f44c:	4565      	cmp	r5, ip
 800f44e:	bf88      	it	hi
 800f450:	2200      	movhi	r2, #0
 800f452:	4413      	add	r3, r2
 800f454:	1a18      	subs	r0, r3, r0
 800f456:	b003      	add	sp, #12
 800f458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f45a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f45e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f462:	e7ed      	b.n	800f440 <__exponent+0x4c>
 800f464:	2330      	movs	r3, #48	; 0x30
 800f466:	3130      	adds	r1, #48	; 0x30
 800f468:	7083      	strb	r3, [r0, #2]
 800f46a:	70c1      	strb	r1, [r0, #3]
 800f46c:	1d03      	adds	r3, r0, #4
 800f46e:	e7f1      	b.n	800f454 <__exponent+0x60>

0800f470 <_printf_float>:
 800f470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f474:	ed2d 8b02 	vpush	{d8}
 800f478:	b08d      	sub	sp, #52	; 0x34
 800f47a:	460c      	mov	r4, r1
 800f47c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f480:	4616      	mov	r6, r2
 800f482:	461f      	mov	r7, r3
 800f484:	4605      	mov	r5, r0
 800f486:	f001 fba3 	bl	8010bd0 <_localeconv_r>
 800f48a:	f8d0 a000 	ldr.w	sl, [r0]
 800f48e:	4650      	mov	r0, sl
 800f490:	f7f0 fea6 	bl	80001e0 <strlen>
 800f494:	2300      	movs	r3, #0
 800f496:	930a      	str	r3, [sp, #40]	; 0x28
 800f498:	6823      	ldr	r3, [r4, #0]
 800f49a:	9305      	str	r3, [sp, #20]
 800f49c:	f8d8 3000 	ldr.w	r3, [r8]
 800f4a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f4a4:	3307      	adds	r3, #7
 800f4a6:	f023 0307 	bic.w	r3, r3, #7
 800f4aa:	f103 0208 	add.w	r2, r3, #8
 800f4ae:	f8c8 2000 	str.w	r2, [r8]
 800f4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f4ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f4be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f4c2:	9307      	str	r3, [sp, #28]
 800f4c4:	f8cd 8018 	str.w	r8, [sp, #24]
 800f4c8:	ee08 0a10 	vmov	s16, r0
 800f4cc:	4b9f      	ldr	r3, [pc, #636]	; (800f74c <_printf_float+0x2dc>)
 800f4ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800f4d6:	f7f1 fb31 	bl	8000b3c <__aeabi_dcmpun>
 800f4da:	bb88      	cbnz	r0, 800f540 <_printf_float+0xd0>
 800f4dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4e0:	4b9a      	ldr	r3, [pc, #616]	; (800f74c <_printf_float+0x2dc>)
 800f4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f4e6:	f7f1 fb0b 	bl	8000b00 <__aeabi_dcmple>
 800f4ea:	bb48      	cbnz	r0, 800f540 <_printf_float+0xd0>
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	4640      	mov	r0, r8
 800f4f2:	4649      	mov	r1, r9
 800f4f4:	f7f1 fafa 	bl	8000aec <__aeabi_dcmplt>
 800f4f8:	b110      	cbz	r0, 800f500 <_printf_float+0x90>
 800f4fa:	232d      	movs	r3, #45	; 0x2d
 800f4fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f500:	4b93      	ldr	r3, [pc, #588]	; (800f750 <_printf_float+0x2e0>)
 800f502:	4894      	ldr	r0, [pc, #592]	; (800f754 <_printf_float+0x2e4>)
 800f504:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f508:	bf94      	ite	ls
 800f50a:	4698      	movls	r8, r3
 800f50c:	4680      	movhi	r8, r0
 800f50e:	2303      	movs	r3, #3
 800f510:	6123      	str	r3, [r4, #16]
 800f512:	9b05      	ldr	r3, [sp, #20]
 800f514:	f023 0204 	bic.w	r2, r3, #4
 800f518:	6022      	str	r2, [r4, #0]
 800f51a:	f04f 0900 	mov.w	r9, #0
 800f51e:	9700      	str	r7, [sp, #0]
 800f520:	4633      	mov	r3, r6
 800f522:	aa0b      	add	r2, sp, #44	; 0x2c
 800f524:	4621      	mov	r1, r4
 800f526:	4628      	mov	r0, r5
 800f528:	f000 f9d8 	bl	800f8dc <_printf_common>
 800f52c:	3001      	adds	r0, #1
 800f52e:	f040 8090 	bne.w	800f652 <_printf_float+0x1e2>
 800f532:	f04f 30ff 	mov.w	r0, #4294967295
 800f536:	b00d      	add	sp, #52	; 0x34
 800f538:	ecbd 8b02 	vpop	{d8}
 800f53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f540:	4642      	mov	r2, r8
 800f542:	464b      	mov	r3, r9
 800f544:	4640      	mov	r0, r8
 800f546:	4649      	mov	r1, r9
 800f548:	f7f1 faf8 	bl	8000b3c <__aeabi_dcmpun>
 800f54c:	b140      	cbz	r0, 800f560 <_printf_float+0xf0>
 800f54e:	464b      	mov	r3, r9
 800f550:	2b00      	cmp	r3, #0
 800f552:	bfbc      	itt	lt
 800f554:	232d      	movlt	r3, #45	; 0x2d
 800f556:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f55a:	487f      	ldr	r0, [pc, #508]	; (800f758 <_printf_float+0x2e8>)
 800f55c:	4b7f      	ldr	r3, [pc, #508]	; (800f75c <_printf_float+0x2ec>)
 800f55e:	e7d1      	b.n	800f504 <_printf_float+0x94>
 800f560:	6863      	ldr	r3, [r4, #4]
 800f562:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f566:	9206      	str	r2, [sp, #24]
 800f568:	1c5a      	adds	r2, r3, #1
 800f56a:	d13f      	bne.n	800f5ec <_printf_float+0x17c>
 800f56c:	2306      	movs	r3, #6
 800f56e:	6063      	str	r3, [r4, #4]
 800f570:	9b05      	ldr	r3, [sp, #20]
 800f572:	6861      	ldr	r1, [r4, #4]
 800f574:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f578:	2300      	movs	r3, #0
 800f57a:	9303      	str	r3, [sp, #12]
 800f57c:	ab0a      	add	r3, sp, #40	; 0x28
 800f57e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f582:	ab09      	add	r3, sp, #36	; 0x24
 800f584:	ec49 8b10 	vmov	d0, r8, r9
 800f588:	9300      	str	r3, [sp, #0]
 800f58a:	6022      	str	r2, [r4, #0]
 800f58c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f590:	4628      	mov	r0, r5
 800f592:	f7ff fecd 	bl	800f330 <__cvt>
 800f596:	9b06      	ldr	r3, [sp, #24]
 800f598:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f59a:	2b47      	cmp	r3, #71	; 0x47
 800f59c:	4680      	mov	r8, r0
 800f59e:	d108      	bne.n	800f5b2 <_printf_float+0x142>
 800f5a0:	1cc8      	adds	r0, r1, #3
 800f5a2:	db02      	blt.n	800f5aa <_printf_float+0x13a>
 800f5a4:	6863      	ldr	r3, [r4, #4]
 800f5a6:	4299      	cmp	r1, r3
 800f5a8:	dd41      	ble.n	800f62e <_printf_float+0x1be>
 800f5aa:	f1ab 0b02 	sub.w	fp, fp, #2
 800f5ae:	fa5f fb8b 	uxtb.w	fp, fp
 800f5b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f5b6:	d820      	bhi.n	800f5fa <_printf_float+0x18a>
 800f5b8:	3901      	subs	r1, #1
 800f5ba:	465a      	mov	r2, fp
 800f5bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f5c0:	9109      	str	r1, [sp, #36]	; 0x24
 800f5c2:	f7ff ff17 	bl	800f3f4 <__exponent>
 800f5c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5c8:	1813      	adds	r3, r2, r0
 800f5ca:	2a01      	cmp	r2, #1
 800f5cc:	4681      	mov	r9, r0
 800f5ce:	6123      	str	r3, [r4, #16]
 800f5d0:	dc02      	bgt.n	800f5d8 <_printf_float+0x168>
 800f5d2:	6822      	ldr	r2, [r4, #0]
 800f5d4:	07d2      	lsls	r2, r2, #31
 800f5d6:	d501      	bpl.n	800f5dc <_printf_float+0x16c>
 800f5d8:	3301      	adds	r3, #1
 800f5da:	6123      	str	r3, [r4, #16]
 800f5dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d09c      	beq.n	800f51e <_printf_float+0xae>
 800f5e4:	232d      	movs	r3, #45	; 0x2d
 800f5e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5ea:	e798      	b.n	800f51e <_printf_float+0xae>
 800f5ec:	9a06      	ldr	r2, [sp, #24]
 800f5ee:	2a47      	cmp	r2, #71	; 0x47
 800f5f0:	d1be      	bne.n	800f570 <_printf_float+0x100>
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d1bc      	bne.n	800f570 <_printf_float+0x100>
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	e7b9      	b.n	800f56e <_printf_float+0xfe>
 800f5fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f5fe:	d118      	bne.n	800f632 <_printf_float+0x1c2>
 800f600:	2900      	cmp	r1, #0
 800f602:	6863      	ldr	r3, [r4, #4]
 800f604:	dd0b      	ble.n	800f61e <_printf_float+0x1ae>
 800f606:	6121      	str	r1, [r4, #16]
 800f608:	b913      	cbnz	r3, 800f610 <_printf_float+0x1a0>
 800f60a:	6822      	ldr	r2, [r4, #0]
 800f60c:	07d0      	lsls	r0, r2, #31
 800f60e:	d502      	bpl.n	800f616 <_printf_float+0x1a6>
 800f610:	3301      	adds	r3, #1
 800f612:	440b      	add	r3, r1
 800f614:	6123      	str	r3, [r4, #16]
 800f616:	65a1      	str	r1, [r4, #88]	; 0x58
 800f618:	f04f 0900 	mov.w	r9, #0
 800f61c:	e7de      	b.n	800f5dc <_printf_float+0x16c>
 800f61e:	b913      	cbnz	r3, 800f626 <_printf_float+0x1b6>
 800f620:	6822      	ldr	r2, [r4, #0]
 800f622:	07d2      	lsls	r2, r2, #31
 800f624:	d501      	bpl.n	800f62a <_printf_float+0x1ba>
 800f626:	3302      	adds	r3, #2
 800f628:	e7f4      	b.n	800f614 <_printf_float+0x1a4>
 800f62a:	2301      	movs	r3, #1
 800f62c:	e7f2      	b.n	800f614 <_printf_float+0x1a4>
 800f62e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f634:	4299      	cmp	r1, r3
 800f636:	db05      	blt.n	800f644 <_printf_float+0x1d4>
 800f638:	6823      	ldr	r3, [r4, #0]
 800f63a:	6121      	str	r1, [r4, #16]
 800f63c:	07d8      	lsls	r0, r3, #31
 800f63e:	d5ea      	bpl.n	800f616 <_printf_float+0x1a6>
 800f640:	1c4b      	adds	r3, r1, #1
 800f642:	e7e7      	b.n	800f614 <_printf_float+0x1a4>
 800f644:	2900      	cmp	r1, #0
 800f646:	bfd4      	ite	le
 800f648:	f1c1 0202 	rsble	r2, r1, #2
 800f64c:	2201      	movgt	r2, #1
 800f64e:	4413      	add	r3, r2
 800f650:	e7e0      	b.n	800f614 <_printf_float+0x1a4>
 800f652:	6823      	ldr	r3, [r4, #0]
 800f654:	055a      	lsls	r2, r3, #21
 800f656:	d407      	bmi.n	800f668 <_printf_float+0x1f8>
 800f658:	6923      	ldr	r3, [r4, #16]
 800f65a:	4642      	mov	r2, r8
 800f65c:	4631      	mov	r1, r6
 800f65e:	4628      	mov	r0, r5
 800f660:	47b8      	blx	r7
 800f662:	3001      	adds	r0, #1
 800f664:	d12c      	bne.n	800f6c0 <_printf_float+0x250>
 800f666:	e764      	b.n	800f532 <_printf_float+0xc2>
 800f668:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f66c:	f240 80e0 	bls.w	800f830 <_printf_float+0x3c0>
 800f670:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f674:	2200      	movs	r2, #0
 800f676:	2300      	movs	r3, #0
 800f678:	f7f1 fa2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800f67c:	2800      	cmp	r0, #0
 800f67e:	d034      	beq.n	800f6ea <_printf_float+0x27a>
 800f680:	4a37      	ldr	r2, [pc, #220]	; (800f760 <_printf_float+0x2f0>)
 800f682:	2301      	movs	r3, #1
 800f684:	4631      	mov	r1, r6
 800f686:	4628      	mov	r0, r5
 800f688:	47b8      	blx	r7
 800f68a:	3001      	adds	r0, #1
 800f68c:	f43f af51 	beq.w	800f532 <_printf_float+0xc2>
 800f690:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f694:	429a      	cmp	r2, r3
 800f696:	db02      	blt.n	800f69e <_printf_float+0x22e>
 800f698:	6823      	ldr	r3, [r4, #0]
 800f69a:	07d8      	lsls	r0, r3, #31
 800f69c:	d510      	bpl.n	800f6c0 <_printf_float+0x250>
 800f69e:	ee18 3a10 	vmov	r3, s16
 800f6a2:	4652      	mov	r2, sl
 800f6a4:	4631      	mov	r1, r6
 800f6a6:	4628      	mov	r0, r5
 800f6a8:	47b8      	blx	r7
 800f6aa:	3001      	adds	r0, #1
 800f6ac:	f43f af41 	beq.w	800f532 <_printf_float+0xc2>
 800f6b0:	f04f 0800 	mov.w	r8, #0
 800f6b4:	f104 091a 	add.w	r9, r4, #26
 800f6b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6ba:	3b01      	subs	r3, #1
 800f6bc:	4543      	cmp	r3, r8
 800f6be:	dc09      	bgt.n	800f6d4 <_printf_float+0x264>
 800f6c0:	6823      	ldr	r3, [r4, #0]
 800f6c2:	079b      	lsls	r3, r3, #30
 800f6c4:	f100 8105 	bmi.w	800f8d2 <_printf_float+0x462>
 800f6c8:	68e0      	ldr	r0, [r4, #12]
 800f6ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6cc:	4298      	cmp	r0, r3
 800f6ce:	bfb8      	it	lt
 800f6d0:	4618      	movlt	r0, r3
 800f6d2:	e730      	b.n	800f536 <_printf_float+0xc6>
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	464a      	mov	r2, r9
 800f6d8:	4631      	mov	r1, r6
 800f6da:	4628      	mov	r0, r5
 800f6dc:	47b8      	blx	r7
 800f6de:	3001      	adds	r0, #1
 800f6e0:	f43f af27 	beq.w	800f532 <_printf_float+0xc2>
 800f6e4:	f108 0801 	add.w	r8, r8, #1
 800f6e8:	e7e6      	b.n	800f6b8 <_printf_float+0x248>
 800f6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	dc39      	bgt.n	800f764 <_printf_float+0x2f4>
 800f6f0:	4a1b      	ldr	r2, [pc, #108]	; (800f760 <_printf_float+0x2f0>)
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	4631      	mov	r1, r6
 800f6f6:	4628      	mov	r0, r5
 800f6f8:	47b8      	blx	r7
 800f6fa:	3001      	adds	r0, #1
 800f6fc:	f43f af19 	beq.w	800f532 <_printf_float+0xc2>
 800f700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f704:	4313      	orrs	r3, r2
 800f706:	d102      	bne.n	800f70e <_printf_float+0x29e>
 800f708:	6823      	ldr	r3, [r4, #0]
 800f70a:	07d9      	lsls	r1, r3, #31
 800f70c:	d5d8      	bpl.n	800f6c0 <_printf_float+0x250>
 800f70e:	ee18 3a10 	vmov	r3, s16
 800f712:	4652      	mov	r2, sl
 800f714:	4631      	mov	r1, r6
 800f716:	4628      	mov	r0, r5
 800f718:	47b8      	blx	r7
 800f71a:	3001      	adds	r0, #1
 800f71c:	f43f af09 	beq.w	800f532 <_printf_float+0xc2>
 800f720:	f04f 0900 	mov.w	r9, #0
 800f724:	f104 0a1a 	add.w	sl, r4, #26
 800f728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f72a:	425b      	negs	r3, r3
 800f72c:	454b      	cmp	r3, r9
 800f72e:	dc01      	bgt.n	800f734 <_printf_float+0x2c4>
 800f730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f732:	e792      	b.n	800f65a <_printf_float+0x1ea>
 800f734:	2301      	movs	r3, #1
 800f736:	4652      	mov	r2, sl
 800f738:	4631      	mov	r1, r6
 800f73a:	4628      	mov	r0, r5
 800f73c:	47b8      	blx	r7
 800f73e:	3001      	adds	r0, #1
 800f740:	f43f aef7 	beq.w	800f532 <_printf_float+0xc2>
 800f744:	f109 0901 	add.w	r9, r9, #1
 800f748:	e7ee      	b.n	800f728 <_printf_float+0x2b8>
 800f74a:	bf00      	nop
 800f74c:	7fefffff 	.word	0x7fefffff
 800f750:	08011f5c 	.word	0x08011f5c
 800f754:	08011f60 	.word	0x08011f60
 800f758:	08011f68 	.word	0x08011f68
 800f75c:	08011f64 	.word	0x08011f64
 800f760:	08011f6c 	.word	0x08011f6c
 800f764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f766:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f768:	429a      	cmp	r2, r3
 800f76a:	bfa8      	it	ge
 800f76c:	461a      	movge	r2, r3
 800f76e:	2a00      	cmp	r2, #0
 800f770:	4691      	mov	r9, r2
 800f772:	dc37      	bgt.n	800f7e4 <_printf_float+0x374>
 800f774:	f04f 0b00 	mov.w	fp, #0
 800f778:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f77c:	f104 021a 	add.w	r2, r4, #26
 800f780:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f782:	9305      	str	r3, [sp, #20]
 800f784:	eba3 0309 	sub.w	r3, r3, r9
 800f788:	455b      	cmp	r3, fp
 800f78a:	dc33      	bgt.n	800f7f4 <_printf_float+0x384>
 800f78c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f790:	429a      	cmp	r2, r3
 800f792:	db3b      	blt.n	800f80c <_printf_float+0x39c>
 800f794:	6823      	ldr	r3, [r4, #0]
 800f796:	07da      	lsls	r2, r3, #31
 800f798:	d438      	bmi.n	800f80c <_printf_float+0x39c>
 800f79a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f79c:	9a05      	ldr	r2, [sp, #20]
 800f79e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f7a0:	1a9a      	subs	r2, r3, r2
 800f7a2:	eba3 0901 	sub.w	r9, r3, r1
 800f7a6:	4591      	cmp	r9, r2
 800f7a8:	bfa8      	it	ge
 800f7aa:	4691      	movge	r9, r2
 800f7ac:	f1b9 0f00 	cmp.w	r9, #0
 800f7b0:	dc35      	bgt.n	800f81e <_printf_float+0x3ae>
 800f7b2:	f04f 0800 	mov.w	r8, #0
 800f7b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f7ba:	f104 0a1a 	add.w	sl, r4, #26
 800f7be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7c2:	1a9b      	subs	r3, r3, r2
 800f7c4:	eba3 0309 	sub.w	r3, r3, r9
 800f7c8:	4543      	cmp	r3, r8
 800f7ca:	f77f af79 	ble.w	800f6c0 <_printf_float+0x250>
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	4652      	mov	r2, sl
 800f7d2:	4631      	mov	r1, r6
 800f7d4:	4628      	mov	r0, r5
 800f7d6:	47b8      	blx	r7
 800f7d8:	3001      	adds	r0, #1
 800f7da:	f43f aeaa 	beq.w	800f532 <_printf_float+0xc2>
 800f7de:	f108 0801 	add.w	r8, r8, #1
 800f7e2:	e7ec      	b.n	800f7be <_printf_float+0x34e>
 800f7e4:	4613      	mov	r3, r2
 800f7e6:	4631      	mov	r1, r6
 800f7e8:	4642      	mov	r2, r8
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	47b8      	blx	r7
 800f7ee:	3001      	adds	r0, #1
 800f7f0:	d1c0      	bne.n	800f774 <_printf_float+0x304>
 800f7f2:	e69e      	b.n	800f532 <_printf_float+0xc2>
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	4631      	mov	r1, r6
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	9205      	str	r2, [sp, #20]
 800f7fc:	47b8      	blx	r7
 800f7fe:	3001      	adds	r0, #1
 800f800:	f43f ae97 	beq.w	800f532 <_printf_float+0xc2>
 800f804:	9a05      	ldr	r2, [sp, #20]
 800f806:	f10b 0b01 	add.w	fp, fp, #1
 800f80a:	e7b9      	b.n	800f780 <_printf_float+0x310>
 800f80c:	ee18 3a10 	vmov	r3, s16
 800f810:	4652      	mov	r2, sl
 800f812:	4631      	mov	r1, r6
 800f814:	4628      	mov	r0, r5
 800f816:	47b8      	blx	r7
 800f818:	3001      	adds	r0, #1
 800f81a:	d1be      	bne.n	800f79a <_printf_float+0x32a>
 800f81c:	e689      	b.n	800f532 <_printf_float+0xc2>
 800f81e:	9a05      	ldr	r2, [sp, #20]
 800f820:	464b      	mov	r3, r9
 800f822:	4442      	add	r2, r8
 800f824:	4631      	mov	r1, r6
 800f826:	4628      	mov	r0, r5
 800f828:	47b8      	blx	r7
 800f82a:	3001      	adds	r0, #1
 800f82c:	d1c1      	bne.n	800f7b2 <_printf_float+0x342>
 800f82e:	e680      	b.n	800f532 <_printf_float+0xc2>
 800f830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f832:	2a01      	cmp	r2, #1
 800f834:	dc01      	bgt.n	800f83a <_printf_float+0x3ca>
 800f836:	07db      	lsls	r3, r3, #31
 800f838:	d538      	bpl.n	800f8ac <_printf_float+0x43c>
 800f83a:	2301      	movs	r3, #1
 800f83c:	4642      	mov	r2, r8
 800f83e:	4631      	mov	r1, r6
 800f840:	4628      	mov	r0, r5
 800f842:	47b8      	blx	r7
 800f844:	3001      	adds	r0, #1
 800f846:	f43f ae74 	beq.w	800f532 <_printf_float+0xc2>
 800f84a:	ee18 3a10 	vmov	r3, s16
 800f84e:	4652      	mov	r2, sl
 800f850:	4631      	mov	r1, r6
 800f852:	4628      	mov	r0, r5
 800f854:	47b8      	blx	r7
 800f856:	3001      	adds	r0, #1
 800f858:	f43f ae6b 	beq.w	800f532 <_printf_float+0xc2>
 800f85c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f860:	2200      	movs	r2, #0
 800f862:	2300      	movs	r3, #0
 800f864:	f7f1 f938 	bl	8000ad8 <__aeabi_dcmpeq>
 800f868:	b9d8      	cbnz	r0, 800f8a2 <_printf_float+0x432>
 800f86a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f86c:	f108 0201 	add.w	r2, r8, #1
 800f870:	3b01      	subs	r3, #1
 800f872:	4631      	mov	r1, r6
 800f874:	4628      	mov	r0, r5
 800f876:	47b8      	blx	r7
 800f878:	3001      	adds	r0, #1
 800f87a:	d10e      	bne.n	800f89a <_printf_float+0x42a>
 800f87c:	e659      	b.n	800f532 <_printf_float+0xc2>
 800f87e:	2301      	movs	r3, #1
 800f880:	4652      	mov	r2, sl
 800f882:	4631      	mov	r1, r6
 800f884:	4628      	mov	r0, r5
 800f886:	47b8      	blx	r7
 800f888:	3001      	adds	r0, #1
 800f88a:	f43f ae52 	beq.w	800f532 <_printf_float+0xc2>
 800f88e:	f108 0801 	add.w	r8, r8, #1
 800f892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f894:	3b01      	subs	r3, #1
 800f896:	4543      	cmp	r3, r8
 800f898:	dcf1      	bgt.n	800f87e <_printf_float+0x40e>
 800f89a:	464b      	mov	r3, r9
 800f89c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f8a0:	e6dc      	b.n	800f65c <_printf_float+0x1ec>
 800f8a2:	f04f 0800 	mov.w	r8, #0
 800f8a6:	f104 0a1a 	add.w	sl, r4, #26
 800f8aa:	e7f2      	b.n	800f892 <_printf_float+0x422>
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	4642      	mov	r2, r8
 800f8b0:	e7df      	b.n	800f872 <_printf_float+0x402>
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	464a      	mov	r2, r9
 800f8b6:	4631      	mov	r1, r6
 800f8b8:	4628      	mov	r0, r5
 800f8ba:	47b8      	blx	r7
 800f8bc:	3001      	adds	r0, #1
 800f8be:	f43f ae38 	beq.w	800f532 <_printf_float+0xc2>
 800f8c2:	f108 0801 	add.w	r8, r8, #1
 800f8c6:	68e3      	ldr	r3, [r4, #12]
 800f8c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8ca:	1a5b      	subs	r3, r3, r1
 800f8cc:	4543      	cmp	r3, r8
 800f8ce:	dcf0      	bgt.n	800f8b2 <_printf_float+0x442>
 800f8d0:	e6fa      	b.n	800f6c8 <_printf_float+0x258>
 800f8d2:	f04f 0800 	mov.w	r8, #0
 800f8d6:	f104 0919 	add.w	r9, r4, #25
 800f8da:	e7f4      	b.n	800f8c6 <_printf_float+0x456>

0800f8dc <_printf_common>:
 800f8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8e0:	4616      	mov	r6, r2
 800f8e2:	4699      	mov	r9, r3
 800f8e4:	688a      	ldr	r2, [r1, #8]
 800f8e6:	690b      	ldr	r3, [r1, #16]
 800f8e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	bfb8      	it	lt
 800f8f0:	4613      	movlt	r3, r2
 800f8f2:	6033      	str	r3, [r6, #0]
 800f8f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f8f8:	4607      	mov	r7, r0
 800f8fa:	460c      	mov	r4, r1
 800f8fc:	b10a      	cbz	r2, 800f902 <_printf_common+0x26>
 800f8fe:	3301      	adds	r3, #1
 800f900:	6033      	str	r3, [r6, #0]
 800f902:	6823      	ldr	r3, [r4, #0]
 800f904:	0699      	lsls	r1, r3, #26
 800f906:	bf42      	ittt	mi
 800f908:	6833      	ldrmi	r3, [r6, #0]
 800f90a:	3302      	addmi	r3, #2
 800f90c:	6033      	strmi	r3, [r6, #0]
 800f90e:	6825      	ldr	r5, [r4, #0]
 800f910:	f015 0506 	ands.w	r5, r5, #6
 800f914:	d106      	bne.n	800f924 <_printf_common+0x48>
 800f916:	f104 0a19 	add.w	sl, r4, #25
 800f91a:	68e3      	ldr	r3, [r4, #12]
 800f91c:	6832      	ldr	r2, [r6, #0]
 800f91e:	1a9b      	subs	r3, r3, r2
 800f920:	42ab      	cmp	r3, r5
 800f922:	dc26      	bgt.n	800f972 <_printf_common+0x96>
 800f924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f928:	1e13      	subs	r3, r2, #0
 800f92a:	6822      	ldr	r2, [r4, #0]
 800f92c:	bf18      	it	ne
 800f92e:	2301      	movne	r3, #1
 800f930:	0692      	lsls	r2, r2, #26
 800f932:	d42b      	bmi.n	800f98c <_printf_common+0xb0>
 800f934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f938:	4649      	mov	r1, r9
 800f93a:	4638      	mov	r0, r7
 800f93c:	47c0      	blx	r8
 800f93e:	3001      	adds	r0, #1
 800f940:	d01e      	beq.n	800f980 <_printf_common+0xa4>
 800f942:	6823      	ldr	r3, [r4, #0]
 800f944:	68e5      	ldr	r5, [r4, #12]
 800f946:	6832      	ldr	r2, [r6, #0]
 800f948:	f003 0306 	and.w	r3, r3, #6
 800f94c:	2b04      	cmp	r3, #4
 800f94e:	bf08      	it	eq
 800f950:	1aad      	subeq	r5, r5, r2
 800f952:	68a3      	ldr	r3, [r4, #8]
 800f954:	6922      	ldr	r2, [r4, #16]
 800f956:	bf0c      	ite	eq
 800f958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f95c:	2500      	movne	r5, #0
 800f95e:	4293      	cmp	r3, r2
 800f960:	bfc4      	itt	gt
 800f962:	1a9b      	subgt	r3, r3, r2
 800f964:	18ed      	addgt	r5, r5, r3
 800f966:	2600      	movs	r6, #0
 800f968:	341a      	adds	r4, #26
 800f96a:	42b5      	cmp	r5, r6
 800f96c:	d11a      	bne.n	800f9a4 <_printf_common+0xc8>
 800f96e:	2000      	movs	r0, #0
 800f970:	e008      	b.n	800f984 <_printf_common+0xa8>
 800f972:	2301      	movs	r3, #1
 800f974:	4652      	mov	r2, sl
 800f976:	4649      	mov	r1, r9
 800f978:	4638      	mov	r0, r7
 800f97a:	47c0      	blx	r8
 800f97c:	3001      	adds	r0, #1
 800f97e:	d103      	bne.n	800f988 <_printf_common+0xac>
 800f980:	f04f 30ff 	mov.w	r0, #4294967295
 800f984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f988:	3501      	adds	r5, #1
 800f98a:	e7c6      	b.n	800f91a <_printf_common+0x3e>
 800f98c:	18e1      	adds	r1, r4, r3
 800f98e:	1c5a      	adds	r2, r3, #1
 800f990:	2030      	movs	r0, #48	; 0x30
 800f992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f996:	4422      	add	r2, r4
 800f998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f99c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f9a0:	3302      	adds	r3, #2
 800f9a2:	e7c7      	b.n	800f934 <_printf_common+0x58>
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	4622      	mov	r2, r4
 800f9a8:	4649      	mov	r1, r9
 800f9aa:	4638      	mov	r0, r7
 800f9ac:	47c0      	blx	r8
 800f9ae:	3001      	adds	r0, #1
 800f9b0:	d0e6      	beq.n	800f980 <_printf_common+0xa4>
 800f9b2:	3601      	adds	r6, #1
 800f9b4:	e7d9      	b.n	800f96a <_printf_common+0x8e>
	...

0800f9b8 <_printf_i>:
 800f9b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f9bc:	7e0f      	ldrb	r7, [r1, #24]
 800f9be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f9c0:	2f78      	cmp	r7, #120	; 0x78
 800f9c2:	4691      	mov	r9, r2
 800f9c4:	4680      	mov	r8, r0
 800f9c6:	460c      	mov	r4, r1
 800f9c8:	469a      	mov	sl, r3
 800f9ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f9ce:	d807      	bhi.n	800f9e0 <_printf_i+0x28>
 800f9d0:	2f62      	cmp	r7, #98	; 0x62
 800f9d2:	d80a      	bhi.n	800f9ea <_printf_i+0x32>
 800f9d4:	2f00      	cmp	r7, #0
 800f9d6:	f000 80d8 	beq.w	800fb8a <_printf_i+0x1d2>
 800f9da:	2f58      	cmp	r7, #88	; 0x58
 800f9dc:	f000 80a3 	beq.w	800fb26 <_printf_i+0x16e>
 800f9e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f9e8:	e03a      	b.n	800fa60 <_printf_i+0xa8>
 800f9ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f9ee:	2b15      	cmp	r3, #21
 800f9f0:	d8f6      	bhi.n	800f9e0 <_printf_i+0x28>
 800f9f2:	a101      	add	r1, pc, #4	; (adr r1, 800f9f8 <_printf_i+0x40>)
 800f9f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f9f8:	0800fa51 	.word	0x0800fa51
 800f9fc:	0800fa65 	.word	0x0800fa65
 800fa00:	0800f9e1 	.word	0x0800f9e1
 800fa04:	0800f9e1 	.word	0x0800f9e1
 800fa08:	0800f9e1 	.word	0x0800f9e1
 800fa0c:	0800f9e1 	.word	0x0800f9e1
 800fa10:	0800fa65 	.word	0x0800fa65
 800fa14:	0800f9e1 	.word	0x0800f9e1
 800fa18:	0800f9e1 	.word	0x0800f9e1
 800fa1c:	0800f9e1 	.word	0x0800f9e1
 800fa20:	0800f9e1 	.word	0x0800f9e1
 800fa24:	0800fb71 	.word	0x0800fb71
 800fa28:	0800fa95 	.word	0x0800fa95
 800fa2c:	0800fb53 	.word	0x0800fb53
 800fa30:	0800f9e1 	.word	0x0800f9e1
 800fa34:	0800f9e1 	.word	0x0800f9e1
 800fa38:	0800fb93 	.word	0x0800fb93
 800fa3c:	0800f9e1 	.word	0x0800f9e1
 800fa40:	0800fa95 	.word	0x0800fa95
 800fa44:	0800f9e1 	.word	0x0800f9e1
 800fa48:	0800f9e1 	.word	0x0800f9e1
 800fa4c:	0800fb5b 	.word	0x0800fb5b
 800fa50:	682b      	ldr	r3, [r5, #0]
 800fa52:	1d1a      	adds	r2, r3, #4
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	602a      	str	r2, [r5, #0]
 800fa58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa60:	2301      	movs	r3, #1
 800fa62:	e0a3      	b.n	800fbac <_printf_i+0x1f4>
 800fa64:	6820      	ldr	r0, [r4, #0]
 800fa66:	6829      	ldr	r1, [r5, #0]
 800fa68:	0606      	lsls	r6, r0, #24
 800fa6a:	f101 0304 	add.w	r3, r1, #4
 800fa6e:	d50a      	bpl.n	800fa86 <_printf_i+0xce>
 800fa70:	680e      	ldr	r6, [r1, #0]
 800fa72:	602b      	str	r3, [r5, #0]
 800fa74:	2e00      	cmp	r6, #0
 800fa76:	da03      	bge.n	800fa80 <_printf_i+0xc8>
 800fa78:	232d      	movs	r3, #45	; 0x2d
 800fa7a:	4276      	negs	r6, r6
 800fa7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa80:	485e      	ldr	r0, [pc, #376]	; (800fbfc <_printf_i+0x244>)
 800fa82:	230a      	movs	r3, #10
 800fa84:	e019      	b.n	800faba <_printf_i+0x102>
 800fa86:	680e      	ldr	r6, [r1, #0]
 800fa88:	602b      	str	r3, [r5, #0]
 800fa8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fa8e:	bf18      	it	ne
 800fa90:	b236      	sxthne	r6, r6
 800fa92:	e7ef      	b.n	800fa74 <_printf_i+0xbc>
 800fa94:	682b      	ldr	r3, [r5, #0]
 800fa96:	6820      	ldr	r0, [r4, #0]
 800fa98:	1d19      	adds	r1, r3, #4
 800fa9a:	6029      	str	r1, [r5, #0]
 800fa9c:	0601      	lsls	r1, r0, #24
 800fa9e:	d501      	bpl.n	800faa4 <_printf_i+0xec>
 800faa0:	681e      	ldr	r6, [r3, #0]
 800faa2:	e002      	b.n	800faaa <_printf_i+0xf2>
 800faa4:	0646      	lsls	r6, r0, #25
 800faa6:	d5fb      	bpl.n	800faa0 <_printf_i+0xe8>
 800faa8:	881e      	ldrh	r6, [r3, #0]
 800faaa:	4854      	ldr	r0, [pc, #336]	; (800fbfc <_printf_i+0x244>)
 800faac:	2f6f      	cmp	r7, #111	; 0x6f
 800faae:	bf0c      	ite	eq
 800fab0:	2308      	moveq	r3, #8
 800fab2:	230a      	movne	r3, #10
 800fab4:	2100      	movs	r1, #0
 800fab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800faba:	6865      	ldr	r5, [r4, #4]
 800fabc:	60a5      	str	r5, [r4, #8]
 800fabe:	2d00      	cmp	r5, #0
 800fac0:	bfa2      	ittt	ge
 800fac2:	6821      	ldrge	r1, [r4, #0]
 800fac4:	f021 0104 	bicge.w	r1, r1, #4
 800fac8:	6021      	strge	r1, [r4, #0]
 800faca:	b90e      	cbnz	r6, 800fad0 <_printf_i+0x118>
 800facc:	2d00      	cmp	r5, #0
 800face:	d04d      	beq.n	800fb6c <_printf_i+0x1b4>
 800fad0:	4615      	mov	r5, r2
 800fad2:	fbb6 f1f3 	udiv	r1, r6, r3
 800fad6:	fb03 6711 	mls	r7, r3, r1, r6
 800fada:	5dc7      	ldrb	r7, [r0, r7]
 800fadc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fae0:	4637      	mov	r7, r6
 800fae2:	42bb      	cmp	r3, r7
 800fae4:	460e      	mov	r6, r1
 800fae6:	d9f4      	bls.n	800fad2 <_printf_i+0x11a>
 800fae8:	2b08      	cmp	r3, #8
 800faea:	d10b      	bne.n	800fb04 <_printf_i+0x14c>
 800faec:	6823      	ldr	r3, [r4, #0]
 800faee:	07de      	lsls	r6, r3, #31
 800faf0:	d508      	bpl.n	800fb04 <_printf_i+0x14c>
 800faf2:	6923      	ldr	r3, [r4, #16]
 800faf4:	6861      	ldr	r1, [r4, #4]
 800faf6:	4299      	cmp	r1, r3
 800faf8:	bfde      	ittt	le
 800fafa:	2330      	movle	r3, #48	; 0x30
 800fafc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb00:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb04:	1b52      	subs	r2, r2, r5
 800fb06:	6122      	str	r2, [r4, #16]
 800fb08:	f8cd a000 	str.w	sl, [sp]
 800fb0c:	464b      	mov	r3, r9
 800fb0e:	aa03      	add	r2, sp, #12
 800fb10:	4621      	mov	r1, r4
 800fb12:	4640      	mov	r0, r8
 800fb14:	f7ff fee2 	bl	800f8dc <_printf_common>
 800fb18:	3001      	adds	r0, #1
 800fb1a:	d14c      	bne.n	800fbb6 <_printf_i+0x1fe>
 800fb1c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb20:	b004      	add	sp, #16
 800fb22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb26:	4835      	ldr	r0, [pc, #212]	; (800fbfc <_printf_i+0x244>)
 800fb28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fb2c:	6829      	ldr	r1, [r5, #0]
 800fb2e:	6823      	ldr	r3, [r4, #0]
 800fb30:	f851 6b04 	ldr.w	r6, [r1], #4
 800fb34:	6029      	str	r1, [r5, #0]
 800fb36:	061d      	lsls	r5, r3, #24
 800fb38:	d514      	bpl.n	800fb64 <_printf_i+0x1ac>
 800fb3a:	07df      	lsls	r7, r3, #31
 800fb3c:	bf44      	itt	mi
 800fb3e:	f043 0320 	orrmi.w	r3, r3, #32
 800fb42:	6023      	strmi	r3, [r4, #0]
 800fb44:	b91e      	cbnz	r6, 800fb4e <_printf_i+0x196>
 800fb46:	6823      	ldr	r3, [r4, #0]
 800fb48:	f023 0320 	bic.w	r3, r3, #32
 800fb4c:	6023      	str	r3, [r4, #0]
 800fb4e:	2310      	movs	r3, #16
 800fb50:	e7b0      	b.n	800fab4 <_printf_i+0xfc>
 800fb52:	6823      	ldr	r3, [r4, #0]
 800fb54:	f043 0320 	orr.w	r3, r3, #32
 800fb58:	6023      	str	r3, [r4, #0]
 800fb5a:	2378      	movs	r3, #120	; 0x78
 800fb5c:	4828      	ldr	r0, [pc, #160]	; (800fc00 <_printf_i+0x248>)
 800fb5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb62:	e7e3      	b.n	800fb2c <_printf_i+0x174>
 800fb64:	0659      	lsls	r1, r3, #25
 800fb66:	bf48      	it	mi
 800fb68:	b2b6      	uxthmi	r6, r6
 800fb6a:	e7e6      	b.n	800fb3a <_printf_i+0x182>
 800fb6c:	4615      	mov	r5, r2
 800fb6e:	e7bb      	b.n	800fae8 <_printf_i+0x130>
 800fb70:	682b      	ldr	r3, [r5, #0]
 800fb72:	6826      	ldr	r6, [r4, #0]
 800fb74:	6961      	ldr	r1, [r4, #20]
 800fb76:	1d18      	adds	r0, r3, #4
 800fb78:	6028      	str	r0, [r5, #0]
 800fb7a:	0635      	lsls	r5, r6, #24
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	d501      	bpl.n	800fb84 <_printf_i+0x1cc>
 800fb80:	6019      	str	r1, [r3, #0]
 800fb82:	e002      	b.n	800fb8a <_printf_i+0x1d2>
 800fb84:	0670      	lsls	r0, r6, #25
 800fb86:	d5fb      	bpl.n	800fb80 <_printf_i+0x1c8>
 800fb88:	8019      	strh	r1, [r3, #0]
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	6123      	str	r3, [r4, #16]
 800fb8e:	4615      	mov	r5, r2
 800fb90:	e7ba      	b.n	800fb08 <_printf_i+0x150>
 800fb92:	682b      	ldr	r3, [r5, #0]
 800fb94:	1d1a      	adds	r2, r3, #4
 800fb96:	602a      	str	r2, [r5, #0]
 800fb98:	681d      	ldr	r5, [r3, #0]
 800fb9a:	6862      	ldr	r2, [r4, #4]
 800fb9c:	2100      	movs	r1, #0
 800fb9e:	4628      	mov	r0, r5
 800fba0:	f7f0 fb26 	bl	80001f0 <memchr>
 800fba4:	b108      	cbz	r0, 800fbaa <_printf_i+0x1f2>
 800fba6:	1b40      	subs	r0, r0, r5
 800fba8:	6060      	str	r0, [r4, #4]
 800fbaa:	6863      	ldr	r3, [r4, #4]
 800fbac:	6123      	str	r3, [r4, #16]
 800fbae:	2300      	movs	r3, #0
 800fbb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbb4:	e7a8      	b.n	800fb08 <_printf_i+0x150>
 800fbb6:	6923      	ldr	r3, [r4, #16]
 800fbb8:	462a      	mov	r2, r5
 800fbba:	4649      	mov	r1, r9
 800fbbc:	4640      	mov	r0, r8
 800fbbe:	47d0      	blx	sl
 800fbc0:	3001      	adds	r0, #1
 800fbc2:	d0ab      	beq.n	800fb1c <_printf_i+0x164>
 800fbc4:	6823      	ldr	r3, [r4, #0]
 800fbc6:	079b      	lsls	r3, r3, #30
 800fbc8:	d413      	bmi.n	800fbf2 <_printf_i+0x23a>
 800fbca:	68e0      	ldr	r0, [r4, #12]
 800fbcc:	9b03      	ldr	r3, [sp, #12]
 800fbce:	4298      	cmp	r0, r3
 800fbd0:	bfb8      	it	lt
 800fbd2:	4618      	movlt	r0, r3
 800fbd4:	e7a4      	b.n	800fb20 <_printf_i+0x168>
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	4632      	mov	r2, r6
 800fbda:	4649      	mov	r1, r9
 800fbdc:	4640      	mov	r0, r8
 800fbde:	47d0      	blx	sl
 800fbe0:	3001      	adds	r0, #1
 800fbe2:	d09b      	beq.n	800fb1c <_printf_i+0x164>
 800fbe4:	3501      	adds	r5, #1
 800fbe6:	68e3      	ldr	r3, [r4, #12]
 800fbe8:	9903      	ldr	r1, [sp, #12]
 800fbea:	1a5b      	subs	r3, r3, r1
 800fbec:	42ab      	cmp	r3, r5
 800fbee:	dcf2      	bgt.n	800fbd6 <_printf_i+0x21e>
 800fbf0:	e7eb      	b.n	800fbca <_printf_i+0x212>
 800fbf2:	2500      	movs	r5, #0
 800fbf4:	f104 0619 	add.w	r6, r4, #25
 800fbf8:	e7f5      	b.n	800fbe6 <_printf_i+0x22e>
 800fbfa:	bf00      	nop
 800fbfc:	08011f6e 	.word	0x08011f6e
 800fc00:	08011f7f 	.word	0x08011f7f

0800fc04 <iprintf>:
 800fc04:	b40f      	push	{r0, r1, r2, r3}
 800fc06:	4b0a      	ldr	r3, [pc, #40]	; (800fc30 <iprintf+0x2c>)
 800fc08:	b513      	push	{r0, r1, r4, lr}
 800fc0a:	681c      	ldr	r4, [r3, #0]
 800fc0c:	b124      	cbz	r4, 800fc18 <iprintf+0x14>
 800fc0e:	69a3      	ldr	r3, [r4, #24]
 800fc10:	b913      	cbnz	r3, 800fc18 <iprintf+0x14>
 800fc12:	4620      	mov	r0, r4
 800fc14:	f000 ff3e 	bl	8010a94 <__sinit>
 800fc18:	ab05      	add	r3, sp, #20
 800fc1a:	9a04      	ldr	r2, [sp, #16]
 800fc1c:	68a1      	ldr	r1, [r4, #8]
 800fc1e:	9301      	str	r3, [sp, #4]
 800fc20:	4620      	mov	r0, r4
 800fc22:	f001 fbdb 	bl	80113dc <_vfiprintf_r>
 800fc26:	b002      	add	sp, #8
 800fc28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc2c:	b004      	add	sp, #16
 800fc2e:	4770      	bx	lr
 800fc30:	20000048 	.word	0x20000048

0800fc34 <realloc>:
 800fc34:	4b02      	ldr	r3, [pc, #8]	; (800fc40 <realloc+0xc>)
 800fc36:	460a      	mov	r2, r1
 800fc38:	4601      	mov	r1, r0
 800fc3a:	6818      	ldr	r0, [r3, #0]
 800fc3c:	f001 bb76 	b.w	801132c <_realloc_r>
 800fc40:	20000048 	.word	0x20000048

0800fc44 <_sbrk_r>:
 800fc44:	b538      	push	{r3, r4, r5, lr}
 800fc46:	4d06      	ldr	r5, [pc, #24]	; (800fc60 <_sbrk_r+0x1c>)
 800fc48:	2300      	movs	r3, #0
 800fc4a:	4604      	mov	r4, r0
 800fc4c:	4608      	mov	r0, r1
 800fc4e:	602b      	str	r3, [r5, #0]
 800fc50:	f7f5 fcf2 	bl	8005638 <_sbrk>
 800fc54:	1c43      	adds	r3, r0, #1
 800fc56:	d102      	bne.n	800fc5e <_sbrk_r+0x1a>
 800fc58:	682b      	ldr	r3, [r5, #0]
 800fc5a:	b103      	cbz	r3, 800fc5e <_sbrk_r+0x1a>
 800fc5c:	6023      	str	r3, [r4, #0]
 800fc5e:	bd38      	pop	{r3, r4, r5, pc}
 800fc60:	200016e8 	.word	0x200016e8

0800fc64 <_raise_r>:
 800fc64:	291f      	cmp	r1, #31
 800fc66:	b538      	push	{r3, r4, r5, lr}
 800fc68:	4604      	mov	r4, r0
 800fc6a:	460d      	mov	r5, r1
 800fc6c:	d904      	bls.n	800fc78 <_raise_r+0x14>
 800fc6e:	2316      	movs	r3, #22
 800fc70:	6003      	str	r3, [r0, #0]
 800fc72:	f04f 30ff 	mov.w	r0, #4294967295
 800fc76:	bd38      	pop	{r3, r4, r5, pc}
 800fc78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fc7a:	b112      	cbz	r2, 800fc82 <_raise_r+0x1e>
 800fc7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc80:	b94b      	cbnz	r3, 800fc96 <_raise_r+0x32>
 800fc82:	4620      	mov	r0, r4
 800fc84:	f000 f830 	bl	800fce8 <_getpid_r>
 800fc88:	462a      	mov	r2, r5
 800fc8a:	4601      	mov	r1, r0
 800fc8c:	4620      	mov	r0, r4
 800fc8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc92:	f000 b817 	b.w	800fcc4 <_kill_r>
 800fc96:	2b01      	cmp	r3, #1
 800fc98:	d00a      	beq.n	800fcb0 <_raise_r+0x4c>
 800fc9a:	1c59      	adds	r1, r3, #1
 800fc9c:	d103      	bne.n	800fca6 <_raise_r+0x42>
 800fc9e:	2316      	movs	r3, #22
 800fca0:	6003      	str	r3, [r0, #0]
 800fca2:	2001      	movs	r0, #1
 800fca4:	e7e7      	b.n	800fc76 <_raise_r+0x12>
 800fca6:	2400      	movs	r4, #0
 800fca8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fcac:	4628      	mov	r0, r5
 800fcae:	4798      	blx	r3
 800fcb0:	2000      	movs	r0, #0
 800fcb2:	e7e0      	b.n	800fc76 <_raise_r+0x12>

0800fcb4 <raise>:
 800fcb4:	4b02      	ldr	r3, [pc, #8]	; (800fcc0 <raise+0xc>)
 800fcb6:	4601      	mov	r1, r0
 800fcb8:	6818      	ldr	r0, [r3, #0]
 800fcba:	f7ff bfd3 	b.w	800fc64 <_raise_r>
 800fcbe:	bf00      	nop
 800fcc0:	20000048 	.word	0x20000048

0800fcc4 <_kill_r>:
 800fcc4:	b538      	push	{r3, r4, r5, lr}
 800fcc6:	4d07      	ldr	r5, [pc, #28]	; (800fce4 <_kill_r+0x20>)
 800fcc8:	2300      	movs	r3, #0
 800fcca:	4604      	mov	r4, r0
 800fccc:	4608      	mov	r0, r1
 800fcce:	4611      	mov	r1, r2
 800fcd0:	602b      	str	r3, [r5, #0]
 800fcd2:	f7f5 fc29 	bl	8005528 <_kill>
 800fcd6:	1c43      	adds	r3, r0, #1
 800fcd8:	d102      	bne.n	800fce0 <_kill_r+0x1c>
 800fcda:	682b      	ldr	r3, [r5, #0]
 800fcdc:	b103      	cbz	r3, 800fce0 <_kill_r+0x1c>
 800fcde:	6023      	str	r3, [r4, #0]
 800fce0:	bd38      	pop	{r3, r4, r5, pc}
 800fce2:	bf00      	nop
 800fce4:	200016e8 	.word	0x200016e8

0800fce8 <_getpid_r>:
 800fce8:	f7f5 bc16 	b.w	8005518 <_getpid>

0800fcec <quorem>:
 800fcec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf0:	6903      	ldr	r3, [r0, #16]
 800fcf2:	690c      	ldr	r4, [r1, #16]
 800fcf4:	42a3      	cmp	r3, r4
 800fcf6:	4607      	mov	r7, r0
 800fcf8:	f2c0 8081 	blt.w	800fdfe <quorem+0x112>
 800fcfc:	3c01      	subs	r4, #1
 800fcfe:	f101 0814 	add.w	r8, r1, #20
 800fd02:	f100 0514 	add.w	r5, r0, #20
 800fd06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd0a:	9301      	str	r3, [sp, #4]
 800fd0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd14:	3301      	adds	r3, #1
 800fd16:	429a      	cmp	r2, r3
 800fd18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fd1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd20:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd24:	d331      	bcc.n	800fd8a <quorem+0x9e>
 800fd26:	f04f 0e00 	mov.w	lr, #0
 800fd2a:	4640      	mov	r0, r8
 800fd2c:	46ac      	mov	ip, r5
 800fd2e:	46f2      	mov	sl, lr
 800fd30:	f850 2b04 	ldr.w	r2, [r0], #4
 800fd34:	b293      	uxth	r3, r2
 800fd36:	fb06 e303 	mla	r3, r6, r3, lr
 800fd3a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	ebaa 0303 	sub.w	r3, sl, r3
 800fd44:	f8dc a000 	ldr.w	sl, [ip]
 800fd48:	0c12      	lsrs	r2, r2, #16
 800fd4a:	fa13 f38a 	uxtah	r3, r3, sl
 800fd4e:	fb06 e202 	mla	r2, r6, r2, lr
 800fd52:	9300      	str	r3, [sp, #0]
 800fd54:	9b00      	ldr	r3, [sp, #0]
 800fd56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fd5a:	b292      	uxth	r2, r2
 800fd5c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fd60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd64:	f8bd 3000 	ldrh.w	r3, [sp]
 800fd68:	4581      	cmp	r9, r0
 800fd6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd6e:	f84c 3b04 	str.w	r3, [ip], #4
 800fd72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fd76:	d2db      	bcs.n	800fd30 <quorem+0x44>
 800fd78:	f855 300b 	ldr.w	r3, [r5, fp]
 800fd7c:	b92b      	cbnz	r3, 800fd8a <quorem+0x9e>
 800fd7e:	9b01      	ldr	r3, [sp, #4]
 800fd80:	3b04      	subs	r3, #4
 800fd82:	429d      	cmp	r5, r3
 800fd84:	461a      	mov	r2, r3
 800fd86:	d32e      	bcc.n	800fde6 <quorem+0xfa>
 800fd88:	613c      	str	r4, [r7, #16]
 800fd8a:	4638      	mov	r0, r7
 800fd8c:	f001 f9b6 	bl	80110fc <__mcmp>
 800fd90:	2800      	cmp	r0, #0
 800fd92:	db24      	blt.n	800fdde <quorem+0xf2>
 800fd94:	3601      	adds	r6, #1
 800fd96:	4628      	mov	r0, r5
 800fd98:	f04f 0c00 	mov.w	ip, #0
 800fd9c:	f858 2b04 	ldr.w	r2, [r8], #4
 800fda0:	f8d0 e000 	ldr.w	lr, [r0]
 800fda4:	b293      	uxth	r3, r2
 800fda6:	ebac 0303 	sub.w	r3, ip, r3
 800fdaa:	0c12      	lsrs	r2, r2, #16
 800fdac:	fa13 f38e 	uxtah	r3, r3, lr
 800fdb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fdb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fdbe:	45c1      	cmp	r9, r8
 800fdc0:	f840 3b04 	str.w	r3, [r0], #4
 800fdc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fdc8:	d2e8      	bcs.n	800fd9c <quorem+0xb0>
 800fdca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fdce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdd2:	b922      	cbnz	r2, 800fdde <quorem+0xf2>
 800fdd4:	3b04      	subs	r3, #4
 800fdd6:	429d      	cmp	r5, r3
 800fdd8:	461a      	mov	r2, r3
 800fdda:	d30a      	bcc.n	800fdf2 <quorem+0x106>
 800fddc:	613c      	str	r4, [r7, #16]
 800fdde:	4630      	mov	r0, r6
 800fde0:	b003      	add	sp, #12
 800fde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde6:	6812      	ldr	r2, [r2, #0]
 800fde8:	3b04      	subs	r3, #4
 800fdea:	2a00      	cmp	r2, #0
 800fdec:	d1cc      	bne.n	800fd88 <quorem+0x9c>
 800fdee:	3c01      	subs	r4, #1
 800fdf0:	e7c7      	b.n	800fd82 <quorem+0x96>
 800fdf2:	6812      	ldr	r2, [r2, #0]
 800fdf4:	3b04      	subs	r3, #4
 800fdf6:	2a00      	cmp	r2, #0
 800fdf8:	d1f0      	bne.n	800fddc <quorem+0xf0>
 800fdfa:	3c01      	subs	r4, #1
 800fdfc:	e7eb      	b.n	800fdd6 <quorem+0xea>
 800fdfe:	2000      	movs	r0, #0
 800fe00:	e7ee      	b.n	800fde0 <quorem+0xf4>
 800fe02:	0000      	movs	r0, r0
 800fe04:	0000      	movs	r0, r0
	...

0800fe08 <_dtoa_r>:
 800fe08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe0c:	ed2d 8b04 	vpush	{d8-d9}
 800fe10:	ec57 6b10 	vmov	r6, r7, d0
 800fe14:	b093      	sub	sp, #76	; 0x4c
 800fe16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fe18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fe1c:	9106      	str	r1, [sp, #24]
 800fe1e:	ee10 aa10 	vmov	sl, s0
 800fe22:	4604      	mov	r4, r0
 800fe24:	9209      	str	r2, [sp, #36]	; 0x24
 800fe26:	930c      	str	r3, [sp, #48]	; 0x30
 800fe28:	46bb      	mov	fp, r7
 800fe2a:	b975      	cbnz	r5, 800fe4a <_dtoa_r+0x42>
 800fe2c:	2010      	movs	r0, #16
 800fe2e:	f7ff f979 	bl	800f124 <malloc>
 800fe32:	4602      	mov	r2, r0
 800fe34:	6260      	str	r0, [r4, #36]	; 0x24
 800fe36:	b920      	cbnz	r0, 800fe42 <_dtoa_r+0x3a>
 800fe38:	4ba7      	ldr	r3, [pc, #668]	; (80100d8 <_dtoa_r+0x2d0>)
 800fe3a:	21ea      	movs	r1, #234	; 0xea
 800fe3c:	48a7      	ldr	r0, [pc, #668]	; (80100dc <_dtoa_r+0x2d4>)
 800fe3e:	f001 fd13 	bl	8011868 <__assert_func>
 800fe42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fe46:	6005      	str	r5, [r0, #0]
 800fe48:	60c5      	str	r5, [r0, #12]
 800fe4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe4c:	6819      	ldr	r1, [r3, #0]
 800fe4e:	b151      	cbz	r1, 800fe66 <_dtoa_r+0x5e>
 800fe50:	685a      	ldr	r2, [r3, #4]
 800fe52:	604a      	str	r2, [r1, #4]
 800fe54:	2301      	movs	r3, #1
 800fe56:	4093      	lsls	r3, r2
 800fe58:	608b      	str	r3, [r1, #8]
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	f000 ff0c 	bl	8010c78 <_Bfree>
 800fe60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe62:	2200      	movs	r2, #0
 800fe64:	601a      	str	r2, [r3, #0]
 800fe66:	1e3b      	subs	r3, r7, #0
 800fe68:	bfaa      	itet	ge
 800fe6a:	2300      	movge	r3, #0
 800fe6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fe70:	f8c8 3000 	strge.w	r3, [r8]
 800fe74:	4b9a      	ldr	r3, [pc, #616]	; (80100e0 <_dtoa_r+0x2d8>)
 800fe76:	bfbc      	itt	lt
 800fe78:	2201      	movlt	r2, #1
 800fe7a:	f8c8 2000 	strlt.w	r2, [r8]
 800fe7e:	ea33 030b 	bics.w	r3, r3, fp
 800fe82:	d11b      	bne.n	800febc <_dtoa_r+0xb4>
 800fe84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe86:	f242 730f 	movw	r3, #9999	; 0x270f
 800fe8a:	6013      	str	r3, [r2, #0]
 800fe8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe90:	4333      	orrs	r3, r6
 800fe92:	f000 8592 	beq.w	80109ba <_dtoa_r+0xbb2>
 800fe96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe98:	b963      	cbnz	r3, 800feb4 <_dtoa_r+0xac>
 800fe9a:	4b92      	ldr	r3, [pc, #584]	; (80100e4 <_dtoa_r+0x2dc>)
 800fe9c:	e022      	b.n	800fee4 <_dtoa_r+0xdc>
 800fe9e:	4b92      	ldr	r3, [pc, #584]	; (80100e8 <_dtoa_r+0x2e0>)
 800fea0:	9301      	str	r3, [sp, #4]
 800fea2:	3308      	adds	r3, #8
 800fea4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fea6:	6013      	str	r3, [r2, #0]
 800fea8:	9801      	ldr	r0, [sp, #4]
 800feaa:	b013      	add	sp, #76	; 0x4c
 800feac:	ecbd 8b04 	vpop	{d8-d9}
 800feb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb4:	4b8b      	ldr	r3, [pc, #556]	; (80100e4 <_dtoa_r+0x2dc>)
 800feb6:	9301      	str	r3, [sp, #4]
 800feb8:	3303      	adds	r3, #3
 800feba:	e7f3      	b.n	800fea4 <_dtoa_r+0x9c>
 800febc:	2200      	movs	r2, #0
 800febe:	2300      	movs	r3, #0
 800fec0:	4650      	mov	r0, sl
 800fec2:	4659      	mov	r1, fp
 800fec4:	f7f0 fe08 	bl	8000ad8 <__aeabi_dcmpeq>
 800fec8:	ec4b ab19 	vmov	d9, sl, fp
 800fecc:	4680      	mov	r8, r0
 800fece:	b158      	cbz	r0, 800fee8 <_dtoa_r+0xe0>
 800fed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fed2:	2301      	movs	r3, #1
 800fed4:	6013      	str	r3, [r2, #0]
 800fed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fed8:	2b00      	cmp	r3, #0
 800feda:	f000 856b 	beq.w	80109b4 <_dtoa_r+0xbac>
 800fede:	4883      	ldr	r0, [pc, #524]	; (80100ec <_dtoa_r+0x2e4>)
 800fee0:	6018      	str	r0, [r3, #0]
 800fee2:	1e43      	subs	r3, r0, #1
 800fee4:	9301      	str	r3, [sp, #4]
 800fee6:	e7df      	b.n	800fea8 <_dtoa_r+0xa0>
 800fee8:	ec4b ab10 	vmov	d0, sl, fp
 800feec:	aa10      	add	r2, sp, #64	; 0x40
 800feee:	a911      	add	r1, sp, #68	; 0x44
 800fef0:	4620      	mov	r0, r4
 800fef2:	f001 f9a9 	bl	8011248 <__d2b>
 800fef6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fefa:	ee08 0a10 	vmov	s16, r0
 800fefe:	2d00      	cmp	r5, #0
 800ff00:	f000 8084 	beq.w	801000c <_dtoa_r+0x204>
 800ff04:	ee19 3a90 	vmov	r3, s19
 800ff08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ff10:	4656      	mov	r6, sl
 800ff12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ff16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ff1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ff1e:	4b74      	ldr	r3, [pc, #464]	; (80100f0 <_dtoa_r+0x2e8>)
 800ff20:	2200      	movs	r2, #0
 800ff22:	4630      	mov	r0, r6
 800ff24:	4639      	mov	r1, r7
 800ff26:	f7f0 f9b7 	bl	8000298 <__aeabi_dsub>
 800ff2a:	a365      	add	r3, pc, #404	; (adr r3, 80100c0 <_dtoa_r+0x2b8>)
 800ff2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff30:	f7f0 fb6a 	bl	8000608 <__aeabi_dmul>
 800ff34:	a364      	add	r3, pc, #400	; (adr r3, 80100c8 <_dtoa_r+0x2c0>)
 800ff36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3a:	f7f0 f9af 	bl	800029c <__adddf3>
 800ff3e:	4606      	mov	r6, r0
 800ff40:	4628      	mov	r0, r5
 800ff42:	460f      	mov	r7, r1
 800ff44:	f7f0 faf6 	bl	8000534 <__aeabi_i2d>
 800ff48:	a361      	add	r3, pc, #388	; (adr r3, 80100d0 <_dtoa_r+0x2c8>)
 800ff4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4e:	f7f0 fb5b 	bl	8000608 <__aeabi_dmul>
 800ff52:	4602      	mov	r2, r0
 800ff54:	460b      	mov	r3, r1
 800ff56:	4630      	mov	r0, r6
 800ff58:	4639      	mov	r1, r7
 800ff5a:	f7f0 f99f 	bl	800029c <__adddf3>
 800ff5e:	4606      	mov	r6, r0
 800ff60:	460f      	mov	r7, r1
 800ff62:	f7f0 fe01 	bl	8000b68 <__aeabi_d2iz>
 800ff66:	2200      	movs	r2, #0
 800ff68:	9000      	str	r0, [sp, #0]
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	4630      	mov	r0, r6
 800ff6e:	4639      	mov	r1, r7
 800ff70:	f7f0 fdbc 	bl	8000aec <__aeabi_dcmplt>
 800ff74:	b150      	cbz	r0, 800ff8c <_dtoa_r+0x184>
 800ff76:	9800      	ldr	r0, [sp, #0]
 800ff78:	f7f0 fadc 	bl	8000534 <__aeabi_i2d>
 800ff7c:	4632      	mov	r2, r6
 800ff7e:	463b      	mov	r3, r7
 800ff80:	f7f0 fdaa 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff84:	b910      	cbnz	r0, 800ff8c <_dtoa_r+0x184>
 800ff86:	9b00      	ldr	r3, [sp, #0]
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	9300      	str	r3, [sp, #0]
 800ff8c:	9b00      	ldr	r3, [sp, #0]
 800ff8e:	2b16      	cmp	r3, #22
 800ff90:	d85a      	bhi.n	8010048 <_dtoa_r+0x240>
 800ff92:	9a00      	ldr	r2, [sp, #0]
 800ff94:	4b57      	ldr	r3, [pc, #348]	; (80100f4 <_dtoa_r+0x2ec>)
 800ff96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff9e:	ec51 0b19 	vmov	r0, r1, d9
 800ffa2:	f7f0 fda3 	bl	8000aec <__aeabi_dcmplt>
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	d050      	beq.n	801004c <_dtoa_r+0x244>
 800ffaa:	9b00      	ldr	r3, [sp, #0]
 800ffac:	3b01      	subs	r3, #1
 800ffae:	9300      	str	r3, [sp, #0]
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ffb6:	1b5d      	subs	r5, r3, r5
 800ffb8:	1e6b      	subs	r3, r5, #1
 800ffba:	9305      	str	r3, [sp, #20]
 800ffbc:	bf45      	ittet	mi
 800ffbe:	f1c5 0301 	rsbmi	r3, r5, #1
 800ffc2:	9304      	strmi	r3, [sp, #16]
 800ffc4:	2300      	movpl	r3, #0
 800ffc6:	2300      	movmi	r3, #0
 800ffc8:	bf4c      	ite	mi
 800ffca:	9305      	strmi	r3, [sp, #20]
 800ffcc:	9304      	strpl	r3, [sp, #16]
 800ffce:	9b00      	ldr	r3, [sp, #0]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	db3d      	blt.n	8010050 <_dtoa_r+0x248>
 800ffd4:	9b05      	ldr	r3, [sp, #20]
 800ffd6:	9a00      	ldr	r2, [sp, #0]
 800ffd8:	920a      	str	r2, [sp, #40]	; 0x28
 800ffda:	4413      	add	r3, r2
 800ffdc:	9305      	str	r3, [sp, #20]
 800ffde:	2300      	movs	r3, #0
 800ffe0:	9307      	str	r3, [sp, #28]
 800ffe2:	9b06      	ldr	r3, [sp, #24]
 800ffe4:	2b09      	cmp	r3, #9
 800ffe6:	f200 8089 	bhi.w	80100fc <_dtoa_r+0x2f4>
 800ffea:	2b05      	cmp	r3, #5
 800ffec:	bfc4      	itt	gt
 800ffee:	3b04      	subgt	r3, #4
 800fff0:	9306      	strgt	r3, [sp, #24]
 800fff2:	9b06      	ldr	r3, [sp, #24]
 800fff4:	f1a3 0302 	sub.w	r3, r3, #2
 800fff8:	bfcc      	ite	gt
 800fffa:	2500      	movgt	r5, #0
 800fffc:	2501      	movle	r5, #1
 800fffe:	2b03      	cmp	r3, #3
 8010000:	f200 8087 	bhi.w	8010112 <_dtoa_r+0x30a>
 8010004:	e8df f003 	tbb	[pc, r3]
 8010008:	59383a2d 	.word	0x59383a2d
 801000c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010010:	441d      	add	r5, r3
 8010012:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010016:	2b20      	cmp	r3, #32
 8010018:	bfc1      	itttt	gt
 801001a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801001e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010022:	fa0b f303 	lslgt.w	r3, fp, r3
 8010026:	fa26 f000 	lsrgt.w	r0, r6, r0
 801002a:	bfda      	itte	le
 801002c:	f1c3 0320 	rsble	r3, r3, #32
 8010030:	fa06 f003 	lslle.w	r0, r6, r3
 8010034:	4318      	orrgt	r0, r3
 8010036:	f7f0 fa6d 	bl	8000514 <__aeabi_ui2d>
 801003a:	2301      	movs	r3, #1
 801003c:	4606      	mov	r6, r0
 801003e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010042:	3d01      	subs	r5, #1
 8010044:	930e      	str	r3, [sp, #56]	; 0x38
 8010046:	e76a      	b.n	800ff1e <_dtoa_r+0x116>
 8010048:	2301      	movs	r3, #1
 801004a:	e7b2      	b.n	800ffb2 <_dtoa_r+0x1aa>
 801004c:	900b      	str	r0, [sp, #44]	; 0x2c
 801004e:	e7b1      	b.n	800ffb4 <_dtoa_r+0x1ac>
 8010050:	9b04      	ldr	r3, [sp, #16]
 8010052:	9a00      	ldr	r2, [sp, #0]
 8010054:	1a9b      	subs	r3, r3, r2
 8010056:	9304      	str	r3, [sp, #16]
 8010058:	4253      	negs	r3, r2
 801005a:	9307      	str	r3, [sp, #28]
 801005c:	2300      	movs	r3, #0
 801005e:	930a      	str	r3, [sp, #40]	; 0x28
 8010060:	e7bf      	b.n	800ffe2 <_dtoa_r+0x1da>
 8010062:	2300      	movs	r3, #0
 8010064:	9308      	str	r3, [sp, #32]
 8010066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010068:	2b00      	cmp	r3, #0
 801006a:	dc55      	bgt.n	8010118 <_dtoa_r+0x310>
 801006c:	2301      	movs	r3, #1
 801006e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010072:	461a      	mov	r2, r3
 8010074:	9209      	str	r2, [sp, #36]	; 0x24
 8010076:	e00c      	b.n	8010092 <_dtoa_r+0x28a>
 8010078:	2301      	movs	r3, #1
 801007a:	e7f3      	b.n	8010064 <_dtoa_r+0x25c>
 801007c:	2300      	movs	r3, #0
 801007e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010080:	9308      	str	r3, [sp, #32]
 8010082:	9b00      	ldr	r3, [sp, #0]
 8010084:	4413      	add	r3, r2
 8010086:	9302      	str	r3, [sp, #8]
 8010088:	3301      	adds	r3, #1
 801008a:	2b01      	cmp	r3, #1
 801008c:	9303      	str	r3, [sp, #12]
 801008e:	bfb8      	it	lt
 8010090:	2301      	movlt	r3, #1
 8010092:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010094:	2200      	movs	r2, #0
 8010096:	6042      	str	r2, [r0, #4]
 8010098:	2204      	movs	r2, #4
 801009a:	f102 0614 	add.w	r6, r2, #20
 801009e:	429e      	cmp	r6, r3
 80100a0:	6841      	ldr	r1, [r0, #4]
 80100a2:	d93d      	bls.n	8010120 <_dtoa_r+0x318>
 80100a4:	4620      	mov	r0, r4
 80100a6:	f000 fda7 	bl	8010bf8 <_Balloc>
 80100aa:	9001      	str	r0, [sp, #4]
 80100ac:	2800      	cmp	r0, #0
 80100ae:	d13b      	bne.n	8010128 <_dtoa_r+0x320>
 80100b0:	4b11      	ldr	r3, [pc, #68]	; (80100f8 <_dtoa_r+0x2f0>)
 80100b2:	4602      	mov	r2, r0
 80100b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80100b8:	e6c0      	b.n	800fe3c <_dtoa_r+0x34>
 80100ba:	2301      	movs	r3, #1
 80100bc:	e7df      	b.n	801007e <_dtoa_r+0x276>
 80100be:	bf00      	nop
 80100c0:	636f4361 	.word	0x636f4361
 80100c4:	3fd287a7 	.word	0x3fd287a7
 80100c8:	8b60c8b3 	.word	0x8b60c8b3
 80100cc:	3fc68a28 	.word	0x3fc68a28
 80100d0:	509f79fb 	.word	0x509f79fb
 80100d4:	3fd34413 	.word	0x3fd34413
 80100d8:	08011f9d 	.word	0x08011f9d
 80100dc:	08011fb4 	.word	0x08011fb4
 80100e0:	7ff00000 	.word	0x7ff00000
 80100e4:	08011f99 	.word	0x08011f99
 80100e8:	08011f90 	.word	0x08011f90
 80100ec:	08011f6d 	.word	0x08011f6d
 80100f0:	3ff80000 	.word	0x3ff80000
 80100f4:	08012108 	.word	0x08012108
 80100f8:	0801200f 	.word	0x0801200f
 80100fc:	2501      	movs	r5, #1
 80100fe:	2300      	movs	r3, #0
 8010100:	9306      	str	r3, [sp, #24]
 8010102:	9508      	str	r5, [sp, #32]
 8010104:	f04f 33ff 	mov.w	r3, #4294967295
 8010108:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801010c:	2200      	movs	r2, #0
 801010e:	2312      	movs	r3, #18
 8010110:	e7b0      	b.n	8010074 <_dtoa_r+0x26c>
 8010112:	2301      	movs	r3, #1
 8010114:	9308      	str	r3, [sp, #32]
 8010116:	e7f5      	b.n	8010104 <_dtoa_r+0x2fc>
 8010118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801011a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801011e:	e7b8      	b.n	8010092 <_dtoa_r+0x28a>
 8010120:	3101      	adds	r1, #1
 8010122:	6041      	str	r1, [r0, #4]
 8010124:	0052      	lsls	r2, r2, #1
 8010126:	e7b8      	b.n	801009a <_dtoa_r+0x292>
 8010128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801012a:	9a01      	ldr	r2, [sp, #4]
 801012c:	601a      	str	r2, [r3, #0]
 801012e:	9b03      	ldr	r3, [sp, #12]
 8010130:	2b0e      	cmp	r3, #14
 8010132:	f200 809d 	bhi.w	8010270 <_dtoa_r+0x468>
 8010136:	2d00      	cmp	r5, #0
 8010138:	f000 809a 	beq.w	8010270 <_dtoa_r+0x468>
 801013c:	9b00      	ldr	r3, [sp, #0]
 801013e:	2b00      	cmp	r3, #0
 8010140:	dd32      	ble.n	80101a8 <_dtoa_r+0x3a0>
 8010142:	4ab7      	ldr	r2, [pc, #732]	; (8010420 <_dtoa_r+0x618>)
 8010144:	f003 030f 	and.w	r3, r3, #15
 8010148:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801014c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010150:	9b00      	ldr	r3, [sp, #0]
 8010152:	05d8      	lsls	r0, r3, #23
 8010154:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010158:	d516      	bpl.n	8010188 <_dtoa_r+0x380>
 801015a:	4bb2      	ldr	r3, [pc, #712]	; (8010424 <_dtoa_r+0x61c>)
 801015c:	ec51 0b19 	vmov	r0, r1, d9
 8010160:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010164:	f7f0 fb7a 	bl	800085c <__aeabi_ddiv>
 8010168:	f007 070f 	and.w	r7, r7, #15
 801016c:	4682      	mov	sl, r0
 801016e:	468b      	mov	fp, r1
 8010170:	2503      	movs	r5, #3
 8010172:	4eac      	ldr	r6, [pc, #688]	; (8010424 <_dtoa_r+0x61c>)
 8010174:	b957      	cbnz	r7, 801018c <_dtoa_r+0x384>
 8010176:	4642      	mov	r2, r8
 8010178:	464b      	mov	r3, r9
 801017a:	4650      	mov	r0, sl
 801017c:	4659      	mov	r1, fp
 801017e:	f7f0 fb6d 	bl	800085c <__aeabi_ddiv>
 8010182:	4682      	mov	sl, r0
 8010184:	468b      	mov	fp, r1
 8010186:	e028      	b.n	80101da <_dtoa_r+0x3d2>
 8010188:	2502      	movs	r5, #2
 801018a:	e7f2      	b.n	8010172 <_dtoa_r+0x36a>
 801018c:	07f9      	lsls	r1, r7, #31
 801018e:	d508      	bpl.n	80101a2 <_dtoa_r+0x39a>
 8010190:	4640      	mov	r0, r8
 8010192:	4649      	mov	r1, r9
 8010194:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010198:	f7f0 fa36 	bl	8000608 <__aeabi_dmul>
 801019c:	3501      	adds	r5, #1
 801019e:	4680      	mov	r8, r0
 80101a0:	4689      	mov	r9, r1
 80101a2:	107f      	asrs	r7, r7, #1
 80101a4:	3608      	adds	r6, #8
 80101a6:	e7e5      	b.n	8010174 <_dtoa_r+0x36c>
 80101a8:	f000 809b 	beq.w	80102e2 <_dtoa_r+0x4da>
 80101ac:	9b00      	ldr	r3, [sp, #0]
 80101ae:	4f9d      	ldr	r7, [pc, #628]	; (8010424 <_dtoa_r+0x61c>)
 80101b0:	425e      	negs	r6, r3
 80101b2:	4b9b      	ldr	r3, [pc, #620]	; (8010420 <_dtoa_r+0x618>)
 80101b4:	f006 020f 	and.w	r2, r6, #15
 80101b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c0:	ec51 0b19 	vmov	r0, r1, d9
 80101c4:	f7f0 fa20 	bl	8000608 <__aeabi_dmul>
 80101c8:	1136      	asrs	r6, r6, #4
 80101ca:	4682      	mov	sl, r0
 80101cc:	468b      	mov	fp, r1
 80101ce:	2300      	movs	r3, #0
 80101d0:	2502      	movs	r5, #2
 80101d2:	2e00      	cmp	r6, #0
 80101d4:	d17a      	bne.n	80102cc <_dtoa_r+0x4c4>
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d1d3      	bne.n	8010182 <_dtoa_r+0x37a>
 80101da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101dc:	2b00      	cmp	r3, #0
 80101de:	f000 8082 	beq.w	80102e6 <_dtoa_r+0x4de>
 80101e2:	4b91      	ldr	r3, [pc, #580]	; (8010428 <_dtoa_r+0x620>)
 80101e4:	2200      	movs	r2, #0
 80101e6:	4650      	mov	r0, sl
 80101e8:	4659      	mov	r1, fp
 80101ea:	f7f0 fc7f 	bl	8000aec <__aeabi_dcmplt>
 80101ee:	2800      	cmp	r0, #0
 80101f0:	d079      	beq.n	80102e6 <_dtoa_r+0x4de>
 80101f2:	9b03      	ldr	r3, [sp, #12]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d076      	beq.n	80102e6 <_dtoa_r+0x4de>
 80101f8:	9b02      	ldr	r3, [sp, #8]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	dd36      	ble.n	801026c <_dtoa_r+0x464>
 80101fe:	9b00      	ldr	r3, [sp, #0]
 8010200:	4650      	mov	r0, sl
 8010202:	4659      	mov	r1, fp
 8010204:	1e5f      	subs	r7, r3, #1
 8010206:	2200      	movs	r2, #0
 8010208:	4b88      	ldr	r3, [pc, #544]	; (801042c <_dtoa_r+0x624>)
 801020a:	f7f0 f9fd 	bl	8000608 <__aeabi_dmul>
 801020e:	9e02      	ldr	r6, [sp, #8]
 8010210:	4682      	mov	sl, r0
 8010212:	468b      	mov	fp, r1
 8010214:	3501      	adds	r5, #1
 8010216:	4628      	mov	r0, r5
 8010218:	f7f0 f98c 	bl	8000534 <__aeabi_i2d>
 801021c:	4652      	mov	r2, sl
 801021e:	465b      	mov	r3, fp
 8010220:	f7f0 f9f2 	bl	8000608 <__aeabi_dmul>
 8010224:	4b82      	ldr	r3, [pc, #520]	; (8010430 <_dtoa_r+0x628>)
 8010226:	2200      	movs	r2, #0
 8010228:	f7f0 f838 	bl	800029c <__adddf3>
 801022c:	46d0      	mov	r8, sl
 801022e:	46d9      	mov	r9, fp
 8010230:	4682      	mov	sl, r0
 8010232:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010236:	2e00      	cmp	r6, #0
 8010238:	d158      	bne.n	80102ec <_dtoa_r+0x4e4>
 801023a:	4b7e      	ldr	r3, [pc, #504]	; (8010434 <_dtoa_r+0x62c>)
 801023c:	2200      	movs	r2, #0
 801023e:	4640      	mov	r0, r8
 8010240:	4649      	mov	r1, r9
 8010242:	f7f0 f829 	bl	8000298 <__aeabi_dsub>
 8010246:	4652      	mov	r2, sl
 8010248:	465b      	mov	r3, fp
 801024a:	4680      	mov	r8, r0
 801024c:	4689      	mov	r9, r1
 801024e:	f7f0 fc6b 	bl	8000b28 <__aeabi_dcmpgt>
 8010252:	2800      	cmp	r0, #0
 8010254:	f040 8295 	bne.w	8010782 <_dtoa_r+0x97a>
 8010258:	4652      	mov	r2, sl
 801025a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801025e:	4640      	mov	r0, r8
 8010260:	4649      	mov	r1, r9
 8010262:	f7f0 fc43 	bl	8000aec <__aeabi_dcmplt>
 8010266:	2800      	cmp	r0, #0
 8010268:	f040 8289 	bne.w	801077e <_dtoa_r+0x976>
 801026c:	ec5b ab19 	vmov	sl, fp, d9
 8010270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010272:	2b00      	cmp	r3, #0
 8010274:	f2c0 8148 	blt.w	8010508 <_dtoa_r+0x700>
 8010278:	9a00      	ldr	r2, [sp, #0]
 801027a:	2a0e      	cmp	r2, #14
 801027c:	f300 8144 	bgt.w	8010508 <_dtoa_r+0x700>
 8010280:	4b67      	ldr	r3, [pc, #412]	; (8010420 <_dtoa_r+0x618>)
 8010282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010286:	e9d3 8900 	ldrd	r8, r9, [r3]
 801028a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801028c:	2b00      	cmp	r3, #0
 801028e:	f280 80d5 	bge.w	801043c <_dtoa_r+0x634>
 8010292:	9b03      	ldr	r3, [sp, #12]
 8010294:	2b00      	cmp	r3, #0
 8010296:	f300 80d1 	bgt.w	801043c <_dtoa_r+0x634>
 801029a:	f040 826f 	bne.w	801077c <_dtoa_r+0x974>
 801029e:	4b65      	ldr	r3, [pc, #404]	; (8010434 <_dtoa_r+0x62c>)
 80102a0:	2200      	movs	r2, #0
 80102a2:	4640      	mov	r0, r8
 80102a4:	4649      	mov	r1, r9
 80102a6:	f7f0 f9af 	bl	8000608 <__aeabi_dmul>
 80102aa:	4652      	mov	r2, sl
 80102ac:	465b      	mov	r3, fp
 80102ae:	f7f0 fc31 	bl	8000b14 <__aeabi_dcmpge>
 80102b2:	9e03      	ldr	r6, [sp, #12]
 80102b4:	4637      	mov	r7, r6
 80102b6:	2800      	cmp	r0, #0
 80102b8:	f040 8245 	bne.w	8010746 <_dtoa_r+0x93e>
 80102bc:	9d01      	ldr	r5, [sp, #4]
 80102be:	2331      	movs	r3, #49	; 0x31
 80102c0:	f805 3b01 	strb.w	r3, [r5], #1
 80102c4:	9b00      	ldr	r3, [sp, #0]
 80102c6:	3301      	adds	r3, #1
 80102c8:	9300      	str	r3, [sp, #0]
 80102ca:	e240      	b.n	801074e <_dtoa_r+0x946>
 80102cc:	07f2      	lsls	r2, r6, #31
 80102ce:	d505      	bpl.n	80102dc <_dtoa_r+0x4d4>
 80102d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102d4:	f7f0 f998 	bl	8000608 <__aeabi_dmul>
 80102d8:	3501      	adds	r5, #1
 80102da:	2301      	movs	r3, #1
 80102dc:	1076      	asrs	r6, r6, #1
 80102de:	3708      	adds	r7, #8
 80102e0:	e777      	b.n	80101d2 <_dtoa_r+0x3ca>
 80102e2:	2502      	movs	r5, #2
 80102e4:	e779      	b.n	80101da <_dtoa_r+0x3d2>
 80102e6:	9f00      	ldr	r7, [sp, #0]
 80102e8:	9e03      	ldr	r6, [sp, #12]
 80102ea:	e794      	b.n	8010216 <_dtoa_r+0x40e>
 80102ec:	9901      	ldr	r1, [sp, #4]
 80102ee:	4b4c      	ldr	r3, [pc, #304]	; (8010420 <_dtoa_r+0x618>)
 80102f0:	4431      	add	r1, r6
 80102f2:	910d      	str	r1, [sp, #52]	; 0x34
 80102f4:	9908      	ldr	r1, [sp, #32]
 80102f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80102fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80102fe:	2900      	cmp	r1, #0
 8010300:	d043      	beq.n	801038a <_dtoa_r+0x582>
 8010302:	494d      	ldr	r1, [pc, #308]	; (8010438 <_dtoa_r+0x630>)
 8010304:	2000      	movs	r0, #0
 8010306:	f7f0 faa9 	bl	800085c <__aeabi_ddiv>
 801030a:	4652      	mov	r2, sl
 801030c:	465b      	mov	r3, fp
 801030e:	f7ef ffc3 	bl	8000298 <__aeabi_dsub>
 8010312:	9d01      	ldr	r5, [sp, #4]
 8010314:	4682      	mov	sl, r0
 8010316:	468b      	mov	fp, r1
 8010318:	4649      	mov	r1, r9
 801031a:	4640      	mov	r0, r8
 801031c:	f7f0 fc24 	bl	8000b68 <__aeabi_d2iz>
 8010320:	4606      	mov	r6, r0
 8010322:	f7f0 f907 	bl	8000534 <__aeabi_i2d>
 8010326:	4602      	mov	r2, r0
 8010328:	460b      	mov	r3, r1
 801032a:	4640      	mov	r0, r8
 801032c:	4649      	mov	r1, r9
 801032e:	f7ef ffb3 	bl	8000298 <__aeabi_dsub>
 8010332:	3630      	adds	r6, #48	; 0x30
 8010334:	f805 6b01 	strb.w	r6, [r5], #1
 8010338:	4652      	mov	r2, sl
 801033a:	465b      	mov	r3, fp
 801033c:	4680      	mov	r8, r0
 801033e:	4689      	mov	r9, r1
 8010340:	f7f0 fbd4 	bl	8000aec <__aeabi_dcmplt>
 8010344:	2800      	cmp	r0, #0
 8010346:	d163      	bne.n	8010410 <_dtoa_r+0x608>
 8010348:	4642      	mov	r2, r8
 801034a:	464b      	mov	r3, r9
 801034c:	4936      	ldr	r1, [pc, #216]	; (8010428 <_dtoa_r+0x620>)
 801034e:	2000      	movs	r0, #0
 8010350:	f7ef ffa2 	bl	8000298 <__aeabi_dsub>
 8010354:	4652      	mov	r2, sl
 8010356:	465b      	mov	r3, fp
 8010358:	f7f0 fbc8 	bl	8000aec <__aeabi_dcmplt>
 801035c:	2800      	cmp	r0, #0
 801035e:	f040 80b5 	bne.w	80104cc <_dtoa_r+0x6c4>
 8010362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010364:	429d      	cmp	r5, r3
 8010366:	d081      	beq.n	801026c <_dtoa_r+0x464>
 8010368:	4b30      	ldr	r3, [pc, #192]	; (801042c <_dtoa_r+0x624>)
 801036a:	2200      	movs	r2, #0
 801036c:	4650      	mov	r0, sl
 801036e:	4659      	mov	r1, fp
 8010370:	f7f0 f94a 	bl	8000608 <__aeabi_dmul>
 8010374:	4b2d      	ldr	r3, [pc, #180]	; (801042c <_dtoa_r+0x624>)
 8010376:	4682      	mov	sl, r0
 8010378:	468b      	mov	fp, r1
 801037a:	4640      	mov	r0, r8
 801037c:	4649      	mov	r1, r9
 801037e:	2200      	movs	r2, #0
 8010380:	f7f0 f942 	bl	8000608 <__aeabi_dmul>
 8010384:	4680      	mov	r8, r0
 8010386:	4689      	mov	r9, r1
 8010388:	e7c6      	b.n	8010318 <_dtoa_r+0x510>
 801038a:	4650      	mov	r0, sl
 801038c:	4659      	mov	r1, fp
 801038e:	f7f0 f93b 	bl	8000608 <__aeabi_dmul>
 8010392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010394:	9d01      	ldr	r5, [sp, #4]
 8010396:	930f      	str	r3, [sp, #60]	; 0x3c
 8010398:	4682      	mov	sl, r0
 801039a:	468b      	mov	fp, r1
 801039c:	4649      	mov	r1, r9
 801039e:	4640      	mov	r0, r8
 80103a0:	f7f0 fbe2 	bl	8000b68 <__aeabi_d2iz>
 80103a4:	4606      	mov	r6, r0
 80103a6:	f7f0 f8c5 	bl	8000534 <__aeabi_i2d>
 80103aa:	3630      	adds	r6, #48	; 0x30
 80103ac:	4602      	mov	r2, r0
 80103ae:	460b      	mov	r3, r1
 80103b0:	4640      	mov	r0, r8
 80103b2:	4649      	mov	r1, r9
 80103b4:	f7ef ff70 	bl	8000298 <__aeabi_dsub>
 80103b8:	f805 6b01 	strb.w	r6, [r5], #1
 80103bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103be:	429d      	cmp	r5, r3
 80103c0:	4680      	mov	r8, r0
 80103c2:	4689      	mov	r9, r1
 80103c4:	f04f 0200 	mov.w	r2, #0
 80103c8:	d124      	bne.n	8010414 <_dtoa_r+0x60c>
 80103ca:	4b1b      	ldr	r3, [pc, #108]	; (8010438 <_dtoa_r+0x630>)
 80103cc:	4650      	mov	r0, sl
 80103ce:	4659      	mov	r1, fp
 80103d0:	f7ef ff64 	bl	800029c <__adddf3>
 80103d4:	4602      	mov	r2, r0
 80103d6:	460b      	mov	r3, r1
 80103d8:	4640      	mov	r0, r8
 80103da:	4649      	mov	r1, r9
 80103dc:	f7f0 fba4 	bl	8000b28 <__aeabi_dcmpgt>
 80103e0:	2800      	cmp	r0, #0
 80103e2:	d173      	bne.n	80104cc <_dtoa_r+0x6c4>
 80103e4:	4652      	mov	r2, sl
 80103e6:	465b      	mov	r3, fp
 80103e8:	4913      	ldr	r1, [pc, #76]	; (8010438 <_dtoa_r+0x630>)
 80103ea:	2000      	movs	r0, #0
 80103ec:	f7ef ff54 	bl	8000298 <__aeabi_dsub>
 80103f0:	4602      	mov	r2, r0
 80103f2:	460b      	mov	r3, r1
 80103f4:	4640      	mov	r0, r8
 80103f6:	4649      	mov	r1, r9
 80103f8:	f7f0 fb78 	bl	8000aec <__aeabi_dcmplt>
 80103fc:	2800      	cmp	r0, #0
 80103fe:	f43f af35 	beq.w	801026c <_dtoa_r+0x464>
 8010402:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010404:	1e6b      	subs	r3, r5, #1
 8010406:	930f      	str	r3, [sp, #60]	; 0x3c
 8010408:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801040c:	2b30      	cmp	r3, #48	; 0x30
 801040e:	d0f8      	beq.n	8010402 <_dtoa_r+0x5fa>
 8010410:	9700      	str	r7, [sp, #0]
 8010412:	e049      	b.n	80104a8 <_dtoa_r+0x6a0>
 8010414:	4b05      	ldr	r3, [pc, #20]	; (801042c <_dtoa_r+0x624>)
 8010416:	f7f0 f8f7 	bl	8000608 <__aeabi_dmul>
 801041a:	4680      	mov	r8, r0
 801041c:	4689      	mov	r9, r1
 801041e:	e7bd      	b.n	801039c <_dtoa_r+0x594>
 8010420:	08012108 	.word	0x08012108
 8010424:	080120e0 	.word	0x080120e0
 8010428:	3ff00000 	.word	0x3ff00000
 801042c:	40240000 	.word	0x40240000
 8010430:	401c0000 	.word	0x401c0000
 8010434:	40140000 	.word	0x40140000
 8010438:	3fe00000 	.word	0x3fe00000
 801043c:	9d01      	ldr	r5, [sp, #4]
 801043e:	4656      	mov	r6, sl
 8010440:	465f      	mov	r7, fp
 8010442:	4642      	mov	r2, r8
 8010444:	464b      	mov	r3, r9
 8010446:	4630      	mov	r0, r6
 8010448:	4639      	mov	r1, r7
 801044a:	f7f0 fa07 	bl	800085c <__aeabi_ddiv>
 801044e:	f7f0 fb8b 	bl	8000b68 <__aeabi_d2iz>
 8010452:	4682      	mov	sl, r0
 8010454:	f7f0 f86e 	bl	8000534 <__aeabi_i2d>
 8010458:	4642      	mov	r2, r8
 801045a:	464b      	mov	r3, r9
 801045c:	f7f0 f8d4 	bl	8000608 <__aeabi_dmul>
 8010460:	4602      	mov	r2, r0
 8010462:	460b      	mov	r3, r1
 8010464:	4630      	mov	r0, r6
 8010466:	4639      	mov	r1, r7
 8010468:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801046c:	f7ef ff14 	bl	8000298 <__aeabi_dsub>
 8010470:	f805 6b01 	strb.w	r6, [r5], #1
 8010474:	9e01      	ldr	r6, [sp, #4]
 8010476:	9f03      	ldr	r7, [sp, #12]
 8010478:	1bae      	subs	r6, r5, r6
 801047a:	42b7      	cmp	r7, r6
 801047c:	4602      	mov	r2, r0
 801047e:	460b      	mov	r3, r1
 8010480:	d135      	bne.n	80104ee <_dtoa_r+0x6e6>
 8010482:	f7ef ff0b 	bl	800029c <__adddf3>
 8010486:	4642      	mov	r2, r8
 8010488:	464b      	mov	r3, r9
 801048a:	4606      	mov	r6, r0
 801048c:	460f      	mov	r7, r1
 801048e:	f7f0 fb4b 	bl	8000b28 <__aeabi_dcmpgt>
 8010492:	b9d0      	cbnz	r0, 80104ca <_dtoa_r+0x6c2>
 8010494:	4642      	mov	r2, r8
 8010496:	464b      	mov	r3, r9
 8010498:	4630      	mov	r0, r6
 801049a:	4639      	mov	r1, r7
 801049c:	f7f0 fb1c 	bl	8000ad8 <__aeabi_dcmpeq>
 80104a0:	b110      	cbz	r0, 80104a8 <_dtoa_r+0x6a0>
 80104a2:	f01a 0f01 	tst.w	sl, #1
 80104a6:	d110      	bne.n	80104ca <_dtoa_r+0x6c2>
 80104a8:	4620      	mov	r0, r4
 80104aa:	ee18 1a10 	vmov	r1, s16
 80104ae:	f000 fbe3 	bl	8010c78 <_Bfree>
 80104b2:	2300      	movs	r3, #0
 80104b4:	9800      	ldr	r0, [sp, #0]
 80104b6:	702b      	strb	r3, [r5, #0]
 80104b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104ba:	3001      	adds	r0, #1
 80104bc:	6018      	str	r0, [r3, #0]
 80104be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f43f acf1 	beq.w	800fea8 <_dtoa_r+0xa0>
 80104c6:	601d      	str	r5, [r3, #0]
 80104c8:	e4ee      	b.n	800fea8 <_dtoa_r+0xa0>
 80104ca:	9f00      	ldr	r7, [sp, #0]
 80104cc:	462b      	mov	r3, r5
 80104ce:	461d      	mov	r5, r3
 80104d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104d4:	2a39      	cmp	r2, #57	; 0x39
 80104d6:	d106      	bne.n	80104e6 <_dtoa_r+0x6de>
 80104d8:	9a01      	ldr	r2, [sp, #4]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d1f7      	bne.n	80104ce <_dtoa_r+0x6c6>
 80104de:	9901      	ldr	r1, [sp, #4]
 80104e0:	2230      	movs	r2, #48	; 0x30
 80104e2:	3701      	adds	r7, #1
 80104e4:	700a      	strb	r2, [r1, #0]
 80104e6:	781a      	ldrb	r2, [r3, #0]
 80104e8:	3201      	adds	r2, #1
 80104ea:	701a      	strb	r2, [r3, #0]
 80104ec:	e790      	b.n	8010410 <_dtoa_r+0x608>
 80104ee:	4ba6      	ldr	r3, [pc, #664]	; (8010788 <_dtoa_r+0x980>)
 80104f0:	2200      	movs	r2, #0
 80104f2:	f7f0 f889 	bl	8000608 <__aeabi_dmul>
 80104f6:	2200      	movs	r2, #0
 80104f8:	2300      	movs	r3, #0
 80104fa:	4606      	mov	r6, r0
 80104fc:	460f      	mov	r7, r1
 80104fe:	f7f0 faeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8010502:	2800      	cmp	r0, #0
 8010504:	d09d      	beq.n	8010442 <_dtoa_r+0x63a>
 8010506:	e7cf      	b.n	80104a8 <_dtoa_r+0x6a0>
 8010508:	9a08      	ldr	r2, [sp, #32]
 801050a:	2a00      	cmp	r2, #0
 801050c:	f000 80d7 	beq.w	80106be <_dtoa_r+0x8b6>
 8010510:	9a06      	ldr	r2, [sp, #24]
 8010512:	2a01      	cmp	r2, #1
 8010514:	f300 80ba 	bgt.w	801068c <_dtoa_r+0x884>
 8010518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801051a:	2a00      	cmp	r2, #0
 801051c:	f000 80b2 	beq.w	8010684 <_dtoa_r+0x87c>
 8010520:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010524:	9e07      	ldr	r6, [sp, #28]
 8010526:	9d04      	ldr	r5, [sp, #16]
 8010528:	9a04      	ldr	r2, [sp, #16]
 801052a:	441a      	add	r2, r3
 801052c:	9204      	str	r2, [sp, #16]
 801052e:	9a05      	ldr	r2, [sp, #20]
 8010530:	2101      	movs	r1, #1
 8010532:	441a      	add	r2, r3
 8010534:	4620      	mov	r0, r4
 8010536:	9205      	str	r2, [sp, #20]
 8010538:	f000 fc56 	bl	8010de8 <__i2b>
 801053c:	4607      	mov	r7, r0
 801053e:	2d00      	cmp	r5, #0
 8010540:	dd0c      	ble.n	801055c <_dtoa_r+0x754>
 8010542:	9b05      	ldr	r3, [sp, #20]
 8010544:	2b00      	cmp	r3, #0
 8010546:	dd09      	ble.n	801055c <_dtoa_r+0x754>
 8010548:	42ab      	cmp	r3, r5
 801054a:	9a04      	ldr	r2, [sp, #16]
 801054c:	bfa8      	it	ge
 801054e:	462b      	movge	r3, r5
 8010550:	1ad2      	subs	r2, r2, r3
 8010552:	9204      	str	r2, [sp, #16]
 8010554:	9a05      	ldr	r2, [sp, #20]
 8010556:	1aed      	subs	r5, r5, r3
 8010558:	1ad3      	subs	r3, r2, r3
 801055a:	9305      	str	r3, [sp, #20]
 801055c:	9b07      	ldr	r3, [sp, #28]
 801055e:	b31b      	cbz	r3, 80105a8 <_dtoa_r+0x7a0>
 8010560:	9b08      	ldr	r3, [sp, #32]
 8010562:	2b00      	cmp	r3, #0
 8010564:	f000 80af 	beq.w	80106c6 <_dtoa_r+0x8be>
 8010568:	2e00      	cmp	r6, #0
 801056a:	dd13      	ble.n	8010594 <_dtoa_r+0x78c>
 801056c:	4639      	mov	r1, r7
 801056e:	4632      	mov	r2, r6
 8010570:	4620      	mov	r0, r4
 8010572:	f000 fcf9 	bl	8010f68 <__pow5mult>
 8010576:	ee18 2a10 	vmov	r2, s16
 801057a:	4601      	mov	r1, r0
 801057c:	4607      	mov	r7, r0
 801057e:	4620      	mov	r0, r4
 8010580:	f000 fc48 	bl	8010e14 <__multiply>
 8010584:	ee18 1a10 	vmov	r1, s16
 8010588:	4680      	mov	r8, r0
 801058a:	4620      	mov	r0, r4
 801058c:	f000 fb74 	bl	8010c78 <_Bfree>
 8010590:	ee08 8a10 	vmov	s16, r8
 8010594:	9b07      	ldr	r3, [sp, #28]
 8010596:	1b9a      	subs	r2, r3, r6
 8010598:	d006      	beq.n	80105a8 <_dtoa_r+0x7a0>
 801059a:	ee18 1a10 	vmov	r1, s16
 801059e:	4620      	mov	r0, r4
 80105a0:	f000 fce2 	bl	8010f68 <__pow5mult>
 80105a4:	ee08 0a10 	vmov	s16, r0
 80105a8:	2101      	movs	r1, #1
 80105aa:	4620      	mov	r0, r4
 80105ac:	f000 fc1c 	bl	8010de8 <__i2b>
 80105b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	4606      	mov	r6, r0
 80105b6:	f340 8088 	ble.w	80106ca <_dtoa_r+0x8c2>
 80105ba:	461a      	mov	r2, r3
 80105bc:	4601      	mov	r1, r0
 80105be:	4620      	mov	r0, r4
 80105c0:	f000 fcd2 	bl	8010f68 <__pow5mult>
 80105c4:	9b06      	ldr	r3, [sp, #24]
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	4606      	mov	r6, r0
 80105ca:	f340 8081 	ble.w	80106d0 <_dtoa_r+0x8c8>
 80105ce:	f04f 0800 	mov.w	r8, #0
 80105d2:	6933      	ldr	r3, [r6, #16]
 80105d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80105d8:	6918      	ldr	r0, [r3, #16]
 80105da:	f000 fbb5 	bl	8010d48 <__hi0bits>
 80105de:	f1c0 0020 	rsb	r0, r0, #32
 80105e2:	9b05      	ldr	r3, [sp, #20]
 80105e4:	4418      	add	r0, r3
 80105e6:	f010 001f 	ands.w	r0, r0, #31
 80105ea:	f000 8092 	beq.w	8010712 <_dtoa_r+0x90a>
 80105ee:	f1c0 0320 	rsb	r3, r0, #32
 80105f2:	2b04      	cmp	r3, #4
 80105f4:	f340 808a 	ble.w	801070c <_dtoa_r+0x904>
 80105f8:	f1c0 001c 	rsb	r0, r0, #28
 80105fc:	9b04      	ldr	r3, [sp, #16]
 80105fe:	4403      	add	r3, r0
 8010600:	9304      	str	r3, [sp, #16]
 8010602:	9b05      	ldr	r3, [sp, #20]
 8010604:	4403      	add	r3, r0
 8010606:	4405      	add	r5, r0
 8010608:	9305      	str	r3, [sp, #20]
 801060a:	9b04      	ldr	r3, [sp, #16]
 801060c:	2b00      	cmp	r3, #0
 801060e:	dd07      	ble.n	8010620 <_dtoa_r+0x818>
 8010610:	ee18 1a10 	vmov	r1, s16
 8010614:	461a      	mov	r2, r3
 8010616:	4620      	mov	r0, r4
 8010618:	f000 fd00 	bl	801101c <__lshift>
 801061c:	ee08 0a10 	vmov	s16, r0
 8010620:	9b05      	ldr	r3, [sp, #20]
 8010622:	2b00      	cmp	r3, #0
 8010624:	dd05      	ble.n	8010632 <_dtoa_r+0x82a>
 8010626:	4631      	mov	r1, r6
 8010628:	461a      	mov	r2, r3
 801062a:	4620      	mov	r0, r4
 801062c:	f000 fcf6 	bl	801101c <__lshift>
 8010630:	4606      	mov	r6, r0
 8010632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010634:	2b00      	cmp	r3, #0
 8010636:	d06e      	beq.n	8010716 <_dtoa_r+0x90e>
 8010638:	ee18 0a10 	vmov	r0, s16
 801063c:	4631      	mov	r1, r6
 801063e:	f000 fd5d 	bl	80110fc <__mcmp>
 8010642:	2800      	cmp	r0, #0
 8010644:	da67      	bge.n	8010716 <_dtoa_r+0x90e>
 8010646:	9b00      	ldr	r3, [sp, #0]
 8010648:	3b01      	subs	r3, #1
 801064a:	ee18 1a10 	vmov	r1, s16
 801064e:	9300      	str	r3, [sp, #0]
 8010650:	220a      	movs	r2, #10
 8010652:	2300      	movs	r3, #0
 8010654:	4620      	mov	r0, r4
 8010656:	f000 fb31 	bl	8010cbc <__multadd>
 801065a:	9b08      	ldr	r3, [sp, #32]
 801065c:	ee08 0a10 	vmov	s16, r0
 8010660:	2b00      	cmp	r3, #0
 8010662:	f000 81b1 	beq.w	80109c8 <_dtoa_r+0xbc0>
 8010666:	2300      	movs	r3, #0
 8010668:	4639      	mov	r1, r7
 801066a:	220a      	movs	r2, #10
 801066c:	4620      	mov	r0, r4
 801066e:	f000 fb25 	bl	8010cbc <__multadd>
 8010672:	9b02      	ldr	r3, [sp, #8]
 8010674:	2b00      	cmp	r3, #0
 8010676:	4607      	mov	r7, r0
 8010678:	f300 808e 	bgt.w	8010798 <_dtoa_r+0x990>
 801067c:	9b06      	ldr	r3, [sp, #24]
 801067e:	2b02      	cmp	r3, #2
 8010680:	dc51      	bgt.n	8010726 <_dtoa_r+0x91e>
 8010682:	e089      	b.n	8010798 <_dtoa_r+0x990>
 8010684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010686:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801068a:	e74b      	b.n	8010524 <_dtoa_r+0x71c>
 801068c:	9b03      	ldr	r3, [sp, #12]
 801068e:	1e5e      	subs	r6, r3, #1
 8010690:	9b07      	ldr	r3, [sp, #28]
 8010692:	42b3      	cmp	r3, r6
 8010694:	bfbf      	itttt	lt
 8010696:	9b07      	ldrlt	r3, [sp, #28]
 8010698:	9607      	strlt	r6, [sp, #28]
 801069a:	1af2      	sublt	r2, r6, r3
 801069c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801069e:	bfb6      	itet	lt
 80106a0:	189b      	addlt	r3, r3, r2
 80106a2:	1b9e      	subge	r6, r3, r6
 80106a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80106a6:	9b03      	ldr	r3, [sp, #12]
 80106a8:	bfb8      	it	lt
 80106aa:	2600      	movlt	r6, #0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	bfb7      	itett	lt
 80106b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80106b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80106b8:	1a9d      	sublt	r5, r3, r2
 80106ba:	2300      	movlt	r3, #0
 80106bc:	e734      	b.n	8010528 <_dtoa_r+0x720>
 80106be:	9e07      	ldr	r6, [sp, #28]
 80106c0:	9d04      	ldr	r5, [sp, #16]
 80106c2:	9f08      	ldr	r7, [sp, #32]
 80106c4:	e73b      	b.n	801053e <_dtoa_r+0x736>
 80106c6:	9a07      	ldr	r2, [sp, #28]
 80106c8:	e767      	b.n	801059a <_dtoa_r+0x792>
 80106ca:	9b06      	ldr	r3, [sp, #24]
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	dc18      	bgt.n	8010702 <_dtoa_r+0x8fa>
 80106d0:	f1ba 0f00 	cmp.w	sl, #0
 80106d4:	d115      	bne.n	8010702 <_dtoa_r+0x8fa>
 80106d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80106da:	b993      	cbnz	r3, 8010702 <_dtoa_r+0x8fa>
 80106dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80106e0:	0d1b      	lsrs	r3, r3, #20
 80106e2:	051b      	lsls	r3, r3, #20
 80106e4:	b183      	cbz	r3, 8010708 <_dtoa_r+0x900>
 80106e6:	9b04      	ldr	r3, [sp, #16]
 80106e8:	3301      	adds	r3, #1
 80106ea:	9304      	str	r3, [sp, #16]
 80106ec:	9b05      	ldr	r3, [sp, #20]
 80106ee:	3301      	adds	r3, #1
 80106f0:	9305      	str	r3, [sp, #20]
 80106f2:	f04f 0801 	mov.w	r8, #1
 80106f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f47f af6a 	bne.w	80105d2 <_dtoa_r+0x7ca>
 80106fe:	2001      	movs	r0, #1
 8010700:	e76f      	b.n	80105e2 <_dtoa_r+0x7da>
 8010702:	f04f 0800 	mov.w	r8, #0
 8010706:	e7f6      	b.n	80106f6 <_dtoa_r+0x8ee>
 8010708:	4698      	mov	r8, r3
 801070a:	e7f4      	b.n	80106f6 <_dtoa_r+0x8ee>
 801070c:	f43f af7d 	beq.w	801060a <_dtoa_r+0x802>
 8010710:	4618      	mov	r0, r3
 8010712:	301c      	adds	r0, #28
 8010714:	e772      	b.n	80105fc <_dtoa_r+0x7f4>
 8010716:	9b03      	ldr	r3, [sp, #12]
 8010718:	2b00      	cmp	r3, #0
 801071a:	dc37      	bgt.n	801078c <_dtoa_r+0x984>
 801071c:	9b06      	ldr	r3, [sp, #24]
 801071e:	2b02      	cmp	r3, #2
 8010720:	dd34      	ble.n	801078c <_dtoa_r+0x984>
 8010722:	9b03      	ldr	r3, [sp, #12]
 8010724:	9302      	str	r3, [sp, #8]
 8010726:	9b02      	ldr	r3, [sp, #8]
 8010728:	b96b      	cbnz	r3, 8010746 <_dtoa_r+0x93e>
 801072a:	4631      	mov	r1, r6
 801072c:	2205      	movs	r2, #5
 801072e:	4620      	mov	r0, r4
 8010730:	f000 fac4 	bl	8010cbc <__multadd>
 8010734:	4601      	mov	r1, r0
 8010736:	4606      	mov	r6, r0
 8010738:	ee18 0a10 	vmov	r0, s16
 801073c:	f000 fcde 	bl	80110fc <__mcmp>
 8010740:	2800      	cmp	r0, #0
 8010742:	f73f adbb 	bgt.w	80102bc <_dtoa_r+0x4b4>
 8010746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010748:	9d01      	ldr	r5, [sp, #4]
 801074a:	43db      	mvns	r3, r3
 801074c:	9300      	str	r3, [sp, #0]
 801074e:	f04f 0800 	mov.w	r8, #0
 8010752:	4631      	mov	r1, r6
 8010754:	4620      	mov	r0, r4
 8010756:	f000 fa8f 	bl	8010c78 <_Bfree>
 801075a:	2f00      	cmp	r7, #0
 801075c:	f43f aea4 	beq.w	80104a8 <_dtoa_r+0x6a0>
 8010760:	f1b8 0f00 	cmp.w	r8, #0
 8010764:	d005      	beq.n	8010772 <_dtoa_r+0x96a>
 8010766:	45b8      	cmp	r8, r7
 8010768:	d003      	beq.n	8010772 <_dtoa_r+0x96a>
 801076a:	4641      	mov	r1, r8
 801076c:	4620      	mov	r0, r4
 801076e:	f000 fa83 	bl	8010c78 <_Bfree>
 8010772:	4639      	mov	r1, r7
 8010774:	4620      	mov	r0, r4
 8010776:	f000 fa7f 	bl	8010c78 <_Bfree>
 801077a:	e695      	b.n	80104a8 <_dtoa_r+0x6a0>
 801077c:	2600      	movs	r6, #0
 801077e:	4637      	mov	r7, r6
 8010780:	e7e1      	b.n	8010746 <_dtoa_r+0x93e>
 8010782:	9700      	str	r7, [sp, #0]
 8010784:	4637      	mov	r7, r6
 8010786:	e599      	b.n	80102bc <_dtoa_r+0x4b4>
 8010788:	40240000 	.word	0x40240000
 801078c:	9b08      	ldr	r3, [sp, #32]
 801078e:	2b00      	cmp	r3, #0
 8010790:	f000 80ca 	beq.w	8010928 <_dtoa_r+0xb20>
 8010794:	9b03      	ldr	r3, [sp, #12]
 8010796:	9302      	str	r3, [sp, #8]
 8010798:	2d00      	cmp	r5, #0
 801079a:	dd05      	ble.n	80107a8 <_dtoa_r+0x9a0>
 801079c:	4639      	mov	r1, r7
 801079e:	462a      	mov	r2, r5
 80107a0:	4620      	mov	r0, r4
 80107a2:	f000 fc3b 	bl	801101c <__lshift>
 80107a6:	4607      	mov	r7, r0
 80107a8:	f1b8 0f00 	cmp.w	r8, #0
 80107ac:	d05b      	beq.n	8010866 <_dtoa_r+0xa5e>
 80107ae:	6879      	ldr	r1, [r7, #4]
 80107b0:	4620      	mov	r0, r4
 80107b2:	f000 fa21 	bl	8010bf8 <_Balloc>
 80107b6:	4605      	mov	r5, r0
 80107b8:	b928      	cbnz	r0, 80107c6 <_dtoa_r+0x9be>
 80107ba:	4b87      	ldr	r3, [pc, #540]	; (80109d8 <_dtoa_r+0xbd0>)
 80107bc:	4602      	mov	r2, r0
 80107be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80107c2:	f7ff bb3b 	b.w	800fe3c <_dtoa_r+0x34>
 80107c6:	693a      	ldr	r2, [r7, #16]
 80107c8:	3202      	adds	r2, #2
 80107ca:	0092      	lsls	r2, r2, #2
 80107cc:	f107 010c 	add.w	r1, r7, #12
 80107d0:	300c      	adds	r0, #12
 80107d2:	f7fe fcb7 	bl	800f144 <memcpy>
 80107d6:	2201      	movs	r2, #1
 80107d8:	4629      	mov	r1, r5
 80107da:	4620      	mov	r0, r4
 80107dc:	f000 fc1e 	bl	801101c <__lshift>
 80107e0:	9b01      	ldr	r3, [sp, #4]
 80107e2:	f103 0901 	add.w	r9, r3, #1
 80107e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80107ea:	4413      	add	r3, r2
 80107ec:	9305      	str	r3, [sp, #20]
 80107ee:	f00a 0301 	and.w	r3, sl, #1
 80107f2:	46b8      	mov	r8, r7
 80107f4:	9304      	str	r3, [sp, #16]
 80107f6:	4607      	mov	r7, r0
 80107f8:	4631      	mov	r1, r6
 80107fa:	ee18 0a10 	vmov	r0, s16
 80107fe:	f7ff fa75 	bl	800fcec <quorem>
 8010802:	4641      	mov	r1, r8
 8010804:	9002      	str	r0, [sp, #8]
 8010806:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801080a:	ee18 0a10 	vmov	r0, s16
 801080e:	f000 fc75 	bl	80110fc <__mcmp>
 8010812:	463a      	mov	r2, r7
 8010814:	9003      	str	r0, [sp, #12]
 8010816:	4631      	mov	r1, r6
 8010818:	4620      	mov	r0, r4
 801081a:	f000 fc8b 	bl	8011134 <__mdiff>
 801081e:	68c2      	ldr	r2, [r0, #12]
 8010820:	f109 3bff 	add.w	fp, r9, #4294967295
 8010824:	4605      	mov	r5, r0
 8010826:	bb02      	cbnz	r2, 801086a <_dtoa_r+0xa62>
 8010828:	4601      	mov	r1, r0
 801082a:	ee18 0a10 	vmov	r0, s16
 801082e:	f000 fc65 	bl	80110fc <__mcmp>
 8010832:	4602      	mov	r2, r0
 8010834:	4629      	mov	r1, r5
 8010836:	4620      	mov	r0, r4
 8010838:	9207      	str	r2, [sp, #28]
 801083a:	f000 fa1d 	bl	8010c78 <_Bfree>
 801083e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010842:	ea43 0102 	orr.w	r1, r3, r2
 8010846:	9b04      	ldr	r3, [sp, #16]
 8010848:	430b      	orrs	r3, r1
 801084a:	464d      	mov	r5, r9
 801084c:	d10f      	bne.n	801086e <_dtoa_r+0xa66>
 801084e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010852:	d02a      	beq.n	80108aa <_dtoa_r+0xaa2>
 8010854:	9b03      	ldr	r3, [sp, #12]
 8010856:	2b00      	cmp	r3, #0
 8010858:	dd02      	ble.n	8010860 <_dtoa_r+0xa58>
 801085a:	9b02      	ldr	r3, [sp, #8]
 801085c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010860:	f88b a000 	strb.w	sl, [fp]
 8010864:	e775      	b.n	8010752 <_dtoa_r+0x94a>
 8010866:	4638      	mov	r0, r7
 8010868:	e7ba      	b.n	80107e0 <_dtoa_r+0x9d8>
 801086a:	2201      	movs	r2, #1
 801086c:	e7e2      	b.n	8010834 <_dtoa_r+0xa2c>
 801086e:	9b03      	ldr	r3, [sp, #12]
 8010870:	2b00      	cmp	r3, #0
 8010872:	db04      	blt.n	801087e <_dtoa_r+0xa76>
 8010874:	9906      	ldr	r1, [sp, #24]
 8010876:	430b      	orrs	r3, r1
 8010878:	9904      	ldr	r1, [sp, #16]
 801087a:	430b      	orrs	r3, r1
 801087c:	d122      	bne.n	80108c4 <_dtoa_r+0xabc>
 801087e:	2a00      	cmp	r2, #0
 8010880:	ddee      	ble.n	8010860 <_dtoa_r+0xa58>
 8010882:	ee18 1a10 	vmov	r1, s16
 8010886:	2201      	movs	r2, #1
 8010888:	4620      	mov	r0, r4
 801088a:	f000 fbc7 	bl	801101c <__lshift>
 801088e:	4631      	mov	r1, r6
 8010890:	ee08 0a10 	vmov	s16, r0
 8010894:	f000 fc32 	bl	80110fc <__mcmp>
 8010898:	2800      	cmp	r0, #0
 801089a:	dc03      	bgt.n	80108a4 <_dtoa_r+0xa9c>
 801089c:	d1e0      	bne.n	8010860 <_dtoa_r+0xa58>
 801089e:	f01a 0f01 	tst.w	sl, #1
 80108a2:	d0dd      	beq.n	8010860 <_dtoa_r+0xa58>
 80108a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80108a8:	d1d7      	bne.n	801085a <_dtoa_r+0xa52>
 80108aa:	2339      	movs	r3, #57	; 0x39
 80108ac:	f88b 3000 	strb.w	r3, [fp]
 80108b0:	462b      	mov	r3, r5
 80108b2:	461d      	mov	r5, r3
 80108b4:	3b01      	subs	r3, #1
 80108b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80108ba:	2a39      	cmp	r2, #57	; 0x39
 80108bc:	d071      	beq.n	80109a2 <_dtoa_r+0xb9a>
 80108be:	3201      	adds	r2, #1
 80108c0:	701a      	strb	r2, [r3, #0]
 80108c2:	e746      	b.n	8010752 <_dtoa_r+0x94a>
 80108c4:	2a00      	cmp	r2, #0
 80108c6:	dd07      	ble.n	80108d8 <_dtoa_r+0xad0>
 80108c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80108cc:	d0ed      	beq.n	80108aa <_dtoa_r+0xaa2>
 80108ce:	f10a 0301 	add.w	r3, sl, #1
 80108d2:	f88b 3000 	strb.w	r3, [fp]
 80108d6:	e73c      	b.n	8010752 <_dtoa_r+0x94a>
 80108d8:	9b05      	ldr	r3, [sp, #20]
 80108da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80108de:	4599      	cmp	r9, r3
 80108e0:	d047      	beq.n	8010972 <_dtoa_r+0xb6a>
 80108e2:	ee18 1a10 	vmov	r1, s16
 80108e6:	2300      	movs	r3, #0
 80108e8:	220a      	movs	r2, #10
 80108ea:	4620      	mov	r0, r4
 80108ec:	f000 f9e6 	bl	8010cbc <__multadd>
 80108f0:	45b8      	cmp	r8, r7
 80108f2:	ee08 0a10 	vmov	s16, r0
 80108f6:	f04f 0300 	mov.w	r3, #0
 80108fa:	f04f 020a 	mov.w	r2, #10
 80108fe:	4641      	mov	r1, r8
 8010900:	4620      	mov	r0, r4
 8010902:	d106      	bne.n	8010912 <_dtoa_r+0xb0a>
 8010904:	f000 f9da 	bl	8010cbc <__multadd>
 8010908:	4680      	mov	r8, r0
 801090a:	4607      	mov	r7, r0
 801090c:	f109 0901 	add.w	r9, r9, #1
 8010910:	e772      	b.n	80107f8 <_dtoa_r+0x9f0>
 8010912:	f000 f9d3 	bl	8010cbc <__multadd>
 8010916:	4639      	mov	r1, r7
 8010918:	4680      	mov	r8, r0
 801091a:	2300      	movs	r3, #0
 801091c:	220a      	movs	r2, #10
 801091e:	4620      	mov	r0, r4
 8010920:	f000 f9cc 	bl	8010cbc <__multadd>
 8010924:	4607      	mov	r7, r0
 8010926:	e7f1      	b.n	801090c <_dtoa_r+0xb04>
 8010928:	9b03      	ldr	r3, [sp, #12]
 801092a:	9302      	str	r3, [sp, #8]
 801092c:	9d01      	ldr	r5, [sp, #4]
 801092e:	ee18 0a10 	vmov	r0, s16
 8010932:	4631      	mov	r1, r6
 8010934:	f7ff f9da 	bl	800fcec <quorem>
 8010938:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801093c:	9b01      	ldr	r3, [sp, #4]
 801093e:	f805 ab01 	strb.w	sl, [r5], #1
 8010942:	1aea      	subs	r2, r5, r3
 8010944:	9b02      	ldr	r3, [sp, #8]
 8010946:	4293      	cmp	r3, r2
 8010948:	dd09      	ble.n	801095e <_dtoa_r+0xb56>
 801094a:	ee18 1a10 	vmov	r1, s16
 801094e:	2300      	movs	r3, #0
 8010950:	220a      	movs	r2, #10
 8010952:	4620      	mov	r0, r4
 8010954:	f000 f9b2 	bl	8010cbc <__multadd>
 8010958:	ee08 0a10 	vmov	s16, r0
 801095c:	e7e7      	b.n	801092e <_dtoa_r+0xb26>
 801095e:	9b02      	ldr	r3, [sp, #8]
 8010960:	2b00      	cmp	r3, #0
 8010962:	bfc8      	it	gt
 8010964:	461d      	movgt	r5, r3
 8010966:	9b01      	ldr	r3, [sp, #4]
 8010968:	bfd8      	it	le
 801096a:	2501      	movle	r5, #1
 801096c:	441d      	add	r5, r3
 801096e:	f04f 0800 	mov.w	r8, #0
 8010972:	ee18 1a10 	vmov	r1, s16
 8010976:	2201      	movs	r2, #1
 8010978:	4620      	mov	r0, r4
 801097a:	f000 fb4f 	bl	801101c <__lshift>
 801097e:	4631      	mov	r1, r6
 8010980:	ee08 0a10 	vmov	s16, r0
 8010984:	f000 fbba 	bl	80110fc <__mcmp>
 8010988:	2800      	cmp	r0, #0
 801098a:	dc91      	bgt.n	80108b0 <_dtoa_r+0xaa8>
 801098c:	d102      	bne.n	8010994 <_dtoa_r+0xb8c>
 801098e:	f01a 0f01 	tst.w	sl, #1
 8010992:	d18d      	bne.n	80108b0 <_dtoa_r+0xaa8>
 8010994:	462b      	mov	r3, r5
 8010996:	461d      	mov	r5, r3
 8010998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801099c:	2a30      	cmp	r2, #48	; 0x30
 801099e:	d0fa      	beq.n	8010996 <_dtoa_r+0xb8e>
 80109a0:	e6d7      	b.n	8010752 <_dtoa_r+0x94a>
 80109a2:	9a01      	ldr	r2, [sp, #4]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d184      	bne.n	80108b2 <_dtoa_r+0xaaa>
 80109a8:	9b00      	ldr	r3, [sp, #0]
 80109aa:	3301      	adds	r3, #1
 80109ac:	9300      	str	r3, [sp, #0]
 80109ae:	2331      	movs	r3, #49	; 0x31
 80109b0:	7013      	strb	r3, [r2, #0]
 80109b2:	e6ce      	b.n	8010752 <_dtoa_r+0x94a>
 80109b4:	4b09      	ldr	r3, [pc, #36]	; (80109dc <_dtoa_r+0xbd4>)
 80109b6:	f7ff ba95 	b.w	800fee4 <_dtoa_r+0xdc>
 80109ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109bc:	2b00      	cmp	r3, #0
 80109be:	f47f aa6e 	bne.w	800fe9e <_dtoa_r+0x96>
 80109c2:	4b07      	ldr	r3, [pc, #28]	; (80109e0 <_dtoa_r+0xbd8>)
 80109c4:	f7ff ba8e 	b.w	800fee4 <_dtoa_r+0xdc>
 80109c8:	9b02      	ldr	r3, [sp, #8]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	dcae      	bgt.n	801092c <_dtoa_r+0xb24>
 80109ce:	9b06      	ldr	r3, [sp, #24]
 80109d0:	2b02      	cmp	r3, #2
 80109d2:	f73f aea8 	bgt.w	8010726 <_dtoa_r+0x91e>
 80109d6:	e7a9      	b.n	801092c <_dtoa_r+0xb24>
 80109d8:	0801200f 	.word	0x0801200f
 80109dc:	08011f6c 	.word	0x08011f6c
 80109e0:	08011f90 	.word	0x08011f90

080109e4 <std>:
 80109e4:	2300      	movs	r3, #0
 80109e6:	b510      	push	{r4, lr}
 80109e8:	4604      	mov	r4, r0
 80109ea:	e9c0 3300 	strd	r3, r3, [r0]
 80109ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80109f2:	6083      	str	r3, [r0, #8]
 80109f4:	8181      	strh	r1, [r0, #12]
 80109f6:	6643      	str	r3, [r0, #100]	; 0x64
 80109f8:	81c2      	strh	r2, [r0, #14]
 80109fa:	6183      	str	r3, [r0, #24]
 80109fc:	4619      	mov	r1, r3
 80109fe:	2208      	movs	r2, #8
 8010a00:	305c      	adds	r0, #92	; 0x5c
 8010a02:	f7fe fbad 	bl	800f160 <memset>
 8010a06:	4b05      	ldr	r3, [pc, #20]	; (8010a1c <std+0x38>)
 8010a08:	6263      	str	r3, [r4, #36]	; 0x24
 8010a0a:	4b05      	ldr	r3, [pc, #20]	; (8010a20 <std+0x3c>)
 8010a0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a0e:	4b05      	ldr	r3, [pc, #20]	; (8010a24 <std+0x40>)
 8010a10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a12:	4b05      	ldr	r3, [pc, #20]	; (8010a28 <std+0x44>)
 8010a14:	6224      	str	r4, [r4, #32]
 8010a16:	6323      	str	r3, [r4, #48]	; 0x30
 8010a18:	bd10      	pop	{r4, pc}
 8010a1a:	bf00      	nop
 8010a1c:	0801163d 	.word	0x0801163d
 8010a20:	0801165f 	.word	0x0801165f
 8010a24:	08011697 	.word	0x08011697
 8010a28:	080116bb 	.word	0x080116bb

08010a2c <_cleanup_r>:
 8010a2c:	4901      	ldr	r1, [pc, #4]	; (8010a34 <_cleanup_r+0x8>)
 8010a2e:	f000 b8af 	b.w	8010b90 <_fwalk_reent>
 8010a32:	bf00      	nop
 8010a34:	080119d1 	.word	0x080119d1

08010a38 <__sfmoreglue>:
 8010a38:	b570      	push	{r4, r5, r6, lr}
 8010a3a:	2268      	movs	r2, #104	; 0x68
 8010a3c:	1e4d      	subs	r5, r1, #1
 8010a3e:	4355      	muls	r5, r2
 8010a40:	460e      	mov	r6, r1
 8010a42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010a46:	f7fe fbff 	bl	800f248 <_malloc_r>
 8010a4a:	4604      	mov	r4, r0
 8010a4c:	b140      	cbz	r0, 8010a60 <__sfmoreglue+0x28>
 8010a4e:	2100      	movs	r1, #0
 8010a50:	e9c0 1600 	strd	r1, r6, [r0]
 8010a54:	300c      	adds	r0, #12
 8010a56:	60a0      	str	r0, [r4, #8]
 8010a58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010a5c:	f7fe fb80 	bl	800f160 <memset>
 8010a60:	4620      	mov	r0, r4
 8010a62:	bd70      	pop	{r4, r5, r6, pc}

08010a64 <__sfp_lock_acquire>:
 8010a64:	4801      	ldr	r0, [pc, #4]	; (8010a6c <__sfp_lock_acquire+0x8>)
 8010a66:	f000 b8b8 	b.w	8010bda <__retarget_lock_acquire_recursive>
 8010a6a:	bf00      	nop
 8010a6c:	200016e5 	.word	0x200016e5

08010a70 <__sfp_lock_release>:
 8010a70:	4801      	ldr	r0, [pc, #4]	; (8010a78 <__sfp_lock_release+0x8>)
 8010a72:	f000 b8b3 	b.w	8010bdc <__retarget_lock_release_recursive>
 8010a76:	bf00      	nop
 8010a78:	200016e5 	.word	0x200016e5

08010a7c <__sinit_lock_acquire>:
 8010a7c:	4801      	ldr	r0, [pc, #4]	; (8010a84 <__sinit_lock_acquire+0x8>)
 8010a7e:	f000 b8ac 	b.w	8010bda <__retarget_lock_acquire_recursive>
 8010a82:	bf00      	nop
 8010a84:	200016e6 	.word	0x200016e6

08010a88 <__sinit_lock_release>:
 8010a88:	4801      	ldr	r0, [pc, #4]	; (8010a90 <__sinit_lock_release+0x8>)
 8010a8a:	f000 b8a7 	b.w	8010bdc <__retarget_lock_release_recursive>
 8010a8e:	bf00      	nop
 8010a90:	200016e6 	.word	0x200016e6

08010a94 <__sinit>:
 8010a94:	b510      	push	{r4, lr}
 8010a96:	4604      	mov	r4, r0
 8010a98:	f7ff fff0 	bl	8010a7c <__sinit_lock_acquire>
 8010a9c:	69a3      	ldr	r3, [r4, #24]
 8010a9e:	b11b      	cbz	r3, 8010aa8 <__sinit+0x14>
 8010aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010aa4:	f7ff bff0 	b.w	8010a88 <__sinit_lock_release>
 8010aa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010aac:	6523      	str	r3, [r4, #80]	; 0x50
 8010aae:	4b13      	ldr	r3, [pc, #76]	; (8010afc <__sinit+0x68>)
 8010ab0:	4a13      	ldr	r2, [pc, #76]	; (8010b00 <__sinit+0x6c>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	62a2      	str	r2, [r4, #40]	; 0x28
 8010ab6:	42a3      	cmp	r3, r4
 8010ab8:	bf04      	itt	eq
 8010aba:	2301      	moveq	r3, #1
 8010abc:	61a3      	streq	r3, [r4, #24]
 8010abe:	4620      	mov	r0, r4
 8010ac0:	f000 f820 	bl	8010b04 <__sfp>
 8010ac4:	6060      	str	r0, [r4, #4]
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	f000 f81c 	bl	8010b04 <__sfp>
 8010acc:	60a0      	str	r0, [r4, #8]
 8010ace:	4620      	mov	r0, r4
 8010ad0:	f000 f818 	bl	8010b04 <__sfp>
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	60e0      	str	r0, [r4, #12]
 8010ad8:	2104      	movs	r1, #4
 8010ada:	6860      	ldr	r0, [r4, #4]
 8010adc:	f7ff ff82 	bl	80109e4 <std>
 8010ae0:	68a0      	ldr	r0, [r4, #8]
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	2109      	movs	r1, #9
 8010ae6:	f7ff ff7d 	bl	80109e4 <std>
 8010aea:	68e0      	ldr	r0, [r4, #12]
 8010aec:	2202      	movs	r2, #2
 8010aee:	2112      	movs	r1, #18
 8010af0:	f7ff ff78 	bl	80109e4 <std>
 8010af4:	2301      	movs	r3, #1
 8010af6:	61a3      	str	r3, [r4, #24]
 8010af8:	e7d2      	b.n	8010aa0 <__sinit+0xc>
 8010afa:	bf00      	nop
 8010afc:	08011f58 	.word	0x08011f58
 8010b00:	08010a2d 	.word	0x08010a2d

08010b04 <__sfp>:
 8010b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b06:	4607      	mov	r7, r0
 8010b08:	f7ff ffac 	bl	8010a64 <__sfp_lock_acquire>
 8010b0c:	4b1e      	ldr	r3, [pc, #120]	; (8010b88 <__sfp+0x84>)
 8010b0e:	681e      	ldr	r6, [r3, #0]
 8010b10:	69b3      	ldr	r3, [r6, #24]
 8010b12:	b913      	cbnz	r3, 8010b1a <__sfp+0x16>
 8010b14:	4630      	mov	r0, r6
 8010b16:	f7ff ffbd 	bl	8010a94 <__sinit>
 8010b1a:	3648      	adds	r6, #72	; 0x48
 8010b1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010b20:	3b01      	subs	r3, #1
 8010b22:	d503      	bpl.n	8010b2c <__sfp+0x28>
 8010b24:	6833      	ldr	r3, [r6, #0]
 8010b26:	b30b      	cbz	r3, 8010b6c <__sfp+0x68>
 8010b28:	6836      	ldr	r6, [r6, #0]
 8010b2a:	e7f7      	b.n	8010b1c <__sfp+0x18>
 8010b2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010b30:	b9d5      	cbnz	r5, 8010b68 <__sfp+0x64>
 8010b32:	4b16      	ldr	r3, [pc, #88]	; (8010b8c <__sfp+0x88>)
 8010b34:	60e3      	str	r3, [r4, #12]
 8010b36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010b3a:	6665      	str	r5, [r4, #100]	; 0x64
 8010b3c:	f000 f84c 	bl	8010bd8 <__retarget_lock_init_recursive>
 8010b40:	f7ff ff96 	bl	8010a70 <__sfp_lock_release>
 8010b44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010b48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010b4c:	6025      	str	r5, [r4, #0]
 8010b4e:	61a5      	str	r5, [r4, #24]
 8010b50:	2208      	movs	r2, #8
 8010b52:	4629      	mov	r1, r5
 8010b54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010b58:	f7fe fb02 	bl	800f160 <memset>
 8010b5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010b60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010b64:	4620      	mov	r0, r4
 8010b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b68:	3468      	adds	r4, #104	; 0x68
 8010b6a:	e7d9      	b.n	8010b20 <__sfp+0x1c>
 8010b6c:	2104      	movs	r1, #4
 8010b6e:	4638      	mov	r0, r7
 8010b70:	f7ff ff62 	bl	8010a38 <__sfmoreglue>
 8010b74:	4604      	mov	r4, r0
 8010b76:	6030      	str	r0, [r6, #0]
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	d1d5      	bne.n	8010b28 <__sfp+0x24>
 8010b7c:	f7ff ff78 	bl	8010a70 <__sfp_lock_release>
 8010b80:	230c      	movs	r3, #12
 8010b82:	603b      	str	r3, [r7, #0]
 8010b84:	e7ee      	b.n	8010b64 <__sfp+0x60>
 8010b86:	bf00      	nop
 8010b88:	08011f58 	.word	0x08011f58
 8010b8c:	ffff0001 	.word	0xffff0001

08010b90 <_fwalk_reent>:
 8010b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b94:	4606      	mov	r6, r0
 8010b96:	4688      	mov	r8, r1
 8010b98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010b9c:	2700      	movs	r7, #0
 8010b9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010ba2:	f1b9 0901 	subs.w	r9, r9, #1
 8010ba6:	d505      	bpl.n	8010bb4 <_fwalk_reent+0x24>
 8010ba8:	6824      	ldr	r4, [r4, #0]
 8010baa:	2c00      	cmp	r4, #0
 8010bac:	d1f7      	bne.n	8010b9e <_fwalk_reent+0xe>
 8010bae:	4638      	mov	r0, r7
 8010bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bb4:	89ab      	ldrh	r3, [r5, #12]
 8010bb6:	2b01      	cmp	r3, #1
 8010bb8:	d907      	bls.n	8010bca <_fwalk_reent+0x3a>
 8010bba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	d003      	beq.n	8010bca <_fwalk_reent+0x3a>
 8010bc2:	4629      	mov	r1, r5
 8010bc4:	4630      	mov	r0, r6
 8010bc6:	47c0      	blx	r8
 8010bc8:	4307      	orrs	r7, r0
 8010bca:	3568      	adds	r5, #104	; 0x68
 8010bcc:	e7e9      	b.n	8010ba2 <_fwalk_reent+0x12>
	...

08010bd0 <_localeconv_r>:
 8010bd0:	4800      	ldr	r0, [pc, #0]	; (8010bd4 <_localeconv_r+0x4>)
 8010bd2:	4770      	bx	lr
 8010bd4:	2000019c 	.word	0x2000019c

08010bd8 <__retarget_lock_init_recursive>:
 8010bd8:	4770      	bx	lr

08010bda <__retarget_lock_acquire_recursive>:
 8010bda:	4770      	bx	lr

08010bdc <__retarget_lock_release_recursive>:
 8010bdc:	4770      	bx	lr
	...

08010be0 <__malloc_lock>:
 8010be0:	4801      	ldr	r0, [pc, #4]	; (8010be8 <__malloc_lock+0x8>)
 8010be2:	f7ff bffa 	b.w	8010bda <__retarget_lock_acquire_recursive>
 8010be6:	bf00      	nop
 8010be8:	200016e4 	.word	0x200016e4

08010bec <__malloc_unlock>:
 8010bec:	4801      	ldr	r0, [pc, #4]	; (8010bf4 <__malloc_unlock+0x8>)
 8010bee:	f7ff bff5 	b.w	8010bdc <__retarget_lock_release_recursive>
 8010bf2:	bf00      	nop
 8010bf4:	200016e4 	.word	0x200016e4

08010bf8 <_Balloc>:
 8010bf8:	b570      	push	{r4, r5, r6, lr}
 8010bfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010bfc:	4604      	mov	r4, r0
 8010bfe:	460d      	mov	r5, r1
 8010c00:	b976      	cbnz	r6, 8010c20 <_Balloc+0x28>
 8010c02:	2010      	movs	r0, #16
 8010c04:	f7fe fa8e 	bl	800f124 <malloc>
 8010c08:	4602      	mov	r2, r0
 8010c0a:	6260      	str	r0, [r4, #36]	; 0x24
 8010c0c:	b920      	cbnz	r0, 8010c18 <_Balloc+0x20>
 8010c0e:	4b18      	ldr	r3, [pc, #96]	; (8010c70 <_Balloc+0x78>)
 8010c10:	4818      	ldr	r0, [pc, #96]	; (8010c74 <_Balloc+0x7c>)
 8010c12:	2166      	movs	r1, #102	; 0x66
 8010c14:	f000 fe28 	bl	8011868 <__assert_func>
 8010c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c1c:	6006      	str	r6, [r0, #0]
 8010c1e:	60c6      	str	r6, [r0, #12]
 8010c20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010c22:	68f3      	ldr	r3, [r6, #12]
 8010c24:	b183      	cbz	r3, 8010c48 <_Balloc+0x50>
 8010c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c28:	68db      	ldr	r3, [r3, #12]
 8010c2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010c2e:	b9b8      	cbnz	r0, 8010c60 <_Balloc+0x68>
 8010c30:	2101      	movs	r1, #1
 8010c32:	fa01 f605 	lsl.w	r6, r1, r5
 8010c36:	1d72      	adds	r2, r6, #5
 8010c38:	0092      	lsls	r2, r2, #2
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	f000 fb60 	bl	8011300 <_calloc_r>
 8010c40:	b160      	cbz	r0, 8010c5c <_Balloc+0x64>
 8010c42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010c46:	e00e      	b.n	8010c66 <_Balloc+0x6e>
 8010c48:	2221      	movs	r2, #33	; 0x21
 8010c4a:	2104      	movs	r1, #4
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	f000 fb57 	bl	8011300 <_calloc_r>
 8010c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c54:	60f0      	str	r0, [r6, #12]
 8010c56:	68db      	ldr	r3, [r3, #12]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d1e4      	bne.n	8010c26 <_Balloc+0x2e>
 8010c5c:	2000      	movs	r0, #0
 8010c5e:	bd70      	pop	{r4, r5, r6, pc}
 8010c60:	6802      	ldr	r2, [r0, #0]
 8010c62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010c66:	2300      	movs	r3, #0
 8010c68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010c6c:	e7f7      	b.n	8010c5e <_Balloc+0x66>
 8010c6e:	bf00      	nop
 8010c70:	08011f9d 	.word	0x08011f9d
 8010c74:	08012080 	.word	0x08012080

08010c78 <_Bfree>:
 8010c78:	b570      	push	{r4, r5, r6, lr}
 8010c7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010c7c:	4605      	mov	r5, r0
 8010c7e:	460c      	mov	r4, r1
 8010c80:	b976      	cbnz	r6, 8010ca0 <_Bfree+0x28>
 8010c82:	2010      	movs	r0, #16
 8010c84:	f7fe fa4e 	bl	800f124 <malloc>
 8010c88:	4602      	mov	r2, r0
 8010c8a:	6268      	str	r0, [r5, #36]	; 0x24
 8010c8c:	b920      	cbnz	r0, 8010c98 <_Bfree+0x20>
 8010c8e:	4b09      	ldr	r3, [pc, #36]	; (8010cb4 <_Bfree+0x3c>)
 8010c90:	4809      	ldr	r0, [pc, #36]	; (8010cb8 <_Bfree+0x40>)
 8010c92:	218a      	movs	r1, #138	; 0x8a
 8010c94:	f000 fde8 	bl	8011868 <__assert_func>
 8010c98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c9c:	6006      	str	r6, [r0, #0]
 8010c9e:	60c6      	str	r6, [r0, #12]
 8010ca0:	b13c      	cbz	r4, 8010cb2 <_Bfree+0x3a>
 8010ca2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010ca4:	6862      	ldr	r2, [r4, #4]
 8010ca6:	68db      	ldr	r3, [r3, #12]
 8010ca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010cac:	6021      	str	r1, [r4, #0]
 8010cae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010cb2:	bd70      	pop	{r4, r5, r6, pc}
 8010cb4:	08011f9d 	.word	0x08011f9d
 8010cb8:	08012080 	.word	0x08012080

08010cbc <__multadd>:
 8010cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cc0:	690d      	ldr	r5, [r1, #16]
 8010cc2:	4607      	mov	r7, r0
 8010cc4:	460c      	mov	r4, r1
 8010cc6:	461e      	mov	r6, r3
 8010cc8:	f101 0c14 	add.w	ip, r1, #20
 8010ccc:	2000      	movs	r0, #0
 8010cce:	f8dc 3000 	ldr.w	r3, [ip]
 8010cd2:	b299      	uxth	r1, r3
 8010cd4:	fb02 6101 	mla	r1, r2, r1, r6
 8010cd8:	0c1e      	lsrs	r6, r3, #16
 8010cda:	0c0b      	lsrs	r3, r1, #16
 8010cdc:	fb02 3306 	mla	r3, r2, r6, r3
 8010ce0:	b289      	uxth	r1, r1
 8010ce2:	3001      	adds	r0, #1
 8010ce4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010ce8:	4285      	cmp	r5, r0
 8010cea:	f84c 1b04 	str.w	r1, [ip], #4
 8010cee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010cf2:	dcec      	bgt.n	8010cce <__multadd+0x12>
 8010cf4:	b30e      	cbz	r6, 8010d3a <__multadd+0x7e>
 8010cf6:	68a3      	ldr	r3, [r4, #8]
 8010cf8:	42ab      	cmp	r3, r5
 8010cfa:	dc19      	bgt.n	8010d30 <__multadd+0x74>
 8010cfc:	6861      	ldr	r1, [r4, #4]
 8010cfe:	4638      	mov	r0, r7
 8010d00:	3101      	adds	r1, #1
 8010d02:	f7ff ff79 	bl	8010bf8 <_Balloc>
 8010d06:	4680      	mov	r8, r0
 8010d08:	b928      	cbnz	r0, 8010d16 <__multadd+0x5a>
 8010d0a:	4602      	mov	r2, r0
 8010d0c:	4b0c      	ldr	r3, [pc, #48]	; (8010d40 <__multadd+0x84>)
 8010d0e:	480d      	ldr	r0, [pc, #52]	; (8010d44 <__multadd+0x88>)
 8010d10:	21b5      	movs	r1, #181	; 0xb5
 8010d12:	f000 fda9 	bl	8011868 <__assert_func>
 8010d16:	6922      	ldr	r2, [r4, #16]
 8010d18:	3202      	adds	r2, #2
 8010d1a:	f104 010c 	add.w	r1, r4, #12
 8010d1e:	0092      	lsls	r2, r2, #2
 8010d20:	300c      	adds	r0, #12
 8010d22:	f7fe fa0f 	bl	800f144 <memcpy>
 8010d26:	4621      	mov	r1, r4
 8010d28:	4638      	mov	r0, r7
 8010d2a:	f7ff ffa5 	bl	8010c78 <_Bfree>
 8010d2e:	4644      	mov	r4, r8
 8010d30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010d34:	3501      	adds	r5, #1
 8010d36:	615e      	str	r6, [r3, #20]
 8010d38:	6125      	str	r5, [r4, #16]
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d40:	0801200f 	.word	0x0801200f
 8010d44:	08012080 	.word	0x08012080

08010d48 <__hi0bits>:
 8010d48:	0c03      	lsrs	r3, r0, #16
 8010d4a:	041b      	lsls	r3, r3, #16
 8010d4c:	b9d3      	cbnz	r3, 8010d84 <__hi0bits+0x3c>
 8010d4e:	0400      	lsls	r0, r0, #16
 8010d50:	2310      	movs	r3, #16
 8010d52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010d56:	bf04      	itt	eq
 8010d58:	0200      	lsleq	r0, r0, #8
 8010d5a:	3308      	addeq	r3, #8
 8010d5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010d60:	bf04      	itt	eq
 8010d62:	0100      	lsleq	r0, r0, #4
 8010d64:	3304      	addeq	r3, #4
 8010d66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010d6a:	bf04      	itt	eq
 8010d6c:	0080      	lsleq	r0, r0, #2
 8010d6e:	3302      	addeq	r3, #2
 8010d70:	2800      	cmp	r0, #0
 8010d72:	db05      	blt.n	8010d80 <__hi0bits+0x38>
 8010d74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010d78:	f103 0301 	add.w	r3, r3, #1
 8010d7c:	bf08      	it	eq
 8010d7e:	2320      	moveq	r3, #32
 8010d80:	4618      	mov	r0, r3
 8010d82:	4770      	bx	lr
 8010d84:	2300      	movs	r3, #0
 8010d86:	e7e4      	b.n	8010d52 <__hi0bits+0xa>

08010d88 <__lo0bits>:
 8010d88:	6803      	ldr	r3, [r0, #0]
 8010d8a:	f013 0207 	ands.w	r2, r3, #7
 8010d8e:	4601      	mov	r1, r0
 8010d90:	d00b      	beq.n	8010daa <__lo0bits+0x22>
 8010d92:	07da      	lsls	r2, r3, #31
 8010d94:	d423      	bmi.n	8010dde <__lo0bits+0x56>
 8010d96:	0798      	lsls	r0, r3, #30
 8010d98:	bf49      	itett	mi
 8010d9a:	085b      	lsrmi	r3, r3, #1
 8010d9c:	089b      	lsrpl	r3, r3, #2
 8010d9e:	2001      	movmi	r0, #1
 8010da0:	600b      	strmi	r3, [r1, #0]
 8010da2:	bf5c      	itt	pl
 8010da4:	600b      	strpl	r3, [r1, #0]
 8010da6:	2002      	movpl	r0, #2
 8010da8:	4770      	bx	lr
 8010daa:	b298      	uxth	r0, r3
 8010dac:	b9a8      	cbnz	r0, 8010dda <__lo0bits+0x52>
 8010dae:	0c1b      	lsrs	r3, r3, #16
 8010db0:	2010      	movs	r0, #16
 8010db2:	b2da      	uxtb	r2, r3
 8010db4:	b90a      	cbnz	r2, 8010dba <__lo0bits+0x32>
 8010db6:	3008      	adds	r0, #8
 8010db8:	0a1b      	lsrs	r3, r3, #8
 8010dba:	071a      	lsls	r2, r3, #28
 8010dbc:	bf04      	itt	eq
 8010dbe:	091b      	lsreq	r3, r3, #4
 8010dc0:	3004      	addeq	r0, #4
 8010dc2:	079a      	lsls	r2, r3, #30
 8010dc4:	bf04      	itt	eq
 8010dc6:	089b      	lsreq	r3, r3, #2
 8010dc8:	3002      	addeq	r0, #2
 8010dca:	07da      	lsls	r2, r3, #31
 8010dcc:	d403      	bmi.n	8010dd6 <__lo0bits+0x4e>
 8010dce:	085b      	lsrs	r3, r3, #1
 8010dd0:	f100 0001 	add.w	r0, r0, #1
 8010dd4:	d005      	beq.n	8010de2 <__lo0bits+0x5a>
 8010dd6:	600b      	str	r3, [r1, #0]
 8010dd8:	4770      	bx	lr
 8010dda:	4610      	mov	r0, r2
 8010ddc:	e7e9      	b.n	8010db2 <__lo0bits+0x2a>
 8010dde:	2000      	movs	r0, #0
 8010de0:	4770      	bx	lr
 8010de2:	2020      	movs	r0, #32
 8010de4:	4770      	bx	lr
	...

08010de8 <__i2b>:
 8010de8:	b510      	push	{r4, lr}
 8010dea:	460c      	mov	r4, r1
 8010dec:	2101      	movs	r1, #1
 8010dee:	f7ff ff03 	bl	8010bf8 <_Balloc>
 8010df2:	4602      	mov	r2, r0
 8010df4:	b928      	cbnz	r0, 8010e02 <__i2b+0x1a>
 8010df6:	4b05      	ldr	r3, [pc, #20]	; (8010e0c <__i2b+0x24>)
 8010df8:	4805      	ldr	r0, [pc, #20]	; (8010e10 <__i2b+0x28>)
 8010dfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010dfe:	f000 fd33 	bl	8011868 <__assert_func>
 8010e02:	2301      	movs	r3, #1
 8010e04:	6144      	str	r4, [r0, #20]
 8010e06:	6103      	str	r3, [r0, #16]
 8010e08:	bd10      	pop	{r4, pc}
 8010e0a:	bf00      	nop
 8010e0c:	0801200f 	.word	0x0801200f
 8010e10:	08012080 	.word	0x08012080

08010e14 <__multiply>:
 8010e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e18:	4691      	mov	r9, r2
 8010e1a:	690a      	ldr	r2, [r1, #16]
 8010e1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010e20:	429a      	cmp	r2, r3
 8010e22:	bfb8      	it	lt
 8010e24:	460b      	movlt	r3, r1
 8010e26:	460c      	mov	r4, r1
 8010e28:	bfbc      	itt	lt
 8010e2a:	464c      	movlt	r4, r9
 8010e2c:	4699      	movlt	r9, r3
 8010e2e:	6927      	ldr	r7, [r4, #16]
 8010e30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010e34:	68a3      	ldr	r3, [r4, #8]
 8010e36:	6861      	ldr	r1, [r4, #4]
 8010e38:	eb07 060a 	add.w	r6, r7, sl
 8010e3c:	42b3      	cmp	r3, r6
 8010e3e:	b085      	sub	sp, #20
 8010e40:	bfb8      	it	lt
 8010e42:	3101      	addlt	r1, #1
 8010e44:	f7ff fed8 	bl	8010bf8 <_Balloc>
 8010e48:	b930      	cbnz	r0, 8010e58 <__multiply+0x44>
 8010e4a:	4602      	mov	r2, r0
 8010e4c:	4b44      	ldr	r3, [pc, #272]	; (8010f60 <__multiply+0x14c>)
 8010e4e:	4845      	ldr	r0, [pc, #276]	; (8010f64 <__multiply+0x150>)
 8010e50:	f240 115d 	movw	r1, #349	; 0x15d
 8010e54:	f000 fd08 	bl	8011868 <__assert_func>
 8010e58:	f100 0514 	add.w	r5, r0, #20
 8010e5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010e60:	462b      	mov	r3, r5
 8010e62:	2200      	movs	r2, #0
 8010e64:	4543      	cmp	r3, r8
 8010e66:	d321      	bcc.n	8010eac <__multiply+0x98>
 8010e68:	f104 0314 	add.w	r3, r4, #20
 8010e6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010e70:	f109 0314 	add.w	r3, r9, #20
 8010e74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010e78:	9202      	str	r2, [sp, #8]
 8010e7a:	1b3a      	subs	r2, r7, r4
 8010e7c:	3a15      	subs	r2, #21
 8010e7e:	f022 0203 	bic.w	r2, r2, #3
 8010e82:	3204      	adds	r2, #4
 8010e84:	f104 0115 	add.w	r1, r4, #21
 8010e88:	428f      	cmp	r7, r1
 8010e8a:	bf38      	it	cc
 8010e8c:	2204      	movcc	r2, #4
 8010e8e:	9201      	str	r2, [sp, #4]
 8010e90:	9a02      	ldr	r2, [sp, #8]
 8010e92:	9303      	str	r3, [sp, #12]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d80c      	bhi.n	8010eb2 <__multiply+0x9e>
 8010e98:	2e00      	cmp	r6, #0
 8010e9a:	dd03      	ble.n	8010ea4 <__multiply+0x90>
 8010e9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d05a      	beq.n	8010f5a <__multiply+0x146>
 8010ea4:	6106      	str	r6, [r0, #16]
 8010ea6:	b005      	add	sp, #20
 8010ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eac:	f843 2b04 	str.w	r2, [r3], #4
 8010eb0:	e7d8      	b.n	8010e64 <__multiply+0x50>
 8010eb2:	f8b3 a000 	ldrh.w	sl, [r3]
 8010eb6:	f1ba 0f00 	cmp.w	sl, #0
 8010eba:	d024      	beq.n	8010f06 <__multiply+0xf2>
 8010ebc:	f104 0e14 	add.w	lr, r4, #20
 8010ec0:	46a9      	mov	r9, r5
 8010ec2:	f04f 0c00 	mov.w	ip, #0
 8010ec6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010eca:	f8d9 1000 	ldr.w	r1, [r9]
 8010ece:	fa1f fb82 	uxth.w	fp, r2
 8010ed2:	b289      	uxth	r1, r1
 8010ed4:	fb0a 110b 	mla	r1, sl, fp, r1
 8010ed8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010edc:	f8d9 2000 	ldr.w	r2, [r9]
 8010ee0:	4461      	add	r1, ip
 8010ee2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010ee6:	fb0a c20b 	mla	r2, sl, fp, ip
 8010eea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010eee:	b289      	uxth	r1, r1
 8010ef0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010ef4:	4577      	cmp	r7, lr
 8010ef6:	f849 1b04 	str.w	r1, [r9], #4
 8010efa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010efe:	d8e2      	bhi.n	8010ec6 <__multiply+0xb2>
 8010f00:	9a01      	ldr	r2, [sp, #4]
 8010f02:	f845 c002 	str.w	ip, [r5, r2]
 8010f06:	9a03      	ldr	r2, [sp, #12]
 8010f08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010f0c:	3304      	adds	r3, #4
 8010f0e:	f1b9 0f00 	cmp.w	r9, #0
 8010f12:	d020      	beq.n	8010f56 <__multiply+0x142>
 8010f14:	6829      	ldr	r1, [r5, #0]
 8010f16:	f104 0c14 	add.w	ip, r4, #20
 8010f1a:	46ae      	mov	lr, r5
 8010f1c:	f04f 0a00 	mov.w	sl, #0
 8010f20:	f8bc b000 	ldrh.w	fp, [ip]
 8010f24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010f28:	fb09 220b 	mla	r2, r9, fp, r2
 8010f2c:	4492      	add	sl, r2
 8010f2e:	b289      	uxth	r1, r1
 8010f30:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010f34:	f84e 1b04 	str.w	r1, [lr], #4
 8010f38:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010f3c:	f8be 1000 	ldrh.w	r1, [lr]
 8010f40:	0c12      	lsrs	r2, r2, #16
 8010f42:	fb09 1102 	mla	r1, r9, r2, r1
 8010f46:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010f4a:	4567      	cmp	r7, ip
 8010f4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010f50:	d8e6      	bhi.n	8010f20 <__multiply+0x10c>
 8010f52:	9a01      	ldr	r2, [sp, #4]
 8010f54:	50a9      	str	r1, [r5, r2]
 8010f56:	3504      	adds	r5, #4
 8010f58:	e79a      	b.n	8010e90 <__multiply+0x7c>
 8010f5a:	3e01      	subs	r6, #1
 8010f5c:	e79c      	b.n	8010e98 <__multiply+0x84>
 8010f5e:	bf00      	nop
 8010f60:	0801200f 	.word	0x0801200f
 8010f64:	08012080 	.word	0x08012080

08010f68 <__pow5mult>:
 8010f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f6c:	4615      	mov	r5, r2
 8010f6e:	f012 0203 	ands.w	r2, r2, #3
 8010f72:	4606      	mov	r6, r0
 8010f74:	460f      	mov	r7, r1
 8010f76:	d007      	beq.n	8010f88 <__pow5mult+0x20>
 8010f78:	4c25      	ldr	r4, [pc, #148]	; (8011010 <__pow5mult+0xa8>)
 8010f7a:	3a01      	subs	r2, #1
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010f82:	f7ff fe9b 	bl	8010cbc <__multadd>
 8010f86:	4607      	mov	r7, r0
 8010f88:	10ad      	asrs	r5, r5, #2
 8010f8a:	d03d      	beq.n	8011008 <__pow5mult+0xa0>
 8010f8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010f8e:	b97c      	cbnz	r4, 8010fb0 <__pow5mult+0x48>
 8010f90:	2010      	movs	r0, #16
 8010f92:	f7fe f8c7 	bl	800f124 <malloc>
 8010f96:	4602      	mov	r2, r0
 8010f98:	6270      	str	r0, [r6, #36]	; 0x24
 8010f9a:	b928      	cbnz	r0, 8010fa8 <__pow5mult+0x40>
 8010f9c:	4b1d      	ldr	r3, [pc, #116]	; (8011014 <__pow5mult+0xac>)
 8010f9e:	481e      	ldr	r0, [pc, #120]	; (8011018 <__pow5mult+0xb0>)
 8010fa0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010fa4:	f000 fc60 	bl	8011868 <__assert_func>
 8010fa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010fac:	6004      	str	r4, [r0, #0]
 8010fae:	60c4      	str	r4, [r0, #12]
 8010fb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010fb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010fb8:	b94c      	cbnz	r4, 8010fce <__pow5mult+0x66>
 8010fba:	f240 2171 	movw	r1, #625	; 0x271
 8010fbe:	4630      	mov	r0, r6
 8010fc0:	f7ff ff12 	bl	8010de8 <__i2b>
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8010fca:	4604      	mov	r4, r0
 8010fcc:	6003      	str	r3, [r0, #0]
 8010fce:	f04f 0900 	mov.w	r9, #0
 8010fd2:	07eb      	lsls	r3, r5, #31
 8010fd4:	d50a      	bpl.n	8010fec <__pow5mult+0x84>
 8010fd6:	4639      	mov	r1, r7
 8010fd8:	4622      	mov	r2, r4
 8010fda:	4630      	mov	r0, r6
 8010fdc:	f7ff ff1a 	bl	8010e14 <__multiply>
 8010fe0:	4639      	mov	r1, r7
 8010fe2:	4680      	mov	r8, r0
 8010fe4:	4630      	mov	r0, r6
 8010fe6:	f7ff fe47 	bl	8010c78 <_Bfree>
 8010fea:	4647      	mov	r7, r8
 8010fec:	106d      	asrs	r5, r5, #1
 8010fee:	d00b      	beq.n	8011008 <__pow5mult+0xa0>
 8010ff0:	6820      	ldr	r0, [r4, #0]
 8010ff2:	b938      	cbnz	r0, 8011004 <__pow5mult+0x9c>
 8010ff4:	4622      	mov	r2, r4
 8010ff6:	4621      	mov	r1, r4
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	f7ff ff0b 	bl	8010e14 <__multiply>
 8010ffe:	6020      	str	r0, [r4, #0]
 8011000:	f8c0 9000 	str.w	r9, [r0]
 8011004:	4604      	mov	r4, r0
 8011006:	e7e4      	b.n	8010fd2 <__pow5mult+0x6a>
 8011008:	4638      	mov	r0, r7
 801100a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801100e:	bf00      	nop
 8011010:	080121d0 	.word	0x080121d0
 8011014:	08011f9d 	.word	0x08011f9d
 8011018:	08012080 	.word	0x08012080

0801101c <__lshift>:
 801101c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011020:	460c      	mov	r4, r1
 8011022:	6849      	ldr	r1, [r1, #4]
 8011024:	6923      	ldr	r3, [r4, #16]
 8011026:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801102a:	68a3      	ldr	r3, [r4, #8]
 801102c:	4607      	mov	r7, r0
 801102e:	4691      	mov	r9, r2
 8011030:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011034:	f108 0601 	add.w	r6, r8, #1
 8011038:	42b3      	cmp	r3, r6
 801103a:	db0b      	blt.n	8011054 <__lshift+0x38>
 801103c:	4638      	mov	r0, r7
 801103e:	f7ff fddb 	bl	8010bf8 <_Balloc>
 8011042:	4605      	mov	r5, r0
 8011044:	b948      	cbnz	r0, 801105a <__lshift+0x3e>
 8011046:	4602      	mov	r2, r0
 8011048:	4b2a      	ldr	r3, [pc, #168]	; (80110f4 <__lshift+0xd8>)
 801104a:	482b      	ldr	r0, [pc, #172]	; (80110f8 <__lshift+0xdc>)
 801104c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011050:	f000 fc0a 	bl	8011868 <__assert_func>
 8011054:	3101      	adds	r1, #1
 8011056:	005b      	lsls	r3, r3, #1
 8011058:	e7ee      	b.n	8011038 <__lshift+0x1c>
 801105a:	2300      	movs	r3, #0
 801105c:	f100 0114 	add.w	r1, r0, #20
 8011060:	f100 0210 	add.w	r2, r0, #16
 8011064:	4618      	mov	r0, r3
 8011066:	4553      	cmp	r3, sl
 8011068:	db37      	blt.n	80110da <__lshift+0xbe>
 801106a:	6920      	ldr	r0, [r4, #16]
 801106c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011070:	f104 0314 	add.w	r3, r4, #20
 8011074:	f019 091f 	ands.w	r9, r9, #31
 8011078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801107c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011080:	d02f      	beq.n	80110e2 <__lshift+0xc6>
 8011082:	f1c9 0e20 	rsb	lr, r9, #32
 8011086:	468a      	mov	sl, r1
 8011088:	f04f 0c00 	mov.w	ip, #0
 801108c:	681a      	ldr	r2, [r3, #0]
 801108e:	fa02 f209 	lsl.w	r2, r2, r9
 8011092:	ea42 020c 	orr.w	r2, r2, ip
 8011096:	f84a 2b04 	str.w	r2, [sl], #4
 801109a:	f853 2b04 	ldr.w	r2, [r3], #4
 801109e:	4298      	cmp	r0, r3
 80110a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80110a4:	d8f2      	bhi.n	801108c <__lshift+0x70>
 80110a6:	1b03      	subs	r3, r0, r4
 80110a8:	3b15      	subs	r3, #21
 80110aa:	f023 0303 	bic.w	r3, r3, #3
 80110ae:	3304      	adds	r3, #4
 80110b0:	f104 0215 	add.w	r2, r4, #21
 80110b4:	4290      	cmp	r0, r2
 80110b6:	bf38      	it	cc
 80110b8:	2304      	movcc	r3, #4
 80110ba:	f841 c003 	str.w	ip, [r1, r3]
 80110be:	f1bc 0f00 	cmp.w	ip, #0
 80110c2:	d001      	beq.n	80110c8 <__lshift+0xac>
 80110c4:	f108 0602 	add.w	r6, r8, #2
 80110c8:	3e01      	subs	r6, #1
 80110ca:	4638      	mov	r0, r7
 80110cc:	612e      	str	r6, [r5, #16]
 80110ce:	4621      	mov	r1, r4
 80110d0:	f7ff fdd2 	bl	8010c78 <_Bfree>
 80110d4:	4628      	mov	r0, r5
 80110d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110da:	f842 0f04 	str.w	r0, [r2, #4]!
 80110de:	3301      	adds	r3, #1
 80110e0:	e7c1      	b.n	8011066 <__lshift+0x4a>
 80110e2:	3904      	subs	r1, #4
 80110e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80110e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80110ec:	4298      	cmp	r0, r3
 80110ee:	d8f9      	bhi.n	80110e4 <__lshift+0xc8>
 80110f0:	e7ea      	b.n	80110c8 <__lshift+0xac>
 80110f2:	bf00      	nop
 80110f4:	0801200f 	.word	0x0801200f
 80110f8:	08012080 	.word	0x08012080

080110fc <__mcmp>:
 80110fc:	b530      	push	{r4, r5, lr}
 80110fe:	6902      	ldr	r2, [r0, #16]
 8011100:	690c      	ldr	r4, [r1, #16]
 8011102:	1b12      	subs	r2, r2, r4
 8011104:	d10e      	bne.n	8011124 <__mcmp+0x28>
 8011106:	f100 0314 	add.w	r3, r0, #20
 801110a:	3114      	adds	r1, #20
 801110c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011110:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011114:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011118:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801111c:	42a5      	cmp	r5, r4
 801111e:	d003      	beq.n	8011128 <__mcmp+0x2c>
 8011120:	d305      	bcc.n	801112e <__mcmp+0x32>
 8011122:	2201      	movs	r2, #1
 8011124:	4610      	mov	r0, r2
 8011126:	bd30      	pop	{r4, r5, pc}
 8011128:	4283      	cmp	r3, r0
 801112a:	d3f3      	bcc.n	8011114 <__mcmp+0x18>
 801112c:	e7fa      	b.n	8011124 <__mcmp+0x28>
 801112e:	f04f 32ff 	mov.w	r2, #4294967295
 8011132:	e7f7      	b.n	8011124 <__mcmp+0x28>

08011134 <__mdiff>:
 8011134:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011138:	460c      	mov	r4, r1
 801113a:	4606      	mov	r6, r0
 801113c:	4611      	mov	r1, r2
 801113e:	4620      	mov	r0, r4
 8011140:	4690      	mov	r8, r2
 8011142:	f7ff ffdb 	bl	80110fc <__mcmp>
 8011146:	1e05      	subs	r5, r0, #0
 8011148:	d110      	bne.n	801116c <__mdiff+0x38>
 801114a:	4629      	mov	r1, r5
 801114c:	4630      	mov	r0, r6
 801114e:	f7ff fd53 	bl	8010bf8 <_Balloc>
 8011152:	b930      	cbnz	r0, 8011162 <__mdiff+0x2e>
 8011154:	4b3a      	ldr	r3, [pc, #232]	; (8011240 <__mdiff+0x10c>)
 8011156:	4602      	mov	r2, r0
 8011158:	f240 2132 	movw	r1, #562	; 0x232
 801115c:	4839      	ldr	r0, [pc, #228]	; (8011244 <__mdiff+0x110>)
 801115e:	f000 fb83 	bl	8011868 <__assert_func>
 8011162:	2301      	movs	r3, #1
 8011164:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801116c:	bfa4      	itt	ge
 801116e:	4643      	movge	r3, r8
 8011170:	46a0      	movge	r8, r4
 8011172:	4630      	mov	r0, r6
 8011174:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011178:	bfa6      	itte	ge
 801117a:	461c      	movge	r4, r3
 801117c:	2500      	movge	r5, #0
 801117e:	2501      	movlt	r5, #1
 8011180:	f7ff fd3a 	bl	8010bf8 <_Balloc>
 8011184:	b920      	cbnz	r0, 8011190 <__mdiff+0x5c>
 8011186:	4b2e      	ldr	r3, [pc, #184]	; (8011240 <__mdiff+0x10c>)
 8011188:	4602      	mov	r2, r0
 801118a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801118e:	e7e5      	b.n	801115c <__mdiff+0x28>
 8011190:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011194:	6926      	ldr	r6, [r4, #16]
 8011196:	60c5      	str	r5, [r0, #12]
 8011198:	f104 0914 	add.w	r9, r4, #20
 801119c:	f108 0514 	add.w	r5, r8, #20
 80111a0:	f100 0e14 	add.w	lr, r0, #20
 80111a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80111a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80111ac:	f108 0210 	add.w	r2, r8, #16
 80111b0:	46f2      	mov	sl, lr
 80111b2:	2100      	movs	r1, #0
 80111b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80111b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80111bc:	fa1f f883 	uxth.w	r8, r3
 80111c0:	fa11 f18b 	uxtah	r1, r1, fp
 80111c4:	0c1b      	lsrs	r3, r3, #16
 80111c6:	eba1 0808 	sub.w	r8, r1, r8
 80111ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80111ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80111d2:	fa1f f888 	uxth.w	r8, r8
 80111d6:	1419      	asrs	r1, r3, #16
 80111d8:	454e      	cmp	r6, r9
 80111da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80111de:	f84a 3b04 	str.w	r3, [sl], #4
 80111e2:	d8e7      	bhi.n	80111b4 <__mdiff+0x80>
 80111e4:	1b33      	subs	r3, r6, r4
 80111e6:	3b15      	subs	r3, #21
 80111e8:	f023 0303 	bic.w	r3, r3, #3
 80111ec:	3304      	adds	r3, #4
 80111ee:	3415      	adds	r4, #21
 80111f0:	42a6      	cmp	r6, r4
 80111f2:	bf38      	it	cc
 80111f4:	2304      	movcc	r3, #4
 80111f6:	441d      	add	r5, r3
 80111f8:	4473      	add	r3, lr
 80111fa:	469e      	mov	lr, r3
 80111fc:	462e      	mov	r6, r5
 80111fe:	4566      	cmp	r6, ip
 8011200:	d30e      	bcc.n	8011220 <__mdiff+0xec>
 8011202:	f10c 0203 	add.w	r2, ip, #3
 8011206:	1b52      	subs	r2, r2, r5
 8011208:	f022 0203 	bic.w	r2, r2, #3
 801120c:	3d03      	subs	r5, #3
 801120e:	45ac      	cmp	ip, r5
 8011210:	bf38      	it	cc
 8011212:	2200      	movcc	r2, #0
 8011214:	441a      	add	r2, r3
 8011216:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801121a:	b17b      	cbz	r3, 801123c <__mdiff+0x108>
 801121c:	6107      	str	r7, [r0, #16]
 801121e:	e7a3      	b.n	8011168 <__mdiff+0x34>
 8011220:	f856 8b04 	ldr.w	r8, [r6], #4
 8011224:	fa11 f288 	uxtah	r2, r1, r8
 8011228:	1414      	asrs	r4, r2, #16
 801122a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801122e:	b292      	uxth	r2, r2
 8011230:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011234:	f84e 2b04 	str.w	r2, [lr], #4
 8011238:	1421      	asrs	r1, r4, #16
 801123a:	e7e0      	b.n	80111fe <__mdiff+0xca>
 801123c:	3f01      	subs	r7, #1
 801123e:	e7ea      	b.n	8011216 <__mdiff+0xe2>
 8011240:	0801200f 	.word	0x0801200f
 8011244:	08012080 	.word	0x08012080

08011248 <__d2b>:
 8011248:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801124c:	4689      	mov	r9, r1
 801124e:	2101      	movs	r1, #1
 8011250:	ec57 6b10 	vmov	r6, r7, d0
 8011254:	4690      	mov	r8, r2
 8011256:	f7ff fccf 	bl	8010bf8 <_Balloc>
 801125a:	4604      	mov	r4, r0
 801125c:	b930      	cbnz	r0, 801126c <__d2b+0x24>
 801125e:	4602      	mov	r2, r0
 8011260:	4b25      	ldr	r3, [pc, #148]	; (80112f8 <__d2b+0xb0>)
 8011262:	4826      	ldr	r0, [pc, #152]	; (80112fc <__d2b+0xb4>)
 8011264:	f240 310a 	movw	r1, #778	; 0x30a
 8011268:	f000 fafe 	bl	8011868 <__assert_func>
 801126c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011270:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011274:	bb35      	cbnz	r5, 80112c4 <__d2b+0x7c>
 8011276:	2e00      	cmp	r6, #0
 8011278:	9301      	str	r3, [sp, #4]
 801127a:	d028      	beq.n	80112ce <__d2b+0x86>
 801127c:	4668      	mov	r0, sp
 801127e:	9600      	str	r6, [sp, #0]
 8011280:	f7ff fd82 	bl	8010d88 <__lo0bits>
 8011284:	9900      	ldr	r1, [sp, #0]
 8011286:	b300      	cbz	r0, 80112ca <__d2b+0x82>
 8011288:	9a01      	ldr	r2, [sp, #4]
 801128a:	f1c0 0320 	rsb	r3, r0, #32
 801128e:	fa02 f303 	lsl.w	r3, r2, r3
 8011292:	430b      	orrs	r3, r1
 8011294:	40c2      	lsrs	r2, r0
 8011296:	6163      	str	r3, [r4, #20]
 8011298:	9201      	str	r2, [sp, #4]
 801129a:	9b01      	ldr	r3, [sp, #4]
 801129c:	61a3      	str	r3, [r4, #24]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	bf14      	ite	ne
 80112a2:	2202      	movne	r2, #2
 80112a4:	2201      	moveq	r2, #1
 80112a6:	6122      	str	r2, [r4, #16]
 80112a8:	b1d5      	cbz	r5, 80112e0 <__d2b+0x98>
 80112aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80112ae:	4405      	add	r5, r0
 80112b0:	f8c9 5000 	str.w	r5, [r9]
 80112b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80112b8:	f8c8 0000 	str.w	r0, [r8]
 80112bc:	4620      	mov	r0, r4
 80112be:	b003      	add	sp, #12
 80112c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80112c8:	e7d5      	b.n	8011276 <__d2b+0x2e>
 80112ca:	6161      	str	r1, [r4, #20]
 80112cc:	e7e5      	b.n	801129a <__d2b+0x52>
 80112ce:	a801      	add	r0, sp, #4
 80112d0:	f7ff fd5a 	bl	8010d88 <__lo0bits>
 80112d4:	9b01      	ldr	r3, [sp, #4]
 80112d6:	6163      	str	r3, [r4, #20]
 80112d8:	2201      	movs	r2, #1
 80112da:	6122      	str	r2, [r4, #16]
 80112dc:	3020      	adds	r0, #32
 80112de:	e7e3      	b.n	80112a8 <__d2b+0x60>
 80112e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80112e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80112e8:	f8c9 0000 	str.w	r0, [r9]
 80112ec:	6918      	ldr	r0, [r3, #16]
 80112ee:	f7ff fd2b 	bl	8010d48 <__hi0bits>
 80112f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80112f6:	e7df      	b.n	80112b8 <__d2b+0x70>
 80112f8:	0801200f 	.word	0x0801200f
 80112fc:	08012080 	.word	0x08012080

08011300 <_calloc_r>:
 8011300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011302:	fba1 2402 	umull	r2, r4, r1, r2
 8011306:	b94c      	cbnz	r4, 801131c <_calloc_r+0x1c>
 8011308:	4611      	mov	r1, r2
 801130a:	9201      	str	r2, [sp, #4]
 801130c:	f7fd ff9c 	bl	800f248 <_malloc_r>
 8011310:	9a01      	ldr	r2, [sp, #4]
 8011312:	4605      	mov	r5, r0
 8011314:	b930      	cbnz	r0, 8011324 <_calloc_r+0x24>
 8011316:	4628      	mov	r0, r5
 8011318:	b003      	add	sp, #12
 801131a:	bd30      	pop	{r4, r5, pc}
 801131c:	220c      	movs	r2, #12
 801131e:	6002      	str	r2, [r0, #0]
 8011320:	2500      	movs	r5, #0
 8011322:	e7f8      	b.n	8011316 <_calloc_r+0x16>
 8011324:	4621      	mov	r1, r4
 8011326:	f7fd ff1b 	bl	800f160 <memset>
 801132a:	e7f4      	b.n	8011316 <_calloc_r+0x16>

0801132c <_realloc_r>:
 801132c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011330:	4680      	mov	r8, r0
 8011332:	4614      	mov	r4, r2
 8011334:	460e      	mov	r6, r1
 8011336:	b921      	cbnz	r1, 8011342 <_realloc_r+0x16>
 8011338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801133c:	4611      	mov	r1, r2
 801133e:	f7fd bf83 	b.w	800f248 <_malloc_r>
 8011342:	b92a      	cbnz	r2, 8011350 <_realloc_r+0x24>
 8011344:	f7fd ff14 	bl	800f170 <_free_r>
 8011348:	4625      	mov	r5, r4
 801134a:	4628      	mov	r0, r5
 801134c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011350:	f000 fc16 	bl	8011b80 <_malloc_usable_size_r>
 8011354:	4284      	cmp	r4, r0
 8011356:	4607      	mov	r7, r0
 8011358:	d802      	bhi.n	8011360 <_realloc_r+0x34>
 801135a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801135e:	d812      	bhi.n	8011386 <_realloc_r+0x5a>
 8011360:	4621      	mov	r1, r4
 8011362:	4640      	mov	r0, r8
 8011364:	f7fd ff70 	bl	800f248 <_malloc_r>
 8011368:	4605      	mov	r5, r0
 801136a:	2800      	cmp	r0, #0
 801136c:	d0ed      	beq.n	801134a <_realloc_r+0x1e>
 801136e:	42bc      	cmp	r4, r7
 8011370:	4622      	mov	r2, r4
 8011372:	4631      	mov	r1, r6
 8011374:	bf28      	it	cs
 8011376:	463a      	movcs	r2, r7
 8011378:	f7fd fee4 	bl	800f144 <memcpy>
 801137c:	4631      	mov	r1, r6
 801137e:	4640      	mov	r0, r8
 8011380:	f7fd fef6 	bl	800f170 <_free_r>
 8011384:	e7e1      	b.n	801134a <_realloc_r+0x1e>
 8011386:	4635      	mov	r5, r6
 8011388:	e7df      	b.n	801134a <_realloc_r+0x1e>

0801138a <__sfputc_r>:
 801138a:	6893      	ldr	r3, [r2, #8]
 801138c:	3b01      	subs	r3, #1
 801138e:	2b00      	cmp	r3, #0
 8011390:	b410      	push	{r4}
 8011392:	6093      	str	r3, [r2, #8]
 8011394:	da08      	bge.n	80113a8 <__sfputc_r+0x1e>
 8011396:	6994      	ldr	r4, [r2, #24]
 8011398:	42a3      	cmp	r3, r4
 801139a:	db01      	blt.n	80113a0 <__sfputc_r+0x16>
 801139c:	290a      	cmp	r1, #10
 801139e:	d103      	bne.n	80113a8 <__sfputc_r+0x1e>
 80113a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113a4:	f000 b98e 	b.w	80116c4 <__swbuf_r>
 80113a8:	6813      	ldr	r3, [r2, #0]
 80113aa:	1c58      	adds	r0, r3, #1
 80113ac:	6010      	str	r0, [r2, #0]
 80113ae:	7019      	strb	r1, [r3, #0]
 80113b0:	4608      	mov	r0, r1
 80113b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113b6:	4770      	bx	lr

080113b8 <__sfputs_r>:
 80113b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ba:	4606      	mov	r6, r0
 80113bc:	460f      	mov	r7, r1
 80113be:	4614      	mov	r4, r2
 80113c0:	18d5      	adds	r5, r2, r3
 80113c2:	42ac      	cmp	r4, r5
 80113c4:	d101      	bne.n	80113ca <__sfputs_r+0x12>
 80113c6:	2000      	movs	r0, #0
 80113c8:	e007      	b.n	80113da <__sfputs_r+0x22>
 80113ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113ce:	463a      	mov	r2, r7
 80113d0:	4630      	mov	r0, r6
 80113d2:	f7ff ffda 	bl	801138a <__sfputc_r>
 80113d6:	1c43      	adds	r3, r0, #1
 80113d8:	d1f3      	bne.n	80113c2 <__sfputs_r+0xa>
 80113da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080113dc <_vfiprintf_r>:
 80113dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113e0:	460d      	mov	r5, r1
 80113e2:	b09d      	sub	sp, #116	; 0x74
 80113e4:	4614      	mov	r4, r2
 80113e6:	4698      	mov	r8, r3
 80113e8:	4606      	mov	r6, r0
 80113ea:	b118      	cbz	r0, 80113f4 <_vfiprintf_r+0x18>
 80113ec:	6983      	ldr	r3, [r0, #24]
 80113ee:	b90b      	cbnz	r3, 80113f4 <_vfiprintf_r+0x18>
 80113f0:	f7ff fb50 	bl	8010a94 <__sinit>
 80113f4:	4b89      	ldr	r3, [pc, #548]	; (801161c <_vfiprintf_r+0x240>)
 80113f6:	429d      	cmp	r5, r3
 80113f8:	d11b      	bne.n	8011432 <_vfiprintf_r+0x56>
 80113fa:	6875      	ldr	r5, [r6, #4]
 80113fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113fe:	07d9      	lsls	r1, r3, #31
 8011400:	d405      	bmi.n	801140e <_vfiprintf_r+0x32>
 8011402:	89ab      	ldrh	r3, [r5, #12]
 8011404:	059a      	lsls	r2, r3, #22
 8011406:	d402      	bmi.n	801140e <_vfiprintf_r+0x32>
 8011408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801140a:	f7ff fbe6 	bl	8010bda <__retarget_lock_acquire_recursive>
 801140e:	89ab      	ldrh	r3, [r5, #12]
 8011410:	071b      	lsls	r3, r3, #28
 8011412:	d501      	bpl.n	8011418 <_vfiprintf_r+0x3c>
 8011414:	692b      	ldr	r3, [r5, #16]
 8011416:	b9eb      	cbnz	r3, 8011454 <_vfiprintf_r+0x78>
 8011418:	4629      	mov	r1, r5
 801141a:	4630      	mov	r0, r6
 801141c:	f000 f9b6 	bl	801178c <__swsetup_r>
 8011420:	b1c0      	cbz	r0, 8011454 <_vfiprintf_r+0x78>
 8011422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011424:	07dc      	lsls	r4, r3, #31
 8011426:	d50e      	bpl.n	8011446 <_vfiprintf_r+0x6a>
 8011428:	f04f 30ff 	mov.w	r0, #4294967295
 801142c:	b01d      	add	sp, #116	; 0x74
 801142e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011432:	4b7b      	ldr	r3, [pc, #492]	; (8011620 <_vfiprintf_r+0x244>)
 8011434:	429d      	cmp	r5, r3
 8011436:	d101      	bne.n	801143c <_vfiprintf_r+0x60>
 8011438:	68b5      	ldr	r5, [r6, #8]
 801143a:	e7df      	b.n	80113fc <_vfiprintf_r+0x20>
 801143c:	4b79      	ldr	r3, [pc, #484]	; (8011624 <_vfiprintf_r+0x248>)
 801143e:	429d      	cmp	r5, r3
 8011440:	bf08      	it	eq
 8011442:	68f5      	ldreq	r5, [r6, #12]
 8011444:	e7da      	b.n	80113fc <_vfiprintf_r+0x20>
 8011446:	89ab      	ldrh	r3, [r5, #12]
 8011448:	0598      	lsls	r0, r3, #22
 801144a:	d4ed      	bmi.n	8011428 <_vfiprintf_r+0x4c>
 801144c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801144e:	f7ff fbc5 	bl	8010bdc <__retarget_lock_release_recursive>
 8011452:	e7e9      	b.n	8011428 <_vfiprintf_r+0x4c>
 8011454:	2300      	movs	r3, #0
 8011456:	9309      	str	r3, [sp, #36]	; 0x24
 8011458:	2320      	movs	r3, #32
 801145a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801145e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011462:	2330      	movs	r3, #48	; 0x30
 8011464:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011628 <_vfiprintf_r+0x24c>
 8011468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801146c:	f04f 0901 	mov.w	r9, #1
 8011470:	4623      	mov	r3, r4
 8011472:	469a      	mov	sl, r3
 8011474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011478:	b10a      	cbz	r2, 801147e <_vfiprintf_r+0xa2>
 801147a:	2a25      	cmp	r2, #37	; 0x25
 801147c:	d1f9      	bne.n	8011472 <_vfiprintf_r+0x96>
 801147e:	ebba 0b04 	subs.w	fp, sl, r4
 8011482:	d00b      	beq.n	801149c <_vfiprintf_r+0xc0>
 8011484:	465b      	mov	r3, fp
 8011486:	4622      	mov	r2, r4
 8011488:	4629      	mov	r1, r5
 801148a:	4630      	mov	r0, r6
 801148c:	f7ff ff94 	bl	80113b8 <__sfputs_r>
 8011490:	3001      	adds	r0, #1
 8011492:	f000 80aa 	beq.w	80115ea <_vfiprintf_r+0x20e>
 8011496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011498:	445a      	add	r2, fp
 801149a:	9209      	str	r2, [sp, #36]	; 0x24
 801149c:	f89a 3000 	ldrb.w	r3, [sl]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	f000 80a2 	beq.w	80115ea <_vfiprintf_r+0x20e>
 80114a6:	2300      	movs	r3, #0
 80114a8:	f04f 32ff 	mov.w	r2, #4294967295
 80114ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114b0:	f10a 0a01 	add.w	sl, sl, #1
 80114b4:	9304      	str	r3, [sp, #16]
 80114b6:	9307      	str	r3, [sp, #28]
 80114b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80114bc:	931a      	str	r3, [sp, #104]	; 0x68
 80114be:	4654      	mov	r4, sl
 80114c0:	2205      	movs	r2, #5
 80114c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114c6:	4858      	ldr	r0, [pc, #352]	; (8011628 <_vfiprintf_r+0x24c>)
 80114c8:	f7ee fe92 	bl	80001f0 <memchr>
 80114cc:	9a04      	ldr	r2, [sp, #16]
 80114ce:	b9d8      	cbnz	r0, 8011508 <_vfiprintf_r+0x12c>
 80114d0:	06d1      	lsls	r1, r2, #27
 80114d2:	bf44      	itt	mi
 80114d4:	2320      	movmi	r3, #32
 80114d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114da:	0713      	lsls	r3, r2, #28
 80114dc:	bf44      	itt	mi
 80114de:	232b      	movmi	r3, #43	; 0x2b
 80114e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114e4:	f89a 3000 	ldrb.w	r3, [sl]
 80114e8:	2b2a      	cmp	r3, #42	; 0x2a
 80114ea:	d015      	beq.n	8011518 <_vfiprintf_r+0x13c>
 80114ec:	9a07      	ldr	r2, [sp, #28]
 80114ee:	4654      	mov	r4, sl
 80114f0:	2000      	movs	r0, #0
 80114f2:	f04f 0c0a 	mov.w	ip, #10
 80114f6:	4621      	mov	r1, r4
 80114f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114fc:	3b30      	subs	r3, #48	; 0x30
 80114fe:	2b09      	cmp	r3, #9
 8011500:	d94e      	bls.n	80115a0 <_vfiprintf_r+0x1c4>
 8011502:	b1b0      	cbz	r0, 8011532 <_vfiprintf_r+0x156>
 8011504:	9207      	str	r2, [sp, #28]
 8011506:	e014      	b.n	8011532 <_vfiprintf_r+0x156>
 8011508:	eba0 0308 	sub.w	r3, r0, r8
 801150c:	fa09 f303 	lsl.w	r3, r9, r3
 8011510:	4313      	orrs	r3, r2
 8011512:	9304      	str	r3, [sp, #16]
 8011514:	46a2      	mov	sl, r4
 8011516:	e7d2      	b.n	80114be <_vfiprintf_r+0xe2>
 8011518:	9b03      	ldr	r3, [sp, #12]
 801151a:	1d19      	adds	r1, r3, #4
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	9103      	str	r1, [sp, #12]
 8011520:	2b00      	cmp	r3, #0
 8011522:	bfbb      	ittet	lt
 8011524:	425b      	neglt	r3, r3
 8011526:	f042 0202 	orrlt.w	r2, r2, #2
 801152a:	9307      	strge	r3, [sp, #28]
 801152c:	9307      	strlt	r3, [sp, #28]
 801152e:	bfb8      	it	lt
 8011530:	9204      	strlt	r2, [sp, #16]
 8011532:	7823      	ldrb	r3, [r4, #0]
 8011534:	2b2e      	cmp	r3, #46	; 0x2e
 8011536:	d10c      	bne.n	8011552 <_vfiprintf_r+0x176>
 8011538:	7863      	ldrb	r3, [r4, #1]
 801153a:	2b2a      	cmp	r3, #42	; 0x2a
 801153c:	d135      	bne.n	80115aa <_vfiprintf_r+0x1ce>
 801153e:	9b03      	ldr	r3, [sp, #12]
 8011540:	1d1a      	adds	r2, r3, #4
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	9203      	str	r2, [sp, #12]
 8011546:	2b00      	cmp	r3, #0
 8011548:	bfb8      	it	lt
 801154a:	f04f 33ff 	movlt.w	r3, #4294967295
 801154e:	3402      	adds	r4, #2
 8011550:	9305      	str	r3, [sp, #20]
 8011552:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011638 <_vfiprintf_r+0x25c>
 8011556:	7821      	ldrb	r1, [r4, #0]
 8011558:	2203      	movs	r2, #3
 801155a:	4650      	mov	r0, sl
 801155c:	f7ee fe48 	bl	80001f0 <memchr>
 8011560:	b140      	cbz	r0, 8011574 <_vfiprintf_r+0x198>
 8011562:	2340      	movs	r3, #64	; 0x40
 8011564:	eba0 000a 	sub.w	r0, r0, sl
 8011568:	fa03 f000 	lsl.w	r0, r3, r0
 801156c:	9b04      	ldr	r3, [sp, #16]
 801156e:	4303      	orrs	r3, r0
 8011570:	3401      	adds	r4, #1
 8011572:	9304      	str	r3, [sp, #16]
 8011574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011578:	482c      	ldr	r0, [pc, #176]	; (801162c <_vfiprintf_r+0x250>)
 801157a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801157e:	2206      	movs	r2, #6
 8011580:	f7ee fe36 	bl	80001f0 <memchr>
 8011584:	2800      	cmp	r0, #0
 8011586:	d03f      	beq.n	8011608 <_vfiprintf_r+0x22c>
 8011588:	4b29      	ldr	r3, [pc, #164]	; (8011630 <_vfiprintf_r+0x254>)
 801158a:	bb1b      	cbnz	r3, 80115d4 <_vfiprintf_r+0x1f8>
 801158c:	9b03      	ldr	r3, [sp, #12]
 801158e:	3307      	adds	r3, #7
 8011590:	f023 0307 	bic.w	r3, r3, #7
 8011594:	3308      	adds	r3, #8
 8011596:	9303      	str	r3, [sp, #12]
 8011598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801159a:	443b      	add	r3, r7
 801159c:	9309      	str	r3, [sp, #36]	; 0x24
 801159e:	e767      	b.n	8011470 <_vfiprintf_r+0x94>
 80115a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80115a4:	460c      	mov	r4, r1
 80115a6:	2001      	movs	r0, #1
 80115a8:	e7a5      	b.n	80114f6 <_vfiprintf_r+0x11a>
 80115aa:	2300      	movs	r3, #0
 80115ac:	3401      	adds	r4, #1
 80115ae:	9305      	str	r3, [sp, #20]
 80115b0:	4619      	mov	r1, r3
 80115b2:	f04f 0c0a 	mov.w	ip, #10
 80115b6:	4620      	mov	r0, r4
 80115b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80115bc:	3a30      	subs	r2, #48	; 0x30
 80115be:	2a09      	cmp	r2, #9
 80115c0:	d903      	bls.n	80115ca <_vfiprintf_r+0x1ee>
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d0c5      	beq.n	8011552 <_vfiprintf_r+0x176>
 80115c6:	9105      	str	r1, [sp, #20]
 80115c8:	e7c3      	b.n	8011552 <_vfiprintf_r+0x176>
 80115ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80115ce:	4604      	mov	r4, r0
 80115d0:	2301      	movs	r3, #1
 80115d2:	e7f0      	b.n	80115b6 <_vfiprintf_r+0x1da>
 80115d4:	ab03      	add	r3, sp, #12
 80115d6:	9300      	str	r3, [sp, #0]
 80115d8:	462a      	mov	r2, r5
 80115da:	4b16      	ldr	r3, [pc, #88]	; (8011634 <_vfiprintf_r+0x258>)
 80115dc:	a904      	add	r1, sp, #16
 80115de:	4630      	mov	r0, r6
 80115e0:	f7fd ff46 	bl	800f470 <_printf_float>
 80115e4:	4607      	mov	r7, r0
 80115e6:	1c78      	adds	r0, r7, #1
 80115e8:	d1d6      	bne.n	8011598 <_vfiprintf_r+0x1bc>
 80115ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115ec:	07d9      	lsls	r1, r3, #31
 80115ee:	d405      	bmi.n	80115fc <_vfiprintf_r+0x220>
 80115f0:	89ab      	ldrh	r3, [r5, #12]
 80115f2:	059a      	lsls	r2, r3, #22
 80115f4:	d402      	bmi.n	80115fc <_vfiprintf_r+0x220>
 80115f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115f8:	f7ff faf0 	bl	8010bdc <__retarget_lock_release_recursive>
 80115fc:	89ab      	ldrh	r3, [r5, #12]
 80115fe:	065b      	lsls	r3, r3, #25
 8011600:	f53f af12 	bmi.w	8011428 <_vfiprintf_r+0x4c>
 8011604:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011606:	e711      	b.n	801142c <_vfiprintf_r+0x50>
 8011608:	ab03      	add	r3, sp, #12
 801160a:	9300      	str	r3, [sp, #0]
 801160c:	462a      	mov	r2, r5
 801160e:	4b09      	ldr	r3, [pc, #36]	; (8011634 <_vfiprintf_r+0x258>)
 8011610:	a904      	add	r1, sp, #16
 8011612:	4630      	mov	r0, r6
 8011614:	f7fe f9d0 	bl	800f9b8 <_printf_i>
 8011618:	e7e4      	b.n	80115e4 <_vfiprintf_r+0x208>
 801161a:	bf00      	nop
 801161c:	08012040 	.word	0x08012040
 8011620:	08012060 	.word	0x08012060
 8011624:	08012020 	.word	0x08012020
 8011628:	080121dc 	.word	0x080121dc
 801162c:	080121e6 	.word	0x080121e6
 8011630:	0800f471 	.word	0x0800f471
 8011634:	080113b9 	.word	0x080113b9
 8011638:	080121e2 	.word	0x080121e2

0801163c <__sread>:
 801163c:	b510      	push	{r4, lr}
 801163e:	460c      	mov	r4, r1
 8011640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011644:	f000 faa4 	bl	8011b90 <_read_r>
 8011648:	2800      	cmp	r0, #0
 801164a:	bfab      	itete	ge
 801164c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801164e:	89a3      	ldrhlt	r3, [r4, #12]
 8011650:	181b      	addge	r3, r3, r0
 8011652:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011656:	bfac      	ite	ge
 8011658:	6563      	strge	r3, [r4, #84]	; 0x54
 801165a:	81a3      	strhlt	r3, [r4, #12]
 801165c:	bd10      	pop	{r4, pc}

0801165e <__swrite>:
 801165e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011662:	461f      	mov	r7, r3
 8011664:	898b      	ldrh	r3, [r1, #12]
 8011666:	05db      	lsls	r3, r3, #23
 8011668:	4605      	mov	r5, r0
 801166a:	460c      	mov	r4, r1
 801166c:	4616      	mov	r6, r2
 801166e:	d505      	bpl.n	801167c <__swrite+0x1e>
 8011670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011674:	2302      	movs	r3, #2
 8011676:	2200      	movs	r2, #0
 8011678:	f000 f9f8 	bl	8011a6c <_lseek_r>
 801167c:	89a3      	ldrh	r3, [r4, #12]
 801167e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011686:	81a3      	strh	r3, [r4, #12]
 8011688:	4632      	mov	r2, r6
 801168a:	463b      	mov	r3, r7
 801168c:	4628      	mov	r0, r5
 801168e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011692:	f000 b869 	b.w	8011768 <_write_r>

08011696 <__sseek>:
 8011696:	b510      	push	{r4, lr}
 8011698:	460c      	mov	r4, r1
 801169a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801169e:	f000 f9e5 	bl	8011a6c <_lseek_r>
 80116a2:	1c43      	adds	r3, r0, #1
 80116a4:	89a3      	ldrh	r3, [r4, #12]
 80116a6:	bf15      	itete	ne
 80116a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80116aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80116ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80116b2:	81a3      	strheq	r3, [r4, #12]
 80116b4:	bf18      	it	ne
 80116b6:	81a3      	strhne	r3, [r4, #12]
 80116b8:	bd10      	pop	{r4, pc}

080116ba <__sclose>:
 80116ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116be:	f000 b8f1 	b.w	80118a4 <_close_r>
	...

080116c4 <__swbuf_r>:
 80116c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116c6:	460e      	mov	r6, r1
 80116c8:	4614      	mov	r4, r2
 80116ca:	4605      	mov	r5, r0
 80116cc:	b118      	cbz	r0, 80116d6 <__swbuf_r+0x12>
 80116ce:	6983      	ldr	r3, [r0, #24]
 80116d0:	b90b      	cbnz	r3, 80116d6 <__swbuf_r+0x12>
 80116d2:	f7ff f9df 	bl	8010a94 <__sinit>
 80116d6:	4b21      	ldr	r3, [pc, #132]	; (801175c <__swbuf_r+0x98>)
 80116d8:	429c      	cmp	r4, r3
 80116da:	d12b      	bne.n	8011734 <__swbuf_r+0x70>
 80116dc:	686c      	ldr	r4, [r5, #4]
 80116de:	69a3      	ldr	r3, [r4, #24]
 80116e0:	60a3      	str	r3, [r4, #8]
 80116e2:	89a3      	ldrh	r3, [r4, #12]
 80116e4:	071a      	lsls	r2, r3, #28
 80116e6:	d52f      	bpl.n	8011748 <__swbuf_r+0x84>
 80116e8:	6923      	ldr	r3, [r4, #16]
 80116ea:	b36b      	cbz	r3, 8011748 <__swbuf_r+0x84>
 80116ec:	6923      	ldr	r3, [r4, #16]
 80116ee:	6820      	ldr	r0, [r4, #0]
 80116f0:	1ac0      	subs	r0, r0, r3
 80116f2:	6963      	ldr	r3, [r4, #20]
 80116f4:	b2f6      	uxtb	r6, r6
 80116f6:	4283      	cmp	r3, r0
 80116f8:	4637      	mov	r7, r6
 80116fa:	dc04      	bgt.n	8011706 <__swbuf_r+0x42>
 80116fc:	4621      	mov	r1, r4
 80116fe:	4628      	mov	r0, r5
 8011700:	f000 f966 	bl	80119d0 <_fflush_r>
 8011704:	bb30      	cbnz	r0, 8011754 <__swbuf_r+0x90>
 8011706:	68a3      	ldr	r3, [r4, #8]
 8011708:	3b01      	subs	r3, #1
 801170a:	60a3      	str	r3, [r4, #8]
 801170c:	6823      	ldr	r3, [r4, #0]
 801170e:	1c5a      	adds	r2, r3, #1
 8011710:	6022      	str	r2, [r4, #0]
 8011712:	701e      	strb	r6, [r3, #0]
 8011714:	6963      	ldr	r3, [r4, #20]
 8011716:	3001      	adds	r0, #1
 8011718:	4283      	cmp	r3, r0
 801171a:	d004      	beq.n	8011726 <__swbuf_r+0x62>
 801171c:	89a3      	ldrh	r3, [r4, #12]
 801171e:	07db      	lsls	r3, r3, #31
 8011720:	d506      	bpl.n	8011730 <__swbuf_r+0x6c>
 8011722:	2e0a      	cmp	r6, #10
 8011724:	d104      	bne.n	8011730 <__swbuf_r+0x6c>
 8011726:	4621      	mov	r1, r4
 8011728:	4628      	mov	r0, r5
 801172a:	f000 f951 	bl	80119d0 <_fflush_r>
 801172e:	b988      	cbnz	r0, 8011754 <__swbuf_r+0x90>
 8011730:	4638      	mov	r0, r7
 8011732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011734:	4b0a      	ldr	r3, [pc, #40]	; (8011760 <__swbuf_r+0x9c>)
 8011736:	429c      	cmp	r4, r3
 8011738:	d101      	bne.n	801173e <__swbuf_r+0x7a>
 801173a:	68ac      	ldr	r4, [r5, #8]
 801173c:	e7cf      	b.n	80116de <__swbuf_r+0x1a>
 801173e:	4b09      	ldr	r3, [pc, #36]	; (8011764 <__swbuf_r+0xa0>)
 8011740:	429c      	cmp	r4, r3
 8011742:	bf08      	it	eq
 8011744:	68ec      	ldreq	r4, [r5, #12]
 8011746:	e7ca      	b.n	80116de <__swbuf_r+0x1a>
 8011748:	4621      	mov	r1, r4
 801174a:	4628      	mov	r0, r5
 801174c:	f000 f81e 	bl	801178c <__swsetup_r>
 8011750:	2800      	cmp	r0, #0
 8011752:	d0cb      	beq.n	80116ec <__swbuf_r+0x28>
 8011754:	f04f 37ff 	mov.w	r7, #4294967295
 8011758:	e7ea      	b.n	8011730 <__swbuf_r+0x6c>
 801175a:	bf00      	nop
 801175c:	08012040 	.word	0x08012040
 8011760:	08012060 	.word	0x08012060
 8011764:	08012020 	.word	0x08012020

08011768 <_write_r>:
 8011768:	b538      	push	{r3, r4, r5, lr}
 801176a:	4d07      	ldr	r5, [pc, #28]	; (8011788 <_write_r+0x20>)
 801176c:	4604      	mov	r4, r0
 801176e:	4608      	mov	r0, r1
 8011770:	4611      	mov	r1, r2
 8011772:	2200      	movs	r2, #0
 8011774:	602a      	str	r2, [r5, #0]
 8011776:	461a      	mov	r2, r3
 8011778:	f7f3 ff0d 	bl	8005596 <_write>
 801177c:	1c43      	adds	r3, r0, #1
 801177e:	d102      	bne.n	8011786 <_write_r+0x1e>
 8011780:	682b      	ldr	r3, [r5, #0]
 8011782:	b103      	cbz	r3, 8011786 <_write_r+0x1e>
 8011784:	6023      	str	r3, [r4, #0]
 8011786:	bd38      	pop	{r3, r4, r5, pc}
 8011788:	200016e8 	.word	0x200016e8

0801178c <__swsetup_r>:
 801178c:	4b32      	ldr	r3, [pc, #200]	; (8011858 <__swsetup_r+0xcc>)
 801178e:	b570      	push	{r4, r5, r6, lr}
 8011790:	681d      	ldr	r5, [r3, #0]
 8011792:	4606      	mov	r6, r0
 8011794:	460c      	mov	r4, r1
 8011796:	b125      	cbz	r5, 80117a2 <__swsetup_r+0x16>
 8011798:	69ab      	ldr	r3, [r5, #24]
 801179a:	b913      	cbnz	r3, 80117a2 <__swsetup_r+0x16>
 801179c:	4628      	mov	r0, r5
 801179e:	f7ff f979 	bl	8010a94 <__sinit>
 80117a2:	4b2e      	ldr	r3, [pc, #184]	; (801185c <__swsetup_r+0xd0>)
 80117a4:	429c      	cmp	r4, r3
 80117a6:	d10f      	bne.n	80117c8 <__swsetup_r+0x3c>
 80117a8:	686c      	ldr	r4, [r5, #4]
 80117aa:	89a3      	ldrh	r3, [r4, #12]
 80117ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80117b0:	0719      	lsls	r1, r3, #28
 80117b2:	d42c      	bmi.n	801180e <__swsetup_r+0x82>
 80117b4:	06dd      	lsls	r5, r3, #27
 80117b6:	d411      	bmi.n	80117dc <__swsetup_r+0x50>
 80117b8:	2309      	movs	r3, #9
 80117ba:	6033      	str	r3, [r6, #0]
 80117bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80117c0:	81a3      	strh	r3, [r4, #12]
 80117c2:	f04f 30ff 	mov.w	r0, #4294967295
 80117c6:	e03e      	b.n	8011846 <__swsetup_r+0xba>
 80117c8:	4b25      	ldr	r3, [pc, #148]	; (8011860 <__swsetup_r+0xd4>)
 80117ca:	429c      	cmp	r4, r3
 80117cc:	d101      	bne.n	80117d2 <__swsetup_r+0x46>
 80117ce:	68ac      	ldr	r4, [r5, #8]
 80117d0:	e7eb      	b.n	80117aa <__swsetup_r+0x1e>
 80117d2:	4b24      	ldr	r3, [pc, #144]	; (8011864 <__swsetup_r+0xd8>)
 80117d4:	429c      	cmp	r4, r3
 80117d6:	bf08      	it	eq
 80117d8:	68ec      	ldreq	r4, [r5, #12]
 80117da:	e7e6      	b.n	80117aa <__swsetup_r+0x1e>
 80117dc:	0758      	lsls	r0, r3, #29
 80117de:	d512      	bpl.n	8011806 <__swsetup_r+0x7a>
 80117e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80117e2:	b141      	cbz	r1, 80117f6 <__swsetup_r+0x6a>
 80117e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80117e8:	4299      	cmp	r1, r3
 80117ea:	d002      	beq.n	80117f2 <__swsetup_r+0x66>
 80117ec:	4630      	mov	r0, r6
 80117ee:	f7fd fcbf 	bl	800f170 <_free_r>
 80117f2:	2300      	movs	r3, #0
 80117f4:	6363      	str	r3, [r4, #52]	; 0x34
 80117f6:	89a3      	ldrh	r3, [r4, #12]
 80117f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80117fc:	81a3      	strh	r3, [r4, #12]
 80117fe:	2300      	movs	r3, #0
 8011800:	6063      	str	r3, [r4, #4]
 8011802:	6923      	ldr	r3, [r4, #16]
 8011804:	6023      	str	r3, [r4, #0]
 8011806:	89a3      	ldrh	r3, [r4, #12]
 8011808:	f043 0308 	orr.w	r3, r3, #8
 801180c:	81a3      	strh	r3, [r4, #12]
 801180e:	6923      	ldr	r3, [r4, #16]
 8011810:	b94b      	cbnz	r3, 8011826 <__swsetup_r+0x9a>
 8011812:	89a3      	ldrh	r3, [r4, #12]
 8011814:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801181c:	d003      	beq.n	8011826 <__swsetup_r+0x9a>
 801181e:	4621      	mov	r1, r4
 8011820:	4630      	mov	r0, r6
 8011822:	f000 f95b 	bl	8011adc <__smakebuf_r>
 8011826:	89a0      	ldrh	r0, [r4, #12]
 8011828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801182c:	f010 0301 	ands.w	r3, r0, #1
 8011830:	d00a      	beq.n	8011848 <__swsetup_r+0xbc>
 8011832:	2300      	movs	r3, #0
 8011834:	60a3      	str	r3, [r4, #8]
 8011836:	6963      	ldr	r3, [r4, #20]
 8011838:	425b      	negs	r3, r3
 801183a:	61a3      	str	r3, [r4, #24]
 801183c:	6923      	ldr	r3, [r4, #16]
 801183e:	b943      	cbnz	r3, 8011852 <__swsetup_r+0xc6>
 8011840:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011844:	d1ba      	bne.n	80117bc <__swsetup_r+0x30>
 8011846:	bd70      	pop	{r4, r5, r6, pc}
 8011848:	0781      	lsls	r1, r0, #30
 801184a:	bf58      	it	pl
 801184c:	6963      	ldrpl	r3, [r4, #20]
 801184e:	60a3      	str	r3, [r4, #8]
 8011850:	e7f4      	b.n	801183c <__swsetup_r+0xb0>
 8011852:	2000      	movs	r0, #0
 8011854:	e7f7      	b.n	8011846 <__swsetup_r+0xba>
 8011856:	bf00      	nop
 8011858:	20000048 	.word	0x20000048
 801185c:	08012040 	.word	0x08012040
 8011860:	08012060 	.word	0x08012060
 8011864:	08012020 	.word	0x08012020

08011868 <__assert_func>:
 8011868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801186a:	4614      	mov	r4, r2
 801186c:	461a      	mov	r2, r3
 801186e:	4b09      	ldr	r3, [pc, #36]	; (8011894 <__assert_func+0x2c>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	4605      	mov	r5, r0
 8011874:	68d8      	ldr	r0, [r3, #12]
 8011876:	b14c      	cbz	r4, 801188c <__assert_func+0x24>
 8011878:	4b07      	ldr	r3, [pc, #28]	; (8011898 <__assert_func+0x30>)
 801187a:	9100      	str	r1, [sp, #0]
 801187c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011880:	4906      	ldr	r1, [pc, #24]	; (801189c <__assert_func+0x34>)
 8011882:	462b      	mov	r3, r5
 8011884:	f000 f8e0 	bl	8011a48 <fiprintf>
 8011888:	f7fd fc1a 	bl	800f0c0 <abort>
 801188c:	4b04      	ldr	r3, [pc, #16]	; (80118a0 <__assert_func+0x38>)
 801188e:	461c      	mov	r4, r3
 8011890:	e7f3      	b.n	801187a <__assert_func+0x12>
 8011892:	bf00      	nop
 8011894:	20000048 	.word	0x20000048
 8011898:	080121ed 	.word	0x080121ed
 801189c:	080121fa 	.word	0x080121fa
 80118a0:	08012228 	.word	0x08012228

080118a4 <_close_r>:
 80118a4:	b538      	push	{r3, r4, r5, lr}
 80118a6:	4d06      	ldr	r5, [pc, #24]	; (80118c0 <_close_r+0x1c>)
 80118a8:	2300      	movs	r3, #0
 80118aa:	4604      	mov	r4, r0
 80118ac:	4608      	mov	r0, r1
 80118ae:	602b      	str	r3, [r5, #0]
 80118b0:	f7f3 fe8d 	bl	80055ce <_close>
 80118b4:	1c43      	adds	r3, r0, #1
 80118b6:	d102      	bne.n	80118be <_close_r+0x1a>
 80118b8:	682b      	ldr	r3, [r5, #0]
 80118ba:	b103      	cbz	r3, 80118be <_close_r+0x1a>
 80118bc:	6023      	str	r3, [r4, #0]
 80118be:	bd38      	pop	{r3, r4, r5, pc}
 80118c0:	200016e8 	.word	0x200016e8

080118c4 <__sflush_r>:
 80118c4:	898a      	ldrh	r2, [r1, #12]
 80118c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118ca:	4605      	mov	r5, r0
 80118cc:	0710      	lsls	r0, r2, #28
 80118ce:	460c      	mov	r4, r1
 80118d0:	d458      	bmi.n	8011984 <__sflush_r+0xc0>
 80118d2:	684b      	ldr	r3, [r1, #4]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	dc05      	bgt.n	80118e4 <__sflush_r+0x20>
 80118d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80118da:	2b00      	cmp	r3, #0
 80118dc:	dc02      	bgt.n	80118e4 <__sflush_r+0x20>
 80118de:	2000      	movs	r0, #0
 80118e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80118e6:	2e00      	cmp	r6, #0
 80118e8:	d0f9      	beq.n	80118de <__sflush_r+0x1a>
 80118ea:	2300      	movs	r3, #0
 80118ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80118f0:	682f      	ldr	r7, [r5, #0]
 80118f2:	602b      	str	r3, [r5, #0]
 80118f4:	d032      	beq.n	801195c <__sflush_r+0x98>
 80118f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80118f8:	89a3      	ldrh	r3, [r4, #12]
 80118fa:	075a      	lsls	r2, r3, #29
 80118fc:	d505      	bpl.n	801190a <__sflush_r+0x46>
 80118fe:	6863      	ldr	r3, [r4, #4]
 8011900:	1ac0      	subs	r0, r0, r3
 8011902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011904:	b10b      	cbz	r3, 801190a <__sflush_r+0x46>
 8011906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011908:	1ac0      	subs	r0, r0, r3
 801190a:	2300      	movs	r3, #0
 801190c:	4602      	mov	r2, r0
 801190e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011910:	6a21      	ldr	r1, [r4, #32]
 8011912:	4628      	mov	r0, r5
 8011914:	47b0      	blx	r6
 8011916:	1c43      	adds	r3, r0, #1
 8011918:	89a3      	ldrh	r3, [r4, #12]
 801191a:	d106      	bne.n	801192a <__sflush_r+0x66>
 801191c:	6829      	ldr	r1, [r5, #0]
 801191e:	291d      	cmp	r1, #29
 8011920:	d82c      	bhi.n	801197c <__sflush_r+0xb8>
 8011922:	4a2a      	ldr	r2, [pc, #168]	; (80119cc <__sflush_r+0x108>)
 8011924:	40ca      	lsrs	r2, r1
 8011926:	07d6      	lsls	r6, r2, #31
 8011928:	d528      	bpl.n	801197c <__sflush_r+0xb8>
 801192a:	2200      	movs	r2, #0
 801192c:	6062      	str	r2, [r4, #4]
 801192e:	04d9      	lsls	r1, r3, #19
 8011930:	6922      	ldr	r2, [r4, #16]
 8011932:	6022      	str	r2, [r4, #0]
 8011934:	d504      	bpl.n	8011940 <__sflush_r+0x7c>
 8011936:	1c42      	adds	r2, r0, #1
 8011938:	d101      	bne.n	801193e <__sflush_r+0x7a>
 801193a:	682b      	ldr	r3, [r5, #0]
 801193c:	b903      	cbnz	r3, 8011940 <__sflush_r+0x7c>
 801193e:	6560      	str	r0, [r4, #84]	; 0x54
 8011940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011942:	602f      	str	r7, [r5, #0]
 8011944:	2900      	cmp	r1, #0
 8011946:	d0ca      	beq.n	80118de <__sflush_r+0x1a>
 8011948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801194c:	4299      	cmp	r1, r3
 801194e:	d002      	beq.n	8011956 <__sflush_r+0x92>
 8011950:	4628      	mov	r0, r5
 8011952:	f7fd fc0d 	bl	800f170 <_free_r>
 8011956:	2000      	movs	r0, #0
 8011958:	6360      	str	r0, [r4, #52]	; 0x34
 801195a:	e7c1      	b.n	80118e0 <__sflush_r+0x1c>
 801195c:	6a21      	ldr	r1, [r4, #32]
 801195e:	2301      	movs	r3, #1
 8011960:	4628      	mov	r0, r5
 8011962:	47b0      	blx	r6
 8011964:	1c41      	adds	r1, r0, #1
 8011966:	d1c7      	bne.n	80118f8 <__sflush_r+0x34>
 8011968:	682b      	ldr	r3, [r5, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d0c4      	beq.n	80118f8 <__sflush_r+0x34>
 801196e:	2b1d      	cmp	r3, #29
 8011970:	d001      	beq.n	8011976 <__sflush_r+0xb2>
 8011972:	2b16      	cmp	r3, #22
 8011974:	d101      	bne.n	801197a <__sflush_r+0xb6>
 8011976:	602f      	str	r7, [r5, #0]
 8011978:	e7b1      	b.n	80118de <__sflush_r+0x1a>
 801197a:	89a3      	ldrh	r3, [r4, #12]
 801197c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011980:	81a3      	strh	r3, [r4, #12]
 8011982:	e7ad      	b.n	80118e0 <__sflush_r+0x1c>
 8011984:	690f      	ldr	r7, [r1, #16]
 8011986:	2f00      	cmp	r7, #0
 8011988:	d0a9      	beq.n	80118de <__sflush_r+0x1a>
 801198a:	0793      	lsls	r3, r2, #30
 801198c:	680e      	ldr	r6, [r1, #0]
 801198e:	bf08      	it	eq
 8011990:	694b      	ldreq	r3, [r1, #20]
 8011992:	600f      	str	r7, [r1, #0]
 8011994:	bf18      	it	ne
 8011996:	2300      	movne	r3, #0
 8011998:	eba6 0807 	sub.w	r8, r6, r7
 801199c:	608b      	str	r3, [r1, #8]
 801199e:	f1b8 0f00 	cmp.w	r8, #0
 80119a2:	dd9c      	ble.n	80118de <__sflush_r+0x1a>
 80119a4:	6a21      	ldr	r1, [r4, #32]
 80119a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80119a8:	4643      	mov	r3, r8
 80119aa:	463a      	mov	r2, r7
 80119ac:	4628      	mov	r0, r5
 80119ae:	47b0      	blx	r6
 80119b0:	2800      	cmp	r0, #0
 80119b2:	dc06      	bgt.n	80119c2 <__sflush_r+0xfe>
 80119b4:	89a3      	ldrh	r3, [r4, #12]
 80119b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119ba:	81a3      	strh	r3, [r4, #12]
 80119bc:	f04f 30ff 	mov.w	r0, #4294967295
 80119c0:	e78e      	b.n	80118e0 <__sflush_r+0x1c>
 80119c2:	4407      	add	r7, r0
 80119c4:	eba8 0800 	sub.w	r8, r8, r0
 80119c8:	e7e9      	b.n	801199e <__sflush_r+0xda>
 80119ca:	bf00      	nop
 80119cc:	20400001 	.word	0x20400001

080119d0 <_fflush_r>:
 80119d0:	b538      	push	{r3, r4, r5, lr}
 80119d2:	690b      	ldr	r3, [r1, #16]
 80119d4:	4605      	mov	r5, r0
 80119d6:	460c      	mov	r4, r1
 80119d8:	b913      	cbnz	r3, 80119e0 <_fflush_r+0x10>
 80119da:	2500      	movs	r5, #0
 80119dc:	4628      	mov	r0, r5
 80119de:	bd38      	pop	{r3, r4, r5, pc}
 80119e0:	b118      	cbz	r0, 80119ea <_fflush_r+0x1a>
 80119e2:	6983      	ldr	r3, [r0, #24]
 80119e4:	b90b      	cbnz	r3, 80119ea <_fflush_r+0x1a>
 80119e6:	f7ff f855 	bl	8010a94 <__sinit>
 80119ea:	4b14      	ldr	r3, [pc, #80]	; (8011a3c <_fflush_r+0x6c>)
 80119ec:	429c      	cmp	r4, r3
 80119ee:	d11b      	bne.n	8011a28 <_fflush_r+0x58>
 80119f0:	686c      	ldr	r4, [r5, #4]
 80119f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d0ef      	beq.n	80119da <_fflush_r+0xa>
 80119fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80119fc:	07d0      	lsls	r0, r2, #31
 80119fe:	d404      	bmi.n	8011a0a <_fflush_r+0x3a>
 8011a00:	0599      	lsls	r1, r3, #22
 8011a02:	d402      	bmi.n	8011a0a <_fflush_r+0x3a>
 8011a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a06:	f7ff f8e8 	bl	8010bda <__retarget_lock_acquire_recursive>
 8011a0a:	4628      	mov	r0, r5
 8011a0c:	4621      	mov	r1, r4
 8011a0e:	f7ff ff59 	bl	80118c4 <__sflush_r>
 8011a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a14:	07da      	lsls	r2, r3, #31
 8011a16:	4605      	mov	r5, r0
 8011a18:	d4e0      	bmi.n	80119dc <_fflush_r+0xc>
 8011a1a:	89a3      	ldrh	r3, [r4, #12]
 8011a1c:	059b      	lsls	r3, r3, #22
 8011a1e:	d4dd      	bmi.n	80119dc <_fflush_r+0xc>
 8011a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a22:	f7ff f8db 	bl	8010bdc <__retarget_lock_release_recursive>
 8011a26:	e7d9      	b.n	80119dc <_fflush_r+0xc>
 8011a28:	4b05      	ldr	r3, [pc, #20]	; (8011a40 <_fflush_r+0x70>)
 8011a2a:	429c      	cmp	r4, r3
 8011a2c:	d101      	bne.n	8011a32 <_fflush_r+0x62>
 8011a2e:	68ac      	ldr	r4, [r5, #8]
 8011a30:	e7df      	b.n	80119f2 <_fflush_r+0x22>
 8011a32:	4b04      	ldr	r3, [pc, #16]	; (8011a44 <_fflush_r+0x74>)
 8011a34:	429c      	cmp	r4, r3
 8011a36:	bf08      	it	eq
 8011a38:	68ec      	ldreq	r4, [r5, #12]
 8011a3a:	e7da      	b.n	80119f2 <_fflush_r+0x22>
 8011a3c:	08012040 	.word	0x08012040
 8011a40:	08012060 	.word	0x08012060
 8011a44:	08012020 	.word	0x08012020

08011a48 <fiprintf>:
 8011a48:	b40e      	push	{r1, r2, r3}
 8011a4a:	b503      	push	{r0, r1, lr}
 8011a4c:	4601      	mov	r1, r0
 8011a4e:	ab03      	add	r3, sp, #12
 8011a50:	4805      	ldr	r0, [pc, #20]	; (8011a68 <fiprintf+0x20>)
 8011a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a56:	6800      	ldr	r0, [r0, #0]
 8011a58:	9301      	str	r3, [sp, #4]
 8011a5a:	f7ff fcbf 	bl	80113dc <_vfiprintf_r>
 8011a5e:	b002      	add	sp, #8
 8011a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a64:	b003      	add	sp, #12
 8011a66:	4770      	bx	lr
 8011a68:	20000048 	.word	0x20000048

08011a6c <_lseek_r>:
 8011a6c:	b538      	push	{r3, r4, r5, lr}
 8011a6e:	4d07      	ldr	r5, [pc, #28]	; (8011a8c <_lseek_r+0x20>)
 8011a70:	4604      	mov	r4, r0
 8011a72:	4608      	mov	r0, r1
 8011a74:	4611      	mov	r1, r2
 8011a76:	2200      	movs	r2, #0
 8011a78:	602a      	str	r2, [r5, #0]
 8011a7a:	461a      	mov	r2, r3
 8011a7c:	f7f3 fdce 	bl	800561c <_lseek>
 8011a80:	1c43      	adds	r3, r0, #1
 8011a82:	d102      	bne.n	8011a8a <_lseek_r+0x1e>
 8011a84:	682b      	ldr	r3, [r5, #0]
 8011a86:	b103      	cbz	r3, 8011a8a <_lseek_r+0x1e>
 8011a88:	6023      	str	r3, [r4, #0]
 8011a8a:	bd38      	pop	{r3, r4, r5, pc}
 8011a8c:	200016e8 	.word	0x200016e8

08011a90 <__swhatbuf_r>:
 8011a90:	b570      	push	{r4, r5, r6, lr}
 8011a92:	460e      	mov	r6, r1
 8011a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a98:	2900      	cmp	r1, #0
 8011a9a:	b096      	sub	sp, #88	; 0x58
 8011a9c:	4614      	mov	r4, r2
 8011a9e:	461d      	mov	r5, r3
 8011aa0:	da08      	bge.n	8011ab4 <__swhatbuf_r+0x24>
 8011aa2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	602a      	str	r2, [r5, #0]
 8011aaa:	061a      	lsls	r2, r3, #24
 8011aac:	d410      	bmi.n	8011ad0 <__swhatbuf_r+0x40>
 8011aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ab2:	e00e      	b.n	8011ad2 <__swhatbuf_r+0x42>
 8011ab4:	466a      	mov	r2, sp
 8011ab6:	f000 f88b 	bl	8011bd0 <_fstat_r>
 8011aba:	2800      	cmp	r0, #0
 8011abc:	dbf1      	blt.n	8011aa2 <__swhatbuf_r+0x12>
 8011abe:	9a01      	ldr	r2, [sp, #4]
 8011ac0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011ac4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011ac8:	425a      	negs	r2, r3
 8011aca:	415a      	adcs	r2, r3
 8011acc:	602a      	str	r2, [r5, #0]
 8011ace:	e7ee      	b.n	8011aae <__swhatbuf_r+0x1e>
 8011ad0:	2340      	movs	r3, #64	; 0x40
 8011ad2:	2000      	movs	r0, #0
 8011ad4:	6023      	str	r3, [r4, #0]
 8011ad6:	b016      	add	sp, #88	; 0x58
 8011ad8:	bd70      	pop	{r4, r5, r6, pc}
	...

08011adc <__smakebuf_r>:
 8011adc:	898b      	ldrh	r3, [r1, #12]
 8011ade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ae0:	079d      	lsls	r5, r3, #30
 8011ae2:	4606      	mov	r6, r0
 8011ae4:	460c      	mov	r4, r1
 8011ae6:	d507      	bpl.n	8011af8 <__smakebuf_r+0x1c>
 8011ae8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011aec:	6023      	str	r3, [r4, #0]
 8011aee:	6123      	str	r3, [r4, #16]
 8011af0:	2301      	movs	r3, #1
 8011af2:	6163      	str	r3, [r4, #20]
 8011af4:	b002      	add	sp, #8
 8011af6:	bd70      	pop	{r4, r5, r6, pc}
 8011af8:	ab01      	add	r3, sp, #4
 8011afa:	466a      	mov	r2, sp
 8011afc:	f7ff ffc8 	bl	8011a90 <__swhatbuf_r>
 8011b00:	9900      	ldr	r1, [sp, #0]
 8011b02:	4605      	mov	r5, r0
 8011b04:	4630      	mov	r0, r6
 8011b06:	f7fd fb9f 	bl	800f248 <_malloc_r>
 8011b0a:	b948      	cbnz	r0, 8011b20 <__smakebuf_r+0x44>
 8011b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b10:	059a      	lsls	r2, r3, #22
 8011b12:	d4ef      	bmi.n	8011af4 <__smakebuf_r+0x18>
 8011b14:	f023 0303 	bic.w	r3, r3, #3
 8011b18:	f043 0302 	orr.w	r3, r3, #2
 8011b1c:	81a3      	strh	r3, [r4, #12]
 8011b1e:	e7e3      	b.n	8011ae8 <__smakebuf_r+0xc>
 8011b20:	4b0d      	ldr	r3, [pc, #52]	; (8011b58 <__smakebuf_r+0x7c>)
 8011b22:	62b3      	str	r3, [r6, #40]	; 0x28
 8011b24:	89a3      	ldrh	r3, [r4, #12]
 8011b26:	6020      	str	r0, [r4, #0]
 8011b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b2c:	81a3      	strh	r3, [r4, #12]
 8011b2e:	9b00      	ldr	r3, [sp, #0]
 8011b30:	6163      	str	r3, [r4, #20]
 8011b32:	9b01      	ldr	r3, [sp, #4]
 8011b34:	6120      	str	r0, [r4, #16]
 8011b36:	b15b      	cbz	r3, 8011b50 <__smakebuf_r+0x74>
 8011b38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b3c:	4630      	mov	r0, r6
 8011b3e:	f000 f859 	bl	8011bf4 <_isatty_r>
 8011b42:	b128      	cbz	r0, 8011b50 <__smakebuf_r+0x74>
 8011b44:	89a3      	ldrh	r3, [r4, #12]
 8011b46:	f023 0303 	bic.w	r3, r3, #3
 8011b4a:	f043 0301 	orr.w	r3, r3, #1
 8011b4e:	81a3      	strh	r3, [r4, #12]
 8011b50:	89a0      	ldrh	r0, [r4, #12]
 8011b52:	4305      	orrs	r5, r0
 8011b54:	81a5      	strh	r5, [r4, #12]
 8011b56:	e7cd      	b.n	8011af4 <__smakebuf_r+0x18>
 8011b58:	08010a2d 	.word	0x08010a2d

08011b5c <__ascii_mbtowc>:
 8011b5c:	b082      	sub	sp, #8
 8011b5e:	b901      	cbnz	r1, 8011b62 <__ascii_mbtowc+0x6>
 8011b60:	a901      	add	r1, sp, #4
 8011b62:	b142      	cbz	r2, 8011b76 <__ascii_mbtowc+0x1a>
 8011b64:	b14b      	cbz	r3, 8011b7a <__ascii_mbtowc+0x1e>
 8011b66:	7813      	ldrb	r3, [r2, #0]
 8011b68:	600b      	str	r3, [r1, #0]
 8011b6a:	7812      	ldrb	r2, [r2, #0]
 8011b6c:	1e10      	subs	r0, r2, #0
 8011b6e:	bf18      	it	ne
 8011b70:	2001      	movne	r0, #1
 8011b72:	b002      	add	sp, #8
 8011b74:	4770      	bx	lr
 8011b76:	4610      	mov	r0, r2
 8011b78:	e7fb      	b.n	8011b72 <__ascii_mbtowc+0x16>
 8011b7a:	f06f 0001 	mvn.w	r0, #1
 8011b7e:	e7f8      	b.n	8011b72 <__ascii_mbtowc+0x16>

08011b80 <_malloc_usable_size_r>:
 8011b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b84:	1f18      	subs	r0, r3, #4
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	bfbc      	itt	lt
 8011b8a:	580b      	ldrlt	r3, [r1, r0]
 8011b8c:	18c0      	addlt	r0, r0, r3
 8011b8e:	4770      	bx	lr

08011b90 <_read_r>:
 8011b90:	b538      	push	{r3, r4, r5, lr}
 8011b92:	4d07      	ldr	r5, [pc, #28]	; (8011bb0 <_read_r+0x20>)
 8011b94:	4604      	mov	r4, r0
 8011b96:	4608      	mov	r0, r1
 8011b98:	4611      	mov	r1, r2
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	602a      	str	r2, [r5, #0]
 8011b9e:	461a      	mov	r2, r3
 8011ba0:	f7f3 fcdc 	bl	800555c <_read>
 8011ba4:	1c43      	adds	r3, r0, #1
 8011ba6:	d102      	bne.n	8011bae <_read_r+0x1e>
 8011ba8:	682b      	ldr	r3, [r5, #0]
 8011baa:	b103      	cbz	r3, 8011bae <_read_r+0x1e>
 8011bac:	6023      	str	r3, [r4, #0]
 8011bae:	bd38      	pop	{r3, r4, r5, pc}
 8011bb0:	200016e8 	.word	0x200016e8

08011bb4 <__ascii_wctomb>:
 8011bb4:	b149      	cbz	r1, 8011bca <__ascii_wctomb+0x16>
 8011bb6:	2aff      	cmp	r2, #255	; 0xff
 8011bb8:	bf85      	ittet	hi
 8011bba:	238a      	movhi	r3, #138	; 0x8a
 8011bbc:	6003      	strhi	r3, [r0, #0]
 8011bbe:	700a      	strbls	r2, [r1, #0]
 8011bc0:	f04f 30ff 	movhi.w	r0, #4294967295
 8011bc4:	bf98      	it	ls
 8011bc6:	2001      	movls	r0, #1
 8011bc8:	4770      	bx	lr
 8011bca:	4608      	mov	r0, r1
 8011bcc:	4770      	bx	lr
	...

08011bd0 <_fstat_r>:
 8011bd0:	b538      	push	{r3, r4, r5, lr}
 8011bd2:	4d07      	ldr	r5, [pc, #28]	; (8011bf0 <_fstat_r+0x20>)
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	4604      	mov	r4, r0
 8011bd8:	4608      	mov	r0, r1
 8011bda:	4611      	mov	r1, r2
 8011bdc:	602b      	str	r3, [r5, #0]
 8011bde:	f7f3 fd02 	bl	80055e6 <_fstat>
 8011be2:	1c43      	adds	r3, r0, #1
 8011be4:	d102      	bne.n	8011bec <_fstat_r+0x1c>
 8011be6:	682b      	ldr	r3, [r5, #0]
 8011be8:	b103      	cbz	r3, 8011bec <_fstat_r+0x1c>
 8011bea:	6023      	str	r3, [r4, #0]
 8011bec:	bd38      	pop	{r3, r4, r5, pc}
 8011bee:	bf00      	nop
 8011bf0:	200016e8 	.word	0x200016e8

08011bf4 <_isatty_r>:
 8011bf4:	b538      	push	{r3, r4, r5, lr}
 8011bf6:	4d06      	ldr	r5, [pc, #24]	; (8011c10 <_isatty_r+0x1c>)
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	4604      	mov	r4, r0
 8011bfc:	4608      	mov	r0, r1
 8011bfe:	602b      	str	r3, [r5, #0]
 8011c00:	f7f3 fd01 	bl	8005606 <_isatty>
 8011c04:	1c43      	adds	r3, r0, #1
 8011c06:	d102      	bne.n	8011c0e <_isatty_r+0x1a>
 8011c08:	682b      	ldr	r3, [r5, #0]
 8011c0a:	b103      	cbz	r3, 8011c0e <_isatty_r+0x1a>
 8011c0c:	6023      	str	r3, [r4, #0]
 8011c0e:	bd38      	pop	{r3, r4, r5, pc}
 8011c10:	200016e8 	.word	0x200016e8

08011c14 <_init>:
 8011c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c16:	bf00      	nop
 8011c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c1a:	bc08      	pop	{r3}
 8011c1c:	469e      	mov	lr, r3
 8011c1e:	4770      	bx	lr

08011c20 <_fini>:
 8011c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c22:	bf00      	nop
 8011c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c26:	bc08      	pop	{r3}
 8011c28:	469e      	mov	lr, r3
 8011c2a:	4770      	bx	lr
