
DCmotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800cf50  0800cf50  0001cf50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d34c  0800d34c  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800d34c  0800d34c  0001d34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d354  0800d354  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d354  0800d354  0001d354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d358  0800d358  0001d358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800d35c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000954  20000200  0800d55c  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b54  0800d55c  00020b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3fe  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004168  00000000  00000000  0003c62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00040798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e8  00000000  00000000  00041f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b89c  00000000  00000000  00043518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001def6  00000000  00000000  0005edb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098d5e  00000000  00000000  0007ccaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115a08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000749c  00000000  00000000  00115a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cf38 	.word	0x0800cf38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800cf38 	.word	0x0800cf38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <HAL_GPIO_EXTI_Callback>:
 */

#include "DCmotor.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
 static unsigned char state0,state1,state2,state3;
 static bool LEFT_ENCODER_A,RIGHT_ENCODER_A, LEFT_ENCODER_B,RIGHT_ENCODER_B;
 /* MOTOR A */
 if (GPIO_Pin == GPIO_PIN_10)
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f6c:	f040 80a1 	bne.w	80010b2 <HAL_GPIO_EXTI_Callback+0x156>
 {
   // chương trình ngắt của chân 10

	 LEFT_ENCODER_A=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10);
 8000f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f74:	4892      	ldr	r0, [pc, #584]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x264>)
 8000f76:	f001 ff43 	bl	8002e00 <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf14      	ite	ne
 8000f80:	2301      	movne	r3, #1
 8000f82:	2300      	moveq	r3, #0
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b8f      	ldr	r3, [pc, #572]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x268>)
 8000f88:	701a      	strb	r2, [r3, #0]
	 state0=state0|LEFT_ENCODER_A;
 8000f8a:	4b8e      	ldr	r3, [pc, #568]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x268>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b8d      	ldr	r3, [pc, #564]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b8b      	ldr	r3, [pc, #556]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f9a:	701a      	strb	r2, [r3, #0]

	 state0=state0<<1;
 8000f9c:	4b8a      	ldr	r3, [pc, #552]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b88      	ldr	r3, [pc, #544]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fa6:	701a      	strb	r2, [r3, #0]
	 LEFT_ENCODER_B=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_11);
 8000fa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fac:	4884      	ldr	r0, [pc, #528]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x264>)
 8000fae:	f001 ff27 	bl	8002e00 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b83      	ldr	r3, [pc, #524]	; (80011cc <HAL_GPIO_EXTI_Callback+0x270>)
 8000fc0:	701a      	strb	r2, [r3, #0]
	 state0=state0|LEFT_ENCODER_B;
 8000fc2:	4b82      	ldr	r3, [pc, #520]	; (80011cc <HAL_GPIO_EXTI_Callback+0x270>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b7f      	ldr	r3, [pc, #508]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b7d      	ldr	r3, [pc, #500]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fd2:	701a      	strb	r2, [r3, #0]
	 state0=state0 & 0x03;
 8000fd4:	4b7c      	ldr	r3, [pc, #496]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b7a      	ldr	r3, [pc, #488]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fe0:	701a      	strb	r2, [r3, #0]

	 switch(state0)
 8000fe2:	4b79      	ldr	r3, [pc, #484]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d85d      	bhi.n	80010a6 <HAL_GPIO_EXTI_Callback+0x14a>
 8000fea:	a201      	add	r2, pc, #4	; (adr r2, 8000ff0 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff0:	08001001 	.word	0x08001001
 8000ff4:	08001027 	.word	0x08001027
 8000ff8:	0800104d 	.word	0x0800104d
 8000ffc:	08001073 	.word	0x08001073
	 {
		 	 	 	 	 case 0:
							 	 if(left_previous==1){left_count++;}
 8001000:	4b73      	ldr	r3, [pc, #460]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d104      	bne.n	8001012 <HAL_GPIO_EXTI_Callback+0xb6>
 8001008:	4b72      	ldr	r3, [pc, #456]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	4a71      	ldr	r2, [pc, #452]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001010:	6013      	str	r3, [r2, #0]
							 	 if(left_previous==2) {left_count--;}
 8001012:	4b6f      	ldr	r3, [pc, #444]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d13e      	bne.n	8001098 <HAL_GPIO_EXTI_Callback+0x13c>
 800101a:	4b6e      	ldr	r3, [pc, #440]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3b01      	subs	r3, #1
 8001020:	4a6c      	ldr	r2, [pc, #432]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001022:	6013      	str	r3, [r2, #0]
							 	 break;
 8001024:	e038      	b.n	8001098 <HAL_GPIO_EXTI_Callback+0x13c>
		 	 	 	 	 case 1:
		 	 	 	 		 	 if(left_previous==3){left_count++;}
 8001026:	4b6a      	ldr	r3, [pc, #424]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d104      	bne.n	8001038 <HAL_GPIO_EXTI_Callback+0xdc>
 800102e:	4b69      	ldr	r3, [pc, #420]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	4a67      	ldr	r2, [pc, #412]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001036:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==0){left_count--;}
 8001038:	4b65      	ldr	r3, [pc, #404]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d12d      	bne.n	800109c <HAL_GPIO_EXTI_Callback+0x140>
 8001040:	4b64      	ldr	r3, [pc, #400]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3b01      	subs	r3, #1
 8001046:	4a63      	ldr	r2, [pc, #396]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001048:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 800104a:	e027      	b.n	800109c <HAL_GPIO_EXTI_Callback+0x140>
		 	 	 	 	 case 2:
		 	 	 	 		 	 if(left_previous==0){left_count++;}
 800104c:	4b60      	ldr	r3, [pc, #384]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d104      	bne.n	800105e <HAL_GPIO_EXTI_Callback+0x102>
 8001054:	4b5f      	ldr	r3, [pc, #380]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a5e      	ldr	r2, [pc, #376]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800105c:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==3) {left_count--;}
 800105e:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d11c      	bne.n	80010a0 <HAL_GPIO_EXTI_Callback+0x144>
 8001066:	4b5b      	ldr	r3, [pc, #364]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	3b01      	subs	r3, #1
 800106c:	4a59      	ldr	r2, [pc, #356]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800106e:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001070:	e016      	b.n	80010a0 <HAL_GPIO_EXTI_Callback+0x144>
		 	 	 	 	 case 3:
		 	 	 	 		 	 if(left_previous==2){left_count++;}
 8001072:	4b57      	ldr	r3, [pc, #348]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d104      	bne.n	8001084 <HAL_GPIO_EXTI_Callback+0x128>
 800107a:	4b56      	ldr	r3, [pc, #344]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a54      	ldr	r2, [pc, #336]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001082:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==1) {left_count--;}
 8001084:	4b52      	ldr	r3, [pc, #328]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d10b      	bne.n	80010a4 <HAL_GPIO_EXTI_Callback+0x148>
 800108c:	4b51      	ldr	r3, [pc, #324]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	3b01      	subs	r3, #1
 8001092:	4a50      	ldr	r2, [pc, #320]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001094:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001096:	e005      	b.n	80010a4 <HAL_GPIO_EXTI_Callback+0x148>
							 	 break;
 8001098:	bf00      	nop
 800109a:	e004      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x14a>
		 	 	 	 		 	 break;
 800109c:	bf00      	nop
 800109e:	e002      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x14a>
		 	 	 	 		 	 break;
 80010a0:	bf00      	nop
 80010a2:	e000      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x14a>
		 	 	 	 		 	 break;
 80010a4:	bf00      	nop
	 }
	 left_previous=state0;
 80010a6:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b48      	ldr	r3, [pc, #288]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 80010ae:	601a      	str	r2, [r3, #0]
		 	 	 	 		 	 if(right_previous==1) {right_count--;}
		 	 	 	 		 	 break;
		 }
		 right_previous=state3;
	 }
}
 80010b0:	e215      	b.n	80014de <HAL_GPIO_EXTI_Callback+0x582>
	 else if (GPIO_Pin == GPIO_PIN_11)
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010b8:	f040 80b0 	bne.w	800121c <HAL_GPIO_EXTI_Callback+0x2c0>
		 LEFT_ENCODER_A=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10);
 80010bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c0:	483f      	ldr	r0, [pc, #252]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x264>)
 80010c2:	f001 fe9d 	bl	8002e00 <HAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf14      	ite	ne
 80010cc:	2301      	movne	r3, #1
 80010ce:	2300      	moveq	r3, #0
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x268>)
 80010d4:	701a      	strb	r2, [r3, #0]
		 state1=state1|LEFT_ENCODER_A;
 80010d6:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x268>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b3c      	ldr	r3, [pc, #240]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010e6:	701a      	strb	r2, [r3, #0]
		 state1=state1<<1;
 80010e8:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010f2:	701a      	strb	r2, [r3, #0]
		 LEFT_ENCODER_B=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_11);
 80010f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f8:	4831      	ldr	r0, [pc, #196]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x264>)
 80010fa:	f001 fe81 	bl	8002e00 <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf14      	ite	ne
 8001104:	2301      	movne	r3, #1
 8001106:	2300      	moveq	r3, #0
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_GPIO_EXTI_Callback+0x270>)
 800110c:	701a      	strb	r2, [r3, #0]
		 state1=state1|LEFT_ENCODER_B;
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_GPIO_EXTI_Callback+0x270>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4313      	orrs	r3, r2
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 800111e:	701a      	strb	r2, [r3, #0]
		 state1=state1 & 0x03;
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 800112c:	701a      	strb	r2, [r3, #0]
		 switch(state1)
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d86c      	bhi.n	8001210 <HAL_GPIO_EXTI_Callback+0x2b4>
 8001136:	a201      	add	r2, pc, #4	; (adr r2, 800113c <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113c:	0800114d 	.word	0x0800114d
 8001140:	08001173 	.word	0x08001173
 8001144:	08001199 	.word	0x08001199
 8001148:	080011dd 	.word	0x080011dd
							 	 if(left_previous==1){left_count++;}
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d104      	bne.n	800115e <HAL_GPIO_EXTI_Callback+0x202>
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800115c:	6013      	str	r3, [r2, #0]
							 	 if(left_previous==2) {left_count--;}
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d14d      	bne.n	8001202 <HAL_GPIO_EXTI_Callback+0x2a6>
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3b01      	subs	r3, #1
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800116e:	6013      	str	r3, [r2, #0]
							 	 break;
 8001170:	e047      	b.n	8001202 <HAL_GPIO_EXTI_Callback+0x2a6>
		 	 	 	 		 	 if(left_previous==3){left_count++;}
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d104      	bne.n	8001184 <HAL_GPIO_EXTI_Callback+0x228>
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001182:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==0){left_count--;}
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d13c      	bne.n	8001206 <HAL_GPIO_EXTI_Callback+0x2aa>
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3b01      	subs	r3, #1
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001194:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001196:	e036      	b.n	8001206 <HAL_GPIO_EXTI_Callback+0x2aa>
		 	 	 	 		 	 if(left_previous==0){left_count++;}
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d104      	bne.n	80011aa <HAL_GPIO_EXTI_Callback+0x24e>
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80011a8:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==3) {left_count--;}
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d12b      	bne.n	800120a <HAL_GPIO_EXTI_Callback+0x2ae>
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80011ba:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 80011bc:	e025      	b.n	800120a <HAL_GPIO_EXTI_Callback+0x2ae>
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
 80011c4:	2000021c 	.word	0x2000021c
 80011c8:	2000021d 	.word	0x2000021d
 80011cc:	2000021e 	.word	0x2000021e
 80011d0:	20000254 	.word	0x20000254
 80011d4:	200002a0 	.word	0x200002a0
 80011d8:	2000021f 	.word	0x2000021f
		 	 	 	 		 	 if(left_previous==2){left_count++;}
 80011dc:	4b93      	ldr	r3, [pc, #588]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d104      	bne.n	80011ee <HAL_GPIO_EXTI_Callback+0x292>
 80011e4:	4b92      	ldr	r3, [pc, #584]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a91      	ldr	r2, [pc, #580]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80011ec:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==1) {left_count--;}
 80011ee:	4b8f      	ldr	r3, [pc, #572]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d10b      	bne.n	800120e <HAL_GPIO_EXTI_Callback+0x2b2>
 80011f6:	4b8e      	ldr	r3, [pc, #568]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	4a8c      	ldr	r2, [pc, #560]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80011fe:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001200:	e005      	b.n	800120e <HAL_GPIO_EXTI_Callback+0x2b2>
							 	 break;
 8001202:	bf00      	nop
 8001204:	e004      	b.n	8001210 <HAL_GPIO_EXTI_Callback+0x2b4>
		 	 	 	 		 	 break;
 8001206:	bf00      	nop
 8001208:	e002      	b.n	8001210 <HAL_GPIO_EXTI_Callback+0x2b4>
		 	 	 	 		 	 break;
 800120a:	bf00      	nop
 800120c:	e000      	b.n	8001210 <HAL_GPIO_EXTI_Callback+0x2b4>
		 	 	 	 		 	 break;
 800120e:	bf00      	nop
		 left_previous=state1;
 8001210:	4b88      	ldr	r3, [pc, #544]	; (8001434 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b85      	ldr	r3, [pc, #532]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 8001218:	601a      	str	r2, [r3, #0]
}
 800121a:	e160      	b.n	80014de <HAL_GPIO_EXTI_Callback+0x582>
	 else if (GPIO_Pin == GPIO_PIN_12)		 // LEFT CHANNEL B
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001222:	f040 80a2 	bne.w	800136a <HAL_GPIO_EXTI_Callback+0x40e>
		 RIGHT_ENCODER_A=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12);
 8001226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122a:	4883      	ldr	r0, [pc, #524]	; (8001438 <HAL_GPIO_EXTI_Callback+0x4dc>)
 800122c:	f001 fde8 	bl	8002e00 <HAL_GPIO_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b7f      	ldr	r3, [pc, #508]	; (800143c <HAL_GPIO_EXTI_Callback+0x4e0>)
 800123e:	701a      	strb	r2, [r3, #0]
		 state2=state2|RIGHT_ENCODER_A;
 8001240:	4b7e      	ldr	r3, [pc, #504]	; (800143c <HAL_GPIO_EXTI_Callback+0x4e0>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b7e      	ldr	r3, [pc, #504]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4313      	orrs	r3, r2
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b7c      	ldr	r3, [pc, #496]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001250:	701a      	strb	r2, [r3, #0]
		 state2=state2<<1;
 8001252:	4b7b      	ldr	r3, [pc, #492]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b79      	ldr	r3, [pc, #484]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800125c:	701a      	strb	r2, [r3, #0]
		 RIGHT_ENCODER_B=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13);
 800125e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001262:	4875      	ldr	r0, [pc, #468]	; (8001438 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001264:	f001 fdcc 	bl	8002e00 <HAL_GPIO_ReadPin>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf14      	ite	ne
 800126e:	2301      	movne	r3, #1
 8001270:	2300      	moveq	r3, #0
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b73      	ldr	r3, [pc, #460]	; (8001444 <HAL_GPIO_EXTI_Callback+0x4e8>)
 8001276:	701a      	strb	r2, [r3, #0]
		 state2=state2|RIGHT_ENCODER_B;
 8001278:	4b72      	ldr	r3, [pc, #456]	; (8001444 <HAL_GPIO_EXTI_Callback+0x4e8>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b70      	ldr	r3, [pc, #448]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b6e      	ldr	r3, [pc, #440]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001288:	701a      	strb	r2, [r3, #0]
		 state2=state2 & 0x03;
 800128a:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b6a      	ldr	r3, [pc, #424]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001296:	701a      	strb	r2, [r3, #0]
		 switch(state2)
 8001298:	4b69      	ldr	r3, [pc, #420]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d85e      	bhi.n	800135e <HAL_GPIO_EXTI_Callback+0x402>
 80012a0:	a201      	add	r2, pc, #4	; (adr r2, 80012a8 <HAL_GPIO_EXTI_Callback+0x34c>)
 80012a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a6:	bf00      	nop
 80012a8:	080012b9 	.word	0x080012b9
 80012ac:	080012df 	.word	0x080012df
 80012b0:	08001305 	.word	0x08001305
 80012b4:	0800132b 	.word	0x0800132b
				 if(right_previous==1){right_count++;}
 80012b8:	4b63      	ldr	r3, [pc, #396]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d104      	bne.n	80012ca <HAL_GPIO_EXTI_Callback+0x36e>
 80012c0:	4b62      	ldr	r3, [pc, #392]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a61      	ldr	r2, [pc, #388]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012c8:	6013      	str	r3, [r2, #0]
				 if(right_previous==2){right_count--;}
 80012ca:	4b5f      	ldr	r3, [pc, #380]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d13e      	bne.n	8001350 <HAL_GPIO_EXTI_Callback+0x3f4>
 80012d2:	4b5e      	ldr	r3, [pc, #376]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	4a5c      	ldr	r2, [pc, #368]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012da:	6013      	str	r3, [r2, #0]
				 break;
 80012dc:	e038      	b.n	8001350 <HAL_GPIO_EXTI_Callback+0x3f4>
	 	 		 	 if(right_previous==3){right_count++;}
 80012de:	4b5a      	ldr	r3, [pc, #360]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d104      	bne.n	80012f0 <HAL_GPIO_EXTI_Callback+0x394>
 80012e6:	4b59      	ldr	r3, [pc, #356]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	4a57      	ldr	r2, [pc, #348]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012ee:	6013      	str	r3, [r2, #0]
	 	 		 	 if(right_previous==0){right_count--;}
 80012f0:	4b55      	ldr	r3, [pc, #340]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d12d      	bne.n	8001354 <HAL_GPIO_EXTI_Callback+0x3f8>
 80012f8:	4b54      	ldr	r3, [pc, #336]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	4a53      	ldr	r2, [pc, #332]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001300:	6013      	str	r3, [r2, #0]
	 	 		 	 break;
 8001302:	e027      	b.n	8001354 <HAL_GPIO_EXTI_Callback+0x3f8>
	 	 		 	 if(right_previous==0){right_count++;}
 8001304:	4b50      	ldr	r3, [pc, #320]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d104      	bne.n	8001316 <HAL_GPIO_EXTI_Callback+0x3ba>
 800130c:	4b4f      	ldr	r3, [pc, #316]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	4a4e      	ldr	r2, [pc, #312]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001314:	6013      	str	r3, [r2, #0]
	 	 		 	 if(right_previous==3) {right_count--;}
 8001316:	4b4c      	ldr	r3, [pc, #304]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d11c      	bne.n	8001358 <HAL_GPIO_EXTI_Callback+0x3fc>
 800131e:	4b4b      	ldr	r3, [pc, #300]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3b01      	subs	r3, #1
 8001324:	4a49      	ldr	r2, [pc, #292]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001326:	6013      	str	r3, [r2, #0]
	 	 		 	 break;
 8001328:	e016      	b.n	8001358 <HAL_GPIO_EXTI_Callback+0x3fc>
	 	 		 	 if(right_previous==2){right_count++;}
 800132a:	4b47      	ldr	r3, [pc, #284]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d104      	bne.n	800133c <HAL_GPIO_EXTI_Callback+0x3e0>
 8001332:	4b46      	ldr	r3, [pc, #280]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	4a44      	ldr	r2, [pc, #272]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800133a:	6013      	str	r3, [r2, #0]
	 	 		 	 if(right_previous==1) {right_count--;}
 800133c:	4b42      	ldr	r3, [pc, #264]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d10b      	bne.n	800135c <HAL_GPIO_EXTI_Callback+0x400>
 8001344:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3b01      	subs	r3, #1
 800134a:	4a40      	ldr	r2, [pc, #256]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800134c:	6013      	str	r3, [r2, #0]
	 	 		 	 break;
 800134e:	e005      	b.n	800135c <HAL_GPIO_EXTI_Callback+0x400>
				 break;
 8001350:	bf00      	nop
 8001352:	e004      	b.n	800135e <HAL_GPIO_EXTI_Callback+0x402>
	 	 		 	 break;
 8001354:	bf00      	nop
 8001356:	e002      	b.n	800135e <HAL_GPIO_EXTI_Callback+0x402>
	 	 		 	 break;
 8001358:	bf00      	nop
 800135a:	e000      	b.n	800135e <HAL_GPIO_EXTI_Callback+0x402>
	 	 		 	 break;
 800135c:	bf00      	nop
		 right_previous=state2;
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	e0b9      	b.n	80014de <HAL_GPIO_EXTI_Callback+0x582>
	 else if (GPIO_Pin == GPIO_PIN_13)
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001370:	f040 80b5 	bne.w	80014de <HAL_GPIO_EXTI_Callback+0x582>
		 RIGHT_ENCODER_A=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12);
 8001374:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001378:	482f      	ldr	r0, [pc, #188]	; (8001438 <HAL_GPIO_EXTI_Callback+0x4dc>)
 800137a:	f001 fd41 	bl	8002e00 <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf14      	ite	ne
 8001384:	2301      	movne	r3, #1
 8001386:	2300      	moveq	r3, #0
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <HAL_GPIO_EXTI_Callback+0x4e0>)
 800138c:	701a      	strb	r2, [r3, #0]
		 state3=state3|RIGHT_ENCODER_A;
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <HAL_GPIO_EXTI_Callback+0x4e0>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4313      	orrs	r3, r2
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 800139e:	701a      	strb	r2, [r3, #0]
		 state3=state3<<1;
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013aa:	701a      	strb	r2, [r3, #0]
		 RIGHT_ENCODER_B=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13);
 80013ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b0:	4821      	ldr	r0, [pc, #132]	; (8001438 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80013b2:	f001 fd25 	bl	8002e00 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	bf14      	ite	ne
 80013bc:	2301      	movne	r3, #1
 80013be:	2300      	moveq	r3, #0
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_GPIO_EXTI_Callback+0x4e8>)
 80013c4:	701a      	strb	r2, [r3, #0]
		 state3=state3|RIGHT_ENCODER_B;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <HAL_GPIO_EXTI_Callback+0x4e8>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013d6:	701a      	strb	r2, [r3, #0]
		 state3=state3 & 0x03;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013e4:	701a      	strb	r2, [r3, #0]
		 switch(state3)
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d872      	bhi.n	80014d4 <HAL_GPIO_EXTI_Callback+0x578>
 80013ee:	a201      	add	r2, pc, #4	; (adr r2, 80013f4 <HAL_GPIO_EXTI_Callback+0x498>)
 80013f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f4:	08001405 	.word	0x08001405
 80013f8:	08001455 	.word	0x08001455
 80013fc:	0800147b 	.word	0x0800147b
 8001400:	080014a1 	.word	0x080014a1
								 if(right_previous==1){right_count++;}
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d104      	bne.n	8001416 <HAL_GPIO_EXTI_Callback+0x4ba>
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001414:	6013      	str	r3, [r2, #0]
								 if(right_previous==2){right_count--;}
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d153      	bne.n	80014c6 <HAL_GPIO_EXTI_Callback+0x56a>
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3b01      	subs	r3, #1
 8001424:	4a09      	ldr	r2, [pc, #36]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001426:	6013      	str	r3, [r2, #0]
								 break;
 8001428:	e04d      	b.n	80014c6 <HAL_GPIO_EXTI_Callback+0x56a>
 800142a:	bf00      	nop
 800142c:	20000254 	.word	0x20000254
 8001430:	200002a0 	.word	0x200002a0
 8001434:	2000021f 	.word	0x2000021f
 8001438:	40021000 	.word	0x40021000
 800143c:	20000220 	.word	0x20000220
 8001440:	20000221 	.word	0x20000221
 8001444:	20000222 	.word	0x20000222
 8001448:	20000294 	.word	0x20000294
 800144c:	2000025c 	.word	0x2000025c
 8001450:	20000223 	.word	0x20000223
		 	 	 	 		 	 if(right_previous==3){right_count++;}
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d104      	bne.n	8001466 <HAL_GPIO_EXTI_Callback+0x50a>
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	4a22      	ldr	r2, [pc, #136]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 8001464:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(right_previous==0){right_count--;}
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d12d      	bne.n	80014ca <HAL_GPIO_EXTI_Callback+0x56e>
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3b01      	subs	r3, #1
 8001474:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 8001476:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001478:	e027      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0x56e>
		 	 	 	 		 	 if(right_previous==0){right_count++;}
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d104      	bne.n	800148c <HAL_GPIO_EXTI_Callback+0x530>
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	4a18      	ldr	r2, [pc, #96]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 800148a:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(right_previous==3) {right_count--;}
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b03      	cmp	r3, #3
 8001492:	d11c      	bne.n	80014ce <HAL_GPIO_EXTI_Callback+0x572>
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 800149c:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 800149e:	e016      	b.n	80014ce <HAL_GPIO_EXTI_Callback+0x572>
		 	 	 	 		 	 if(right_previous==2){right_count++;}
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d104      	bne.n	80014b2 <HAL_GPIO_EXTI_Callback+0x556>
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 80014b0:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(right_previous==1) {right_count--;}
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d10b      	bne.n	80014d2 <HAL_GPIO_EXTI_Callback+0x576>
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3b01      	subs	r3, #1
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 80014c2:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 80014c4:	e005      	b.n	80014d2 <HAL_GPIO_EXTI_Callback+0x576>
								 break;
 80014c6:	bf00      	nop
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_EXTI_Callback+0x578>
		 	 	 	 		 	 break;
 80014ca:	bf00      	nop
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_EXTI_Callback+0x578>
		 	 	 	 		 	 break;
 80014ce:	bf00      	nop
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_EXTI_Callback+0x578>
		 	 	 	 		 	 break;
 80014d2:	bf00      	nop
		 right_previous=state3;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x594>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000294 	.word	0x20000294
 80014ec:	2000025c 	.word	0x2000025c
 80014f0:	20000223 	.word	0x20000223
 80014f4:	00000000 	.word	0x00000000

080014f8 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	cnt++;
 8001500:	4b61      	ldr	r3, [pc, #388]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	4a60      	ldr	r2, [pc, #384]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001508:	6013      	str	r3, [r2, #0]
	if(cnt==100) //1 cnt = 0.001s, default:80 = 0.8s
 800150a:	4b5f      	ldr	r3, [pc, #380]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	f040 80ab 	bne.w	800166a <HAL_TIM_PeriodElapsedCallback+0x172>
	{

		rads_left_velocity  = left_count*2*PI/(5376*0.001*cnt);
 8001514:	4b5d      	ldr	r3, [pc, #372]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f80a 	bl	8000534 <__aeabi_i2d>
 8001520:	a355      	add	r3, pc, #340	; (adr r3, 8001678 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	f7ff f86f 	bl	8000608 <__aeabi_dmul>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4614      	mov	r4, r2
 8001530:	461d      	mov	r5, r3
 8001532:	4b55      	ldr	r3, [pc, #340]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe fffc 	bl	8000534 <__aeabi_i2d>
 800153c:	a350      	add	r3, pc, #320	; (adr r3, 8001680 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7ff f861 	bl	8000608 <__aeabi_dmul>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4620      	mov	r0, r4
 800154c:	4629      	mov	r1, r5
 800154e:	f7ff f985 	bl	800085c <__aeabi_ddiv>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fb2d 	bl	8000bb8 <__aeabi_d2f>
 800155e:	4603      	mov	r3, r0
 8001560:	4a4b      	ldr	r2, [pc, #300]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001562:	6013      	str	r3, [r2, #0]
		rpm_left_velocity   = left_count*60/(5376*0.001*cnt);
 8001564:	4b49      	ldr	r3, [pc, #292]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4613      	mov	r3, r2
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	1a9b      	subs	r3, r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ffdf 	bl	8000534 <__aeabi_i2d>
 8001576:	4604      	mov	r4, r0
 8001578:	460d      	mov	r5, r1
 800157a:	4b43      	ldr	r3, [pc, #268]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffd8 	bl	8000534 <__aeabi_i2d>
 8001584:	a33e      	add	r3, pc, #248	; (adr r3, 8001680 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f83d 	bl	8000608 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7ff f961 	bl	800085c <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff fb09 	bl	8000bb8 <__aeabi_d2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4a3a      	ldr	r2, [pc, #232]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80015aa:	6013      	str	r3, [r2, #0]

		rads_right_velocity = right_count*2*PI/(5376*0.001*cnt);
 80015ac:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffbe 	bl	8000534 <__aeabi_i2d>
 80015b8:	a32f      	add	r3, pc, #188	; (adr r3, 8001678 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7ff f823 	bl	8000608 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4614      	mov	r4, r2
 80015c8:	461d      	mov	r5, r3
 80015ca:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffb0 	bl	8000534 <__aeabi_i2d>
 80015d4:	a32a      	add	r3, pc, #168	; (adr r3, 8001680 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff f815 	bl	8000608 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4620      	mov	r0, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	f7ff f939 	bl	800085c <__aeabi_ddiv>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff fae1 	bl	8000bb8 <__aeabi_d2f>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a28      	ldr	r2, [pc, #160]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80015fa:	6013      	str	r3, [r2, #0]
		rpm_right_velocity  = right_count*60/(5376*0.001*cnt);
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4613      	mov	r3, r2
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	1a9b      	subs	r3, r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff93 	bl	8000534 <__aeabi_i2d>
 800160e:	4604      	mov	r4, r0
 8001610:	460d      	mov	r5, r1
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ff8c 	bl	8000534 <__aeabi_i2d>
 800161c:	a318      	add	r3, pc, #96	; (adr r3, 8001680 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7fe fff1 	bl	8000608 <__aeabi_dmul>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4620      	mov	r0, r4
 800162c:	4629      	mov	r1, r5
 800162e:	f7ff f915 	bl	800085c <__aeabi_ddiv>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff fabd 	bl	8000bb8 <__aeabi_d2f>
 800163e:	4603      	mov	r3, r0
 8001640:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001642:	6013      	str	r3, [r2, #0]

//		pos=previous_pos+right_count*360/5376;
//		previous_pos=pos;
		printf("%0.5f\n",rpm_right_velocity);
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff85 	bl	8000558 <__aeabi_f2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4814      	ldr	r0, [pc, #80]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001654:	f009 fc94 	bl	800af80 <iprintf>
		left_count=0;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
		right_count=0;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
		cnt=0;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
	}
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bdb0      	pop	{r4, r5, r7, pc}
 8001672:	bf00      	nop
 8001674:	f3af 8000 	nop.w
 8001678:	54442d18 	.word	0x54442d18
 800167c:	400921fb 	.word	0x400921fb
 8001680:	24dd2f1b 	.word	0x24dd2f1b
 8001684:	40158106 	.word	0x40158106
 8001688:	20000268 	.word	0x20000268
 800168c:	200002a0 	.word	0x200002a0
 8001690:	2000028c 	.word	0x2000028c
 8001694:	20000288 	.word	0x20000288
 8001698:	2000025c 	.word	0x2000025c
 800169c:	2000027c 	.word	0x2000027c
 80016a0:	2000029c 	.word	0x2000029c
 80016a4:	0800cf50 	.word	0x0800cf50

080016a8 <PID>:

void PID(float *SetPoint, float* ControlledVariable,float* PidOutput)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
	// PWM mode has the range from 0 to 400.
	float HighLimit=400;
 80016b4:	4b7c      	ldr	r3, [pc, #496]	; (80018a8 <PID+0x200>)
 80016b6:	617b      	str	r3, [r7, #20]
	static float ManipulatedVariable,ManipulatedVariableHat,uk,ui,previous_ui,CurrentError;

	// Calculate the error
	CurrentError=*SetPoint-*ControlledVariable;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	ed93 7a00 	vldr	s14, [r3]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c8:	4b78      	ldr	r3, [pc, #480]	; (80018ac <PID+0x204>)
 80016ca:	edc3 7a00 	vstr	s15, [r3]

	// Proportion
	uk=Kp*CurrentError;
 80016ce:	4b77      	ldr	r3, [pc, #476]	; (80018ac <PID+0x204>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ff40 	bl	8000558 <__aeabi_f2d>
 80016d8:	a369      	add	r3, pc, #420	; (adr r3, 8001880 <PID+0x1d8>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7fe ff93 	bl	8000608 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff fa65 	bl	8000bb8 <__aeabi_d2f>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4a6f      	ldr	r2, [pc, #444]	; (80018b0 <PID+0x208>)
 80016f2:	6013      	str	r3, [r2, #0]

	// Integration
	ui=previous_ui+Ki*CurrentError*0.1;
 80016f4:	4b6f      	ldr	r3, [pc, #444]	; (80018b4 <PID+0x20c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff2d 	bl	8000558 <__aeabi_f2d>
 80016fe:	4604      	mov	r4, r0
 8001700:	460d      	mov	r5, r1
 8001702:	4b6a      	ldr	r3, [pc, #424]	; (80018ac <PID+0x204>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff26 	bl	8000558 <__aeabi_f2d>
 800170c:	a35e      	add	r3, pc, #376	; (adr r3, 8001888 <PID+0x1e0>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7fe ff79 	bl	8000608 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	a35c      	add	r3, pc, #368	; (adr r3, 8001890 <PID+0x1e8>)
 8001720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001724:	f7fe ff70 	bl	8000608 <__aeabi_dmul>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4620      	mov	r0, r4
 800172e:	4629      	mov	r1, r5
 8001730:	f7fe fdb4 	bl	800029c <__adddf3>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff fa3c 	bl	8000bb8 <__aeabi_d2f>
 8001740:	4603      	mov	r3, r0
 8001742:	4a5d      	ldr	r2, [pc, #372]	; (80018b8 <PID+0x210>)
 8001744:	6013      	str	r3, [r2, #0]
	ManipulatedVariable=ui+uk;
 8001746:	4b5c      	ldr	r3, [pc, #368]	; (80018b8 <PID+0x210>)
 8001748:	ed93 7a00 	vldr	s14, [r3]
 800174c:	4b58      	ldr	r3, [pc, #352]	; (80018b0 <PID+0x208>)
 800174e:	edd3 7a00 	vldr	s15, [r3]
 8001752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001756:	4b59      	ldr	r3, [pc, #356]	; (80018bc <PID+0x214>)
 8001758:	edc3 7a00 	vstr	s15, [r3]

	if(ManipulatedVariable<HighLimit)
 800175c:	4b57      	ldr	r3, [pc, #348]	; (80018bc <PID+0x214>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	ed97 7a05 	vldr	s14, [r7, #20]
 8001766:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	dd0b      	ble.n	8001788 <PID+0xe0>
	{
		ManipulatedVariableHat=ManipulatedVariable;
 8001770:	4b52      	ldr	r3, [pc, #328]	; (80018bc <PID+0x214>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a52      	ldr	r2, [pc, #328]	; (80018c0 <PID+0x218>)
 8001776:	6013      	str	r3, [r2, #0]
		ResetError=0;
 8001778:	4b52      	ldr	r3, [pc, #328]	; (80018c4 <PID+0x21c>)
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
		*PidOutput=ManipulatedVariable;
 8001780:	4b4e      	ldr	r3, [pc, #312]	; (80018bc <PID+0x214>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	601a      	str	r2, [r3, #0]
	}
	if(ManipulatedVariable>HighLimit)
 8001788:	4b4c      	ldr	r3, [pc, #304]	; (80018bc <PID+0x214>)
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179a:	d568      	bpl.n	800186e <PID+0x1c6>
	{
		ManipulatedVariableHat=HighLimit;
 800179c:	4a48      	ldr	r2, [pc, #288]	; (80018c0 <PID+0x218>)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	6013      	str	r3, [r2, #0]
		ResetError=ManipulatedVariableHat-ManipulatedVariable;
 80017a2:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <PID+0x218>)
 80017a4:	ed93 7a00 	vldr	s14, [r3]
 80017a8:	4b44      	ldr	r3, [pc, #272]	; (80018bc <PID+0x214>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b2:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <PID+0x21c>)
 80017b4:	edc3 7a00 	vstr	s15, [r3]
		AntiWindupError=Ki*CurrentError+ResetError*Kb;
 80017b8:	4b3c      	ldr	r3, [pc, #240]	; (80018ac <PID+0x204>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fecb 	bl	8000558 <__aeabi_f2d>
 80017c2:	a331      	add	r3, pc, #196	; (adr r3, 8001888 <PID+0x1e0>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe ff1e 	bl	8000608 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4614      	mov	r4, r2
 80017d2:	461d      	mov	r5, r3
 80017d4:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <PID+0x21c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe febd 	bl	8000558 <__aeabi_f2d>
 80017de:	a32e      	add	r3, pc, #184	; (adr r3, 8001898 <PID+0x1f0>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	f7fe ff10 	bl	8000608 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4620      	mov	r0, r4
 80017ee:	4629      	mov	r1, r5
 80017f0:	f7fe fd54 	bl	800029c <__adddf3>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff f9dc 	bl	8000bb8 <__aeabi_d2f>
 8001800:	4603      	mov	r3, r0
 8001802:	4a31      	ldr	r2, [pc, #196]	; (80018c8 <PID+0x220>)
 8001804:	6013      	str	r3, [r2, #0]
		ui=previous_ui+Ki*AntiWindupError*0.8;
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <PID+0x20c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fea4 	bl	8000558 <__aeabi_f2d>
 8001810:	4604      	mov	r4, r0
 8001812:	460d      	mov	r5, r1
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <PID+0x220>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe9d 	bl	8000558 <__aeabi_f2d>
 800181e:	a31a      	add	r3, pc, #104	; (adr r3, 8001888 <PID+0x1e0>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7fe fef0 	bl	8000608 <__aeabi_dmul>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	a31b      	add	r3, pc, #108	; (adr r3, 80018a0 <PID+0x1f8>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7fe fee7 	bl	8000608 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f7fe fd2b 	bl	800029c <__adddf3>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f9b3 	bl	8000bb8 <__aeabi_d2f>
 8001852:	4603      	mov	r3, r0
 8001854:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <PID+0x210>)
 8001856:	6013      	str	r3, [r2, #0]
		*PidOutput=uk+ui;
 8001858:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <PID+0x208>)
 800185a:	ed93 7a00 	vldr	s14, [r3]
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <PID+0x210>)
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	edc3 7a00 	vstr	s15, [r3]
	}
	previous_ui=ui;
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <PID+0x210>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <PID+0x20c>)
 8001874:	6013      	str	r3, [r2, #0]
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bdb0      	pop	{r4, r5, r7, pc}
 800187e:	bf00      	nop
 8001880:	3b645a1d 	.word	0x3b645a1d
 8001884:	3fcd4fdf 	.word	0x3fcd4fdf
 8001888:	9999999a 	.word	0x9999999a
 800188c:	402e9999 	.word	0x402e9999
 8001890:	9999999a 	.word	0x9999999a
 8001894:	3fb99999 	.word	0x3fb99999
 8001898:	fdf3b646 	.word	0xfdf3b646
 800189c:	403638d4 	.word	0x403638d4
 80018a0:	9999999a 	.word	0x9999999a
 80018a4:	3fe99999 	.word	0x3fe99999
 80018a8:	43c80000 	.word	0x43c80000
 80018ac:	20000224 	.word	0x20000224
 80018b0:	20000228 	.word	0x20000228
 80018b4:	2000022c 	.word	0x2000022c
 80018b8:	20000230 	.word	0x20000230
 80018bc:	20000234 	.word	0x20000234
 80018c0:	20000238 	.word	0x20000238
 80018c4:	20000298 	.word	0x20000298
 80018c8:	20000274 	.word	0x20000274

080018cc <ReadEncoder>:

void ReadEncoder()
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <ComputeVelocity>:

void ComputeVelocity()
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80018f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018f4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001900:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001904:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001908:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00b      	beq.n	8001928 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001910:	e000      	b.n	8001914 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001912:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001914:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f9      	beq.n	8001912 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800191e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001928:	687b      	ldr	r3, [r7, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <_write>:

/* USER CODE BEGIN PFP */

/* We need data to calculate PID param, hence we write data into a file.txt */
int _write(int file, char *ptr, int len)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e009      	b.n	8001960 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ffc7 	bl	80018e8 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf1      	blt.n	800194c <_write+0x16>
  return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001978:	f000 ff16 	bl	80027a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800197c:	f000 f868 	bl	8001a50 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001980:	f000 f8ce 	bl	8001b20 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001984:	f000 fa7c 	bl	8001e80 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001988:	f000 f8ea 	bl	8001b60 <MX_I2C1_Init>
  MX_I2S2_Init();
 800198c:	f000 f916 	bl	8001bbc <MX_I2S2_Init>
  MX_I2S3_Init();
 8001990:	f000 f942 	bl	8001c18 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001994:	f000 f970 	bl	8001c78 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001998:	f008 fa5e 	bl	8009e58 <MX_USB_HOST_Init>
  MX_TIM3_Init();
 800199c:	f000 f9ee 	bl	8001d7c <MX_TIM3_Init>
  MX_TIM2_Init();
 80019a0:	f000 f9a0 	bl	8001ce4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80019a4:	4823      	ldr	r0, [pc, #140]	; (8001a34 <main+0xc0>)
 80019a6:	f004 fb0f 	bl	8005fc8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80019aa:	2100      	movs	r1, #0
 80019ac:	4822      	ldr	r0, [pc, #136]	; (8001a38 <main+0xc4>)
 80019ae:	f004 fbc7 	bl	8006140 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80019b2:	2108      	movs	r1, #8
 80019b4:	4820      	ldr	r0, [pc, #128]	; (8001a38 <main+0xc4>)
 80019b6:	f004 fbc3 	bl	8006140 <HAL_TIM_PWM_Start>

  // IN3,IN4 pin	(motor A)
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_RESET);    // (0,1): < 0: forward. (1,0): >0 : reverse.
 80019ba:	2200      	movs	r2, #0
 80019bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c0:	481e      	ldr	r0, [pc, #120]	; (8001a3c <main+0xc8>)
 80019c2:	f001 fa35 	bl	8002e30 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 80019c6:	2201      	movs	r2, #1
 80019c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019cc:	481b      	ldr	r0, [pc, #108]	; (8001a3c <main+0xc8>)
 80019ce:	f001 fa2f 	bl	8002e30 <HAL_GPIO_WritePin>

  // IN1,IN2 pin   (motor B)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2102      	movs	r1, #2
 80019d6:	481a      	ldr	r0, [pc, #104]	; (8001a40 <main+0xcc>)
 80019d8:	f001 fa2a 	bl	8002e30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 80019dc:	2201      	movs	r2, #1
 80019de:	2104      	movs	r1, #4
 80019e0:	4817      	ldr	r0, [pc, #92]	; (8001a40 <main+0xcc>)
 80019e2:	f001 fa25 	bl	8002e30 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80019e6:	f008 fa5d 	bl	8009ea4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    ReadEncoder();
 80019ea:	f7ff ff6f 	bl	80018cc <ReadEncoder>
    ComputeVelocity();
 80019ee:	f7ff ff74 	bl	80018da <ComputeVelocity>
    PID(&SetPoint,&rpm_right_velocity,&PidOut);
 80019f2:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <main+0xd0>)
 80019f4:	4914      	ldr	r1, [pc, #80]	; (8001a48 <main+0xd4>)
 80019f6:	4815      	ldr	r0, [pc, #84]	; (8001a4c <main+0xd8>)
 80019f8:	f7ff fe56 	bl	80016a8 <PID>
    HAL_Delay(100);
 80019fc:	2064      	movs	r0, #100	; 0x64
 80019fe:	f000 ff45 	bl	800288c <HAL_Delay>
	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,fabs(PidOut));
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <main+0xd0>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	eef0 7ae7 	vabs.f32	s15, s15
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <main+0xc4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a14:	ee17 2a90 	vmov	r2, s15
 8001a18:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,fabs(PidOut));
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <main+0xd0>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	eef0 7ae7 	vabs.f32	s15, s15
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <main+0xc4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a2c:	ee17 2a90 	vmov	r2, s15
 8001a30:	635a      	str	r2, [r3, #52]	; 0x34
    MX_USB_HOST_Process();
 8001a32:	e7d8      	b.n	80019e6 <main+0x72>
 8001a34:	20000398 	.word	0x20000398
 8001a38:	200002f8 	.word	0x200002f8
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40020400 	.word	0x40020400
 8001a44:	20000470 	.word	0x20000470
 8001a48:	2000029c 	.word	0x2000029c
 8001a4c:	20000000 	.word	0x20000000

08001a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b094      	sub	sp, #80	; 0x50
 8001a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a56:	f107 0320 	add.w	r3, r7, #32
 8001a5a:	2230      	movs	r2, #48	; 0x30
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f008 fd3c 	bl	800a4dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <SystemClock_Config+0xc8>)
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	4a26      	ldr	r2, [pc, #152]	; (8001b18 <SystemClock_Config+0xc8>)
 8001a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a82:	6413      	str	r3, [r2, #64]	; 0x40
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <SystemClock_Config+0xc8>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <SystemClock_Config+0xcc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a20      	ldr	r2, [pc, #128]	; (8001b1c <SystemClock_Config+0xcc>)
 8001a9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <SystemClock_Config+0xcc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aac:	2301      	movs	r3, #1
 8001aae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ab0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ac4:	23c0      	movs	r3, #192	; 0xc0
 8001ac6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ac8:	2304      	movs	r3, #4
 8001aca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001acc:	2308      	movs	r3, #8
 8001ace:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad0:	f107 0320 	add.w	r3, r7, #32
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 fbcb 	bl	8005270 <HAL_RCC_OscConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ae0:	f000 faf2 	bl	80020c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae4:	230f      	movs	r3, #15
 8001ae6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001af0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001af4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001afa:	f107 030c 	add.w	r3, r7, #12
 8001afe:	2103      	movs	r1, #3
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 fe2d 	bl	8005760 <HAL_RCC_ClockConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b0c:	f000 fadc 	bl	80020c8 <Error_Handler>
  }
}
 8001b10:	bf00      	nop
 8001b12:	3750      	adds	r7, #80	; 0x50
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40007000 	.word	0x40007000

08001b20 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b26:	463b      	mov	r3, r7
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
 8001b34:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b36:	2301      	movs	r3, #1
 8001b38:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001b3a:	23c8      	movs	r3, #200	; 0xc8
 8001b3c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001b3e:	2305      	movs	r3, #5
 8001b40:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b42:	2302      	movs	r3, #2
 8001b44:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b46:	463b      	mov	r3, r7
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f004 f815 	bl	8005b78 <HAL_RCCEx_PeriphCLKConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001b54:	f000 fab8 	bl	80020c8 <Error_Handler>
  }
}
 8001b58:	bf00      	nop
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <MX_I2C1_Init+0x50>)
 8001b66:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <MX_I2C1_Init+0x54>)
 8001b68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_I2C1_Init+0x50>)
 8001b6c:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <MX_I2C1_Init+0x58>)
 8001b6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_I2C1_Init+0x50>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_I2C1_Init+0x50>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <MX_I2C1_Init+0x50>)
 8001b7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <MX_I2C1_Init+0x50>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_I2C1_Init+0x50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <MX_I2C1_Init+0x50>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_I2C1_Init+0x50>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b9c:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <MX_I2C1_Init+0x50>)
 8001b9e:	f002 fd83 	bl	80046a8 <HAL_I2C_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ba8:	f000 fa8e 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200002a4 	.word	0x200002a4
 8001bb4:	40005400 	.word	0x40005400
 8001bb8:	000186a0 	.word	0x000186a0

08001bbc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <MX_I2S2_Init+0x50>)
 8001bc2:	4a13      	ldr	r2, [pc, #76]	; (8001c10 <MX_I2S2_Init+0x54>)
 8001bc4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_I2S2_Init+0x50>)
 8001bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bcc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <MX_I2S2_Init+0x50>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <MX_I2S2_Init+0x50>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <MX_I2S2_Init+0x50>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <MX_I2S2_Init+0x50>)
 8001be2:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <MX_I2S2_Init+0x58>)
 8001be4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_I2S2_Init+0x50>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <MX_I2S2_Init+0x50>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_I2S2_Init+0x50>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001bf8:	4804      	ldr	r0, [pc, #16]	; (8001c0c <MX_I2S2_Init+0x50>)
 8001bfa:	f002 fe99 	bl	8004930 <HAL_I2S_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001c04:	f000 fa60 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200003e0 	.word	0x200003e0
 8001c10:	40003800 	.word	0x40003800
 8001c14:	00017700 	.word	0x00017700

08001c18 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <MX_I2S3_Init+0x54>)
 8001c1e:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <MX_I2S3_Init+0x58>)
 8001c20:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <MX_I2S3_Init+0x54>)
 8001c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c28:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <MX_I2S3_Init+0x54>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <MX_I2S3_Init+0x54>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <MX_I2S3_Init+0x54>)
 8001c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <MX_I2S3_Init+0x54>)
 8001c40:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <MX_I2S3_Init+0x5c>)
 8001c42:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <MX_I2S3_Init+0x54>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <MX_I2S3_Init+0x54>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MX_I2S3_Init+0x54>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_I2S3_Init+0x54>)
 8001c58:	f002 fe6a 	bl	8004930 <HAL_I2S_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001c62:	f000 fa31 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000428 	.word	0x20000428
 8001c70:	40003c00 	.word	0x40003c00
 8001c74:	00017700 	.word	0x00017700

08001c78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c7c:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <MX_SPI1_Init+0x64>)
 8001c7e:	4a18      	ldr	r2, [pc, #96]	; (8001ce0 <MX_SPI1_Init+0x68>)
 8001c80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <MX_SPI1_Init+0x64>)
 8001c84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <MX_SPI1_Init+0x64>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <MX_SPI1_Init+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <MX_SPI1_Init+0x64>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <MX_SPI1_Init+0x64>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <MX_SPI1_Init+0x64>)
 8001ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <MX_SPI1_Init+0x64>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <MX_SPI1_Init+0x64>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <MX_SPI1_Init+0x64>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cbc:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <MX_SPI1_Init+0x64>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <MX_SPI1_Init+0x64>)
 8001cc4:	220a      	movs	r2, #10
 8001cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cc8:	4804      	ldr	r0, [pc, #16]	; (8001cdc <MX_SPI1_Init+0x64>)
 8001cca:	f004 f8a5 	bl	8005e18 <HAL_SPI_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cd4:	f000 f9f8 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000340 	.word	0x20000340
 8001ce0:	40013000 	.word	0x40013000

08001ce4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cea:	f107 0308 	add.w	r3, r7, #8
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d0a:	222f      	movs	r2, #47	; 0x2f
 8001d0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d28:	4813      	ldr	r0, [pc, #76]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d2a:	f004 f8fe 	bl	8005f2a <HAL_TIM_Base_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d34:	f000 f9c8 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d3e:	f107 0308 	add.w	r3, r7, #8
 8001d42:	4619      	mov	r1, r3
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d46:	f004 fc75 	bl	8006634 <HAL_TIM_ConfigClockSource>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d50:	f000 f9ba 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4805      	ldr	r0, [pc, #20]	; (8001d78 <MX_TIM2_Init+0x94>)
 8001d62:	f005 f823 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d6c:	f000 f9ac 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d70:	bf00      	nop
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000398 	.word	0x20000398

08001d7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08e      	sub	sp, #56	; 0x38
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d90:	f107 0320 	add.w	r3, r7, #32
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
 8001da8:	615a      	str	r2, [r3, #20]
 8001daa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dac:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <MX_TIM3_Init+0xfc>)
 8001dae:	4a33      	ldr	r2, [pc, #204]	; (8001e7c <MX_TIM3_Init+0x100>)
 8001db0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 8001db2:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <MX_TIM3_Init+0xfc>)
 8001db4:	220b      	movs	r2, #11
 8001db6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db8:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <MX_TIM3_Init+0xfc>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 8001dbe:	4b2e      	ldr	r3, [pc, #184]	; (8001e78 <MX_TIM3_Init+0xfc>)
 8001dc0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001dc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc6:	4b2c      	ldr	r3, [pc, #176]	; (8001e78 <MX_TIM3_Init+0xfc>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <MX_TIM3_Init+0xfc>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dd2:	4829      	ldr	r0, [pc, #164]	; (8001e78 <MX_TIM3_Init+0xfc>)
 8001dd4:	f004 f8a9 	bl	8005f2a <HAL_TIM_Base_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001dde:	f000 f973 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001de8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dec:	4619      	mov	r1, r3
 8001dee:	4822      	ldr	r0, [pc, #136]	; (8001e78 <MX_TIM3_Init+0xfc>)
 8001df0:	f004 fc20 	bl	8006634 <HAL_TIM_ConfigClockSource>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001dfa:	f000 f965 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dfe:	481e      	ldr	r0, [pc, #120]	; (8001e78 <MX_TIM3_Init+0xfc>)
 8001e00:	f004 f944 	bl	800608c <HAL_TIM_PWM_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e0a:	f000 f95d 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e16:	f107 0320 	add.w	r3, r7, #32
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4816      	ldr	r0, [pc, #88]	; (8001e78 <MX_TIM3_Init+0xfc>)
 8001e1e:	f004 ffc5 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e28:	f000 f94e 	bl	80020c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e2c:	2360      	movs	r3, #96	; 0x60
 8001e2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	2200      	movs	r2, #0
 8001e40:	4619      	mov	r1, r3
 8001e42:	480d      	ldr	r0, [pc, #52]	; (8001e78 <MX_TIM3_Init+0xfc>)
 8001e44:	f004 fb34 	bl	80064b0 <HAL_TIM_PWM_ConfigChannel>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e4e:	f000 f93b 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	2208      	movs	r2, #8
 8001e56:	4619      	mov	r1, r3
 8001e58:	4807      	ldr	r0, [pc, #28]	; (8001e78 <MX_TIM3_Init+0xfc>)
 8001e5a:	f004 fb29 	bl	80064b0 <HAL_TIM_PWM_ConfigChannel>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001e64:	f000 f930 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e68:	4803      	ldr	r0, [pc, #12]	; (8001e78 <MX_TIM3_Init+0xfc>)
 8001e6a:	f000 fafd 	bl	8002468 <HAL_TIM_MspPostInit>

}
 8001e6e:	bf00      	nop
 8001e70:	3738      	adds	r7, #56	; 0x38
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200002f8 	.word	0x200002f8
 8001e7c:	40000400 	.word	0x40000400

08001e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08c      	sub	sp, #48	; 0x30
 8001e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e86:	f107 031c 	add.w	r3, r7, #28
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	4b85      	ldr	r3, [pc, #532]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a84      	ldr	r2, [pc, #528]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001ea0:	f043 0310 	orr.w	r3, r3, #16
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b82      	ldr	r3, [pc, #520]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	4b7e      	ldr	r3, [pc, #504]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a7d      	ldr	r2, [pc, #500]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b7b      	ldr	r3, [pc, #492]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b77      	ldr	r3, [pc, #476]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a76      	ldr	r2, [pc, #472]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b74      	ldr	r3, [pc, #464]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b70      	ldr	r3, [pc, #448]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a6f      	ldr	r2, [pc, #444]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b6d      	ldr	r3, [pc, #436]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	4b69      	ldr	r3, [pc, #420]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a68      	ldr	r2, [pc, #416]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b66      	ldr	r3, [pc, #408]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	4b62      	ldr	r3, [pc, #392]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a61      	ldr	r2, [pc, #388]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001f2c:	f043 0308 	orr.w	r3, r3, #8
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b5f      	ldr	r3, [pc, #380]	; (80020b0 <MX_GPIO_Init+0x230>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f44f 7142 	mov.w	r1, #776	; 0x308
 8001f44:	485b      	ldr	r0, [pc, #364]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001f46:	f000 ff73 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	485a      	ldr	r0, [pc, #360]	; (80020b8 <MX_GPIO_Init+0x238>)
 8001f50:	f000 ff6e 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8001f54:	2200      	movs	r2, #0
 8001f56:	2106      	movs	r1, #6
 8001f58:	4858      	ldr	r0, [pc, #352]	; (80020bc <MX_GPIO_Init+0x23c>)
 8001f5a:	f000 ff69 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001f64:	4856      	ldr	r0, [pc, #344]	; (80020c0 <MX_GPIO_Init+0x240>)
 8001f66:	f000 ff63 	bl	8002e30 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	484d      	ldr	r0, [pc, #308]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001f7e:	f000 fdbb 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|IN3_Pin|IN4_Pin;
 8001f82:	f44f 7342 	mov.w	r3, #776	; 0x308
 8001f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4846      	ldr	r0, [pc, #280]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001f9c:	f000 fdac 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001fa0:	2332      	movs	r3, #50	; 0x32
 8001fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fa4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fae:	f107 031c 	add.w	r3, r7, #28
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	483f      	ldr	r0, [pc, #252]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001fb6:	f000 fd9f 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001fca:	f107 031c 	add.w	r3, r7, #28
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4839      	ldr	r0, [pc, #228]	; (80020b8 <MX_GPIO_Init+0x238>)
 8001fd2:	f000 fd91 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fda:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4836      	ldr	r0, [pc, #216]	; (80020c4 <MX_GPIO_Init+0x244>)
 8001fec:	f000 fd84 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8001ff0:	2306      	movs	r3, #6
 8001ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	4619      	mov	r1, r3
 8002006:	482d      	ldr	r0, [pc, #180]	; (80020bc <MX_GPIO_Init+0x23c>)
 8002008:	f000 fd76 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_ENCODER_A_Pin LEFT_ENCODER_B_Pin RIGHT_ENCODER_A_Pin RIGHT_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = LEFT_ENCODER_A_Pin|LEFT_ENCODER_B_Pin|RIGHT_ENCODER_A_Pin|RIGHT_ENCODER_B_Pin;
 800200c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002012:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800201c:	f107 031c 	add.w	r3, r7, #28
 8002020:	4619      	mov	r1, r3
 8002022:	4824      	ldr	r0, [pc, #144]	; (80020b4 <MX_GPIO_Init+0x234>)
 8002024:	f000 fd68 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002028:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800202c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800202e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	481f      	ldr	r0, [pc, #124]	; (80020bc <MX_GPIO_Init+0x23c>)
 8002040:	f000 fd5a 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800204a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800204e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	4619      	mov	r1, r3
 800205a:	4819      	ldr	r0, [pc, #100]	; (80020c0 <MX_GPIO_Init+0x240>)
 800205c:	f000 fd4c 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002060:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002064:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002066:	2301      	movs	r3, #1
 8002068:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	4619      	mov	r1, r3
 8002078:	4811      	ldr	r0, [pc, #68]	; (80020c0 <MX_GPIO_Init+0x240>)
 800207a:	f000 fd3d 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800207e:	2320      	movs	r3, #32
 8002080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	4619      	mov	r1, r3
 8002090:	480b      	ldr	r0, [pc, #44]	; (80020c0 <MX_GPIO_Init+0x240>)
 8002092:	f000 fd31 	bl	8002af8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	2028      	movs	r0, #40	; 0x28
 800209c:	f000 fcf5 	bl	8002a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020a0:	2028      	movs	r0, #40	; 0x28
 80020a2:	f000 fd0e 	bl	8002ac2 <HAL_NVIC_EnableIRQ>

}
 80020a6:	bf00      	nop
 80020a8:	3730      	adds	r7, #48	; 0x30
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40020800 	.word	0x40020800
 80020bc:	40020400 	.word	0x40020400
 80020c0:	40020c00 	.word	0x40020c00
 80020c4:	40020000 	.word	0x40020000

080020c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020cc:	b672      	cpsid	i
}
 80020ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <Error_Handler+0x8>
	...

080020d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <HAL_MspInit+0x4c>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <HAL_MspInit+0x4c>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_MspInit+0x4c>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_MspInit+0x4c>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a08      	ldr	r2, [pc, #32]	; (8002120 <HAL_MspInit+0x4c>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_MspInit+0x4c>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002112:	2007      	movs	r0, #7
 8002114:	f000 fcae 	bl	8002a74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40023800 	.word	0x40023800

08002124 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a19      	ldr	r2, [pc, #100]	; (80021a8 <HAL_I2C_MspInit+0x84>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d12c      	bne.n	80021a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	4b18      	ldr	r3, [pc, #96]	; (80021ac <HAL_I2C_MspInit+0x88>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a17      	ldr	r2, [pc, #92]	; (80021ac <HAL_I2C_MspInit+0x88>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_I2C_MspInit+0x88>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002162:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002168:	2312      	movs	r3, #18
 800216a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800216c:	2301      	movs	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002174:	2304      	movs	r3, #4
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4619      	mov	r1, r3
 800217e:	480c      	ldr	r0, [pc, #48]	; (80021b0 <HAL_I2C_MspInit+0x8c>)
 8002180:	f000 fcba 	bl	8002af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_I2C_MspInit+0x88>)
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	4a07      	ldr	r2, [pc, #28]	; (80021ac <HAL_I2C_MspInit+0x88>)
 800218e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002192:	6413      	str	r3, [r2, #64]	; 0x40
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_I2C_MspInit+0x88>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021a0:	bf00      	nop
 80021a2:	3728      	adds	r7, #40	; 0x28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40005400 	.word	0x40005400
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40020400 	.word	0x40020400

080021b4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08e      	sub	sp, #56	; 0x38
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a59      	ldr	r2, [pc, #356]	; (8002338 <HAL_I2S_MspInit+0x184>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d15b      	bne.n	800228e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
 80021da:	4b58      	ldr	r3, [pc, #352]	; (800233c <HAL_I2S_MspInit+0x188>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a57      	ldr	r2, [pc, #348]	; (800233c <HAL_I2S_MspInit+0x188>)
 80021e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
 80021e6:	4b55      	ldr	r3, [pc, #340]	; (800233c <HAL_I2S_MspInit+0x188>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ee:	623b      	str	r3, [r7, #32]
 80021f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	4b51      	ldr	r3, [pc, #324]	; (800233c <HAL_I2S_MspInit+0x188>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a50      	ldr	r2, [pc, #320]	; (800233c <HAL_I2S_MspInit+0x188>)
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b4e      	ldr	r3, [pc, #312]	; (800233c <HAL_I2S_MspInit+0x188>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	61fb      	str	r3, [r7, #28]
 800220c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	4b4a      	ldr	r3, [pc, #296]	; (800233c <HAL_I2S_MspInit+0x188>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a49      	ldr	r2, [pc, #292]	; (800233c <HAL_I2S_MspInit+0x188>)
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_I2S_MspInit+0x188>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800222a:	2304      	movs	r3, #4
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800223a:	2306      	movs	r3, #6
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002242:	4619      	mov	r1, r3
 8002244:	483e      	ldr	r0, [pc, #248]	; (8002340 <HAL_I2S_MspInit+0x18c>)
 8002246:	f000 fc57 	bl	8002af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800224a:	2308      	movs	r3, #8
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800225a:	2305      	movs	r3, #5
 800225c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800225e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002262:	4619      	mov	r1, r3
 8002264:	4836      	ldr	r0, [pc, #216]	; (8002340 <HAL_I2S_MspInit+0x18c>)
 8002266:	f000 fc47 	bl	8002af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800226a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800227c:	2305      	movs	r3, #5
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002284:	4619      	mov	r1, r3
 8002286:	482f      	ldr	r0, [pc, #188]	; (8002344 <HAL_I2S_MspInit+0x190>)
 8002288:	f000 fc36 	bl	8002af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800228c:	e04f      	b.n	800232e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2d      	ldr	r2, [pc, #180]	; (8002348 <HAL_I2S_MspInit+0x194>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d14a      	bne.n	800232e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	4b27      	ldr	r3, [pc, #156]	; (800233c <HAL_I2S_MspInit+0x188>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	4a26      	ldr	r2, [pc, #152]	; (800233c <HAL_I2S_MspInit+0x188>)
 80022a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a6:	6413      	str	r3, [r2, #64]	; 0x40
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_I2S_MspInit+0x188>)
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b4:	2300      	movs	r3, #0
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_I2S_MspInit+0x188>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	4a1f      	ldr	r2, [pc, #124]	; (800233c <HAL_I2S_MspInit+0x188>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6313      	str	r3, [r2, #48]	; 0x30
 80022c4:	4b1d      	ldr	r3, [pc, #116]	; (800233c <HAL_I2S_MspInit+0x188>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_I2S_MspInit+0x188>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	4a18      	ldr	r2, [pc, #96]	; (800233c <HAL_I2S_MspInit+0x188>)
 80022da:	f043 0304 	orr.w	r3, r3, #4
 80022de:	6313      	str	r3, [r2, #48]	; 0x30
 80022e0:	4b16      	ldr	r3, [pc, #88]	; (800233c <HAL_I2S_MspInit+0x188>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80022ec:	2310      	movs	r3, #16
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022fc:	2306      	movs	r3, #6
 80022fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002304:	4619      	mov	r1, r3
 8002306:	4811      	ldr	r0, [pc, #68]	; (800234c <HAL_I2S_MspInit+0x198>)
 8002308:	f000 fbf6 	bl	8002af8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800230c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800231e:	2306      	movs	r3, #6
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002326:	4619      	mov	r1, r3
 8002328:	4805      	ldr	r0, [pc, #20]	; (8002340 <HAL_I2S_MspInit+0x18c>)
 800232a:	f000 fbe5 	bl	8002af8 <HAL_GPIO_Init>
}
 800232e:	bf00      	nop
 8002330:	3738      	adds	r7, #56	; 0x38
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40003800 	.word	0x40003800
 800233c:	40023800 	.word	0x40023800
 8002340:	40020800 	.word	0x40020800
 8002344:	40020400 	.word	0x40020400
 8002348:	40003c00 	.word	0x40003c00
 800234c:	40020000 	.word	0x40020000

08002350 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a19      	ldr	r2, [pc, #100]	; (80023d4 <HAL_SPI_MspInit+0x84>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d12b      	bne.n	80023ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <HAL_SPI_MspInit+0x88>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	4a17      	ldr	r2, [pc, #92]	; (80023d8 <HAL_SPI_MspInit+0x88>)
 800237c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002380:	6453      	str	r3, [r2, #68]	; 0x44
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <HAL_SPI_MspInit+0x88>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_SPI_MspInit+0x88>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a10      	ldr	r2, [pc, #64]	; (80023d8 <HAL_SPI_MspInit+0x88>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_SPI_MspInit+0x88>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80023aa:	23e0      	movs	r3, #224	; 0xe0
 80023ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b6:	2303      	movs	r3, #3
 80023b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023ba:	2305      	movs	r3, #5
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023be:	f107 0314 	add.w	r3, r7, #20
 80023c2:	4619      	mov	r1, r3
 80023c4:	4805      	ldr	r0, [pc, #20]	; (80023dc <HAL_SPI_MspInit+0x8c>)
 80023c6:	f000 fb97 	bl	8002af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023ca:	bf00      	nop
 80023cc:	3728      	adds	r7, #40	; 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40013000 	.word	0x40013000
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40020000 	.word	0x40020000

080023e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f0:	d116      	bne.n	8002420 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <HAL_TIM_Base_MspInit+0x80>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	4a19      	ldr	r2, [pc, #100]	; (8002460 <HAL_TIM_Base_MspInit+0x80>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6413      	str	r3, [r2, #64]	; 0x40
 8002402:	4b17      	ldr	r3, [pc, #92]	; (8002460 <HAL_TIM_Base_MspInit+0x80>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800240e:	2202      	movs	r2, #2
 8002410:	2100      	movs	r1, #0
 8002412:	201c      	movs	r0, #28
 8002414:	f000 fb39 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002418:	201c      	movs	r0, #28
 800241a:	f000 fb52 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800241e:	e01a      	b.n	8002456 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0f      	ldr	r2, [pc, #60]	; (8002464 <HAL_TIM_Base_MspInit+0x84>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d115      	bne.n	8002456 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <HAL_TIM_Base_MspInit+0x80>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <HAL_TIM_Base_MspInit+0x80>)
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	6413      	str	r3, [r2, #64]	; 0x40
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <HAL_TIM_Base_MspInit+0x80>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 3);
 8002446:	2203      	movs	r2, #3
 8002448:	2100      	movs	r1, #0
 800244a:	201d      	movs	r0, #29
 800244c:	f000 fb1d 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002450:	201d      	movs	r0, #29
 8002452:	f000 fb36 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	40000400 	.word	0x40000400

08002468 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	; 0x28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 0314 	add.w	r3, r7, #20
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a21      	ldr	r2, [pc, #132]	; (800250c <HAL_TIM_MspPostInit+0xa4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d13b      	bne.n	8002502 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_TIM_MspPostInit+0xa8>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a1f      	ldr	r2, [pc, #124]	; (8002510 <HAL_TIM_MspPostInit+0xa8>)
 8002494:	f043 0302 	orr.w	r3, r3, #2
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <HAL_TIM_MspPostInit+0xa8>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_TIM_MspPostInit+0xa8>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4a18      	ldr	r2, [pc, #96]	; (8002510 <HAL_TIM_MspPostInit+0xa8>)
 80024b0:	f043 0304 	orr.w	r3, r3, #4
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <HAL_TIM_MspPostInit+0xa8>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024c2:	2301      	movs	r3, #1
 80024c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ce:	2300      	movs	r3, #0
 80024d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024d2:	2302      	movs	r3, #2
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d6:	f107 0314 	add.w	r3, r7, #20
 80024da:	4619      	mov	r1, r3
 80024dc:	480d      	ldr	r0, [pc, #52]	; (8002514 <HAL_TIM_MspPostInit+0xac>)
 80024de:	f000 fb0b 	bl	8002af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024e2:	2340      	movs	r3, #64	; 0x40
 80024e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024f2:	2302      	movs	r3, #2
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4619      	mov	r1, r3
 80024fc:	4806      	ldr	r0, [pc, #24]	; (8002518 <HAL_TIM_MspPostInit+0xb0>)
 80024fe:	f000 fafb 	bl	8002af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002502:	bf00      	nop
 8002504:	3728      	adds	r7, #40	; 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40000400 	.word	0x40000400
 8002510:	40023800 	.word	0x40023800
 8002514:	40020400 	.word	0x40020400
 8002518:	40020800 	.word	0x40020800

0800251c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002520:	e7fe      	b.n	8002520 <NMI_Handler+0x4>

08002522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002526:	e7fe      	b.n	8002526 <HardFault_Handler+0x4>

08002528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800252c:	e7fe      	b.n	800252c <MemManage_Handler+0x4>

0800252e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002532:	e7fe      	b.n	8002532 <BusFault_Handler+0x4>

08002534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <UsageFault_Handler+0x4>

0800253a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002568:	f000 f970 	bl	800284c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}

08002570 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <TIM2_IRQHandler+0x10>)
 8002576:	f003 fe93 	bl	80062a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000398 	.word	0x20000398

08002584 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002588:	4802      	ldr	r0, [pc, #8]	; (8002594 <TIM3_IRQHandler+0x10>)
 800258a:	f003 fe89 	bl	80062a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200002f8 	.word	0x200002f8

08002598 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_ENCODER_A_Pin);
 800259c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025a0:	f000 fc60 	bl	8002e64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_ENCODER_B_Pin);
 80025a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80025a8:	f000 fc5c 	bl	8002e64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_ENCODER_A_Pin);
 80025ac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80025b0:	f000 fc58 	bl	8002e64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_ENCODER_B_Pin);
 80025b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025b8:	f000 fc54 	bl	8002e64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80025bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025c0:	f000 fc50 	bl	8002e64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <OTG_FS_IRQHandler+0x10>)
 80025ce:	f000 fecb 	bl	8003368 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000850 	.word	0x20000850

080025dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
	return 1;
 80025e0:	2301      	movs	r3, #1
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <_kill>:

int _kill(int pid, int sig)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025f6:	f007 ff37 	bl	800a468 <__errno>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2216      	movs	r2, #22
 80025fe:	601a      	str	r2, [r3, #0]
	return -1;
 8002600:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <_exit>:

void _exit (int status)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff ffe7 	bl	80025ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800261e:	e7fe      	b.n	800261e <_exit+0x12>

08002620 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	e00a      	b.n	8002648 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002632:	f3af 8000 	nop.w
 8002636:	4601      	mov	r1, r0
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	60ba      	str	r2, [r7, #8]
 800263e:	b2ca      	uxtb	r2, r1
 8002640:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3301      	adds	r3, #1
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	429a      	cmp	r2, r3
 800264e:	dbf0      	blt.n	8002632 <_read+0x12>
	}

return len;
 8002650:	687b      	ldr	r3, [r7, #4]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <_close>:
	}
	return len;
}

int _close(int file)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
	return -1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002682:	605a      	str	r2, [r3, #4]
	return 0;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <_isatty>:

int _isatty(int file)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
	return 1;
 800269a:	2301      	movs	r3, #1
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
	return 0;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <_sbrk+0x5c>)
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <_sbrk+0x60>)
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <_sbrk+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <_sbrk+0x64>)
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <_sbrk+0x68>)
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d207      	bcs.n	8002704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f4:	f007 feb8 	bl	800a468 <__errno>
 80026f8:	4603      	mov	r3, r0
 80026fa:	220c      	movs	r2, #12
 80026fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002702:	e009      	b.n	8002718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <_sbrk+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <_sbrk+0x64>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	4a05      	ldr	r2, [pc, #20]	; (8002728 <_sbrk+0x64>)
 8002714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20020000 	.word	0x20020000
 8002724:	00000400 	.word	0x00000400
 8002728:	2000023c 	.word	0x2000023c
 800272c:	20000b58 	.word	0x20000b58

08002730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <SystemInit+0x20>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <SystemInit+0x20>)
 800273c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800278c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002758:	480d      	ldr	r0, [pc, #52]	; (8002790 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800275a:	490e      	ldr	r1, [pc, #56]	; (8002794 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800275c:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002760:	e002      	b.n	8002768 <LoopCopyDataInit>

08002762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002766:	3304      	adds	r3, #4

08002768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800276c:	d3f9      	bcc.n	8002762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800276e:	4a0b      	ldr	r2, [pc, #44]	; (800279c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002770:	4c0b      	ldr	r4, [pc, #44]	; (80027a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002774:	e001      	b.n	800277a <LoopFillZerobss>

08002776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002778:	3204      	adds	r2, #4

0800277a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800277c:	d3fb      	bcc.n	8002776 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800277e:	f7ff ffd7 	bl	8002730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002782:	f007 fe77 	bl	800a474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002786:	f7ff f8f5 	bl	8001974 <main>
  bx  lr    
 800278a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800278c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002794:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002798:	0800d35c 	.word	0x0800d35c
  ldr r2, =_sbss
 800279c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80027a0:	20000b54 	.word	0x20000b54

080027a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a4:	e7fe      	b.n	80027a4 <ADC_IRQHandler>
	...

080027a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027ac:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <HAL_Init+0x40>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0d      	ldr	r2, [pc, #52]	; (80027e8 <HAL_Init+0x40>)
 80027b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_Init+0x40>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <HAL_Init+0x40>)
 80027be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <HAL_Init+0x40>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <HAL_Init+0x40>)
 80027ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d0:	2003      	movs	r0, #3
 80027d2:	f000 f94f 	bl	8002a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f000 f808 	bl	80027ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027dc:	f7ff fc7a 	bl	80020d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023c00 	.word	0x40023c00

080027ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_InitTick+0x54>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_InitTick+0x58>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	4619      	mov	r1, r3
 80027fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002802:	fbb3 f3f1 	udiv	r3, r3, r1
 8002806:	fbb2 f3f3 	udiv	r3, r2, r3
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f967 	bl	8002ade <HAL_SYSTICK_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e00e      	b.n	8002838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b0f      	cmp	r3, #15
 800281e:	d80a      	bhi.n	8002836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002820:	2200      	movs	r2, #0
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	f04f 30ff 	mov.w	r0, #4294967295
 8002828:	f000 f92f 	bl	8002a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800282c:	4a06      	ldr	r2, [pc, #24]	; (8002848 <HAL_InitTick+0x5c>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000004 	.word	0x20000004
 8002844:	2000000c 	.word	0x2000000c
 8002848:	20000008 	.word	0x20000008

0800284c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_IncTick+0x20>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_IncTick+0x24>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4413      	add	r3, r2
 800285c:	4a04      	ldr	r2, [pc, #16]	; (8002870 <HAL_IncTick+0x24>)
 800285e:	6013      	str	r3, [r2, #0]
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	2000000c 	.word	0x2000000c
 8002870:	20000474 	.word	0x20000474

08002874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return uwTick;
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <HAL_GetTick+0x14>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000474 	.word	0x20000474

0800288c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002894:	f7ff ffee 	bl	8002874 <HAL_GetTick>
 8002898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a4:	d005      	beq.n	80028b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_Delay+0x44>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028b2:	bf00      	nop
 80028b4:	f7ff ffde 	bl	8002874 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d8f7      	bhi.n	80028b4 <HAL_Delay+0x28>
  {
  }
}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	2000000c 	.word	0x2000000c

080028d4 <__NVIC_SetPriorityGrouping>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f0:	4013      	ands	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002906:	4a04      	ldr	r2, [pc, #16]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	60d3      	str	r3, [r2, #12]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_GetPriorityGrouping>:
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <__NVIC_GetPriorityGrouping+0x18>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	f003 0307 	and.w	r3, r3, #7
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_EnableIRQ>:
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	2b00      	cmp	r3, #0
 8002948:	db0b      	blt.n	8002962 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	4907      	ldr	r1, [pc, #28]	; (8002970 <__NVIC_EnableIRQ+0x38>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2001      	movs	r0, #1
 800295a:	fa00 f202 	lsl.w	r2, r0, r2
 800295e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000e100 	.word	0xe000e100

08002974 <__NVIC_SetPriority>:
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	db0a      	blt.n	800299e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	490c      	ldr	r1, [pc, #48]	; (80029c0 <__NVIC_SetPriority+0x4c>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	440b      	add	r3, r1
 8002998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800299c:	e00a      	b.n	80029b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4908      	ldr	r1, [pc, #32]	; (80029c4 <__NVIC_SetPriority+0x50>)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	3b04      	subs	r3, #4
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	440b      	add	r3, r1
 80029b2:	761a      	strb	r2, [r3, #24]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000e100 	.word	0xe000e100
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <NVIC_EncodePriority>:
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	; 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f1c3 0307 	rsb	r3, r3, #7
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	bf28      	it	cs
 80029e6:	2304      	movcs	r3, #4
 80029e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d902      	bls.n	80029f8 <NVIC_EncodePriority+0x30>
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3b03      	subs	r3, #3
 80029f6:	e000      	b.n	80029fa <NVIC_EncodePriority+0x32>
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43da      	mvns	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a10:	f04f 31ff 	mov.w	r1, #4294967295
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	4313      	orrs	r3, r2
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	; 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <SysTick_Config>:
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a40:	d301      	bcc.n	8002a46 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002a42:	2301      	movs	r3, #1
 8002a44:	e00f      	b.n	8002a66 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <SysTick_Config+0x40>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4e:	210f      	movs	r1, #15
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295
 8002a54:	f7ff ff8e 	bl	8002974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <SysTick_Config+0x40>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5e:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <SysTick_Config+0x40>)
 8002a60:	2207      	movs	r2, #7
 8002a62:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	e000e010 	.word	0xe000e010

08002a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ff29 	bl	80028d4 <__NVIC_SetPriorityGrouping>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a9c:	f7ff ff3e 	bl	800291c <__NVIC_GetPriorityGrouping>
 8002aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f7ff ff8e 	bl	80029c8 <NVIC_EncodePriority>
 8002aac:	4602      	mov	r2, r0
 8002aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff5d 	bl	8002974 <__NVIC_SetPriority>
}
 8002aba:	bf00      	nop
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff31 	bl	8002938 <__NVIC_EnableIRQ>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff ffa2 	bl	8002a30 <SysTick_Config>
 8002aec:	4603      	mov	r3, r0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	; 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	e159      	b.n	8002dc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b14:	2201      	movs	r2, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	f040 8148 	bne.w	8002dc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d005      	beq.n	8002b4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d130      	bne.n	8002bac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b80:	2201      	movs	r2, #1
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 0201 	and.w	r2, r3, #1
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d017      	beq.n	8002be8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d123      	bne.n	8002c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	08da      	lsrs	r2, r3, #3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3208      	adds	r2, #8
 8002bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	08da      	lsrs	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3208      	adds	r2, #8
 8002c36:	69b9      	ldr	r1, [r7, #24]
 8002c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	2203      	movs	r2, #3
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0203 	and.w	r2, r3, #3
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a2 	beq.w	8002dc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	4b57      	ldr	r3, [pc, #348]	; (8002de0 <HAL_GPIO_Init+0x2e8>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	4a56      	ldr	r2, [pc, #344]	; (8002de0 <HAL_GPIO_Init+0x2e8>)
 8002c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8e:	4b54      	ldr	r3, [pc, #336]	; (8002de0 <HAL_GPIO_Init+0x2e8>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c9a:	4a52      	ldr	r2, [pc, #328]	; (8002de4 <HAL_GPIO_Init+0x2ec>)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	089b      	lsrs	r3, r3, #2
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a49      	ldr	r2, [pc, #292]	; (8002de8 <HAL_GPIO_Init+0x2f0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d019      	beq.n	8002cfa <HAL_GPIO_Init+0x202>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a48      	ldr	r2, [pc, #288]	; (8002dec <HAL_GPIO_Init+0x2f4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x1fe>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a47      	ldr	r2, [pc, #284]	; (8002df0 <HAL_GPIO_Init+0x2f8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x1fa>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a46      	ldr	r2, [pc, #280]	; (8002df4 <HAL_GPIO_Init+0x2fc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x1f6>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a45      	ldr	r2, [pc, #276]	; (8002df8 <HAL_GPIO_Init+0x300>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x1f2>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	e008      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cea:	2307      	movs	r3, #7
 8002cec:	e006      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e004      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e002      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	f002 0203 	and.w	r2, r2, #3
 8002d02:	0092      	lsls	r2, r2, #2
 8002d04:	4093      	lsls	r3, r2
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d0c:	4935      	ldr	r1, [pc, #212]	; (8002de4 <HAL_GPIO_Init+0x2ec>)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	3302      	adds	r3, #2
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1a:	4b38      	ldr	r3, [pc, #224]	; (8002dfc <HAL_GPIO_Init+0x304>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3e:	4a2f      	ldr	r2, [pc, #188]	; (8002dfc <HAL_GPIO_Init+0x304>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d44:	4b2d      	ldr	r3, [pc, #180]	; (8002dfc <HAL_GPIO_Init+0x304>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d68:	4a24      	ldr	r2, [pc, #144]	; (8002dfc <HAL_GPIO_Init+0x304>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d6e:	4b23      	ldr	r3, [pc, #140]	; (8002dfc <HAL_GPIO_Init+0x304>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d92:	4a1a      	ldr	r2, [pc, #104]	; (8002dfc <HAL_GPIO_Init+0x304>)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d98:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <HAL_GPIO_Init+0x304>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dbc:	4a0f      	ldr	r2, [pc, #60]	; (8002dfc <HAL_GPIO_Init+0x304>)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b0f      	cmp	r3, #15
 8002dcc:	f67f aea2 	bls.w	8002b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	3724      	adds	r7, #36	; 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40013800 	.word	0x40013800
 8002de8:	40020000 	.word	0x40020000
 8002dec:	40020400 	.word	0x40020400
 8002df0:	40020800 	.word	0x40020800
 8002df4:	40020c00 	.word	0x40020c00
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40013c00 	.word	0x40013c00

08002e00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	887b      	ldrh	r3, [r7, #2]
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
 8002e1c:	e001      	b.n	8002e22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	807b      	strh	r3, [r7, #2]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e40:	787b      	ldrb	r3, [r7, #1]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e4c:	e003      	b.n	8002e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e4e:	887b      	ldrh	r3, [r7, #2]
 8002e50:	041a      	lsls	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	619a      	str	r2, [r3, #24]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d006      	beq.n	8002e88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e7a:	4a05      	ldr	r2, [pc, #20]	; (8002e90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe f86a 	bl	8000f5c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40013c00 	.word	0x40013c00

08002e94 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e96:	b08f      	sub	sp, #60	; 0x3c
 8002e98:	af0a      	add	r7, sp, #40	; 0x28
 8002e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e054      	b.n	8002f50 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f007 f827 	bl	8009f14 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2203      	movs	r2, #3
 8002eca:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d102      	bne.n	8002ee0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f004 f855 	bl	8006f94 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	687e      	ldr	r6, [r7, #4]
 8002ef2:	466d      	mov	r5, sp
 8002ef4:	f106 0410 	add.w	r4, r6, #16
 8002ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f04:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f08:	1d33      	adds	r3, r6, #4
 8002f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f0c:	6838      	ldr	r0, [r7, #0]
 8002f0e:	f003 ffcf 	bl	8006eb0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2101      	movs	r1, #1
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f004 f84c 	bl	8006fb6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	687e      	ldr	r6, [r7, #4]
 8002f26:	466d      	mov	r5, sp
 8002f28:	f106 0410 	add.w	r4, r6, #16
 8002f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f38:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f3c:	1d33      	adds	r3, r6, #4
 8002f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f40:	6838      	ldr	r0, [r7, #0]
 8002f42:	f004 f9d5 	bl	80072f0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f58 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af04      	add	r7, sp, #16
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	4608      	mov	r0, r1
 8002f62:	4611      	mov	r1, r2
 8002f64:	461a      	mov	r2, r3
 8002f66:	4603      	mov	r3, r0
 8002f68:	70fb      	strb	r3, [r7, #3]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	70bb      	strb	r3, [r7, #2]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_HCD_HC_Init+0x28>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e076      	b.n	800306e <HAL_HCD_HC_Init+0x116>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	333d      	adds	r3, #61	; 0x3d
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3338      	adds	r3, #56	; 0x38
 8002fa8:	787a      	ldrb	r2, [r7, #1]
 8002faa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	212c      	movs	r1, #44	; 0x2c
 8002fb2:	fb01 f303 	mul.w	r3, r1, r3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3340      	adds	r3, #64	; 0x40
 8002fba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002fbc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	3339      	adds	r3, #57	; 0x39
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	333f      	adds	r3, #63	; 0x3f
 8002fde:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002fe2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	78ba      	ldrb	r2, [r7, #2]
 8002fe8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fec:	b2d0      	uxtb	r0, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	333a      	adds	r3, #58	; 0x3a
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002ffe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003002:	2b00      	cmp	r3, #0
 8003004:	da09      	bge.n	800301a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	333b      	adds	r3, #59	; 0x3b
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]
 8003018:	e008      	b.n	800302c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	212c      	movs	r1, #44	; 0x2c
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	333b      	adds	r3, #59	; 0x3b
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	212c      	movs	r1, #44	; 0x2c
 8003032:	fb01 f303 	mul.w	r3, r1, r3
 8003036:	4413      	add	r3, r2
 8003038:	333c      	adds	r3, #60	; 0x3c
 800303a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800303e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	787c      	ldrb	r4, [r7, #1]
 8003046:	78ba      	ldrb	r2, [r7, #2]
 8003048:	78f9      	ldrb	r1, [r7, #3]
 800304a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800304c:	9302      	str	r3, [sp, #8]
 800304e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	4623      	mov	r3, r4
 800305c:	f004 face 	bl	80075fc <USB_HC_Init>
 8003060:	4603      	mov	r3, r0
 8003062:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800306c:	7bfb      	ldrb	r3, [r7, #15]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	bd90      	pop	{r4, r7, pc}

08003076 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	460b      	mov	r3, r1
 8003080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_HCD_HC_Halt+0x1e>
 8003090:	2302      	movs	r3, #2
 8003092:	e00f      	b.n	80030b4 <HAL_HCD_HC_Halt+0x3e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f004 fd1e 	bl	8007ae6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	4608      	mov	r0, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	70fb      	strb	r3, [r7, #3]
 80030ce:	460b      	mov	r3, r1
 80030d0:	70bb      	strb	r3, [r7, #2]
 80030d2:	4613      	mov	r3, r2
 80030d4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	212c      	movs	r1, #44	; 0x2c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	333b      	adds	r3, #59	; 0x3b
 80030e4:	78ba      	ldrb	r2, [r7, #2]
 80030e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	212c      	movs	r1, #44	; 0x2c
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	333f      	adds	r3, #63	; 0x3f
 80030f6:	787a      	ldrb	r2, [r7, #1]
 80030f8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80030fa:	7c3b      	ldrb	r3, [r7, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d112      	bne.n	8003126 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	3342      	adds	r3, #66	; 0x42
 800310e:	2203      	movs	r2, #3
 8003110:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	212c      	movs	r1, #44	; 0x2c
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	333d      	adds	r3, #61	; 0x3d
 8003120:	7f3a      	ldrb	r2, [r7, #28]
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	e008      	b.n	8003138 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	212c      	movs	r1, #44	; 0x2c
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	4413      	add	r3, r2
 8003132:	3342      	adds	r3, #66	; 0x42
 8003134:	2202      	movs	r2, #2
 8003136:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003138:	787b      	ldrb	r3, [r7, #1]
 800313a:	2b03      	cmp	r3, #3
 800313c:	f200 80c6 	bhi.w	80032cc <HAL_HCD_HC_SubmitRequest+0x210>
 8003140:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	08003159 	.word	0x08003159
 800314c:	080032b9 	.word	0x080032b9
 8003150:	080031bd 	.word	0x080031bd
 8003154:	0800323b 	.word	0x0800323b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003158:	7c3b      	ldrb	r3, [r7, #16]
 800315a:	2b01      	cmp	r3, #1
 800315c:	f040 80b8 	bne.w	80032d0 <HAL_HCD_HC_SubmitRequest+0x214>
 8003160:	78bb      	ldrb	r3, [r7, #2]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f040 80b4 	bne.w	80032d0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003168:	8b3b      	ldrh	r3, [r7, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d108      	bne.n	8003180 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	212c      	movs	r1, #44	; 0x2c
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4413      	add	r3, r2
 800317a:	3355      	adds	r3, #85	; 0x55
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3355      	adds	r3, #85	; 0x55
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d109      	bne.n	80031a8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	212c      	movs	r1, #44	; 0x2c
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4413      	add	r3, r2
 80031a0:	3342      	adds	r3, #66	; 0x42
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80031a6:	e093      	b.n	80032d0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	3342      	adds	r3, #66	; 0x42
 80031b6:	2202      	movs	r2, #2
 80031b8:	701a      	strb	r2, [r3, #0]
      break;
 80031ba:	e089      	b.n	80032d0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80031bc:	78bb      	ldrb	r3, [r7, #2]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d11d      	bne.n	80031fe <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	3355      	adds	r3, #85	; 0x55
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	3342      	adds	r3, #66	; 0x42
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80031e8:	e073      	b.n	80032d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	212c      	movs	r1, #44	; 0x2c
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	3342      	adds	r3, #66	; 0x42
 80031f8:	2202      	movs	r2, #2
 80031fa:	701a      	strb	r2, [r3, #0]
      break;
 80031fc:	e069      	b.n	80032d2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	212c      	movs	r1, #44	; 0x2c
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	4413      	add	r3, r2
 800320a:	3354      	adds	r3, #84	; 0x54
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	212c      	movs	r1, #44	; 0x2c
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	3342      	adds	r3, #66	; 0x42
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
      break;
 8003224:	e055      	b.n	80032d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	3342      	adds	r3, #66	; 0x42
 8003234:	2202      	movs	r2, #2
 8003236:	701a      	strb	r2, [r3, #0]
      break;
 8003238:	e04b      	b.n	80032d2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800323a:	78bb      	ldrb	r3, [r7, #2]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d11d      	bne.n	800327c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	212c      	movs	r1, #44	; 0x2c
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	3355      	adds	r3, #85	; 0x55
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d109      	bne.n	8003268 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	212c      	movs	r1, #44	; 0x2c
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	4413      	add	r3, r2
 8003260:	3342      	adds	r3, #66	; 0x42
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003266:	e034      	b.n	80032d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	3342      	adds	r3, #66	; 0x42
 8003276:	2202      	movs	r2, #2
 8003278:	701a      	strb	r2, [r3, #0]
      break;
 800327a:	e02a      	b.n	80032d2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	3354      	adds	r3, #84	; 0x54
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	3342      	adds	r3, #66	; 0x42
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
      break;
 80032a2:	e016      	b.n	80032d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	212c      	movs	r1, #44	; 0x2c
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	3342      	adds	r3, #66	; 0x42
 80032b2:	2202      	movs	r2, #2
 80032b4:	701a      	strb	r2, [r3, #0]
      break;
 80032b6:	e00c      	b.n	80032d2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	212c      	movs	r1, #44	; 0x2c
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	3342      	adds	r3, #66	; 0x42
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
      break;
 80032ca:	e002      	b.n	80032d2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80032cc:	bf00      	nop
 80032ce:	e000      	b.n	80032d2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80032d0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80032d2:	78fb      	ldrb	r3, [r7, #3]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	212c      	movs	r1, #44	; 0x2c
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	4413      	add	r3, r2
 80032de:	3344      	adds	r3, #68	; 0x44
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	8b3a      	ldrh	r2, [r7, #24]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	202c      	movs	r0, #44	; 0x2c
 80032ec:	fb00 f303 	mul.w	r3, r0, r3
 80032f0:	440b      	add	r3, r1
 80032f2:	334c      	adds	r3, #76	; 0x4c
 80032f4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	212c      	movs	r1, #44	; 0x2c
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	3360      	adds	r3, #96	; 0x60
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	212c      	movs	r1, #44	; 0x2c
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	4413      	add	r3, r2
 8003314:	3350      	adds	r3, #80	; 0x50
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	212c      	movs	r1, #44	; 0x2c
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	3339      	adds	r3, #57	; 0x39
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	212c      	movs	r1, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3361      	adds	r3, #97	; 0x61
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	222c      	movs	r2, #44	; 0x2c
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	3338      	adds	r3, #56	; 0x38
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	18d1      	adds	r1, r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	f004 fa72 	bl	8007840 <USB_HC_StartXfer>
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop

08003368 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f003 ff73 	bl	800726a <USB_GetMode>
 8003384:	4603      	mov	r3, r0
 8003386:	2b01      	cmp	r3, #1
 8003388:	f040 80f6 	bne.w	8003578 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f003 ff57 	bl	8007244 <USB_ReadInterrupts>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80ec 	beq.w	8003576 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f003 ff4e 	bl	8007244 <USB_ReadInterrupts>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033b2:	d104      	bne.n	80033be <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80033bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f003 ff3e 	bl	8007244 <USB_ReadInterrupts>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d2:	d104      	bne.n	80033de <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f003 ff2e 	bl	8007244 <USB_ReadInterrupts>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033f2:	d104      	bne.n	80033fe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80033fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f003 ff1e 	bl	8007244 <USB_ReadInterrupts>
 8003408:	4603      	mov	r3, r0
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b02      	cmp	r3, #2
 8003410:	d103      	bne.n	800341a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2202      	movs	r2, #2
 8003418:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f003 ff10 	bl	8007244 <USB_ReadInterrupts>
 8003424:	4603      	mov	r3, r0
 8003426:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800342a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800342e:	d11c      	bne.n	800346a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003438:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10f      	bne.n	800346a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800344a:	2110      	movs	r1, #16
 800344c:	6938      	ldr	r0, [r7, #16]
 800344e:	f003 fdff 	bl	8007050 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003452:	6938      	ldr	r0, [r7, #16]
 8003454:	f003 fe30 	bl	80070b8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2101      	movs	r1, #1
 800345e:	4618      	mov	r0, r3
 8003460:	f004 f806 	bl	8007470 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f006 fdd3 	bl	800a010 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f003 fee8 	bl	8007244 <USB_ReadInterrupts>
 8003474:	4603      	mov	r3, r0
 8003476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800347a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800347e:	d102      	bne.n	8003486 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f001 f89e 	bl	80045c2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f003 feda 	bl	8007244 <USB_ReadInterrupts>
 8003490:	4603      	mov	r3, r0
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b08      	cmp	r3, #8
 8003498:	d106      	bne.n	80034a8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f006 fd9c 	bl	8009fd8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2208      	movs	r2, #8
 80034a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f003 fec9 	bl	8007244 <USB_ReadInterrupts>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b10      	cmp	r3, #16
 80034ba:	d101      	bne.n	80034c0 <HAL_HCD_IRQHandler+0x158>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <HAL_HCD_IRQHandler+0x15a>
 80034c0:	2300      	movs	r3, #0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d012      	beq.n	80034ec <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699a      	ldr	r2, [r3, #24]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0210 	bic.w	r2, r2, #16
 80034d4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 ffa1 	bl	800441e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0210 	orr.w	r2, r2, #16
 80034ea:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f003 fea7 	bl	8007244 <USB_ReadInterrupts>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003500:	d13a      	bne.n	8003578 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f004 fadc 	bl	8007ac4 <USB_HC_ReadInterrupt>
 800350c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	e025      	b.n	8003560 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d018      	beq.n	800355a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800353a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800353e:	d106      	bne.n	800354e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	4619      	mov	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f8ab 	bl	80036a2 <HCD_HC_IN_IRQHandler>
 800354c:	e005      	b.n	800355a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	4619      	mov	r1, r3
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fbf9 	bl	8003d4c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	3301      	adds	r3, #1
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	429a      	cmp	r2, r3
 8003568:	d3d4      	bcc.n	8003514 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003572:	615a      	str	r2, [r3, #20]
 8003574:	e000      	b.n	8003578 <HAL_HCD_IRQHandler+0x210>
      return;
 8003576:	bf00      	nop
    }
  }
}
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_HCD_Start+0x16>
 8003590:	2302      	movs	r3, #2
 8003592:	e013      	b.n	80035bc <HAL_HCD_Start+0x3e>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2101      	movs	r1, #1
 80035a2:	4618      	mov	r0, r3
 80035a4:	f003 ffc8 	bl	8007538 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f003 fce0 	bl	8006f72 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_HCD_Stop+0x16>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e00d      	b.n	80035f6 <HAL_HCD_Stop+0x32>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 fbb6 	bl	8007d58 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f003 ff6a 	bl	80074e4 <USB_ResetPort>
 8003610:	4603      	mov	r3, r0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	212c      	movs	r1, #44	; 0x2c
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	4413      	add	r3, r2
 8003632:	3360      	adds	r3, #96	; 0x60
 8003634:	781b      	ldrb	r3, [r3, #0]
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	460b      	mov	r3, r1
 800364c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	3350      	adds	r3, #80	; 0x50
 800365c:	681b      	ldr	r3, [r3, #0]
}
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f003 ffae 	bl	80075d8 <USB_GetCurrentFrame>
 800367c:	4603      	mov	r3, r0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f003 ff89 	bl	80075aa <USB_GetHostSpeed>
 8003698:	4603      	mov	r3, r0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d11a      	bne.n	8003708 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036de:	461a      	mov	r2, r3
 80036e0:	2304      	movs	r3, #4
 80036e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	212c      	movs	r1, #44	; 0x2c
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	3361      	adds	r3, #97	; 0x61
 80036f2:	2206      	movs	r2, #6
 80036f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f004 f9f0 	bl	8007ae6 <USB_HC_Halt>
 8003706:	e0af      	b.n	8003868 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4413      	add	r3, r2
 8003710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800371e:	d11b      	bne.n	8003758 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4413      	add	r3, r2
 8003728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372c:	461a      	mov	r2, r3
 800372e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003732:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	3361      	adds	r3, #97	; 0x61
 8003742:	2207      	movs	r2, #7
 8003744:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f004 f9c8 	bl	8007ae6 <USB_HC_Halt>
 8003756:	e087      	b.n	8003868 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b20      	cmp	r3, #32
 800376c:	d109      	bne.n	8003782 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4413      	add	r3, r2
 8003776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377a:	461a      	mov	r2, r3
 800377c:	2320      	movs	r3, #32
 800377e:	6093      	str	r3, [r2, #8]
 8003780:	e072      	b.n	8003868 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4413      	add	r3, r2
 800378a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b08      	cmp	r3, #8
 8003796:	d11a      	bne.n	80037ce <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a4:	461a      	mov	r2, r3
 80037a6:	2308      	movs	r3, #8
 80037a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	212c      	movs	r1, #44	; 0x2c
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	4413      	add	r3, r2
 80037b6:	3361      	adds	r3, #97	; 0x61
 80037b8:	2205      	movs	r2, #5
 80037ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f004 f98d 	bl	8007ae6 <USB_HC_Halt>
 80037cc:	e04c      	b.n	8003868 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e4:	d11b      	bne.n	800381e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f2:	461a      	mov	r2, r3
 80037f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	212c      	movs	r1, #44	; 0x2c
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	4413      	add	r3, r2
 8003806:	3361      	adds	r3, #97	; 0x61
 8003808:	2208      	movs	r2, #8
 800380a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f004 f965 	bl	8007ae6 <USB_HC_Halt>
 800381c:	e024      	b.n	8003868 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b80      	cmp	r3, #128	; 0x80
 8003832:	d119      	bne.n	8003868 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003840:	461a      	mov	r2, r3
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	212c      	movs	r1, #44	; 0x2c
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	4413      	add	r3, r2
 8003852:	3361      	adds	r3, #97	; 0x61
 8003854:	2206      	movs	r2, #6
 8003856:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f004 f93f 	bl	8007ae6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4413      	add	r3, r2
 8003870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800387a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800387e:	d112      	bne.n	80038a6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f004 f92b 	bl	8007ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4413      	add	r3, r2
 8003898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389c:	461a      	mov	r2, r3
 800389e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038a2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80038a4:	e24e      	b.n	8003d44 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	f040 80df 	bne.w	8003a7c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d019      	beq.n	80038fa <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	212c      	movs	r1, #44	; 0x2c
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	3348      	adds	r3, #72	; 0x48
 80038d4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	0159      	lsls	r1, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	440b      	add	r3, r1
 80038de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80038e8:	1ad2      	subs	r2, r2, r3
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	202c      	movs	r0, #44	; 0x2c
 80038f0:	fb00 f303 	mul.w	r3, r0, r3
 80038f4:	440b      	add	r3, r1
 80038f6:	3350      	adds	r3, #80	; 0x50
 80038f8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	212c      	movs	r1, #44	; 0x2c
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	4413      	add	r3, r2
 8003906:	3361      	adds	r3, #97	; 0x61
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	212c      	movs	r1, #44	; 0x2c
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	4413      	add	r3, r2
 8003918:	335c      	adds	r3, #92	; 0x5c
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4413      	add	r3, r2
 8003926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392a:	461a      	mov	r2, r3
 800392c:	2301      	movs	r3, #1
 800392e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	212c      	movs	r1, #44	; 0x2c
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	333f      	adds	r3, #63	; 0x3f
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d009      	beq.n	8003958 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	212c      	movs	r1, #44	; 0x2c
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	4413      	add	r3, r2
 8003950:	333f      	adds	r3, #63	; 0x3f
 8003952:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003954:	2b02      	cmp	r3, #2
 8003956:	d111      	bne.n	800397c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	4611      	mov	r1, r2
 8003962:	4618      	mov	r0, r3
 8003964:	f004 f8bf 	bl	8007ae6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4413      	add	r3, r2
 8003970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003974:	461a      	mov	r2, r3
 8003976:	2310      	movs	r3, #16
 8003978:	6093      	str	r3, [r2, #8]
 800397a:	e03a      	b.n	80039f2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	212c      	movs	r1, #44	; 0x2c
 8003982:	fb01 f303 	mul.w	r3, r1, r3
 8003986:	4413      	add	r3, r2
 8003988:	333f      	adds	r3, #63	; 0x3f
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b03      	cmp	r3, #3
 800398e:	d009      	beq.n	80039a4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	212c      	movs	r1, #44	; 0x2c
 8003996:	fb01 f303 	mul.w	r3, r1, r3
 800399a:	4413      	add	r3, r2
 800399c:	333f      	adds	r3, #63	; 0x3f
 800399e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d126      	bne.n	80039f2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	0151      	lsls	r1, r2, #5
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	440a      	add	r2, r1
 80039ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039c2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	212c      	movs	r1, #44	; 0x2c
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	3360      	adds	r3, #96	; 0x60
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	b2d9      	uxtb	r1, r3
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	202c      	movs	r0, #44	; 0x2c
 80039e0:	fb00 f303 	mul.w	r3, r0, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	3360      	adds	r3, #96	; 0x60
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f006 fb1d 	bl	800a02c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d12b      	bne.n	8003a52 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	212c      	movs	r1, #44	; 0x2c
 8003a00:	fb01 f303 	mul.w	r3, r1, r3
 8003a04:	4413      	add	r3, r2
 8003a06:	3348      	adds	r3, #72	; 0x48
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	202c      	movs	r0, #44	; 0x2c
 8003a10:	fb00 f202 	mul.w	r2, r0, r2
 8003a14:	440a      	add	r2, r1
 8003a16:	3240      	adds	r2, #64	; 0x40
 8003a18:	8812      	ldrh	r2, [r2, #0]
 8003a1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 818e 	beq.w	8003d44 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	212c      	movs	r1, #44	; 0x2c
 8003a2e:	fb01 f303 	mul.w	r3, r1, r3
 8003a32:	4413      	add	r3, r2
 8003a34:	3354      	adds	r3, #84	; 0x54
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	f083 0301 	eor.w	r3, r3, #1
 8003a3c:	b2d8      	uxtb	r0, r3
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	212c      	movs	r1, #44	; 0x2c
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	4413      	add	r3, r2
 8003a4a:	3354      	adds	r3, #84	; 0x54
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	701a      	strb	r2, [r3, #0]
}
 8003a50:	e178      	b.n	8003d44 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	212c      	movs	r1, #44	; 0x2c
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3354      	adds	r3, #84	; 0x54
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	f083 0301 	eor.w	r3, r3, #1
 8003a66:	b2d8      	uxtb	r0, r3
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	212c      	movs	r1, #44	; 0x2c
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	4413      	add	r3, r2
 8003a74:	3354      	adds	r3, #84	; 0x54
 8003a76:	4602      	mov	r2, r0
 8003a78:	701a      	strb	r2, [r3, #0]
}
 8003a7a:	e163      	b.n	8003d44 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	f040 80f6 	bne.w	8003c80 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	212c      	movs	r1, #44	; 0x2c
 8003a9a:	fb01 f303 	mul.w	r3, r1, r3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3361      	adds	r3, #97	; 0x61
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d109      	bne.n	8003abc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3360      	adds	r3, #96	; 0x60
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	701a      	strb	r2, [r3, #0]
 8003aba:	e0c9      	b.n	8003c50 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3361      	adds	r3, #97	; 0x61
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b05      	cmp	r3, #5
 8003ace:	d109      	bne.n	8003ae4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	212c      	movs	r1, #44	; 0x2c
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	3360      	adds	r3, #96	; 0x60
 8003ade:	2205      	movs	r2, #5
 8003ae0:	701a      	strb	r2, [r3, #0]
 8003ae2:	e0b5      	b.n	8003c50 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	212c      	movs	r1, #44	; 0x2c
 8003aea:	fb01 f303 	mul.w	r3, r1, r3
 8003aee:	4413      	add	r3, r2
 8003af0:	3361      	adds	r3, #97	; 0x61
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b06      	cmp	r3, #6
 8003af6:	d009      	beq.n	8003b0c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	212c      	movs	r1, #44	; 0x2c
 8003afe:	fb01 f303 	mul.w	r3, r1, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	3361      	adds	r3, #97	; 0x61
 8003b06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d150      	bne.n	8003bae <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	335c      	adds	r3, #92	; 0x5c
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	202c      	movs	r0, #44	; 0x2c
 8003b24:	fb00 f303 	mul.w	r3, r0, r3
 8003b28:	440b      	add	r3, r1
 8003b2a:	335c      	adds	r3, #92	; 0x5c
 8003b2c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	212c      	movs	r1, #44	; 0x2c
 8003b34:	fb01 f303 	mul.w	r3, r1, r3
 8003b38:	4413      	add	r3, r2
 8003b3a:	335c      	adds	r3, #92	; 0x5c
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d912      	bls.n	8003b68 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	212c      	movs	r1, #44	; 0x2c
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	335c      	adds	r3, #92	; 0x5c
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	3360      	adds	r3, #96	; 0x60
 8003b62:	2204      	movs	r2, #4
 8003b64:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b66:	e073      	b.n	8003c50 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	3360      	adds	r3, #96	; 0x60
 8003b76:	2202      	movs	r2, #2
 8003b78:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b90:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b98:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bac:	e050      	b.n	8003c50 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	212c      	movs	r1, #44	; 0x2c
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	4413      	add	r3, r2
 8003bba:	3361      	adds	r3, #97	; 0x61
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d122      	bne.n	8003c08 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	212c      	movs	r1, #44	; 0x2c
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	4413      	add	r3, r2
 8003bce:	3360      	adds	r3, #96	; 0x60
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bf2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c00:	461a      	mov	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e023      	b.n	8003c50 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	212c      	movs	r1, #44	; 0x2c
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	3361      	adds	r3, #97	; 0x61
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b07      	cmp	r3, #7
 8003c1a:	d119      	bne.n	8003c50 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	212c      	movs	r1, #44	; 0x2c
 8003c22:	fb01 f303 	mul.w	r3, r1, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	335c      	adds	r3, #92	; 0x5c
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	202c      	movs	r0, #44	; 0x2c
 8003c34:	fb00 f303 	mul.w	r3, r0, r3
 8003c38:	440b      	add	r3, r1
 8003c3a:	335c      	adds	r3, #92	; 0x5c
 8003c3c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	212c      	movs	r1, #44	; 0x2c
 8003c44:	fb01 f303 	mul.w	r3, r1, r3
 8003c48:	4413      	add	r3, r2
 8003c4a:	3360      	adds	r3, #96	; 0x60
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2302      	movs	r3, #2
 8003c60:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	b2d9      	uxtb	r1, r3
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	202c      	movs	r0, #44	; 0x2c
 8003c6c:	fb00 f303 	mul.w	r3, r0, r3
 8003c70:	4413      	add	r3, r2
 8003c72:	3360      	adds	r3, #96	; 0x60
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f006 f9d7 	bl	800a02c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c7e:	e061      	b.n	8003d44 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	2b10      	cmp	r3, #16
 8003c94:	d156      	bne.n	8003d44 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	212c      	movs	r1, #44	; 0x2c
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	333f      	adds	r3, #63	; 0x3f
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d111      	bne.n	8003cce <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	212c      	movs	r1, #44	; 0x2c
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	335c      	adds	r3, #92	; 0x5c
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f003 ff0d 	bl	8007ae6 <USB_HC_Halt>
 8003ccc:	e031      	b.n	8003d32 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	212c      	movs	r1, #44	; 0x2c
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	4413      	add	r3, r2
 8003cda:	333f      	adds	r3, #63	; 0x3f
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	212c      	movs	r1, #44	; 0x2c
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	4413      	add	r3, r2
 8003cee:	333f      	adds	r3, #63	; 0x3f
 8003cf0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d11d      	bne.n	8003d32 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	212c      	movs	r1, #44	; 0x2c
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	4413      	add	r3, r2
 8003d02:	335c      	adds	r3, #92	; 0x5c
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d110      	bne.n	8003d32 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	212c      	movs	r1, #44	; 0x2c
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3361      	adds	r3, #97	; 0x61
 8003d1e:	2203      	movs	r2, #3
 8003d20:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f003 feda 	bl	8007ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3e:	461a      	mov	r2, r3
 8003d40:	2310      	movs	r3, #16
 8003d42:	6093      	str	r3, [r2, #8]
}
 8003d44:	bf00      	nop
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d11a      	bne.n	8003db2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d88:	461a      	mov	r2, r3
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	212c      	movs	r1, #44	; 0x2c
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	4413      	add	r3, r2
 8003d9a:	3361      	adds	r3, #97	; 0x61
 8003d9c:	2206      	movs	r2, #6
 8003d9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	4611      	mov	r1, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f003 fe9b 	bl	8007ae6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003db0:	e331      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d12e      	bne.n	8003e26 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2320      	movs	r3, #32
 8003dd8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	212c      	movs	r1, #44	; 0x2c
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	4413      	add	r3, r2
 8003de6:	333d      	adds	r3, #61	; 0x3d
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	f040 8313 	bne.w	8004416 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	212c      	movs	r1, #44	; 0x2c
 8003df6:	fb01 f303 	mul.w	r3, r1, r3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	333d      	adds	r3, #61	; 0x3d
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	212c      	movs	r1, #44	; 0x2c
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3360      	adds	r3, #96	; 0x60
 8003e10:	2202      	movs	r2, #2
 8003e12:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f003 fe61 	bl	8007ae6 <USB_HC_Halt>
}
 8003e24:	e2f7      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3c:	d112      	bne.n	8003e64 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e50:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f003 fe42 	bl	8007ae6 <USB_HC_Halt>
}
 8003e62:	e2d8      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d140      	bne.n	8003efc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	212c      	movs	r1, #44	; 0x2c
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	4413      	add	r3, r2
 8003e86:	335c      	adds	r3, #92	; 0x5c
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	d111      	bne.n	8003ec6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	212c      	movs	r1, #44	; 0x2c
 8003ea8:	fb01 f303 	mul.w	r3, r1, r3
 8003eac:	4413      	add	r3, r2
 8003eae:	333d      	adds	r3, #61	; 0x3d
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2340      	movs	r3, #64	; 0x40
 8003ec4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	212c      	movs	r1, #44	; 0x2c
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3361      	adds	r3, #97	; 0x61
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f003 fdf6 	bl	8007ae6 <USB_HC_Halt>
}
 8003efa:	e28c      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d12c      	bne.n	8003f6c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	212c      	movs	r1, #44	; 0x2c
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3361      	adds	r3, #97	; 0x61
 8003f20:	2204      	movs	r2, #4
 8003f22:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	212c      	movs	r1, #44	; 0x2c
 8003f2a:	fb01 f303 	mul.w	r3, r1, r3
 8003f2e:	4413      	add	r3, r2
 8003f30:	333d      	adds	r3, #61	; 0x3d
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	212c      	movs	r1, #44	; 0x2c
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	4413      	add	r3, r2
 8003f42:	335c      	adds	r3, #92	; 0x5c
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	4611      	mov	r1, r2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f003 fdc7 	bl	8007ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f64:	461a      	mov	r2, r3
 8003f66:	2340      	movs	r3, #64	; 0x40
 8003f68:	6093      	str	r3, [r2, #8]
}
 8003f6a:	e254      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d11a      	bne.n	8003fb8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8e:	461a      	mov	r2, r3
 8003f90:	2308      	movs	r3, #8
 8003f92:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	212c      	movs	r1, #44	; 0x2c
 8003f9a:	fb01 f303 	mul.w	r3, r1, r3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3361      	adds	r3, #97	; 0x61
 8003fa2:	2205      	movs	r2, #5
 8003fa4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f003 fd98 	bl	8007ae6 <USB_HC_Halt>
}
 8003fb6:	e22e      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d140      	bne.n	8004050 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	212c      	movs	r1, #44	; 0x2c
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	4413      	add	r3, r2
 8003fda:	335c      	adds	r3, #92	; 0x5c
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	212c      	movs	r1, #44	; 0x2c
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	4413      	add	r3, r2
 8003fec:	3361      	adds	r3, #97	; 0x61
 8003fee:	2203      	movs	r2, #3
 8003ff0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	212c      	movs	r1, #44	; 0x2c
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	333d      	adds	r3, #61	; 0x3d
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d112      	bne.n	800402c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	212c      	movs	r1, #44	; 0x2c
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	4413      	add	r3, r2
 8004012:	333c      	adds	r3, #60	; 0x3c
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d108      	bne.n	800402c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	212c      	movs	r1, #44	; 0x2c
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	4413      	add	r3, r2
 8004026:	333d      	adds	r3, #61	; 0x3d
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f003 fd55 	bl	8007ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	4413      	add	r3, r2
 8004044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004048:	461a      	mov	r2, r3
 800404a:	2310      	movs	r3, #16
 800404c:	6093      	str	r3, [r2, #8]
}
 800404e:	e1e2      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	4413      	add	r3, r2
 8004058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004062:	2b80      	cmp	r3, #128	; 0x80
 8004064:	d164      	bne.n	8004130 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d111      	bne.n	8004092 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	212c      	movs	r1, #44	; 0x2c
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	4413      	add	r3, r2
 800407a:	3361      	adds	r3, #97	; 0x61
 800407c:	2206      	movs	r2, #6
 800407e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f003 fd2b 	bl	8007ae6 <USB_HC_Halt>
 8004090:	e044      	b.n	800411c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	212c      	movs	r1, #44	; 0x2c
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	4413      	add	r3, r2
 800409e:	335c      	adds	r3, #92	; 0x5c
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	202c      	movs	r0, #44	; 0x2c
 80040aa:	fb00 f303 	mul.w	r3, r0, r3
 80040ae:	440b      	add	r3, r1
 80040b0:	335c      	adds	r3, #92	; 0x5c
 80040b2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	212c      	movs	r1, #44	; 0x2c
 80040ba:	fb01 f303 	mul.w	r3, r1, r3
 80040be:	4413      	add	r3, r2
 80040c0:	335c      	adds	r3, #92	; 0x5c
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d920      	bls.n	800410a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	212c      	movs	r1, #44	; 0x2c
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	335c      	adds	r3, #92	; 0x5c
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	212c      	movs	r1, #44	; 0x2c
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	3360      	adds	r3, #96	; 0x60
 80040e8:	2204      	movs	r2, #4
 80040ea:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	b2d9      	uxtb	r1, r3
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	202c      	movs	r0, #44	; 0x2c
 80040f6:	fb00 f303 	mul.w	r3, r0, r3
 80040fa:	4413      	add	r3, r2
 80040fc:	3360      	adds	r3, #96	; 0x60
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f005 ff92 	bl	800a02c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004108:	e008      	b.n	800411c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	212c      	movs	r1, #44	; 0x2c
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	4413      	add	r3, r2
 8004116:	3360      	adds	r3, #96	; 0x60
 8004118:	2202      	movs	r2, #2
 800411a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	4413      	add	r3, r2
 8004124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004128:	461a      	mov	r2, r3
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	6093      	str	r3, [r2, #8]
}
 800412e:	e172      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	4413      	add	r3, r2
 8004138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004146:	d11b      	bne.n	8004180 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	212c      	movs	r1, #44	; 0x2c
 800414e:	fb01 f303 	mul.w	r3, r1, r3
 8004152:	4413      	add	r3, r2
 8004154:	3361      	adds	r3, #97	; 0x61
 8004156:	2208      	movs	r2, #8
 8004158:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	4611      	mov	r1, r2
 8004164:	4618      	mov	r0, r3
 8004166:	f003 fcbe 	bl	8007ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	4413      	add	r3, r2
 8004172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004176:	461a      	mov	r2, r3
 8004178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800417c:	6093      	str	r3, [r2, #8]
}
 800417e:	e14a      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	4413      	add	r3, r2
 8004188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	f040 813f 	bne.w	8004416 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3361      	adds	r3, #97	; 0x61
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d17d      	bne.n	80042a8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	212c      	movs	r1, #44	; 0x2c
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	3360      	adds	r3, #96	; 0x60
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	212c      	movs	r1, #44	; 0x2c
 80041c4:	fb01 f303 	mul.w	r3, r1, r3
 80041c8:	4413      	add	r3, r2
 80041ca:	333f      	adds	r3, #63	; 0x3f
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d00a      	beq.n	80041e8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	212c      	movs	r1, #44	; 0x2c
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	4413      	add	r3, r2
 80041de:	333f      	adds	r3, #63	; 0x3f
 80041e0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	f040 8100 	bne.w	80043e8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d113      	bne.n	8004218 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	212c      	movs	r1, #44	; 0x2c
 80041f6:	fb01 f303 	mul.w	r3, r1, r3
 80041fa:	4413      	add	r3, r2
 80041fc:	3355      	adds	r3, #85	; 0x55
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	f083 0301 	eor.w	r3, r3, #1
 8004204:	b2d8      	uxtb	r0, r3
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	212c      	movs	r1, #44	; 0x2c
 800420c:	fb01 f303 	mul.w	r3, r1, r3
 8004210:	4413      	add	r3, r2
 8004212:	3355      	adds	r3, #85	; 0x55
 8004214:	4602      	mov	r2, r0
 8004216:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	2b01      	cmp	r3, #1
 800421e:	f040 80e3 	bne.w	80043e8 <HCD_HC_OUT_IRQHandler+0x69c>
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	212c      	movs	r1, #44	; 0x2c
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	4413      	add	r3, r2
 800422e:	334c      	adds	r3, #76	; 0x4c
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 80d8 	beq.w	80043e8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	212c      	movs	r1, #44	; 0x2c
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	4413      	add	r3, r2
 8004244:	334c      	adds	r3, #76	; 0x4c
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	202c      	movs	r0, #44	; 0x2c
 800424e:	fb00 f202 	mul.w	r2, r0, r2
 8004252:	440a      	add	r2, r1
 8004254:	3240      	adds	r2, #64	; 0x40
 8004256:	8812      	ldrh	r2, [r2, #0]
 8004258:	4413      	add	r3, r2
 800425a:	3b01      	subs	r3, #1
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	202c      	movs	r0, #44	; 0x2c
 8004262:	fb00 f202 	mul.w	r2, r0, r2
 8004266:	440a      	add	r2, r1
 8004268:	3240      	adds	r2, #64	; 0x40
 800426a:	8812      	ldrh	r2, [r2, #0]
 800426c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80b5 	beq.w	80043e8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	212c      	movs	r1, #44	; 0x2c
 8004284:	fb01 f303 	mul.w	r3, r1, r3
 8004288:	4413      	add	r3, r2
 800428a:	3355      	adds	r3, #85	; 0x55
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	f083 0301 	eor.w	r3, r3, #1
 8004292:	b2d8      	uxtb	r0, r3
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	212c      	movs	r1, #44	; 0x2c
 800429a:	fb01 f303 	mul.w	r3, r1, r3
 800429e:	4413      	add	r3, r2
 80042a0:	3355      	adds	r3, #85	; 0x55
 80042a2:	4602      	mov	r2, r0
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	e09f      	b.n	80043e8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	212c      	movs	r1, #44	; 0x2c
 80042ae:	fb01 f303 	mul.w	r3, r1, r3
 80042b2:	4413      	add	r3, r2
 80042b4:	3361      	adds	r3, #97	; 0x61
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b03      	cmp	r3, #3
 80042ba:	d109      	bne.n	80042d0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	212c      	movs	r1, #44	; 0x2c
 80042c2:	fb01 f303 	mul.w	r3, r1, r3
 80042c6:	4413      	add	r3, r2
 80042c8:	3360      	adds	r3, #96	; 0x60
 80042ca:	2202      	movs	r2, #2
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	e08b      	b.n	80043e8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	212c      	movs	r1, #44	; 0x2c
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	4413      	add	r3, r2
 80042dc:	3361      	adds	r3, #97	; 0x61
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d109      	bne.n	80042f8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	212c      	movs	r1, #44	; 0x2c
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
 80042ee:	4413      	add	r3, r2
 80042f0:	3360      	adds	r3, #96	; 0x60
 80042f2:	2202      	movs	r2, #2
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	e077      	b.n	80043e8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	212c      	movs	r1, #44	; 0x2c
 80042fe:	fb01 f303 	mul.w	r3, r1, r3
 8004302:	4413      	add	r3, r2
 8004304:	3361      	adds	r3, #97	; 0x61
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b05      	cmp	r3, #5
 800430a:	d109      	bne.n	8004320 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	212c      	movs	r1, #44	; 0x2c
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	3360      	adds	r3, #96	; 0x60
 800431a:	2205      	movs	r2, #5
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e063      	b.n	80043e8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	212c      	movs	r1, #44	; 0x2c
 8004326:	fb01 f303 	mul.w	r3, r1, r3
 800432a:	4413      	add	r3, r2
 800432c:	3361      	adds	r3, #97	; 0x61
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b06      	cmp	r3, #6
 8004332:	d009      	beq.n	8004348 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	212c      	movs	r1, #44	; 0x2c
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	4413      	add	r3, r2
 8004340:	3361      	adds	r3, #97	; 0x61
 8004342:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004344:	2b08      	cmp	r3, #8
 8004346:	d14f      	bne.n	80043e8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	212c      	movs	r1, #44	; 0x2c
 800434e:	fb01 f303 	mul.w	r3, r1, r3
 8004352:	4413      	add	r3, r2
 8004354:	335c      	adds	r3, #92	; 0x5c
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	202c      	movs	r0, #44	; 0x2c
 8004360:	fb00 f303 	mul.w	r3, r0, r3
 8004364:	440b      	add	r3, r1
 8004366:	335c      	adds	r3, #92	; 0x5c
 8004368:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	212c      	movs	r1, #44	; 0x2c
 8004370:	fb01 f303 	mul.w	r3, r1, r3
 8004374:	4413      	add	r3, r2
 8004376:	335c      	adds	r3, #92	; 0x5c
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d912      	bls.n	80043a4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	212c      	movs	r1, #44	; 0x2c
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	4413      	add	r3, r2
 800438a:	335c      	adds	r3, #92	; 0x5c
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	212c      	movs	r1, #44	; 0x2c
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	4413      	add	r3, r2
 800439c:	3360      	adds	r3, #96	; 0x60
 800439e:	2204      	movs	r2, #4
 80043a0:	701a      	strb	r2, [r3, #0]
 80043a2:	e021      	b.n	80043e8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	212c      	movs	r1, #44	; 0x2c
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	4413      	add	r3, r2
 80043b0:	3360      	adds	r3, #96	; 0x60
 80043b2:	2202      	movs	r2, #2
 80043b4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043cc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043d4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e2:	461a      	mov	r2, r3
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f4:	461a      	mov	r2, r3
 80043f6:	2302      	movs	r3, #2
 80043f8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	b2d9      	uxtb	r1, r3
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	202c      	movs	r0, #44	; 0x2c
 8004404:	fb00 f303 	mul.w	r3, r0, r3
 8004408:	4413      	add	r3, r2
 800440a:	3360      	adds	r3, #96	; 0x60
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f005 fe0b 	bl	800a02c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004416:	bf00      	nop
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b08a      	sub	sp, #40	; 0x28
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	0c5b      	lsrs	r3, r3, #17
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	091b      	lsrs	r3, r3, #4
 800444e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004452:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d004      	beq.n	8004464 <HCD_RXQLVL_IRQHandler+0x46>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b05      	cmp	r3, #5
 800445e:	f000 80a9 	beq.w	80045b4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004462:	e0aa      	b.n	80045ba <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 80a6 	beq.w	80045b8 <HCD_RXQLVL_IRQHandler+0x19a>
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	212c      	movs	r1, #44	; 0x2c
 8004472:	fb01 f303 	mul.w	r3, r1, r3
 8004476:	4413      	add	r3, r2
 8004478:	3344      	adds	r3, #68	; 0x44
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 809b 	beq.w	80045b8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	212c      	movs	r1, #44	; 0x2c
 8004488:	fb01 f303 	mul.w	r3, r1, r3
 800448c:	4413      	add	r3, r2
 800448e:	3350      	adds	r3, #80	; 0x50
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	441a      	add	r2, r3
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	202c      	movs	r0, #44	; 0x2c
 800449c:	fb00 f303 	mul.w	r3, r0, r3
 80044a0:	440b      	add	r3, r1
 80044a2:	334c      	adds	r3, #76	; 0x4c
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d87a      	bhi.n	80045a0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6818      	ldr	r0, [r3, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	212c      	movs	r1, #44	; 0x2c
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	4413      	add	r3, r2
 80044ba:	3344      	adds	r3, #68	; 0x44
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	b292      	uxth	r2, r2
 80044c2:	4619      	mov	r1, r3
 80044c4:	f002 fe66 	bl	8007194 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	212c      	movs	r1, #44	; 0x2c
 80044ce:	fb01 f303 	mul.w	r3, r1, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	3344      	adds	r3, #68	; 0x44
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	441a      	add	r2, r3
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	202c      	movs	r0, #44	; 0x2c
 80044e2:	fb00 f303 	mul.w	r3, r0, r3
 80044e6:	440b      	add	r3, r1
 80044e8:	3344      	adds	r3, #68	; 0x44
 80044ea:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	212c      	movs	r1, #44	; 0x2c
 80044f2:	fb01 f303 	mul.w	r3, r1, r3
 80044f6:	4413      	add	r3, r2
 80044f8:	3350      	adds	r3, #80	; 0x50
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	441a      	add	r2, r3
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	202c      	movs	r0, #44	; 0x2c
 8004506:	fb00 f303 	mul.w	r3, r0, r3
 800450a:	440b      	add	r3, r1
 800450c:	3350      	adds	r3, #80	; 0x50
 800450e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	0cdb      	lsrs	r3, r3, #19
 8004520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004524:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	212c      	movs	r1, #44	; 0x2c
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	4413      	add	r3, r2
 8004532:	3340      	adds	r3, #64	; 0x40
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4293      	cmp	r3, r2
 800453c:	d13c      	bne.n	80045b8 <HCD_RXQLVL_IRQHandler+0x19a>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d039      	beq.n	80045b8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	4413      	add	r3, r2
 800454c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800455a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004562:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	4413      	add	r3, r2
 800456c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004570:	461a      	mov	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	212c      	movs	r1, #44	; 0x2c
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	4413      	add	r3, r2
 8004582:	3354      	adds	r3, #84	; 0x54
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	f083 0301 	eor.w	r3, r3, #1
 800458a:	b2d8      	uxtb	r0, r3
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	212c      	movs	r1, #44	; 0x2c
 8004592:	fb01 f303 	mul.w	r3, r1, r3
 8004596:	4413      	add	r3, r2
 8004598:	3354      	adds	r3, #84	; 0x54
 800459a:	4602      	mov	r2, r0
 800459c:	701a      	strb	r2, [r3, #0]
      break;
 800459e:	e00b      	b.n	80045b8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	212c      	movs	r1, #44	; 0x2c
 80045a6:	fb01 f303 	mul.w	r3, r1, r3
 80045aa:	4413      	add	r3, r2
 80045ac:	3360      	adds	r3, #96	; 0x60
 80045ae:	2204      	movs	r2, #4
 80045b0:	701a      	strb	r2, [r3, #0]
      break;
 80045b2:	e001      	b.n	80045b8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80045b4:	bf00      	nop
 80045b6:	e000      	b.n	80045ba <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80045b8:	bf00      	nop
  }
}
 80045ba:	bf00      	nop
 80045bc:	3728      	adds	r7, #40	; 0x28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b086      	sub	sp, #24
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80045ee:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d10b      	bne.n	8004612 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b01      	cmp	r3, #1
 8004602:	d102      	bne.n	800460a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f005 fcf5 	bl	8009ff4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f043 0302 	orr.w	r3, r3, #2
 8004610:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b08      	cmp	r3, #8
 800461a:	d132      	bne.n	8004682 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f043 0308 	orr.w	r3, r3, #8
 8004622:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b04      	cmp	r3, #4
 800462c:	d126      	bne.n	800467c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d113      	bne.n	800465e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800463c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004640:	d106      	bne.n	8004650 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2102      	movs	r1, #2
 8004648:	4618      	mov	r0, r3
 800464a:	f002 ff11 	bl	8007470 <USB_InitFSLSPClkSel>
 800464e:	e011      	b.n	8004674 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2101      	movs	r1, #1
 8004656:	4618      	mov	r0, r3
 8004658:	f002 ff0a 	bl	8007470 <USB_InitFSLSPClkSel>
 800465c:	e00a      	b.n	8004674 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d106      	bne.n	8004674 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800466c:	461a      	mov	r2, r3
 800466e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004672:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f005 fce7 	bl	800a048 <HAL_HCD_PortEnabled_Callback>
 800467a:	e002      	b.n	8004682 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f005 fcf1 	bl	800a064 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b20      	cmp	r3, #32
 800468a:	d103      	bne.n	8004694 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f043 0320 	orr.w	r3, r3, #32
 8004692:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800469a:	461a      	mov	r2, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	6013      	str	r3, [r2, #0]
}
 80046a0:	bf00      	nop
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e12b      	b.n	8004912 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fd fd28 	bl	8002124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2224      	movs	r2, #36	; 0x24
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0201 	bic.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800470a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800470c:	f001 fa20 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8004710:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	4a81      	ldr	r2, [pc, #516]	; (800491c <HAL_I2C_Init+0x274>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d807      	bhi.n	800472c <HAL_I2C_Init+0x84>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4a80      	ldr	r2, [pc, #512]	; (8004920 <HAL_I2C_Init+0x278>)
 8004720:	4293      	cmp	r3, r2
 8004722:	bf94      	ite	ls
 8004724:	2301      	movls	r3, #1
 8004726:	2300      	movhi	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	e006      	b.n	800473a <HAL_I2C_Init+0x92>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4a7d      	ldr	r2, [pc, #500]	; (8004924 <HAL_I2C_Init+0x27c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	bf94      	ite	ls
 8004734:	2301      	movls	r3, #1
 8004736:	2300      	movhi	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e0e7      	b.n	8004912 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4a78      	ldr	r2, [pc, #480]	; (8004928 <HAL_I2C_Init+0x280>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	0c9b      	lsrs	r3, r3, #18
 800474c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	4a6a      	ldr	r2, [pc, #424]	; (800491c <HAL_I2C_Init+0x274>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d802      	bhi.n	800477c <HAL_I2C_Init+0xd4>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	3301      	adds	r3, #1
 800477a:	e009      	b.n	8004790 <HAL_I2C_Init+0xe8>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004782:	fb02 f303 	mul.w	r3, r2, r3
 8004786:	4a69      	ldr	r2, [pc, #420]	; (800492c <HAL_I2C_Init+0x284>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	099b      	lsrs	r3, r3, #6
 800478e:	3301      	adds	r3, #1
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	430b      	orrs	r3, r1
 8004796:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	495c      	ldr	r1, [pc, #368]	; (800491c <HAL_I2C_Init+0x274>)
 80047ac:	428b      	cmp	r3, r1
 80047ae:	d819      	bhi.n	80047e4 <HAL_I2C_Init+0x13c>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	1e59      	subs	r1, r3, #1
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80047be:	1c59      	adds	r1, r3, #1
 80047c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047c4:	400b      	ands	r3, r1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <HAL_I2C_Init+0x138>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1e59      	subs	r1, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80047d8:	3301      	adds	r3, #1
 80047da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047de:	e051      	b.n	8004884 <HAL_I2C_Init+0x1dc>
 80047e0:	2304      	movs	r3, #4
 80047e2:	e04f      	b.n	8004884 <HAL_I2C_Init+0x1dc>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d111      	bne.n	8004810 <HAL_I2C_Init+0x168>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	1e58      	subs	r0, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6859      	ldr	r1, [r3, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	440b      	add	r3, r1
 80047fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fe:	3301      	adds	r3, #1
 8004800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004804:	2b00      	cmp	r3, #0
 8004806:	bf0c      	ite	eq
 8004808:	2301      	moveq	r3, #1
 800480a:	2300      	movne	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	e012      	b.n	8004836 <HAL_I2C_Init+0x18e>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1e58      	subs	r0, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	0099      	lsls	r1, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	fbb0 f3f3 	udiv	r3, r0, r3
 8004826:	3301      	adds	r3, #1
 8004828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800482c:	2b00      	cmp	r3, #0
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_I2C_Init+0x196>
 800483a:	2301      	movs	r3, #1
 800483c:	e022      	b.n	8004884 <HAL_I2C_Init+0x1dc>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10e      	bne.n	8004864 <HAL_I2C_Init+0x1bc>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1e58      	subs	r0, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6859      	ldr	r1, [r3, #4]
 800484e:	460b      	mov	r3, r1
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	440b      	add	r3, r1
 8004854:	fbb0 f3f3 	udiv	r3, r0, r3
 8004858:	3301      	adds	r3, #1
 800485a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004862:	e00f      	b.n	8004884 <HAL_I2C_Init+0x1dc>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	1e58      	subs	r0, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6859      	ldr	r1, [r3, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	0099      	lsls	r1, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	fbb0 f3f3 	udiv	r3, r0, r3
 800487a:	3301      	adds	r3, #1
 800487c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	6809      	ldr	r1, [r1, #0]
 8004888:	4313      	orrs	r3, r2
 800488a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69da      	ldr	r2, [r3, #28]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6911      	ldr	r1, [r2, #16]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68d2      	ldr	r2, [r2, #12]
 80048be:	4311      	orrs	r1, r2
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6812      	ldr	r2, [r2, #0]
 80048c4:	430b      	orrs	r3, r1
 80048c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695a      	ldr	r2, [r3, #20]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	000186a0 	.word	0x000186a0
 8004920:	001e847f 	.word	0x001e847f
 8004924:	003d08ff 	.word	0x003d08ff
 8004928:	431bde83 	.word	0x431bde83
 800492c:	10624dd3 	.word	0x10624dd3

08004930 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e128      	b.n	8004b94 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a90      	ldr	r2, [pc, #576]	; (8004b9c <HAL_I2S_Init+0x26c>)
 800495a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7fd fc29 	bl	80021b4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004978:	f023 030f 	bic.w	r3, r3, #15
 800497c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2202      	movs	r2, #2
 8004984:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d060      	beq.n	8004a50 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d102      	bne.n	800499c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004996:	2310      	movs	r3, #16
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	e001      	b.n	80049a0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800499c:	2320      	movs	r3, #32
 800499e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d802      	bhi.n	80049ae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80049ae:	2001      	movs	r0, #1
 80049b0:	f001 f9d2 	bl	8005d58 <HAL_RCCEx_GetPeriphCLKFreq>
 80049b4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049be:	d125      	bne.n	8004a0c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d010      	beq.n	80049ea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	461a      	mov	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	3305      	adds	r3, #5
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	e01f      	b.n	8004a2a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	461a      	mov	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	3305      	adds	r3, #5
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	e00e      	b.n	8004a2a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a26:	3305      	adds	r3, #5
 8004a28:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	4a5c      	ldr	r2, [pc, #368]	; (8004ba0 <HAL_I2S_Init+0x270>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	08db      	lsrs	r3, r3, #3
 8004a34:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	085b      	lsrs	r3, r3, #1
 8004a46:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	61bb      	str	r3, [r7, #24]
 8004a4e:	e003      	b.n	8004a58 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004a50:	2302      	movs	r3, #2
 8004a52:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d902      	bls.n	8004a64 <HAL_I2S_Init+0x134>
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	2bff      	cmp	r3, #255	; 0xff
 8004a62:	d907      	bls.n	8004a74 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a68:	f043 0210 	orr.w	r2, r3, #16
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e08f      	b.n	8004b94 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	ea42 0103 	orr.w	r1, r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a92:	f023 030f 	bic.w	r3, r3, #15
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6851      	ldr	r1, [r2, #4]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6892      	ldr	r2, [r2, #8]
 8004a9e:	4311      	orrs	r1, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	68d2      	ldr	r2, [r2, #12]
 8004aa4:	4311      	orrs	r1, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6992      	ldr	r2, [r2, #24]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ab6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d161      	bne.n	8004b84 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a38      	ldr	r2, [pc, #224]	; (8004ba4 <HAL_I2S_Init+0x274>)
 8004ac4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a37      	ldr	r2, [pc, #220]	; (8004ba8 <HAL_I2S_Init+0x278>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d101      	bne.n	8004ad4 <HAL_I2S_Init+0x1a4>
 8004ad0:	4b36      	ldr	r3, [pc, #216]	; (8004bac <HAL_I2S_Init+0x27c>)
 8004ad2:	e001      	b.n	8004ad8 <HAL_I2S_Init+0x1a8>
 8004ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	4932      	ldr	r1, [pc, #200]	; (8004ba8 <HAL_I2S_Init+0x278>)
 8004ae0:	428a      	cmp	r2, r1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_I2S_Init+0x1b8>
 8004ae4:	4a31      	ldr	r2, [pc, #196]	; (8004bac <HAL_I2S_Init+0x27c>)
 8004ae6:	e001      	b.n	8004aec <HAL_I2S_Init+0x1bc>
 8004ae8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004aec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004af0:	f023 030f 	bic.w	r3, r3, #15
 8004af4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a2b      	ldr	r2, [pc, #172]	; (8004ba8 <HAL_I2S_Init+0x278>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d101      	bne.n	8004b04 <HAL_I2S_Init+0x1d4>
 8004b00:	4b2a      	ldr	r3, [pc, #168]	; (8004bac <HAL_I2S_Init+0x27c>)
 8004b02:	e001      	b.n	8004b08 <HAL_I2S_Init+0x1d8>
 8004b04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b08:	2202      	movs	r2, #2
 8004b0a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a25      	ldr	r2, [pc, #148]	; (8004ba8 <HAL_I2S_Init+0x278>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d101      	bne.n	8004b1a <HAL_I2S_Init+0x1ea>
 8004b16:	4b25      	ldr	r3, [pc, #148]	; (8004bac <HAL_I2S_Init+0x27c>)
 8004b18:	e001      	b.n	8004b1e <HAL_I2S_Init+0x1ee>
 8004b1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2a:	d003      	beq.n	8004b34 <HAL_I2S_Init+0x204>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d103      	bne.n	8004b3c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	e001      	b.n	8004b40 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b54:	4313      	orrs	r3, r2
 8004b56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	897b      	ldrh	r3, [r7, #10]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b6c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a0d      	ldr	r2, [pc, #52]	; (8004ba8 <HAL_I2S_Init+0x278>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d101      	bne.n	8004b7c <HAL_I2S_Init+0x24c>
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <HAL_I2S_Init+0x27c>)
 8004b7a:	e001      	b.n	8004b80 <HAL_I2S_Init+0x250>
 8004b7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b80:	897a      	ldrh	r2, [r7, #10]
 8004b82:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	08004ca7 	.word	0x08004ca7
 8004ba0:	cccccccd 	.word	0xcccccccd
 8004ba4:	08004dbd 	.word	0x08004dbd
 8004ba8:	40003800 	.word	0x40003800
 8004bac:	40003400 	.word	0x40003400

08004bb0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	881a      	ldrh	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	1c9a      	adds	r2, r3, #2
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10e      	bne.n	8004c40 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c30:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff ffb8 	bl	8004bb0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	b292      	uxth	r2, r2
 8004c5c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	1c9a      	adds	r2, r3, #2
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10e      	bne.n	8004c9e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c8e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ff93 	bl	8004bc4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b086      	sub	sp, #24
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d13a      	bne.n	8004d38 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d109      	bne.n	8004ce0 <I2S_IRQHandler+0x3a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd6:	2b40      	cmp	r3, #64	; 0x40
 8004cd8:	d102      	bne.n	8004ce0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff ffb4 	bl	8004c48 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d126      	bne.n	8004d38 <I2S_IRQHandler+0x92>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d11f      	bne.n	8004d38 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d08:	2300      	movs	r3, #0
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2a:	f043 0202 	orr.w	r2, r3, #2
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff ff50 	bl	8004bd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d136      	bne.n	8004db2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d109      	bne.n	8004d62 <I2S_IRQHandler+0xbc>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	2b80      	cmp	r3, #128	; 0x80
 8004d5a:	d102      	bne.n	8004d62 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff ff45 	bl	8004bec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d122      	bne.n	8004db2 <I2S_IRQHandler+0x10c>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d11b      	bne.n	8004db2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d88:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da4:	f043 0204 	orr.w	r2, r3, #4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff ff13 	bl	8004bd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004db2:	bf00      	nop
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a92      	ldr	r2, [pc, #584]	; (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d101      	bne.n	8004dda <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004dd6:	4b92      	ldr	r3, [pc, #584]	; (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004dd8:	e001      	b.n	8004dde <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004dda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a8b      	ldr	r2, [pc, #556]	; (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d101      	bne.n	8004df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004df4:	4b8a      	ldr	r3, [pc, #552]	; (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004df6:	e001      	b.n	8004dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004df8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e08:	d004      	beq.n	8004e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f040 8099 	bne.w	8004f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d107      	bne.n	8004e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f925 	bl	8005078 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d107      	bne.n	8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f9c8 	bl	80051d8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4e:	2b40      	cmp	r3, #64	; 0x40
 8004e50:	d13a      	bne.n	8004ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d035      	beq.n	8004ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a6e      	ldr	r2, [pc, #440]	; (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d101      	bne.n	8004e6a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004e66:	4b6e      	ldr	r3, [pc, #440]	; (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e68:	e001      	b.n	8004e6e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004e6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4969      	ldr	r1, [pc, #420]	; (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e76:	428b      	cmp	r3, r1
 8004e78:	d101      	bne.n	8004e7e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004e7a:	4b69      	ldr	r3, [pc, #420]	; (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e7c:	e001      	b.n	8004e82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004e7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e86:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e96:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	f043 0202 	orr.w	r2, r3, #2
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff fe88 	bl	8004bd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	f040 80c3 	bne.w	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 80bd 	beq.w	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004eee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a49      	ldr	r2, [pc, #292]	; (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d101      	bne.n	8004efe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004efa:	4b49      	ldr	r3, [pc, #292]	; (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004efc:	e001      	b.n	8004f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004efe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4944      	ldr	r1, [pc, #272]	; (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f0a:	428b      	cmp	r3, r1
 8004f0c:	d101      	bne.n	8004f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004f0e:	4b44      	ldr	r3, [pc, #272]	; (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f10:	e001      	b.n	8004f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004f12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f1a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	60bb      	str	r3, [r7, #8]
 8004f28:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f36:	f043 0204 	orr.w	r2, r3, #4
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff fe4a 	bl	8004bd8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f44:	e089      	b.n	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d107      	bne.n	8004f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f8be 	bl	80050dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d107      	bne.n	8004f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f8fd 	bl	8005174 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b40      	cmp	r3, #64	; 0x40
 8004f82:	d12f      	bne.n	8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d02a      	beq.n	8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f9c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	; (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d101      	bne.n	8004fac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004faa:	e001      	b.n	8004fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004fac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4919      	ldr	r1, [pc, #100]	; (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fb8:	428b      	cmp	r3, r1
 8004fba:	d101      	bne.n	8004fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004fbc:	4b18      	ldr	r3, [pc, #96]	; (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fbe:	e001      	b.n	8004fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004fc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fc8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	f043 0202 	orr.w	r2, r3, #2
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff fdfa 	bl	8004bd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d136      	bne.n	800505c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f003 0320 	and.w	r3, r3, #32
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d031      	beq.n	800505c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a07      	ldr	r2, [pc, #28]	; (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d101      	bne.n	8005006 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005002:	4b07      	ldr	r3, [pc, #28]	; (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005004:	e001      	b.n	800500a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005006:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4902      	ldr	r1, [pc, #8]	; (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005012:	428b      	cmp	r3, r1
 8005014:	d106      	bne.n	8005024 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005016:	4b02      	ldr	r3, [pc, #8]	; (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005018:	e006      	b.n	8005028 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800501a:	bf00      	nop
 800501c:	40003800 	.word	0x40003800
 8005020:	40003400 	.word	0x40003400
 8005024:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005028:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800502c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800503c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504a:	f043 0204 	orr.w	r2, r3, #4
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7ff fdc0 	bl	8004bd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005058:	e000      	b.n	800505c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800505a:	bf00      	nop
}
 800505c:	bf00      	nop
 800505e:	3720      	adds	r7, #32
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	1c99      	adds	r1, r3, #2
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6251      	str	r1, [r2, #36]	; 0x24
 800508a:	881a      	ldrh	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005096:	b29b      	uxth	r3, r3
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d113      	bne.n	80050d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff ffc9 	bl	8005064 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	1c99      	adds	r1, r3, #2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6251      	str	r1, [r2, #36]	; 0x24
 80050ee:	8819      	ldrh	r1, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1d      	ldr	r2, [pc, #116]	; (800516c <I2SEx_TxISR_I2SExt+0x90>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d101      	bne.n	80050fe <I2SEx_TxISR_I2SExt+0x22>
 80050fa:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <I2SEx_TxISR_I2SExt+0x94>)
 80050fc:	e001      	b.n	8005102 <I2SEx_TxISR_I2SExt+0x26>
 80050fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005102:	460a      	mov	r2, r1
 8005104:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510a:	b29b      	uxth	r3, r3
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d121      	bne.n	8005162 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a12      	ldr	r2, [pc, #72]	; (800516c <I2SEx_TxISR_I2SExt+0x90>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d101      	bne.n	800512c <I2SEx_TxISR_I2SExt+0x50>
 8005128:	4b11      	ldr	r3, [pc, #68]	; (8005170 <I2SEx_TxISR_I2SExt+0x94>)
 800512a:	e001      	b.n	8005130 <I2SEx_TxISR_I2SExt+0x54>
 800512c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	490d      	ldr	r1, [pc, #52]	; (800516c <I2SEx_TxISR_I2SExt+0x90>)
 8005138:	428b      	cmp	r3, r1
 800513a:	d101      	bne.n	8005140 <I2SEx_TxISR_I2SExt+0x64>
 800513c:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <I2SEx_TxISR_I2SExt+0x94>)
 800513e:	e001      	b.n	8005144 <I2SEx_TxISR_I2SExt+0x68>
 8005140:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005144:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005148:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d106      	bne.n	8005162 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff ff81 	bl	8005064 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40003800 	.word	0x40003800
 8005170:	40003400 	.word	0x40003400

08005174 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68d8      	ldr	r0, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	1c99      	adds	r1, r3, #2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800518c:	b282      	uxth	r2, r0
 800518e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d113      	bne.n	80051d0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051b6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff ff4a 	bl	8005064 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a20      	ldr	r2, [pc, #128]	; (8005268 <I2SEx_RxISR_I2SExt+0x90>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d101      	bne.n	80051ee <I2SEx_RxISR_I2SExt+0x16>
 80051ea:	4b20      	ldr	r3, [pc, #128]	; (800526c <I2SEx_RxISR_I2SExt+0x94>)
 80051ec:	e001      	b.n	80051f2 <I2SEx_RxISR_I2SExt+0x1a>
 80051ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051f2:	68d8      	ldr	r0, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	1c99      	adds	r1, r3, #2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80051fe:	b282      	uxth	r2, r0
 8005200:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d121      	bne.n	800525e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a12      	ldr	r2, [pc, #72]	; (8005268 <I2SEx_RxISR_I2SExt+0x90>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d101      	bne.n	8005228 <I2SEx_RxISR_I2SExt+0x50>
 8005224:	4b11      	ldr	r3, [pc, #68]	; (800526c <I2SEx_RxISR_I2SExt+0x94>)
 8005226:	e001      	b.n	800522c <I2SEx_RxISR_I2SExt+0x54>
 8005228:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	490d      	ldr	r1, [pc, #52]	; (8005268 <I2SEx_RxISR_I2SExt+0x90>)
 8005234:	428b      	cmp	r3, r1
 8005236:	d101      	bne.n	800523c <I2SEx_RxISR_I2SExt+0x64>
 8005238:	4b0c      	ldr	r3, [pc, #48]	; (800526c <I2SEx_RxISR_I2SExt+0x94>)
 800523a:	e001      	b.n	8005240 <I2SEx_RxISR_I2SExt+0x68>
 800523c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005240:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005244:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d106      	bne.n	800525e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff ff03 	bl	8005064 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800525e:	bf00      	nop
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40003800 	.word	0x40003800
 800526c:	40003400 	.word	0x40003400

08005270 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e267      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d075      	beq.n	800537a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800528e:	4b88      	ldr	r3, [pc, #544]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 030c 	and.w	r3, r3, #12
 8005296:	2b04      	cmp	r3, #4
 8005298:	d00c      	beq.n	80052b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800529a:	4b85      	ldr	r3, [pc, #532]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d112      	bne.n	80052cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052a6:	4b82      	ldr	r3, [pc, #520]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052b2:	d10b      	bne.n	80052cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b4:	4b7e      	ldr	r3, [pc, #504]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d05b      	beq.n	8005378 <HAL_RCC_OscConfig+0x108>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d157      	bne.n	8005378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e242      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d4:	d106      	bne.n	80052e4 <HAL_RCC_OscConfig+0x74>
 80052d6:	4b76      	ldr	r3, [pc, #472]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a75      	ldr	r2, [pc, #468]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	e01d      	b.n	8005320 <HAL_RCC_OscConfig+0xb0>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052ec:	d10c      	bne.n	8005308 <HAL_RCC_OscConfig+0x98>
 80052ee:	4b70      	ldr	r3, [pc, #448]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a6f      	ldr	r2, [pc, #444]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	4b6d      	ldr	r3, [pc, #436]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a6c      	ldr	r2, [pc, #432]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e00b      	b.n	8005320 <HAL_RCC_OscConfig+0xb0>
 8005308:	4b69      	ldr	r3, [pc, #420]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a68      	ldr	r2, [pc, #416]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800530e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	4b66      	ldr	r3, [pc, #408]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a65      	ldr	r2, [pc, #404]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800531a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800531e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d013      	beq.n	8005350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005328:	f7fd faa4 	bl	8002874 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005330:	f7fd faa0 	bl	8002874 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b64      	cmp	r3, #100	; 0x64
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e207      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	4b5b      	ldr	r3, [pc, #364]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f0      	beq.n	8005330 <HAL_RCC_OscConfig+0xc0>
 800534e:	e014      	b.n	800537a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005350:	f7fd fa90 	bl	8002874 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005358:	f7fd fa8c 	bl	8002874 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b64      	cmp	r3, #100	; 0x64
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e1f3      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800536a:	4b51      	ldr	r3, [pc, #324]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0xe8>
 8005376:	e000      	b.n	800537a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d063      	beq.n	800544e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005386:	4b4a      	ldr	r3, [pc, #296]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00b      	beq.n	80053aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005392:	4b47      	ldr	r3, [pc, #284]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800539a:	2b08      	cmp	r3, #8
 800539c:	d11c      	bne.n	80053d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800539e:	4b44      	ldr	r3, [pc, #272]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d116      	bne.n	80053d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053aa:	4b41      	ldr	r3, [pc, #260]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <HAL_RCC_OscConfig+0x152>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d001      	beq.n	80053c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e1c7      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c2:	4b3b      	ldr	r3, [pc, #236]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4937      	ldr	r1, [pc, #220]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d6:	e03a      	b.n	800544e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d020      	beq.n	8005422 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053e0:	4b34      	ldr	r3, [pc, #208]	; (80054b4 <HAL_RCC_OscConfig+0x244>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e6:	f7fd fa45 	bl	8002874 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ee:	f7fd fa41 	bl	8002874 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e1a8      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005400:	4b2b      	ldr	r3, [pc, #172]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540c:	4b28      	ldr	r3, [pc, #160]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	4925      	ldr	r1, [pc, #148]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
 8005420:	e015      	b.n	800544e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005422:	4b24      	ldr	r3, [pc, #144]	; (80054b4 <HAL_RCC_OscConfig+0x244>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005428:	f7fd fa24 	bl	8002874 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005430:	f7fd fa20 	bl	8002874 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e187      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005442:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d036      	beq.n	80054c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d016      	beq.n	8005490 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005462:	4b15      	ldr	r3, [pc, #84]	; (80054b8 <HAL_RCC_OscConfig+0x248>)
 8005464:	2201      	movs	r2, #1
 8005466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005468:	f7fd fa04 	bl	8002874 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005470:	f7fd fa00 	bl	8002874 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e167      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005482:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0f0      	beq.n	8005470 <HAL_RCC_OscConfig+0x200>
 800548e:	e01b      	b.n	80054c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005490:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <HAL_RCC_OscConfig+0x248>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005496:	f7fd f9ed 	bl	8002874 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800549c:	e00e      	b.n	80054bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800549e:	f7fd f9e9 	bl	8002874 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d907      	bls.n	80054bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e150      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
 80054b0:	40023800 	.word	0x40023800
 80054b4:	42470000 	.word	0x42470000
 80054b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054bc:	4b88      	ldr	r3, [pc, #544]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1ea      	bne.n	800549e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8097 	beq.w	8005604 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d6:	2300      	movs	r3, #0
 80054d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054da:	4b81      	ldr	r3, [pc, #516]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10f      	bne.n	8005506 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e6:	2300      	movs	r3, #0
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	4b7d      	ldr	r3, [pc, #500]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	4a7c      	ldr	r2, [pc, #496]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f4:	6413      	str	r3, [r2, #64]	; 0x40
 80054f6:	4b7a      	ldr	r3, [pc, #488]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005502:	2301      	movs	r3, #1
 8005504:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005506:	4b77      	ldr	r3, [pc, #476]	; (80056e4 <HAL_RCC_OscConfig+0x474>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550e:	2b00      	cmp	r3, #0
 8005510:	d118      	bne.n	8005544 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005512:	4b74      	ldr	r3, [pc, #464]	; (80056e4 <HAL_RCC_OscConfig+0x474>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a73      	ldr	r2, [pc, #460]	; (80056e4 <HAL_RCC_OscConfig+0x474>)
 8005518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800551e:	f7fd f9a9 	bl	8002874 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005526:	f7fd f9a5 	bl	8002874 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e10c      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005538:	4b6a      	ldr	r3, [pc, #424]	; (80056e4 <HAL_RCC_OscConfig+0x474>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d106      	bne.n	800555a <HAL_RCC_OscConfig+0x2ea>
 800554c:	4b64      	ldr	r3, [pc, #400]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 800554e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005550:	4a63      	ldr	r2, [pc, #396]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	6713      	str	r3, [r2, #112]	; 0x70
 8005558:	e01c      	b.n	8005594 <HAL_RCC_OscConfig+0x324>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	2b05      	cmp	r3, #5
 8005560:	d10c      	bne.n	800557c <HAL_RCC_OscConfig+0x30c>
 8005562:	4b5f      	ldr	r3, [pc, #380]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	4a5e      	ldr	r2, [pc, #376]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005568:	f043 0304 	orr.w	r3, r3, #4
 800556c:	6713      	str	r3, [r2, #112]	; 0x70
 800556e:	4b5c      	ldr	r3, [pc, #368]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005572:	4a5b      	ldr	r2, [pc, #364]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	6713      	str	r3, [r2, #112]	; 0x70
 800557a:	e00b      	b.n	8005594 <HAL_RCC_OscConfig+0x324>
 800557c:	4b58      	ldr	r3, [pc, #352]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	4a57      	ldr	r2, [pc, #348]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005582:	f023 0301 	bic.w	r3, r3, #1
 8005586:	6713      	str	r3, [r2, #112]	; 0x70
 8005588:	4b55      	ldr	r3, [pc, #340]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558c:	4a54      	ldr	r2, [pc, #336]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 800558e:	f023 0304 	bic.w	r3, r3, #4
 8005592:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d015      	beq.n	80055c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559c:	f7fd f96a 	bl	8002874 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a2:	e00a      	b.n	80055ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a4:	f7fd f966 	bl	8002874 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e0cb      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ba:	4b49      	ldr	r3, [pc, #292]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0ee      	beq.n	80055a4 <HAL_RCC_OscConfig+0x334>
 80055c6:	e014      	b.n	80055f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c8:	f7fd f954 	bl	8002874 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ce:	e00a      	b.n	80055e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055d0:	f7fd f950 	bl	8002874 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	f241 3288 	movw	r2, #5000	; 0x1388
 80055de:	4293      	cmp	r3, r2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e0b5      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e6:	4b3e      	ldr	r3, [pc, #248]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1ee      	bne.n	80055d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d105      	bne.n	8005604 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f8:	4b39      	ldr	r3, [pc, #228]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	4a38      	ldr	r2, [pc, #224]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005602:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80a1 	beq.w	8005750 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800560e:	4b34      	ldr	r3, [pc, #208]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 030c 	and.w	r3, r3, #12
 8005616:	2b08      	cmp	r3, #8
 8005618:	d05c      	beq.n	80056d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d141      	bne.n	80056a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005622:	4b31      	ldr	r3, [pc, #196]	; (80056e8 <HAL_RCC_OscConfig+0x478>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005628:	f7fd f924 	bl	8002874 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005630:	f7fd f920 	bl	8002874 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e087      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005642:	4b27      	ldr	r3, [pc, #156]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69da      	ldr	r2, [r3, #28]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	019b      	lsls	r3, r3, #6
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	085b      	lsrs	r3, r3, #1
 8005666:	3b01      	subs	r3, #1
 8005668:	041b      	lsls	r3, r3, #16
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	061b      	lsls	r3, r3, #24
 8005672:	491b      	ldr	r1, [pc, #108]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005674:	4313      	orrs	r3, r2
 8005676:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005678:	4b1b      	ldr	r3, [pc, #108]	; (80056e8 <HAL_RCC_OscConfig+0x478>)
 800567a:	2201      	movs	r2, #1
 800567c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567e:	f7fd f8f9 	bl	8002874 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005686:	f7fd f8f5 	bl	8002874 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e05c      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005698:	4b11      	ldr	r3, [pc, #68]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCC_OscConfig+0x416>
 80056a4:	e054      	b.n	8005750 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a6:	4b10      	ldr	r3, [pc, #64]	; (80056e8 <HAL_RCC_OscConfig+0x478>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ac:	f7fd f8e2 	bl	8002874 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b4:	f7fd f8de 	bl	8002874 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e045      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c6:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x444>
 80056d2:	e03d      	b.n	8005750 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d107      	bne.n	80056ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e038      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
 80056e0:	40023800 	.word	0x40023800
 80056e4:	40007000 	.word	0x40007000
 80056e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056ec:	4b1b      	ldr	r3, [pc, #108]	; (800575c <HAL_RCC_OscConfig+0x4ec>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d028      	beq.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005704:	429a      	cmp	r2, r3
 8005706:	d121      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005712:	429a      	cmp	r2, r3
 8005714:	d11a      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800571c:	4013      	ands	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005722:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005724:	4293      	cmp	r3, r2
 8005726:	d111      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005732:	085b      	lsrs	r3, r3, #1
 8005734:	3b01      	subs	r3, #1
 8005736:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005738:	429a      	cmp	r2, r3
 800573a:	d107      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005746:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005748:	429a      	cmp	r2, r3
 800574a:	d001      	beq.n	8005750 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40023800 	.word	0x40023800

08005760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e0cc      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005774:	4b68      	ldr	r3, [pc, #416]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d90c      	bls.n	800579c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005782:	4b65      	ldr	r3, [pc, #404]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800578a:	4b63      	ldr	r3, [pc, #396]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d001      	beq.n	800579c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0b8      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d020      	beq.n	80057ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057b4:	4b59      	ldr	r3, [pc, #356]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	4a58      	ldr	r2, [pc, #352]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057cc:	4b53      	ldr	r3, [pc, #332]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4a52      	ldr	r2, [pc, #328]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d8:	4b50      	ldr	r3, [pc, #320]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	494d      	ldr	r1, [pc, #308]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d044      	beq.n	8005880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d107      	bne.n	800580e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fe:	4b47      	ldr	r3, [pc, #284]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d119      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e07f      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d003      	beq.n	800581e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800581a:	2b03      	cmp	r3, #3
 800581c:	d107      	bne.n	800582e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581e:	4b3f      	ldr	r3, [pc, #252]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e06f      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582e:	4b3b      	ldr	r3, [pc, #236]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e067      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800583e:	4b37      	ldr	r3, [pc, #220]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f023 0203 	bic.w	r2, r3, #3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4934      	ldr	r1, [pc, #208]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 800584c:	4313      	orrs	r3, r2
 800584e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005850:	f7fd f810 	bl	8002874 <HAL_GetTick>
 8005854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005856:	e00a      	b.n	800586e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005858:	f7fd f80c 	bl	8002874 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f241 3288 	movw	r2, #5000	; 0x1388
 8005866:	4293      	cmp	r3, r2
 8005868:	d901      	bls.n	800586e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e04f      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586e:	4b2b      	ldr	r3, [pc, #172]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 020c 	and.w	r2, r3, #12
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	429a      	cmp	r2, r3
 800587e:	d1eb      	bne.n	8005858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005880:	4b25      	ldr	r3, [pc, #148]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d20c      	bcs.n	80058a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588e:	4b22      	ldr	r3, [pc, #136]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005896:	4b20      	ldr	r3, [pc, #128]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e032      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b4:	4b19      	ldr	r3, [pc, #100]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	4916      	ldr	r1, [pc, #88]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058d2:	4b12      	ldr	r3, [pc, #72]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	490e      	ldr	r1, [pc, #56]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058e6:	f000 f821 	bl	800592c <HAL_RCC_GetSysClockFreq>
 80058ea:	4602      	mov	r2, r0
 80058ec:	4b0b      	ldr	r3, [pc, #44]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	091b      	lsrs	r3, r3, #4
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	490a      	ldr	r1, [pc, #40]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 80058f8:	5ccb      	ldrb	r3, [r1, r3]
 80058fa:	fa22 f303 	lsr.w	r3, r2, r3
 80058fe:	4a09      	ldr	r2, [pc, #36]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 8005900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <HAL_RCC_ClockConfig+0x1c8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fc ff70 	bl	80027ec <HAL_InitTick>

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40023c00 	.word	0x40023c00
 800591c:	40023800 	.word	0x40023800
 8005920:	0800cf5c 	.word	0x0800cf5c
 8005924:	20000004 	.word	0x20000004
 8005928:	20000008 	.word	0x20000008

0800592c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800592c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005930:	b094      	sub	sp, #80	; 0x50
 8005932:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	647b      	str	r3, [r7, #68]	; 0x44
 8005938:	2300      	movs	r3, #0
 800593a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800593c:	2300      	movs	r3, #0
 800593e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005944:	4b79      	ldr	r3, [pc, #484]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 030c 	and.w	r3, r3, #12
 800594c:	2b08      	cmp	r3, #8
 800594e:	d00d      	beq.n	800596c <HAL_RCC_GetSysClockFreq+0x40>
 8005950:	2b08      	cmp	r3, #8
 8005952:	f200 80e1 	bhi.w	8005b18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0x34>
 800595a:	2b04      	cmp	r3, #4
 800595c:	d003      	beq.n	8005966 <HAL_RCC_GetSysClockFreq+0x3a>
 800595e:	e0db      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005960:	4b73      	ldr	r3, [pc, #460]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8005962:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005964:	e0db      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005966:	4b73      	ldr	r3, [pc, #460]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x208>)
 8005968:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800596a:	e0d8      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800596c:	4b6f      	ldr	r3, [pc, #444]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005974:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005976:	4b6d      	ldr	r3, [pc, #436]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d063      	beq.n	8005a4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005982:	4b6a      	ldr	r3, [pc, #424]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	099b      	lsrs	r3, r3, #6
 8005988:	2200      	movs	r2, #0
 800598a:	63bb      	str	r3, [r7, #56]	; 0x38
 800598c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005994:	633b      	str	r3, [r7, #48]	; 0x30
 8005996:	2300      	movs	r3, #0
 8005998:	637b      	str	r3, [r7, #52]	; 0x34
 800599a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800599e:	4622      	mov	r2, r4
 80059a0:	462b      	mov	r3, r5
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f04f 0100 	mov.w	r1, #0
 80059aa:	0159      	lsls	r1, r3, #5
 80059ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059b0:	0150      	lsls	r0, r2, #5
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4621      	mov	r1, r4
 80059b8:	1a51      	subs	r1, r2, r1
 80059ba:	6139      	str	r1, [r7, #16]
 80059bc:	4629      	mov	r1, r5
 80059be:	eb63 0301 	sbc.w	r3, r3, r1
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059d0:	4659      	mov	r1, fp
 80059d2:	018b      	lsls	r3, r1, #6
 80059d4:	4651      	mov	r1, sl
 80059d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059da:	4651      	mov	r1, sl
 80059dc:	018a      	lsls	r2, r1, #6
 80059de:	4651      	mov	r1, sl
 80059e0:	ebb2 0801 	subs.w	r8, r2, r1
 80059e4:	4659      	mov	r1, fp
 80059e6:	eb63 0901 	sbc.w	r9, r3, r1
 80059ea:	f04f 0200 	mov.w	r2, #0
 80059ee:	f04f 0300 	mov.w	r3, #0
 80059f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059fe:	4690      	mov	r8, r2
 8005a00:	4699      	mov	r9, r3
 8005a02:	4623      	mov	r3, r4
 8005a04:	eb18 0303 	adds.w	r3, r8, r3
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	462b      	mov	r3, r5
 8005a0c:	eb49 0303 	adc.w	r3, r9, r3
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a1e:	4629      	mov	r1, r5
 8005a20:	024b      	lsls	r3, r1, #9
 8005a22:	4621      	mov	r1, r4
 8005a24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a28:	4621      	mov	r1, r4
 8005a2a:	024a      	lsls	r2, r1, #9
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a32:	2200      	movs	r2, #0
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a3c:	f7fb f90c 	bl	8000c58 <__aeabi_uldivmod>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4613      	mov	r3, r2
 8005a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a48:	e058      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a4a:	4b38      	ldr	r3, [pc, #224]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	099b      	lsrs	r3, r3, #6
 8005a50:	2200      	movs	r2, #0
 8005a52:	4618      	mov	r0, r3
 8005a54:	4611      	mov	r1, r2
 8005a56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a5a:	623b      	str	r3, [r7, #32]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a64:	4642      	mov	r2, r8
 8005a66:	464b      	mov	r3, r9
 8005a68:	f04f 0000 	mov.w	r0, #0
 8005a6c:	f04f 0100 	mov.w	r1, #0
 8005a70:	0159      	lsls	r1, r3, #5
 8005a72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a76:	0150      	lsls	r0, r2, #5
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a82:	4649      	mov	r1, r9
 8005a84:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a9c:	ebb2 040a 	subs.w	r4, r2, sl
 8005aa0:	eb63 050b 	sbc.w	r5, r3, fp
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	00eb      	lsls	r3, r5, #3
 8005aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ab2:	00e2      	lsls	r2, r4, #3
 8005ab4:	4614      	mov	r4, r2
 8005ab6:	461d      	mov	r5, r3
 8005ab8:	4643      	mov	r3, r8
 8005aba:	18e3      	adds	r3, r4, r3
 8005abc:	603b      	str	r3, [r7, #0]
 8005abe:	464b      	mov	r3, r9
 8005ac0:	eb45 0303 	adc.w	r3, r5, r3
 8005ac4:	607b      	str	r3, [r7, #4]
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	028b      	lsls	r3, r1, #10
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005adc:	4621      	mov	r1, r4
 8005ade:	028a      	lsls	r2, r1, #10
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	61fa      	str	r2, [r7, #28]
 8005aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005af0:	f7fb f8b2 	bl	8000c58 <__aeabi_uldivmod>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4613      	mov	r3, r2
 8005afa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005afc:	4b0b      	ldr	r3, [pc, #44]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	0c1b      	lsrs	r3, r3, #16
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	3301      	adds	r3, #1
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b16:	e002      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b18:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3750      	adds	r7, #80	; 0x50
 8005b24:	46bd      	mov	sp, r7
 8005b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	00f42400 	.word	0x00f42400
 8005b34:	007a1200 	.word	0x007a1200

08005b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b3c:	4b03      	ldr	r3, [pc, #12]	; (8005b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	20000004 	.word	0x20000004

08005b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b54:	f7ff fff0 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	0a9b      	lsrs	r3, r3, #10
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	4903      	ldr	r1, [pc, #12]	; (8005b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b66:	5ccb      	ldrb	r3, [r1, r3]
 8005b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	40023800 	.word	0x40023800
 8005b74:	0800cf6c 	.word	0x0800cf6c

08005b78 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d105      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d038      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ba0:	4b68      	ldr	r3, [pc, #416]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ba6:	f7fc fe65 	bl	8002874 <HAL_GetTick>
 8005baa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bae:	f7fc fe61 	bl	8002874 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e0bd      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bc0:	4b61      	ldr	r3, [pc, #388]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f0      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	019b      	lsls	r3, r3, #6
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	071b      	lsls	r3, r3, #28
 8005bde:	495a      	ldr	r1, [pc, #360]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005be6:	4b57      	ldr	r3, [pc, #348]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005be8:	2201      	movs	r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bec:	f7fc fe42 	bl	8002874 <HAL_GetTick>
 8005bf0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bf4:	f7fc fe3e 	bl	8002874 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e09a      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c06:	4b50      	ldr	r3, [pc, #320]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0f0      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 8083 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	4b48      	ldr	r3, [pc, #288]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	4a47      	ldr	r2, [pc, #284]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8005c30:	4b45      	ldr	r3, [pc, #276]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c3c:	4b43      	ldr	r3, [pc, #268]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a42      	ldr	r2, [pc, #264]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c46:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c48:	f7fc fe14 	bl	8002874 <HAL_GetTick>
 8005c4c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c50:	f7fc fe10 	bl	8002874 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e06c      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c62:	4b3a      	ldr	r3, [pc, #232]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0f0      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c6e:	4b36      	ldr	r3, [pc, #216]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c76:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d02f      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d028      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c8c:	4b2e      	ldr	r3, [pc, #184]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c94:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c96:	4b2e      	ldr	r3, [pc, #184]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c9c:	4b2c      	ldr	r3, [pc, #176]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ca2:	4a29      	ldr	r2, [pc, #164]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ca8:	4b27      	ldr	r3, [pc, #156]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d114      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005cb4:	f7fc fdde 	bl	8002874 <HAL_GetTick>
 8005cb8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cba:	e00a      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cbc:	f7fc fdda 	bl	8002874 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e034      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd2:	4b1d      	ldr	r3, [pc, #116]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0ee      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cea:	d10d      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005cec:	4b16      	ldr	r3, [pc, #88]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d00:	4911      	ldr	r1, [pc, #68]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	608b      	str	r3, [r1, #8]
 8005d06:	e005      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005d08:	4b0f      	ldr	r3, [pc, #60]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	4a0e      	ldr	r2, [pc, #56]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d0e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d12:	6093      	str	r3, [r2, #8]
 8005d14:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d20:	4909      	ldr	r1, [pc, #36]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	7d1a      	ldrb	r2, [r3, #20]
 8005d36:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005d38:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	42470068 	.word	0x42470068
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	40007000 	.word	0x40007000
 8005d50:	42470e40 	.word	0x42470e40
 8005d54:	424711e0 	.word	0x424711e0

08005d58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d140      	bne.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005d76:	4b24      	ldr	r3, [pc, #144]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d131      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d8c:	4b1f      	ldr	r3, [pc, #124]	; (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005d8e:	617b      	str	r3, [r7, #20]
          break;
 8005d90:	e031      	b.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d92:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d9e:	d109      	bne.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005da0:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005daa:	4a19      	ldr	r2, [pc, #100]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db0:	613b      	str	r3, [r7, #16]
 8005db2:	e008      	b.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005db4:	4b14      	ldr	r3, [pc, #80]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005dc6:	4b10      	ldr	r3, [pc, #64]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dcc:	099b      	lsrs	r3, r3, #6
 8005dce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	fb02 f303 	mul.w	r3, r2, r3
 8005dd8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005dda:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de0:	0f1b      	lsrs	r3, r3, #28
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dec:	617b      	str	r3, [r7, #20]
          break;
 8005dee:	e002      	b.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	617b      	str	r3, [r7, #20]
          break;
 8005df4:	bf00      	nop
        }
      }
      break;
 8005df6:	bf00      	nop
    }
  }
  return frequency;
 8005df8:	697b      	ldr	r3, [r7, #20]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	00bb8000 	.word	0x00bb8000
 8005e10:	007a1200 	.word	0x007a1200
 8005e14:	00f42400 	.word	0x00f42400

08005e18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e07b      	b.n	8005f22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d108      	bne.n	8005e44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e3a:	d009      	beq.n	8005e50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	61da      	str	r2, [r3, #28]
 8005e42:	e005      	b.n	8005e50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7fc fa70 	bl	8002350 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	431a      	orrs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed4:	ea42 0103 	orr.w	r1, r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005edc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	0c1b      	lsrs	r3, r3, #16
 8005eee:	f003 0104 	and.w	r1, r3, #4
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	f003 0210 	and.w	r2, r3, #16
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69da      	ldr	r2, [r3, #28]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e041      	b.n	8005fc0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7fc fa45 	bl	80023e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3304      	adds	r3, #4
 8005f66:	4619      	mov	r1, r3
 8005f68:	4610      	mov	r0, r2
 8005f6a:	f000 fc53 	bl	8006814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d001      	beq.n	8005fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e044      	b.n	800606a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0201 	orr.w	r2, r2, #1
 8005ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a1e      	ldr	r2, [pc, #120]	; (8006078 <HAL_TIM_Base_Start_IT+0xb0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d018      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x6c>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600a:	d013      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x6c>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a1a      	ldr	r2, [pc, #104]	; (800607c <HAL_TIM_Base_Start_IT+0xb4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00e      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x6c>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a19      	ldr	r2, [pc, #100]	; (8006080 <HAL_TIM_Base_Start_IT+0xb8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x6c>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a17      	ldr	r2, [pc, #92]	; (8006084 <HAL_TIM_Base_Start_IT+0xbc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x6c>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a16      	ldr	r2, [pc, #88]	; (8006088 <HAL_TIM_Base_Start_IT+0xc0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d111      	bne.n	8006058 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b06      	cmp	r3, #6
 8006044:	d010      	beq.n	8006068 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0201 	orr.w	r2, r2, #1
 8006054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006056:	e007      	b.n	8006068 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0201 	orr.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	40010000 	.word	0x40010000
 800607c:	40000400 	.word	0x40000400
 8006080:	40000800 	.word	0x40000800
 8006084:	40000c00 	.word	0x40000c00
 8006088:	40014000 	.word	0x40014000

0800608c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e041      	b.n	8006122 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f839 	bl	800612a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f000 fba2 	bl	8006814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <HAL_TIM_PWM_Start+0x24>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b01      	cmp	r3, #1
 800615a:	bf14      	ite	ne
 800615c:	2301      	movne	r3, #1
 800615e:	2300      	moveq	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	e022      	b.n	80061aa <HAL_TIM_PWM_Start+0x6a>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b04      	cmp	r3, #4
 8006168:	d109      	bne.n	800617e <HAL_TIM_PWM_Start+0x3e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b01      	cmp	r3, #1
 8006174:	bf14      	ite	ne
 8006176:	2301      	movne	r3, #1
 8006178:	2300      	moveq	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	e015      	b.n	80061aa <HAL_TIM_PWM_Start+0x6a>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b08      	cmp	r3, #8
 8006182:	d109      	bne.n	8006198 <HAL_TIM_PWM_Start+0x58>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	bf14      	ite	ne
 8006190:	2301      	movne	r3, #1
 8006192:	2300      	moveq	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	e008      	b.n	80061aa <HAL_TIM_PWM_Start+0x6a>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	bf14      	ite	ne
 80061a4:	2301      	movne	r3, #1
 80061a6:	2300      	moveq	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e068      	b.n	8006284 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d104      	bne.n	80061c2 <HAL_TIM_PWM_Start+0x82>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061c0:	e013      	b.n	80061ea <HAL_TIM_PWM_Start+0xaa>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d104      	bne.n	80061d2 <HAL_TIM_PWM_Start+0x92>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061d0:	e00b      	b.n	80061ea <HAL_TIM_PWM_Start+0xaa>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d104      	bne.n	80061e2 <HAL_TIM_PWM_Start+0xa2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061e0:	e003      	b.n	80061ea <HAL_TIM_PWM_Start+0xaa>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2202      	movs	r2, #2
 80061e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2201      	movs	r2, #1
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fdb4 	bl	8006d60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a23      	ldr	r2, [pc, #140]	; (800628c <HAL_TIM_PWM_Start+0x14c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d107      	bne.n	8006212 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006210:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a1d      	ldr	r2, [pc, #116]	; (800628c <HAL_TIM_PWM_Start+0x14c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d018      	beq.n	800624e <HAL_TIM_PWM_Start+0x10e>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006224:	d013      	beq.n	800624e <HAL_TIM_PWM_Start+0x10e>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a19      	ldr	r2, [pc, #100]	; (8006290 <HAL_TIM_PWM_Start+0x150>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00e      	beq.n	800624e <HAL_TIM_PWM_Start+0x10e>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a17      	ldr	r2, [pc, #92]	; (8006294 <HAL_TIM_PWM_Start+0x154>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d009      	beq.n	800624e <HAL_TIM_PWM_Start+0x10e>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a16      	ldr	r2, [pc, #88]	; (8006298 <HAL_TIM_PWM_Start+0x158>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d004      	beq.n	800624e <HAL_TIM_PWM_Start+0x10e>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a14      	ldr	r2, [pc, #80]	; (800629c <HAL_TIM_PWM_Start+0x15c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d111      	bne.n	8006272 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b06      	cmp	r3, #6
 800625e:	d010      	beq.n	8006282 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006270:	e007      	b.n	8006282 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f042 0201 	orr.w	r2, r2, #1
 8006280:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40010000 	.word	0x40010000
 8006290:	40000400 	.word	0x40000400
 8006294:	40000800 	.word	0x40000800
 8006298:	40000c00 	.word	0x40000c00
 800629c:	40014000 	.word	0x40014000

080062a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d122      	bne.n	80062fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d11b      	bne.n	80062fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0202 	mvn.w	r2, #2
 80062cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fa77 	bl	80067d6 <HAL_TIM_IC_CaptureCallback>
 80062e8:	e005      	b.n	80062f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa69 	bl	80067c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fa7a 	bl	80067ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b04      	cmp	r3, #4
 8006308:	d122      	bne.n	8006350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b04      	cmp	r3, #4
 8006316:	d11b      	bne.n	8006350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0204 	mvn.w	r2, #4
 8006320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2202      	movs	r2, #2
 8006326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fa4d 	bl	80067d6 <HAL_TIM_IC_CaptureCallback>
 800633c:	e005      	b.n	800634a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fa3f 	bl	80067c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fa50 	bl	80067ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0308 	and.w	r3, r3, #8
 800635a:	2b08      	cmp	r3, #8
 800635c:	d122      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b08      	cmp	r3, #8
 800636a:	d11b      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f06f 0208 	mvn.w	r2, #8
 8006374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2204      	movs	r2, #4
 800637a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fa23 	bl	80067d6 <HAL_TIM_IC_CaptureCallback>
 8006390:	e005      	b.n	800639e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fa15 	bl	80067c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fa26 	bl	80067ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0310 	and.w	r3, r3, #16
 80063ae:	2b10      	cmp	r3, #16
 80063b0:	d122      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f003 0310 	and.w	r3, r3, #16
 80063bc:	2b10      	cmp	r3, #16
 80063be:	d11b      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f06f 0210 	mvn.w	r2, #16
 80063c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2208      	movs	r2, #8
 80063ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f9f9 	bl	80067d6 <HAL_TIM_IC_CaptureCallback>
 80063e4:	e005      	b.n	80063f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f9eb 	bl	80067c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f9fc 	bl	80067ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b01      	cmp	r3, #1
 8006404:	d10e      	bne.n	8006424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b01      	cmp	r3, #1
 8006412:	d107      	bne.n	8006424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f06f 0201 	mvn.w	r2, #1
 800641c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fb f86a 	bl	80014f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800642e:	2b80      	cmp	r3, #128	; 0x80
 8006430:	d10e      	bne.n	8006450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643c:	2b80      	cmp	r3, #128	; 0x80
 800643e:	d107      	bne.n	8006450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fd26 	bl	8006e9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645a:	2b40      	cmp	r3, #64	; 0x40
 800645c:	d10e      	bne.n	800647c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006468:	2b40      	cmp	r3, #64	; 0x40
 800646a:	d107      	bne.n	800647c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f9c1 	bl	80067fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b20      	cmp	r3, #32
 8006488:	d10e      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f003 0320 	and.w	r3, r3, #32
 8006494:	2b20      	cmp	r3, #32
 8006496:	d107      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0220 	mvn.w	r2, #32
 80064a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fcf0 	bl	8006e88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064a8:	bf00      	nop
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d101      	bne.n	80064ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064ca:	2302      	movs	r3, #2
 80064cc:	e0ae      	b.n	800662c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b0c      	cmp	r3, #12
 80064da:	f200 809f 	bhi.w	800661c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064de:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	08006519 	.word	0x08006519
 80064e8:	0800661d 	.word	0x0800661d
 80064ec:	0800661d 	.word	0x0800661d
 80064f0:	0800661d 	.word	0x0800661d
 80064f4:	08006559 	.word	0x08006559
 80064f8:	0800661d 	.word	0x0800661d
 80064fc:	0800661d 	.word	0x0800661d
 8006500:	0800661d 	.word	0x0800661d
 8006504:	0800659b 	.word	0x0800659b
 8006508:	0800661d 	.word	0x0800661d
 800650c:	0800661d 	.word	0x0800661d
 8006510:	0800661d 	.word	0x0800661d
 8006514:	080065db 	.word	0x080065db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	4618      	mov	r0, r3
 8006520:	f000 f9f8 	bl	8006914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0208 	orr.w	r2, r2, #8
 8006532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699a      	ldr	r2, [r3, #24]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0204 	bic.w	r2, r2, #4
 8006542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6999      	ldr	r1, [r3, #24]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	691a      	ldr	r2, [r3, #16]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	619a      	str	r2, [r3, #24]
      break;
 8006556:	e064      	b.n	8006622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fa3e 	bl	80069e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6999      	ldr	r1, [r3, #24]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	021a      	lsls	r2, r3, #8
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	619a      	str	r2, [r3, #24]
      break;
 8006598:	e043      	b.n	8006622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 fa89 	bl	8006ab8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69da      	ldr	r2, [r3, #28]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0208 	orr.w	r2, r2, #8
 80065b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69da      	ldr	r2, [r3, #28]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0204 	bic.w	r2, r2, #4
 80065c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69d9      	ldr	r1, [r3, #28]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	691a      	ldr	r2, [r3, #16]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	61da      	str	r2, [r3, #28]
      break;
 80065d8:	e023      	b.n	8006622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68b9      	ldr	r1, [r7, #8]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 fad3 	bl	8006b8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69da      	ldr	r2, [r3, #28]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69da      	ldr	r2, [r3, #28]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69d9      	ldr	r1, [r3, #28]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	021a      	lsls	r2, r3, #8
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	61da      	str	r2, [r3, #28]
      break;
 800661a:	e002      	b.n	8006622 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	75fb      	strb	r3, [r7, #23]
      break;
 8006620:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800662a:	7dfb      	ldrb	r3, [r7, #23]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006648:	2b01      	cmp	r3, #1
 800664a:	d101      	bne.n	8006650 <HAL_TIM_ConfigClockSource+0x1c>
 800664c:	2302      	movs	r3, #2
 800664e:	e0b4      	b.n	80067ba <HAL_TIM_ConfigClockSource+0x186>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800666e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006676:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006688:	d03e      	beq.n	8006708 <HAL_TIM_ConfigClockSource+0xd4>
 800668a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800668e:	f200 8087 	bhi.w	80067a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006696:	f000 8086 	beq.w	80067a6 <HAL_TIM_ConfigClockSource+0x172>
 800669a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669e:	d87f      	bhi.n	80067a0 <HAL_TIM_ConfigClockSource+0x16c>
 80066a0:	2b70      	cmp	r3, #112	; 0x70
 80066a2:	d01a      	beq.n	80066da <HAL_TIM_ConfigClockSource+0xa6>
 80066a4:	2b70      	cmp	r3, #112	; 0x70
 80066a6:	d87b      	bhi.n	80067a0 <HAL_TIM_ConfigClockSource+0x16c>
 80066a8:	2b60      	cmp	r3, #96	; 0x60
 80066aa:	d050      	beq.n	800674e <HAL_TIM_ConfigClockSource+0x11a>
 80066ac:	2b60      	cmp	r3, #96	; 0x60
 80066ae:	d877      	bhi.n	80067a0 <HAL_TIM_ConfigClockSource+0x16c>
 80066b0:	2b50      	cmp	r3, #80	; 0x50
 80066b2:	d03c      	beq.n	800672e <HAL_TIM_ConfigClockSource+0xfa>
 80066b4:	2b50      	cmp	r3, #80	; 0x50
 80066b6:	d873      	bhi.n	80067a0 <HAL_TIM_ConfigClockSource+0x16c>
 80066b8:	2b40      	cmp	r3, #64	; 0x40
 80066ba:	d058      	beq.n	800676e <HAL_TIM_ConfigClockSource+0x13a>
 80066bc:	2b40      	cmp	r3, #64	; 0x40
 80066be:	d86f      	bhi.n	80067a0 <HAL_TIM_ConfigClockSource+0x16c>
 80066c0:	2b30      	cmp	r3, #48	; 0x30
 80066c2:	d064      	beq.n	800678e <HAL_TIM_ConfigClockSource+0x15a>
 80066c4:	2b30      	cmp	r3, #48	; 0x30
 80066c6:	d86b      	bhi.n	80067a0 <HAL_TIM_ConfigClockSource+0x16c>
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d060      	beq.n	800678e <HAL_TIM_ConfigClockSource+0x15a>
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d867      	bhi.n	80067a0 <HAL_TIM_ConfigClockSource+0x16c>
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d05c      	beq.n	800678e <HAL_TIM_ConfigClockSource+0x15a>
 80066d4:	2b10      	cmp	r3, #16
 80066d6:	d05a      	beq.n	800678e <HAL_TIM_ConfigClockSource+0x15a>
 80066d8:	e062      	b.n	80067a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6818      	ldr	r0, [r3, #0]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	6899      	ldr	r1, [r3, #8]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f000 fb19 	bl	8006d20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	609a      	str	r2, [r3, #8]
      break;
 8006706:	e04f      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6818      	ldr	r0, [r3, #0]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	6899      	ldr	r1, [r3, #8]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f000 fb02 	bl	8006d20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800672a:	609a      	str	r2, [r3, #8]
      break;
 800672c:	e03c      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	6859      	ldr	r1, [r3, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	461a      	mov	r2, r3
 800673c:	f000 fa76 	bl	8006c2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2150      	movs	r1, #80	; 0x50
 8006746:	4618      	mov	r0, r3
 8006748:	f000 facf 	bl	8006cea <TIM_ITRx_SetConfig>
      break;
 800674c:	e02c      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6818      	ldr	r0, [r3, #0]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	6859      	ldr	r1, [r3, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	461a      	mov	r2, r3
 800675c:	f000 fa95 	bl	8006c8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2160      	movs	r1, #96	; 0x60
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fabf 	bl	8006cea <TIM_ITRx_SetConfig>
      break;
 800676c:	e01c      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6818      	ldr	r0, [r3, #0]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	6859      	ldr	r1, [r3, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	461a      	mov	r2, r3
 800677c:	f000 fa56 	bl	8006c2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2140      	movs	r1, #64	; 0x40
 8006786:	4618      	mov	r0, r3
 8006788:	f000 faaf 	bl	8006cea <TIM_ITRx_SetConfig>
      break;
 800678c:	e00c      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4619      	mov	r1, r3
 8006798:	4610      	mov	r0, r2
 800679a:	f000 faa6 	bl	8006cea <TIM_ITRx_SetConfig>
      break;
 800679e:	e003      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	73fb      	strb	r3, [r7, #15]
      break;
 80067a4:	e000      	b.n	80067a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006806:	bf00      	nop
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
	...

08006814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a34      	ldr	r2, [pc, #208]	; (80068f8 <TIM_Base_SetConfig+0xe4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d00f      	beq.n	800684c <TIM_Base_SetConfig+0x38>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006832:	d00b      	beq.n	800684c <TIM_Base_SetConfig+0x38>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a31      	ldr	r2, [pc, #196]	; (80068fc <TIM_Base_SetConfig+0xe8>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d007      	beq.n	800684c <TIM_Base_SetConfig+0x38>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a30      	ldr	r2, [pc, #192]	; (8006900 <TIM_Base_SetConfig+0xec>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d003      	beq.n	800684c <TIM_Base_SetConfig+0x38>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a2f      	ldr	r2, [pc, #188]	; (8006904 <TIM_Base_SetConfig+0xf0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d108      	bne.n	800685e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	4313      	orrs	r3, r2
 800685c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a25      	ldr	r2, [pc, #148]	; (80068f8 <TIM_Base_SetConfig+0xe4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d01b      	beq.n	800689e <TIM_Base_SetConfig+0x8a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686c:	d017      	beq.n	800689e <TIM_Base_SetConfig+0x8a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a22      	ldr	r2, [pc, #136]	; (80068fc <TIM_Base_SetConfig+0xe8>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d013      	beq.n	800689e <TIM_Base_SetConfig+0x8a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a21      	ldr	r2, [pc, #132]	; (8006900 <TIM_Base_SetConfig+0xec>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00f      	beq.n	800689e <TIM_Base_SetConfig+0x8a>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a20      	ldr	r2, [pc, #128]	; (8006904 <TIM_Base_SetConfig+0xf0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d00b      	beq.n	800689e <TIM_Base_SetConfig+0x8a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a1f      	ldr	r2, [pc, #124]	; (8006908 <TIM_Base_SetConfig+0xf4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d007      	beq.n	800689e <TIM_Base_SetConfig+0x8a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a1e      	ldr	r2, [pc, #120]	; (800690c <TIM_Base_SetConfig+0xf8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d003      	beq.n	800689e <TIM_Base_SetConfig+0x8a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a1d      	ldr	r2, [pc, #116]	; (8006910 <TIM_Base_SetConfig+0xfc>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d108      	bne.n	80068b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a08      	ldr	r2, [pc, #32]	; (80068f8 <TIM_Base_SetConfig+0xe4>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d103      	bne.n	80068e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	615a      	str	r2, [r3, #20]
}
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	40010000 	.word	0x40010000
 80068fc:	40000400 	.word	0x40000400
 8006900:	40000800 	.word	0x40000800
 8006904:	40000c00 	.word	0x40000c00
 8006908:	40014000 	.word	0x40014000
 800690c:	40014400 	.word	0x40014400
 8006910:	40014800 	.word	0x40014800

08006914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	f023 0201 	bic.w	r2, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0303 	bic.w	r3, r3, #3
 800694a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f023 0302 	bic.w	r3, r3, #2
 800695c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a1c      	ldr	r2, [pc, #112]	; (80069dc <TIM_OC1_SetConfig+0xc8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d10c      	bne.n	800698a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f023 0308 	bic.w	r3, r3, #8
 8006976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f023 0304 	bic.w	r3, r3, #4
 8006988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a13      	ldr	r2, [pc, #76]	; (80069dc <TIM_OC1_SetConfig+0xc8>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d111      	bne.n	80069b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	621a      	str	r2, [r3, #32]
}
 80069d0:	bf00      	nop
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	40010000 	.word	0x40010000

080069e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	f023 0210 	bic.w	r2, r3, #16
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	021b      	lsls	r3, r3, #8
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f023 0320 	bic.w	r3, r3, #32
 8006a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a1e      	ldr	r2, [pc, #120]	; (8006ab4 <TIM_OC2_SetConfig+0xd4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10d      	bne.n	8006a5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	011b      	lsls	r3, r3, #4
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <TIM_OC2_SetConfig+0xd4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d113      	bne.n	8006a8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	621a      	str	r2, [r3, #32]
}
 8006aa6:	bf00      	nop
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	40010000 	.word	0x40010000

08006ab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	021b      	lsls	r3, r3, #8
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a1d      	ldr	r2, [pc, #116]	; (8006b88 <TIM_OC3_SetConfig+0xd0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d10d      	bne.n	8006b32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	021b      	lsls	r3, r3, #8
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a14      	ldr	r2, [pc, #80]	; (8006b88 <TIM_OC3_SetConfig+0xd0>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d113      	bne.n	8006b62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	621a      	str	r2, [r3, #32]
}
 8006b7c:	bf00      	nop
 8006b7e:	371c      	adds	r7, #28
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	40010000 	.word	0x40010000

08006b8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	021b      	lsls	r3, r3, #8
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	031b      	lsls	r3, r3, #12
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a10      	ldr	r2, [pc, #64]	; (8006c28 <TIM_OC4_SetConfig+0x9c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d109      	bne.n	8006c00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	019b      	lsls	r3, r3, #6
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	621a      	str	r2, [r3, #32]
}
 8006c1a:	bf00      	nop
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40010000 	.word	0x40010000

08006c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f023 0201 	bic.w	r2, r3, #1
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f023 030a 	bic.w	r3, r3, #10
 8006c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	621a      	str	r2, [r3, #32]
}
 8006c7e:	bf00      	nop
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b087      	sub	sp, #28
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	f023 0210 	bic.w	r2, r3, #16
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	031b      	lsls	r3, r3, #12
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	011b      	lsls	r3, r3, #4
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	621a      	str	r2, [r3, #32]
}
 8006cde:	bf00      	nop
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b085      	sub	sp, #20
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	f043 0307 	orr.w	r3, r3, #7
 8006d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	609a      	str	r2, [r3, #8]
}
 8006d14:	bf00      	nop
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	021a      	lsls	r2, r3, #8
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	431a      	orrs	r2, r3
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	609a      	str	r2, [r3, #8]
}
 8006d54:	bf00      	nop
 8006d56:	371c      	adds	r7, #28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f003 031f 	and.w	r3, r3, #31
 8006d72:	2201      	movs	r2, #1
 8006d74:	fa02 f303 	lsl.w	r3, r2, r3
 8006d78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6a1a      	ldr	r2, [r3, #32]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	43db      	mvns	r3, r3
 8006d82:	401a      	ands	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a1a      	ldr	r2, [r3, #32]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f003 031f 	and.w	r3, r3, #31
 8006d92:	6879      	ldr	r1, [r7, #4]
 8006d94:	fa01 f303 	lsl.w	r3, r1, r3
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	621a      	str	r2, [r3, #32]
}
 8006d9e:	bf00      	nop
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
	...

08006dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d101      	bne.n	8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e050      	b.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a1c      	ldr	r2, [pc, #112]	; (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d018      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e10:	d013      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a18      	ldr	r2, [pc, #96]	; (8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d00e      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a16      	ldr	r2, [pc, #88]	; (8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d009      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a15      	ldr	r2, [pc, #84]	; (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d004      	beq.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a13      	ldr	r2, [pc, #76]	; (8006e84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d10c      	bne.n	8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40010000 	.word	0x40010000
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40000800 	.word	0x40000800
 8006e80:	40000c00 	.word	0x40000c00
 8006e84:	40014000 	.word	0x40014000

08006e88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	f107 001c 	add.w	r0, r7, #28
 8006ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d122      	bne.n	8006f0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d105      	bne.n	8006f02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f9c0 	bl	8007288 <USB_CoreReset>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	73fb      	strb	r3, [r7, #15]
 8006f0c:	e01a      	b.n	8006f44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f9b4 	bl	8007288 <USB_CoreReset>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	639a      	str	r2, [r3, #56]	; 0x38
 8006f36:	e005      	b.n	8006f44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d10b      	bne.n	8006f62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f043 0206 	orr.w	r2, r3, #6
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f043 0220 	orr.w	r2, r3, #32
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f6e:	b004      	add	sp, #16
 8006f70:	4770      	bx	lr

08006f72 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f043 0201 	orr.w	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f023 0201 	bic.w	r2, r3, #1
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d115      	bne.n	8007004 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006fe4:	2001      	movs	r0, #1
 8006fe6:	f7fb fc51 	bl	800288c <HAL_Delay>
      ms++;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3301      	adds	r3, #1
 8006fee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f93a 	bl	800726a <USB_GetMode>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d01e      	beq.n	800703a <USB_SetCurrentMode+0x84>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b31      	cmp	r3, #49	; 0x31
 8007000:	d9f0      	bls.n	8006fe4 <USB_SetCurrentMode+0x2e>
 8007002:	e01a      	b.n	800703a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d115      	bne.n	8007036 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007016:	2001      	movs	r0, #1
 8007018:	f7fb fc38 	bl	800288c <HAL_Delay>
      ms++;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3301      	adds	r3, #1
 8007020:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f921 	bl	800726a <USB_GetMode>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d005      	beq.n	800703a <USB_SetCurrentMode+0x84>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b31      	cmp	r3, #49	; 0x31
 8007032:	d9f0      	bls.n	8007016 <USB_SetCurrentMode+0x60>
 8007034:	e001      	b.n	800703a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e005      	b.n	8007046 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2b32      	cmp	r3, #50	; 0x32
 800703e:	d101      	bne.n	8007044 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e000      	b.n	8007046 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3301      	adds	r3, #1
 8007062:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4a13      	ldr	r2, [pc, #76]	; (80070b4 <USB_FlushTxFifo+0x64>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d901      	bls.n	8007070 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e01b      	b.n	80070a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	daf2      	bge.n	800705e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	019b      	lsls	r3, r3, #6
 8007080:	f043 0220 	orr.w	r2, r3, #32
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3301      	adds	r3, #1
 800708c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4a08      	ldr	r2, [pc, #32]	; (80070b4 <USB_FlushTxFifo+0x64>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d901      	bls.n	800709a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e006      	b.n	80070a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b20      	cmp	r3, #32
 80070a4:	d0f0      	beq.n	8007088 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	00030d40 	.word	0x00030d40

080070b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3301      	adds	r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4a11      	ldr	r2, [pc, #68]	; (8007114 <USB_FlushRxFifo+0x5c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d901      	bls.n	80070d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e018      	b.n	8007108 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	daf2      	bge.n	80070c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2210      	movs	r2, #16
 80070e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3301      	adds	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	4a08      	ldr	r2, [pc, #32]	; (8007114 <USB_FlushRxFifo+0x5c>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d901      	bls.n	80070fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e006      	b.n	8007108 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	f003 0310 	and.w	r3, r3, #16
 8007102:	2b10      	cmp	r3, #16
 8007104:	d0f0      	beq.n	80070e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	00030d40 	.word	0x00030d40

08007118 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007118:	b480      	push	{r7}
 800711a:	b089      	sub	sp, #36	; 0x24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	4611      	mov	r1, r2
 8007124:	461a      	mov	r2, r3
 8007126:	460b      	mov	r3, r1
 8007128:	71fb      	strb	r3, [r7, #7]
 800712a:	4613      	mov	r3, r2
 800712c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007136:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800713a:	2b00      	cmp	r3, #0
 800713c:	d123      	bne.n	8007186 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800713e:	88bb      	ldrh	r3, [r7, #4]
 8007140:	3303      	adds	r3, #3
 8007142:	089b      	lsrs	r3, r3, #2
 8007144:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007146:	2300      	movs	r3, #0
 8007148:	61bb      	str	r3, [r7, #24]
 800714a:	e018      	b.n	800717e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800714c:	79fb      	ldrb	r3, [r7, #7]
 800714e:	031a      	lsls	r2, r3, #12
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	4413      	add	r3, r2
 8007154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007158:	461a      	mov	r2, r3
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	3301      	adds	r3, #1
 8007164:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	3301      	adds	r3, #1
 800716a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	3301      	adds	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	3301      	adds	r3, #1
 8007176:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	3301      	adds	r3, #1
 800717c:	61bb      	str	r3, [r7, #24]
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	429a      	cmp	r2, r3
 8007184:	d3e2      	bcc.n	800714c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3724      	adds	r7, #36	; 0x24
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007194:	b480      	push	{r7}
 8007196:	b08b      	sub	sp, #44	; 0x2c
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	4613      	mov	r3, r2
 80071a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80071aa:	88fb      	ldrh	r3, [r7, #6]
 80071ac:	089b      	lsrs	r3, r3, #2
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80071b2:	88fb      	ldrh	r3, [r7, #6]
 80071b4:	f003 0303 	and.w	r3, r3, #3
 80071b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80071ba:	2300      	movs	r3, #0
 80071bc:	623b      	str	r3, [r7, #32]
 80071be:	e014      	b.n	80071ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	3301      	adds	r3, #1
 80071d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	3301      	adds	r3, #1
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	3301      	adds	r3, #1
 80071dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	3301      	adds	r3, #1
 80071e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	3301      	adds	r3, #1
 80071e8:	623b      	str	r3, [r7, #32]
 80071ea:	6a3a      	ldr	r2, [r7, #32]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d3e6      	bcc.n	80071c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071f2:	8bfb      	ldrh	r3, [r7, #30]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01e      	beq.n	8007236 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007202:	461a      	mov	r2, r3
 8007204:	f107 0310 	add.w	r3, r7, #16
 8007208:	6812      	ldr	r2, [r2, #0]
 800720a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	fa22 f303 	lsr.w	r3, r2, r3
 8007218:	b2da      	uxtb	r2, r3
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	701a      	strb	r2, [r3, #0]
      i++;
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	3301      	adds	r3, #1
 8007222:	623b      	str	r3, [r7, #32]
      pDest++;
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	3301      	adds	r3, #1
 8007228:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800722a:	8bfb      	ldrh	r3, [r7, #30]
 800722c:	3b01      	subs	r3, #1
 800722e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007230:	8bfb      	ldrh	r3, [r7, #30]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1ea      	bne.n	800720c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007238:	4618      	mov	r0, r3
 800723a:	372c      	adds	r7, #44	; 0x2c
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	4013      	ands	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800725c:	68fb      	ldr	r3, [r7, #12]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	f003 0301 	and.w	r3, r3, #1
}
 800727a:	4618      	mov	r0, r3
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
	...

08007288 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	3301      	adds	r3, #1
 8007298:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4a13      	ldr	r2, [pc, #76]	; (80072ec <USB_CoreReset+0x64>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d901      	bls.n	80072a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e01b      	b.n	80072de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	daf2      	bge.n	8007294 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	f043 0201 	orr.w	r2, r3, #1
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3301      	adds	r3, #1
 80072c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4a09      	ldr	r2, [pc, #36]	; (80072ec <USB_CoreReset+0x64>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d901      	bls.n	80072d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e006      	b.n	80072de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d0f0      	beq.n	80072be <USB_CoreReset+0x36>

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	00030d40 	.word	0x00030d40

080072f0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072f0:	b084      	sub	sp, #16
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b086      	sub	sp, #24
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007310:	461a      	mov	r2, r3
 8007312:	2300      	movs	r3, #0
 8007314:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007342:	2b00      	cmp	r3, #0
 8007344:	d018      	beq.n	8007378 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	2b01      	cmp	r3, #1
 800734a:	d10a      	bne.n	8007362 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800735a:	f043 0304 	orr.w	r3, r3, #4
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	e014      	b.n	800738c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007370:	f023 0304 	bic.w	r3, r3, #4
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	e009      	b.n	800738c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007386:	f023 0304 	bic.w	r3, r3, #4
 800738a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800738c:	2110      	movs	r1, #16
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7ff fe5e 	bl	8007050 <USB_FlushTxFifo>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff fe8a 	bl	80070b8 <USB_FlushRxFifo>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80073ae:	2300      	movs	r3, #0
 80073b0:	613b      	str	r3, [r7, #16]
 80073b2:	e015      	b.n	80073e0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c0:	461a      	mov	r2, r3
 80073c2:	f04f 33ff 	mov.w	r3, #4294967295
 80073c6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d4:	461a      	mov	r2, r3
 80073d6:	2300      	movs	r3, #0
 80073d8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	3301      	adds	r3, #1
 80073de:	613b      	str	r3, [r7, #16]
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d3e5      	bcc.n	80073b4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f04f 32ff 	mov.w	r2, #4294967295
 80073f4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00b      	beq.n	800741a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007408:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a13      	ldr	r2, [pc, #76]	; (800745c <USB_HostInit+0x16c>)
 800740e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a13      	ldr	r2, [pc, #76]	; (8007460 <USB_HostInit+0x170>)
 8007414:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007418:	e009      	b.n	800742e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2280      	movs	r2, #128	; 0x80
 800741e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a10      	ldr	r2, [pc, #64]	; (8007464 <USB_HostInit+0x174>)
 8007424:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a0f      	ldr	r2, [pc, #60]	; (8007468 <USB_HostInit+0x178>)
 800742a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	2b00      	cmp	r3, #0
 8007432:	d105      	bne.n	8007440 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	f043 0210 	orr.w	r2, r3, #16
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	699a      	ldr	r2, [r3, #24]
 8007444:	4b09      	ldr	r3, [pc, #36]	; (800746c <USB_HostInit+0x17c>)
 8007446:	4313      	orrs	r3, r2
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800744c:	7dfb      	ldrb	r3, [r7, #23]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007458:	b004      	add	sp, #16
 800745a:	4770      	bx	lr
 800745c:	01000200 	.word	0x01000200
 8007460:	00e00300 	.word	0x00e00300
 8007464:	00600080 	.word	0x00600080
 8007468:	004000e0 	.word	0x004000e0
 800746c:	a3200008 	.word	0xa3200008

08007470 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800748e:	f023 0303 	bic.w	r3, r3, #3
 8007492:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	68f9      	ldr	r1, [r7, #12]
 80074a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80074a8:	4313      	orrs	r3, r2
 80074aa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80074ac:	78fb      	ldrb	r3, [r7, #3]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d107      	bne.n	80074c2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074b8:	461a      	mov	r2, r3
 80074ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80074be:	6053      	str	r3, [r2, #4]
 80074c0:	e009      	b.n	80074d6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80074c2:	78fb      	ldrb	r3, [r7, #3]
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d106      	bne.n	80074d6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074ce:	461a      	mov	r2, r3
 80074d0:	f241 7370 	movw	r3, #6000	; 0x1770
 80074d4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007504:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800750e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007512:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007514:	2064      	movs	r0, #100	; 0x64
 8007516:	f7fb f9b9 	bl	800288c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007526:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007528:	200a      	movs	r0, #10
 800752a:	f7fb f9af 	bl	800288c <HAL_Delay>

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800755c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d109      	bne.n	800757c <USB_DriveVbus+0x44>
 8007568:	78fb      	ldrb	r3, [r7, #3]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d106      	bne.n	800757c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007576:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800757a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007586:	d109      	bne.n	800759c <USB_DriveVbus+0x64>
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d106      	bne.n	800759c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007596:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800759a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b085      	sub	sp, #20
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	0c5b      	lsrs	r3, r3, #17
 80075c8:	f003 0303 	and.w	r3, r3, #3
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	b29b      	uxth	r3, r3
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
	...

080075fc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	4608      	mov	r0, r1
 8007606:	4611      	mov	r1, r2
 8007608:	461a      	mov	r2, r3
 800760a:	4603      	mov	r3, r0
 800760c:	70fb      	strb	r3, [r7, #3]
 800760e:	460b      	mov	r3, r1
 8007610:	70bb      	strb	r3, [r7, #2]
 8007612:	4613      	mov	r3, r2
 8007614:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800761e:	78fb      	ldrb	r3, [r7, #3]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	4413      	add	r3, r2
 8007626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800762a:	461a      	mov	r2, r3
 800762c:	f04f 33ff 	mov.w	r3, #4294967295
 8007630:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007632:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007636:	2b03      	cmp	r3, #3
 8007638:	d87e      	bhi.n	8007738 <USB_HC_Init+0x13c>
 800763a:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <USB_HC_Init+0x44>)
 800763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007640:	08007651 	.word	0x08007651
 8007644:	080076fb 	.word	0x080076fb
 8007648:	08007651 	.word	0x08007651
 800764c:	080076bd 	.word	0x080076bd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	4413      	add	r3, r2
 8007658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800765c:	461a      	mov	r2, r3
 800765e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007662:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007664:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007668:	2b00      	cmp	r3, #0
 800766a:	da10      	bge.n	800768e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	4413      	add	r3, r2
 8007674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	78fa      	ldrb	r2, [r7, #3]
 800767c:	0151      	lsls	r1, r2, #5
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	440a      	add	r2, r1
 8007682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800768a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800768c:	e057      	b.n	800773e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007696:	2b00      	cmp	r3, #0
 8007698:	d051      	beq.n	800773e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800769a:	78fb      	ldrb	r3, [r7, #3]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	78fa      	ldrb	r2, [r7, #3]
 80076aa:	0151      	lsls	r1, r2, #5
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	440a      	add	r2, r1
 80076b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80076b8:	60d3      	str	r3, [r2, #12]
      break;
 80076ba:	e040      	b.n	800773e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80076bc:	78fb      	ldrb	r3, [r7, #3]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c8:	461a      	mov	r2, r3
 80076ca:	f240 639d 	movw	r3, #1693	; 0x69d
 80076ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80076d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	da34      	bge.n	8007742 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80076d8:	78fb      	ldrb	r3, [r7, #3]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	78fa      	ldrb	r2, [r7, #3]
 80076e8:	0151      	lsls	r1, r2, #5
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	440a      	add	r2, r1
 80076ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076f6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80076f8:	e023      	b.n	8007742 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80076fa:	78fb      	ldrb	r3, [r7, #3]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	4413      	add	r3, r2
 8007702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007706:	461a      	mov	r2, r3
 8007708:	f240 2325 	movw	r3, #549	; 0x225
 800770c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800770e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007712:	2b00      	cmp	r3, #0
 8007714:	da17      	bge.n	8007746 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007716:	78fb      	ldrb	r3, [r7, #3]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	4413      	add	r3, r2
 800771e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	78fa      	ldrb	r2, [r7, #3]
 8007726:	0151      	lsls	r1, r2, #5
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	440a      	add	r2, r1
 800772c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007730:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007734:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007736:	e006      	b.n	8007746 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	77fb      	strb	r3, [r7, #31]
      break;
 800773c:	e004      	b.n	8007748 <USB_HC_Init+0x14c>
      break;
 800773e:	bf00      	nop
 8007740:	e002      	b.n	8007748 <USB_HC_Init+0x14c>
      break;
 8007742:	bf00      	nop
 8007744:	e000      	b.n	8007748 <USB_HC_Init+0x14c>
      break;
 8007746:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007748:	78fb      	ldrb	r3, [r7, #3]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	4413      	add	r3, r2
 8007750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	78fa      	ldrb	r2, [r7, #3]
 8007758:	0151      	lsls	r1, r2, #5
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	440a      	add	r2, r1
 800775e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007762:	f043 0302 	orr.w	r3, r3, #2
 8007766:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800776e:	699a      	ldr	r2, [r3, #24]
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	f003 030f 	and.w	r3, r3, #15
 8007776:	2101      	movs	r1, #1
 8007778:	fa01 f303 	lsl.w	r3, r1, r3
 800777c:	6939      	ldr	r1, [r7, #16]
 800777e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007782:	4313      	orrs	r3, r2
 8007784:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007792:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007796:	2b00      	cmp	r3, #0
 8007798:	da03      	bge.n	80077a2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800779a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800779e:	61bb      	str	r3, [r7, #24]
 80077a0:	e001      	b.n	80077a6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff feff 	bl	80075aa <USB_GetHostSpeed>
 80077ac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80077ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d106      	bne.n	80077c4 <USB_HC_Init+0x1c8>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d003      	beq.n	80077c4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80077bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077c0:	617b      	str	r3, [r7, #20]
 80077c2:	e001      	b.n	80077c8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80077c8:	787b      	ldrb	r3, [r7, #1]
 80077ca:	059b      	lsls	r3, r3, #22
 80077cc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80077d0:	78bb      	ldrb	r3, [r7, #2]
 80077d2:	02db      	lsls	r3, r3, #11
 80077d4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80077d8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80077da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80077de:	049b      	lsls	r3, r3, #18
 80077e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80077e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80077e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80077e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80077ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	0159      	lsls	r1, r3, #5
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	440b      	add	r3, r1
 80077fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077fe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007804:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007806:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800780a:	2b03      	cmp	r3, #3
 800780c:	d003      	beq.n	8007816 <USB_HC_Init+0x21a>
 800780e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007812:	2b01      	cmp	r3, #1
 8007814:	d10f      	bne.n	8007836 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007816:	78fb      	ldrb	r3, [r7, #3]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	4413      	add	r3, r2
 800781e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	78fa      	ldrb	r2, [r7, #3]
 8007826:	0151      	lsls	r1, r2, #5
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	440a      	add	r2, r1
 800782c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007830:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007834:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007836:	7ffb      	ldrb	r3, [r7, #31]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3720      	adds	r7, #32
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08c      	sub	sp, #48	; 0x30
 8007844:	af02      	add	r7, sp, #8
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	4613      	mov	r3, r2
 800784c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	785b      	ldrb	r3, [r3, #1]
 8007856:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800785c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007866:	2b00      	cmp	r3, #0
 8007868:	d02d      	beq.n	80078c6 <USB_HC_StartXfer+0x86>
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	791b      	ldrb	r3, [r3, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d129      	bne.n	80078c6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007872:	79fb      	ldrb	r3, [r7, #7]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d117      	bne.n	80078a8 <USB_HC_StartXfer+0x68>
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	79db      	ldrb	r3, [r3, #7]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d003      	beq.n	8007888 <USB_HC_StartXfer+0x48>
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	79db      	ldrb	r3, [r3, #7]
 8007884:	2b02      	cmp	r3, #2
 8007886:	d10f      	bne.n	80078a8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	4413      	add	r3, r2
 8007890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	69fa      	ldr	r2, [r7, #28]
 8007898:	0151      	lsls	r1, r2, #5
 800789a:	6a3a      	ldr	r2, [r7, #32]
 800789c:	440a      	add	r2, r1
 800789e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10b      	bne.n	80078c6 <USB_HC_StartXfer+0x86>
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	795b      	ldrb	r3, [r3, #5]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d107      	bne.n	80078c6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	4619      	mov	r1, r3
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 fa0f 	bl	8007ce0 <USB_DoPing>
      return HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	e0f8      	b.n	8007ab8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d018      	beq.n	8007900 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	8912      	ldrh	r2, [r2, #8]
 80078d6:	4413      	add	r3, r2
 80078d8:	3b01      	subs	r3, #1
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	8912      	ldrh	r2, [r2, #8]
 80078de:	fbb3 f3f2 	udiv	r3, r3, r2
 80078e2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80078e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80078e6:	8b7b      	ldrh	r3, [r7, #26]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d90b      	bls.n	8007904 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80078ec:	8b7b      	ldrh	r3, [r7, #26]
 80078ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80078f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	8912      	ldrh	r2, [r2, #8]
 80078f6:	fb03 f202 	mul.w	r2, r3, r2
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	611a      	str	r2, [r3, #16]
 80078fe:	e001      	b.n	8007904 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007900:	2301      	movs	r3, #1
 8007902:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	78db      	ldrb	r3, [r3, #3]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d007      	beq.n	800791c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800790c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	8912      	ldrh	r2, [r2, #8]
 8007912:	fb03 f202 	mul.w	r2, r3, r2
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	611a      	str	r2, [r3, #16]
 800791a:	e003      	b.n	8007924 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	695a      	ldr	r2, [r3, #20]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800792c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800792e:	04d9      	lsls	r1, r3, #19
 8007930:	4b63      	ldr	r3, [pc, #396]	; (8007ac0 <USB_HC_StartXfer+0x280>)
 8007932:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007934:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	7a9b      	ldrb	r3, [r3, #10]
 800793a:	075b      	lsls	r3, r3, #29
 800793c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007940:	69f9      	ldr	r1, [r7, #28]
 8007942:	0148      	lsls	r0, r1, #5
 8007944:	6a39      	ldr	r1, [r7, #32]
 8007946:	4401      	add	r1, r0
 8007948:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800794c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800794e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007950:	79fb      	ldrb	r3, [r7, #7]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d009      	beq.n	800796a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	68d9      	ldr	r1, [r3, #12]
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	4413      	add	r3, r2
 8007962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007966:	460a      	mov	r2, r1
 8007968:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	bf0c      	ite	eq
 800797a:	2301      	moveq	r3, #1
 800797c:	2300      	movne	r3, #0
 800797e:	b2db      	uxtb	r3, r3
 8007980:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	4413      	add	r3, r2
 800798a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	69fa      	ldr	r2, [r7, #28]
 8007992:	0151      	lsls	r1, r2, #5
 8007994:	6a3a      	ldr	r2, [r7, #32]
 8007996:	440a      	add	r2, r1
 8007998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800799c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80079a0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	6a3b      	ldr	r3, [r7, #32]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	7e7b      	ldrb	r3, [r7, #25]
 80079b2:	075b      	lsls	r3, r3, #29
 80079b4:	69f9      	ldr	r1, [r7, #28]
 80079b6:	0148      	lsls	r0, r1, #5
 80079b8:	6a39      	ldr	r1, [r7, #32]
 80079ba:	4401      	add	r1, r0
 80079bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80079c0:	4313      	orrs	r3, r2
 80079c2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079da:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	78db      	ldrb	r3, [r3, #3]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d004      	beq.n	80079ee <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ea:	613b      	str	r3, [r7, #16]
 80079ec:	e003      	b.n	80079f6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079f4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079fc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007a10:	79fb      	ldrb	r3, [r7, #7]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	e04e      	b.n	8007ab8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	78db      	ldrb	r3, [r3, #3]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d149      	bne.n	8007ab6 <USB_HC_StartXfer+0x276>
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d045      	beq.n	8007ab6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	79db      	ldrb	r3, [r3, #7]
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d830      	bhi.n	8007a94 <USB_HC_StartXfer+0x254>
 8007a32:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <USB_HC_StartXfer+0x1f8>)
 8007a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a38:	08007a49 	.word	0x08007a49
 8007a3c:	08007a6d 	.word	0x08007a6d
 8007a40:	08007a49 	.word	0x08007a49
 8007a44:	08007a6d 	.word	0x08007a6d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	3303      	adds	r3, #3
 8007a4e:	089b      	lsrs	r3, r3, #2
 8007a50:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007a52:	8afa      	ldrh	r2, [r7, #22]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d91c      	bls.n	8007a98 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	f043 0220 	orr.w	r2, r3, #32
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a6a:	e015      	b.n	8007a98 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	3303      	adds	r3, #3
 8007a72:	089b      	lsrs	r3, r3, #2
 8007a74:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007a76:	8afa      	ldrh	r2, [r7, #22]
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d90a      	bls.n	8007a9c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a92:	e003      	b.n	8007a9c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007a94:	bf00      	nop
 8007a96:	e002      	b.n	8007a9e <USB_HC_StartXfer+0x25e>
        break;
 8007a98:	bf00      	nop
 8007a9a:	e000      	b.n	8007a9e <USB_HC_StartXfer+0x25e>
        break;
 8007a9c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	68d9      	ldr	r1, [r3, #12]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	785a      	ldrb	r2, [r3, #1]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2000      	movs	r0, #0
 8007aae:	9000      	str	r0, [sp, #0]
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f7ff fb31 	bl	8007118 <USB_WritePacket>
  }

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3728      	adds	r7, #40	; 0x28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	1ff80000 	.word	0x1ff80000

08007ac4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	b29b      	uxth	r3, r3
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b089      	sub	sp, #36	; 0x24
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	460b      	mov	r3, r1
 8007af0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007af6:	78fb      	ldrb	r3, [r7, #3]
 8007af8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	0c9b      	lsrs	r3, r3, #18
 8007b0e:	f003 0303 	and.w	r3, r3, #3
 8007b12:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	0fdb      	lsrs	r3, r3, #31
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b20      	cmp	r3, #32
 8007b34:	d104      	bne.n	8007b40 <USB_HC_Halt+0x5a>
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e0c8      	b.n	8007cd2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <USB_HC_Halt+0x66>
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d163      	bne.n	8007c14 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	0151      	lsls	r1, r2, #5
 8007b5e:	69fa      	ldr	r2, [r7, #28]
 8007b60:	440a      	add	r2, r1
 8007b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b6a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f040 80ab 	bne.w	8007cd0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d133      	bne.n	8007bee <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	0151      	lsls	r1, r2, #5
 8007b98:	69fa      	ldr	r2, [r7, #28]
 8007b9a:	440a      	add	r2, r1
 8007b9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ba0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ba4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	0151      	lsls	r1, r2, #5
 8007bb8:	69fa      	ldr	r2, [r7, #28]
 8007bba:	440a      	add	r2, r1
 8007bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bc4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bd2:	d81d      	bhi.n	8007c10 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007be6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bea:	d0ec      	beq.n	8007bc6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bec:	e070      	b.n	8007cd0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	69ba      	ldr	r2, [r7, #24]
 8007bfe:	0151      	lsls	r1, r2, #5
 8007c00:	69fa      	ldr	r2, [r7, #28]
 8007c02:	440a      	add	r2, r1
 8007c04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c0c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c0e:	e05f      	b.n	8007cd0 <USB_HC_Halt+0x1ea>
            break;
 8007c10:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c12:	e05d      	b.n	8007cd0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	0151      	lsls	r1, r2, #5
 8007c26:	69fa      	ldr	r2, [r7, #28]
 8007c28:	440a      	add	r2, r1
 8007c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c32:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d133      	bne.n	8007cac <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	0151      	lsls	r1, r2, #5
 8007c56:	69fa      	ldr	r2, [r7, #28]
 8007c58:	440a      	add	r2, r1
 8007c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c62:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	0151      	lsls	r1, r2, #5
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	440a      	add	r2, r1
 8007c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c82:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3301      	adds	r3, #1
 8007c88:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c90:	d81d      	bhi.n	8007cce <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ca8:	d0ec      	beq.n	8007c84 <USB_HC_Halt+0x19e>
 8007caa:	e011      	b.n	8007cd0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	0151      	lsls	r1, r2, #5
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	440a      	add	r2, r1
 8007cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cca:	6013      	str	r3, [r2, #0]
 8007ccc:	e000      	b.n	8007cd0 <USB_HC_Halt+0x1ea>
          break;
 8007cce:	bf00      	nop
    }
  }

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3724      	adds	r7, #36	; 0x24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
	...

08007ce0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	04da      	lsls	r2, r3, #19
 8007cfc:	4b15      	ldr	r3, [pc, #84]	; (8007d54 <USB_DoPing+0x74>)
 8007cfe:	4013      	ands	r3, r2
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	0151      	lsls	r1, r2, #5
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	440a      	add	r2, r1
 8007d08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d10:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d28:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d30:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d3e:	461a      	mov	r2, r3
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	1ff80000 	.word	0x1ff80000

08007d58 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b088      	sub	sp, #32
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff f911 	bl	8006f94 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d72:	2110      	movs	r1, #16
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7ff f96b 	bl	8007050 <USB_FlushTxFifo>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff f997 	bl	80070b8 <USB_FlushRxFifo>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007d94:	2300      	movs	r3, #0
 8007d96:	61bb      	str	r3, [r7, #24]
 8007d98:	e01f      	b.n	8007dda <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007db0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007db8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007dc0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dce:	461a      	mov	r2, r3
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	61bb      	str	r3, [r7, #24]
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	2b0f      	cmp	r3, #15
 8007dde:	d9dc      	bls.n	8007d9a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007de0:	2300      	movs	r3, #0
 8007de2:	61bb      	str	r3, [r7, #24]
 8007de4:	e034      	b.n	8007e50 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dfc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e04:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e0c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	3301      	adds	r3, #1
 8007e24:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e2c:	d80c      	bhi.n	8007e48 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e44:	d0ec      	beq.n	8007e20 <USB_StopHost+0xc8>
 8007e46:	e000      	b.n	8007e4a <USB_StopHost+0xf2>
        break;
 8007e48:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	61bb      	str	r3, [r7, #24]
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	2b0f      	cmp	r3, #15
 8007e54:	d9c7      	bls.n	8007de6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e62:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7ff f880 	bl	8006f72 <USB_EnableGlobalInt>

  return ret;
 8007e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3720      	adds	r7, #32
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007e7c:	b590      	push	{r4, r7, lr}
 8007e7e:	b089      	sub	sp, #36	; 0x24
 8007e80:	af04      	add	r7, sp, #16
 8007e82:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007e84:	2301      	movs	r3, #1
 8007e86:	2202      	movs	r2, #2
 8007e88:	2102      	movs	r1, #2
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fc66 	bl	800875c <USBH_FindInterface>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	2bff      	cmp	r3, #255	; 0xff
 8007e98:	d002      	beq.n	8007ea0 <USBH_CDC_InterfaceInit+0x24>
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d901      	bls.n	8007ea4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	e13d      	b.n	8008120 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fc3b 	bl	8008724 <USBH_SelectInterface>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e131      	b.n	8008120 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007ec2:	2050      	movs	r0, #80	; 0x50
 8007ec4:	f002 fafa 	bl	800a4bc <malloc>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007edc:	2302      	movs	r3, #2
 8007ede:	e11f      	b.n	8008120 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007ee0:	2250      	movs	r2, #80	; 0x50
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	68b8      	ldr	r0, [r7, #8]
 8007ee6:	f002 faf9 	bl	800a4dc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	211a      	movs	r1, #26
 8007ef0:	fb01 f303 	mul.w	r3, r1, r3
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	b25b      	sxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	da15      	bge.n	8007f2e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	211a      	movs	r1, #26
 8007f08:	fb01 f303 	mul.w	r3, r1, r3
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f12:	781a      	ldrb	r2, [r3, #0]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	211a      	movs	r1, #26
 8007f1e:	fb01 f303 	mul.w	r3, r1, r3
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007f28:	881a      	ldrh	r2, [r3, #0]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	785b      	ldrb	r3, [r3, #1]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 ff2c 	bl	8009d92 <USBH_AllocPipe>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	7819      	ldrb	r1, [r3, #0]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	7858      	ldrb	r0, [r3, #1]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	8952      	ldrh	r2, [r2, #10]
 8007f5a:	9202      	str	r2, [sp, #8]
 8007f5c:	2203      	movs	r2, #3
 8007f5e:	9201      	str	r2, [sp, #4]
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	4623      	mov	r3, r4
 8007f64:	4602      	mov	r2, r0
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 fee4 	bl	8009d34 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2200      	movs	r2, #0
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f002 f9f3 	bl	800a360 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	210a      	movs	r1, #10
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fbeb 	bl	800875c <USBH_FindInterface>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	2bff      	cmp	r3, #255	; 0xff
 8007f8e:	d002      	beq.n	8007f96 <USBH_CDC_InterfaceInit+0x11a>
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d901      	bls.n	8007f9a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007f96:	2302      	movs	r3, #2
 8007f98:	e0c2      	b.n	8008120 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	211a      	movs	r1, #26
 8007fa0:	fb01 f303 	mul.w	r3, r1, r3
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	b25b      	sxtb	r3, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	da16      	bge.n	8007fe0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	211a      	movs	r1, #26
 8007fb8:	fb01 f303 	mul.w	r3, r1, r3
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007fc2:	781a      	ldrb	r2, [r3, #0]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	211a      	movs	r1, #26
 8007fce:	fb01 f303 	mul.w	r3, r1, r3
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007fd8:	881a      	ldrh	r2, [r3, #0]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	835a      	strh	r2, [r3, #26]
 8007fde:	e015      	b.n	800800c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	211a      	movs	r1, #26
 8007fe6:	fb01 f303 	mul.w	r3, r1, r3
 8007fea:	4413      	add	r3, r2
 8007fec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ff0:	781a      	ldrb	r2, [r3, #0]
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	211a      	movs	r1, #26
 8007ffc:	fb01 f303 	mul.w	r3, r1, r3
 8008000:	4413      	add	r3, r2
 8008002:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008006:	881a      	ldrh	r2, [r3, #0]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800800c:	7bfb      	ldrb	r3, [r7, #15]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	211a      	movs	r1, #26
 8008012:	fb01 f303 	mul.w	r3, r1, r3
 8008016:	4413      	add	r3, r2
 8008018:	f203 3356 	addw	r3, r3, #854	; 0x356
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	b25b      	sxtb	r3, r3
 8008020:	2b00      	cmp	r3, #0
 8008022:	da16      	bge.n	8008052 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	211a      	movs	r1, #26
 800802a:	fb01 f303 	mul.w	r3, r1, r3
 800802e:	4413      	add	r3, r2
 8008030:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008034:	781a      	ldrb	r2, [r3, #0]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	211a      	movs	r1, #26
 8008040:	fb01 f303 	mul.w	r3, r1, r3
 8008044:	4413      	add	r3, r2
 8008046:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800804a:	881a      	ldrh	r2, [r3, #0]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	835a      	strh	r2, [r3, #26]
 8008050:	e015      	b.n	800807e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008052:	7bfb      	ldrb	r3, [r7, #15]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	211a      	movs	r1, #26
 8008058:	fb01 f303 	mul.w	r3, r1, r3
 800805c:	4413      	add	r3, r2
 800805e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008062:	781a      	ldrb	r2, [r3, #0]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008068:	7bfb      	ldrb	r3, [r7, #15]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	211a      	movs	r1, #26
 800806e:	fb01 f303 	mul.w	r3, r1, r3
 8008072:	4413      	add	r3, r2
 8008074:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008078:	881a      	ldrh	r2, [r3, #0]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	7b9b      	ldrb	r3, [r3, #14]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 fe84 	bl	8009d92 <USBH_AllocPipe>
 800808a:	4603      	mov	r3, r0
 800808c:	461a      	mov	r2, r3
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	7bdb      	ldrb	r3, [r3, #15]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 fe7a 	bl	8009d92 <USBH_AllocPipe>
 800809e:	4603      	mov	r3, r0
 80080a0:	461a      	mov	r2, r3
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	7b59      	ldrb	r1, [r3, #13]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	7b98      	ldrb	r0, [r3, #14]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	8b12      	ldrh	r2, [r2, #24]
 80080be:	9202      	str	r2, [sp, #8]
 80080c0:	2202      	movs	r2, #2
 80080c2:	9201      	str	r2, [sp, #4]
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	4623      	mov	r3, r4
 80080c8:	4602      	mov	r2, r0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 fe32 	bl	8009d34 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	7b19      	ldrb	r1, [r3, #12]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	7bd8      	ldrb	r0, [r3, #15]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	8b52      	ldrh	r2, [r2, #26]
 80080e8:	9202      	str	r2, [sp, #8]
 80080ea:	2202      	movs	r2, #2
 80080ec:	9201      	str	r2, [sp, #4]
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	4623      	mov	r3, r4
 80080f2:	4602      	mov	r2, r0
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f001 fe1d 	bl	8009d34 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	7b5b      	ldrb	r3, [r3, #13]
 8008106:	2200      	movs	r2, #0
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f002 f928 	bl	800a360 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	7b1b      	ldrb	r3, [r3, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f002 f921 	bl	800a360 <USBH_LL_SetToggle>

  return USBH_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	bd90      	pop	{r4, r7, pc}

08008128 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00e      	beq.n	8008160 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f001 fe12 	bl	8009d72 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f001 fe3d 	bl	8009dd4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	7b1b      	ldrb	r3, [r3, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00e      	beq.n	8008186 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	7b1b      	ldrb	r3, [r3, #12]
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f001 fdff 	bl	8009d72 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	7b1b      	ldrb	r3, [r3, #12]
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f001 fe2a 	bl	8009dd4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	7b5b      	ldrb	r3, [r3, #13]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00e      	beq.n	80081ac <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	7b5b      	ldrb	r3, [r3, #13]
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f001 fdec 	bl	8009d72 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	7b5b      	ldrb	r3, [r3, #13]
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 fe17 	bl	8009dd4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00b      	beq.n	80081d0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f002 f983 	bl	800a4cc <free>
    phost->pActiveClass->pData = 0U;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081cc:	2200      	movs	r2, #0
 80081ce:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b084      	sub	sp, #16
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3340      	adds	r3, #64	; 0x40
 80081f0:	4619      	mov	r1, r3
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f8b1 	bl	800835a <GetLineCoding>
 80081f8:	4603      	mov	r3, r0
 80081fa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80081fc:	7afb      	ldrb	r3, [r7, #11]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d105      	bne.n	800820e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008208:	2102      	movs	r1, #2
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800820e:	7afb      	ldrb	r3, [r7, #11]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008220:	2301      	movs	r3, #1
 8008222:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008238:	2b04      	cmp	r3, #4
 800823a:	d877      	bhi.n	800832c <USBH_CDC_Process+0x114>
 800823c:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <USBH_CDC_Process+0x2c>)
 800823e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008242:	bf00      	nop
 8008244:	08008259 	.word	0x08008259
 8008248:	0800825f 	.word	0x0800825f
 800824c:	0800828f 	.word	0x0800828f
 8008250:	08008303 	.word	0x08008303
 8008254:	08008311 	.word	0x08008311
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	73fb      	strb	r3, [r7, #15]
      break;
 800825c:	e06d      	b.n	800833a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f897 	bl	8008398 <SetLineCoding>
 800826a:	4603      	mov	r3, r0
 800826c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d104      	bne.n	800827e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2202      	movs	r2, #2
 8008278:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800827c:	e058      	b.n	8008330 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800827e:	7bbb      	ldrb	r3, [r7, #14]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d055      	beq.n	8008330 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2204      	movs	r2, #4
 8008288:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800828c:	e050      	b.n	8008330 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	3340      	adds	r3, #64	; 0x40
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f860 	bl	800835a <GetLineCoding>
 800829a:	4603      	mov	r3, r0
 800829c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d126      	bne.n	80082f2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082b6:	791b      	ldrb	r3, [r3, #4]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d13b      	bne.n	8008334 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d133      	bne.n	8008334 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80082d8:	429a      	cmp	r2, r3
 80082da:	d12b      	bne.n	8008334 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082e4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d124      	bne.n	8008334 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f958 	bl	80085a0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80082f0:	e020      	b.n	8008334 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d01d      	beq.n	8008334 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2204      	movs	r2, #4
 80082fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008300:	e018      	b.n	8008334 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f867 	bl	80083d6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f8da 	bl	80084c2 <CDC_ProcessReception>
      break;
 800830e:	e014      	b.n	800833a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008310:	2100      	movs	r1, #0
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 ffef 	bl	80092f6 <USBH_ClrFeature>
 8008318:	4603      	mov	r3, r0
 800831a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10a      	bne.n	8008338 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800832a:	e005      	b.n	8008338 <USBH_CDC_Process+0x120>

    default:
      break;
 800832c:	bf00      	nop
 800832e:	e004      	b.n	800833a <USBH_CDC_Process+0x122>
      break;
 8008330:	bf00      	nop
 8008332:	e002      	b.n	800833a <USBH_CDC_Process+0x122>
      break;
 8008334:	bf00      	nop
 8008336:	e000      	b.n	800833a <USBH_CDC_Process+0x122>
      break;
 8008338:	bf00      	nop

  }

  return status;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b082      	sub	sp, #8
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	22a1      	movs	r2, #161	; 0xa1
 8008368:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2221      	movs	r2, #33	; 0x21
 800836e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2207      	movs	r2, #7
 8008380:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2207      	movs	r2, #7
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f001 fa81 	bl	8009890 <USBH_CtlReq>
 800838e:	4603      	mov	r3, r0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2221      	movs	r2, #33	; 0x21
 80083a6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2220      	movs	r2, #32
 80083ac:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2207      	movs	r2, #7
 80083be:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2207      	movs	r2, #7
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f001 fa62 	bl	8009890 <USBH_CtlReq>
 80083cc:	4603      	mov	r3, r0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b086      	sub	sp, #24
 80083da:	af02      	add	r7, sp, #8
 80083dc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083e8:	2300      	movs	r3, #0
 80083ea:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d002      	beq.n	80083fc <CDC_ProcessTransmission+0x26>
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d023      	beq.n	8008442 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80083fa:	e05e      	b.n	80084ba <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	8b12      	ldrh	r2, [r2, #24]
 8008404:	4293      	cmp	r3, r2
 8008406:	d90b      	bls.n	8008420 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	69d9      	ldr	r1, [r3, #28]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	8b1a      	ldrh	r2, [r3, #24]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	7b5b      	ldrb	r3, [r3, #13]
 8008414:	2001      	movs	r0, #1
 8008416:	9000      	str	r0, [sp, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f001 fc48 	bl	8009cae <USBH_BulkSendData>
 800841e:	e00b      	b.n	8008438 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008428:	b29a      	uxth	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	7b5b      	ldrb	r3, [r3, #13]
 800842e:	2001      	movs	r0, #1
 8008430:	9000      	str	r0, [sp, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f001 fc3b 	bl	8009cae <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008440:	e03b      	b.n	80084ba <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	7b5b      	ldrb	r3, [r3, #13]
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 ff5f 	bl	800a30c <USBH_LL_GetURBState>
 800844e:	4603      	mov	r3, r0
 8008450:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008452:	7afb      	ldrb	r3, [r7, #11]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d128      	bne.n	80084aa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	8b12      	ldrh	r2, [r2, #24]
 8008460:	4293      	cmp	r3, r2
 8008462:	d90e      	bls.n	8008482 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	8b12      	ldrh	r2, [r2, #24]
 800846c:	1a9a      	subs	r2, r3, r2
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	8b12      	ldrh	r2, [r2, #24]
 800847a:	441a      	add	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	61da      	str	r2, [r3, #28]
 8008480:	e002      	b.n	8008488 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008498:	e00e      	b.n	80084b8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f868 	bl	8008578 <USBH_CDC_TransmitCallback>
      break;
 80084a8:	e006      	b.n	80084b8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80084aa:	7afb      	ldrb	r3, [r7, #11]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d103      	bne.n	80084b8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80084b8:	bf00      	nop
  }
}
 80084ba:	bf00      	nop
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b086      	sub	sp, #24
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80084d4:	2300      	movs	r3, #0
 80084d6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d002      	beq.n	80084e8 <CDC_ProcessReception+0x26>
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	d00e      	beq.n	8008504 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80084e6:	e043      	b.n	8008570 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	6a19      	ldr	r1, [r3, #32]
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	8b5a      	ldrh	r2, [r3, #26]
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	7b1b      	ldrb	r3, [r3, #12]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 fbff 	bl	8009cf8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2204      	movs	r2, #4
 80084fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008502:	e035      	b.n	8008570 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	7b1b      	ldrb	r3, [r3, #12]
 8008508:	4619      	mov	r1, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f001 fefe 	bl	800a30c <USBH_LL_GetURBState>
 8008510:	4603      	mov	r3, r0
 8008512:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008514:	7cfb      	ldrb	r3, [r7, #19]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d129      	bne.n	800856e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	7b1b      	ldrb	r3, [r3, #12]
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f001 fe61 	bl	800a1e8 <USBH_LL_GetLastXferSize>
 8008526:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	429a      	cmp	r2, r3
 8008530:	d016      	beq.n	8008560 <CDC_ProcessReception+0x9e>
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	8b5b      	ldrh	r3, [r3, #26]
 8008536:	461a      	mov	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4293      	cmp	r3, r2
 800853c:	d910      	bls.n	8008560 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	1ad2      	subs	r2, r2, r3
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	6a1a      	ldr	r2, [r3, #32]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	441a      	add	r2, r3
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2203      	movs	r2, #3
 800855a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800855e:	e006      	b.n	800856e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f80f 	bl	800858c <USBH_CDC_ReceiveCallback>
      break;
 800856e:	bf00      	nop
  }
}
 8008570:	bf00      	nop
 8008572:	3718      	adds	r7, #24
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	4613      	mov	r3, r2
 80085c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80085c8:	2302      	movs	r3, #2
 80085ca:	e029      	b.n	8008620 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	79fa      	ldrb	r2, [r7, #7]
 80085d0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 f81f 	bl	8008628 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f001 fd31 	bl	800a080 <USBH_LL_Init>

  return USBH_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008630:	2300      	movs	r3, #0
 8008632:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008634:	2300      	movs	r3, #0
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	e009      	b.n	800864e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	33e0      	adds	r3, #224	; 0xe0
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	2200      	movs	r2, #0
 8008646:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	3301      	adds	r3, #1
 800864c:	60fb      	str	r3, [r7, #12]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2b0f      	cmp	r3, #15
 8008652:	d9f2      	bls.n	800863a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008654:	2300      	movs	r3, #0
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	e009      	b.n	800866e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4413      	add	r3, r2
 8008660:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008664:	2200      	movs	r2, #0
 8008666:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	3301      	adds	r3, #1
 800866c:	60fb      	str	r3, [r7, #12]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008674:	d3f1      	bcc.n	800865a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2240      	movs	r2, #64	; 0x40
 800869a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d016      	beq.n	8008712 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10e      	bne.n	800870c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80086f4:	1c59      	adds	r1, r3, #1
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	33de      	adds	r3, #222	; 0xde
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]
 800870a:	e004      	b.n	8008716 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800870c:	2302      	movs	r3, #2
 800870e:	73fb      	strb	r3, [r7, #15]
 8008710:	e001      	b.n	8008716 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008712:	2302      	movs	r3, #2
 8008714:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008716:	7bfb      	ldrb	r3, [r7, #15]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800873a:	78fa      	ldrb	r2, [r7, #3]
 800873c:	429a      	cmp	r2, r3
 800873e:	d204      	bcs.n	800874a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	78fa      	ldrb	r2, [r7, #3]
 8008744:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008748:	e001      	b.n	800874e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800874a:	2302      	movs	r3, #2
 800874c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800874e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800875c:	b480      	push	{r7}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	4608      	mov	r0, r1
 8008766:	4611      	mov	r1, r2
 8008768:	461a      	mov	r2, r3
 800876a:	4603      	mov	r3, r0
 800876c:	70fb      	strb	r3, [r7, #3]
 800876e:	460b      	mov	r3, r1
 8008770:	70bb      	strb	r3, [r7, #2]
 8008772:	4613      	mov	r3, r2
 8008774:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800877a:	2300      	movs	r3, #0
 800877c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008784:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008786:	e025      	b.n	80087d4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008788:	7dfb      	ldrb	r3, [r7, #23]
 800878a:	221a      	movs	r2, #26
 800878c:	fb02 f303 	mul.w	r3, r2, r3
 8008790:	3308      	adds	r3, #8
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	4413      	add	r3, r2
 8008796:	3302      	adds	r3, #2
 8008798:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	795b      	ldrb	r3, [r3, #5]
 800879e:	78fa      	ldrb	r2, [r7, #3]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d002      	beq.n	80087aa <USBH_FindInterface+0x4e>
 80087a4:	78fb      	ldrb	r3, [r7, #3]
 80087a6:	2bff      	cmp	r3, #255	; 0xff
 80087a8:	d111      	bne.n	80087ce <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80087ae:	78ba      	ldrb	r2, [r7, #2]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d002      	beq.n	80087ba <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80087b4:	78bb      	ldrb	r3, [r7, #2]
 80087b6:	2bff      	cmp	r3, #255	; 0xff
 80087b8:	d109      	bne.n	80087ce <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80087be:	787a      	ldrb	r2, [r7, #1]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d002      	beq.n	80087ca <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80087c4:	787b      	ldrb	r3, [r7, #1]
 80087c6:	2bff      	cmp	r3, #255	; 0xff
 80087c8:	d101      	bne.n	80087ce <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
 80087cc:	e006      	b.n	80087dc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80087ce:	7dfb      	ldrb	r3, [r7, #23]
 80087d0:	3301      	adds	r3, #1
 80087d2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80087d4:	7dfb      	ldrb	r3, [r7, #23]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d9d6      	bls.n	8008788 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80087da:	23ff      	movs	r3, #255	; 0xff
}
 80087dc:	4618      	mov	r0, r3
 80087de:	371c      	adds	r7, #28
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f001 fc81 	bl	800a0f8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80087f6:	2101      	movs	r1, #1
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 fd9a 	bl	800a332 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af04      	add	r7, sp, #16
 800880e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008810:	2302      	movs	r3, #2
 8008812:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008814:	2300      	movs	r3, #0
 8008816:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b01      	cmp	r3, #1
 8008822:	d102      	bne.n	800882a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2203      	movs	r2, #3
 8008828:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b0b      	cmp	r3, #11
 8008832:	f200 81be 	bhi.w	8008bb2 <USBH_Process+0x3aa>
 8008836:	a201      	add	r2, pc, #4	; (adr r2, 800883c <USBH_Process+0x34>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	0800886d 	.word	0x0800886d
 8008840:	0800889f 	.word	0x0800889f
 8008844:	08008907 	.word	0x08008907
 8008848:	08008b4d 	.word	0x08008b4d
 800884c:	08008bb3 	.word	0x08008bb3
 8008850:	080089ab 	.word	0x080089ab
 8008854:	08008af3 	.word	0x08008af3
 8008858:	080089e1 	.word	0x080089e1
 800885c:	08008a01 	.word	0x08008a01
 8008860:	08008a21 	.word	0x08008a21
 8008864:	08008a65 	.word	0x08008a65
 8008868:	08008b35 	.word	0x08008b35
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008872:	b2db      	uxtb	r3, r3
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 819e 	beq.w	8008bb6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008880:	20c8      	movs	r0, #200	; 0xc8
 8008882:	f001 fd9d 	bl	800a3c0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 fc93 	bl	800a1b2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800889c:	e18b      	b.n	8008bb6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d107      	bne.n	80088b8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2202      	movs	r2, #2
 80088b4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088b6:	e18d      	b.n	8008bd4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80088be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088c2:	d914      	bls.n	80088ee <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80088ca:	3301      	adds	r3, #1
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d903      	bls.n	80088e6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	220d      	movs	r2, #13
 80088e2:	701a      	strb	r2, [r3, #0]
      break;
 80088e4:	e176      	b.n	8008bd4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	701a      	strb	r2, [r3, #0]
      break;
 80088ec:	e172      	b.n	8008bd4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80088f4:	f103 020a 	add.w	r2, r3, #10
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80088fe:	200a      	movs	r0, #10
 8008900:	f001 fd5e 	bl	800a3c0 <USBH_Delay>
      break;
 8008904:	e166      	b.n	8008bd4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800890c:	2b00      	cmp	r3, #0
 800890e:	d005      	beq.n	800891c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008916:	2104      	movs	r1, #4
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800891c:	2064      	movs	r0, #100	; 0x64
 800891e:	f001 fd4f 	bl	800a3c0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f001 fc1e 	bl	800a164 <USBH_LL_GetSpeed>
 8008928:	4603      	mov	r3, r0
 800892a:	461a      	mov	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2205      	movs	r2, #5
 8008936:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008938:	2100      	movs	r1, #0
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 fa29 	bl	8009d92 <USBH_AllocPipe>
 8008940:	4603      	mov	r3, r0
 8008942:	461a      	mov	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008948:	2180      	movs	r1, #128	; 0x80
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f001 fa21 	bl	8009d92 <USBH_AllocPipe>
 8008950:	4603      	mov	r3, r0
 8008952:	461a      	mov	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	7919      	ldrb	r1, [r3, #4]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800896c:	b292      	uxth	r2, r2
 800896e:	9202      	str	r2, [sp, #8]
 8008970:	2200      	movs	r2, #0
 8008972:	9201      	str	r2, [sp, #4]
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	4603      	mov	r3, r0
 8008978:	2280      	movs	r2, #128	; 0x80
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f001 f9da 	bl	8009d34 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	7959      	ldrb	r1, [r3, #5]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008994:	b292      	uxth	r2, r2
 8008996:	9202      	str	r2, [sp, #8]
 8008998:	2200      	movs	r2, #0
 800899a:	9201      	str	r2, [sp, #4]
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	4603      	mov	r3, r0
 80089a0:	2200      	movs	r2, #0
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f001 f9c6 	bl	8009d34 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089a8:	e114      	b.n	8008bd4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f918 	bl	8008be0 <USBH_HandleEnum>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f040 80fe 	bne.w	8008bba <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d103      	bne.n	80089d8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2208      	movs	r2, #8
 80089d4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80089d6:	e0f0      	b.n	8008bba <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2207      	movs	r2, #7
 80089dc:	701a      	strb	r2, [r3, #0]
      break;
 80089de:	e0ec      	b.n	8008bba <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 80e9 	beq.w	8008bbe <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089f2:	2101      	movs	r1, #1
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2208      	movs	r2, #8
 80089fc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80089fe:	e0de      	b.n	8008bbe <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fc2c 	bl	8009268 <USBH_SetCfg>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f040 80d5 	bne.w	8008bc2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2209      	movs	r2, #9
 8008a1c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a1e:	e0d0      	b.n	8008bc2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008a26:	f003 0320 	and.w	r3, r3, #32
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d016      	beq.n	8008a5c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008a2e:	2101      	movs	r1, #1
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fc3c 	bl	80092ae <USBH_SetFeature>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d103      	bne.n	8008a4a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	220a      	movs	r2, #10
 8008a46:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a48:	e0bd      	b.n	8008bc6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008a4a:	7bbb      	ldrb	r3, [r7, #14]
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b03      	cmp	r3, #3
 8008a50:	f040 80b9 	bne.w	8008bc6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	220a      	movs	r2, #10
 8008a58:	701a      	strb	r2, [r3, #0]
      break;
 8008a5a:	e0b4      	b.n	8008bc6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	220a      	movs	r2, #10
 8008a60:	701a      	strb	r2, [r3, #0]
      break;
 8008a62:	e0b0      	b.n	8008bc6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f000 80ad 	beq.w	8008bca <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]
 8008a7c:	e016      	b.n	8008aac <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008a7e:	7bfa      	ldrb	r2, [r7, #15]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	32de      	adds	r2, #222	; 0xde
 8008a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a88:	791a      	ldrb	r2, [r3, #4]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d108      	bne.n	8008aa6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008a94:	7bfa      	ldrb	r2, [r7, #15]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	32de      	adds	r2, #222	; 0xde
 8008a9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008aa4:	e005      	b.n	8008ab2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	73fb      	strb	r3, [r7, #15]
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0e5      	beq.n	8008a7e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d016      	beq.n	8008aea <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	4798      	blx	r3
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d109      	bne.n	8008ae2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2206      	movs	r2, #6
 8008ad2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ada:	2103      	movs	r1, #3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ae0:	e073      	b.n	8008bca <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	220d      	movs	r2, #13
 8008ae6:	701a      	strb	r2, [r3, #0]
      break;
 8008ae8:	e06f      	b.n	8008bca <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	220d      	movs	r2, #13
 8008aee:	701a      	strb	r2, [r3, #0]
      break;
 8008af0:	e06b      	b.n	8008bca <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d017      	beq.n	8008b2c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	4798      	blx	r3
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d103      	bne.n	8008b1c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	220b      	movs	r2, #11
 8008b18:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b1a:	e058      	b.n	8008bce <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d154      	bne.n	8008bce <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	220d      	movs	r2, #13
 8008b28:	701a      	strb	r2, [r3, #0]
      break;
 8008b2a:	e050      	b.n	8008bce <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	220d      	movs	r2, #13
 8008b30:	701a      	strb	r2, [r3, #0]
      break;
 8008b32:	e04c      	b.n	8008bce <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d049      	beq.n	8008bd2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	4798      	blx	r3
      }
      break;
 8008b4a:	e042      	b.n	8008bd2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7ff fd67 	bl	8008628 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d009      	beq.n	8008b78 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d005      	beq.n	8008b8e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b88:	2105      	movs	r1, #5
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d107      	bne.n	8008baa <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7ff fe20 	bl	80087e8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ba8:	e014      	b.n	8008bd4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f001 faa4 	bl	800a0f8 <USBH_LL_Start>
      break;
 8008bb0:	e010      	b.n	8008bd4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008bb2:	bf00      	nop
 8008bb4:	e00e      	b.n	8008bd4 <USBH_Process+0x3cc>
      break;
 8008bb6:	bf00      	nop
 8008bb8:	e00c      	b.n	8008bd4 <USBH_Process+0x3cc>
      break;
 8008bba:	bf00      	nop
 8008bbc:	e00a      	b.n	8008bd4 <USBH_Process+0x3cc>
    break;
 8008bbe:	bf00      	nop
 8008bc0:	e008      	b.n	8008bd4 <USBH_Process+0x3cc>
      break;
 8008bc2:	bf00      	nop
 8008bc4:	e006      	b.n	8008bd4 <USBH_Process+0x3cc>
      break;
 8008bc6:	bf00      	nop
 8008bc8:	e004      	b.n	8008bd4 <USBH_Process+0x3cc>
      break;
 8008bca:	bf00      	nop
 8008bcc:	e002      	b.n	8008bd4 <USBH_Process+0x3cc>
      break;
 8008bce:	bf00      	nop
 8008bd0:	e000      	b.n	8008bd4 <USBH_Process+0x3cc>
      break;
 8008bd2:	bf00      	nop
  }
  return USBH_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop

08008be0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af04      	add	r7, sp, #16
 8008be6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008be8:	2301      	movs	r3, #1
 8008bea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008bec:	2301      	movs	r3, #1
 8008bee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	785b      	ldrb	r3, [r3, #1]
 8008bf4:	2b07      	cmp	r3, #7
 8008bf6:	f200 81c1 	bhi.w	8008f7c <USBH_HandleEnum+0x39c>
 8008bfa:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <USBH_HandleEnum+0x20>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c21 	.word	0x08008c21
 8008c04:	08008cdf 	.word	0x08008cdf
 8008c08:	08008d49 	.word	0x08008d49
 8008c0c:	08008dd7 	.word	0x08008dd7
 8008c10:	08008e41 	.word	0x08008e41
 8008c14:	08008eb1 	.word	0x08008eb1
 8008c18:	08008ef7 	.word	0x08008ef7
 8008c1c:	08008f3d 	.word	0x08008f3d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008c20:	2108      	movs	r1, #8
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fa50 	bl	80090c8 <USBH_Get_DevDesc>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d130      	bne.n	8008c94 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	7919      	ldrb	r1, [r3, #4]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008c56:	b292      	uxth	r2, r2
 8008c58:	9202      	str	r2, [sp, #8]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	9201      	str	r2, [sp, #4]
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	4603      	mov	r3, r0
 8008c62:	2280      	movs	r2, #128	; 0x80
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 f865 	bl	8009d34 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	7959      	ldrb	r1, [r3, #5]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c7e:	b292      	uxth	r2, r2
 8008c80:	9202      	str	r2, [sp, #8]
 8008c82:	2200      	movs	r2, #0
 8008c84:	9201      	str	r2, [sp, #4]
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f001 f851 	bl	8009d34 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008c92:	e175      	b.n	8008f80 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c94:	7bbb      	ldrb	r3, [r7, #14]
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	f040 8172 	bne.w	8008f80 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d903      	bls.n	8008cbe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	220d      	movs	r2, #13
 8008cba:	701a      	strb	r2, [r3, #0]
      break;
 8008cbc:	e160      	b.n	8008f80 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	795b      	ldrb	r3, [r3, #5]
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f001 f885 	bl	8009dd4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	791b      	ldrb	r3, [r3, #4]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 f87f 	bl	8009dd4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	701a      	strb	r2, [r3, #0]
      break;
 8008cdc:	e150      	b.n	8008f80 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008cde:	2112      	movs	r1, #18
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f9f1 	bl	80090c8 <USBH_Get_DevDesc>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d103      	bne.n	8008cf8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008cf6:	e145      	b.n	8008f84 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cf8:	7bbb      	ldrb	r3, [r7, #14]
 8008cfa:	2b03      	cmp	r3, #3
 8008cfc:	f040 8142 	bne.w	8008f84 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d06:	3301      	adds	r3, #1
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	d903      	bls.n	8008d22 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	220d      	movs	r2, #13
 8008d1e:	701a      	strb	r2, [r3, #0]
      break;
 8008d20:	e130      	b.n	8008f84 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	795b      	ldrb	r3, [r3, #5]
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f001 f853 	bl	8009dd4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	791b      	ldrb	r3, [r3, #4]
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 f84d 	bl	8009dd4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	701a      	strb	r2, [r3, #0]
      break;
 8008d46:	e11d      	b.n	8008f84 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008d48:	2101      	movs	r1, #1
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fa68 	bl	8009220 <USBH_SetAddress>
 8008d50:	4603      	mov	r3, r0
 8008d52:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d54:	7bbb      	ldrb	r3, [r7, #14]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d132      	bne.n	8008dc0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008d5a:	2002      	movs	r0, #2
 8008d5c:	f001 fb30 	bl	800a3c0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2203      	movs	r2, #3
 8008d6c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	7919      	ldrb	r1, [r3, #4]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008d82:	b292      	uxth	r2, r2
 8008d84:	9202      	str	r2, [sp, #8]
 8008d86:	2200      	movs	r2, #0
 8008d88:	9201      	str	r2, [sp, #4]
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2280      	movs	r2, #128	; 0x80
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 ffcf 	bl	8009d34 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	7959      	ldrb	r1, [r3, #5]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008daa:	b292      	uxth	r2, r2
 8008dac:	9202      	str	r2, [sp, #8]
 8008dae:	2200      	movs	r2, #0
 8008db0:	9201      	str	r2, [sp, #4]
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	4603      	mov	r3, r0
 8008db6:	2200      	movs	r2, #0
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 ffbb 	bl	8009d34 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008dbe:	e0e3      	b.n	8008f88 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dc0:	7bbb      	ldrb	r3, [r7, #14]
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	f040 80e0 	bne.w	8008f88 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	220d      	movs	r2, #13
 8008dcc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	705a      	strb	r2, [r3, #1]
      break;
 8008dd4:	e0d8      	b.n	8008f88 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008dd6:	2109      	movs	r1, #9
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f99d 	bl	8009118 <USBH_Get_CfgDesc>
 8008dde:	4603      	mov	r3, r0
 8008de0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d103      	bne.n	8008df0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2204      	movs	r2, #4
 8008dec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008dee:	e0cd      	b.n	8008f8c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	f040 80ca 	bne.w	8008f8c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008dfe:	3301      	adds	r3, #1
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d903      	bls.n	8008e1a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	220d      	movs	r2, #13
 8008e16:	701a      	strb	r2, [r3, #0]
      break;
 8008e18:	e0b8      	b.n	8008f8c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	795b      	ldrb	r3, [r3, #5]
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 ffd7 	bl	8009dd4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	791b      	ldrb	r3, [r3, #4]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 ffd1 	bl	8009dd4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	701a      	strb	r2, [r3, #0]
      break;
 8008e3e:	e0a5      	b.n	8008f8c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f965 	bl	8009118 <USBH_Get_CfgDesc>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d103      	bne.n	8008e60 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2205      	movs	r2, #5
 8008e5c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e5e:	e097      	b.n	8008f90 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	2b03      	cmp	r3, #3
 8008e64:	f040 8094 	bne.w	8008f90 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e6e:	3301      	adds	r3, #1
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d903      	bls.n	8008e8a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	220d      	movs	r2, #13
 8008e86:	701a      	strb	r2, [r3, #0]
      break;
 8008e88:	e082      	b.n	8008f90 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	795b      	ldrb	r3, [r3, #5]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 ff9f 	bl	8009dd4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	791b      	ldrb	r3, [r3, #4]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 ff99 	bl	8009dd4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	701a      	strb	r2, [r3, #0]
      break;
 8008eae:	e06f      	b.n	8008f90 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d019      	beq.n	8008eee <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008ec6:	23ff      	movs	r3, #255	; 0xff
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f949 	bl	8009160 <USBH_Get_StringDesc>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d103      	bne.n	8008ee0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2206      	movs	r2, #6
 8008edc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ede:	e059      	b.n	8008f94 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ee0:	7bbb      	ldrb	r3, [r7, #14]
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d156      	bne.n	8008f94 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2206      	movs	r2, #6
 8008eea:	705a      	strb	r2, [r3, #1]
      break;
 8008eec:	e052      	b.n	8008f94 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2206      	movs	r2, #6
 8008ef2:	705a      	strb	r2, [r3, #1]
      break;
 8008ef4:	e04e      	b.n	8008f94 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d019      	beq.n	8008f34 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008f0c:	23ff      	movs	r3, #255	; 0xff
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f926 	bl	8009160 <USBH_Get_StringDesc>
 8008f14:	4603      	mov	r3, r0
 8008f16:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d103      	bne.n	8008f26 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2207      	movs	r2, #7
 8008f22:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f24:	e038      	b.n	8008f98 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f26:	7bbb      	ldrb	r3, [r7, #14]
 8008f28:	2b03      	cmp	r3, #3
 8008f2a:	d135      	bne.n	8008f98 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2207      	movs	r2, #7
 8008f30:	705a      	strb	r2, [r3, #1]
      break;
 8008f32:	e031      	b.n	8008f98 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2207      	movs	r2, #7
 8008f38:	705a      	strb	r2, [r3, #1]
      break;
 8008f3a:	e02d      	b.n	8008f98 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d017      	beq.n	8008f76 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008f52:	23ff      	movs	r3, #255	; 0xff
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f903 	bl	8009160 <USBH_Get_StringDesc>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d102      	bne.n	8008f6a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008f68:	e018      	b.n	8008f9c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	2b03      	cmp	r3, #3
 8008f6e:	d115      	bne.n	8008f9c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	73fb      	strb	r3, [r7, #15]
      break;
 8008f74:	e012      	b.n	8008f9c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]
      break;
 8008f7a:	e00f      	b.n	8008f9c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008f7c:	bf00      	nop
 8008f7e:	e00e      	b.n	8008f9e <USBH_HandleEnum+0x3be>
      break;
 8008f80:	bf00      	nop
 8008f82:	e00c      	b.n	8008f9e <USBH_HandleEnum+0x3be>
      break;
 8008f84:	bf00      	nop
 8008f86:	e00a      	b.n	8008f9e <USBH_HandleEnum+0x3be>
      break;
 8008f88:	bf00      	nop
 8008f8a:	e008      	b.n	8008f9e <USBH_HandleEnum+0x3be>
      break;
 8008f8c:	bf00      	nop
 8008f8e:	e006      	b.n	8008f9e <USBH_HandleEnum+0x3be>
      break;
 8008f90:	bf00      	nop
 8008f92:	e004      	b.n	8008f9e <USBH_HandleEnum+0x3be>
      break;
 8008f94:	bf00      	nop
 8008f96:	e002      	b.n	8008f9e <USBH_HandleEnum+0x3be>
      break;
 8008f98:	bf00      	nop
 8008f9a:	e000      	b.n	8008f9e <USBH_HandleEnum+0x3be>
      break;
 8008f9c:	bf00      	nop
  }
  return Status;
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008fba:	bf00      	nop
 8008fbc:	370c      	adds	r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f804 	bl	8008fea <USBH_HandleSof>
}
 8008fe2:	bf00      	nop
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b082      	sub	sp, #8
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b0b      	cmp	r3, #11
 8008ffa:	d10a      	bne.n	8009012 <USBH_HandleSof+0x28>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009002:	2b00      	cmp	r3, #0
 8009004:	d005      	beq.n	8009012 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	4798      	blx	r3
  }
}
 8009012:	bf00      	nop
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800901a:	b480      	push	{r7}
 800901c:	b083      	sub	sp, #12
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800902a:	bf00      	nop
}
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009046:	bf00      	nop
}
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009052:	b480      	push	{r7}
 8009054:	b083      	sub	sp, #12
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f001 f844 	bl	800a12e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	791b      	ldrb	r3, [r3, #4]
 80090aa:	4619      	mov	r1, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fe91 	bl	8009dd4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	795b      	ldrb	r3, [r3, #5]
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fe8b 	bl	8009dd4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af02      	add	r7, sp, #8
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	460b      	mov	r3, r1
 80090d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80090da:	78fb      	ldrb	r3, [r7, #3]
 80090dc:	b29b      	uxth	r3, r3
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	4613      	mov	r3, r2
 80090e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090e6:	2100      	movs	r1, #0
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f864 	bl	80091b6 <USBH_GetDescriptor>
 80090ee:	4603      	mov	r3, r0
 80090f0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f203 3026 	addw	r0, r3, #806	; 0x326
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009104:	78fa      	ldrb	r2, [r7, #3]
 8009106:	b292      	uxth	r2, r2
 8009108:	4619      	mov	r1, r3
 800910a:	f000 f918 	bl	800933e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800910e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af02      	add	r7, sp, #8
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	331c      	adds	r3, #28
 8009128:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800912a:	887b      	ldrh	r3, [r7, #2]
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009134:	2100      	movs	r1, #0
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f83d 	bl	80091b6 <USBH_GetDescriptor>
 800913c:	4603      	mov	r3, r0
 800913e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009140:	7bfb      	ldrb	r3, [r7, #15]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d107      	bne.n	8009156 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009146:	887b      	ldrh	r3, [r7, #2]
 8009148:	461a      	mov	r2, r3
 800914a:	68b9      	ldr	r1, [r7, #8]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f987 	bl	8009460 <USBH_ParseCfgDesc>
 8009152:	4603      	mov	r3, r0
 8009154:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009156:	7bfb      	ldrb	r3, [r7, #15]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b088      	sub	sp, #32
 8009164:	af02      	add	r7, sp, #8
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	607a      	str	r2, [r7, #4]
 800916a:	461a      	mov	r2, r3
 800916c:	460b      	mov	r3, r1
 800916e:	72fb      	strb	r3, [r7, #11]
 8009170:	4613      	mov	r3, r2
 8009172:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009174:	7afb      	ldrb	r3, [r7, #11]
 8009176:	b29b      	uxth	r3, r3
 8009178:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800917c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009184:	893b      	ldrh	r3, [r7, #8]
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	460b      	mov	r3, r1
 800918a:	2100      	movs	r1, #0
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 f812 	bl	80091b6 <USBH_GetDescriptor>
 8009192:	4603      	mov	r3, r0
 8009194:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009196:	7dfb      	ldrb	r3, [r7, #23]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d107      	bne.n	80091ac <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80091a2:	893a      	ldrh	r2, [r7, #8]
 80091a4:	6879      	ldr	r1, [r7, #4]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fb24 	bl	80097f4 <USBH_ParseStringDesc>
  }

  return status;
 80091ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	60f8      	str	r0, [r7, #12]
 80091be:	607b      	str	r3, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	72fb      	strb	r3, [r7, #11]
 80091c4:	4613      	mov	r3, r2
 80091c6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	789b      	ldrb	r3, [r3, #2]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d11c      	bne.n	800920a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80091d0:	7afb      	ldrb	r3, [r7, #11]
 80091d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2206      	movs	r2, #6
 80091e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	893a      	ldrh	r2, [r7, #8]
 80091e6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80091e8:	893b      	ldrh	r3, [r7, #8]
 80091ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80091ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091f2:	d104      	bne.n	80091fe <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f240 4209 	movw	r2, #1033	; 0x409
 80091fa:	829a      	strh	r2, [r3, #20]
 80091fc:	e002      	b.n	8009204 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	8b3a      	ldrh	r2, [r7, #24]
 8009208:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800920a:	8b3b      	ldrh	r3, [r7, #24]
 800920c:	461a      	mov	r2, r3
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 fb3d 	bl	8009890 <USBH_CtlReq>
 8009216:	4603      	mov	r3, r0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	789b      	ldrb	r3, [r3, #2]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d10f      	bne.n	8009254 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2205      	movs	r2, #5
 800923e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009240:	78fb      	ldrb	r3, [r7, #3]
 8009242:	b29a      	uxth	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009254:	2200      	movs	r2, #0
 8009256:	2100      	movs	r1, #0
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fb19 	bl	8009890 <USBH_CtlReq>
 800925e:	4603      	mov	r3, r0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	789b      	ldrb	r3, [r3, #2]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d10e      	bne.n	800929a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2209      	movs	r2, #9
 8009286:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	887a      	ldrh	r2, [r7, #2]
 800928c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800929a:	2200      	movs	r2, #0
 800929c:	2100      	movs	r1, #0
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 faf6 	bl	8009890 <USBH_CtlReq>
 80092a4:	4603      	mov	r3, r0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b082      	sub	sp, #8
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	460b      	mov	r3, r1
 80092b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	789b      	ldrb	r3, [r3, #2]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d10f      	bne.n	80092e2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2203      	movs	r2, #3
 80092cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80092ce:	78fb      	ldrb	r3, [r7, #3]
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80092e2:	2200      	movs	r2, #0
 80092e4:	2100      	movs	r1, #0
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fad2 	bl	8009890 <USBH_CtlReq>
 80092ec:	4603      	mov	r3, r0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	460b      	mov	r3, r1
 8009300:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	789b      	ldrb	r3, [r3, #2]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d10f      	bne.n	800932a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2202      	movs	r2, #2
 800930e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800931c:	78fb      	ldrb	r3, [r7, #3]
 800931e:	b29a      	uxth	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800932a:	2200      	movs	r2, #0
 800932c:	2100      	movs	r1, #0
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 faae 	bl	8009890 <USBH_CtlReq>
 8009334:	4603      	mov	r3, r0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800933e:	b480      	push	{r7}
 8009340:	b085      	sub	sp, #20
 8009342:	af00      	add	r7, sp, #0
 8009344:	60f8      	str	r0, [r7, #12]
 8009346:	60b9      	str	r1, [r7, #8]
 8009348:	4613      	mov	r3, r2
 800934a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	781a      	ldrb	r2, [r3, #0]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	785a      	ldrb	r2, [r3, #1]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	3302      	adds	r3, #2
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	b29a      	uxth	r2, r3
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	3303      	adds	r3, #3
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	b29b      	uxth	r3, r3
 800936c:	021b      	lsls	r3, r3, #8
 800936e:	b29b      	uxth	r3, r3
 8009370:	4313      	orrs	r3, r2
 8009372:	b29a      	uxth	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	791a      	ldrb	r2, [r3, #4]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	795a      	ldrb	r2, [r3, #5]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	799a      	ldrb	r2, [r3, #6]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	79da      	ldrb	r2, [r3, #7]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	79db      	ldrb	r3, [r3, #7]
 800939c:	2b20      	cmp	r3, #32
 800939e:	dc11      	bgt.n	80093c4 <USBH_ParseDevDesc+0x86>
 80093a0:	2b08      	cmp	r3, #8
 80093a2:	db16      	blt.n	80093d2 <USBH_ParseDevDesc+0x94>
 80093a4:	3b08      	subs	r3, #8
 80093a6:	2201      	movs	r2, #1
 80093a8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ac:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80093b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	bf14      	ite	ne
 80093b8:	2301      	movne	r3, #1
 80093ba:	2300      	moveq	r3, #0
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d102      	bne.n	80093c8 <USBH_ParseDevDesc+0x8a>
 80093c2:	e006      	b.n	80093d2 <USBH_ParseDevDesc+0x94>
 80093c4:	2b40      	cmp	r3, #64	; 0x40
 80093c6:	d104      	bne.n	80093d2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	79da      	ldrb	r2, [r3, #7]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	71da      	strb	r2, [r3, #7]
      break;
 80093d0:	e003      	b.n	80093da <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2240      	movs	r2, #64	; 0x40
 80093d6:	71da      	strb	r2, [r3, #7]
      break;
 80093d8:	bf00      	nop
  }

  if (length > 8U)
 80093da:	88fb      	ldrh	r3, [r7, #6]
 80093dc:	2b08      	cmp	r3, #8
 80093de:	d939      	bls.n	8009454 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	3308      	adds	r3, #8
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	3309      	adds	r3, #9
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	021b      	lsls	r3, r3, #8
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	4313      	orrs	r3, r2
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	330a      	adds	r3, #10
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	b29a      	uxth	r2, r3
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	330b      	adds	r3, #11
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	b29b      	uxth	r3, r3
 800940c:	021b      	lsls	r3, r3, #8
 800940e:	b29b      	uxth	r3, r3
 8009410:	4313      	orrs	r3, r2
 8009412:	b29a      	uxth	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	330c      	adds	r3, #12
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	b29a      	uxth	r2, r3
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	330d      	adds	r3, #13
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	b29b      	uxth	r3, r3
 8009428:	021b      	lsls	r3, r3, #8
 800942a:	b29b      	uxth	r3, r3
 800942c:	4313      	orrs	r3, r2
 800942e:	b29a      	uxth	r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	7b9a      	ldrb	r2, [r3, #14]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	7bda      	ldrb	r2, [r3, #15]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	7c1a      	ldrb	r2, [r3, #16]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	7c5a      	ldrb	r2, [r3, #17]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	745a      	strb	r2, [r3, #17]
  }
}
 8009454:	bf00      	nop
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b08c      	sub	sp, #48	; 0x30
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	4613      	mov	r3, r2
 800946c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009474:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009480:	2300      	movs	r3, #0
 8009482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009486:	2300      	movs	r3, #0
 8009488:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	781a      	ldrb	r2, [r3, #0]
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	785a      	ldrb	r2, [r3, #1]
 800949c:	6a3b      	ldr	r3, [r7, #32]
 800949e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	3302      	adds	r3, #2
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	3303      	adds	r3, #3
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	021b      	lsls	r3, r3, #8
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	4313      	orrs	r3, r2
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094bc:	bf28      	it	cs
 80094be:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	791a      	ldrb	r2, [r3, #4]
 80094cc:	6a3b      	ldr	r3, [r7, #32]
 80094ce:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	795a      	ldrb	r2, [r3, #5]
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	799a      	ldrb	r2, [r3, #6]
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	79da      	ldrb	r2, [r3, #7]
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	7a1a      	ldrb	r2, [r3, #8]
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	2b09      	cmp	r3, #9
 80094f6:	d002      	beq.n	80094fe <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	2209      	movs	r2, #9
 80094fc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80094fe:	88fb      	ldrh	r3, [r7, #6]
 8009500:	2b09      	cmp	r3, #9
 8009502:	f240 809d 	bls.w	8009640 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009506:	2309      	movs	r3, #9
 8009508:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800950a:	2300      	movs	r3, #0
 800950c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800950e:	e081      	b.n	8009614 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009510:	f107 0316 	add.w	r3, r7, #22
 8009514:	4619      	mov	r1, r3
 8009516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009518:	f000 f99f 	bl	800985a <USBH_GetNextDesc>
 800951c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800951e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009520:	785b      	ldrb	r3, [r3, #1]
 8009522:	2b04      	cmp	r3, #4
 8009524:	d176      	bne.n	8009614 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	2b09      	cmp	r3, #9
 800952c:	d002      	beq.n	8009534 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009530:	2209      	movs	r2, #9
 8009532:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009538:	221a      	movs	r2, #26
 800953a:	fb02 f303 	mul.w	r3, r2, r3
 800953e:	3308      	adds	r3, #8
 8009540:	6a3a      	ldr	r2, [r7, #32]
 8009542:	4413      	add	r3, r2
 8009544:	3302      	adds	r3, #2
 8009546:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800954a:	69f8      	ldr	r0, [r7, #28]
 800954c:	f000 f87e 	bl	800964c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009550:	2300      	movs	r3, #0
 8009552:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009556:	2300      	movs	r3, #0
 8009558:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800955a:	e043      	b.n	80095e4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800955c:	f107 0316 	add.w	r3, r7, #22
 8009560:	4619      	mov	r1, r3
 8009562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009564:	f000 f979 	bl	800985a <USBH_GetNextDesc>
 8009568:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	785b      	ldrb	r3, [r3, #1]
 800956e:	2b05      	cmp	r3, #5
 8009570:	d138      	bne.n	80095e4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	795b      	ldrb	r3, [r3, #5]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d10f      	bne.n	800959a <USBH_ParseCfgDesc+0x13a>
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	799b      	ldrb	r3, [r3, #6]
 800957e:	2b02      	cmp	r3, #2
 8009580:	d10b      	bne.n	800959a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	79db      	ldrb	r3, [r3, #7]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10f      	bne.n	80095aa <USBH_ParseCfgDesc+0x14a>
 800958a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	2b09      	cmp	r3, #9
 8009590:	d00b      	beq.n	80095aa <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009594:	2209      	movs	r2, #9
 8009596:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009598:	e007      	b.n	80095aa <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800959a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	2b07      	cmp	r3, #7
 80095a0:	d004      	beq.n	80095ac <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80095a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a4:	2207      	movs	r2, #7
 80095a6:	701a      	strb	r2, [r3, #0]
 80095a8:	e000      	b.n	80095ac <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80095aa:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80095ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80095b4:	3201      	adds	r2, #1
 80095b6:	00d2      	lsls	r2, r2, #3
 80095b8:	211a      	movs	r1, #26
 80095ba:	fb01 f303 	mul.w	r3, r1, r3
 80095be:	4413      	add	r3, r2
 80095c0:	3308      	adds	r3, #8
 80095c2:	6a3a      	ldr	r2, [r7, #32]
 80095c4:	4413      	add	r3, r2
 80095c6:	3304      	adds	r3, #4
 80095c8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80095ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095cc:	69b9      	ldr	r1, [r7, #24]
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f000 f86b 	bl	80096aa <USBH_ParseEPDesc>
 80095d4:	4603      	mov	r3, r0
 80095d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80095da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80095de:	3301      	adds	r3, #1
 80095e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	791b      	ldrb	r3, [r3, #4]
 80095e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d204      	bcs.n	80095fa <USBH_ParseCfgDesc+0x19a>
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	885a      	ldrh	r2, [r3, #2]
 80095f4:	8afb      	ldrh	r3, [r7, #22]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d8b0      	bhi.n	800955c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	791b      	ldrb	r3, [r3, #4]
 80095fe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009602:	429a      	cmp	r2, r3
 8009604:	d201      	bcs.n	800960a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009606:	2303      	movs	r3, #3
 8009608:	e01c      	b.n	8009644 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800960a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800960e:	3301      	adds	r3, #1
 8009610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009618:	2b01      	cmp	r3, #1
 800961a:	d805      	bhi.n	8009628 <USBH_ParseCfgDesc+0x1c8>
 800961c:	6a3b      	ldr	r3, [r7, #32]
 800961e:	885a      	ldrh	r2, [r3, #2]
 8009620:	8afb      	ldrh	r3, [r7, #22]
 8009622:	429a      	cmp	r2, r3
 8009624:	f63f af74 	bhi.w	8009510 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009628:	6a3b      	ldr	r3, [r7, #32]
 800962a:	791b      	ldrb	r3, [r3, #4]
 800962c:	2b02      	cmp	r3, #2
 800962e:	bf28      	it	cs
 8009630:	2302      	movcs	r3, #2
 8009632:	b2db      	uxtb	r3, r3
 8009634:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009638:	429a      	cmp	r2, r3
 800963a:	d201      	bcs.n	8009640 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800963c:	2303      	movs	r3, #3
 800963e:	e001      	b.n	8009644 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009644:	4618      	mov	r0, r3
 8009646:	3730      	adds	r7, #48	; 0x30
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	781a      	ldrb	r2, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	785a      	ldrb	r2, [r3, #1]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	789a      	ldrb	r2, [r3, #2]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	78da      	ldrb	r2, [r3, #3]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	791a      	ldrb	r2, [r3, #4]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	795a      	ldrb	r2, [r3, #5]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	799a      	ldrb	r2, [r3, #6]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	79da      	ldrb	r2, [r3, #7]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	7a1a      	ldrb	r2, [r3, #8]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	721a      	strb	r2, [r3, #8]
}
 800969e:	bf00      	nop
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80096aa:	b480      	push	{r7}
 80096ac:	b087      	sub	sp, #28
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	60b9      	str	r1, [r7, #8]
 80096b4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	781a      	ldrb	r2, [r3, #0]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	785a      	ldrb	r2, [r3, #1]
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	789a      	ldrb	r2, [r3, #2]
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	78da      	ldrb	r2, [r3, #3]
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	3304      	adds	r3, #4
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3305      	adds	r3, #5
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	021b      	lsls	r3, r3, #8
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	4313      	orrs	r3, r2
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	799a      	ldrb	r2, [r3, #6]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	889b      	ldrh	r3, [r3, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d102      	bne.n	800970c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009706:	2303      	movs	r3, #3
 8009708:	75fb      	strb	r3, [r7, #23]
 800970a:	e033      	b.n	8009774 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	889b      	ldrh	r3, [r3, #4]
 8009710:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009714:	f023 0307 	bic.w	r3, r3, #7
 8009718:	b29a      	uxth	r2, r3
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	889b      	ldrh	r3, [r3, #4]
 8009722:	b21a      	sxth	r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	3304      	adds	r3, #4
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	b299      	uxth	r1, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	3305      	adds	r3, #5
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	b29b      	uxth	r3, r3
 8009734:	021b      	lsls	r3, r3, #8
 8009736:	b29b      	uxth	r3, r3
 8009738:	430b      	orrs	r3, r1
 800973a:	b29b      	uxth	r3, r3
 800973c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009740:	2b00      	cmp	r3, #0
 8009742:	d110      	bne.n	8009766 <USBH_ParseEPDesc+0xbc>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	3304      	adds	r3, #4
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	b299      	uxth	r1, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	3305      	adds	r3, #5
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	b29b      	uxth	r3, r3
 8009754:	021b      	lsls	r3, r3, #8
 8009756:	b29b      	uxth	r3, r3
 8009758:	430b      	orrs	r3, r1
 800975a:	b29b      	uxth	r3, r3
 800975c:	b21b      	sxth	r3, r3
 800975e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009762:	b21b      	sxth	r3, r3
 8009764:	e001      	b.n	800976a <USBH_ParseEPDesc+0xc0>
 8009766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800976a:	4313      	orrs	r3, r2
 800976c:	b21b      	sxth	r3, r3
 800976e:	b29a      	uxth	r2, r3
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800977a:	2b00      	cmp	r3, #0
 800977c:	d116      	bne.n	80097ac <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	78db      	ldrb	r3, [r3, #3]
 8009782:	f003 0303 	and.w	r3, r3, #3
 8009786:	2b01      	cmp	r3, #1
 8009788:	d005      	beq.n	8009796 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	78db      	ldrb	r3, [r3, #3]
 800978e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009792:	2b03      	cmp	r3, #3
 8009794:	d127      	bne.n	80097e6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	799b      	ldrb	r3, [r3, #6]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d003      	beq.n	80097a6 <USBH_ParseEPDesc+0xfc>
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	799b      	ldrb	r3, [r3, #6]
 80097a2:	2b10      	cmp	r3, #16
 80097a4:	d91f      	bls.n	80097e6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80097a6:	2303      	movs	r3, #3
 80097a8:	75fb      	strb	r3, [r7, #23]
 80097aa:	e01c      	b.n	80097e6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	78db      	ldrb	r3, [r3, #3]
 80097b0:	f003 0303 	and.w	r3, r3, #3
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d10a      	bne.n	80097ce <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	799b      	ldrb	r3, [r3, #6]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d003      	beq.n	80097c8 <USBH_ParseEPDesc+0x11e>
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	799b      	ldrb	r3, [r3, #6]
 80097c4:	2b10      	cmp	r3, #16
 80097c6:	d90e      	bls.n	80097e6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80097c8:	2303      	movs	r3, #3
 80097ca:	75fb      	strb	r3, [r7, #23]
 80097cc:	e00b      	b.n	80097e6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	78db      	ldrb	r3, [r3, #3]
 80097d2:	f003 0303 	and.w	r3, r3, #3
 80097d6:	2b03      	cmp	r3, #3
 80097d8:	d105      	bne.n	80097e6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	799b      	ldrb	r3, [r3, #6]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80097e2:	2303      	movs	r3, #3
 80097e4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80097e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	371c      	adds	r7, #28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	4613      	mov	r3, r2
 8009800:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3301      	adds	r3, #1
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	2b03      	cmp	r3, #3
 800980a:	d120      	bne.n	800984e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	1e9a      	subs	r2, r3, #2
 8009812:	88fb      	ldrh	r3, [r7, #6]
 8009814:	4293      	cmp	r3, r2
 8009816:	bf28      	it	cs
 8009818:	4613      	movcs	r3, r2
 800981a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3302      	adds	r3, #2
 8009820:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009822:	2300      	movs	r3, #0
 8009824:	82fb      	strh	r3, [r7, #22]
 8009826:	e00b      	b.n	8009840 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009828:	8afb      	ldrh	r3, [r7, #22]
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	4413      	add	r3, r2
 800982e:	781a      	ldrb	r2, [r3, #0]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	3301      	adds	r3, #1
 8009838:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800983a:	8afb      	ldrh	r3, [r7, #22]
 800983c:	3302      	adds	r3, #2
 800983e:	82fb      	strh	r3, [r7, #22]
 8009840:	8afa      	ldrh	r2, [r7, #22]
 8009842:	8abb      	ldrh	r3, [r7, #20]
 8009844:	429a      	cmp	r2, r3
 8009846:	d3ef      	bcc.n	8009828 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2200      	movs	r2, #0
 800984c:	701a      	strb	r2, [r3, #0]
  }
}
 800984e:	bf00      	nop
 8009850:	371c      	adds	r7, #28
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800985a:	b480      	push	{r7}
 800985c:	b085      	sub	sp, #20
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	881a      	ldrh	r2, [r3, #0]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	b29b      	uxth	r3, r3
 800986e:	4413      	add	r3, r2
 8009870:	b29a      	uxth	r2, r3
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4413      	add	r3, r2
 8009880:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009882:	68fb      	ldr	r3, [r7, #12]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	4613      	mov	r3, r2
 800989c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800989e:	2301      	movs	r3, #1
 80098a0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	789b      	ldrb	r3, [r3, #2]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d002      	beq.n	80098b0 <USBH_CtlReq+0x20>
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d00f      	beq.n	80098ce <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80098ae:	e027      	b.n	8009900 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	88fa      	ldrh	r2, [r7, #6]
 80098ba:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2201      	movs	r2, #1
 80098c0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2202      	movs	r2, #2
 80098c6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80098c8:	2301      	movs	r3, #1
 80098ca:	75fb      	strb	r3, [r7, #23]
      break;
 80098cc:	e018      	b.n	8009900 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f000 f81c 	bl	800990c <USBH_HandleControl>
 80098d4:	4603      	mov	r3, r0
 80098d6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80098d8:	7dfb      	ldrb	r3, [r7, #23]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d002      	beq.n	80098e4 <USBH_CtlReq+0x54>
 80098de:	7dfb      	ldrb	r3, [r7, #23]
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d106      	bne.n	80098f2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2201      	movs	r2, #1
 80098e8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	761a      	strb	r2, [r3, #24]
      break;
 80098f0:	e005      	b.n	80098fe <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d102      	bne.n	80098fe <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2201      	movs	r2, #1
 80098fc:	709a      	strb	r2, [r3, #2]
      break;
 80098fe:	bf00      	nop
  }
  return status;
 8009900:	7dfb      	ldrb	r3, [r7, #23]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3718      	adds	r7, #24
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
	...

0800990c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af02      	add	r7, sp, #8
 8009912:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009914:	2301      	movs	r3, #1
 8009916:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009918:	2300      	movs	r3, #0
 800991a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	7e1b      	ldrb	r3, [r3, #24]
 8009920:	3b01      	subs	r3, #1
 8009922:	2b0a      	cmp	r3, #10
 8009924:	f200 8156 	bhi.w	8009bd4 <USBH_HandleControl+0x2c8>
 8009928:	a201      	add	r2, pc, #4	; (adr r2, 8009930 <USBH_HandleControl+0x24>)
 800992a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992e:	bf00      	nop
 8009930:	0800995d 	.word	0x0800995d
 8009934:	08009977 	.word	0x08009977
 8009938:	080099e1 	.word	0x080099e1
 800993c:	08009a07 	.word	0x08009a07
 8009940:	08009a3f 	.word	0x08009a3f
 8009944:	08009a69 	.word	0x08009a69
 8009948:	08009abb 	.word	0x08009abb
 800994c:	08009add 	.word	0x08009add
 8009950:	08009b19 	.word	0x08009b19
 8009954:	08009b3f 	.word	0x08009b3f
 8009958:	08009b7d 	.word	0x08009b7d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f103 0110 	add.w	r1, r3, #16
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	795b      	ldrb	r3, [r3, #5]
 8009966:	461a      	mov	r2, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f943 	bl	8009bf4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2202      	movs	r2, #2
 8009972:	761a      	strb	r2, [r3, #24]
      break;
 8009974:	e139      	b.n	8009bea <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	795b      	ldrb	r3, [r3, #5]
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fcc5 	bl	800a30c <USBH_LL_GetURBState>
 8009982:	4603      	mov	r3, r0
 8009984:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009986:	7bbb      	ldrb	r3, [r7, #14]
 8009988:	2b01      	cmp	r3, #1
 800998a:	d11e      	bne.n	80099ca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	7c1b      	ldrb	r3, [r3, #16]
 8009990:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009994:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	8adb      	ldrh	r3, [r3, #22]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00a      	beq.n	80099b4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800999e:	7b7b      	ldrb	r3, [r7, #13]
 80099a0:	2b80      	cmp	r3, #128	; 0x80
 80099a2:	d103      	bne.n	80099ac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2203      	movs	r2, #3
 80099a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80099aa:	e115      	b.n	8009bd8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2205      	movs	r2, #5
 80099b0:	761a      	strb	r2, [r3, #24]
      break;
 80099b2:	e111      	b.n	8009bd8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80099b4:	7b7b      	ldrb	r3, [r7, #13]
 80099b6:	2b80      	cmp	r3, #128	; 0x80
 80099b8:	d103      	bne.n	80099c2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2209      	movs	r2, #9
 80099be:	761a      	strb	r2, [r3, #24]
      break;
 80099c0:	e10a      	b.n	8009bd8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2207      	movs	r2, #7
 80099c6:	761a      	strb	r2, [r3, #24]
      break;
 80099c8:	e106      	b.n	8009bd8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80099ca:	7bbb      	ldrb	r3, [r7, #14]
 80099cc:	2b04      	cmp	r3, #4
 80099ce:	d003      	beq.n	80099d8 <USBH_HandleControl+0xcc>
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	f040 8100 	bne.w	8009bd8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	220b      	movs	r2, #11
 80099dc:	761a      	strb	r2, [r3, #24]
      break;
 80099de:	e0fb      	b.n	8009bd8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6899      	ldr	r1, [r3, #8]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	899a      	ldrh	r2, [r3, #12]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	791b      	ldrb	r3, [r3, #4]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f93a 	bl	8009c72 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2204      	movs	r2, #4
 8009a02:	761a      	strb	r2, [r3, #24]
      break;
 8009a04:	e0f1      	b.n	8009bea <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	791b      	ldrb	r3, [r3, #4]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fc7d 	bl	800a30c <USBH_LL_GetURBState>
 8009a12:	4603      	mov	r3, r0
 8009a14:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009a16:	7bbb      	ldrb	r3, [r7, #14]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d102      	bne.n	8009a22 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2209      	movs	r2, #9
 8009a20:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009a22:	7bbb      	ldrb	r3, [r7, #14]
 8009a24:	2b05      	cmp	r3, #5
 8009a26:	d102      	bne.n	8009a2e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a2c:	e0d6      	b.n	8009bdc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009a2e:	7bbb      	ldrb	r3, [r7, #14]
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	f040 80d3 	bne.w	8009bdc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	220b      	movs	r2, #11
 8009a3a:	761a      	strb	r2, [r3, #24]
      break;
 8009a3c:	e0ce      	b.n	8009bdc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6899      	ldr	r1, [r3, #8]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	899a      	ldrh	r2, [r3, #12]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	795b      	ldrb	r3, [r3, #5]
 8009a4a:	2001      	movs	r0, #1
 8009a4c:	9000      	str	r0, [sp, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f8ea 	bl	8009c28 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2206      	movs	r2, #6
 8009a64:	761a      	strb	r2, [r3, #24]
      break;
 8009a66:	e0c0      	b.n	8009bea <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	795b      	ldrb	r3, [r3, #5]
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fc4c 	bl	800a30c <USBH_LL_GetURBState>
 8009a74:	4603      	mov	r3, r0
 8009a76:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a78:	7bbb      	ldrb	r3, [r7, #14]
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d103      	bne.n	8009a86 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2207      	movs	r2, #7
 8009a82:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a84:	e0ac      	b.n	8009be0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009a86:	7bbb      	ldrb	r3, [r7, #14]
 8009a88:	2b05      	cmp	r3, #5
 8009a8a:	d105      	bne.n	8009a98 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	220c      	movs	r2, #12
 8009a90:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009a92:	2303      	movs	r3, #3
 8009a94:	73fb      	strb	r3, [r7, #15]
      break;
 8009a96:	e0a3      	b.n	8009be0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d103      	bne.n	8009aa6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2205      	movs	r2, #5
 8009aa2:	761a      	strb	r2, [r3, #24]
      break;
 8009aa4:	e09c      	b.n	8009be0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009aa6:	7bbb      	ldrb	r3, [r7, #14]
 8009aa8:	2b04      	cmp	r3, #4
 8009aaa:	f040 8099 	bne.w	8009be0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	220b      	movs	r2, #11
 8009ab2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab8:	e092      	b.n	8009be0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	791b      	ldrb	r3, [r3, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f8d5 	bl	8009c72 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2208      	movs	r2, #8
 8009ad8:	761a      	strb	r2, [r3, #24]

      break;
 8009ada:	e086      	b.n	8009bea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	791b      	ldrb	r3, [r3, #4]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fc12 	bl	800a30c <USBH_LL_GetURBState>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009aec:	7bbb      	ldrb	r3, [r7, #14]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d105      	bne.n	8009afe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	220d      	movs	r2, #13
 8009af6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009afc:	e072      	b.n	8009be4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009afe:	7bbb      	ldrb	r3, [r7, #14]
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	d103      	bne.n	8009b0c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	220b      	movs	r2, #11
 8009b08:	761a      	strb	r2, [r3, #24]
      break;
 8009b0a:	e06b      	b.n	8009be4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
 8009b0e:	2b05      	cmp	r3, #5
 8009b10:	d168      	bne.n	8009be4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009b12:	2303      	movs	r3, #3
 8009b14:	73fb      	strb	r3, [r7, #15]
      break;
 8009b16:	e065      	b.n	8009be4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	795b      	ldrb	r3, [r3, #5]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	9200      	str	r2, [sp, #0]
 8009b20:	2200      	movs	r2, #0
 8009b22:	2100      	movs	r1, #0
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f87f 	bl	8009c28 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	220a      	movs	r2, #10
 8009b3a:	761a      	strb	r2, [r3, #24]
      break;
 8009b3c:	e055      	b.n	8009bea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	795b      	ldrb	r3, [r3, #5]
 8009b42:	4619      	mov	r1, r3
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fbe1 	bl	800a30c <USBH_LL_GetURBState>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009b4e:	7bbb      	ldrb	r3, [r7, #14]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d105      	bne.n	8009b60 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	220d      	movs	r2, #13
 8009b5c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b5e:	e043      	b.n	8009be8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d103      	bne.n	8009b6e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2209      	movs	r2, #9
 8009b6a:	761a      	strb	r2, [r3, #24]
      break;
 8009b6c:	e03c      	b.n	8009be8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009b6e:	7bbb      	ldrb	r3, [r7, #14]
 8009b70:	2b04      	cmp	r3, #4
 8009b72:	d139      	bne.n	8009be8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	220b      	movs	r2, #11
 8009b78:	761a      	strb	r2, [r3, #24]
      break;
 8009b7a:	e035      	b.n	8009be8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	7e5b      	ldrb	r3, [r3, #25]
 8009b80:	3301      	adds	r3, #1
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	765a      	strb	r2, [r3, #25]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	7e5b      	ldrb	r3, [r3, #25]
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d806      	bhi.n	8009b9e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009b9c:	e025      	b.n	8009bea <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ba4:	2106      	movs	r1, #6
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	795b      	ldrb	r3, [r3, #5]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f90c 	bl	8009dd4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	791b      	ldrb	r3, [r3, #4]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 f906 	bl	8009dd4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009bce:	2302      	movs	r3, #2
 8009bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8009bd2:	e00a      	b.n	8009bea <USBH_HandleControl+0x2de>

    default:
      break;
 8009bd4:	bf00      	nop
 8009bd6:	e008      	b.n	8009bea <USBH_HandleControl+0x2de>
      break;
 8009bd8:	bf00      	nop
 8009bda:	e006      	b.n	8009bea <USBH_HandleControl+0x2de>
      break;
 8009bdc:	bf00      	nop
 8009bde:	e004      	b.n	8009bea <USBH_HandleControl+0x2de>
      break;
 8009be0:	bf00      	nop
 8009be2:	e002      	b.n	8009bea <USBH_HandleControl+0x2de>
      break;
 8009be4:	bf00      	nop
 8009be6:	e000      	b.n	8009bea <USBH_HandleControl+0x2de>
      break;
 8009be8:	bf00      	nop
  }

  return status;
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b088      	sub	sp, #32
 8009bf8:	af04      	add	r7, sp, #16
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c02:	79f9      	ldrb	r1, [r7, #7]
 8009c04:	2300      	movs	r3, #0
 8009c06:	9303      	str	r3, [sp, #12]
 8009c08:	2308      	movs	r3, #8
 8009c0a:	9302      	str	r3, [sp, #8]
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	9301      	str	r3, [sp, #4]
 8009c10:	2300      	movs	r3, #0
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	2300      	movs	r3, #0
 8009c16:	2200      	movs	r2, #0
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f000 fb46 	bl	800a2aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af04      	add	r7, sp, #16
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	4611      	mov	r1, r2
 8009c34:	461a      	mov	r2, r3
 8009c36:	460b      	mov	r3, r1
 8009c38:	80fb      	strh	r3, [r7, #6]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d001      	beq.n	8009c4c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c4c:	7979      	ldrb	r1, [r7, #5]
 8009c4e:	7e3b      	ldrb	r3, [r7, #24]
 8009c50:	9303      	str	r3, [sp, #12]
 8009c52:	88fb      	ldrh	r3, [r7, #6]
 8009c54:	9302      	str	r3, [sp, #8]
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	9301      	str	r3, [sp, #4]
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	2300      	movs	r3, #0
 8009c60:	2200      	movs	r2, #0
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 fb21 	bl	800a2aa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b088      	sub	sp, #32
 8009c76:	af04      	add	r7, sp, #16
 8009c78:	60f8      	str	r0, [r7, #12]
 8009c7a:	60b9      	str	r1, [r7, #8]
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	461a      	mov	r2, r3
 8009c80:	460b      	mov	r3, r1
 8009c82:	80fb      	strh	r3, [r7, #6]
 8009c84:	4613      	mov	r3, r2
 8009c86:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c88:	7979      	ldrb	r1, [r7, #5]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	9303      	str	r3, [sp, #12]
 8009c8e:	88fb      	ldrh	r3, [r7, #6]
 8009c90:	9302      	str	r3, [sp, #8]
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	9301      	str	r3, [sp, #4]
 8009c96:	2301      	movs	r3, #1
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f000 fb03 	bl	800a2aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009ca4:	2300      	movs	r3, #0

}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b088      	sub	sp, #32
 8009cb2:	af04      	add	r7, sp, #16
 8009cb4:	60f8      	str	r0, [r7, #12]
 8009cb6:	60b9      	str	r1, [r7, #8]
 8009cb8:	4611      	mov	r1, r2
 8009cba:	461a      	mov	r2, r3
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	80fb      	strh	r3, [r7, #6]
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d001      	beq.n	8009cd2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009cd2:	7979      	ldrb	r1, [r7, #5]
 8009cd4:	7e3b      	ldrb	r3, [r7, #24]
 8009cd6:	9303      	str	r3, [sp, #12]
 8009cd8:	88fb      	ldrh	r3, [r7, #6]
 8009cda:	9302      	str	r3, [sp, #8]
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	9301      	str	r3, [sp, #4]
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f000 fade 	bl	800a2aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af04      	add	r7, sp, #16
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	4611      	mov	r1, r2
 8009d04:	461a      	mov	r2, r3
 8009d06:	460b      	mov	r3, r1
 8009d08:	80fb      	strh	r3, [r7, #6]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d0e:	7979      	ldrb	r1, [r7, #5]
 8009d10:	2300      	movs	r3, #0
 8009d12:	9303      	str	r3, [sp, #12]
 8009d14:	88fb      	ldrh	r3, [r7, #6]
 8009d16:	9302      	str	r3, [sp, #8]
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	9301      	str	r3, [sp, #4]
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	2302      	movs	r3, #2
 8009d22:	2201      	movs	r2, #1
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f000 fac0 	bl	800a2aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af04      	add	r7, sp, #16
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	4608      	mov	r0, r1
 8009d3e:	4611      	mov	r1, r2
 8009d40:	461a      	mov	r2, r3
 8009d42:	4603      	mov	r3, r0
 8009d44:	70fb      	strb	r3, [r7, #3]
 8009d46:	460b      	mov	r3, r1
 8009d48:	70bb      	strb	r3, [r7, #2]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009d4e:	7878      	ldrb	r0, [r7, #1]
 8009d50:	78ba      	ldrb	r2, [r7, #2]
 8009d52:	78f9      	ldrb	r1, [r7, #3]
 8009d54:	8b3b      	ldrh	r3, [r7, #24]
 8009d56:	9302      	str	r3, [sp, #8]
 8009d58:	7d3b      	ldrb	r3, [r7, #20]
 8009d5a:	9301      	str	r3, [sp, #4]
 8009d5c:	7c3b      	ldrb	r3, [r7, #16]
 8009d5e:	9300      	str	r3, [sp, #0]
 8009d60:	4603      	mov	r3, r0
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fa53 	bl	800a20e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b082      	sub	sp, #8
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009d7e:	78fb      	ldrb	r3, [r7, #3]
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fa72 	bl	800a26c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b084      	sub	sp, #16
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f836 	bl	8009e10 <USBH_GetFreePipe>
 8009da4:	4603      	mov	r3, r0
 8009da6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009da8:	89fb      	ldrh	r3, [r7, #14]
 8009daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d00a      	beq.n	8009dc8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009db2:	78fa      	ldrb	r2, [r7, #3]
 8009db4:	89fb      	ldrh	r3, [r7, #14]
 8009db6:	f003 030f 	and.w	r3, r3, #15
 8009dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009dbe:	6879      	ldr	r1, [r7, #4]
 8009dc0:	33e0      	adds	r3, #224	; 0xe0
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	440b      	add	r3, r1
 8009dc6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009dc8:	89fb      	ldrh	r3, [r7, #14]
 8009dca:	b2db      	uxtb	r3, r3
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	2b0f      	cmp	r3, #15
 8009de4:	d80d      	bhi.n	8009e02 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009de6:	78fb      	ldrb	r3, [r7, #3]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	33e0      	adds	r3, #224	; 0xe0
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4413      	add	r3, r2
 8009df0:	685a      	ldr	r2, [r3, #4]
 8009df2:	78fb      	ldrb	r3, [r7, #3]
 8009df4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009df8:	6879      	ldr	r1, [r7, #4]
 8009dfa:	33e0      	adds	r3, #224	; 0xe0
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	440b      	add	r3, r1
 8009e00:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73fb      	strb	r3, [r7, #15]
 8009e20:	e00f      	b.n	8009e42 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009e22:	7bfb      	ldrb	r3, [r7, #15]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	33e0      	adds	r3, #224	; 0xe0
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4413      	add	r3, r2
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d102      	bne.n	8009e3c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	e007      	b.n	8009e4c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	73fb      	strb	r3, [r7, #15]
 8009e42:	7bfb      	ldrb	r3, [r7, #15]
 8009e44:	2b0f      	cmp	r3, #15
 8009e46:	d9ec      	bls.n	8009e22 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009e48:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	490e      	ldr	r1, [pc, #56]	; (8009e98 <MX_USB_HOST_Init+0x40>)
 8009e60:	480e      	ldr	r0, [pc, #56]	; (8009e9c <MX_USB_HOST_Init+0x44>)
 8009e62:	f7fe fba7 	bl	80085b4 <USBH_Init>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009e6c:	f7f8 f92c 	bl	80020c8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009e70:	490b      	ldr	r1, [pc, #44]	; (8009ea0 <MX_USB_HOST_Init+0x48>)
 8009e72:	480a      	ldr	r0, [pc, #40]	; (8009e9c <MX_USB_HOST_Init+0x44>)
 8009e74:	f7fe fc2c 	bl	80086d0 <USBH_RegisterClass>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009e7e:	f7f8 f923 	bl	80020c8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009e82:	4806      	ldr	r0, [pc, #24]	; (8009e9c <MX_USB_HOST_Init+0x44>)
 8009e84:	f7fe fcb0 	bl	80087e8 <USBH_Start>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d001      	beq.n	8009e92 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009e8e:	f7f8 f91b 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009e92:	bf00      	nop
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	08009eb9 	.word	0x08009eb9
 8009e9c:	20000478 	.word	0x20000478
 8009ea0:	20000010 	.word	0x20000010

08009ea4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009ea8:	4802      	ldr	r0, [pc, #8]	; (8009eb4 <MX_USB_HOST_Process+0x10>)
 8009eaa:	f7fe fcad 	bl	8008808 <USBH_Process>
}
 8009eae:	bf00      	nop
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	20000478 	.word	0x20000478

08009eb8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009ec4:	78fb      	ldrb	r3, [r7, #3]
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	2b04      	cmp	r3, #4
 8009eca:	d819      	bhi.n	8009f00 <USBH_UserProcess+0x48>
 8009ecc:	a201      	add	r2, pc, #4	; (adr r2, 8009ed4 <USBH_UserProcess+0x1c>)
 8009ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed2:	bf00      	nop
 8009ed4:	08009f01 	.word	0x08009f01
 8009ed8:	08009ef1 	.word	0x08009ef1
 8009edc:	08009f01 	.word	0x08009f01
 8009ee0:	08009ef9 	.word	0x08009ef9
 8009ee4:	08009ee9 	.word	0x08009ee9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009ee8:	4b09      	ldr	r3, [pc, #36]	; (8009f10 <USBH_UserProcess+0x58>)
 8009eea:	2203      	movs	r2, #3
 8009eec:	701a      	strb	r2, [r3, #0]
  break;
 8009eee:	e008      	b.n	8009f02 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009ef0:	4b07      	ldr	r3, [pc, #28]	; (8009f10 <USBH_UserProcess+0x58>)
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	701a      	strb	r2, [r3, #0]
  break;
 8009ef6:	e004      	b.n	8009f02 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009ef8:	4b05      	ldr	r3, [pc, #20]	; (8009f10 <USBH_UserProcess+0x58>)
 8009efa:	2201      	movs	r2, #1
 8009efc:	701a      	strb	r2, [r3, #0]
  break;
 8009efe:	e000      	b.n	8009f02 <USBH_UserProcess+0x4a>

  default:
  break;
 8009f00:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009f02:	bf00      	nop
 8009f04:	370c      	adds	r7, #12
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	20000240 	.word	0x20000240

08009f14 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b08a      	sub	sp, #40	; 0x28
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f1c:	f107 0314 	add.w	r3, r7, #20
 8009f20:	2200      	movs	r2, #0
 8009f22:	601a      	str	r2, [r3, #0]
 8009f24:	605a      	str	r2, [r3, #4]
 8009f26:	609a      	str	r2, [r3, #8]
 8009f28:	60da      	str	r2, [r3, #12]
 8009f2a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f34:	d147      	bne.n	8009fc6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f36:	2300      	movs	r3, #0
 8009f38:	613b      	str	r3, [r7, #16]
 8009f3a:	4b25      	ldr	r3, [pc, #148]	; (8009fd0 <HAL_HCD_MspInit+0xbc>)
 8009f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3e:	4a24      	ldr	r2, [pc, #144]	; (8009fd0 <HAL_HCD_MspInit+0xbc>)
 8009f40:	f043 0301 	orr.w	r3, r3, #1
 8009f44:	6313      	str	r3, [r2, #48]	; 0x30
 8009f46:	4b22      	ldr	r3, [pc, #136]	; (8009fd0 <HAL_HCD_MspInit+0xbc>)
 8009f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f4a:	f003 0301 	and.w	r3, r3, #1
 8009f4e:	613b      	str	r3, [r7, #16]
 8009f50:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009f60:	f107 0314 	add.w	r3, r7, #20
 8009f64:	4619      	mov	r1, r3
 8009f66:	481b      	ldr	r0, [pc, #108]	; (8009fd4 <HAL_HCD_MspInit+0xc0>)
 8009f68:	f7f8 fdc6 	bl	8002af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009f6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f72:	2302      	movs	r3, #2
 8009f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f76:	2300      	movs	r3, #0
 8009f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f7e:	230a      	movs	r3, #10
 8009f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f82:	f107 0314 	add.w	r3, r7, #20
 8009f86:	4619      	mov	r1, r3
 8009f88:	4812      	ldr	r0, [pc, #72]	; (8009fd4 <HAL_HCD_MspInit+0xc0>)
 8009f8a:	f7f8 fdb5 	bl	8002af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f8e:	4b10      	ldr	r3, [pc, #64]	; (8009fd0 <HAL_HCD_MspInit+0xbc>)
 8009f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f92:	4a0f      	ldr	r2, [pc, #60]	; (8009fd0 <HAL_HCD_MspInit+0xbc>)
 8009f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f98:	6353      	str	r3, [r2, #52]	; 0x34
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	60fb      	str	r3, [r7, #12]
 8009f9e:	4b0c      	ldr	r3, [pc, #48]	; (8009fd0 <HAL_HCD_MspInit+0xbc>)
 8009fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa2:	4a0b      	ldr	r2, [pc, #44]	; (8009fd0 <HAL_HCD_MspInit+0xbc>)
 8009fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8009faa:	4b09      	ldr	r3, [pc, #36]	; (8009fd0 <HAL_HCD_MspInit+0xbc>)
 8009fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2100      	movs	r1, #0
 8009fba:	2043      	movs	r0, #67	; 0x43
 8009fbc:	f7f8 fd65 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009fc0:	2043      	movs	r0, #67	; 0x43
 8009fc2:	f7f8 fd7e 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009fc6:	bf00      	nop
 8009fc8:	3728      	adds	r7, #40	; 0x28
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	40023800 	.word	0x40023800
 8009fd4:	40020000 	.word	0x40020000

08009fd8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe ffed 	bl	8008fc6 <USBH_LL_IncTimer>
}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a002:	4618      	mov	r0, r3
 800a004:	f7ff f825 	bl	8009052 <USBH_LL_Connect>
}
 800a008:	bf00      	nop
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a01e:	4618      	mov	r0, r3
 800a020:	f7ff f82e 	bl	8009080 <USBH_LL_Disconnect>
}
 800a024:	bf00      	nop
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	460b      	mov	r3, r1
 800a036:	70fb      	strb	r3, [r7, #3]
 800a038:	4613      	mov	r3, r2
 800a03a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a056:	4618      	mov	r0, r3
 800a058:	f7fe ffdf 	bl	800901a <USBH_LL_PortEnabled>
}
 800a05c:	bf00      	nop
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a072:	4618      	mov	r0, r3
 800a074:	f7fe ffdf 	bl	8009036 <USBH_LL_PortDisabled>
}
 800a078:	bf00      	nop
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d12a      	bne.n	800a0e8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a092:	4a18      	ldr	r2, [pc, #96]	; (800a0f4 <USBH_LL_Init+0x74>)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a15      	ldr	r2, [pc, #84]	; (800a0f4 <USBH_LL_Init+0x74>)
 800a09e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a0a2:	4b14      	ldr	r3, [pc, #80]	; (800a0f4 <USBH_LL_Init+0x74>)
 800a0a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a0a8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a0aa:	4b12      	ldr	r3, [pc, #72]	; (800a0f4 <USBH_LL_Init+0x74>)
 800a0ac:	2208      	movs	r2, #8
 800a0ae:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a0b0:	4b10      	ldr	r3, [pc, #64]	; (800a0f4 <USBH_LL_Init+0x74>)
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a0b6:	4b0f      	ldr	r3, [pc, #60]	; (800a0f4 <USBH_LL_Init+0x74>)
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a0bc:	4b0d      	ldr	r3, [pc, #52]	; (800a0f4 <USBH_LL_Init+0x74>)
 800a0be:	2202      	movs	r2, #2
 800a0c0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a0c2:	4b0c      	ldr	r3, [pc, #48]	; (800a0f4 <USBH_LL_Init+0x74>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a0c8:	480a      	ldr	r0, [pc, #40]	; (800a0f4 <USBH_LL_Init+0x74>)
 800a0ca:	f7f8 fee3 	bl	8002e94 <HAL_HCD_Init>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a0d4:	f7f7 fff8 	bl	80020c8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a0d8:	4806      	ldr	r0, [pc, #24]	; (800a0f4 <USBH_LL_Init+0x74>)
 800a0da:	f7f9 fac6 	bl	800366a <HAL_HCD_GetCurrentFrame>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7fe ff60 	bl	8008fa8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20000850 	.word	0x20000850

0800a0f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a10e:	4618      	mov	r0, r3
 800a110:	f7f9 fa35 	bl	800357e <HAL_HCD_Start>
 800a114:	4603      	mov	r3, r0
 800a116:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a118:	7bfb      	ldrb	r3, [r7, #15]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 f95c 	bl	800a3d8 <USBH_Get_USB_Status>
 800a120:	4603      	mov	r3, r0
 800a122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a124:	7bbb      	ldrb	r3, [r7, #14]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b084      	sub	sp, #16
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a136:	2300      	movs	r3, #0
 800a138:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a13a:	2300      	movs	r3, #0
 800a13c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a144:	4618      	mov	r0, r3
 800a146:	f7f9 fa3d 	bl	80035c4 <HAL_HCD_Stop>
 800a14a:	4603      	mov	r3, r0
 800a14c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a14e:	7bfb      	ldrb	r3, [r7, #15]
 800a150:	4618      	mov	r0, r3
 800a152:	f000 f941 	bl	800a3d8 <USBH_Get_USB_Status>
 800a156:	4603      	mov	r3, r0
 800a158:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a16c:	2301      	movs	r3, #1
 800a16e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a176:	4618      	mov	r0, r3
 800a178:	f7f9 fa85 	bl	8003686 <HAL_HCD_GetCurrentSpeed>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d00c      	beq.n	800a19c <USBH_LL_GetSpeed+0x38>
 800a182:	2b02      	cmp	r3, #2
 800a184:	d80d      	bhi.n	800a1a2 <USBH_LL_GetSpeed+0x3e>
 800a186:	2b00      	cmp	r3, #0
 800a188:	d002      	beq.n	800a190 <USBH_LL_GetSpeed+0x2c>
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d003      	beq.n	800a196 <USBH_LL_GetSpeed+0x32>
 800a18e:	e008      	b.n	800a1a2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a190:	2300      	movs	r3, #0
 800a192:	73fb      	strb	r3, [r7, #15]
    break;
 800a194:	e008      	b.n	800a1a8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a196:	2301      	movs	r3, #1
 800a198:	73fb      	strb	r3, [r7, #15]
    break;
 800a19a:	e005      	b.n	800a1a8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a19c:	2302      	movs	r3, #2
 800a19e:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a0:	e002      	b.n	800a1a8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a6:	bf00      	nop
  }
  return  speed;
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b084      	sub	sp, #16
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7f9 fa18 	bl	80035fe <HAL_HCD_ResetPort>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f000 f8ff 	bl	800a3d8 <USBH_Get_USB_Status>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a1fa:	78fa      	ldrb	r2, [r7, #3]
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7f9 fa1f 	bl	8003642 <HAL_HCD_HC_GetXferCount>
 800a204:	4603      	mov	r3, r0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a20e:	b590      	push	{r4, r7, lr}
 800a210:	b089      	sub	sp, #36	; 0x24
 800a212:	af04      	add	r7, sp, #16
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	4608      	mov	r0, r1
 800a218:	4611      	mov	r1, r2
 800a21a:	461a      	mov	r2, r3
 800a21c:	4603      	mov	r3, r0
 800a21e:	70fb      	strb	r3, [r7, #3]
 800a220:	460b      	mov	r3, r1
 800a222:	70bb      	strb	r3, [r7, #2]
 800a224:	4613      	mov	r3, r2
 800a226:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a236:	787c      	ldrb	r4, [r7, #1]
 800a238:	78ba      	ldrb	r2, [r7, #2]
 800a23a:	78f9      	ldrb	r1, [r7, #3]
 800a23c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a23e:	9302      	str	r3, [sp, #8]
 800a240:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a244:	9301      	str	r3, [sp, #4]
 800a246:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	4623      	mov	r3, r4
 800a24e:	f7f8 fe83 	bl	8002f58 <HAL_HCD_HC_Init>
 800a252:	4603      	mov	r3, r0
 800a254:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a256:	7bfb      	ldrb	r3, [r7, #15]
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 f8bd 	bl	800a3d8 <USBH_Get_USB_Status>
 800a25e:	4603      	mov	r3, r0
 800a260:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a262:	7bbb      	ldrb	r3, [r7, #14]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd90      	pop	{r4, r7, pc}

0800a26c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a286:	78fa      	ldrb	r2, [r7, #3]
 800a288:	4611      	mov	r1, r2
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7f8 fef3 	bl	8003076 <HAL_HCD_HC_Halt>
 800a290:	4603      	mov	r3, r0
 800a292:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a294:	7bfb      	ldrb	r3, [r7, #15]
 800a296:	4618      	mov	r0, r3
 800a298:	f000 f89e 	bl	800a3d8 <USBH_Get_USB_Status>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a2aa:	b590      	push	{r4, r7, lr}
 800a2ac:	b089      	sub	sp, #36	; 0x24
 800a2ae:	af04      	add	r7, sp, #16
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	4608      	mov	r0, r1
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	70fb      	strb	r3, [r7, #3]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	70bb      	strb	r3, [r7, #2]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a2d2:	787c      	ldrb	r4, [r7, #1]
 800a2d4:	78ba      	ldrb	r2, [r7, #2]
 800a2d6:	78f9      	ldrb	r1, [r7, #3]
 800a2d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a2dc:	9303      	str	r3, [sp, #12]
 800a2de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a2e0:	9302      	str	r3, [sp, #8]
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	4623      	mov	r3, r4
 800a2ee:	f7f8 fee5 	bl	80030bc <HAL_HCD_HC_SubmitRequest>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 f86d 	bl	800a3d8 <USBH_Get_USB_Status>
 800a2fe:	4603      	mov	r3, r0
 800a300:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a302:	7bbb      	ldrb	r3, [r7, #14]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd90      	pop	{r4, r7, pc}

0800a30c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	460b      	mov	r3, r1
 800a316:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a31e:	78fa      	ldrb	r2, [r7, #3]
 800a320:	4611      	mov	r1, r2
 800a322:	4618      	mov	r0, r3
 800a324:	f7f9 f979 	bl	800361a <HAL_HCD_HC_GetURBState>
 800a328:	4603      	mov	r3, r0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b082      	sub	sp, #8
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	460b      	mov	r3, r1
 800a33c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a344:	2b01      	cmp	r3, #1
 800a346:	d103      	bne.n	800a350 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a348:	78fb      	ldrb	r3, [r7, #3]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 f870 	bl	800a430 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a350:	20c8      	movs	r0, #200	; 0xc8
 800a352:	f7f8 fa9b 	bl	800288c <HAL_Delay>
  return USBH_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	70fb      	strb	r3, [r7, #3]
 800a36c:	4613      	mov	r3, r2
 800a36e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a376:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a378:	78fb      	ldrb	r3, [r7, #3]
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	212c      	movs	r1, #44	; 0x2c
 800a37e:	fb01 f303 	mul.w	r3, r1, r3
 800a382:	4413      	add	r3, r2
 800a384:	333b      	adds	r3, #59	; 0x3b
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d009      	beq.n	800a3a0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a38c:	78fb      	ldrb	r3, [r7, #3]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	212c      	movs	r1, #44	; 0x2c
 800a392:	fb01 f303 	mul.w	r3, r1, r3
 800a396:	4413      	add	r3, r2
 800a398:	3354      	adds	r3, #84	; 0x54
 800a39a:	78ba      	ldrb	r2, [r7, #2]
 800a39c:	701a      	strb	r2, [r3, #0]
 800a39e:	e008      	b.n	800a3b2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a3a0:	78fb      	ldrb	r3, [r7, #3]
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	212c      	movs	r1, #44	; 0x2c
 800a3a6:	fb01 f303 	mul.w	r3, r1, r3
 800a3aa:	4413      	add	r3, r2
 800a3ac:	3355      	adds	r3, #85	; 0x55
 800a3ae:	78ba      	ldrb	r2, [r7, #2]
 800a3b0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f7f8 fa5f 	bl	800288c <HAL_Delay>
}
 800a3ce:	bf00      	nop
 800a3d0:	3708      	adds	r7, #8
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
	...

0800a3d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	4603      	mov	r3, r0
 800a3e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a3e6:	79fb      	ldrb	r3, [r7, #7]
 800a3e8:	2b03      	cmp	r3, #3
 800a3ea:	d817      	bhi.n	800a41c <USBH_Get_USB_Status+0x44>
 800a3ec:	a201      	add	r2, pc, #4	; (adr r2, 800a3f4 <USBH_Get_USB_Status+0x1c>)
 800a3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f2:	bf00      	nop
 800a3f4:	0800a405 	.word	0x0800a405
 800a3f8:	0800a40b 	.word	0x0800a40b
 800a3fc:	0800a411 	.word	0x0800a411
 800a400:	0800a417 	.word	0x0800a417
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a404:	2300      	movs	r3, #0
 800a406:	73fb      	strb	r3, [r7, #15]
    break;
 800a408:	e00b      	b.n	800a422 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a40a:	2302      	movs	r3, #2
 800a40c:	73fb      	strb	r3, [r7, #15]
    break;
 800a40e:	e008      	b.n	800a422 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a410:	2301      	movs	r3, #1
 800a412:	73fb      	strb	r3, [r7, #15]
    break;
 800a414:	e005      	b.n	800a422 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a416:	2302      	movs	r3, #2
 800a418:	73fb      	strb	r3, [r7, #15]
    break;
 800a41a:	e002      	b.n	800a422 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a41c:	2302      	movs	r3, #2
 800a41e:	73fb      	strb	r3, [r7, #15]
    break;
 800a420:	bf00      	nop
  }
  return usb_status;
 800a422:	7bfb      	ldrb	r3, [r7, #15]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	4603      	mov	r3, r0
 800a438:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a43a:	79fb      	ldrb	r3, [r7, #7]
 800a43c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a43e:	79fb      	ldrb	r3, [r7, #7]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d102      	bne.n	800a44a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a444:	2300      	movs	r3, #0
 800a446:	73fb      	strb	r3, [r7, #15]
 800a448:	e001      	b.n	800a44e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a44a:	2301      	movs	r3, #1
 800a44c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
 800a450:	461a      	mov	r2, r3
 800a452:	2101      	movs	r1, #1
 800a454:	4803      	ldr	r0, [pc, #12]	; (800a464 <MX_DriverVbusFS+0x34>)
 800a456:	f7f8 fceb 	bl	8002e30 <HAL_GPIO_WritePin>
}
 800a45a:	bf00      	nop
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	40020800 	.word	0x40020800

0800a468 <__errno>:
 800a468:	4b01      	ldr	r3, [pc, #4]	; (800a470 <__errno+0x8>)
 800a46a:	6818      	ldr	r0, [r3, #0]
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	20000030 	.word	0x20000030

0800a474 <__libc_init_array>:
 800a474:	b570      	push	{r4, r5, r6, lr}
 800a476:	4d0d      	ldr	r5, [pc, #52]	; (800a4ac <__libc_init_array+0x38>)
 800a478:	4c0d      	ldr	r4, [pc, #52]	; (800a4b0 <__libc_init_array+0x3c>)
 800a47a:	1b64      	subs	r4, r4, r5
 800a47c:	10a4      	asrs	r4, r4, #2
 800a47e:	2600      	movs	r6, #0
 800a480:	42a6      	cmp	r6, r4
 800a482:	d109      	bne.n	800a498 <__libc_init_array+0x24>
 800a484:	4d0b      	ldr	r5, [pc, #44]	; (800a4b4 <__libc_init_array+0x40>)
 800a486:	4c0c      	ldr	r4, [pc, #48]	; (800a4b8 <__libc_init_array+0x44>)
 800a488:	f002 fd56 	bl	800cf38 <_init>
 800a48c:	1b64      	subs	r4, r4, r5
 800a48e:	10a4      	asrs	r4, r4, #2
 800a490:	2600      	movs	r6, #0
 800a492:	42a6      	cmp	r6, r4
 800a494:	d105      	bne.n	800a4a2 <__libc_init_array+0x2e>
 800a496:	bd70      	pop	{r4, r5, r6, pc}
 800a498:	f855 3b04 	ldr.w	r3, [r5], #4
 800a49c:	4798      	blx	r3
 800a49e:	3601      	adds	r6, #1
 800a4a0:	e7ee      	b.n	800a480 <__libc_init_array+0xc>
 800a4a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4a6:	4798      	blx	r3
 800a4a8:	3601      	adds	r6, #1
 800a4aa:	e7f2      	b.n	800a492 <__libc_init_array+0x1e>
 800a4ac:	0800d354 	.word	0x0800d354
 800a4b0:	0800d354 	.word	0x0800d354
 800a4b4:	0800d354 	.word	0x0800d354
 800a4b8:	0800d358 	.word	0x0800d358

0800a4bc <malloc>:
 800a4bc:	4b02      	ldr	r3, [pc, #8]	; (800a4c8 <malloc+0xc>)
 800a4be:	4601      	mov	r1, r0
 800a4c0:	6818      	ldr	r0, [r3, #0]
 800a4c2:	f000 b87f 	b.w	800a5c4 <_malloc_r>
 800a4c6:	bf00      	nop
 800a4c8:	20000030 	.word	0x20000030

0800a4cc <free>:
 800a4cc:	4b02      	ldr	r3, [pc, #8]	; (800a4d8 <free+0xc>)
 800a4ce:	4601      	mov	r1, r0
 800a4d0:	6818      	ldr	r0, [r3, #0]
 800a4d2:	f000 b80b 	b.w	800a4ec <_free_r>
 800a4d6:	bf00      	nop
 800a4d8:	20000030 	.word	0x20000030

0800a4dc <memset>:
 800a4dc:	4402      	add	r2, r0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d100      	bne.n	800a4e6 <memset+0xa>
 800a4e4:	4770      	bx	lr
 800a4e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ea:	e7f9      	b.n	800a4e0 <memset+0x4>

0800a4ec <_free_r>:
 800a4ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4ee:	2900      	cmp	r1, #0
 800a4f0:	d044      	beq.n	800a57c <_free_r+0x90>
 800a4f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4f6:	9001      	str	r0, [sp, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f1a1 0404 	sub.w	r4, r1, #4
 800a4fe:	bfb8      	it	lt
 800a500:	18e4      	addlt	r4, r4, r3
 800a502:	f001 fceb 	bl	800bedc <__malloc_lock>
 800a506:	4a1e      	ldr	r2, [pc, #120]	; (800a580 <_free_r+0x94>)
 800a508:	9801      	ldr	r0, [sp, #4]
 800a50a:	6813      	ldr	r3, [r2, #0]
 800a50c:	b933      	cbnz	r3, 800a51c <_free_r+0x30>
 800a50e:	6063      	str	r3, [r4, #4]
 800a510:	6014      	str	r4, [r2, #0]
 800a512:	b003      	add	sp, #12
 800a514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a518:	f001 bce6 	b.w	800bee8 <__malloc_unlock>
 800a51c:	42a3      	cmp	r3, r4
 800a51e:	d908      	bls.n	800a532 <_free_r+0x46>
 800a520:	6825      	ldr	r5, [r4, #0]
 800a522:	1961      	adds	r1, r4, r5
 800a524:	428b      	cmp	r3, r1
 800a526:	bf01      	itttt	eq
 800a528:	6819      	ldreq	r1, [r3, #0]
 800a52a:	685b      	ldreq	r3, [r3, #4]
 800a52c:	1949      	addeq	r1, r1, r5
 800a52e:	6021      	streq	r1, [r4, #0]
 800a530:	e7ed      	b.n	800a50e <_free_r+0x22>
 800a532:	461a      	mov	r2, r3
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	b10b      	cbz	r3, 800a53c <_free_r+0x50>
 800a538:	42a3      	cmp	r3, r4
 800a53a:	d9fa      	bls.n	800a532 <_free_r+0x46>
 800a53c:	6811      	ldr	r1, [r2, #0]
 800a53e:	1855      	adds	r5, r2, r1
 800a540:	42a5      	cmp	r5, r4
 800a542:	d10b      	bne.n	800a55c <_free_r+0x70>
 800a544:	6824      	ldr	r4, [r4, #0]
 800a546:	4421      	add	r1, r4
 800a548:	1854      	adds	r4, r2, r1
 800a54a:	42a3      	cmp	r3, r4
 800a54c:	6011      	str	r1, [r2, #0]
 800a54e:	d1e0      	bne.n	800a512 <_free_r+0x26>
 800a550:	681c      	ldr	r4, [r3, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	6053      	str	r3, [r2, #4]
 800a556:	4421      	add	r1, r4
 800a558:	6011      	str	r1, [r2, #0]
 800a55a:	e7da      	b.n	800a512 <_free_r+0x26>
 800a55c:	d902      	bls.n	800a564 <_free_r+0x78>
 800a55e:	230c      	movs	r3, #12
 800a560:	6003      	str	r3, [r0, #0]
 800a562:	e7d6      	b.n	800a512 <_free_r+0x26>
 800a564:	6825      	ldr	r5, [r4, #0]
 800a566:	1961      	adds	r1, r4, r5
 800a568:	428b      	cmp	r3, r1
 800a56a:	bf04      	itt	eq
 800a56c:	6819      	ldreq	r1, [r3, #0]
 800a56e:	685b      	ldreq	r3, [r3, #4]
 800a570:	6063      	str	r3, [r4, #4]
 800a572:	bf04      	itt	eq
 800a574:	1949      	addeq	r1, r1, r5
 800a576:	6021      	streq	r1, [r4, #0]
 800a578:	6054      	str	r4, [r2, #4]
 800a57a:	e7ca      	b.n	800a512 <_free_r+0x26>
 800a57c:	b003      	add	sp, #12
 800a57e:	bd30      	pop	{r4, r5, pc}
 800a580:	20000244 	.word	0x20000244

0800a584 <sbrk_aligned>:
 800a584:	b570      	push	{r4, r5, r6, lr}
 800a586:	4e0e      	ldr	r6, [pc, #56]	; (800a5c0 <sbrk_aligned+0x3c>)
 800a588:	460c      	mov	r4, r1
 800a58a:	6831      	ldr	r1, [r6, #0]
 800a58c:	4605      	mov	r5, r0
 800a58e:	b911      	cbnz	r1, 800a596 <sbrk_aligned+0x12>
 800a590:	f000 fd0e 	bl	800afb0 <_sbrk_r>
 800a594:	6030      	str	r0, [r6, #0]
 800a596:	4621      	mov	r1, r4
 800a598:	4628      	mov	r0, r5
 800a59a:	f000 fd09 	bl	800afb0 <_sbrk_r>
 800a59e:	1c43      	adds	r3, r0, #1
 800a5a0:	d00a      	beq.n	800a5b8 <sbrk_aligned+0x34>
 800a5a2:	1cc4      	adds	r4, r0, #3
 800a5a4:	f024 0403 	bic.w	r4, r4, #3
 800a5a8:	42a0      	cmp	r0, r4
 800a5aa:	d007      	beq.n	800a5bc <sbrk_aligned+0x38>
 800a5ac:	1a21      	subs	r1, r4, r0
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	f000 fcfe 	bl	800afb0 <_sbrk_r>
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	d101      	bne.n	800a5bc <sbrk_aligned+0x38>
 800a5b8:	f04f 34ff 	mov.w	r4, #4294967295
 800a5bc:	4620      	mov	r0, r4
 800a5be:	bd70      	pop	{r4, r5, r6, pc}
 800a5c0:	20000248 	.word	0x20000248

0800a5c4 <_malloc_r>:
 800a5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c8:	1ccd      	adds	r5, r1, #3
 800a5ca:	f025 0503 	bic.w	r5, r5, #3
 800a5ce:	3508      	adds	r5, #8
 800a5d0:	2d0c      	cmp	r5, #12
 800a5d2:	bf38      	it	cc
 800a5d4:	250c      	movcc	r5, #12
 800a5d6:	2d00      	cmp	r5, #0
 800a5d8:	4607      	mov	r7, r0
 800a5da:	db01      	blt.n	800a5e0 <_malloc_r+0x1c>
 800a5dc:	42a9      	cmp	r1, r5
 800a5de:	d905      	bls.n	800a5ec <_malloc_r+0x28>
 800a5e0:	230c      	movs	r3, #12
 800a5e2:	603b      	str	r3, [r7, #0]
 800a5e4:	2600      	movs	r6, #0
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ec:	4e2e      	ldr	r6, [pc, #184]	; (800a6a8 <_malloc_r+0xe4>)
 800a5ee:	f001 fc75 	bl	800bedc <__malloc_lock>
 800a5f2:	6833      	ldr	r3, [r6, #0]
 800a5f4:	461c      	mov	r4, r3
 800a5f6:	bb34      	cbnz	r4, 800a646 <_malloc_r+0x82>
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	4638      	mov	r0, r7
 800a5fc:	f7ff ffc2 	bl	800a584 <sbrk_aligned>
 800a600:	1c43      	adds	r3, r0, #1
 800a602:	4604      	mov	r4, r0
 800a604:	d14d      	bne.n	800a6a2 <_malloc_r+0xde>
 800a606:	6834      	ldr	r4, [r6, #0]
 800a608:	4626      	mov	r6, r4
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	d140      	bne.n	800a690 <_malloc_r+0xcc>
 800a60e:	6823      	ldr	r3, [r4, #0]
 800a610:	4631      	mov	r1, r6
 800a612:	4638      	mov	r0, r7
 800a614:	eb04 0803 	add.w	r8, r4, r3
 800a618:	f000 fcca 	bl	800afb0 <_sbrk_r>
 800a61c:	4580      	cmp	r8, r0
 800a61e:	d13a      	bne.n	800a696 <_malloc_r+0xd2>
 800a620:	6821      	ldr	r1, [r4, #0]
 800a622:	3503      	adds	r5, #3
 800a624:	1a6d      	subs	r5, r5, r1
 800a626:	f025 0503 	bic.w	r5, r5, #3
 800a62a:	3508      	adds	r5, #8
 800a62c:	2d0c      	cmp	r5, #12
 800a62e:	bf38      	it	cc
 800a630:	250c      	movcc	r5, #12
 800a632:	4629      	mov	r1, r5
 800a634:	4638      	mov	r0, r7
 800a636:	f7ff ffa5 	bl	800a584 <sbrk_aligned>
 800a63a:	3001      	adds	r0, #1
 800a63c:	d02b      	beq.n	800a696 <_malloc_r+0xd2>
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	442b      	add	r3, r5
 800a642:	6023      	str	r3, [r4, #0]
 800a644:	e00e      	b.n	800a664 <_malloc_r+0xa0>
 800a646:	6822      	ldr	r2, [r4, #0]
 800a648:	1b52      	subs	r2, r2, r5
 800a64a:	d41e      	bmi.n	800a68a <_malloc_r+0xc6>
 800a64c:	2a0b      	cmp	r2, #11
 800a64e:	d916      	bls.n	800a67e <_malloc_r+0xba>
 800a650:	1961      	adds	r1, r4, r5
 800a652:	42a3      	cmp	r3, r4
 800a654:	6025      	str	r5, [r4, #0]
 800a656:	bf18      	it	ne
 800a658:	6059      	strne	r1, [r3, #4]
 800a65a:	6863      	ldr	r3, [r4, #4]
 800a65c:	bf08      	it	eq
 800a65e:	6031      	streq	r1, [r6, #0]
 800a660:	5162      	str	r2, [r4, r5]
 800a662:	604b      	str	r3, [r1, #4]
 800a664:	4638      	mov	r0, r7
 800a666:	f104 060b 	add.w	r6, r4, #11
 800a66a:	f001 fc3d 	bl	800bee8 <__malloc_unlock>
 800a66e:	f026 0607 	bic.w	r6, r6, #7
 800a672:	1d23      	adds	r3, r4, #4
 800a674:	1af2      	subs	r2, r6, r3
 800a676:	d0b6      	beq.n	800a5e6 <_malloc_r+0x22>
 800a678:	1b9b      	subs	r3, r3, r6
 800a67a:	50a3      	str	r3, [r4, r2]
 800a67c:	e7b3      	b.n	800a5e6 <_malloc_r+0x22>
 800a67e:	6862      	ldr	r2, [r4, #4]
 800a680:	42a3      	cmp	r3, r4
 800a682:	bf0c      	ite	eq
 800a684:	6032      	streq	r2, [r6, #0]
 800a686:	605a      	strne	r2, [r3, #4]
 800a688:	e7ec      	b.n	800a664 <_malloc_r+0xa0>
 800a68a:	4623      	mov	r3, r4
 800a68c:	6864      	ldr	r4, [r4, #4]
 800a68e:	e7b2      	b.n	800a5f6 <_malloc_r+0x32>
 800a690:	4634      	mov	r4, r6
 800a692:	6876      	ldr	r6, [r6, #4]
 800a694:	e7b9      	b.n	800a60a <_malloc_r+0x46>
 800a696:	230c      	movs	r3, #12
 800a698:	603b      	str	r3, [r7, #0]
 800a69a:	4638      	mov	r0, r7
 800a69c:	f001 fc24 	bl	800bee8 <__malloc_unlock>
 800a6a0:	e7a1      	b.n	800a5e6 <_malloc_r+0x22>
 800a6a2:	6025      	str	r5, [r4, #0]
 800a6a4:	e7de      	b.n	800a664 <_malloc_r+0xa0>
 800a6a6:	bf00      	nop
 800a6a8:	20000244 	.word	0x20000244

0800a6ac <__cvt>:
 800a6ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b0:	ec55 4b10 	vmov	r4, r5, d0
 800a6b4:	2d00      	cmp	r5, #0
 800a6b6:	460e      	mov	r6, r1
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	462b      	mov	r3, r5
 800a6bc:	bfbb      	ittet	lt
 800a6be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a6c2:	461d      	movlt	r5, r3
 800a6c4:	2300      	movge	r3, #0
 800a6c6:	232d      	movlt	r3, #45	; 0x2d
 800a6c8:	700b      	strb	r3, [r1, #0]
 800a6ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a6d0:	4691      	mov	r9, r2
 800a6d2:	f023 0820 	bic.w	r8, r3, #32
 800a6d6:	bfbc      	itt	lt
 800a6d8:	4622      	movlt	r2, r4
 800a6da:	4614      	movlt	r4, r2
 800a6dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a6e0:	d005      	beq.n	800a6ee <__cvt+0x42>
 800a6e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a6e6:	d100      	bne.n	800a6ea <__cvt+0x3e>
 800a6e8:	3601      	adds	r6, #1
 800a6ea:	2102      	movs	r1, #2
 800a6ec:	e000      	b.n	800a6f0 <__cvt+0x44>
 800a6ee:	2103      	movs	r1, #3
 800a6f0:	ab03      	add	r3, sp, #12
 800a6f2:	9301      	str	r3, [sp, #4]
 800a6f4:	ab02      	add	r3, sp, #8
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	ec45 4b10 	vmov	d0, r4, r5
 800a6fc:	4653      	mov	r3, sl
 800a6fe:	4632      	mov	r2, r6
 800a700:	f000 fcf2 	bl	800b0e8 <_dtoa_r>
 800a704:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a708:	4607      	mov	r7, r0
 800a70a:	d102      	bne.n	800a712 <__cvt+0x66>
 800a70c:	f019 0f01 	tst.w	r9, #1
 800a710:	d022      	beq.n	800a758 <__cvt+0xac>
 800a712:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a716:	eb07 0906 	add.w	r9, r7, r6
 800a71a:	d110      	bne.n	800a73e <__cvt+0x92>
 800a71c:	783b      	ldrb	r3, [r7, #0]
 800a71e:	2b30      	cmp	r3, #48	; 0x30
 800a720:	d10a      	bne.n	800a738 <__cvt+0x8c>
 800a722:	2200      	movs	r2, #0
 800a724:	2300      	movs	r3, #0
 800a726:	4620      	mov	r0, r4
 800a728:	4629      	mov	r1, r5
 800a72a:	f7f6 f9d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800a72e:	b918      	cbnz	r0, 800a738 <__cvt+0x8c>
 800a730:	f1c6 0601 	rsb	r6, r6, #1
 800a734:	f8ca 6000 	str.w	r6, [sl]
 800a738:	f8da 3000 	ldr.w	r3, [sl]
 800a73c:	4499      	add	r9, r3
 800a73e:	2200      	movs	r2, #0
 800a740:	2300      	movs	r3, #0
 800a742:	4620      	mov	r0, r4
 800a744:	4629      	mov	r1, r5
 800a746:	f7f6 f9c7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a74a:	b108      	cbz	r0, 800a750 <__cvt+0xa4>
 800a74c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a750:	2230      	movs	r2, #48	; 0x30
 800a752:	9b03      	ldr	r3, [sp, #12]
 800a754:	454b      	cmp	r3, r9
 800a756:	d307      	bcc.n	800a768 <__cvt+0xbc>
 800a758:	9b03      	ldr	r3, [sp, #12]
 800a75a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a75c:	1bdb      	subs	r3, r3, r7
 800a75e:	4638      	mov	r0, r7
 800a760:	6013      	str	r3, [r2, #0]
 800a762:	b004      	add	sp, #16
 800a764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a768:	1c59      	adds	r1, r3, #1
 800a76a:	9103      	str	r1, [sp, #12]
 800a76c:	701a      	strb	r2, [r3, #0]
 800a76e:	e7f0      	b.n	800a752 <__cvt+0xa6>

0800a770 <__exponent>:
 800a770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a772:	4603      	mov	r3, r0
 800a774:	2900      	cmp	r1, #0
 800a776:	bfb8      	it	lt
 800a778:	4249      	neglt	r1, r1
 800a77a:	f803 2b02 	strb.w	r2, [r3], #2
 800a77e:	bfb4      	ite	lt
 800a780:	222d      	movlt	r2, #45	; 0x2d
 800a782:	222b      	movge	r2, #43	; 0x2b
 800a784:	2909      	cmp	r1, #9
 800a786:	7042      	strb	r2, [r0, #1]
 800a788:	dd2a      	ble.n	800a7e0 <__exponent+0x70>
 800a78a:	f10d 0407 	add.w	r4, sp, #7
 800a78e:	46a4      	mov	ip, r4
 800a790:	270a      	movs	r7, #10
 800a792:	46a6      	mov	lr, r4
 800a794:	460a      	mov	r2, r1
 800a796:	fb91 f6f7 	sdiv	r6, r1, r7
 800a79a:	fb07 1516 	mls	r5, r7, r6, r1
 800a79e:	3530      	adds	r5, #48	; 0x30
 800a7a0:	2a63      	cmp	r2, #99	; 0x63
 800a7a2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a7a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a7aa:	4631      	mov	r1, r6
 800a7ac:	dcf1      	bgt.n	800a792 <__exponent+0x22>
 800a7ae:	3130      	adds	r1, #48	; 0x30
 800a7b0:	f1ae 0502 	sub.w	r5, lr, #2
 800a7b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a7b8:	1c44      	adds	r4, r0, #1
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	4561      	cmp	r1, ip
 800a7be:	d30a      	bcc.n	800a7d6 <__exponent+0x66>
 800a7c0:	f10d 0209 	add.w	r2, sp, #9
 800a7c4:	eba2 020e 	sub.w	r2, r2, lr
 800a7c8:	4565      	cmp	r5, ip
 800a7ca:	bf88      	it	hi
 800a7cc:	2200      	movhi	r2, #0
 800a7ce:	4413      	add	r3, r2
 800a7d0:	1a18      	subs	r0, r3, r0
 800a7d2:	b003      	add	sp, #12
 800a7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7da:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a7de:	e7ed      	b.n	800a7bc <__exponent+0x4c>
 800a7e0:	2330      	movs	r3, #48	; 0x30
 800a7e2:	3130      	adds	r1, #48	; 0x30
 800a7e4:	7083      	strb	r3, [r0, #2]
 800a7e6:	70c1      	strb	r1, [r0, #3]
 800a7e8:	1d03      	adds	r3, r0, #4
 800a7ea:	e7f1      	b.n	800a7d0 <__exponent+0x60>

0800a7ec <_printf_float>:
 800a7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f0:	ed2d 8b02 	vpush	{d8}
 800a7f4:	b08d      	sub	sp, #52	; 0x34
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a7fc:	4616      	mov	r6, r2
 800a7fe:	461f      	mov	r7, r3
 800a800:	4605      	mov	r5, r0
 800a802:	f001 fb55 	bl	800beb0 <_localeconv_r>
 800a806:	f8d0 a000 	ldr.w	sl, [r0]
 800a80a:	4650      	mov	r0, sl
 800a80c:	f7f5 fce8 	bl	80001e0 <strlen>
 800a810:	2300      	movs	r3, #0
 800a812:	930a      	str	r3, [sp, #40]	; 0x28
 800a814:	6823      	ldr	r3, [r4, #0]
 800a816:	9305      	str	r3, [sp, #20]
 800a818:	f8d8 3000 	ldr.w	r3, [r8]
 800a81c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a820:	3307      	adds	r3, #7
 800a822:	f023 0307 	bic.w	r3, r3, #7
 800a826:	f103 0208 	add.w	r2, r3, #8
 800a82a:	f8c8 2000 	str.w	r2, [r8]
 800a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a832:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a836:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a83a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a83e:	9307      	str	r3, [sp, #28]
 800a840:	f8cd 8018 	str.w	r8, [sp, #24]
 800a844:	ee08 0a10 	vmov	s16, r0
 800a848:	4b9f      	ldr	r3, [pc, #636]	; (800aac8 <_printf_float+0x2dc>)
 800a84a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a84e:	f04f 32ff 	mov.w	r2, #4294967295
 800a852:	f7f6 f973 	bl	8000b3c <__aeabi_dcmpun>
 800a856:	bb88      	cbnz	r0, 800a8bc <_printf_float+0xd0>
 800a858:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a85c:	4b9a      	ldr	r3, [pc, #616]	; (800aac8 <_printf_float+0x2dc>)
 800a85e:	f04f 32ff 	mov.w	r2, #4294967295
 800a862:	f7f6 f94d 	bl	8000b00 <__aeabi_dcmple>
 800a866:	bb48      	cbnz	r0, 800a8bc <_printf_float+0xd0>
 800a868:	2200      	movs	r2, #0
 800a86a:	2300      	movs	r3, #0
 800a86c:	4640      	mov	r0, r8
 800a86e:	4649      	mov	r1, r9
 800a870:	f7f6 f93c 	bl	8000aec <__aeabi_dcmplt>
 800a874:	b110      	cbz	r0, 800a87c <_printf_float+0x90>
 800a876:	232d      	movs	r3, #45	; 0x2d
 800a878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a87c:	4b93      	ldr	r3, [pc, #588]	; (800aacc <_printf_float+0x2e0>)
 800a87e:	4894      	ldr	r0, [pc, #592]	; (800aad0 <_printf_float+0x2e4>)
 800a880:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a884:	bf94      	ite	ls
 800a886:	4698      	movls	r8, r3
 800a888:	4680      	movhi	r8, r0
 800a88a:	2303      	movs	r3, #3
 800a88c:	6123      	str	r3, [r4, #16]
 800a88e:	9b05      	ldr	r3, [sp, #20]
 800a890:	f023 0204 	bic.w	r2, r3, #4
 800a894:	6022      	str	r2, [r4, #0]
 800a896:	f04f 0900 	mov.w	r9, #0
 800a89a:	9700      	str	r7, [sp, #0]
 800a89c:	4633      	mov	r3, r6
 800a89e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	f000 f9d8 	bl	800ac58 <_printf_common>
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	f040 8090 	bne.w	800a9ce <_printf_float+0x1e2>
 800a8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b2:	b00d      	add	sp, #52	; 0x34
 800a8b4:	ecbd 8b02 	vpop	{d8}
 800a8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8bc:	4642      	mov	r2, r8
 800a8be:	464b      	mov	r3, r9
 800a8c0:	4640      	mov	r0, r8
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	f7f6 f93a 	bl	8000b3c <__aeabi_dcmpun>
 800a8c8:	b140      	cbz	r0, 800a8dc <_printf_float+0xf0>
 800a8ca:	464b      	mov	r3, r9
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	bfbc      	itt	lt
 800a8d0:	232d      	movlt	r3, #45	; 0x2d
 800a8d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a8d6:	487f      	ldr	r0, [pc, #508]	; (800aad4 <_printf_float+0x2e8>)
 800a8d8:	4b7f      	ldr	r3, [pc, #508]	; (800aad8 <_printf_float+0x2ec>)
 800a8da:	e7d1      	b.n	800a880 <_printf_float+0x94>
 800a8dc:	6863      	ldr	r3, [r4, #4]
 800a8de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a8e2:	9206      	str	r2, [sp, #24]
 800a8e4:	1c5a      	adds	r2, r3, #1
 800a8e6:	d13f      	bne.n	800a968 <_printf_float+0x17c>
 800a8e8:	2306      	movs	r3, #6
 800a8ea:	6063      	str	r3, [r4, #4]
 800a8ec:	9b05      	ldr	r3, [sp, #20]
 800a8ee:	6861      	ldr	r1, [r4, #4]
 800a8f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	9303      	str	r3, [sp, #12]
 800a8f8:	ab0a      	add	r3, sp, #40	; 0x28
 800a8fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a8fe:	ab09      	add	r3, sp, #36	; 0x24
 800a900:	ec49 8b10 	vmov	d0, r8, r9
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	6022      	str	r2, [r4, #0]
 800a908:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a90c:	4628      	mov	r0, r5
 800a90e:	f7ff fecd 	bl	800a6ac <__cvt>
 800a912:	9b06      	ldr	r3, [sp, #24]
 800a914:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a916:	2b47      	cmp	r3, #71	; 0x47
 800a918:	4680      	mov	r8, r0
 800a91a:	d108      	bne.n	800a92e <_printf_float+0x142>
 800a91c:	1cc8      	adds	r0, r1, #3
 800a91e:	db02      	blt.n	800a926 <_printf_float+0x13a>
 800a920:	6863      	ldr	r3, [r4, #4]
 800a922:	4299      	cmp	r1, r3
 800a924:	dd41      	ble.n	800a9aa <_printf_float+0x1be>
 800a926:	f1ab 0b02 	sub.w	fp, fp, #2
 800a92a:	fa5f fb8b 	uxtb.w	fp, fp
 800a92e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a932:	d820      	bhi.n	800a976 <_printf_float+0x18a>
 800a934:	3901      	subs	r1, #1
 800a936:	465a      	mov	r2, fp
 800a938:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a93c:	9109      	str	r1, [sp, #36]	; 0x24
 800a93e:	f7ff ff17 	bl	800a770 <__exponent>
 800a942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a944:	1813      	adds	r3, r2, r0
 800a946:	2a01      	cmp	r2, #1
 800a948:	4681      	mov	r9, r0
 800a94a:	6123      	str	r3, [r4, #16]
 800a94c:	dc02      	bgt.n	800a954 <_printf_float+0x168>
 800a94e:	6822      	ldr	r2, [r4, #0]
 800a950:	07d2      	lsls	r2, r2, #31
 800a952:	d501      	bpl.n	800a958 <_printf_float+0x16c>
 800a954:	3301      	adds	r3, #1
 800a956:	6123      	str	r3, [r4, #16]
 800a958:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d09c      	beq.n	800a89a <_printf_float+0xae>
 800a960:	232d      	movs	r3, #45	; 0x2d
 800a962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a966:	e798      	b.n	800a89a <_printf_float+0xae>
 800a968:	9a06      	ldr	r2, [sp, #24]
 800a96a:	2a47      	cmp	r2, #71	; 0x47
 800a96c:	d1be      	bne.n	800a8ec <_printf_float+0x100>
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1bc      	bne.n	800a8ec <_printf_float+0x100>
 800a972:	2301      	movs	r3, #1
 800a974:	e7b9      	b.n	800a8ea <_printf_float+0xfe>
 800a976:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a97a:	d118      	bne.n	800a9ae <_printf_float+0x1c2>
 800a97c:	2900      	cmp	r1, #0
 800a97e:	6863      	ldr	r3, [r4, #4]
 800a980:	dd0b      	ble.n	800a99a <_printf_float+0x1ae>
 800a982:	6121      	str	r1, [r4, #16]
 800a984:	b913      	cbnz	r3, 800a98c <_printf_float+0x1a0>
 800a986:	6822      	ldr	r2, [r4, #0]
 800a988:	07d0      	lsls	r0, r2, #31
 800a98a:	d502      	bpl.n	800a992 <_printf_float+0x1a6>
 800a98c:	3301      	adds	r3, #1
 800a98e:	440b      	add	r3, r1
 800a990:	6123      	str	r3, [r4, #16]
 800a992:	65a1      	str	r1, [r4, #88]	; 0x58
 800a994:	f04f 0900 	mov.w	r9, #0
 800a998:	e7de      	b.n	800a958 <_printf_float+0x16c>
 800a99a:	b913      	cbnz	r3, 800a9a2 <_printf_float+0x1b6>
 800a99c:	6822      	ldr	r2, [r4, #0]
 800a99e:	07d2      	lsls	r2, r2, #31
 800a9a0:	d501      	bpl.n	800a9a6 <_printf_float+0x1ba>
 800a9a2:	3302      	adds	r3, #2
 800a9a4:	e7f4      	b.n	800a990 <_printf_float+0x1a4>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e7f2      	b.n	800a990 <_printf_float+0x1a4>
 800a9aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9b0:	4299      	cmp	r1, r3
 800a9b2:	db05      	blt.n	800a9c0 <_printf_float+0x1d4>
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	6121      	str	r1, [r4, #16]
 800a9b8:	07d8      	lsls	r0, r3, #31
 800a9ba:	d5ea      	bpl.n	800a992 <_printf_float+0x1a6>
 800a9bc:	1c4b      	adds	r3, r1, #1
 800a9be:	e7e7      	b.n	800a990 <_printf_float+0x1a4>
 800a9c0:	2900      	cmp	r1, #0
 800a9c2:	bfd4      	ite	le
 800a9c4:	f1c1 0202 	rsble	r2, r1, #2
 800a9c8:	2201      	movgt	r2, #1
 800a9ca:	4413      	add	r3, r2
 800a9cc:	e7e0      	b.n	800a990 <_printf_float+0x1a4>
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	055a      	lsls	r2, r3, #21
 800a9d2:	d407      	bmi.n	800a9e4 <_printf_float+0x1f8>
 800a9d4:	6923      	ldr	r3, [r4, #16]
 800a9d6:	4642      	mov	r2, r8
 800a9d8:	4631      	mov	r1, r6
 800a9da:	4628      	mov	r0, r5
 800a9dc:	47b8      	blx	r7
 800a9de:	3001      	adds	r0, #1
 800a9e0:	d12c      	bne.n	800aa3c <_printf_float+0x250>
 800a9e2:	e764      	b.n	800a8ae <_printf_float+0xc2>
 800a9e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a9e8:	f240 80e0 	bls.w	800abac <_printf_float+0x3c0>
 800a9ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f7f6 f870 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d034      	beq.n	800aa66 <_printf_float+0x27a>
 800a9fc:	4a37      	ldr	r2, [pc, #220]	; (800aadc <_printf_float+0x2f0>)
 800a9fe:	2301      	movs	r3, #1
 800aa00:	4631      	mov	r1, r6
 800aa02:	4628      	mov	r0, r5
 800aa04:	47b8      	blx	r7
 800aa06:	3001      	adds	r0, #1
 800aa08:	f43f af51 	beq.w	800a8ae <_printf_float+0xc2>
 800aa0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa10:	429a      	cmp	r2, r3
 800aa12:	db02      	blt.n	800aa1a <_printf_float+0x22e>
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	07d8      	lsls	r0, r3, #31
 800aa18:	d510      	bpl.n	800aa3c <_printf_float+0x250>
 800aa1a:	ee18 3a10 	vmov	r3, s16
 800aa1e:	4652      	mov	r2, sl
 800aa20:	4631      	mov	r1, r6
 800aa22:	4628      	mov	r0, r5
 800aa24:	47b8      	blx	r7
 800aa26:	3001      	adds	r0, #1
 800aa28:	f43f af41 	beq.w	800a8ae <_printf_float+0xc2>
 800aa2c:	f04f 0800 	mov.w	r8, #0
 800aa30:	f104 091a 	add.w	r9, r4, #26
 800aa34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa36:	3b01      	subs	r3, #1
 800aa38:	4543      	cmp	r3, r8
 800aa3a:	dc09      	bgt.n	800aa50 <_printf_float+0x264>
 800aa3c:	6823      	ldr	r3, [r4, #0]
 800aa3e:	079b      	lsls	r3, r3, #30
 800aa40:	f100 8105 	bmi.w	800ac4e <_printf_float+0x462>
 800aa44:	68e0      	ldr	r0, [r4, #12]
 800aa46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa48:	4298      	cmp	r0, r3
 800aa4a:	bfb8      	it	lt
 800aa4c:	4618      	movlt	r0, r3
 800aa4e:	e730      	b.n	800a8b2 <_printf_float+0xc6>
 800aa50:	2301      	movs	r3, #1
 800aa52:	464a      	mov	r2, r9
 800aa54:	4631      	mov	r1, r6
 800aa56:	4628      	mov	r0, r5
 800aa58:	47b8      	blx	r7
 800aa5a:	3001      	adds	r0, #1
 800aa5c:	f43f af27 	beq.w	800a8ae <_printf_float+0xc2>
 800aa60:	f108 0801 	add.w	r8, r8, #1
 800aa64:	e7e6      	b.n	800aa34 <_printf_float+0x248>
 800aa66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	dc39      	bgt.n	800aae0 <_printf_float+0x2f4>
 800aa6c:	4a1b      	ldr	r2, [pc, #108]	; (800aadc <_printf_float+0x2f0>)
 800aa6e:	2301      	movs	r3, #1
 800aa70:	4631      	mov	r1, r6
 800aa72:	4628      	mov	r0, r5
 800aa74:	47b8      	blx	r7
 800aa76:	3001      	adds	r0, #1
 800aa78:	f43f af19 	beq.w	800a8ae <_printf_float+0xc2>
 800aa7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa80:	4313      	orrs	r3, r2
 800aa82:	d102      	bne.n	800aa8a <_printf_float+0x29e>
 800aa84:	6823      	ldr	r3, [r4, #0]
 800aa86:	07d9      	lsls	r1, r3, #31
 800aa88:	d5d8      	bpl.n	800aa3c <_printf_float+0x250>
 800aa8a:	ee18 3a10 	vmov	r3, s16
 800aa8e:	4652      	mov	r2, sl
 800aa90:	4631      	mov	r1, r6
 800aa92:	4628      	mov	r0, r5
 800aa94:	47b8      	blx	r7
 800aa96:	3001      	adds	r0, #1
 800aa98:	f43f af09 	beq.w	800a8ae <_printf_float+0xc2>
 800aa9c:	f04f 0900 	mov.w	r9, #0
 800aaa0:	f104 0a1a 	add.w	sl, r4, #26
 800aaa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaa6:	425b      	negs	r3, r3
 800aaa8:	454b      	cmp	r3, r9
 800aaaa:	dc01      	bgt.n	800aab0 <_printf_float+0x2c4>
 800aaac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaae:	e792      	b.n	800a9d6 <_printf_float+0x1ea>
 800aab0:	2301      	movs	r3, #1
 800aab2:	4652      	mov	r2, sl
 800aab4:	4631      	mov	r1, r6
 800aab6:	4628      	mov	r0, r5
 800aab8:	47b8      	blx	r7
 800aaba:	3001      	adds	r0, #1
 800aabc:	f43f aef7 	beq.w	800a8ae <_printf_float+0xc2>
 800aac0:	f109 0901 	add.w	r9, r9, #1
 800aac4:	e7ee      	b.n	800aaa4 <_printf_float+0x2b8>
 800aac6:	bf00      	nop
 800aac8:	7fefffff 	.word	0x7fefffff
 800aacc:	0800cf78 	.word	0x0800cf78
 800aad0:	0800cf7c 	.word	0x0800cf7c
 800aad4:	0800cf84 	.word	0x0800cf84
 800aad8:	0800cf80 	.word	0x0800cf80
 800aadc:	0800cf88 	.word	0x0800cf88
 800aae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aae2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aae4:	429a      	cmp	r2, r3
 800aae6:	bfa8      	it	ge
 800aae8:	461a      	movge	r2, r3
 800aaea:	2a00      	cmp	r2, #0
 800aaec:	4691      	mov	r9, r2
 800aaee:	dc37      	bgt.n	800ab60 <_printf_float+0x374>
 800aaf0:	f04f 0b00 	mov.w	fp, #0
 800aaf4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aaf8:	f104 021a 	add.w	r2, r4, #26
 800aafc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aafe:	9305      	str	r3, [sp, #20]
 800ab00:	eba3 0309 	sub.w	r3, r3, r9
 800ab04:	455b      	cmp	r3, fp
 800ab06:	dc33      	bgt.n	800ab70 <_printf_float+0x384>
 800ab08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	db3b      	blt.n	800ab88 <_printf_float+0x39c>
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	07da      	lsls	r2, r3, #31
 800ab14:	d438      	bmi.n	800ab88 <_printf_float+0x39c>
 800ab16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab18:	9a05      	ldr	r2, [sp, #20]
 800ab1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab1c:	1a9a      	subs	r2, r3, r2
 800ab1e:	eba3 0901 	sub.w	r9, r3, r1
 800ab22:	4591      	cmp	r9, r2
 800ab24:	bfa8      	it	ge
 800ab26:	4691      	movge	r9, r2
 800ab28:	f1b9 0f00 	cmp.w	r9, #0
 800ab2c:	dc35      	bgt.n	800ab9a <_printf_float+0x3ae>
 800ab2e:	f04f 0800 	mov.w	r8, #0
 800ab32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab36:	f104 0a1a 	add.w	sl, r4, #26
 800ab3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab3e:	1a9b      	subs	r3, r3, r2
 800ab40:	eba3 0309 	sub.w	r3, r3, r9
 800ab44:	4543      	cmp	r3, r8
 800ab46:	f77f af79 	ble.w	800aa3c <_printf_float+0x250>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	4652      	mov	r2, sl
 800ab4e:	4631      	mov	r1, r6
 800ab50:	4628      	mov	r0, r5
 800ab52:	47b8      	blx	r7
 800ab54:	3001      	adds	r0, #1
 800ab56:	f43f aeaa 	beq.w	800a8ae <_printf_float+0xc2>
 800ab5a:	f108 0801 	add.w	r8, r8, #1
 800ab5e:	e7ec      	b.n	800ab3a <_printf_float+0x34e>
 800ab60:	4613      	mov	r3, r2
 800ab62:	4631      	mov	r1, r6
 800ab64:	4642      	mov	r2, r8
 800ab66:	4628      	mov	r0, r5
 800ab68:	47b8      	blx	r7
 800ab6a:	3001      	adds	r0, #1
 800ab6c:	d1c0      	bne.n	800aaf0 <_printf_float+0x304>
 800ab6e:	e69e      	b.n	800a8ae <_printf_float+0xc2>
 800ab70:	2301      	movs	r3, #1
 800ab72:	4631      	mov	r1, r6
 800ab74:	4628      	mov	r0, r5
 800ab76:	9205      	str	r2, [sp, #20]
 800ab78:	47b8      	blx	r7
 800ab7a:	3001      	adds	r0, #1
 800ab7c:	f43f ae97 	beq.w	800a8ae <_printf_float+0xc2>
 800ab80:	9a05      	ldr	r2, [sp, #20]
 800ab82:	f10b 0b01 	add.w	fp, fp, #1
 800ab86:	e7b9      	b.n	800aafc <_printf_float+0x310>
 800ab88:	ee18 3a10 	vmov	r3, s16
 800ab8c:	4652      	mov	r2, sl
 800ab8e:	4631      	mov	r1, r6
 800ab90:	4628      	mov	r0, r5
 800ab92:	47b8      	blx	r7
 800ab94:	3001      	adds	r0, #1
 800ab96:	d1be      	bne.n	800ab16 <_printf_float+0x32a>
 800ab98:	e689      	b.n	800a8ae <_printf_float+0xc2>
 800ab9a:	9a05      	ldr	r2, [sp, #20]
 800ab9c:	464b      	mov	r3, r9
 800ab9e:	4442      	add	r2, r8
 800aba0:	4631      	mov	r1, r6
 800aba2:	4628      	mov	r0, r5
 800aba4:	47b8      	blx	r7
 800aba6:	3001      	adds	r0, #1
 800aba8:	d1c1      	bne.n	800ab2e <_printf_float+0x342>
 800abaa:	e680      	b.n	800a8ae <_printf_float+0xc2>
 800abac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abae:	2a01      	cmp	r2, #1
 800abb0:	dc01      	bgt.n	800abb6 <_printf_float+0x3ca>
 800abb2:	07db      	lsls	r3, r3, #31
 800abb4:	d538      	bpl.n	800ac28 <_printf_float+0x43c>
 800abb6:	2301      	movs	r3, #1
 800abb8:	4642      	mov	r2, r8
 800abba:	4631      	mov	r1, r6
 800abbc:	4628      	mov	r0, r5
 800abbe:	47b8      	blx	r7
 800abc0:	3001      	adds	r0, #1
 800abc2:	f43f ae74 	beq.w	800a8ae <_printf_float+0xc2>
 800abc6:	ee18 3a10 	vmov	r3, s16
 800abca:	4652      	mov	r2, sl
 800abcc:	4631      	mov	r1, r6
 800abce:	4628      	mov	r0, r5
 800abd0:	47b8      	blx	r7
 800abd2:	3001      	adds	r0, #1
 800abd4:	f43f ae6b 	beq.w	800a8ae <_printf_float+0xc2>
 800abd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abdc:	2200      	movs	r2, #0
 800abde:	2300      	movs	r3, #0
 800abe0:	f7f5 ff7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800abe4:	b9d8      	cbnz	r0, 800ac1e <_printf_float+0x432>
 800abe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abe8:	f108 0201 	add.w	r2, r8, #1
 800abec:	3b01      	subs	r3, #1
 800abee:	4631      	mov	r1, r6
 800abf0:	4628      	mov	r0, r5
 800abf2:	47b8      	blx	r7
 800abf4:	3001      	adds	r0, #1
 800abf6:	d10e      	bne.n	800ac16 <_printf_float+0x42a>
 800abf8:	e659      	b.n	800a8ae <_printf_float+0xc2>
 800abfa:	2301      	movs	r3, #1
 800abfc:	4652      	mov	r2, sl
 800abfe:	4631      	mov	r1, r6
 800ac00:	4628      	mov	r0, r5
 800ac02:	47b8      	blx	r7
 800ac04:	3001      	adds	r0, #1
 800ac06:	f43f ae52 	beq.w	800a8ae <_printf_float+0xc2>
 800ac0a:	f108 0801 	add.w	r8, r8, #1
 800ac0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac10:	3b01      	subs	r3, #1
 800ac12:	4543      	cmp	r3, r8
 800ac14:	dcf1      	bgt.n	800abfa <_printf_float+0x40e>
 800ac16:	464b      	mov	r3, r9
 800ac18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac1c:	e6dc      	b.n	800a9d8 <_printf_float+0x1ec>
 800ac1e:	f04f 0800 	mov.w	r8, #0
 800ac22:	f104 0a1a 	add.w	sl, r4, #26
 800ac26:	e7f2      	b.n	800ac0e <_printf_float+0x422>
 800ac28:	2301      	movs	r3, #1
 800ac2a:	4642      	mov	r2, r8
 800ac2c:	e7df      	b.n	800abee <_printf_float+0x402>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	464a      	mov	r2, r9
 800ac32:	4631      	mov	r1, r6
 800ac34:	4628      	mov	r0, r5
 800ac36:	47b8      	blx	r7
 800ac38:	3001      	adds	r0, #1
 800ac3a:	f43f ae38 	beq.w	800a8ae <_printf_float+0xc2>
 800ac3e:	f108 0801 	add.w	r8, r8, #1
 800ac42:	68e3      	ldr	r3, [r4, #12]
 800ac44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac46:	1a5b      	subs	r3, r3, r1
 800ac48:	4543      	cmp	r3, r8
 800ac4a:	dcf0      	bgt.n	800ac2e <_printf_float+0x442>
 800ac4c:	e6fa      	b.n	800aa44 <_printf_float+0x258>
 800ac4e:	f04f 0800 	mov.w	r8, #0
 800ac52:	f104 0919 	add.w	r9, r4, #25
 800ac56:	e7f4      	b.n	800ac42 <_printf_float+0x456>

0800ac58 <_printf_common>:
 800ac58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac5c:	4616      	mov	r6, r2
 800ac5e:	4699      	mov	r9, r3
 800ac60:	688a      	ldr	r2, [r1, #8]
 800ac62:	690b      	ldr	r3, [r1, #16]
 800ac64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	bfb8      	it	lt
 800ac6c:	4613      	movlt	r3, r2
 800ac6e:	6033      	str	r3, [r6, #0]
 800ac70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac74:	4607      	mov	r7, r0
 800ac76:	460c      	mov	r4, r1
 800ac78:	b10a      	cbz	r2, 800ac7e <_printf_common+0x26>
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	6033      	str	r3, [r6, #0]
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	0699      	lsls	r1, r3, #26
 800ac82:	bf42      	ittt	mi
 800ac84:	6833      	ldrmi	r3, [r6, #0]
 800ac86:	3302      	addmi	r3, #2
 800ac88:	6033      	strmi	r3, [r6, #0]
 800ac8a:	6825      	ldr	r5, [r4, #0]
 800ac8c:	f015 0506 	ands.w	r5, r5, #6
 800ac90:	d106      	bne.n	800aca0 <_printf_common+0x48>
 800ac92:	f104 0a19 	add.w	sl, r4, #25
 800ac96:	68e3      	ldr	r3, [r4, #12]
 800ac98:	6832      	ldr	r2, [r6, #0]
 800ac9a:	1a9b      	subs	r3, r3, r2
 800ac9c:	42ab      	cmp	r3, r5
 800ac9e:	dc26      	bgt.n	800acee <_printf_common+0x96>
 800aca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aca4:	1e13      	subs	r3, r2, #0
 800aca6:	6822      	ldr	r2, [r4, #0]
 800aca8:	bf18      	it	ne
 800acaa:	2301      	movne	r3, #1
 800acac:	0692      	lsls	r2, r2, #26
 800acae:	d42b      	bmi.n	800ad08 <_printf_common+0xb0>
 800acb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acb4:	4649      	mov	r1, r9
 800acb6:	4638      	mov	r0, r7
 800acb8:	47c0      	blx	r8
 800acba:	3001      	adds	r0, #1
 800acbc:	d01e      	beq.n	800acfc <_printf_common+0xa4>
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	68e5      	ldr	r5, [r4, #12]
 800acc2:	6832      	ldr	r2, [r6, #0]
 800acc4:	f003 0306 	and.w	r3, r3, #6
 800acc8:	2b04      	cmp	r3, #4
 800acca:	bf08      	it	eq
 800accc:	1aad      	subeq	r5, r5, r2
 800acce:	68a3      	ldr	r3, [r4, #8]
 800acd0:	6922      	ldr	r2, [r4, #16]
 800acd2:	bf0c      	ite	eq
 800acd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acd8:	2500      	movne	r5, #0
 800acda:	4293      	cmp	r3, r2
 800acdc:	bfc4      	itt	gt
 800acde:	1a9b      	subgt	r3, r3, r2
 800ace0:	18ed      	addgt	r5, r5, r3
 800ace2:	2600      	movs	r6, #0
 800ace4:	341a      	adds	r4, #26
 800ace6:	42b5      	cmp	r5, r6
 800ace8:	d11a      	bne.n	800ad20 <_printf_common+0xc8>
 800acea:	2000      	movs	r0, #0
 800acec:	e008      	b.n	800ad00 <_printf_common+0xa8>
 800acee:	2301      	movs	r3, #1
 800acf0:	4652      	mov	r2, sl
 800acf2:	4649      	mov	r1, r9
 800acf4:	4638      	mov	r0, r7
 800acf6:	47c0      	blx	r8
 800acf8:	3001      	adds	r0, #1
 800acfa:	d103      	bne.n	800ad04 <_printf_common+0xac>
 800acfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ad00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad04:	3501      	adds	r5, #1
 800ad06:	e7c6      	b.n	800ac96 <_printf_common+0x3e>
 800ad08:	18e1      	adds	r1, r4, r3
 800ad0a:	1c5a      	adds	r2, r3, #1
 800ad0c:	2030      	movs	r0, #48	; 0x30
 800ad0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad12:	4422      	add	r2, r4
 800ad14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad1c:	3302      	adds	r3, #2
 800ad1e:	e7c7      	b.n	800acb0 <_printf_common+0x58>
 800ad20:	2301      	movs	r3, #1
 800ad22:	4622      	mov	r2, r4
 800ad24:	4649      	mov	r1, r9
 800ad26:	4638      	mov	r0, r7
 800ad28:	47c0      	blx	r8
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	d0e6      	beq.n	800acfc <_printf_common+0xa4>
 800ad2e:	3601      	adds	r6, #1
 800ad30:	e7d9      	b.n	800ace6 <_printf_common+0x8e>
	...

0800ad34 <_printf_i>:
 800ad34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad38:	7e0f      	ldrb	r7, [r1, #24]
 800ad3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad3c:	2f78      	cmp	r7, #120	; 0x78
 800ad3e:	4691      	mov	r9, r2
 800ad40:	4680      	mov	r8, r0
 800ad42:	460c      	mov	r4, r1
 800ad44:	469a      	mov	sl, r3
 800ad46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad4a:	d807      	bhi.n	800ad5c <_printf_i+0x28>
 800ad4c:	2f62      	cmp	r7, #98	; 0x62
 800ad4e:	d80a      	bhi.n	800ad66 <_printf_i+0x32>
 800ad50:	2f00      	cmp	r7, #0
 800ad52:	f000 80d8 	beq.w	800af06 <_printf_i+0x1d2>
 800ad56:	2f58      	cmp	r7, #88	; 0x58
 800ad58:	f000 80a3 	beq.w	800aea2 <_printf_i+0x16e>
 800ad5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad64:	e03a      	b.n	800addc <_printf_i+0xa8>
 800ad66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad6a:	2b15      	cmp	r3, #21
 800ad6c:	d8f6      	bhi.n	800ad5c <_printf_i+0x28>
 800ad6e:	a101      	add	r1, pc, #4	; (adr r1, 800ad74 <_printf_i+0x40>)
 800ad70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad74:	0800adcd 	.word	0x0800adcd
 800ad78:	0800ade1 	.word	0x0800ade1
 800ad7c:	0800ad5d 	.word	0x0800ad5d
 800ad80:	0800ad5d 	.word	0x0800ad5d
 800ad84:	0800ad5d 	.word	0x0800ad5d
 800ad88:	0800ad5d 	.word	0x0800ad5d
 800ad8c:	0800ade1 	.word	0x0800ade1
 800ad90:	0800ad5d 	.word	0x0800ad5d
 800ad94:	0800ad5d 	.word	0x0800ad5d
 800ad98:	0800ad5d 	.word	0x0800ad5d
 800ad9c:	0800ad5d 	.word	0x0800ad5d
 800ada0:	0800aeed 	.word	0x0800aeed
 800ada4:	0800ae11 	.word	0x0800ae11
 800ada8:	0800aecf 	.word	0x0800aecf
 800adac:	0800ad5d 	.word	0x0800ad5d
 800adb0:	0800ad5d 	.word	0x0800ad5d
 800adb4:	0800af0f 	.word	0x0800af0f
 800adb8:	0800ad5d 	.word	0x0800ad5d
 800adbc:	0800ae11 	.word	0x0800ae11
 800adc0:	0800ad5d 	.word	0x0800ad5d
 800adc4:	0800ad5d 	.word	0x0800ad5d
 800adc8:	0800aed7 	.word	0x0800aed7
 800adcc:	682b      	ldr	r3, [r5, #0]
 800adce:	1d1a      	adds	r2, r3, #4
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	602a      	str	r2, [r5, #0]
 800add4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800add8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800addc:	2301      	movs	r3, #1
 800adde:	e0a3      	b.n	800af28 <_printf_i+0x1f4>
 800ade0:	6820      	ldr	r0, [r4, #0]
 800ade2:	6829      	ldr	r1, [r5, #0]
 800ade4:	0606      	lsls	r6, r0, #24
 800ade6:	f101 0304 	add.w	r3, r1, #4
 800adea:	d50a      	bpl.n	800ae02 <_printf_i+0xce>
 800adec:	680e      	ldr	r6, [r1, #0]
 800adee:	602b      	str	r3, [r5, #0]
 800adf0:	2e00      	cmp	r6, #0
 800adf2:	da03      	bge.n	800adfc <_printf_i+0xc8>
 800adf4:	232d      	movs	r3, #45	; 0x2d
 800adf6:	4276      	negs	r6, r6
 800adf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adfc:	485e      	ldr	r0, [pc, #376]	; (800af78 <_printf_i+0x244>)
 800adfe:	230a      	movs	r3, #10
 800ae00:	e019      	b.n	800ae36 <_printf_i+0x102>
 800ae02:	680e      	ldr	r6, [r1, #0]
 800ae04:	602b      	str	r3, [r5, #0]
 800ae06:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae0a:	bf18      	it	ne
 800ae0c:	b236      	sxthne	r6, r6
 800ae0e:	e7ef      	b.n	800adf0 <_printf_i+0xbc>
 800ae10:	682b      	ldr	r3, [r5, #0]
 800ae12:	6820      	ldr	r0, [r4, #0]
 800ae14:	1d19      	adds	r1, r3, #4
 800ae16:	6029      	str	r1, [r5, #0]
 800ae18:	0601      	lsls	r1, r0, #24
 800ae1a:	d501      	bpl.n	800ae20 <_printf_i+0xec>
 800ae1c:	681e      	ldr	r6, [r3, #0]
 800ae1e:	e002      	b.n	800ae26 <_printf_i+0xf2>
 800ae20:	0646      	lsls	r6, r0, #25
 800ae22:	d5fb      	bpl.n	800ae1c <_printf_i+0xe8>
 800ae24:	881e      	ldrh	r6, [r3, #0]
 800ae26:	4854      	ldr	r0, [pc, #336]	; (800af78 <_printf_i+0x244>)
 800ae28:	2f6f      	cmp	r7, #111	; 0x6f
 800ae2a:	bf0c      	ite	eq
 800ae2c:	2308      	moveq	r3, #8
 800ae2e:	230a      	movne	r3, #10
 800ae30:	2100      	movs	r1, #0
 800ae32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae36:	6865      	ldr	r5, [r4, #4]
 800ae38:	60a5      	str	r5, [r4, #8]
 800ae3a:	2d00      	cmp	r5, #0
 800ae3c:	bfa2      	ittt	ge
 800ae3e:	6821      	ldrge	r1, [r4, #0]
 800ae40:	f021 0104 	bicge.w	r1, r1, #4
 800ae44:	6021      	strge	r1, [r4, #0]
 800ae46:	b90e      	cbnz	r6, 800ae4c <_printf_i+0x118>
 800ae48:	2d00      	cmp	r5, #0
 800ae4a:	d04d      	beq.n	800aee8 <_printf_i+0x1b4>
 800ae4c:	4615      	mov	r5, r2
 800ae4e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae52:	fb03 6711 	mls	r7, r3, r1, r6
 800ae56:	5dc7      	ldrb	r7, [r0, r7]
 800ae58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae5c:	4637      	mov	r7, r6
 800ae5e:	42bb      	cmp	r3, r7
 800ae60:	460e      	mov	r6, r1
 800ae62:	d9f4      	bls.n	800ae4e <_printf_i+0x11a>
 800ae64:	2b08      	cmp	r3, #8
 800ae66:	d10b      	bne.n	800ae80 <_printf_i+0x14c>
 800ae68:	6823      	ldr	r3, [r4, #0]
 800ae6a:	07de      	lsls	r6, r3, #31
 800ae6c:	d508      	bpl.n	800ae80 <_printf_i+0x14c>
 800ae6e:	6923      	ldr	r3, [r4, #16]
 800ae70:	6861      	ldr	r1, [r4, #4]
 800ae72:	4299      	cmp	r1, r3
 800ae74:	bfde      	ittt	le
 800ae76:	2330      	movle	r3, #48	; 0x30
 800ae78:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae80:	1b52      	subs	r2, r2, r5
 800ae82:	6122      	str	r2, [r4, #16]
 800ae84:	f8cd a000 	str.w	sl, [sp]
 800ae88:	464b      	mov	r3, r9
 800ae8a:	aa03      	add	r2, sp, #12
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	4640      	mov	r0, r8
 800ae90:	f7ff fee2 	bl	800ac58 <_printf_common>
 800ae94:	3001      	adds	r0, #1
 800ae96:	d14c      	bne.n	800af32 <_printf_i+0x1fe>
 800ae98:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9c:	b004      	add	sp, #16
 800ae9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aea2:	4835      	ldr	r0, [pc, #212]	; (800af78 <_printf_i+0x244>)
 800aea4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aea8:	6829      	ldr	r1, [r5, #0]
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	f851 6b04 	ldr.w	r6, [r1], #4
 800aeb0:	6029      	str	r1, [r5, #0]
 800aeb2:	061d      	lsls	r5, r3, #24
 800aeb4:	d514      	bpl.n	800aee0 <_printf_i+0x1ac>
 800aeb6:	07df      	lsls	r7, r3, #31
 800aeb8:	bf44      	itt	mi
 800aeba:	f043 0320 	orrmi.w	r3, r3, #32
 800aebe:	6023      	strmi	r3, [r4, #0]
 800aec0:	b91e      	cbnz	r6, 800aeca <_printf_i+0x196>
 800aec2:	6823      	ldr	r3, [r4, #0]
 800aec4:	f023 0320 	bic.w	r3, r3, #32
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	2310      	movs	r3, #16
 800aecc:	e7b0      	b.n	800ae30 <_printf_i+0xfc>
 800aece:	6823      	ldr	r3, [r4, #0]
 800aed0:	f043 0320 	orr.w	r3, r3, #32
 800aed4:	6023      	str	r3, [r4, #0]
 800aed6:	2378      	movs	r3, #120	; 0x78
 800aed8:	4828      	ldr	r0, [pc, #160]	; (800af7c <_printf_i+0x248>)
 800aeda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aede:	e7e3      	b.n	800aea8 <_printf_i+0x174>
 800aee0:	0659      	lsls	r1, r3, #25
 800aee2:	bf48      	it	mi
 800aee4:	b2b6      	uxthmi	r6, r6
 800aee6:	e7e6      	b.n	800aeb6 <_printf_i+0x182>
 800aee8:	4615      	mov	r5, r2
 800aeea:	e7bb      	b.n	800ae64 <_printf_i+0x130>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	6826      	ldr	r6, [r4, #0]
 800aef0:	6961      	ldr	r1, [r4, #20]
 800aef2:	1d18      	adds	r0, r3, #4
 800aef4:	6028      	str	r0, [r5, #0]
 800aef6:	0635      	lsls	r5, r6, #24
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	d501      	bpl.n	800af00 <_printf_i+0x1cc>
 800aefc:	6019      	str	r1, [r3, #0]
 800aefe:	e002      	b.n	800af06 <_printf_i+0x1d2>
 800af00:	0670      	lsls	r0, r6, #25
 800af02:	d5fb      	bpl.n	800aefc <_printf_i+0x1c8>
 800af04:	8019      	strh	r1, [r3, #0]
 800af06:	2300      	movs	r3, #0
 800af08:	6123      	str	r3, [r4, #16]
 800af0a:	4615      	mov	r5, r2
 800af0c:	e7ba      	b.n	800ae84 <_printf_i+0x150>
 800af0e:	682b      	ldr	r3, [r5, #0]
 800af10:	1d1a      	adds	r2, r3, #4
 800af12:	602a      	str	r2, [r5, #0]
 800af14:	681d      	ldr	r5, [r3, #0]
 800af16:	6862      	ldr	r2, [r4, #4]
 800af18:	2100      	movs	r1, #0
 800af1a:	4628      	mov	r0, r5
 800af1c:	f7f5 f968 	bl	80001f0 <memchr>
 800af20:	b108      	cbz	r0, 800af26 <_printf_i+0x1f2>
 800af22:	1b40      	subs	r0, r0, r5
 800af24:	6060      	str	r0, [r4, #4]
 800af26:	6863      	ldr	r3, [r4, #4]
 800af28:	6123      	str	r3, [r4, #16]
 800af2a:	2300      	movs	r3, #0
 800af2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af30:	e7a8      	b.n	800ae84 <_printf_i+0x150>
 800af32:	6923      	ldr	r3, [r4, #16]
 800af34:	462a      	mov	r2, r5
 800af36:	4649      	mov	r1, r9
 800af38:	4640      	mov	r0, r8
 800af3a:	47d0      	blx	sl
 800af3c:	3001      	adds	r0, #1
 800af3e:	d0ab      	beq.n	800ae98 <_printf_i+0x164>
 800af40:	6823      	ldr	r3, [r4, #0]
 800af42:	079b      	lsls	r3, r3, #30
 800af44:	d413      	bmi.n	800af6e <_printf_i+0x23a>
 800af46:	68e0      	ldr	r0, [r4, #12]
 800af48:	9b03      	ldr	r3, [sp, #12]
 800af4a:	4298      	cmp	r0, r3
 800af4c:	bfb8      	it	lt
 800af4e:	4618      	movlt	r0, r3
 800af50:	e7a4      	b.n	800ae9c <_printf_i+0x168>
 800af52:	2301      	movs	r3, #1
 800af54:	4632      	mov	r2, r6
 800af56:	4649      	mov	r1, r9
 800af58:	4640      	mov	r0, r8
 800af5a:	47d0      	blx	sl
 800af5c:	3001      	adds	r0, #1
 800af5e:	d09b      	beq.n	800ae98 <_printf_i+0x164>
 800af60:	3501      	adds	r5, #1
 800af62:	68e3      	ldr	r3, [r4, #12]
 800af64:	9903      	ldr	r1, [sp, #12]
 800af66:	1a5b      	subs	r3, r3, r1
 800af68:	42ab      	cmp	r3, r5
 800af6a:	dcf2      	bgt.n	800af52 <_printf_i+0x21e>
 800af6c:	e7eb      	b.n	800af46 <_printf_i+0x212>
 800af6e:	2500      	movs	r5, #0
 800af70:	f104 0619 	add.w	r6, r4, #25
 800af74:	e7f5      	b.n	800af62 <_printf_i+0x22e>
 800af76:	bf00      	nop
 800af78:	0800cf8a 	.word	0x0800cf8a
 800af7c:	0800cf9b 	.word	0x0800cf9b

0800af80 <iprintf>:
 800af80:	b40f      	push	{r0, r1, r2, r3}
 800af82:	4b0a      	ldr	r3, [pc, #40]	; (800afac <iprintf+0x2c>)
 800af84:	b513      	push	{r0, r1, r4, lr}
 800af86:	681c      	ldr	r4, [r3, #0]
 800af88:	b124      	cbz	r4, 800af94 <iprintf+0x14>
 800af8a:	69a3      	ldr	r3, [r4, #24]
 800af8c:	b913      	cbnz	r3, 800af94 <iprintf+0x14>
 800af8e:	4620      	mov	r0, r4
 800af90:	f000 fef0 	bl	800bd74 <__sinit>
 800af94:	ab05      	add	r3, sp, #20
 800af96:	9a04      	ldr	r2, [sp, #16]
 800af98:	68a1      	ldr	r1, [r4, #8]
 800af9a:	9301      	str	r3, [sp, #4]
 800af9c:	4620      	mov	r0, r4
 800af9e:	f001 fb6d 	bl	800c67c <_vfiprintf_r>
 800afa2:	b002      	add	sp, #8
 800afa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afa8:	b004      	add	sp, #16
 800afaa:	4770      	bx	lr
 800afac:	20000030 	.word	0x20000030

0800afb0 <_sbrk_r>:
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	4d06      	ldr	r5, [pc, #24]	; (800afcc <_sbrk_r+0x1c>)
 800afb4:	2300      	movs	r3, #0
 800afb6:	4604      	mov	r4, r0
 800afb8:	4608      	mov	r0, r1
 800afba:	602b      	str	r3, [r5, #0]
 800afbc:	f7f7 fb82 	bl	80026c4 <_sbrk>
 800afc0:	1c43      	adds	r3, r0, #1
 800afc2:	d102      	bne.n	800afca <_sbrk_r+0x1a>
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	b103      	cbz	r3, 800afca <_sbrk_r+0x1a>
 800afc8:	6023      	str	r3, [r4, #0]
 800afca:	bd38      	pop	{r3, r4, r5, pc}
 800afcc:	20000250 	.word	0x20000250

0800afd0 <quorem>:
 800afd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd4:	6903      	ldr	r3, [r0, #16]
 800afd6:	690c      	ldr	r4, [r1, #16]
 800afd8:	42a3      	cmp	r3, r4
 800afda:	4607      	mov	r7, r0
 800afdc:	f2c0 8081 	blt.w	800b0e2 <quorem+0x112>
 800afe0:	3c01      	subs	r4, #1
 800afe2:	f101 0814 	add.w	r8, r1, #20
 800afe6:	f100 0514 	add.w	r5, r0, #20
 800afea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afee:	9301      	str	r3, [sp, #4]
 800aff0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aff4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aff8:	3301      	adds	r3, #1
 800affa:	429a      	cmp	r2, r3
 800affc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b000:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b004:	fbb2 f6f3 	udiv	r6, r2, r3
 800b008:	d331      	bcc.n	800b06e <quorem+0x9e>
 800b00a:	f04f 0e00 	mov.w	lr, #0
 800b00e:	4640      	mov	r0, r8
 800b010:	46ac      	mov	ip, r5
 800b012:	46f2      	mov	sl, lr
 800b014:	f850 2b04 	ldr.w	r2, [r0], #4
 800b018:	b293      	uxth	r3, r2
 800b01a:	fb06 e303 	mla	r3, r6, r3, lr
 800b01e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b022:	b29b      	uxth	r3, r3
 800b024:	ebaa 0303 	sub.w	r3, sl, r3
 800b028:	f8dc a000 	ldr.w	sl, [ip]
 800b02c:	0c12      	lsrs	r2, r2, #16
 800b02e:	fa13 f38a 	uxtah	r3, r3, sl
 800b032:	fb06 e202 	mla	r2, r6, r2, lr
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	9b00      	ldr	r3, [sp, #0]
 800b03a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b03e:	b292      	uxth	r2, r2
 800b040:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b044:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b048:	f8bd 3000 	ldrh.w	r3, [sp]
 800b04c:	4581      	cmp	r9, r0
 800b04e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b052:	f84c 3b04 	str.w	r3, [ip], #4
 800b056:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b05a:	d2db      	bcs.n	800b014 <quorem+0x44>
 800b05c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b060:	b92b      	cbnz	r3, 800b06e <quorem+0x9e>
 800b062:	9b01      	ldr	r3, [sp, #4]
 800b064:	3b04      	subs	r3, #4
 800b066:	429d      	cmp	r5, r3
 800b068:	461a      	mov	r2, r3
 800b06a:	d32e      	bcc.n	800b0ca <quorem+0xfa>
 800b06c:	613c      	str	r4, [r7, #16]
 800b06e:	4638      	mov	r0, r7
 800b070:	f001 f9c2 	bl	800c3f8 <__mcmp>
 800b074:	2800      	cmp	r0, #0
 800b076:	db24      	blt.n	800b0c2 <quorem+0xf2>
 800b078:	3601      	adds	r6, #1
 800b07a:	4628      	mov	r0, r5
 800b07c:	f04f 0c00 	mov.w	ip, #0
 800b080:	f858 2b04 	ldr.w	r2, [r8], #4
 800b084:	f8d0 e000 	ldr.w	lr, [r0]
 800b088:	b293      	uxth	r3, r2
 800b08a:	ebac 0303 	sub.w	r3, ip, r3
 800b08e:	0c12      	lsrs	r2, r2, #16
 800b090:	fa13 f38e 	uxtah	r3, r3, lr
 800b094:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b098:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0a2:	45c1      	cmp	r9, r8
 800b0a4:	f840 3b04 	str.w	r3, [r0], #4
 800b0a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b0ac:	d2e8      	bcs.n	800b080 <quorem+0xb0>
 800b0ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0b6:	b922      	cbnz	r2, 800b0c2 <quorem+0xf2>
 800b0b8:	3b04      	subs	r3, #4
 800b0ba:	429d      	cmp	r5, r3
 800b0bc:	461a      	mov	r2, r3
 800b0be:	d30a      	bcc.n	800b0d6 <quorem+0x106>
 800b0c0:	613c      	str	r4, [r7, #16]
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	b003      	add	sp, #12
 800b0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ca:	6812      	ldr	r2, [r2, #0]
 800b0cc:	3b04      	subs	r3, #4
 800b0ce:	2a00      	cmp	r2, #0
 800b0d0:	d1cc      	bne.n	800b06c <quorem+0x9c>
 800b0d2:	3c01      	subs	r4, #1
 800b0d4:	e7c7      	b.n	800b066 <quorem+0x96>
 800b0d6:	6812      	ldr	r2, [r2, #0]
 800b0d8:	3b04      	subs	r3, #4
 800b0da:	2a00      	cmp	r2, #0
 800b0dc:	d1f0      	bne.n	800b0c0 <quorem+0xf0>
 800b0de:	3c01      	subs	r4, #1
 800b0e0:	e7eb      	b.n	800b0ba <quorem+0xea>
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	e7ee      	b.n	800b0c4 <quorem+0xf4>
	...

0800b0e8 <_dtoa_r>:
 800b0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ec:	ed2d 8b04 	vpush	{d8-d9}
 800b0f0:	ec57 6b10 	vmov	r6, r7, d0
 800b0f4:	b093      	sub	sp, #76	; 0x4c
 800b0f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b0f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b0fc:	9106      	str	r1, [sp, #24]
 800b0fe:	ee10 aa10 	vmov	sl, s0
 800b102:	4604      	mov	r4, r0
 800b104:	9209      	str	r2, [sp, #36]	; 0x24
 800b106:	930c      	str	r3, [sp, #48]	; 0x30
 800b108:	46bb      	mov	fp, r7
 800b10a:	b975      	cbnz	r5, 800b12a <_dtoa_r+0x42>
 800b10c:	2010      	movs	r0, #16
 800b10e:	f7ff f9d5 	bl	800a4bc <malloc>
 800b112:	4602      	mov	r2, r0
 800b114:	6260      	str	r0, [r4, #36]	; 0x24
 800b116:	b920      	cbnz	r0, 800b122 <_dtoa_r+0x3a>
 800b118:	4ba7      	ldr	r3, [pc, #668]	; (800b3b8 <_dtoa_r+0x2d0>)
 800b11a:	21ea      	movs	r1, #234	; 0xea
 800b11c:	48a7      	ldr	r0, [pc, #668]	; (800b3bc <_dtoa_r+0x2d4>)
 800b11e:	f001 fcf3 	bl	800cb08 <__assert_func>
 800b122:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b126:	6005      	str	r5, [r0, #0]
 800b128:	60c5      	str	r5, [r0, #12]
 800b12a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b12c:	6819      	ldr	r1, [r3, #0]
 800b12e:	b151      	cbz	r1, 800b146 <_dtoa_r+0x5e>
 800b130:	685a      	ldr	r2, [r3, #4]
 800b132:	604a      	str	r2, [r1, #4]
 800b134:	2301      	movs	r3, #1
 800b136:	4093      	lsls	r3, r2
 800b138:	608b      	str	r3, [r1, #8]
 800b13a:	4620      	mov	r0, r4
 800b13c:	f000 ff1a 	bl	800bf74 <_Bfree>
 800b140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b142:	2200      	movs	r2, #0
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	1e3b      	subs	r3, r7, #0
 800b148:	bfaa      	itet	ge
 800b14a:	2300      	movge	r3, #0
 800b14c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b150:	f8c8 3000 	strge.w	r3, [r8]
 800b154:	4b9a      	ldr	r3, [pc, #616]	; (800b3c0 <_dtoa_r+0x2d8>)
 800b156:	bfbc      	itt	lt
 800b158:	2201      	movlt	r2, #1
 800b15a:	f8c8 2000 	strlt.w	r2, [r8]
 800b15e:	ea33 030b 	bics.w	r3, r3, fp
 800b162:	d11b      	bne.n	800b19c <_dtoa_r+0xb4>
 800b164:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b166:	f242 730f 	movw	r3, #9999	; 0x270f
 800b16a:	6013      	str	r3, [r2, #0]
 800b16c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b170:	4333      	orrs	r3, r6
 800b172:	f000 8592 	beq.w	800bc9a <_dtoa_r+0xbb2>
 800b176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b178:	b963      	cbnz	r3, 800b194 <_dtoa_r+0xac>
 800b17a:	4b92      	ldr	r3, [pc, #584]	; (800b3c4 <_dtoa_r+0x2dc>)
 800b17c:	e022      	b.n	800b1c4 <_dtoa_r+0xdc>
 800b17e:	4b92      	ldr	r3, [pc, #584]	; (800b3c8 <_dtoa_r+0x2e0>)
 800b180:	9301      	str	r3, [sp, #4]
 800b182:	3308      	adds	r3, #8
 800b184:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b186:	6013      	str	r3, [r2, #0]
 800b188:	9801      	ldr	r0, [sp, #4]
 800b18a:	b013      	add	sp, #76	; 0x4c
 800b18c:	ecbd 8b04 	vpop	{d8-d9}
 800b190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b194:	4b8b      	ldr	r3, [pc, #556]	; (800b3c4 <_dtoa_r+0x2dc>)
 800b196:	9301      	str	r3, [sp, #4]
 800b198:	3303      	adds	r3, #3
 800b19a:	e7f3      	b.n	800b184 <_dtoa_r+0x9c>
 800b19c:	2200      	movs	r2, #0
 800b19e:	2300      	movs	r3, #0
 800b1a0:	4650      	mov	r0, sl
 800b1a2:	4659      	mov	r1, fp
 800b1a4:	f7f5 fc98 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1a8:	ec4b ab19 	vmov	d9, sl, fp
 800b1ac:	4680      	mov	r8, r0
 800b1ae:	b158      	cbz	r0, 800b1c8 <_dtoa_r+0xe0>
 800b1b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	6013      	str	r3, [r2, #0]
 800b1b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f000 856b 	beq.w	800bc94 <_dtoa_r+0xbac>
 800b1be:	4883      	ldr	r0, [pc, #524]	; (800b3cc <_dtoa_r+0x2e4>)
 800b1c0:	6018      	str	r0, [r3, #0]
 800b1c2:	1e43      	subs	r3, r0, #1
 800b1c4:	9301      	str	r3, [sp, #4]
 800b1c6:	e7df      	b.n	800b188 <_dtoa_r+0xa0>
 800b1c8:	ec4b ab10 	vmov	d0, sl, fp
 800b1cc:	aa10      	add	r2, sp, #64	; 0x40
 800b1ce:	a911      	add	r1, sp, #68	; 0x44
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f001 f9b7 	bl	800c544 <__d2b>
 800b1d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b1da:	ee08 0a10 	vmov	s16, r0
 800b1de:	2d00      	cmp	r5, #0
 800b1e0:	f000 8084 	beq.w	800b2ec <_dtoa_r+0x204>
 800b1e4:	ee19 3a90 	vmov	r3, s19
 800b1e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b1f0:	4656      	mov	r6, sl
 800b1f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b1f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b1fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b1fe:	4b74      	ldr	r3, [pc, #464]	; (800b3d0 <_dtoa_r+0x2e8>)
 800b200:	2200      	movs	r2, #0
 800b202:	4630      	mov	r0, r6
 800b204:	4639      	mov	r1, r7
 800b206:	f7f5 f847 	bl	8000298 <__aeabi_dsub>
 800b20a:	a365      	add	r3, pc, #404	; (adr r3, 800b3a0 <_dtoa_r+0x2b8>)
 800b20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b210:	f7f5 f9fa 	bl	8000608 <__aeabi_dmul>
 800b214:	a364      	add	r3, pc, #400	; (adr r3, 800b3a8 <_dtoa_r+0x2c0>)
 800b216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21a:	f7f5 f83f 	bl	800029c <__adddf3>
 800b21e:	4606      	mov	r6, r0
 800b220:	4628      	mov	r0, r5
 800b222:	460f      	mov	r7, r1
 800b224:	f7f5 f986 	bl	8000534 <__aeabi_i2d>
 800b228:	a361      	add	r3, pc, #388	; (adr r3, 800b3b0 <_dtoa_r+0x2c8>)
 800b22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22e:	f7f5 f9eb 	bl	8000608 <__aeabi_dmul>
 800b232:	4602      	mov	r2, r0
 800b234:	460b      	mov	r3, r1
 800b236:	4630      	mov	r0, r6
 800b238:	4639      	mov	r1, r7
 800b23a:	f7f5 f82f 	bl	800029c <__adddf3>
 800b23e:	4606      	mov	r6, r0
 800b240:	460f      	mov	r7, r1
 800b242:	f7f5 fc91 	bl	8000b68 <__aeabi_d2iz>
 800b246:	2200      	movs	r2, #0
 800b248:	9000      	str	r0, [sp, #0]
 800b24a:	2300      	movs	r3, #0
 800b24c:	4630      	mov	r0, r6
 800b24e:	4639      	mov	r1, r7
 800b250:	f7f5 fc4c 	bl	8000aec <__aeabi_dcmplt>
 800b254:	b150      	cbz	r0, 800b26c <_dtoa_r+0x184>
 800b256:	9800      	ldr	r0, [sp, #0]
 800b258:	f7f5 f96c 	bl	8000534 <__aeabi_i2d>
 800b25c:	4632      	mov	r2, r6
 800b25e:	463b      	mov	r3, r7
 800b260:	f7f5 fc3a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b264:	b910      	cbnz	r0, 800b26c <_dtoa_r+0x184>
 800b266:	9b00      	ldr	r3, [sp, #0]
 800b268:	3b01      	subs	r3, #1
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	9b00      	ldr	r3, [sp, #0]
 800b26e:	2b16      	cmp	r3, #22
 800b270:	d85a      	bhi.n	800b328 <_dtoa_r+0x240>
 800b272:	9a00      	ldr	r2, [sp, #0]
 800b274:	4b57      	ldr	r3, [pc, #348]	; (800b3d4 <_dtoa_r+0x2ec>)
 800b276:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27e:	ec51 0b19 	vmov	r0, r1, d9
 800b282:	f7f5 fc33 	bl	8000aec <__aeabi_dcmplt>
 800b286:	2800      	cmp	r0, #0
 800b288:	d050      	beq.n	800b32c <_dtoa_r+0x244>
 800b28a:	9b00      	ldr	r3, [sp, #0]
 800b28c:	3b01      	subs	r3, #1
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	2300      	movs	r3, #0
 800b292:	930b      	str	r3, [sp, #44]	; 0x2c
 800b294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b296:	1b5d      	subs	r5, r3, r5
 800b298:	1e6b      	subs	r3, r5, #1
 800b29a:	9305      	str	r3, [sp, #20]
 800b29c:	bf45      	ittet	mi
 800b29e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b2a2:	9304      	strmi	r3, [sp, #16]
 800b2a4:	2300      	movpl	r3, #0
 800b2a6:	2300      	movmi	r3, #0
 800b2a8:	bf4c      	ite	mi
 800b2aa:	9305      	strmi	r3, [sp, #20]
 800b2ac:	9304      	strpl	r3, [sp, #16]
 800b2ae:	9b00      	ldr	r3, [sp, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	db3d      	blt.n	800b330 <_dtoa_r+0x248>
 800b2b4:	9b05      	ldr	r3, [sp, #20]
 800b2b6:	9a00      	ldr	r2, [sp, #0]
 800b2b8:	920a      	str	r2, [sp, #40]	; 0x28
 800b2ba:	4413      	add	r3, r2
 800b2bc:	9305      	str	r3, [sp, #20]
 800b2be:	2300      	movs	r3, #0
 800b2c0:	9307      	str	r3, [sp, #28]
 800b2c2:	9b06      	ldr	r3, [sp, #24]
 800b2c4:	2b09      	cmp	r3, #9
 800b2c6:	f200 8089 	bhi.w	800b3dc <_dtoa_r+0x2f4>
 800b2ca:	2b05      	cmp	r3, #5
 800b2cc:	bfc4      	itt	gt
 800b2ce:	3b04      	subgt	r3, #4
 800b2d0:	9306      	strgt	r3, [sp, #24]
 800b2d2:	9b06      	ldr	r3, [sp, #24]
 800b2d4:	f1a3 0302 	sub.w	r3, r3, #2
 800b2d8:	bfcc      	ite	gt
 800b2da:	2500      	movgt	r5, #0
 800b2dc:	2501      	movle	r5, #1
 800b2de:	2b03      	cmp	r3, #3
 800b2e0:	f200 8087 	bhi.w	800b3f2 <_dtoa_r+0x30a>
 800b2e4:	e8df f003 	tbb	[pc, r3]
 800b2e8:	59383a2d 	.word	0x59383a2d
 800b2ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b2f0:	441d      	add	r5, r3
 800b2f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b2f6:	2b20      	cmp	r3, #32
 800b2f8:	bfc1      	itttt	gt
 800b2fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b2fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b302:	fa0b f303 	lslgt.w	r3, fp, r3
 800b306:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b30a:	bfda      	itte	le
 800b30c:	f1c3 0320 	rsble	r3, r3, #32
 800b310:	fa06 f003 	lslle.w	r0, r6, r3
 800b314:	4318      	orrgt	r0, r3
 800b316:	f7f5 f8fd 	bl	8000514 <__aeabi_ui2d>
 800b31a:	2301      	movs	r3, #1
 800b31c:	4606      	mov	r6, r0
 800b31e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b322:	3d01      	subs	r5, #1
 800b324:	930e      	str	r3, [sp, #56]	; 0x38
 800b326:	e76a      	b.n	800b1fe <_dtoa_r+0x116>
 800b328:	2301      	movs	r3, #1
 800b32a:	e7b2      	b.n	800b292 <_dtoa_r+0x1aa>
 800b32c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b32e:	e7b1      	b.n	800b294 <_dtoa_r+0x1ac>
 800b330:	9b04      	ldr	r3, [sp, #16]
 800b332:	9a00      	ldr	r2, [sp, #0]
 800b334:	1a9b      	subs	r3, r3, r2
 800b336:	9304      	str	r3, [sp, #16]
 800b338:	4253      	negs	r3, r2
 800b33a:	9307      	str	r3, [sp, #28]
 800b33c:	2300      	movs	r3, #0
 800b33e:	930a      	str	r3, [sp, #40]	; 0x28
 800b340:	e7bf      	b.n	800b2c2 <_dtoa_r+0x1da>
 800b342:	2300      	movs	r3, #0
 800b344:	9308      	str	r3, [sp, #32]
 800b346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b348:	2b00      	cmp	r3, #0
 800b34a:	dc55      	bgt.n	800b3f8 <_dtoa_r+0x310>
 800b34c:	2301      	movs	r3, #1
 800b34e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b352:	461a      	mov	r2, r3
 800b354:	9209      	str	r2, [sp, #36]	; 0x24
 800b356:	e00c      	b.n	800b372 <_dtoa_r+0x28a>
 800b358:	2301      	movs	r3, #1
 800b35a:	e7f3      	b.n	800b344 <_dtoa_r+0x25c>
 800b35c:	2300      	movs	r3, #0
 800b35e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b360:	9308      	str	r3, [sp, #32]
 800b362:	9b00      	ldr	r3, [sp, #0]
 800b364:	4413      	add	r3, r2
 800b366:	9302      	str	r3, [sp, #8]
 800b368:	3301      	adds	r3, #1
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	9303      	str	r3, [sp, #12]
 800b36e:	bfb8      	it	lt
 800b370:	2301      	movlt	r3, #1
 800b372:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b374:	2200      	movs	r2, #0
 800b376:	6042      	str	r2, [r0, #4]
 800b378:	2204      	movs	r2, #4
 800b37a:	f102 0614 	add.w	r6, r2, #20
 800b37e:	429e      	cmp	r6, r3
 800b380:	6841      	ldr	r1, [r0, #4]
 800b382:	d93d      	bls.n	800b400 <_dtoa_r+0x318>
 800b384:	4620      	mov	r0, r4
 800b386:	f000 fdb5 	bl	800bef4 <_Balloc>
 800b38a:	9001      	str	r0, [sp, #4]
 800b38c:	2800      	cmp	r0, #0
 800b38e:	d13b      	bne.n	800b408 <_dtoa_r+0x320>
 800b390:	4b11      	ldr	r3, [pc, #68]	; (800b3d8 <_dtoa_r+0x2f0>)
 800b392:	4602      	mov	r2, r0
 800b394:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b398:	e6c0      	b.n	800b11c <_dtoa_r+0x34>
 800b39a:	2301      	movs	r3, #1
 800b39c:	e7df      	b.n	800b35e <_dtoa_r+0x276>
 800b39e:	bf00      	nop
 800b3a0:	636f4361 	.word	0x636f4361
 800b3a4:	3fd287a7 	.word	0x3fd287a7
 800b3a8:	8b60c8b3 	.word	0x8b60c8b3
 800b3ac:	3fc68a28 	.word	0x3fc68a28
 800b3b0:	509f79fb 	.word	0x509f79fb
 800b3b4:	3fd34413 	.word	0x3fd34413
 800b3b8:	0800cfb9 	.word	0x0800cfb9
 800b3bc:	0800cfd0 	.word	0x0800cfd0
 800b3c0:	7ff00000 	.word	0x7ff00000
 800b3c4:	0800cfb5 	.word	0x0800cfb5
 800b3c8:	0800cfac 	.word	0x0800cfac
 800b3cc:	0800cf89 	.word	0x0800cf89
 800b3d0:	3ff80000 	.word	0x3ff80000
 800b3d4:	0800d120 	.word	0x0800d120
 800b3d8:	0800d02b 	.word	0x0800d02b
 800b3dc:	2501      	movs	r5, #1
 800b3de:	2300      	movs	r3, #0
 800b3e0:	9306      	str	r3, [sp, #24]
 800b3e2:	9508      	str	r5, [sp, #32]
 800b3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	2312      	movs	r3, #18
 800b3f0:	e7b0      	b.n	800b354 <_dtoa_r+0x26c>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	9308      	str	r3, [sp, #32]
 800b3f6:	e7f5      	b.n	800b3e4 <_dtoa_r+0x2fc>
 800b3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b3fe:	e7b8      	b.n	800b372 <_dtoa_r+0x28a>
 800b400:	3101      	adds	r1, #1
 800b402:	6041      	str	r1, [r0, #4]
 800b404:	0052      	lsls	r2, r2, #1
 800b406:	e7b8      	b.n	800b37a <_dtoa_r+0x292>
 800b408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b40a:	9a01      	ldr	r2, [sp, #4]
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	9b03      	ldr	r3, [sp, #12]
 800b410:	2b0e      	cmp	r3, #14
 800b412:	f200 809d 	bhi.w	800b550 <_dtoa_r+0x468>
 800b416:	2d00      	cmp	r5, #0
 800b418:	f000 809a 	beq.w	800b550 <_dtoa_r+0x468>
 800b41c:	9b00      	ldr	r3, [sp, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	dd32      	ble.n	800b488 <_dtoa_r+0x3a0>
 800b422:	4ab7      	ldr	r2, [pc, #732]	; (800b700 <_dtoa_r+0x618>)
 800b424:	f003 030f 	and.w	r3, r3, #15
 800b428:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b42c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b430:	9b00      	ldr	r3, [sp, #0]
 800b432:	05d8      	lsls	r0, r3, #23
 800b434:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b438:	d516      	bpl.n	800b468 <_dtoa_r+0x380>
 800b43a:	4bb2      	ldr	r3, [pc, #712]	; (800b704 <_dtoa_r+0x61c>)
 800b43c:	ec51 0b19 	vmov	r0, r1, d9
 800b440:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b444:	f7f5 fa0a 	bl	800085c <__aeabi_ddiv>
 800b448:	f007 070f 	and.w	r7, r7, #15
 800b44c:	4682      	mov	sl, r0
 800b44e:	468b      	mov	fp, r1
 800b450:	2503      	movs	r5, #3
 800b452:	4eac      	ldr	r6, [pc, #688]	; (800b704 <_dtoa_r+0x61c>)
 800b454:	b957      	cbnz	r7, 800b46c <_dtoa_r+0x384>
 800b456:	4642      	mov	r2, r8
 800b458:	464b      	mov	r3, r9
 800b45a:	4650      	mov	r0, sl
 800b45c:	4659      	mov	r1, fp
 800b45e:	f7f5 f9fd 	bl	800085c <__aeabi_ddiv>
 800b462:	4682      	mov	sl, r0
 800b464:	468b      	mov	fp, r1
 800b466:	e028      	b.n	800b4ba <_dtoa_r+0x3d2>
 800b468:	2502      	movs	r5, #2
 800b46a:	e7f2      	b.n	800b452 <_dtoa_r+0x36a>
 800b46c:	07f9      	lsls	r1, r7, #31
 800b46e:	d508      	bpl.n	800b482 <_dtoa_r+0x39a>
 800b470:	4640      	mov	r0, r8
 800b472:	4649      	mov	r1, r9
 800b474:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b478:	f7f5 f8c6 	bl	8000608 <__aeabi_dmul>
 800b47c:	3501      	adds	r5, #1
 800b47e:	4680      	mov	r8, r0
 800b480:	4689      	mov	r9, r1
 800b482:	107f      	asrs	r7, r7, #1
 800b484:	3608      	adds	r6, #8
 800b486:	e7e5      	b.n	800b454 <_dtoa_r+0x36c>
 800b488:	f000 809b 	beq.w	800b5c2 <_dtoa_r+0x4da>
 800b48c:	9b00      	ldr	r3, [sp, #0]
 800b48e:	4f9d      	ldr	r7, [pc, #628]	; (800b704 <_dtoa_r+0x61c>)
 800b490:	425e      	negs	r6, r3
 800b492:	4b9b      	ldr	r3, [pc, #620]	; (800b700 <_dtoa_r+0x618>)
 800b494:	f006 020f 	and.w	r2, r6, #15
 800b498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	ec51 0b19 	vmov	r0, r1, d9
 800b4a4:	f7f5 f8b0 	bl	8000608 <__aeabi_dmul>
 800b4a8:	1136      	asrs	r6, r6, #4
 800b4aa:	4682      	mov	sl, r0
 800b4ac:	468b      	mov	fp, r1
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	2502      	movs	r5, #2
 800b4b2:	2e00      	cmp	r6, #0
 800b4b4:	d17a      	bne.n	800b5ac <_dtoa_r+0x4c4>
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d1d3      	bne.n	800b462 <_dtoa_r+0x37a>
 800b4ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f000 8082 	beq.w	800b5c6 <_dtoa_r+0x4de>
 800b4c2:	4b91      	ldr	r3, [pc, #580]	; (800b708 <_dtoa_r+0x620>)
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	4650      	mov	r0, sl
 800b4c8:	4659      	mov	r1, fp
 800b4ca:	f7f5 fb0f 	bl	8000aec <__aeabi_dcmplt>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d079      	beq.n	800b5c6 <_dtoa_r+0x4de>
 800b4d2:	9b03      	ldr	r3, [sp, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d076      	beq.n	800b5c6 <_dtoa_r+0x4de>
 800b4d8:	9b02      	ldr	r3, [sp, #8]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	dd36      	ble.n	800b54c <_dtoa_r+0x464>
 800b4de:	9b00      	ldr	r3, [sp, #0]
 800b4e0:	4650      	mov	r0, sl
 800b4e2:	4659      	mov	r1, fp
 800b4e4:	1e5f      	subs	r7, r3, #1
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	4b88      	ldr	r3, [pc, #544]	; (800b70c <_dtoa_r+0x624>)
 800b4ea:	f7f5 f88d 	bl	8000608 <__aeabi_dmul>
 800b4ee:	9e02      	ldr	r6, [sp, #8]
 800b4f0:	4682      	mov	sl, r0
 800b4f2:	468b      	mov	fp, r1
 800b4f4:	3501      	adds	r5, #1
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	f7f5 f81c 	bl	8000534 <__aeabi_i2d>
 800b4fc:	4652      	mov	r2, sl
 800b4fe:	465b      	mov	r3, fp
 800b500:	f7f5 f882 	bl	8000608 <__aeabi_dmul>
 800b504:	4b82      	ldr	r3, [pc, #520]	; (800b710 <_dtoa_r+0x628>)
 800b506:	2200      	movs	r2, #0
 800b508:	f7f4 fec8 	bl	800029c <__adddf3>
 800b50c:	46d0      	mov	r8, sl
 800b50e:	46d9      	mov	r9, fp
 800b510:	4682      	mov	sl, r0
 800b512:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b516:	2e00      	cmp	r6, #0
 800b518:	d158      	bne.n	800b5cc <_dtoa_r+0x4e4>
 800b51a:	4b7e      	ldr	r3, [pc, #504]	; (800b714 <_dtoa_r+0x62c>)
 800b51c:	2200      	movs	r2, #0
 800b51e:	4640      	mov	r0, r8
 800b520:	4649      	mov	r1, r9
 800b522:	f7f4 feb9 	bl	8000298 <__aeabi_dsub>
 800b526:	4652      	mov	r2, sl
 800b528:	465b      	mov	r3, fp
 800b52a:	4680      	mov	r8, r0
 800b52c:	4689      	mov	r9, r1
 800b52e:	f7f5 fafb 	bl	8000b28 <__aeabi_dcmpgt>
 800b532:	2800      	cmp	r0, #0
 800b534:	f040 8295 	bne.w	800ba62 <_dtoa_r+0x97a>
 800b538:	4652      	mov	r2, sl
 800b53a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b53e:	4640      	mov	r0, r8
 800b540:	4649      	mov	r1, r9
 800b542:	f7f5 fad3 	bl	8000aec <__aeabi_dcmplt>
 800b546:	2800      	cmp	r0, #0
 800b548:	f040 8289 	bne.w	800ba5e <_dtoa_r+0x976>
 800b54c:	ec5b ab19 	vmov	sl, fp, d9
 800b550:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b552:	2b00      	cmp	r3, #0
 800b554:	f2c0 8148 	blt.w	800b7e8 <_dtoa_r+0x700>
 800b558:	9a00      	ldr	r2, [sp, #0]
 800b55a:	2a0e      	cmp	r2, #14
 800b55c:	f300 8144 	bgt.w	800b7e8 <_dtoa_r+0x700>
 800b560:	4b67      	ldr	r3, [pc, #412]	; (800b700 <_dtoa_r+0x618>)
 800b562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b566:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b56a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f280 80d5 	bge.w	800b71c <_dtoa_r+0x634>
 800b572:	9b03      	ldr	r3, [sp, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	f300 80d1 	bgt.w	800b71c <_dtoa_r+0x634>
 800b57a:	f040 826f 	bne.w	800ba5c <_dtoa_r+0x974>
 800b57e:	4b65      	ldr	r3, [pc, #404]	; (800b714 <_dtoa_r+0x62c>)
 800b580:	2200      	movs	r2, #0
 800b582:	4640      	mov	r0, r8
 800b584:	4649      	mov	r1, r9
 800b586:	f7f5 f83f 	bl	8000608 <__aeabi_dmul>
 800b58a:	4652      	mov	r2, sl
 800b58c:	465b      	mov	r3, fp
 800b58e:	f7f5 fac1 	bl	8000b14 <__aeabi_dcmpge>
 800b592:	9e03      	ldr	r6, [sp, #12]
 800b594:	4637      	mov	r7, r6
 800b596:	2800      	cmp	r0, #0
 800b598:	f040 8245 	bne.w	800ba26 <_dtoa_r+0x93e>
 800b59c:	9d01      	ldr	r5, [sp, #4]
 800b59e:	2331      	movs	r3, #49	; 0x31
 800b5a0:	f805 3b01 	strb.w	r3, [r5], #1
 800b5a4:	9b00      	ldr	r3, [sp, #0]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	e240      	b.n	800ba2e <_dtoa_r+0x946>
 800b5ac:	07f2      	lsls	r2, r6, #31
 800b5ae:	d505      	bpl.n	800b5bc <_dtoa_r+0x4d4>
 800b5b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5b4:	f7f5 f828 	bl	8000608 <__aeabi_dmul>
 800b5b8:	3501      	adds	r5, #1
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	1076      	asrs	r6, r6, #1
 800b5be:	3708      	adds	r7, #8
 800b5c0:	e777      	b.n	800b4b2 <_dtoa_r+0x3ca>
 800b5c2:	2502      	movs	r5, #2
 800b5c4:	e779      	b.n	800b4ba <_dtoa_r+0x3d2>
 800b5c6:	9f00      	ldr	r7, [sp, #0]
 800b5c8:	9e03      	ldr	r6, [sp, #12]
 800b5ca:	e794      	b.n	800b4f6 <_dtoa_r+0x40e>
 800b5cc:	9901      	ldr	r1, [sp, #4]
 800b5ce:	4b4c      	ldr	r3, [pc, #304]	; (800b700 <_dtoa_r+0x618>)
 800b5d0:	4431      	add	r1, r6
 800b5d2:	910d      	str	r1, [sp, #52]	; 0x34
 800b5d4:	9908      	ldr	r1, [sp, #32]
 800b5d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b5da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5de:	2900      	cmp	r1, #0
 800b5e0:	d043      	beq.n	800b66a <_dtoa_r+0x582>
 800b5e2:	494d      	ldr	r1, [pc, #308]	; (800b718 <_dtoa_r+0x630>)
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	f7f5 f939 	bl	800085c <__aeabi_ddiv>
 800b5ea:	4652      	mov	r2, sl
 800b5ec:	465b      	mov	r3, fp
 800b5ee:	f7f4 fe53 	bl	8000298 <__aeabi_dsub>
 800b5f2:	9d01      	ldr	r5, [sp, #4]
 800b5f4:	4682      	mov	sl, r0
 800b5f6:	468b      	mov	fp, r1
 800b5f8:	4649      	mov	r1, r9
 800b5fa:	4640      	mov	r0, r8
 800b5fc:	f7f5 fab4 	bl	8000b68 <__aeabi_d2iz>
 800b600:	4606      	mov	r6, r0
 800b602:	f7f4 ff97 	bl	8000534 <__aeabi_i2d>
 800b606:	4602      	mov	r2, r0
 800b608:	460b      	mov	r3, r1
 800b60a:	4640      	mov	r0, r8
 800b60c:	4649      	mov	r1, r9
 800b60e:	f7f4 fe43 	bl	8000298 <__aeabi_dsub>
 800b612:	3630      	adds	r6, #48	; 0x30
 800b614:	f805 6b01 	strb.w	r6, [r5], #1
 800b618:	4652      	mov	r2, sl
 800b61a:	465b      	mov	r3, fp
 800b61c:	4680      	mov	r8, r0
 800b61e:	4689      	mov	r9, r1
 800b620:	f7f5 fa64 	bl	8000aec <__aeabi_dcmplt>
 800b624:	2800      	cmp	r0, #0
 800b626:	d163      	bne.n	800b6f0 <_dtoa_r+0x608>
 800b628:	4642      	mov	r2, r8
 800b62a:	464b      	mov	r3, r9
 800b62c:	4936      	ldr	r1, [pc, #216]	; (800b708 <_dtoa_r+0x620>)
 800b62e:	2000      	movs	r0, #0
 800b630:	f7f4 fe32 	bl	8000298 <__aeabi_dsub>
 800b634:	4652      	mov	r2, sl
 800b636:	465b      	mov	r3, fp
 800b638:	f7f5 fa58 	bl	8000aec <__aeabi_dcmplt>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	f040 80b5 	bne.w	800b7ac <_dtoa_r+0x6c4>
 800b642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b644:	429d      	cmp	r5, r3
 800b646:	d081      	beq.n	800b54c <_dtoa_r+0x464>
 800b648:	4b30      	ldr	r3, [pc, #192]	; (800b70c <_dtoa_r+0x624>)
 800b64a:	2200      	movs	r2, #0
 800b64c:	4650      	mov	r0, sl
 800b64e:	4659      	mov	r1, fp
 800b650:	f7f4 ffda 	bl	8000608 <__aeabi_dmul>
 800b654:	4b2d      	ldr	r3, [pc, #180]	; (800b70c <_dtoa_r+0x624>)
 800b656:	4682      	mov	sl, r0
 800b658:	468b      	mov	fp, r1
 800b65a:	4640      	mov	r0, r8
 800b65c:	4649      	mov	r1, r9
 800b65e:	2200      	movs	r2, #0
 800b660:	f7f4 ffd2 	bl	8000608 <__aeabi_dmul>
 800b664:	4680      	mov	r8, r0
 800b666:	4689      	mov	r9, r1
 800b668:	e7c6      	b.n	800b5f8 <_dtoa_r+0x510>
 800b66a:	4650      	mov	r0, sl
 800b66c:	4659      	mov	r1, fp
 800b66e:	f7f4 ffcb 	bl	8000608 <__aeabi_dmul>
 800b672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b674:	9d01      	ldr	r5, [sp, #4]
 800b676:	930f      	str	r3, [sp, #60]	; 0x3c
 800b678:	4682      	mov	sl, r0
 800b67a:	468b      	mov	fp, r1
 800b67c:	4649      	mov	r1, r9
 800b67e:	4640      	mov	r0, r8
 800b680:	f7f5 fa72 	bl	8000b68 <__aeabi_d2iz>
 800b684:	4606      	mov	r6, r0
 800b686:	f7f4 ff55 	bl	8000534 <__aeabi_i2d>
 800b68a:	3630      	adds	r6, #48	; 0x30
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	4640      	mov	r0, r8
 800b692:	4649      	mov	r1, r9
 800b694:	f7f4 fe00 	bl	8000298 <__aeabi_dsub>
 800b698:	f805 6b01 	strb.w	r6, [r5], #1
 800b69c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b69e:	429d      	cmp	r5, r3
 800b6a0:	4680      	mov	r8, r0
 800b6a2:	4689      	mov	r9, r1
 800b6a4:	f04f 0200 	mov.w	r2, #0
 800b6a8:	d124      	bne.n	800b6f4 <_dtoa_r+0x60c>
 800b6aa:	4b1b      	ldr	r3, [pc, #108]	; (800b718 <_dtoa_r+0x630>)
 800b6ac:	4650      	mov	r0, sl
 800b6ae:	4659      	mov	r1, fp
 800b6b0:	f7f4 fdf4 	bl	800029c <__adddf3>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	4640      	mov	r0, r8
 800b6ba:	4649      	mov	r1, r9
 800b6bc:	f7f5 fa34 	bl	8000b28 <__aeabi_dcmpgt>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d173      	bne.n	800b7ac <_dtoa_r+0x6c4>
 800b6c4:	4652      	mov	r2, sl
 800b6c6:	465b      	mov	r3, fp
 800b6c8:	4913      	ldr	r1, [pc, #76]	; (800b718 <_dtoa_r+0x630>)
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	f7f4 fde4 	bl	8000298 <__aeabi_dsub>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4640      	mov	r0, r8
 800b6d6:	4649      	mov	r1, r9
 800b6d8:	f7f5 fa08 	bl	8000aec <__aeabi_dcmplt>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	f43f af35 	beq.w	800b54c <_dtoa_r+0x464>
 800b6e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b6e4:	1e6b      	subs	r3, r5, #1
 800b6e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b6ec:	2b30      	cmp	r3, #48	; 0x30
 800b6ee:	d0f8      	beq.n	800b6e2 <_dtoa_r+0x5fa>
 800b6f0:	9700      	str	r7, [sp, #0]
 800b6f2:	e049      	b.n	800b788 <_dtoa_r+0x6a0>
 800b6f4:	4b05      	ldr	r3, [pc, #20]	; (800b70c <_dtoa_r+0x624>)
 800b6f6:	f7f4 ff87 	bl	8000608 <__aeabi_dmul>
 800b6fa:	4680      	mov	r8, r0
 800b6fc:	4689      	mov	r9, r1
 800b6fe:	e7bd      	b.n	800b67c <_dtoa_r+0x594>
 800b700:	0800d120 	.word	0x0800d120
 800b704:	0800d0f8 	.word	0x0800d0f8
 800b708:	3ff00000 	.word	0x3ff00000
 800b70c:	40240000 	.word	0x40240000
 800b710:	401c0000 	.word	0x401c0000
 800b714:	40140000 	.word	0x40140000
 800b718:	3fe00000 	.word	0x3fe00000
 800b71c:	9d01      	ldr	r5, [sp, #4]
 800b71e:	4656      	mov	r6, sl
 800b720:	465f      	mov	r7, fp
 800b722:	4642      	mov	r2, r8
 800b724:	464b      	mov	r3, r9
 800b726:	4630      	mov	r0, r6
 800b728:	4639      	mov	r1, r7
 800b72a:	f7f5 f897 	bl	800085c <__aeabi_ddiv>
 800b72e:	f7f5 fa1b 	bl	8000b68 <__aeabi_d2iz>
 800b732:	4682      	mov	sl, r0
 800b734:	f7f4 fefe 	bl	8000534 <__aeabi_i2d>
 800b738:	4642      	mov	r2, r8
 800b73a:	464b      	mov	r3, r9
 800b73c:	f7f4 ff64 	bl	8000608 <__aeabi_dmul>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4630      	mov	r0, r6
 800b746:	4639      	mov	r1, r7
 800b748:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b74c:	f7f4 fda4 	bl	8000298 <__aeabi_dsub>
 800b750:	f805 6b01 	strb.w	r6, [r5], #1
 800b754:	9e01      	ldr	r6, [sp, #4]
 800b756:	9f03      	ldr	r7, [sp, #12]
 800b758:	1bae      	subs	r6, r5, r6
 800b75a:	42b7      	cmp	r7, r6
 800b75c:	4602      	mov	r2, r0
 800b75e:	460b      	mov	r3, r1
 800b760:	d135      	bne.n	800b7ce <_dtoa_r+0x6e6>
 800b762:	f7f4 fd9b 	bl	800029c <__adddf3>
 800b766:	4642      	mov	r2, r8
 800b768:	464b      	mov	r3, r9
 800b76a:	4606      	mov	r6, r0
 800b76c:	460f      	mov	r7, r1
 800b76e:	f7f5 f9db 	bl	8000b28 <__aeabi_dcmpgt>
 800b772:	b9d0      	cbnz	r0, 800b7aa <_dtoa_r+0x6c2>
 800b774:	4642      	mov	r2, r8
 800b776:	464b      	mov	r3, r9
 800b778:	4630      	mov	r0, r6
 800b77a:	4639      	mov	r1, r7
 800b77c:	f7f5 f9ac 	bl	8000ad8 <__aeabi_dcmpeq>
 800b780:	b110      	cbz	r0, 800b788 <_dtoa_r+0x6a0>
 800b782:	f01a 0f01 	tst.w	sl, #1
 800b786:	d110      	bne.n	800b7aa <_dtoa_r+0x6c2>
 800b788:	4620      	mov	r0, r4
 800b78a:	ee18 1a10 	vmov	r1, s16
 800b78e:	f000 fbf1 	bl	800bf74 <_Bfree>
 800b792:	2300      	movs	r3, #0
 800b794:	9800      	ldr	r0, [sp, #0]
 800b796:	702b      	strb	r3, [r5, #0]
 800b798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b79a:	3001      	adds	r0, #1
 800b79c:	6018      	str	r0, [r3, #0]
 800b79e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f43f acf1 	beq.w	800b188 <_dtoa_r+0xa0>
 800b7a6:	601d      	str	r5, [r3, #0]
 800b7a8:	e4ee      	b.n	800b188 <_dtoa_r+0xa0>
 800b7aa:	9f00      	ldr	r7, [sp, #0]
 800b7ac:	462b      	mov	r3, r5
 800b7ae:	461d      	mov	r5, r3
 800b7b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7b4:	2a39      	cmp	r2, #57	; 0x39
 800b7b6:	d106      	bne.n	800b7c6 <_dtoa_r+0x6de>
 800b7b8:	9a01      	ldr	r2, [sp, #4]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d1f7      	bne.n	800b7ae <_dtoa_r+0x6c6>
 800b7be:	9901      	ldr	r1, [sp, #4]
 800b7c0:	2230      	movs	r2, #48	; 0x30
 800b7c2:	3701      	adds	r7, #1
 800b7c4:	700a      	strb	r2, [r1, #0]
 800b7c6:	781a      	ldrb	r2, [r3, #0]
 800b7c8:	3201      	adds	r2, #1
 800b7ca:	701a      	strb	r2, [r3, #0]
 800b7cc:	e790      	b.n	800b6f0 <_dtoa_r+0x608>
 800b7ce:	4ba6      	ldr	r3, [pc, #664]	; (800ba68 <_dtoa_r+0x980>)
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f7f4 ff19 	bl	8000608 <__aeabi_dmul>
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	2300      	movs	r3, #0
 800b7da:	4606      	mov	r6, r0
 800b7dc:	460f      	mov	r7, r1
 800b7de:	f7f5 f97b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d09d      	beq.n	800b722 <_dtoa_r+0x63a>
 800b7e6:	e7cf      	b.n	800b788 <_dtoa_r+0x6a0>
 800b7e8:	9a08      	ldr	r2, [sp, #32]
 800b7ea:	2a00      	cmp	r2, #0
 800b7ec:	f000 80d7 	beq.w	800b99e <_dtoa_r+0x8b6>
 800b7f0:	9a06      	ldr	r2, [sp, #24]
 800b7f2:	2a01      	cmp	r2, #1
 800b7f4:	f300 80ba 	bgt.w	800b96c <_dtoa_r+0x884>
 800b7f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7fa:	2a00      	cmp	r2, #0
 800b7fc:	f000 80b2 	beq.w	800b964 <_dtoa_r+0x87c>
 800b800:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b804:	9e07      	ldr	r6, [sp, #28]
 800b806:	9d04      	ldr	r5, [sp, #16]
 800b808:	9a04      	ldr	r2, [sp, #16]
 800b80a:	441a      	add	r2, r3
 800b80c:	9204      	str	r2, [sp, #16]
 800b80e:	9a05      	ldr	r2, [sp, #20]
 800b810:	2101      	movs	r1, #1
 800b812:	441a      	add	r2, r3
 800b814:	4620      	mov	r0, r4
 800b816:	9205      	str	r2, [sp, #20]
 800b818:	f000 fc64 	bl	800c0e4 <__i2b>
 800b81c:	4607      	mov	r7, r0
 800b81e:	2d00      	cmp	r5, #0
 800b820:	dd0c      	ble.n	800b83c <_dtoa_r+0x754>
 800b822:	9b05      	ldr	r3, [sp, #20]
 800b824:	2b00      	cmp	r3, #0
 800b826:	dd09      	ble.n	800b83c <_dtoa_r+0x754>
 800b828:	42ab      	cmp	r3, r5
 800b82a:	9a04      	ldr	r2, [sp, #16]
 800b82c:	bfa8      	it	ge
 800b82e:	462b      	movge	r3, r5
 800b830:	1ad2      	subs	r2, r2, r3
 800b832:	9204      	str	r2, [sp, #16]
 800b834:	9a05      	ldr	r2, [sp, #20]
 800b836:	1aed      	subs	r5, r5, r3
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	9305      	str	r3, [sp, #20]
 800b83c:	9b07      	ldr	r3, [sp, #28]
 800b83e:	b31b      	cbz	r3, 800b888 <_dtoa_r+0x7a0>
 800b840:	9b08      	ldr	r3, [sp, #32]
 800b842:	2b00      	cmp	r3, #0
 800b844:	f000 80af 	beq.w	800b9a6 <_dtoa_r+0x8be>
 800b848:	2e00      	cmp	r6, #0
 800b84a:	dd13      	ble.n	800b874 <_dtoa_r+0x78c>
 800b84c:	4639      	mov	r1, r7
 800b84e:	4632      	mov	r2, r6
 800b850:	4620      	mov	r0, r4
 800b852:	f000 fd07 	bl	800c264 <__pow5mult>
 800b856:	ee18 2a10 	vmov	r2, s16
 800b85a:	4601      	mov	r1, r0
 800b85c:	4607      	mov	r7, r0
 800b85e:	4620      	mov	r0, r4
 800b860:	f000 fc56 	bl	800c110 <__multiply>
 800b864:	ee18 1a10 	vmov	r1, s16
 800b868:	4680      	mov	r8, r0
 800b86a:	4620      	mov	r0, r4
 800b86c:	f000 fb82 	bl	800bf74 <_Bfree>
 800b870:	ee08 8a10 	vmov	s16, r8
 800b874:	9b07      	ldr	r3, [sp, #28]
 800b876:	1b9a      	subs	r2, r3, r6
 800b878:	d006      	beq.n	800b888 <_dtoa_r+0x7a0>
 800b87a:	ee18 1a10 	vmov	r1, s16
 800b87e:	4620      	mov	r0, r4
 800b880:	f000 fcf0 	bl	800c264 <__pow5mult>
 800b884:	ee08 0a10 	vmov	s16, r0
 800b888:	2101      	movs	r1, #1
 800b88a:	4620      	mov	r0, r4
 800b88c:	f000 fc2a 	bl	800c0e4 <__i2b>
 800b890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b892:	2b00      	cmp	r3, #0
 800b894:	4606      	mov	r6, r0
 800b896:	f340 8088 	ble.w	800b9aa <_dtoa_r+0x8c2>
 800b89a:	461a      	mov	r2, r3
 800b89c:	4601      	mov	r1, r0
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f000 fce0 	bl	800c264 <__pow5mult>
 800b8a4:	9b06      	ldr	r3, [sp, #24]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	4606      	mov	r6, r0
 800b8aa:	f340 8081 	ble.w	800b9b0 <_dtoa_r+0x8c8>
 800b8ae:	f04f 0800 	mov.w	r8, #0
 800b8b2:	6933      	ldr	r3, [r6, #16]
 800b8b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b8b8:	6918      	ldr	r0, [r3, #16]
 800b8ba:	f000 fbc3 	bl	800c044 <__hi0bits>
 800b8be:	f1c0 0020 	rsb	r0, r0, #32
 800b8c2:	9b05      	ldr	r3, [sp, #20]
 800b8c4:	4418      	add	r0, r3
 800b8c6:	f010 001f 	ands.w	r0, r0, #31
 800b8ca:	f000 8092 	beq.w	800b9f2 <_dtoa_r+0x90a>
 800b8ce:	f1c0 0320 	rsb	r3, r0, #32
 800b8d2:	2b04      	cmp	r3, #4
 800b8d4:	f340 808a 	ble.w	800b9ec <_dtoa_r+0x904>
 800b8d8:	f1c0 001c 	rsb	r0, r0, #28
 800b8dc:	9b04      	ldr	r3, [sp, #16]
 800b8de:	4403      	add	r3, r0
 800b8e0:	9304      	str	r3, [sp, #16]
 800b8e2:	9b05      	ldr	r3, [sp, #20]
 800b8e4:	4403      	add	r3, r0
 800b8e6:	4405      	add	r5, r0
 800b8e8:	9305      	str	r3, [sp, #20]
 800b8ea:	9b04      	ldr	r3, [sp, #16]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	dd07      	ble.n	800b900 <_dtoa_r+0x818>
 800b8f0:	ee18 1a10 	vmov	r1, s16
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f000 fd0e 	bl	800c318 <__lshift>
 800b8fc:	ee08 0a10 	vmov	s16, r0
 800b900:	9b05      	ldr	r3, [sp, #20]
 800b902:	2b00      	cmp	r3, #0
 800b904:	dd05      	ble.n	800b912 <_dtoa_r+0x82a>
 800b906:	4631      	mov	r1, r6
 800b908:	461a      	mov	r2, r3
 800b90a:	4620      	mov	r0, r4
 800b90c:	f000 fd04 	bl	800c318 <__lshift>
 800b910:	4606      	mov	r6, r0
 800b912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b914:	2b00      	cmp	r3, #0
 800b916:	d06e      	beq.n	800b9f6 <_dtoa_r+0x90e>
 800b918:	ee18 0a10 	vmov	r0, s16
 800b91c:	4631      	mov	r1, r6
 800b91e:	f000 fd6b 	bl	800c3f8 <__mcmp>
 800b922:	2800      	cmp	r0, #0
 800b924:	da67      	bge.n	800b9f6 <_dtoa_r+0x90e>
 800b926:	9b00      	ldr	r3, [sp, #0]
 800b928:	3b01      	subs	r3, #1
 800b92a:	ee18 1a10 	vmov	r1, s16
 800b92e:	9300      	str	r3, [sp, #0]
 800b930:	220a      	movs	r2, #10
 800b932:	2300      	movs	r3, #0
 800b934:	4620      	mov	r0, r4
 800b936:	f000 fb3f 	bl	800bfb8 <__multadd>
 800b93a:	9b08      	ldr	r3, [sp, #32]
 800b93c:	ee08 0a10 	vmov	s16, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	f000 81b1 	beq.w	800bca8 <_dtoa_r+0xbc0>
 800b946:	2300      	movs	r3, #0
 800b948:	4639      	mov	r1, r7
 800b94a:	220a      	movs	r2, #10
 800b94c:	4620      	mov	r0, r4
 800b94e:	f000 fb33 	bl	800bfb8 <__multadd>
 800b952:	9b02      	ldr	r3, [sp, #8]
 800b954:	2b00      	cmp	r3, #0
 800b956:	4607      	mov	r7, r0
 800b958:	f300 808e 	bgt.w	800ba78 <_dtoa_r+0x990>
 800b95c:	9b06      	ldr	r3, [sp, #24]
 800b95e:	2b02      	cmp	r3, #2
 800b960:	dc51      	bgt.n	800ba06 <_dtoa_r+0x91e>
 800b962:	e089      	b.n	800ba78 <_dtoa_r+0x990>
 800b964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b966:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b96a:	e74b      	b.n	800b804 <_dtoa_r+0x71c>
 800b96c:	9b03      	ldr	r3, [sp, #12]
 800b96e:	1e5e      	subs	r6, r3, #1
 800b970:	9b07      	ldr	r3, [sp, #28]
 800b972:	42b3      	cmp	r3, r6
 800b974:	bfbf      	itttt	lt
 800b976:	9b07      	ldrlt	r3, [sp, #28]
 800b978:	9607      	strlt	r6, [sp, #28]
 800b97a:	1af2      	sublt	r2, r6, r3
 800b97c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b97e:	bfb6      	itet	lt
 800b980:	189b      	addlt	r3, r3, r2
 800b982:	1b9e      	subge	r6, r3, r6
 800b984:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b986:	9b03      	ldr	r3, [sp, #12]
 800b988:	bfb8      	it	lt
 800b98a:	2600      	movlt	r6, #0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	bfb7      	itett	lt
 800b990:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b994:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b998:	1a9d      	sublt	r5, r3, r2
 800b99a:	2300      	movlt	r3, #0
 800b99c:	e734      	b.n	800b808 <_dtoa_r+0x720>
 800b99e:	9e07      	ldr	r6, [sp, #28]
 800b9a0:	9d04      	ldr	r5, [sp, #16]
 800b9a2:	9f08      	ldr	r7, [sp, #32]
 800b9a4:	e73b      	b.n	800b81e <_dtoa_r+0x736>
 800b9a6:	9a07      	ldr	r2, [sp, #28]
 800b9a8:	e767      	b.n	800b87a <_dtoa_r+0x792>
 800b9aa:	9b06      	ldr	r3, [sp, #24]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	dc18      	bgt.n	800b9e2 <_dtoa_r+0x8fa>
 800b9b0:	f1ba 0f00 	cmp.w	sl, #0
 800b9b4:	d115      	bne.n	800b9e2 <_dtoa_r+0x8fa>
 800b9b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9ba:	b993      	cbnz	r3, 800b9e2 <_dtoa_r+0x8fa>
 800b9bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b9c0:	0d1b      	lsrs	r3, r3, #20
 800b9c2:	051b      	lsls	r3, r3, #20
 800b9c4:	b183      	cbz	r3, 800b9e8 <_dtoa_r+0x900>
 800b9c6:	9b04      	ldr	r3, [sp, #16]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	9304      	str	r3, [sp, #16]
 800b9cc:	9b05      	ldr	r3, [sp, #20]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	9305      	str	r3, [sp, #20]
 800b9d2:	f04f 0801 	mov.w	r8, #1
 800b9d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f47f af6a 	bne.w	800b8b2 <_dtoa_r+0x7ca>
 800b9de:	2001      	movs	r0, #1
 800b9e0:	e76f      	b.n	800b8c2 <_dtoa_r+0x7da>
 800b9e2:	f04f 0800 	mov.w	r8, #0
 800b9e6:	e7f6      	b.n	800b9d6 <_dtoa_r+0x8ee>
 800b9e8:	4698      	mov	r8, r3
 800b9ea:	e7f4      	b.n	800b9d6 <_dtoa_r+0x8ee>
 800b9ec:	f43f af7d 	beq.w	800b8ea <_dtoa_r+0x802>
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	301c      	adds	r0, #28
 800b9f4:	e772      	b.n	800b8dc <_dtoa_r+0x7f4>
 800b9f6:	9b03      	ldr	r3, [sp, #12]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	dc37      	bgt.n	800ba6c <_dtoa_r+0x984>
 800b9fc:	9b06      	ldr	r3, [sp, #24]
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	dd34      	ble.n	800ba6c <_dtoa_r+0x984>
 800ba02:	9b03      	ldr	r3, [sp, #12]
 800ba04:	9302      	str	r3, [sp, #8]
 800ba06:	9b02      	ldr	r3, [sp, #8]
 800ba08:	b96b      	cbnz	r3, 800ba26 <_dtoa_r+0x93e>
 800ba0a:	4631      	mov	r1, r6
 800ba0c:	2205      	movs	r2, #5
 800ba0e:	4620      	mov	r0, r4
 800ba10:	f000 fad2 	bl	800bfb8 <__multadd>
 800ba14:	4601      	mov	r1, r0
 800ba16:	4606      	mov	r6, r0
 800ba18:	ee18 0a10 	vmov	r0, s16
 800ba1c:	f000 fcec 	bl	800c3f8 <__mcmp>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	f73f adbb 	bgt.w	800b59c <_dtoa_r+0x4b4>
 800ba26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba28:	9d01      	ldr	r5, [sp, #4]
 800ba2a:	43db      	mvns	r3, r3
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	f04f 0800 	mov.w	r8, #0
 800ba32:	4631      	mov	r1, r6
 800ba34:	4620      	mov	r0, r4
 800ba36:	f000 fa9d 	bl	800bf74 <_Bfree>
 800ba3a:	2f00      	cmp	r7, #0
 800ba3c:	f43f aea4 	beq.w	800b788 <_dtoa_r+0x6a0>
 800ba40:	f1b8 0f00 	cmp.w	r8, #0
 800ba44:	d005      	beq.n	800ba52 <_dtoa_r+0x96a>
 800ba46:	45b8      	cmp	r8, r7
 800ba48:	d003      	beq.n	800ba52 <_dtoa_r+0x96a>
 800ba4a:	4641      	mov	r1, r8
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f000 fa91 	bl	800bf74 <_Bfree>
 800ba52:	4639      	mov	r1, r7
 800ba54:	4620      	mov	r0, r4
 800ba56:	f000 fa8d 	bl	800bf74 <_Bfree>
 800ba5a:	e695      	b.n	800b788 <_dtoa_r+0x6a0>
 800ba5c:	2600      	movs	r6, #0
 800ba5e:	4637      	mov	r7, r6
 800ba60:	e7e1      	b.n	800ba26 <_dtoa_r+0x93e>
 800ba62:	9700      	str	r7, [sp, #0]
 800ba64:	4637      	mov	r7, r6
 800ba66:	e599      	b.n	800b59c <_dtoa_r+0x4b4>
 800ba68:	40240000 	.word	0x40240000
 800ba6c:	9b08      	ldr	r3, [sp, #32]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	f000 80ca 	beq.w	800bc08 <_dtoa_r+0xb20>
 800ba74:	9b03      	ldr	r3, [sp, #12]
 800ba76:	9302      	str	r3, [sp, #8]
 800ba78:	2d00      	cmp	r5, #0
 800ba7a:	dd05      	ble.n	800ba88 <_dtoa_r+0x9a0>
 800ba7c:	4639      	mov	r1, r7
 800ba7e:	462a      	mov	r2, r5
 800ba80:	4620      	mov	r0, r4
 800ba82:	f000 fc49 	bl	800c318 <__lshift>
 800ba86:	4607      	mov	r7, r0
 800ba88:	f1b8 0f00 	cmp.w	r8, #0
 800ba8c:	d05b      	beq.n	800bb46 <_dtoa_r+0xa5e>
 800ba8e:	6879      	ldr	r1, [r7, #4]
 800ba90:	4620      	mov	r0, r4
 800ba92:	f000 fa2f 	bl	800bef4 <_Balloc>
 800ba96:	4605      	mov	r5, r0
 800ba98:	b928      	cbnz	r0, 800baa6 <_dtoa_r+0x9be>
 800ba9a:	4b87      	ldr	r3, [pc, #540]	; (800bcb8 <_dtoa_r+0xbd0>)
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800baa2:	f7ff bb3b 	b.w	800b11c <_dtoa_r+0x34>
 800baa6:	693a      	ldr	r2, [r7, #16]
 800baa8:	3202      	adds	r2, #2
 800baaa:	0092      	lsls	r2, r2, #2
 800baac:	f107 010c 	add.w	r1, r7, #12
 800bab0:	300c      	adds	r0, #12
 800bab2:	f000 fa04 	bl	800bebe <memcpy>
 800bab6:	2201      	movs	r2, #1
 800bab8:	4629      	mov	r1, r5
 800baba:	4620      	mov	r0, r4
 800babc:	f000 fc2c 	bl	800c318 <__lshift>
 800bac0:	9b01      	ldr	r3, [sp, #4]
 800bac2:	f103 0901 	add.w	r9, r3, #1
 800bac6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800baca:	4413      	add	r3, r2
 800bacc:	9305      	str	r3, [sp, #20]
 800bace:	f00a 0301 	and.w	r3, sl, #1
 800bad2:	46b8      	mov	r8, r7
 800bad4:	9304      	str	r3, [sp, #16]
 800bad6:	4607      	mov	r7, r0
 800bad8:	4631      	mov	r1, r6
 800bada:	ee18 0a10 	vmov	r0, s16
 800bade:	f7ff fa77 	bl	800afd0 <quorem>
 800bae2:	4641      	mov	r1, r8
 800bae4:	9002      	str	r0, [sp, #8]
 800bae6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800baea:	ee18 0a10 	vmov	r0, s16
 800baee:	f000 fc83 	bl	800c3f8 <__mcmp>
 800baf2:	463a      	mov	r2, r7
 800baf4:	9003      	str	r0, [sp, #12]
 800baf6:	4631      	mov	r1, r6
 800baf8:	4620      	mov	r0, r4
 800bafa:	f000 fc99 	bl	800c430 <__mdiff>
 800bafe:	68c2      	ldr	r2, [r0, #12]
 800bb00:	f109 3bff 	add.w	fp, r9, #4294967295
 800bb04:	4605      	mov	r5, r0
 800bb06:	bb02      	cbnz	r2, 800bb4a <_dtoa_r+0xa62>
 800bb08:	4601      	mov	r1, r0
 800bb0a:	ee18 0a10 	vmov	r0, s16
 800bb0e:	f000 fc73 	bl	800c3f8 <__mcmp>
 800bb12:	4602      	mov	r2, r0
 800bb14:	4629      	mov	r1, r5
 800bb16:	4620      	mov	r0, r4
 800bb18:	9207      	str	r2, [sp, #28]
 800bb1a:	f000 fa2b 	bl	800bf74 <_Bfree>
 800bb1e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bb22:	ea43 0102 	orr.w	r1, r3, r2
 800bb26:	9b04      	ldr	r3, [sp, #16]
 800bb28:	430b      	orrs	r3, r1
 800bb2a:	464d      	mov	r5, r9
 800bb2c:	d10f      	bne.n	800bb4e <_dtoa_r+0xa66>
 800bb2e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb32:	d02a      	beq.n	800bb8a <_dtoa_r+0xaa2>
 800bb34:	9b03      	ldr	r3, [sp, #12]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	dd02      	ble.n	800bb40 <_dtoa_r+0xa58>
 800bb3a:	9b02      	ldr	r3, [sp, #8]
 800bb3c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bb40:	f88b a000 	strb.w	sl, [fp]
 800bb44:	e775      	b.n	800ba32 <_dtoa_r+0x94a>
 800bb46:	4638      	mov	r0, r7
 800bb48:	e7ba      	b.n	800bac0 <_dtoa_r+0x9d8>
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	e7e2      	b.n	800bb14 <_dtoa_r+0xa2c>
 800bb4e:	9b03      	ldr	r3, [sp, #12]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	db04      	blt.n	800bb5e <_dtoa_r+0xa76>
 800bb54:	9906      	ldr	r1, [sp, #24]
 800bb56:	430b      	orrs	r3, r1
 800bb58:	9904      	ldr	r1, [sp, #16]
 800bb5a:	430b      	orrs	r3, r1
 800bb5c:	d122      	bne.n	800bba4 <_dtoa_r+0xabc>
 800bb5e:	2a00      	cmp	r2, #0
 800bb60:	ddee      	ble.n	800bb40 <_dtoa_r+0xa58>
 800bb62:	ee18 1a10 	vmov	r1, s16
 800bb66:	2201      	movs	r2, #1
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f000 fbd5 	bl	800c318 <__lshift>
 800bb6e:	4631      	mov	r1, r6
 800bb70:	ee08 0a10 	vmov	s16, r0
 800bb74:	f000 fc40 	bl	800c3f8 <__mcmp>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	dc03      	bgt.n	800bb84 <_dtoa_r+0xa9c>
 800bb7c:	d1e0      	bne.n	800bb40 <_dtoa_r+0xa58>
 800bb7e:	f01a 0f01 	tst.w	sl, #1
 800bb82:	d0dd      	beq.n	800bb40 <_dtoa_r+0xa58>
 800bb84:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb88:	d1d7      	bne.n	800bb3a <_dtoa_r+0xa52>
 800bb8a:	2339      	movs	r3, #57	; 0x39
 800bb8c:	f88b 3000 	strb.w	r3, [fp]
 800bb90:	462b      	mov	r3, r5
 800bb92:	461d      	mov	r5, r3
 800bb94:	3b01      	subs	r3, #1
 800bb96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb9a:	2a39      	cmp	r2, #57	; 0x39
 800bb9c:	d071      	beq.n	800bc82 <_dtoa_r+0xb9a>
 800bb9e:	3201      	adds	r2, #1
 800bba0:	701a      	strb	r2, [r3, #0]
 800bba2:	e746      	b.n	800ba32 <_dtoa_r+0x94a>
 800bba4:	2a00      	cmp	r2, #0
 800bba6:	dd07      	ble.n	800bbb8 <_dtoa_r+0xad0>
 800bba8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbac:	d0ed      	beq.n	800bb8a <_dtoa_r+0xaa2>
 800bbae:	f10a 0301 	add.w	r3, sl, #1
 800bbb2:	f88b 3000 	strb.w	r3, [fp]
 800bbb6:	e73c      	b.n	800ba32 <_dtoa_r+0x94a>
 800bbb8:	9b05      	ldr	r3, [sp, #20]
 800bbba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bbbe:	4599      	cmp	r9, r3
 800bbc0:	d047      	beq.n	800bc52 <_dtoa_r+0xb6a>
 800bbc2:	ee18 1a10 	vmov	r1, s16
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	220a      	movs	r2, #10
 800bbca:	4620      	mov	r0, r4
 800bbcc:	f000 f9f4 	bl	800bfb8 <__multadd>
 800bbd0:	45b8      	cmp	r8, r7
 800bbd2:	ee08 0a10 	vmov	s16, r0
 800bbd6:	f04f 0300 	mov.w	r3, #0
 800bbda:	f04f 020a 	mov.w	r2, #10
 800bbde:	4641      	mov	r1, r8
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	d106      	bne.n	800bbf2 <_dtoa_r+0xb0a>
 800bbe4:	f000 f9e8 	bl	800bfb8 <__multadd>
 800bbe8:	4680      	mov	r8, r0
 800bbea:	4607      	mov	r7, r0
 800bbec:	f109 0901 	add.w	r9, r9, #1
 800bbf0:	e772      	b.n	800bad8 <_dtoa_r+0x9f0>
 800bbf2:	f000 f9e1 	bl	800bfb8 <__multadd>
 800bbf6:	4639      	mov	r1, r7
 800bbf8:	4680      	mov	r8, r0
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	220a      	movs	r2, #10
 800bbfe:	4620      	mov	r0, r4
 800bc00:	f000 f9da 	bl	800bfb8 <__multadd>
 800bc04:	4607      	mov	r7, r0
 800bc06:	e7f1      	b.n	800bbec <_dtoa_r+0xb04>
 800bc08:	9b03      	ldr	r3, [sp, #12]
 800bc0a:	9302      	str	r3, [sp, #8]
 800bc0c:	9d01      	ldr	r5, [sp, #4]
 800bc0e:	ee18 0a10 	vmov	r0, s16
 800bc12:	4631      	mov	r1, r6
 800bc14:	f7ff f9dc 	bl	800afd0 <quorem>
 800bc18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc1c:	9b01      	ldr	r3, [sp, #4]
 800bc1e:	f805 ab01 	strb.w	sl, [r5], #1
 800bc22:	1aea      	subs	r2, r5, r3
 800bc24:	9b02      	ldr	r3, [sp, #8]
 800bc26:	4293      	cmp	r3, r2
 800bc28:	dd09      	ble.n	800bc3e <_dtoa_r+0xb56>
 800bc2a:	ee18 1a10 	vmov	r1, s16
 800bc2e:	2300      	movs	r3, #0
 800bc30:	220a      	movs	r2, #10
 800bc32:	4620      	mov	r0, r4
 800bc34:	f000 f9c0 	bl	800bfb8 <__multadd>
 800bc38:	ee08 0a10 	vmov	s16, r0
 800bc3c:	e7e7      	b.n	800bc0e <_dtoa_r+0xb26>
 800bc3e:	9b02      	ldr	r3, [sp, #8]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	bfc8      	it	gt
 800bc44:	461d      	movgt	r5, r3
 800bc46:	9b01      	ldr	r3, [sp, #4]
 800bc48:	bfd8      	it	le
 800bc4a:	2501      	movle	r5, #1
 800bc4c:	441d      	add	r5, r3
 800bc4e:	f04f 0800 	mov.w	r8, #0
 800bc52:	ee18 1a10 	vmov	r1, s16
 800bc56:	2201      	movs	r2, #1
 800bc58:	4620      	mov	r0, r4
 800bc5a:	f000 fb5d 	bl	800c318 <__lshift>
 800bc5e:	4631      	mov	r1, r6
 800bc60:	ee08 0a10 	vmov	s16, r0
 800bc64:	f000 fbc8 	bl	800c3f8 <__mcmp>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	dc91      	bgt.n	800bb90 <_dtoa_r+0xaa8>
 800bc6c:	d102      	bne.n	800bc74 <_dtoa_r+0xb8c>
 800bc6e:	f01a 0f01 	tst.w	sl, #1
 800bc72:	d18d      	bne.n	800bb90 <_dtoa_r+0xaa8>
 800bc74:	462b      	mov	r3, r5
 800bc76:	461d      	mov	r5, r3
 800bc78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc7c:	2a30      	cmp	r2, #48	; 0x30
 800bc7e:	d0fa      	beq.n	800bc76 <_dtoa_r+0xb8e>
 800bc80:	e6d7      	b.n	800ba32 <_dtoa_r+0x94a>
 800bc82:	9a01      	ldr	r2, [sp, #4]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d184      	bne.n	800bb92 <_dtoa_r+0xaaa>
 800bc88:	9b00      	ldr	r3, [sp, #0]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	9300      	str	r3, [sp, #0]
 800bc8e:	2331      	movs	r3, #49	; 0x31
 800bc90:	7013      	strb	r3, [r2, #0]
 800bc92:	e6ce      	b.n	800ba32 <_dtoa_r+0x94a>
 800bc94:	4b09      	ldr	r3, [pc, #36]	; (800bcbc <_dtoa_r+0xbd4>)
 800bc96:	f7ff ba95 	b.w	800b1c4 <_dtoa_r+0xdc>
 800bc9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	f47f aa6e 	bne.w	800b17e <_dtoa_r+0x96>
 800bca2:	4b07      	ldr	r3, [pc, #28]	; (800bcc0 <_dtoa_r+0xbd8>)
 800bca4:	f7ff ba8e 	b.w	800b1c4 <_dtoa_r+0xdc>
 800bca8:	9b02      	ldr	r3, [sp, #8]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	dcae      	bgt.n	800bc0c <_dtoa_r+0xb24>
 800bcae:	9b06      	ldr	r3, [sp, #24]
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	f73f aea8 	bgt.w	800ba06 <_dtoa_r+0x91e>
 800bcb6:	e7a9      	b.n	800bc0c <_dtoa_r+0xb24>
 800bcb8:	0800d02b 	.word	0x0800d02b
 800bcbc:	0800cf88 	.word	0x0800cf88
 800bcc0:	0800cfac 	.word	0x0800cfac

0800bcc4 <std>:
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	b510      	push	{r4, lr}
 800bcc8:	4604      	mov	r4, r0
 800bcca:	e9c0 3300 	strd	r3, r3, [r0]
 800bcce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcd2:	6083      	str	r3, [r0, #8]
 800bcd4:	8181      	strh	r1, [r0, #12]
 800bcd6:	6643      	str	r3, [r0, #100]	; 0x64
 800bcd8:	81c2      	strh	r2, [r0, #14]
 800bcda:	6183      	str	r3, [r0, #24]
 800bcdc:	4619      	mov	r1, r3
 800bcde:	2208      	movs	r2, #8
 800bce0:	305c      	adds	r0, #92	; 0x5c
 800bce2:	f7fe fbfb 	bl	800a4dc <memset>
 800bce6:	4b05      	ldr	r3, [pc, #20]	; (800bcfc <std+0x38>)
 800bce8:	6263      	str	r3, [r4, #36]	; 0x24
 800bcea:	4b05      	ldr	r3, [pc, #20]	; (800bd00 <std+0x3c>)
 800bcec:	62a3      	str	r3, [r4, #40]	; 0x28
 800bcee:	4b05      	ldr	r3, [pc, #20]	; (800bd04 <std+0x40>)
 800bcf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bcf2:	4b05      	ldr	r3, [pc, #20]	; (800bd08 <std+0x44>)
 800bcf4:	6224      	str	r4, [r4, #32]
 800bcf6:	6323      	str	r3, [r4, #48]	; 0x30
 800bcf8:	bd10      	pop	{r4, pc}
 800bcfa:	bf00      	nop
 800bcfc:	0800c8dd 	.word	0x0800c8dd
 800bd00:	0800c8ff 	.word	0x0800c8ff
 800bd04:	0800c937 	.word	0x0800c937
 800bd08:	0800c95b 	.word	0x0800c95b

0800bd0c <_cleanup_r>:
 800bd0c:	4901      	ldr	r1, [pc, #4]	; (800bd14 <_cleanup_r+0x8>)
 800bd0e:	f000 b8af 	b.w	800be70 <_fwalk_reent>
 800bd12:	bf00      	nop
 800bd14:	0800cc71 	.word	0x0800cc71

0800bd18 <__sfmoreglue>:
 800bd18:	b570      	push	{r4, r5, r6, lr}
 800bd1a:	2268      	movs	r2, #104	; 0x68
 800bd1c:	1e4d      	subs	r5, r1, #1
 800bd1e:	4355      	muls	r5, r2
 800bd20:	460e      	mov	r6, r1
 800bd22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd26:	f7fe fc4d 	bl	800a5c4 <_malloc_r>
 800bd2a:	4604      	mov	r4, r0
 800bd2c:	b140      	cbz	r0, 800bd40 <__sfmoreglue+0x28>
 800bd2e:	2100      	movs	r1, #0
 800bd30:	e9c0 1600 	strd	r1, r6, [r0]
 800bd34:	300c      	adds	r0, #12
 800bd36:	60a0      	str	r0, [r4, #8]
 800bd38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd3c:	f7fe fbce 	bl	800a4dc <memset>
 800bd40:	4620      	mov	r0, r4
 800bd42:	bd70      	pop	{r4, r5, r6, pc}

0800bd44 <__sfp_lock_acquire>:
 800bd44:	4801      	ldr	r0, [pc, #4]	; (800bd4c <__sfp_lock_acquire+0x8>)
 800bd46:	f000 b8b8 	b.w	800beba <__retarget_lock_acquire_recursive>
 800bd4a:	bf00      	nop
 800bd4c:	2000024d 	.word	0x2000024d

0800bd50 <__sfp_lock_release>:
 800bd50:	4801      	ldr	r0, [pc, #4]	; (800bd58 <__sfp_lock_release+0x8>)
 800bd52:	f000 b8b3 	b.w	800bebc <__retarget_lock_release_recursive>
 800bd56:	bf00      	nop
 800bd58:	2000024d 	.word	0x2000024d

0800bd5c <__sinit_lock_acquire>:
 800bd5c:	4801      	ldr	r0, [pc, #4]	; (800bd64 <__sinit_lock_acquire+0x8>)
 800bd5e:	f000 b8ac 	b.w	800beba <__retarget_lock_acquire_recursive>
 800bd62:	bf00      	nop
 800bd64:	2000024e 	.word	0x2000024e

0800bd68 <__sinit_lock_release>:
 800bd68:	4801      	ldr	r0, [pc, #4]	; (800bd70 <__sinit_lock_release+0x8>)
 800bd6a:	f000 b8a7 	b.w	800bebc <__retarget_lock_release_recursive>
 800bd6e:	bf00      	nop
 800bd70:	2000024e 	.word	0x2000024e

0800bd74 <__sinit>:
 800bd74:	b510      	push	{r4, lr}
 800bd76:	4604      	mov	r4, r0
 800bd78:	f7ff fff0 	bl	800bd5c <__sinit_lock_acquire>
 800bd7c:	69a3      	ldr	r3, [r4, #24]
 800bd7e:	b11b      	cbz	r3, 800bd88 <__sinit+0x14>
 800bd80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd84:	f7ff bff0 	b.w	800bd68 <__sinit_lock_release>
 800bd88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd8c:	6523      	str	r3, [r4, #80]	; 0x50
 800bd8e:	4b13      	ldr	r3, [pc, #76]	; (800bddc <__sinit+0x68>)
 800bd90:	4a13      	ldr	r2, [pc, #76]	; (800bde0 <__sinit+0x6c>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd96:	42a3      	cmp	r3, r4
 800bd98:	bf04      	itt	eq
 800bd9a:	2301      	moveq	r3, #1
 800bd9c:	61a3      	streq	r3, [r4, #24]
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f000 f820 	bl	800bde4 <__sfp>
 800bda4:	6060      	str	r0, [r4, #4]
 800bda6:	4620      	mov	r0, r4
 800bda8:	f000 f81c 	bl	800bde4 <__sfp>
 800bdac:	60a0      	str	r0, [r4, #8]
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f000 f818 	bl	800bde4 <__sfp>
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	60e0      	str	r0, [r4, #12]
 800bdb8:	2104      	movs	r1, #4
 800bdba:	6860      	ldr	r0, [r4, #4]
 800bdbc:	f7ff ff82 	bl	800bcc4 <std>
 800bdc0:	68a0      	ldr	r0, [r4, #8]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	2109      	movs	r1, #9
 800bdc6:	f7ff ff7d 	bl	800bcc4 <std>
 800bdca:	68e0      	ldr	r0, [r4, #12]
 800bdcc:	2202      	movs	r2, #2
 800bdce:	2112      	movs	r1, #18
 800bdd0:	f7ff ff78 	bl	800bcc4 <std>
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	61a3      	str	r3, [r4, #24]
 800bdd8:	e7d2      	b.n	800bd80 <__sinit+0xc>
 800bdda:	bf00      	nop
 800bddc:	0800cf74 	.word	0x0800cf74
 800bde0:	0800bd0d 	.word	0x0800bd0d

0800bde4 <__sfp>:
 800bde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde6:	4607      	mov	r7, r0
 800bde8:	f7ff ffac 	bl	800bd44 <__sfp_lock_acquire>
 800bdec:	4b1e      	ldr	r3, [pc, #120]	; (800be68 <__sfp+0x84>)
 800bdee:	681e      	ldr	r6, [r3, #0]
 800bdf0:	69b3      	ldr	r3, [r6, #24]
 800bdf2:	b913      	cbnz	r3, 800bdfa <__sfp+0x16>
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	f7ff ffbd 	bl	800bd74 <__sinit>
 800bdfa:	3648      	adds	r6, #72	; 0x48
 800bdfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be00:	3b01      	subs	r3, #1
 800be02:	d503      	bpl.n	800be0c <__sfp+0x28>
 800be04:	6833      	ldr	r3, [r6, #0]
 800be06:	b30b      	cbz	r3, 800be4c <__sfp+0x68>
 800be08:	6836      	ldr	r6, [r6, #0]
 800be0a:	e7f7      	b.n	800bdfc <__sfp+0x18>
 800be0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be10:	b9d5      	cbnz	r5, 800be48 <__sfp+0x64>
 800be12:	4b16      	ldr	r3, [pc, #88]	; (800be6c <__sfp+0x88>)
 800be14:	60e3      	str	r3, [r4, #12]
 800be16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be1a:	6665      	str	r5, [r4, #100]	; 0x64
 800be1c:	f000 f84c 	bl	800beb8 <__retarget_lock_init_recursive>
 800be20:	f7ff ff96 	bl	800bd50 <__sfp_lock_release>
 800be24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be2c:	6025      	str	r5, [r4, #0]
 800be2e:	61a5      	str	r5, [r4, #24]
 800be30:	2208      	movs	r2, #8
 800be32:	4629      	mov	r1, r5
 800be34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be38:	f7fe fb50 	bl	800a4dc <memset>
 800be3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be44:	4620      	mov	r0, r4
 800be46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be48:	3468      	adds	r4, #104	; 0x68
 800be4a:	e7d9      	b.n	800be00 <__sfp+0x1c>
 800be4c:	2104      	movs	r1, #4
 800be4e:	4638      	mov	r0, r7
 800be50:	f7ff ff62 	bl	800bd18 <__sfmoreglue>
 800be54:	4604      	mov	r4, r0
 800be56:	6030      	str	r0, [r6, #0]
 800be58:	2800      	cmp	r0, #0
 800be5a:	d1d5      	bne.n	800be08 <__sfp+0x24>
 800be5c:	f7ff ff78 	bl	800bd50 <__sfp_lock_release>
 800be60:	230c      	movs	r3, #12
 800be62:	603b      	str	r3, [r7, #0]
 800be64:	e7ee      	b.n	800be44 <__sfp+0x60>
 800be66:	bf00      	nop
 800be68:	0800cf74 	.word	0x0800cf74
 800be6c:	ffff0001 	.word	0xffff0001

0800be70 <_fwalk_reent>:
 800be70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be74:	4606      	mov	r6, r0
 800be76:	4688      	mov	r8, r1
 800be78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be7c:	2700      	movs	r7, #0
 800be7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be82:	f1b9 0901 	subs.w	r9, r9, #1
 800be86:	d505      	bpl.n	800be94 <_fwalk_reent+0x24>
 800be88:	6824      	ldr	r4, [r4, #0]
 800be8a:	2c00      	cmp	r4, #0
 800be8c:	d1f7      	bne.n	800be7e <_fwalk_reent+0xe>
 800be8e:	4638      	mov	r0, r7
 800be90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be94:	89ab      	ldrh	r3, [r5, #12]
 800be96:	2b01      	cmp	r3, #1
 800be98:	d907      	bls.n	800beaa <_fwalk_reent+0x3a>
 800be9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be9e:	3301      	adds	r3, #1
 800bea0:	d003      	beq.n	800beaa <_fwalk_reent+0x3a>
 800bea2:	4629      	mov	r1, r5
 800bea4:	4630      	mov	r0, r6
 800bea6:	47c0      	blx	r8
 800bea8:	4307      	orrs	r7, r0
 800beaa:	3568      	adds	r5, #104	; 0x68
 800beac:	e7e9      	b.n	800be82 <_fwalk_reent+0x12>
	...

0800beb0 <_localeconv_r>:
 800beb0:	4800      	ldr	r0, [pc, #0]	; (800beb4 <_localeconv_r+0x4>)
 800beb2:	4770      	bx	lr
 800beb4:	20000184 	.word	0x20000184

0800beb8 <__retarget_lock_init_recursive>:
 800beb8:	4770      	bx	lr

0800beba <__retarget_lock_acquire_recursive>:
 800beba:	4770      	bx	lr

0800bebc <__retarget_lock_release_recursive>:
 800bebc:	4770      	bx	lr

0800bebe <memcpy>:
 800bebe:	440a      	add	r2, r1
 800bec0:	4291      	cmp	r1, r2
 800bec2:	f100 33ff 	add.w	r3, r0, #4294967295
 800bec6:	d100      	bne.n	800beca <memcpy+0xc>
 800bec8:	4770      	bx	lr
 800beca:	b510      	push	{r4, lr}
 800becc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bed0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bed4:	4291      	cmp	r1, r2
 800bed6:	d1f9      	bne.n	800becc <memcpy+0xe>
 800bed8:	bd10      	pop	{r4, pc}
	...

0800bedc <__malloc_lock>:
 800bedc:	4801      	ldr	r0, [pc, #4]	; (800bee4 <__malloc_lock+0x8>)
 800bede:	f7ff bfec 	b.w	800beba <__retarget_lock_acquire_recursive>
 800bee2:	bf00      	nop
 800bee4:	2000024c 	.word	0x2000024c

0800bee8 <__malloc_unlock>:
 800bee8:	4801      	ldr	r0, [pc, #4]	; (800bef0 <__malloc_unlock+0x8>)
 800beea:	f7ff bfe7 	b.w	800bebc <__retarget_lock_release_recursive>
 800beee:	bf00      	nop
 800bef0:	2000024c 	.word	0x2000024c

0800bef4 <_Balloc>:
 800bef4:	b570      	push	{r4, r5, r6, lr}
 800bef6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bef8:	4604      	mov	r4, r0
 800befa:	460d      	mov	r5, r1
 800befc:	b976      	cbnz	r6, 800bf1c <_Balloc+0x28>
 800befe:	2010      	movs	r0, #16
 800bf00:	f7fe fadc 	bl	800a4bc <malloc>
 800bf04:	4602      	mov	r2, r0
 800bf06:	6260      	str	r0, [r4, #36]	; 0x24
 800bf08:	b920      	cbnz	r0, 800bf14 <_Balloc+0x20>
 800bf0a:	4b18      	ldr	r3, [pc, #96]	; (800bf6c <_Balloc+0x78>)
 800bf0c:	4818      	ldr	r0, [pc, #96]	; (800bf70 <_Balloc+0x7c>)
 800bf0e:	2166      	movs	r1, #102	; 0x66
 800bf10:	f000 fdfa 	bl	800cb08 <__assert_func>
 800bf14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf18:	6006      	str	r6, [r0, #0]
 800bf1a:	60c6      	str	r6, [r0, #12]
 800bf1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf1e:	68f3      	ldr	r3, [r6, #12]
 800bf20:	b183      	cbz	r3, 800bf44 <_Balloc+0x50>
 800bf22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf24:	68db      	ldr	r3, [r3, #12]
 800bf26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf2a:	b9b8      	cbnz	r0, 800bf5c <_Balloc+0x68>
 800bf2c:	2101      	movs	r1, #1
 800bf2e:	fa01 f605 	lsl.w	r6, r1, r5
 800bf32:	1d72      	adds	r2, r6, #5
 800bf34:	0092      	lsls	r2, r2, #2
 800bf36:	4620      	mov	r0, r4
 800bf38:	f000 fb60 	bl	800c5fc <_calloc_r>
 800bf3c:	b160      	cbz	r0, 800bf58 <_Balloc+0x64>
 800bf3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf42:	e00e      	b.n	800bf62 <_Balloc+0x6e>
 800bf44:	2221      	movs	r2, #33	; 0x21
 800bf46:	2104      	movs	r1, #4
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f000 fb57 	bl	800c5fc <_calloc_r>
 800bf4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf50:	60f0      	str	r0, [r6, #12]
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d1e4      	bne.n	800bf22 <_Balloc+0x2e>
 800bf58:	2000      	movs	r0, #0
 800bf5a:	bd70      	pop	{r4, r5, r6, pc}
 800bf5c:	6802      	ldr	r2, [r0, #0]
 800bf5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf62:	2300      	movs	r3, #0
 800bf64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf68:	e7f7      	b.n	800bf5a <_Balloc+0x66>
 800bf6a:	bf00      	nop
 800bf6c:	0800cfb9 	.word	0x0800cfb9
 800bf70:	0800d09c 	.word	0x0800d09c

0800bf74 <_Bfree>:
 800bf74:	b570      	push	{r4, r5, r6, lr}
 800bf76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf78:	4605      	mov	r5, r0
 800bf7a:	460c      	mov	r4, r1
 800bf7c:	b976      	cbnz	r6, 800bf9c <_Bfree+0x28>
 800bf7e:	2010      	movs	r0, #16
 800bf80:	f7fe fa9c 	bl	800a4bc <malloc>
 800bf84:	4602      	mov	r2, r0
 800bf86:	6268      	str	r0, [r5, #36]	; 0x24
 800bf88:	b920      	cbnz	r0, 800bf94 <_Bfree+0x20>
 800bf8a:	4b09      	ldr	r3, [pc, #36]	; (800bfb0 <_Bfree+0x3c>)
 800bf8c:	4809      	ldr	r0, [pc, #36]	; (800bfb4 <_Bfree+0x40>)
 800bf8e:	218a      	movs	r1, #138	; 0x8a
 800bf90:	f000 fdba 	bl	800cb08 <__assert_func>
 800bf94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf98:	6006      	str	r6, [r0, #0]
 800bf9a:	60c6      	str	r6, [r0, #12]
 800bf9c:	b13c      	cbz	r4, 800bfae <_Bfree+0x3a>
 800bf9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bfa0:	6862      	ldr	r2, [r4, #4]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfa8:	6021      	str	r1, [r4, #0]
 800bfaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfae:	bd70      	pop	{r4, r5, r6, pc}
 800bfb0:	0800cfb9 	.word	0x0800cfb9
 800bfb4:	0800d09c 	.word	0x0800d09c

0800bfb8 <__multadd>:
 800bfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfbc:	690d      	ldr	r5, [r1, #16]
 800bfbe:	4607      	mov	r7, r0
 800bfc0:	460c      	mov	r4, r1
 800bfc2:	461e      	mov	r6, r3
 800bfc4:	f101 0c14 	add.w	ip, r1, #20
 800bfc8:	2000      	movs	r0, #0
 800bfca:	f8dc 3000 	ldr.w	r3, [ip]
 800bfce:	b299      	uxth	r1, r3
 800bfd0:	fb02 6101 	mla	r1, r2, r1, r6
 800bfd4:	0c1e      	lsrs	r6, r3, #16
 800bfd6:	0c0b      	lsrs	r3, r1, #16
 800bfd8:	fb02 3306 	mla	r3, r2, r6, r3
 800bfdc:	b289      	uxth	r1, r1
 800bfde:	3001      	adds	r0, #1
 800bfe0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfe4:	4285      	cmp	r5, r0
 800bfe6:	f84c 1b04 	str.w	r1, [ip], #4
 800bfea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfee:	dcec      	bgt.n	800bfca <__multadd+0x12>
 800bff0:	b30e      	cbz	r6, 800c036 <__multadd+0x7e>
 800bff2:	68a3      	ldr	r3, [r4, #8]
 800bff4:	42ab      	cmp	r3, r5
 800bff6:	dc19      	bgt.n	800c02c <__multadd+0x74>
 800bff8:	6861      	ldr	r1, [r4, #4]
 800bffa:	4638      	mov	r0, r7
 800bffc:	3101      	adds	r1, #1
 800bffe:	f7ff ff79 	bl	800bef4 <_Balloc>
 800c002:	4680      	mov	r8, r0
 800c004:	b928      	cbnz	r0, 800c012 <__multadd+0x5a>
 800c006:	4602      	mov	r2, r0
 800c008:	4b0c      	ldr	r3, [pc, #48]	; (800c03c <__multadd+0x84>)
 800c00a:	480d      	ldr	r0, [pc, #52]	; (800c040 <__multadd+0x88>)
 800c00c:	21b5      	movs	r1, #181	; 0xb5
 800c00e:	f000 fd7b 	bl	800cb08 <__assert_func>
 800c012:	6922      	ldr	r2, [r4, #16]
 800c014:	3202      	adds	r2, #2
 800c016:	f104 010c 	add.w	r1, r4, #12
 800c01a:	0092      	lsls	r2, r2, #2
 800c01c:	300c      	adds	r0, #12
 800c01e:	f7ff ff4e 	bl	800bebe <memcpy>
 800c022:	4621      	mov	r1, r4
 800c024:	4638      	mov	r0, r7
 800c026:	f7ff ffa5 	bl	800bf74 <_Bfree>
 800c02a:	4644      	mov	r4, r8
 800c02c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c030:	3501      	adds	r5, #1
 800c032:	615e      	str	r6, [r3, #20]
 800c034:	6125      	str	r5, [r4, #16]
 800c036:	4620      	mov	r0, r4
 800c038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c03c:	0800d02b 	.word	0x0800d02b
 800c040:	0800d09c 	.word	0x0800d09c

0800c044 <__hi0bits>:
 800c044:	0c03      	lsrs	r3, r0, #16
 800c046:	041b      	lsls	r3, r3, #16
 800c048:	b9d3      	cbnz	r3, 800c080 <__hi0bits+0x3c>
 800c04a:	0400      	lsls	r0, r0, #16
 800c04c:	2310      	movs	r3, #16
 800c04e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c052:	bf04      	itt	eq
 800c054:	0200      	lsleq	r0, r0, #8
 800c056:	3308      	addeq	r3, #8
 800c058:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c05c:	bf04      	itt	eq
 800c05e:	0100      	lsleq	r0, r0, #4
 800c060:	3304      	addeq	r3, #4
 800c062:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c066:	bf04      	itt	eq
 800c068:	0080      	lsleq	r0, r0, #2
 800c06a:	3302      	addeq	r3, #2
 800c06c:	2800      	cmp	r0, #0
 800c06e:	db05      	blt.n	800c07c <__hi0bits+0x38>
 800c070:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c074:	f103 0301 	add.w	r3, r3, #1
 800c078:	bf08      	it	eq
 800c07a:	2320      	moveq	r3, #32
 800c07c:	4618      	mov	r0, r3
 800c07e:	4770      	bx	lr
 800c080:	2300      	movs	r3, #0
 800c082:	e7e4      	b.n	800c04e <__hi0bits+0xa>

0800c084 <__lo0bits>:
 800c084:	6803      	ldr	r3, [r0, #0]
 800c086:	f013 0207 	ands.w	r2, r3, #7
 800c08a:	4601      	mov	r1, r0
 800c08c:	d00b      	beq.n	800c0a6 <__lo0bits+0x22>
 800c08e:	07da      	lsls	r2, r3, #31
 800c090:	d423      	bmi.n	800c0da <__lo0bits+0x56>
 800c092:	0798      	lsls	r0, r3, #30
 800c094:	bf49      	itett	mi
 800c096:	085b      	lsrmi	r3, r3, #1
 800c098:	089b      	lsrpl	r3, r3, #2
 800c09a:	2001      	movmi	r0, #1
 800c09c:	600b      	strmi	r3, [r1, #0]
 800c09e:	bf5c      	itt	pl
 800c0a0:	600b      	strpl	r3, [r1, #0]
 800c0a2:	2002      	movpl	r0, #2
 800c0a4:	4770      	bx	lr
 800c0a6:	b298      	uxth	r0, r3
 800c0a8:	b9a8      	cbnz	r0, 800c0d6 <__lo0bits+0x52>
 800c0aa:	0c1b      	lsrs	r3, r3, #16
 800c0ac:	2010      	movs	r0, #16
 800c0ae:	b2da      	uxtb	r2, r3
 800c0b0:	b90a      	cbnz	r2, 800c0b6 <__lo0bits+0x32>
 800c0b2:	3008      	adds	r0, #8
 800c0b4:	0a1b      	lsrs	r3, r3, #8
 800c0b6:	071a      	lsls	r2, r3, #28
 800c0b8:	bf04      	itt	eq
 800c0ba:	091b      	lsreq	r3, r3, #4
 800c0bc:	3004      	addeq	r0, #4
 800c0be:	079a      	lsls	r2, r3, #30
 800c0c0:	bf04      	itt	eq
 800c0c2:	089b      	lsreq	r3, r3, #2
 800c0c4:	3002      	addeq	r0, #2
 800c0c6:	07da      	lsls	r2, r3, #31
 800c0c8:	d403      	bmi.n	800c0d2 <__lo0bits+0x4e>
 800c0ca:	085b      	lsrs	r3, r3, #1
 800c0cc:	f100 0001 	add.w	r0, r0, #1
 800c0d0:	d005      	beq.n	800c0de <__lo0bits+0x5a>
 800c0d2:	600b      	str	r3, [r1, #0]
 800c0d4:	4770      	bx	lr
 800c0d6:	4610      	mov	r0, r2
 800c0d8:	e7e9      	b.n	800c0ae <__lo0bits+0x2a>
 800c0da:	2000      	movs	r0, #0
 800c0dc:	4770      	bx	lr
 800c0de:	2020      	movs	r0, #32
 800c0e0:	4770      	bx	lr
	...

0800c0e4 <__i2b>:
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	2101      	movs	r1, #1
 800c0ea:	f7ff ff03 	bl	800bef4 <_Balloc>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	b928      	cbnz	r0, 800c0fe <__i2b+0x1a>
 800c0f2:	4b05      	ldr	r3, [pc, #20]	; (800c108 <__i2b+0x24>)
 800c0f4:	4805      	ldr	r0, [pc, #20]	; (800c10c <__i2b+0x28>)
 800c0f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c0fa:	f000 fd05 	bl	800cb08 <__assert_func>
 800c0fe:	2301      	movs	r3, #1
 800c100:	6144      	str	r4, [r0, #20]
 800c102:	6103      	str	r3, [r0, #16]
 800c104:	bd10      	pop	{r4, pc}
 800c106:	bf00      	nop
 800c108:	0800d02b 	.word	0x0800d02b
 800c10c:	0800d09c 	.word	0x0800d09c

0800c110 <__multiply>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	4691      	mov	r9, r2
 800c116:	690a      	ldr	r2, [r1, #16]
 800c118:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	bfb8      	it	lt
 800c120:	460b      	movlt	r3, r1
 800c122:	460c      	mov	r4, r1
 800c124:	bfbc      	itt	lt
 800c126:	464c      	movlt	r4, r9
 800c128:	4699      	movlt	r9, r3
 800c12a:	6927      	ldr	r7, [r4, #16]
 800c12c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c130:	68a3      	ldr	r3, [r4, #8]
 800c132:	6861      	ldr	r1, [r4, #4]
 800c134:	eb07 060a 	add.w	r6, r7, sl
 800c138:	42b3      	cmp	r3, r6
 800c13a:	b085      	sub	sp, #20
 800c13c:	bfb8      	it	lt
 800c13e:	3101      	addlt	r1, #1
 800c140:	f7ff fed8 	bl	800bef4 <_Balloc>
 800c144:	b930      	cbnz	r0, 800c154 <__multiply+0x44>
 800c146:	4602      	mov	r2, r0
 800c148:	4b44      	ldr	r3, [pc, #272]	; (800c25c <__multiply+0x14c>)
 800c14a:	4845      	ldr	r0, [pc, #276]	; (800c260 <__multiply+0x150>)
 800c14c:	f240 115d 	movw	r1, #349	; 0x15d
 800c150:	f000 fcda 	bl	800cb08 <__assert_func>
 800c154:	f100 0514 	add.w	r5, r0, #20
 800c158:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c15c:	462b      	mov	r3, r5
 800c15e:	2200      	movs	r2, #0
 800c160:	4543      	cmp	r3, r8
 800c162:	d321      	bcc.n	800c1a8 <__multiply+0x98>
 800c164:	f104 0314 	add.w	r3, r4, #20
 800c168:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c16c:	f109 0314 	add.w	r3, r9, #20
 800c170:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c174:	9202      	str	r2, [sp, #8]
 800c176:	1b3a      	subs	r2, r7, r4
 800c178:	3a15      	subs	r2, #21
 800c17a:	f022 0203 	bic.w	r2, r2, #3
 800c17e:	3204      	adds	r2, #4
 800c180:	f104 0115 	add.w	r1, r4, #21
 800c184:	428f      	cmp	r7, r1
 800c186:	bf38      	it	cc
 800c188:	2204      	movcc	r2, #4
 800c18a:	9201      	str	r2, [sp, #4]
 800c18c:	9a02      	ldr	r2, [sp, #8]
 800c18e:	9303      	str	r3, [sp, #12]
 800c190:	429a      	cmp	r2, r3
 800c192:	d80c      	bhi.n	800c1ae <__multiply+0x9e>
 800c194:	2e00      	cmp	r6, #0
 800c196:	dd03      	ble.n	800c1a0 <__multiply+0x90>
 800c198:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d05a      	beq.n	800c256 <__multiply+0x146>
 800c1a0:	6106      	str	r6, [r0, #16]
 800c1a2:	b005      	add	sp, #20
 800c1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a8:	f843 2b04 	str.w	r2, [r3], #4
 800c1ac:	e7d8      	b.n	800c160 <__multiply+0x50>
 800c1ae:	f8b3 a000 	ldrh.w	sl, [r3]
 800c1b2:	f1ba 0f00 	cmp.w	sl, #0
 800c1b6:	d024      	beq.n	800c202 <__multiply+0xf2>
 800c1b8:	f104 0e14 	add.w	lr, r4, #20
 800c1bc:	46a9      	mov	r9, r5
 800c1be:	f04f 0c00 	mov.w	ip, #0
 800c1c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c1c6:	f8d9 1000 	ldr.w	r1, [r9]
 800c1ca:	fa1f fb82 	uxth.w	fp, r2
 800c1ce:	b289      	uxth	r1, r1
 800c1d0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c1d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c1d8:	f8d9 2000 	ldr.w	r2, [r9]
 800c1dc:	4461      	add	r1, ip
 800c1de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1e2:	fb0a c20b 	mla	r2, sl, fp, ip
 800c1e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c1ea:	b289      	uxth	r1, r1
 800c1ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c1f0:	4577      	cmp	r7, lr
 800c1f2:	f849 1b04 	str.w	r1, [r9], #4
 800c1f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1fa:	d8e2      	bhi.n	800c1c2 <__multiply+0xb2>
 800c1fc:	9a01      	ldr	r2, [sp, #4]
 800c1fe:	f845 c002 	str.w	ip, [r5, r2]
 800c202:	9a03      	ldr	r2, [sp, #12]
 800c204:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c208:	3304      	adds	r3, #4
 800c20a:	f1b9 0f00 	cmp.w	r9, #0
 800c20e:	d020      	beq.n	800c252 <__multiply+0x142>
 800c210:	6829      	ldr	r1, [r5, #0]
 800c212:	f104 0c14 	add.w	ip, r4, #20
 800c216:	46ae      	mov	lr, r5
 800c218:	f04f 0a00 	mov.w	sl, #0
 800c21c:	f8bc b000 	ldrh.w	fp, [ip]
 800c220:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c224:	fb09 220b 	mla	r2, r9, fp, r2
 800c228:	4492      	add	sl, r2
 800c22a:	b289      	uxth	r1, r1
 800c22c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c230:	f84e 1b04 	str.w	r1, [lr], #4
 800c234:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c238:	f8be 1000 	ldrh.w	r1, [lr]
 800c23c:	0c12      	lsrs	r2, r2, #16
 800c23e:	fb09 1102 	mla	r1, r9, r2, r1
 800c242:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c246:	4567      	cmp	r7, ip
 800c248:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c24c:	d8e6      	bhi.n	800c21c <__multiply+0x10c>
 800c24e:	9a01      	ldr	r2, [sp, #4]
 800c250:	50a9      	str	r1, [r5, r2]
 800c252:	3504      	adds	r5, #4
 800c254:	e79a      	b.n	800c18c <__multiply+0x7c>
 800c256:	3e01      	subs	r6, #1
 800c258:	e79c      	b.n	800c194 <__multiply+0x84>
 800c25a:	bf00      	nop
 800c25c:	0800d02b 	.word	0x0800d02b
 800c260:	0800d09c 	.word	0x0800d09c

0800c264 <__pow5mult>:
 800c264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c268:	4615      	mov	r5, r2
 800c26a:	f012 0203 	ands.w	r2, r2, #3
 800c26e:	4606      	mov	r6, r0
 800c270:	460f      	mov	r7, r1
 800c272:	d007      	beq.n	800c284 <__pow5mult+0x20>
 800c274:	4c25      	ldr	r4, [pc, #148]	; (800c30c <__pow5mult+0xa8>)
 800c276:	3a01      	subs	r2, #1
 800c278:	2300      	movs	r3, #0
 800c27a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c27e:	f7ff fe9b 	bl	800bfb8 <__multadd>
 800c282:	4607      	mov	r7, r0
 800c284:	10ad      	asrs	r5, r5, #2
 800c286:	d03d      	beq.n	800c304 <__pow5mult+0xa0>
 800c288:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c28a:	b97c      	cbnz	r4, 800c2ac <__pow5mult+0x48>
 800c28c:	2010      	movs	r0, #16
 800c28e:	f7fe f915 	bl	800a4bc <malloc>
 800c292:	4602      	mov	r2, r0
 800c294:	6270      	str	r0, [r6, #36]	; 0x24
 800c296:	b928      	cbnz	r0, 800c2a4 <__pow5mult+0x40>
 800c298:	4b1d      	ldr	r3, [pc, #116]	; (800c310 <__pow5mult+0xac>)
 800c29a:	481e      	ldr	r0, [pc, #120]	; (800c314 <__pow5mult+0xb0>)
 800c29c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c2a0:	f000 fc32 	bl	800cb08 <__assert_func>
 800c2a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2a8:	6004      	str	r4, [r0, #0]
 800c2aa:	60c4      	str	r4, [r0, #12]
 800c2ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c2b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2b4:	b94c      	cbnz	r4, 800c2ca <__pow5mult+0x66>
 800c2b6:	f240 2171 	movw	r1, #625	; 0x271
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	f7ff ff12 	bl	800c0e4 <__i2b>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	6003      	str	r3, [r0, #0]
 800c2ca:	f04f 0900 	mov.w	r9, #0
 800c2ce:	07eb      	lsls	r3, r5, #31
 800c2d0:	d50a      	bpl.n	800c2e8 <__pow5mult+0x84>
 800c2d2:	4639      	mov	r1, r7
 800c2d4:	4622      	mov	r2, r4
 800c2d6:	4630      	mov	r0, r6
 800c2d8:	f7ff ff1a 	bl	800c110 <__multiply>
 800c2dc:	4639      	mov	r1, r7
 800c2de:	4680      	mov	r8, r0
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	f7ff fe47 	bl	800bf74 <_Bfree>
 800c2e6:	4647      	mov	r7, r8
 800c2e8:	106d      	asrs	r5, r5, #1
 800c2ea:	d00b      	beq.n	800c304 <__pow5mult+0xa0>
 800c2ec:	6820      	ldr	r0, [r4, #0]
 800c2ee:	b938      	cbnz	r0, 800c300 <__pow5mult+0x9c>
 800c2f0:	4622      	mov	r2, r4
 800c2f2:	4621      	mov	r1, r4
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	f7ff ff0b 	bl	800c110 <__multiply>
 800c2fa:	6020      	str	r0, [r4, #0]
 800c2fc:	f8c0 9000 	str.w	r9, [r0]
 800c300:	4604      	mov	r4, r0
 800c302:	e7e4      	b.n	800c2ce <__pow5mult+0x6a>
 800c304:	4638      	mov	r0, r7
 800c306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c30a:	bf00      	nop
 800c30c:	0800d1e8 	.word	0x0800d1e8
 800c310:	0800cfb9 	.word	0x0800cfb9
 800c314:	0800d09c 	.word	0x0800d09c

0800c318 <__lshift>:
 800c318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c31c:	460c      	mov	r4, r1
 800c31e:	6849      	ldr	r1, [r1, #4]
 800c320:	6923      	ldr	r3, [r4, #16]
 800c322:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c326:	68a3      	ldr	r3, [r4, #8]
 800c328:	4607      	mov	r7, r0
 800c32a:	4691      	mov	r9, r2
 800c32c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c330:	f108 0601 	add.w	r6, r8, #1
 800c334:	42b3      	cmp	r3, r6
 800c336:	db0b      	blt.n	800c350 <__lshift+0x38>
 800c338:	4638      	mov	r0, r7
 800c33a:	f7ff fddb 	bl	800bef4 <_Balloc>
 800c33e:	4605      	mov	r5, r0
 800c340:	b948      	cbnz	r0, 800c356 <__lshift+0x3e>
 800c342:	4602      	mov	r2, r0
 800c344:	4b2a      	ldr	r3, [pc, #168]	; (800c3f0 <__lshift+0xd8>)
 800c346:	482b      	ldr	r0, [pc, #172]	; (800c3f4 <__lshift+0xdc>)
 800c348:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c34c:	f000 fbdc 	bl	800cb08 <__assert_func>
 800c350:	3101      	adds	r1, #1
 800c352:	005b      	lsls	r3, r3, #1
 800c354:	e7ee      	b.n	800c334 <__lshift+0x1c>
 800c356:	2300      	movs	r3, #0
 800c358:	f100 0114 	add.w	r1, r0, #20
 800c35c:	f100 0210 	add.w	r2, r0, #16
 800c360:	4618      	mov	r0, r3
 800c362:	4553      	cmp	r3, sl
 800c364:	db37      	blt.n	800c3d6 <__lshift+0xbe>
 800c366:	6920      	ldr	r0, [r4, #16]
 800c368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c36c:	f104 0314 	add.w	r3, r4, #20
 800c370:	f019 091f 	ands.w	r9, r9, #31
 800c374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c378:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c37c:	d02f      	beq.n	800c3de <__lshift+0xc6>
 800c37e:	f1c9 0e20 	rsb	lr, r9, #32
 800c382:	468a      	mov	sl, r1
 800c384:	f04f 0c00 	mov.w	ip, #0
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	fa02 f209 	lsl.w	r2, r2, r9
 800c38e:	ea42 020c 	orr.w	r2, r2, ip
 800c392:	f84a 2b04 	str.w	r2, [sl], #4
 800c396:	f853 2b04 	ldr.w	r2, [r3], #4
 800c39a:	4298      	cmp	r0, r3
 800c39c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c3a0:	d8f2      	bhi.n	800c388 <__lshift+0x70>
 800c3a2:	1b03      	subs	r3, r0, r4
 800c3a4:	3b15      	subs	r3, #21
 800c3a6:	f023 0303 	bic.w	r3, r3, #3
 800c3aa:	3304      	adds	r3, #4
 800c3ac:	f104 0215 	add.w	r2, r4, #21
 800c3b0:	4290      	cmp	r0, r2
 800c3b2:	bf38      	it	cc
 800c3b4:	2304      	movcc	r3, #4
 800c3b6:	f841 c003 	str.w	ip, [r1, r3]
 800c3ba:	f1bc 0f00 	cmp.w	ip, #0
 800c3be:	d001      	beq.n	800c3c4 <__lshift+0xac>
 800c3c0:	f108 0602 	add.w	r6, r8, #2
 800c3c4:	3e01      	subs	r6, #1
 800c3c6:	4638      	mov	r0, r7
 800c3c8:	612e      	str	r6, [r5, #16]
 800c3ca:	4621      	mov	r1, r4
 800c3cc:	f7ff fdd2 	bl	800bf74 <_Bfree>
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3da:	3301      	adds	r3, #1
 800c3dc:	e7c1      	b.n	800c362 <__lshift+0x4a>
 800c3de:	3904      	subs	r1, #4
 800c3e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3e8:	4298      	cmp	r0, r3
 800c3ea:	d8f9      	bhi.n	800c3e0 <__lshift+0xc8>
 800c3ec:	e7ea      	b.n	800c3c4 <__lshift+0xac>
 800c3ee:	bf00      	nop
 800c3f0:	0800d02b 	.word	0x0800d02b
 800c3f4:	0800d09c 	.word	0x0800d09c

0800c3f8 <__mcmp>:
 800c3f8:	b530      	push	{r4, r5, lr}
 800c3fa:	6902      	ldr	r2, [r0, #16]
 800c3fc:	690c      	ldr	r4, [r1, #16]
 800c3fe:	1b12      	subs	r2, r2, r4
 800c400:	d10e      	bne.n	800c420 <__mcmp+0x28>
 800c402:	f100 0314 	add.w	r3, r0, #20
 800c406:	3114      	adds	r1, #20
 800c408:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c40c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c410:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c414:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c418:	42a5      	cmp	r5, r4
 800c41a:	d003      	beq.n	800c424 <__mcmp+0x2c>
 800c41c:	d305      	bcc.n	800c42a <__mcmp+0x32>
 800c41e:	2201      	movs	r2, #1
 800c420:	4610      	mov	r0, r2
 800c422:	bd30      	pop	{r4, r5, pc}
 800c424:	4283      	cmp	r3, r0
 800c426:	d3f3      	bcc.n	800c410 <__mcmp+0x18>
 800c428:	e7fa      	b.n	800c420 <__mcmp+0x28>
 800c42a:	f04f 32ff 	mov.w	r2, #4294967295
 800c42e:	e7f7      	b.n	800c420 <__mcmp+0x28>

0800c430 <__mdiff>:
 800c430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c434:	460c      	mov	r4, r1
 800c436:	4606      	mov	r6, r0
 800c438:	4611      	mov	r1, r2
 800c43a:	4620      	mov	r0, r4
 800c43c:	4690      	mov	r8, r2
 800c43e:	f7ff ffdb 	bl	800c3f8 <__mcmp>
 800c442:	1e05      	subs	r5, r0, #0
 800c444:	d110      	bne.n	800c468 <__mdiff+0x38>
 800c446:	4629      	mov	r1, r5
 800c448:	4630      	mov	r0, r6
 800c44a:	f7ff fd53 	bl	800bef4 <_Balloc>
 800c44e:	b930      	cbnz	r0, 800c45e <__mdiff+0x2e>
 800c450:	4b3a      	ldr	r3, [pc, #232]	; (800c53c <__mdiff+0x10c>)
 800c452:	4602      	mov	r2, r0
 800c454:	f240 2132 	movw	r1, #562	; 0x232
 800c458:	4839      	ldr	r0, [pc, #228]	; (800c540 <__mdiff+0x110>)
 800c45a:	f000 fb55 	bl	800cb08 <__assert_func>
 800c45e:	2301      	movs	r3, #1
 800c460:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c464:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c468:	bfa4      	itt	ge
 800c46a:	4643      	movge	r3, r8
 800c46c:	46a0      	movge	r8, r4
 800c46e:	4630      	mov	r0, r6
 800c470:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c474:	bfa6      	itte	ge
 800c476:	461c      	movge	r4, r3
 800c478:	2500      	movge	r5, #0
 800c47a:	2501      	movlt	r5, #1
 800c47c:	f7ff fd3a 	bl	800bef4 <_Balloc>
 800c480:	b920      	cbnz	r0, 800c48c <__mdiff+0x5c>
 800c482:	4b2e      	ldr	r3, [pc, #184]	; (800c53c <__mdiff+0x10c>)
 800c484:	4602      	mov	r2, r0
 800c486:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c48a:	e7e5      	b.n	800c458 <__mdiff+0x28>
 800c48c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c490:	6926      	ldr	r6, [r4, #16]
 800c492:	60c5      	str	r5, [r0, #12]
 800c494:	f104 0914 	add.w	r9, r4, #20
 800c498:	f108 0514 	add.w	r5, r8, #20
 800c49c:	f100 0e14 	add.w	lr, r0, #20
 800c4a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c4a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c4a8:	f108 0210 	add.w	r2, r8, #16
 800c4ac:	46f2      	mov	sl, lr
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c4b8:	fa1f f883 	uxth.w	r8, r3
 800c4bc:	fa11 f18b 	uxtah	r1, r1, fp
 800c4c0:	0c1b      	lsrs	r3, r3, #16
 800c4c2:	eba1 0808 	sub.w	r8, r1, r8
 800c4c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c4ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c4ce:	fa1f f888 	uxth.w	r8, r8
 800c4d2:	1419      	asrs	r1, r3, #16
 800c4d4:	454e      	cmp	r6, r9
 800c4d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c4da:	f84a 3b04 	str.w	r3, [sl], #4
 800c4de:	d8e7      	bhi.n	800c4b0 <__mdiff+0x80>
 800c4e0:	1b33      	subs	r3, r6, r4
 800c4e2:	3b15      	subs	r3, #21
 800c4e4:	f023 0303 	bic.w	r3, r3, #3
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	3415      	adds	r4, #21
 800c4ec:	42a6      	cmp	r6, r4
 800c4ee:	bf38      	it	cc
 800c4f0:	2304      	movcc	r3, #4
 800c4f2:	441d      	add	r5, r3
 800c4f4:	4473      	add	r3, lr
 800c4f6:	469e      	mov	lr, r3
 800c4f8:	462e      	mov	r6, r5
 800c4fa:	4566      	cmp	r6, ip
 800c4fc:	d30e      	bcc.n	800c51c <__mdiff+0xec>
 800c4fe:	f10c 0203 	add.w	r2, ip, #3
 800c502:	1b52      	subs	r2, r2, r5
 800c504:	f022 0203 	bic.w	r2, r2, #3
 800c508:	3d03      	subs	r5, #3
 800c50a:	45ac      	cmp	ip, r5
 800c50c:	bf38      	it	cc
 800c50e:	2200      	movcc	r2, #0
 800c510:	441a      	add	r2, r3
 800c512:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c516:	b17b      	cbz	r3, 800c538 <__mdiff+0x108>
 800c518:	6107      	str	r7, [r0, #16]
 800c51a:	e7a3      	b.n	800c464 <__mdiff+0x34>
 800c51c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c520:	fa11 f288 	uxtah	r2, r1, r8
 800c524:	1414      	asrs	r4, r2, #16
 800c526:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c52a:	b292      	uxth	r2, r2
 800c52c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c530:	f84e 2b04 	str.w	r2, [lr], #4
 800c534:	1421      	asrs	r1, r4, #16
 800c536:	e7e0      	b.n	800c4fa <__mdiff+0xca>
 800c538:	3f01      	subs	r7, #1
 800c53a:	e7ea      	b.n	800c512 <__mdiff+0xe2>
 800c53c:	0800d02b 	.word	0x0800d02b
 800c540:	0800d09c 	.word	0x0800d09c

0800c544 <__d2b>:
 800c544:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c548:	4689      	mov	r9, r1
 800c54a:	2101      	movs	r1, #1
 800c54c:	ec57 6b10 	vmov	r6, r7, d0
 800c550:	4690      	mov	r8, r2
 800c552:	f7ff fccf 	bl	800bef4 <_Balloc>
 800c556:	4604      	mov	r4, r0
 800c558:	b930      	cbnz	r0, 800c568 <__d2b+0x24>
 800c55a:	4602      	mov	r2, r0
 800c55c:	4b25      	ldr	r3, [pc, #148]	; (800c5f4 <__d2b+0xb0>)
 800c55e:	4826      	ldr	r0, [pc, #152]	; (800c5f8 <__d2b+0xb4>)
 800c560:	f240 310a 	movw	r1, #778	; 0x30a
 800c564:	f000 fad0 	bl	800cb08 <__assert_func>
 800c568:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c56c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c570:	bb35      	cbnz	r5, 800c5c0 <__d2b+0x7c>
 800c572:	2e00      	cmp	r6, #0
 800c574:	9301      	str	r3, [sp, #4]
 800c576:	d028      	beq.n	800c5ca <__d2b+0x86>
 800c578:	4668      	mov	r0, sp
 800c57a:	9600      	str	r6, [sp, #0]
 800c57c:	f7ff fd82 	bl	800c084 <__lo0bits>
 800c580:	9900      	ldr	r1, [sp, #0]
 800c582:	b300      	cbz	r0, 800c5c6 <__d2b+0x82>
 800c584:	9a01      	ldr	r2, [sp, #4]
 800c586:	f1c0 0320 	rsb	r3, r0, #32
 800c58a:	fa02 f303 	lsl.w	r3, r2, r3
 800c58e:	430b      	orrs	r3, r1
 800c590:	40c2      	lsrs	r2, r0
 800c592:	6163      	str	r3, [r4, #20]
 800c594:	9201      	str	r2, [sp, #4]
 800c596:	9b01      	ldr	r3, [sp, #4]
 800c598:	61a3      	str	r3, [r4, #24]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	bf14      	ite	ne
 800c59e:	2202      	movne	r2, #2
 800c5a0:	2201      	moveq	r2, #1
 800c5a2:	6122      	str	r2, [r4, #16]
 800c5a4:	b1d5      	cbz	r5, 800c5dc <__d2b+0x98>
 800c5a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c5aa:	4405      	add	r5, r0
 800c5ac:	f8c9 5000 	str.w	r5, [r9]
 800c5b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5b4:	f8c8 0000 	str.w	r0, [r8]
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	b003      	add	sp, #12
 800c5bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5c4:	e7d5      	b.n	800c572 <__d2b+0x2e>
 800c5c6:	6161      	str	r1, [r4, #20]
 800c5c8:	e7e5      	b.n	800c596 <__d2b+0x52>
 800c5ca:	a801      	add	r0, sp, #4
 800c5cc:	f7ff fd5a 	bl	800c084 <__lo0bits>
 800c5d0:	9b01      	ldr	r3, [sp, #4]
 800c5d2:	6163      	str	r3, [r4, #20]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	6122      	str	r2, [r4, #16]
 800c5d8:	3020      	adds	r0, #32
 800c5da:	e7e3      	b.n	800c5a4 <__d2b+0x60>
 800c5dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c5e4:	f8c9 0000 	str.w	r0, [r9]
 800c5e8:	6918      	ldr	r0, [r3, #16]
 800c5ea:	f7ff fd2b 	bl	800c044 <__hi0bits>
 800c5ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5f2:	e7df      	b.n	800c5b4 <__d2b+0x70>
 800c5f4:	0800d02b 	.word	0x0800d02b
 800c5f8:	0800d09c 	.word	0x0800d09c

0800c5fc <_calloc_r>:
 800c5fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5fe:	fba1 2402 	umull	r2, r4, r1, r2
 800c602:	b94c      	cbnz	r4, 800c618 <_calloc_r+0x1c>
 800c604:	4611      	mov	r1, r2
 800c606:	9201      	str	r2, [sp, #4]
 800c608:	f7fd ffdc 	bl	800a5c4 <_malloc_r>
 800c60c:	9a01      	ldr	r2, [sp, #4]
 800c60e:	4605      	mov	r5, r0
 800c610:	b930      	cbnz	r0, 800c620 <_calloc_r+0x24>
 800c612:	4628      	mov	r0, r5
 800c614:	b003      	add	sp, #12
 800c616:	bd30      	pop	{r4, r5, pc}
 800c618:	220c      	movs	r2, #12
 800c61a:	6002      	str	r2, [r0, #0]
 800c61c:	2500      	movs	r5, #0
 800c61e:	e7f8      	b.n	800c612 <_calloc_r+0x16>
 800c620:	4621      	mov	r1, r4
 800c622:	f7fd ff5b 	bl	800a4dc <memset>
 800c626:	e7f4      	b.n	800c612 <_calloc_r+0x16>

0800c628 <__sfputc_r>:
 800c628:	6893      	ldr	r3, [r2, #8]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	b410      	push	{r4}
 800c630:	6093      	str	r3, [r2, #8]
 800c632:	da08      	bge.n	800c646 <__sfputc_r+0x1e>
 800c634:	6994      	ldr	r4, [r2, #24]
 800c636:	42a3      	cmp	r3, r4
 800c638:	db01      	blt.n	800c63e <__sfputc_r+0x16>
 800c63a:	290a      	cmp	r1, #10
 800c63c:	d103      	bne.n	800c646 <__sfputc_r+0x1e>
 800c63e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c642:	f000 b98f 	b.w	800c964 <__swbuf_r>
 800c646:	6813      	ldr	r3, [r2, #0]
 800c648:	1c58      	adds	r0, r3, #1
 800c64a:	6010      	str	r0, [r2, #0]
 800c64c:	7019      	strb	r1, [r3, #0]
 800c64e:	4608      	mov	r0, r1
 800c650:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c654:	4770      	bx	lr

0800c656 <__sfputs_r>:
 800c656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c658:	4606      	mov	r6, r0
 800c65a:	460f      	mov	r7, r1
 800c65c:	4614      	mov	r4, r2
 800c65e:	18d5      	adds	r5, r2, r3
 800c660:	42ac      	cmp	r4, r5
 800c662:	d101      	bne.n	800c668 <__sfputs_r+0x12>
 800c664:	2000      	movs	r0, #0
 800c666:	e007      	b.n	800c678 <__sfputs_r+0x22>
 800c668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c66c:	463a      	mov	r2, r7
 800c66e:	4630      	mov	r0, r6
 800c670:	f7ff ffda 	bl	800c628 <__sfputc_r>
 800c674:	1c43      	adds	r3, r0, #1
 800c676:	d1f3      	bne.n	800c660 <__sfputs_r+0xa>
 800c678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c67c <_vfiprintf_r>:
 800c67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c680:	460d      	mov	r5, r1
 800c682:	b09d      	sub	sp, #116	; 0x74
 800c684:	4614      	mov	r4, r2
 800c686:	4698      	mov	r8, r3
 800c688:	4606      	mov	r6, r0
 800c68a:	b118      	cbz	r0, 800c694 <_vfiprintf_r+0x18>
 800c68c:	6983      	ldr	r3, [r0, #24]
 800c68e:	b90b      	cbnz	r3, 800c694 <_vfiprintf_r+0x18>
 800c690:	f7ff fb70 	bl	800bd74 <__sinit>
 800c694:	4b89      	ldr	r3, [pc, #548]	; (800c8bc <_vfiprintf_r+0x240>)
 800c696:	429d      	cmp	r5, r3
 800c698:	d11b      	bne.n	800c6d2 <_vfiprintf_r+0x56>
 800c69a:	6875      	ldr	r5, [r6, #4]
 800c69c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c69e:	07d9      	lsls	r1, r3, #31
 800c6a0:	d405      	bmi.n	800c6ae <_vfiprintf_r+0x32>
 800c6a2:	89ab      	ldrh	r3, [r5, #12]
 800c6a4:	059a      	lsls	r2, r3, #22
 800c6a6:	d402      	bmi.n	800c6ae <_vfiprintf_r+0x32>
 800c6a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6aa:	f7ff fc06 	bl	800beba <__retarget_lock_acquire_recursive>
 800c6ae:	89ab      	ldrh	r3, [r5, #12]
 800c6b0:	071b      	lsls	r3, r3, #28
 800c6b2:	d501      	bpl.n	800c6b8 <_vfiprintf_r+0x3c>
 800c6b4:	692b      	ldr	r3, [r5, #16]
 800c6b6:	b9eb      	cbnz	r3, 800c6f4 <_vfiprintf_r+0x78>
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	f000 f9b6 	bl	800ca2c <__swsetup_r>
 800c6c0:	b1c0      	cbz	r0, 800c6f4 <_vfiprintf_r+0x78>
 800c6c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6c4:	07dc      	lsls	r4, r3, #31
 800c6c6:	d50e      	bpl.n	800c6e6 <_vfiprintf_r+0x6a>
 800c6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6cc:	b01d      	add	sp, #116	; 0x74
 800c6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d2:	4b7b      	ldr	r3, [pc, #492]	; (800c8c0 <_vfiprintf_r+0x244>)
 800c6d4:	429d      	cmp	r5, r3
 800c6d6:	d101      	bne.n	800c6dc <_vfiprintf_r+0x60>
 800c6d8:	68b5      	ldr	r5, [r6, #8]
 800c6da:	e7df      	b.n	800c69c <_vfiprintf_r+0x20>
 800c6dc:	4b79      	ldr	r3, [pc, #484]	; (800c8c4 <_vfiprintf_r+0x248>)
 800c6de:	429d      	cmp	r5, r3
 800c6e0:	bf08      	it	eq
 800c6e2:	68f5      	ldreq	r5, [r6, #12]
 800c6e4:	e7da      	b.n	800c69c <_vfiprintf_r+0x20>
 800c6e6:	89ab      	ldrh	r3, [r5, #12]
 800c6e8:	0598      	lsls	r0, r3, #22
 800c6ea:	d4ed      	bmi.n	800c6c8 <_vfiprintf_r+0x4c>
 800c6ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6ee:	f7ff fbe5 	bl	800bebc <__retarget_lock_release_recursive>
 800c6f2:	e7e9      	b.n	800c6c8 <_vfiprintf_r+0x4c>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6f8:	2320      	movs	r3, #32
 800c6fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800c702:	2330      	movs	r3, #48	; 0x30
 800c704:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c8c8 <_vfiprintf_r+0x24c>
 800c708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c70c:	f04f 0901 	mov.w	r9, #1
 800c710:	4623      	mov	r3, r4
 800c712:	469a      	mov	sl, r3
 800c714:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c718:	b10a      	cbz	r2, 800c71e <_vfiprintf_r+0xa2>
 800c71a:	2a25      	cmp	r2, #37	; 0x25
 800c71c:	d1f9      	bne.n	800c712 <_vfiprintf_r+0x96>
 800c71e:	ebba 0b04 	subs.w	fp, sl, r4
 800c722:	d00b      	beq.n	800c73c <_vfiprintf_r+0xc0>
 800c724:	465b      	mov	r3, fp
 800c726:	4622      	mov	r2, r4
 800c728:	4629      	mov	r1, r5
 800c72a:	4630      	mov	r0, r6
 800c72c:	f7ff ff93 	bl	800c656 <__sfputs_r>
 800c730:	3001      	adds	r0, #1
 800c732:	f000 80aa 	beq.w	800c88a <_vfiprintf_r+0x20e>
 800c736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c738:	445a      	add	r2, fp
 800c73a:	9209      	str	r2, [sp, #36]	; 0x24
 800c73c:	f89a 3000 	ldrb.w	r3, [sl]
 800c740:	2b00      	cmp	r3, #0
 800c742:	f000 80a2 	beq.w	800c88a <_vfiprintf_r+0x20e>
 800c746:	2300      	movs	r3, #0
 800c748:	f04f 32ff 	mov.w	r2, #4294967295
 800c74c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c750:	f10a 0a01 	add.w	sl, sl, #1
 800c754:	9304      	str	r3, [sp, #16]
 800c756:	9307      	str	r3, [sp, #28]
 800c758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c75c:	931a      	str	r3, [sp, #104]	; 0x68
 800c75e:	4654      	mov	r4, sl
 800c760:	2205      	movs	r2, #5
 800c762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c766:	4858      	ldr	r0, [pc, #352]	; (800c8c8 <_vfiprintf_r+0x24c>)
 800c768:	f7f3 fd42 	bl	80001f0 <memchr>
 800c76c:	9a04      	ldr	r2, [sp, #16]
 800c76e:	b9d8      	cbnz	r0, 800c7a8 <_vfiprintf_r+0x12c>
 800c770:	06d1      	lsls	r1, r2, #27
 800c772:	bf44      	itt	mi
 800c774:	2320      	movmi	r3, #32
 800c776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c77a:	0713      	lsls	r3, r2, #28
 800c77c:	bf44      	itt	mi
 800c77e:	232b      	movmi	r3, #43	; 0x2b
 800c780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c784:	f89a 3000 	ldrb.w	r3, [sl]
 800c788:	2b2a      	cmp	r3, #42	; 0x2a
 800c78a:	d015      	beq.n	800c7b8 <_vfiprintf_r+0x13c>
 800c78c:	9a07      	ldr	r2, [sp, #28]
 800c78e:	4654      	mov	r4, sl
 800c790:	2000      	movs	r0, #0
 800c792:	f04f 0c0a 	mov.w	ip, #10
 800c796:	4621      	mov	r1, r4
 800c798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c79c:	3b30      	subs	r3, #48	; 0x30
 800c79e:	2b09      	cmp	r3, #9
 800c7a0:	d94e      	bls.n	800c840 <_vfiprintf_r+0x1c4>
 800c7a2:	b1b0      	cbz	r0, 800c7d2 <_vfiprintf_r+0x156>
 800c7a4:	9207      	str	r2, [sp, #28]
 800c7a6:	e014      	b.n	800c7d2 <_vfiprintf_r+0x156>
 800c7a8:	eba0 0308 	sub.w	r3, r0, r8
 800c7ac:	fa09 f303 	lsl.w	r3, r9, r3
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	9304      	str	r3, [sp, #16]
 800c7b4:	46a2      	mov	sl, r4
 800c7b6:	e7d2      	b.n	800c75e <_vfiprintf_r+0xe2>
 800c7b8:	9b03      	ldr	r3, [sp, #12]
 800c7ba:	1d19      	adds	r1, r3, #4
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	9103      	str	r1, [sp, #12]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	bfbb      	ittet	lt
 800c7c4:	425b      	neglt	r3, r3
 800c7c6:	f042 0202 	orrlt.w	r2, r2, #2
 800c7ca:	9307      	strge	r3, [sp, #28]
 800c7cc:	9307      	strlt	r3, [sp, #28]
 800c7ce:	bfb8      	it	lt
 800c7d0:	9204      	strlt	r2, [sp, #16]
 800c7d2:	7823      	ldrb	r3, [r4, #0]
 800c7d4:	2b2e      	cmp	r3, #46	; 0x2e
 800c7d6:	d10c      	bne.n	800c7f2 <_vfiprintf_r+0x176>
 800c7d8:	7863      	ldrb	r3, [r4, #1]
 800c7da:	2b2a      	cmp	r3, #42	; 0x2a
 800c7dc:	d135      	bne.n	800c84a <_vfiprintf_r+0x1ce>
 800c7de:	9b03      	ldr	r3, [sp, #12]
 800c7e0:	1d1a      	adds	r2, r3, #4
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	9203      	str	r2, [sp, #12]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	bfb8      	it	lt
 800c7ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7ee:	3402      	adds	r4, #2
 800c7f0:	9305      	str	r3, [sp, #20]
 800c7f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c8d8 <_vfiprintf_r+0x25c>
 800c7f6:	7821      	ldrb	r1, [r4, #0]
 800c7f8:	2203      	movs	r2, #3
 800c7fa:	4650      	mov	r0, sl
 800c7fc:	f7f3 fcf8 	bl	80001f0 <memchr>
 800c800:	b140      	cbz	r0, 800c814 <_vfiprintf_r+0x198>
 800c802:	2340      	movs	r3, #64	; 0x40
 800c804:	eba0 000a 	sub.w	r0, r0, sl
 800c808:	fa03 f000 	lsl.w	r0, r3, r0
 800c80c:	9b04      	ldr	r3, [sp, #16]
 800c80e:	4303      	orrs	r3, r0
 800c810:	3401      	adds	r4, #1
 800c812:	9304      	str	r3, [sp, #16]
 800c814:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c818:	482c      	ldr	r0, [pc, #176]	; (800c8cc <_vfiprintf_r+0x250>)
 800c81a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c81e:	2206      	movs	r2, #6
 800c820:	f7f3 fce6 	bl	80001f0 <memchr>
 800c824:	2800      	cmp	r0, #0
 800c826:	d03f      	beq.n	800c8a8 <_vfiprintf_r+0x22c>
 800c828:	4b29      	ldr	r3, [pc, #164]	; (800c8d0 <_vfiprintf_r+0x254>)
 800c82a:	bb1b      	cbnz	r3, 800c874 <_vfiprintf_r+0x1f8>
 800c82c:	9b03      	ldr	r3, [sp, #12]
 800c82e:	3307      	adds	r3, #7
 800c830:	f023 0307 	bic.w	r3, r3, #7
 800c834:	3308      	adds	r3, #8
 800c836:	9303      	str	r3, [sp, #12]
 800c838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c83a:	443b      	add	r3, r7
 800c83c:	9309      	str	r3, [sp, #36]	; 0x24
 800c83e:	e767      	b.n	800c710 <_vfiprintf_r+0x94>
 800c840:	fb0c 3202 	mla	r2, ip, r2, r3
 800c844:	460c      	mov	r4, r1
 800c846:	2001      	movs	r0, #1
 800c848:	e7a5      	b.n	800c796 <_vfiprintf_r+0x11a>
 800c84a:	2300      	movs	r3, #0
 800c84c:	3401      	adds	r4, #1
 800c84e:	9305      	str	r3, [sp, #20]
 800c850:	4619      	mov	r1, r3
 800c852:	f04f 0c0a 	mov.w	ip, #10
 800c856:	4620      	mov	r0, r4
 800c858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c85c:	3a30      	subs	r2, #48	; 0x30
 800c85e:	2a09      	cmp	r2, #9
 800c860:	d903      	bls.n	800c86a <_vfiprintf_r+0x1ee>
 800c862:	2b00      	cmp	r3, #0
 800c864:	d0c5      	beq.n	800c7f2 <_vfiprintf_r+0x176>
 800c866:	9105      	str	r1, [sp, #20]
 800c868:	e7c3      	b.n	800c7f2 <_vfiprintf_r+0x176>
 800c86a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c86e:	4604      	mov	r4, r0
 800c870:	2301      	movs	r3, #1
 800c872:	e7f0      	b.n	800c856 <_vfiprintf_r+0x1da>
 800c874:	ab03      	add	r3, sp, #12
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	462a      	mov	r2, r5
 800c87a:	4b16      	ldr	r3, [pc, #88]	; (800c8d4 <_vfiprintf_r+0x258>)
 800c87c:	a904      	add	r1, sp, #16
 800c87e:	4630      	mov	r0, r6
 800c880:	f7fd ffb4 	bl	800a7ec <_printf_float>
 800c884:	4607      	mov	r7, r0
 800c886:	1c78      	adds	r0, r7, #1
 800c888:	d1d6      	bne.n	800c838 <_vfiprintf_r+0x1bc>
 800c88a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c88c:	07d9      	lsls	r1, r3, #31
 800c88e:	d405      	bmi.n	800c89c <_vfiprintf_r+0x220>
 800c890:	89ab      	ldrh	r3, [r5, #12]
 800c892:	059a      	lsls	r2, r3, #22
 800c894:	d402      	bmi.n	800c89c <_vfiprintf_r+0x220>
 800c896:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c898:	f7ff fb10 	bl	800bebc <__retarget_lock_release_recursive>
 800c89c:	89ab      	ldrh	r3, [r5, #12]
 800c89e:	065b      	lsls	r3, r3, #25
 800c8a0:	f53f af12 	bmi.w	800c6c8 <_vfiprintf_r+0x4c>
 800c8a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8a6:	e711      	b.n	800c6cc <_vfiprintf_r+0x50>
 800c8a8:	ab03      	add	r3, sp, #12
 800c8aa:	9300      	str	r3, [sp, #0]
 800c8ac:	462a      	mov	r2, r5
 800c8ae:	4b09      	ldr	r3, [pc, #36]	; (800c8d4 <_vfiprintf_r+0x258>)
 800c8b0:	a904      	add	r1, sp, #16
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	f7fe fa3e 	bl	800ad34 <_printf_i>
 800c8b8:	e7e4      	b.n	800c884 <_vfiprintf_r+0x208>
 800c8ba:	bf00      	nop
 800c8bc:	0800d05c 	.word	0x0800d05c
 800c8c0:	0800d07c 	.word	0x0800d07c
 800c8c4:	0800d03c 	.word	0x0800d03c
 800c8c8:	0800d1f4 	.word	0x0800d1f4
 800c8cc:	0800d1fe 	.word	0x0800d1fe
 800c8d0:	0800a7ed 	.word	0x0800a7ed
 800c8d4:	0800c657 	.word	0x0800c657
 800c8d8:	0800d1fa 	.word	0x0800d1fa

0800c8dc <__sread>:
 800c8dc:	b510      	push	{r4, lr}
 800c8de:	460c      	mov	r4, r1
 800c8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8e4:	f000 fa9c 	bl	800ce20 <_read_r>
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	bfab      	itete	ge
 800c8ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c8ee:	89a3      	ldrhlt	r3, [r4, #12]
 800c8f0:	181b      	addge	r3, r3, r0
 800c8f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c8f6:	bfac      	ite	ge
 800c8f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c8fa:	81a3      	strhlt	r3, [r4, #12]
 800c8fc:	bd10      	pop	{r4, pc}

0800c8fe <__swrite>:
 800c8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c902:	461f      	mov	r7, r3
 800c904:	898b      	ldrh	r3, [r1, #12]
 800c906:	05db      	lsls	r3, r3, #23
 800c908:	4605      	mov	r5, r0
 800c90a:	460c      	mov	r4, r1
 800c90c:	4616      	mov	r6, r2
 800c90e:	d505      	bpl.n	800c91c <__swrite+0x1e>
 800c910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c914:	2302      	movs	r3, #2
 800c916:	2200      	movs	r2, #0
 800c918:	f000 f9f8 	bl	800cd0c <_lseek_r>
 800c91c:	89a3      	ldrh	r3, [r4, #12]
 800c91e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c926:	81a3      	strh	r3, [r4, #12]
 800c928:	4632      	mov	r2, r6
 800c92a:	463b      	mov	r3, r7
 800c92c:	4628      	mov	r0, r5
 800c92e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c932:	f000 b869 	b.w	800ca08 <_write_r>

0800c936 <__sseek>:
 800c936:	b510      	push	{r4, lr}
 800c938:	460c      	mov	r4, r1
 800c93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c93e:	f000 f9e5 	bl	800cd0c <_lseek_r>
 800c942:	1c43      	adds	r3, r0, #1
 800c944:	89a3      	ldrh	r3, [r4, #12]
 800c946:	bf15      	itete	ne
 800c948:	6560      	strne	r0, [r4, #84]	; 0x54
 800c94a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c94e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c952:	81a3      	strheq	r3, [r4, #12]
 800c954:	bf18      	it	ne
 800c956:	81a3      	strhne	r3, [r4, #12]
 800c958:	bd10      	pop	{r4, pc}

0800c95a <__sclose>:
 800c95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c95e:	f000 b8f1 	b.w	800cb44 <_close_r>
	...

0800c964 <__swbuf_r>:
 800c964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c966:	460e      	mov	r6, r1
 800c968:	4614      	mov	r4, r2
 800c96a:	4605      	mov	r5, r0
 800c96c:	b118      	cbz	r0, 800c976 <__swbuf_r+0x12>
 800c96e:	6983      	ldr	r3, [r0, #24]
 800c970:	b90b      	cbnz	r3, 800c976 <__swbuf_r+0x12>
 800c972:	f7ff f9ff 	bl	800bd74 <__sinit>
 800c976:	4b21      	ldr	r3, [pc, #132]	; (800c9fc <__swbuf_r+0x98>)
 800c978:	429c      	cmp	r4, r3
 800c97a:	d12b      	bne.n	800c9d4 <__swbuf_r+0x70>
 800c97c:	686c      	ldr	r4, [r5, #4]
 800c97e:	69a3      	ldr	r3, [r4, #24]
 800c980:	60a3      	str	r3, [r4, #8]
 800c982:	89a3      	ldrh	r3, [r4, #12]
 800c984:	071a      	lsls	r2, r3, #28
 800c986:	d52f      	bpl.n	800c9e8 <__swbuf_r+0x84>
 800c988:	6923      	ldr	r3, [r4, #16]
 800c98a:	b36b      	cbz	r3, 800c9e8 <__swbuf_r+0x84>
 800c98c:	6923      	ldr	r3, [r4, #16]
 800c98e:	6820      	ldr	r0, [r4, #0]
 800c990:	1ac0      	subs	r0, r0, r3
 800c992:	6963      	ldr	r3, [r4, #20]
 800c994:	b2f6      	uxtb	r6, r6
 800c996:	4283      	cmp	r3, r0
 800c998:	4637      	mov	r7, r6
 800c99a:	dc04      	bgt.n	800c9a6 <__swbuf_r+0x42>
 800c99c:	4621      	mov	r1, r4
 800c99e:	4628      	mov	r0, r5
 800c9a0:	f000 f966 	bl	800cc70 <_fflush_r>
 800c9a4:	bb30      	cbnz	r0, 800c9f4 <__swbuf_r+0x90>
 800c9a6:	68a3      	ldr	r3, [r4, #8]
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	60a3      	str	r3, [r4, #8]
 800c9ac:	6823      	ldr	r3, [r4, #0]
 800c9ae:	1c5a      	adds	r2, r3, #1
 800c9b0:	6022      	str	r2, [r4, #0]
 800c9b2:	701e      	strb	r6, [r3, #0]
 800c9b4:	6963      	ldr	r3, [r4, #20]
 800c9b6:	3001      	adds	r0, #1
 800c9b8:	4283      	cmp	r3, r0
 800c9ba:	d004      	beq.n	800c9c6 <__swbuf_r+0x62>
 800c9bc:	89a3      	ldrh	r3, [r4, #12]
 800c9be:	07db      	lsls	r3, r3, #31
 800c9c0:	d506      	bpl.n	800c9d0 <__swbuf_r+0x6c>
 800c9c2:	2e0a      	cmp	r6, #10
 800c9c4:	d104      	bne.n	800c9d0 <__swbuf_r+0x6c>
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	f000 f951 	bl	800cc70 <_fflush_r>
 800c9ce:	b988      	cbnz	r0, 800c9f4 <__swbuf_r+0x90>
 800c9d0:	4638      	mov	r0, r7
 800c9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9d4:	4b0a      	ldr	r3, [pc, #40]	; (800ca00 <__swbuf_r+0x9c>)
 800c9d6:	429c      	cmp	r4, r3
 800c9d8:	d101      	bne.n	800c9de <__swbuf_r+0x7a>
 800c9da:	68ac      	ldr	r4, [r5, #8]
 800c9dc:	e7cf      	b.n	800c97e <__swbuf_r+0x1a>
 800c9de:	4b09      	ldr	r3, [pc, #36]	; (800ca04 <__swbuf_r+0xa0>)
 800c9e0:	429c      	cmp	r4, r3
 800c9e2:	bf08      	it	eq
 800c9e4:	68ec      	ldreq	r4, [r5, #12]
 800c9e6:	e7ca      	b.n	800c97e <__swbuf_r+0x1a>
 800c9e8:	4621      	mov	r1, r4
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	f000 f81e 	bl	800ca2c <__swsetup_r>
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	d0cb      	beq.n	800c98c <__swbuf_r+0x28>
 800c9f4:	f04f 37ff 	mov.w	r7, #4294967295
 800c9f8:	e7ea      	b.n	800c9d0 <__swbuf_r+0x6c>
 800c9fa:	bf00      	nop
 800c9fc:	0800d05c 	.word	0x0800d05c
 800ca00:	0800d07c 	.word	0x0800d07c
 800ca04:	0800d03c 	.word	0x0800d03c

0800ca08 <_write_r>:
 800ca08:	b538      	push	{r3, r4, r5, lr}
 800ca0a:	4d07      	ldr	r5, [pc, #28]	; (800ca28 <_write_r+0x20>)
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	4608      	mov	r0, r1
 800ca10:	4611      	mov	r1, r2
 800ca12:	2200      	movs	r2, #0
 800ca14:	602a      	str	r2, [r5, #0]
 800ca16:	461a      	mov	r2, r3
 800ca18:	f7f4 ff8d 	bl	8001936 <_write>
 800ca1c:	1c43      	adds	r3, r0, #1
 800ca1e:	d102      	bne.n	800ca26 <_write_r+0x1e>
 800ca20:	682b      	ldr	r3, [r5, #0]
 800ca22:	b103      	cbz	r3, 800ca26 <_write_r+0x1e>
 800ca24:	6023      	str	r3, [r4, #0]
 800ca26:	bd38      	pop	{r3, r4, r5, pc}
 800ca28:	20000250 	.word	0x20000250

0800ca2c <__swsetup_r>:
 800ca2c:	4b32      	ldr	r3, [pc, #200]	; (800caf8 <__swsetup_r+0xcc>)
 800ca2e:	b570      	push	{r4, r5, r6, lr}
 800ca30:	681d      	ldr	r5, [r3, #0]
 800ca32:	4606      	mov	r6, r0
 800ca34:	460c      	mov	r4, r1
 800ca36:	b125      	cbz	r5, 800ca42 <__swsetup_r+0x16>
 800ca38:	69ab      	ldr	r3, [r5, #24]
 800ca3a:	b913      	cbnz	r3, 800ca42 <__swsetup_r+0x16>
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	f7ff f999 	bl	800bd74 <__sinit>
 800ca42:	4b2e      	ldr	r3, [pc, #184]	; (800cafc <__swsetup_r+0xd0>)
 800ca44:	429c      	cmp	r4, r3
 800ca46:	d10f      	bne.n	800ca68 <__swsetup_r+0x3c>
 800ca48:	686c      	ldr	r4, [r5, #4]
 800ca4a:	89a3      	ldrh	r3, [r4, #12]
 800ca4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca50:	0719      	lsls	r1, r3, #28
 800ca52:	d42c      	bmi.n	800caae <__swsetup_r+0x82>
 800ca54:	06dd      	lsls	r5, r3, #27
 800ca56:	d411      	bmi.n	800ca7c <__swsetup_r+0x50>
 800ca58:	2309      	movs	r3, #9
 800ca5a:	6033      	str	r3, [r6, #0]
 800ca5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca60:	81a3      	strh	r3, [r4, #12]
 800ca62:	f04f 30ff 	mov.w	r0, #4294967295
 800ca66:	e03e      	b.n	800cae6 <__swsetup_r+0xba>
 800ca68:	4b25      	ldr	r3, [pc, #148]	; (800cb00 <__swsetup_r+0xd4>)
 800ca6a:	429c      	cmp	r4, r3
 800ca6c:	d101      	bne.n	800ca72 <__swsetup_r+0x46>
 800ca6e:	68ac      	ldr	r4, [r5, #8]
 800ca70:	e7eb      	b.n	800ca4a <__swsetup_r+0x1e>
 800ca72:	4b24      	ldr	r3, [pc, #144]	; (800cb04 <__swsetup_r+0xd8>)
 800ca74:	429c      	cmp	r4, r3
 800ca76:	bf08      	it	eq
 800ca78:	68ec      	ldreq	r4, [r5, #12]
 800ca7a:	e7e6      	b.n	800ca4a <__swsetup_r+0x1e>
 800ca7c:	0758      	lsls	r0, r3, #29
 800ca7e:	d512      	bpl.n	800caa6 <__swsetup_r+0x7a>
 800ca80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca82:	b141      	cbz	r1, 800ca96 <__swsetup_r+0x6a>
 800ca84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca88:	4299      	cmp	r1, r3
 800ca8a:	d002      	beq.n	800ca92 <__swsetup_r+0x66>
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	f7fd fd2d 	bl	800a4ec <_free_r>
 800ca92:	2300      	movs	r3, #0
 800ca94:	6363      	str	r3, [r4, #52]	; 0x34
 800ca96:	89a3      	ldrh	r3, [r4, #12]
 800ca98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca9c:	81a3      	strh	r3, [r4, #12]
 800ca9e:	2300      	movs	r3, #0
 800caa0:	6063      	str	r3, [r4, #4]
 800caa2:	6923      	ldr	r3, [r4, #16]
 800caa4:	6023      	str	r3, [r4, #0]
 800caa6:	89a3      	ldrh	r3, [r4, #12]
 800caa8:	f043 0308 	orr.w	r3, r3, #8
 800caac:	81a3      	strh	r3, [r4, #12]
 800caae:	6923      	ldr	r3, [r4, #16]
 800cab0:	b94b      	cbnz	r3, 800cac6 <__swsetup_r+0x9a>
 800cab2:	89a3      	ldrh	r3, [r4, #12]
 800cab4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cabc:	d003      	beq.n	800cac6 <__swsetup_r+0x9a>
 800cabe:	4621      	mov	r1, r4
 800cac0:	4630      	mov	r0, r6
 800cac2:	f000 f95b 	bl	800cd7c <__smakebuf_r>
 800cac6:	89a0      	ldrh	r0, [r4, #12]
 800cac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cacc:	f010 0301 	ands.w	r3, r0, #1
 800cad0:	d00a      	beq.n	800cae8 <__swsetup_r+0xbc>
 800cad2:	2300      	movs	r3, #0
 800cad4:	60a3      	str	r3, [r4, #8]
 800cad6:	6963      	ldr	r3, [r4, #20]
 800cad8:	425b      	negs	r3, r3
 800cada:	61a3      	str	r3, [r4, #24]
 800cadc:	6923      	ldr	r3, [r4, #16]
 800cade:	b943      	cbnz	r3, 800caf2 <__swsetup_r+0xc6>
 800cae0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cae4:	d1ba      	bne.n	800ca5c <__swsetup_r+0x30>
 800cae6:	bd70      	pop	{r4, r5, r6, pc}
 800cae8:	0781      	lsls	r1, r0, #30
 800caea:	bf58      	it	pl
 800caec:	6963      	ldrpl	r3, [r4, #20]
 800caee:	60a3      	str	r3, [r4, #8]
 800caf0:	e7f4      	b.n	800cadc <__swsetup_r+0xb0>
 800caf2:	2000      	movs	r0, #0
 800caf4:	e7f7      	b.n	800cae6 <__swsetup_r+0xba>
 800caf6:	bf00      	nop
 800caf8:	20000030 	.word	0x20000030
 800cafc:	0800d05c 	.word	0x0800d05c
 800cb00:	0800d07c 	.word	0x0800d07c
 800cb04:	0800d03c 	.word	0x0800d03c

0800cb08 <__assert_func>:
 800cb08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb0a:	4614      	mov	r4, r2
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	4b09      	ldr	r3, [pc, #36]	; (800cb34 <__assert_func+0x2c>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	4605      	mov	r5, r0
 800cb14:	68d8      	ldr	r0, [r3, #12]
 800cb16:	b14c      	cbz	r4, 800cb2c <__assert_func+0x24>
 800cb18:	4b07      	ldr	r3, [pc, #28]	; (800cb38 <__assert_func+0x30>)
 800cb1a:	9100      	str	r1, [sp, #0]
 800cb1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb20:	4906      	ldr	r1, [pc, #24]	; (800cb3c <__assert_func+0x34>)
 800cb22:	462b      	mov	r3, r5
 800cb24:	f000 f8e0 	bl	800cce8 <fiprintf>
 800cb28:	f000 f999 	bl	800ce5e <abort>
 800cb2c:	4b04      	ldr	r3, [pc, #16]	; (800cb40 <__assert_func+0x38>)
 800cb2e:	461c      	mov	r4, r3
 800cb30:	e7f3      	b.n	800cb1a <__assert_func+0x12>
 800cb32:	bf00      	nop
 800cb34:	20000030 	.word	0x20000030
 800cb38:	0800d205 	.word	0x0800d205
 800cb3c:	0800d212 	.word	0x0800d212
 800cb40:	0800d240 	.word	0x0800d240

0800cb44 <_close_r>:
 800cb44:	b538      	push	{r3, r4, r5, lr}
 800cb46:	4d06      	ldr	r5, [pc, #24]	; (800cb60 <_close_r+0x1c>)
 800cb48:	2300      	movs	r3, #0
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	4608      	mov	r0, r1
 800cb4e:	602b      	str	r3, [r5, #0]
 800cb50:	f7f5 fd83 	bl	800265a <_close>
 800cb54:	1c43      	adds	r3, r0, #1
 800cb56:	d102      	bne.n	800cb5e <_close_r+0x1a>
 800cb58:	682b      	ldr	r3, [r5, #0]
 800cb5a:	b103      	cbz	r3, 800cb5e <_close_r+0x1a>
 800cb5c:	6023      	str	r3, [r4, #0]
 800cb5e:	bd38      	pop	{r3, r4, r5, pc}
 800cb60:	20000250 	.word	0x20000250

0800cb64 <__sflush_r>:
 800cb64:	898a      	ldrh	r2, [r1, #12]
 800cb66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb6a:	4605      	mov	r5, r0
 800cb6c:	0710      	lsls	r0, r2, #28
 800cb6e:	460c      	mov	r4, r1
 800cb70:	d458      	bmi.n	800cc24 <__sflush_r+0xc0>
 800cb72:	684b      	ldr	r3, [r1, #4]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	dc05      	bgt.n	800cb84 <__sflush_r+0x20>
 800cb78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	dc02      	bgt.n	800cb84 <__sflush_r+0x20>
 800cb7e:	2000      	movs	r0, #0
 800cb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb86:	2e00      	cmp	r6, #0
 800cb88:	d0f9      	beq.n	800cb7e <__sflush_r+0x1a>
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb90:	682f      	ldr	r7, [r5, #0]
 800cb92:	602b      	str	r3, [r5, #0]
 800cb94:	d032      	beq.n	800cbfc <__sflush_r+0x98>
 800cb96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb98:	89a3      	ldrh	r3, [r4, #12]
 800cb9a:	075a      	lsls	r2, r3, #29
 800cb9c:	d505      	bpl.n	800cbaa <__sflush_r+0x46>
 800cb9e:	6863      	ldr	r3, [r4, #4]
 800cba0:	1ac0      	subs	r0, r0, r3
 800cba2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cba4:	b10b      	cbz	r3, 800cbaa <__sflush_r+0x46>
 800cba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cba8:	1ac0      	subs	r0, r0, r3
 800cbaa:	2300      	movs	r3, #0
 800cbac:	4602      	mov	r2, r0
 800cbae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbb0:	6a21      	ldr	r1, [r4, #32]
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	47b0      	blx	r6
 800cbb6:	1c43      	adds	r3, r0, #1
 800cbb8:	89a3      	ldrh	r3, [r4, #12]
 800cbba:	d106      	bne.n	800cbca <__sflush_r+0x66>
 800cbbc:	6829      	ldr	r1, [r5, #0]
 800cbbe:	291d      	cmp	r1, #29
 800cbc0:	d82c      	bhi.n	800cc1c <__sflush_r+0xb8>
 800cbc2:	4a2a      	ldr	r2, [pc, #168]	; (800cc6c <__sflush_r+0x108>)
 800cbc4:	40ca      	lsrs	r2, r1
 800cbc6:	07d6      	lsls	r6, r2, #31
 800cbc8:	d528      	bpl.n	800cc1c <__sflush_r+0xb8>
 800cbca:	2200      	movs	r2, #0
 800cbcc:	6062      	str	r2, [r4, #4]
 800cbce:	04d9      	lsls	r1, r3, #19
 800cbd0:	6922      	ldr	r2, [r4, #16]
 800cbd2:	6022      	str	r2, [r4, #0]
 800cbd4:	d504      	bpl.n	800cbe0 <__sflush_r+0x7c>
 800cbd6:	1c42      	adds	r2, r0, #1
 800cbd8:	d101      	bne.n	800cbde <__sflush_r+0x7a>
 800cbda:	682b      	ldr	r3, [r5, #0]
 800cbdc:	b903      	cbnz	r3, 800cbe0 <__sflush_r+0x7c>
 800cbde:	6560      	str	r0, [r4, #84]	; 0x54
 800cbe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbe2:	602f      	str	r7, [r5, #0]
 800cbe4:	2900      	cmp	r1, #0
 800cbe6:	d0ca      	beq.n	800cb7e <__sflush_r+0x1a>
 800cbe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbec:	4299      	cmp	r1, r3
 800cbee:	d002      	beq.n	800cbf6 <__sflush_r+0x92>
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	f7fd fc7b 	bl	800a4ec <_free_r>
 800cbf6:	2000      	movs	r0, #0
 800cbf8:	6360      	str	r0, [r4, #52]	; 0x34
 800cbfa:	e7c1      	b.n	800cb80 <__sflush_r+0x1c>
 800cbfc:	6a21      	ldr	r1, [r4, #32]
 800cbfe:	2301      	movs	r3, #1
 800cc00:	4628      	mov	r0, r5
 800cc02:	47b0      	blx	r6
 800cc04:	1c41      	adds	r1, r0, #1
 800cc06:	d1c7      	bne.n	800cb98 <__sflush_r+0x34>
 800cc08:	682b      	ldr	r3, [r5, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d0c4      	beq.n	800cb98 <__sflush_r+0x34>
 800cc0e:	2b1d      	cmp	r3, #29
 800cc10:	d001      	beq.n	800cc16 <__sflush_r+0xb2>
 800cc12:	2b16      	cmp	r3, #22
 800cc14:	d101      	bne.n	800cc1a <__sflush_r+0xb6>
 800cc16:	602f      	str	r7, [r5, #0]
 800cc18:	e7b1      	b.n	800cb7e <__sflush_r+0x1a>
 800cc1a:	89a3      	ldrh	r3, [r4, #12]
 800cc1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc20:	81a3      	strh	r3, [r4, #12]
 800cc22:	e7ad      	b.n	800cb80 <__sflush_r+0x1c>
 800cc24:	690f      	ldr	r7, [r1, #16]
 800cc26:	2f00      	cmp	r7, #0
 800cc28:	d0a9      	beq.n	800cb7e <__sflush_r+0x1a>
 800cc2a:	0793      	lsls	r3, r2, #30
 800cc2c:	680e      	ldr	r6, [r1, #0]
 800cc2e:	bf08      	it	eq
 800cc30:	694b      	ldreq	r3, [r1, #20]
 800cc32:	600f      	str	r7, [r1, #0]
 800cc34:	bf18      	it	ne
 800cc36:	2300      	movne	r3, #0
 800cc38:	eba6 0807 	sub.w	r8, r6, r7
 800cc3c:	608b      	str	r3, [r1, #8]
 800cc3e:	f1b8 0f00 	cmp.w	r8, #0
 800cc42:	dd9c      	ble.n	800cb7e <__sflush_r+0x1a>
 800cc44:	6a21      	ldr	r1, [r4, #32]
 800cc46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc48:	4643      	mov	r3, r8
 800cc4a:	463a      	mov	r2, r7
 800cc4c:	4628      	mov	r0, r5
 800cc4e:	47b0      	blx	r6
 800cc50:	2800      	cmp	r0, #0
 800cc52:	dc06      	bgt.n	800cc62 <__sflush_r+0xfe>
 800cc54:	89a3      	ldrh	r3, [r4, #12]
 800cc56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc5a:	81a3      	strh	r3, [r4, #12]
 800cc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc60:	e78e      	b.n	800cb80 <__sflush_r+0x1c>
 800cc62:	4407      	add	r7, r0
 800cc64:	eba8 0800 	sub.w	r8, r8, r0
 800cc68:	e7e9      	b.n	800cc3e <__sflush_r+0xda>
 800cc6a:	bf00      	nop
 800cc6c:	20400001 	.word	0x20400001

0800cc70 <_fflush_r>:
 800cc70:	b538      	push	{r3, r4, r5, lr}
 800cc72:	690b      	ldr	r3, [r1, #16]
 800cc74:	4605      	mov	r5, r0
 800cc76:	460c      	mov	r4, r1
 800cc78:	b913      	cbnz	r3, 800cc80 <_fflush_r+0x10>
 800cc7a:	2500      	movs	r5, #0
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	bd38      	pop	{r3, r4, r5, pc}
 800cc80:	b118      	cbz	r0, 800cc8a <_fflush_r+0x1a>
 800cc82:	6983      	ldr	r3, [r0, #24]
 800cc84:	b90b      	cbnz	r3, 800cc8a <_fflush_r+0x1a>
 800cc86:	f7ff f875 	bl	800bd74 <__sinit>
 800cc8a:	4b14      	ldr	r3, [pc, #80]	; (800ccdc <_fflush_r+0x6c>)
 800cc8c:	429c      	cmp	r4, r3
 800cc8e:	d11b      	bne.n	800ccc8 <_fflush_r+0x58>
 800cc90:	686c      	ldr	r4, [r5, #4]
 800cc92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d0ef      	beq.n	800cc7a <_fflush_r+0xa>
 800cc9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc9c:	07d0      	lsls	r0, r2, #31
 800cc9e:	d404      	bmi.n	800ccaa <_fflush_r+0x3a>
 800cca0:	0599      	lsls	r1, r3, #22
 800cca2:	d402      	bmi.n	800ccaa <_fflush_r+0x3a>
 800cca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cca6:	f7ff f908 	bl	800beba <__retarget_lock_acquire_recursive>
 800ccaa:	4628      	mov	r0, r5
 800ccac:	4621      	mov	r1, r4
 800ccae:	f7ff ff59 	bl	800cb64 <__sflush_r>
 800ccb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccb4:	07da      	lsls	r2, r3, #31
 800ccb6:	4605      	mov	r5, r0
 800ccb8:	d4e0      	bmi.n	800cc7c <_fflush_r+0xc>
 800ccba:	89a3      	ldrh	r3, [r4, #12]
 800ccbc:	059b      	lsls	r3, r3, #22
 800ccbe:	d4dd      	bmi.n	800cc7c <_fflush_r+0xc>
 800ccc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccc2:	f7ff f8fb 	bl	800bebc <__retarget_lock_release_recursive>
 800ccc6:	e7d9      	b.n	800cc7c <_fflush_r+0xc>
 800ccc8:	4b05      	ldr	r3, [pc, #20]	; (800cce0 <_fflush_r+0x70>)
 800ccca:	429c      	cmp	r4, r3
 800cccc:	d101      	bne.n	800ccd2 <_fflush_r+0x62>
 800ccce:	68ac      	ldr	r4, [r5, #8]
 800ccd0:	e7df      	b.n	800cc92 <_fflush_r+0x22>
 800ccd2:	4b04      	ldr	r3, [pc, #16]	; (800cce4 <_fflush_r+0x74>)
 800ccd4:	429c      	cmp	r4, r3
 800ccd6:	bf08      	it	eq
 800ccd8:	68ec      	ldreq	r4, [r5, #12]
 800ccda:	e7da      	b.n	800cc92 <_fflush_r+0x22>
 800ccdc:	0800d05c 	.word	0x0800d05c
 800cce0:	0800d07c 	.word	0x0800d07c
 800cce4:	0800d03c 	.word	0x0800d03c

0800cce8 <fiprintf>:
 800cce8:	b40e      	push	{r1, r2, r3}
 800ccea:	b503      	push	{r0, r1, lr}
 800ccec:	4601      	mov	r1, r0
 800ccee:	ab03      	add	r3, sp, #12
 800ccf0:	4805      	ldr	r0, [pc, #20]	; (800cd08 <fiprintf+0x20>)
 800ccf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccf6:	6800      	ldr	r0, [r0, #0]
 800ccf8:	9301      	str	r3, [sp, #4]
 800ccfa:	f7ff fcbf 	bl	800c67c <_vfiprintf_r>
 800ccfe:	b002      	add	sp, #8
 800cd00:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd04:	b003      	add	sp, #12
 800cd06:	4770      	bx	lr
 800cd08:	20000030 	.word	0x20000030

0800cd0c <_lseek_r>:
 800cd0c:	b538      	push	{r3, r4, r5, lr}
 800cd0e:	4d07      	ldr	r5, [pc, #28]	; (800cd2c <_lseek_r+0x20>)
 800cd10:	4604      	mov	r4, r0
 800cd12:	4608      	mov	r0, r1
 800cd14:	4611      	mov	r1, r2
 800cd16:	2200      	movs	r2, #0
 800cd18:	602a      	str	r2, [r5, #0]
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	f7f5 fcc4 	bl	80026a8 <_lseek>
 800cd20:	1c43      	adds	r3, r0, #1
 800cd22:	d102      	bne.n	800cd2a <_lseek_r+0x1e>
 800cd24:	682b      	ldr	r3, [r5, #0]
 800cd26:	b103      	cbz	r3, 800cd2a <_lseek_r+0x1e>
 800cd28:	6023      	str	r3, [r4, #0]
 800cd2a:	bd38      	pop	{r3, r4, r5, pc}
 800cd2c:	20000250 	.word	0x20000250

0800cd30 <__swhatbuf_r>:
 800cd30:	b570      	push	{r4, r5, r6, lr}
 800cd32:	460e      	mov	r6, r1
 800cd34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd38:	2900      	cmp	r1, #0
 800cd3a:	b096      	sub	sp, #88	; 0x58
 800cd3c:	4614      	mov	r4, r2
 800cd3e:	461d      	mov	r5, r3
 800cd40:	da08      	bge.n	800cd54 <__swhatbuf_r+0x24>
 800cd42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd46:	2200      	movs	r2, #0
 800cd48:	602a      	str	r2, [r5, #0]
 800cd4a:	061a      	lsls	r2, r3, #24
 800cd4c:	d410      	bmi.n	800cd70 <__swhatbuf_r+0x40>
 800cd4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd52:	e00e      	b.n	800cd72 <__swhatbuf_r+0x42>
 800cd54:	466a      	mov	r2, sp
 800cd56:	f000 f889 	bl	800ce6c <_fstat_r>
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	dbf1      	blt.n	800cd42 <__swhatbuf_r+0x12>
 800cd5e:	9a01      	ldr	r2, [sp, #4]
 800cd60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd68:	425a      	negs	r2, r3
 800cd6a:	415a      	adcs	r2, r3
 800cd6c:	602a      	str	r2, [r5, #0]
 800cd6e:	e7ee      	b.n	800cd4e <__swhatbuf_r+0x1e>
 800cd70:	2340      	movs	r3, #64	; 0x40
 800cd72:	2000      	movs	r0, #0
 800cd74:	6023      	str	r3, [r4, #0]
 800cd76:	b016      	add	sp, #88	; 0x58
 800cd78:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd7c <__smakebuf_r>:
 800cd7c:	898b      	ldrh	r3, [r1, #12]
 800cd7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd80:	079d      	lsls	r5, r3, #30
 800cd82:	4606      	mov	r6, r0
 800cd84:	460c      	mov	r4, r1
 800cd86:	d507      	bpl.n	800cd98 <__smakebuf_r+0x1c>
 800cd88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd8c:	6023      	str	r3, [r4, #0]
 800cd8e:	6123      	str	r3, [r4, #16]
 800cd90:	2301      	movs	r3, #1
 800cd92:	6163      	str	r3, [r4, #20]
 800cd94:	b002      	add	sp, #8
 800cd96:	bd70      	pop	{r4, r5, r6, pc}
 800cd98:	ab01      	add	r3, sp, #4
 800cd9a:	466a      	mov	r2, sp
 800cd9c:	f7ff ffc8 	bl	800cd30 <__swhatbuf_r>
 800cda0:	9900      	ldr	r1, [sp, #0]
 800cda2:	4605      	mov	r5, r0
 800cda4:	4630      	mov	r0, r6
 800cda6:	f7fd fc0d 	bl	800a5c4 <_malloc_r>
 800cdaa:	b948      	cbnz	r0, 800cdc0 <__smakebuf_r+0x44>
 800cdac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdb0:	059a      	lsls	r2, r3, #22
 800cdb2:	d4ef      	bmi.n	800cd94 <__smakebuf_r+0x18>
 800cdb4:	f023 0303 	bic.w	r3, r3, #3
 800cdb8:	f043 0302 	orr.w	r3, r3, #2
 800cdbc:	81a3      	strh	r3, [r4, #12]
 800cdbe:	e7e3      	b.n	800cd88 <__smakebuf_r+0xc>
 800cdc0:	4b0d      	ldr	r3, [pc, #52]	; (800cdf8 <__smakebuf_r+0x7c>)
 800cdc2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cdc4:	89a3      	ldrh	r3, [r4, #12]
 800cdc6:	6020      	str	r0, [r4, #0]
 800cdc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdcc:	81a3      	strh	r3, [r4, #12]
 800cdce:	9b00      	ldr	r3, [sp, #0]
 800cdd0:	6163      	str	r3, [r4, #20]
 800cdd2:	9b01      	ldr	r3, [sp, #4]
 800cdd4:	6120      	str	r0, [r4, #16]
 800cdd6:	b15b      	cbz	r3, 800cdf0 <__smakebuf_r+0x74>
 800cdd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cddc:	4630      	mov	r0, r6
 800cdde:	f000 f857 	bl	800ce90 <_isatty_r>
 800cde2:	b128      	cbz	r0, 800cdf0 <__smakebuf_r+0x74>
 800cde4:	89a3      	ldrh	r3, [r4, #12]
 800cde6:	f023 0303 	bic.w	r3, r3, #3
 800cdea:	f043 0301 	orr.w	r3, r3, #1
 800cdee:	81a3      	strh	r3, [r4, #12]
 800cdf0:	89a0      	ldrh	r0, [r4, #12]
 800cdf2:	4305      	orrs	r5, r0
 800cdf4:	81a5      	strh	r5, [r4, #12]
 800cdf6:	e7cd      	b.n	800cd94 <__smakebuf_r+0x18>
 800cdf8:	0800bd0d 	.word	0x0800bd0d

0800cdfc <__ascii_mbtowc>:
 800cdfc:	b082      	sub	sp, #8
 800cdfe:	b901      	cbnz	r1, 800ce02 <__ascii_mbtowc+0x6>
 800ce00:	a901      	add	r1, sp, #4
 800ce02:	b142      	cbz	r2, 800ce16 <__ascii_mbtowc+0x1a>
 800ce04:	b14b      	cbz	r3, 800ce1a <__ascii_mbtowc+0x1e>
 800ce06:	7813      	ldrb	r3, [r2, #0]
 800ce08:	600b      	str	r3, [r1, #0]
 800ce0a:	7812      	ldrb	r2, [r2, #0]
 800ce0c:	1e10      	subs	r0, r2, #0
 800ce0e:	bf18      	it	ne
 800ce10:	2001      	movne	r0, #1
 800ce12:	b002      	add	sp, #8
 800ce14:	4770      	bx	lr
 800ce16:	4610      	mov	r0, r2
 800ce18:	e7fb      	b.n	800ce12 <__ascii_mbtowc+0x16>
 800ce1a:	f06f 0001 	mvn.w	r0, #1
 800ce1e:	e7f8      	b.n	800ce12 <__ascii_mbtowc+0x16>

0800ce20 <_read_r>:
 800ce20:	b538      	push	{r3, r4, r5, lr}
 800ce22:	4d07      	ldr	r5, [pc, #28]	; (800ce40 <_read_r+0x20>)
 800ce24:	4604      	mov	r4, r0
 800ce26:	4608      	mov	r0, r1
 800ce28:	4611      	mov	r1, r2
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	602a      	str	r2, [r5, #0]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	f7f5 fbf6 	bl	8002620 <_read>
 800ce34:	1c43      	adds	r3, r0, #1
 800ce36:	d102      	bne.n	800ce3e <_read_r+0x1e>
 800ce38:	682b      	ldr	r3, [r5, #0]
 800ce3a:	b103      	cbz	r3, 800ce3e <_read_r+0x1e>
 800ce3c:	6023      	str	r3, [r4, #0]
 800ce3e:	bd38      	pop	{r3, r4, r5, pc}
 800ce40:	20000250 	.word	0x20000250

0800ce44 <__ascii_wctomb>:
 800ce44:	b149      	cbz	r1, 800ce5a <__ascii_wctomb+0x16>
 800ce46:	2aff      	cmp	r2, #255	; 0xff
 800ce48:	bf85      	ittet	hi
 800ce4a:	238a      	movhi	r3, #138	; 0x8a
 800ce4c:	6003      	strhi	r3, [r0, #0]
 800ce4e:	700a      	strbls	r2, [r1, #0]
 800ce50:	f04f 30ff 	movhi.w	r0, #4294967295
 800ce54:	bf98      	it	ls
 800ce56:	2001      	movls	r0, #1
 800ce58:	4770      	bx	lr
 800ce5a:	4608      	mov	r0, r1
 800ce5c:	4770      	bx	lr

0800ce5e <abort>:
 800ce5e:	b508      	push	{r3, lr}
 800ce60:	2006      	movs	r0, #6
 800ce62:	f000 f84d 	bl	800cf00 <raise>
 800ce66:	2001      	movs	r0, #1
 800ce68:	f7f5 fbd0 	bl	800260c <_exit>

0800ce6c <_fstat_r>:
 800ce6c:	b538      	push	{r3, r4, r5, lr}
 800ce6e:	4d07      	ldr	r5, [pc, #28]	; (800ce8c <_fstat_r+0x20>)
 800ce70:	2300      	movs	r3, #0
 800ce72:	4604      	mov	r4, r0
 800ce74:	4608      	mov	r0, r1
 800ce76:	4611      	mov	r1, r2
 800ce78:	602b      	str	r3, [r5, #0]
 800ce7a:	f7f5 fbfa 	bl	8002672 <_fstat>
 800ce7e:	1c43      	adds	r3, r0, #1
 800ce80:	d102      	bne.n	800ce88 <_fstat_r+0x1c>
 800ce82:	682b      	ldr	r3, [r5, #0]
 800ce84:	b103      	cbz	r3, 800ce88 <_fstat_r+0x1c>
 800ce86:	6023      	str	r3, [r4, #0]
 800ce88:	bd38      	pop	{r3, r4, r5, pc}
 800ce8a:	bf00      	nop
 800ce8c:	20000250 	.word	0x20000250

0800ce90 <_isatty_r>:
 800ce90:	b538      	push	{r3, r4, r5, lr}
 800ce92:	4d06      	ldr	r5, [pc, #24]	; (800ceac <_isatty_r+0x1c>)
 800ce94:	2300      	movs	r3, #0
 800ce96:	4604      	mov	r4, r0
 800ce98:	4608      	mov	r0, r1
 800ce9a:	602b      	str	r3, [r5, #0]
 800ce9c:	f7f5 fbf9 	bl	8002692 <_isatty>
 800cea0:	1c43      	adds	r3, r0, #1
 800cea2:	d102      	bne.n	800ceaa <_isatty_r+0x1a>
 800cea4:	682b      	ldr	r3, [r5, #0]
 800cea6:	b103      	cbz	r3, 800ceaa <_isatty_r+0x1a>
 800cea8:	6023      	str	r3, [r4, #0]
 800ceaa:	bd38      	pop	{r3, r4, r5, pc}
 800ceac:	20000250 	.word	0x20000250

0800ceb0 <_raise_r>:
 800ceb0:	291f      	cmp	r1, #31
 800ceb2:	b538      	push	{r3, r4, r5, lr}
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	460d      	mov	r5, r1
 800ceb8:	d904      	bls.n	800cec4 <_raise_r+0x14>
 800ceba:	2316      	movs	r3, #22
 800cebc:	6003      	str	r3, [r0, #0]
 800cebe:	f04f 30ff 	mov.w	r0, #4294967295
 800cec2:	bd38      	pop	{r3, r4, r5, pc}
 800cec4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cec6:	b112      	cbz	r2, 800cece <_raise_r+0x1e>
 800cec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cecc:	b94b      	cbnz	r3, 800cee2 <_raise_r+0x32>
 800cece:	4620      	mov	r0, r4
 800ced0:	f000 f830 	bl	800cf34 <_getpid_r>
 800ced4:	462a      	mov	r2, r5
 800ced6:	4601      	mov	r1, r0
 800ced8:	4620      	mov	r0, r4
 800ceda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cede:	f000 b817 	b.w	800cf10 <_kill_r>
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d00a      	beq.n	800cefc <_raise_r+0x4c>
 800cee6:	1c59      	adds	r1, r3, #1
 800cee8:	d103      	bne.n	800cef2 <_raise_r+0x42>
 800ceea:	2316      	movs	r3, #22
 800ceec:	6003      	str	r3, [r0, #0]
 800ceee:	2001      	movs	r0, #1
 800cef0:	e7e7      	b.n	800cec2 <_raise_r+0x12>
 800cef2:	2400      	movs	r4, #0
 800cef4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cef8:	4628      	mov	r0, r5
 800cefa:	4798      	blx	r3
 800cefc:	2000      	movs	r0, #0
 800cefe:	e7e0      	b.n	800cec2 <_raise_r+0x12>

0800cf00 <raise>:
 800cf00:	4b02      	ldr	r3, [pc, #8]	; (800cf0c <raise+0xc>)
 800cf02:	4601      	mov	r1, r0
 800cf04:	6818      	ldr	r0, [r3, #0]
 800cf06:	f7ff bfd3 	b.w	800ceb0 <_raise_r>
 800cf0a:	bf00      	nop
 800cf0c:	20000030 	.word	0x20000030

0800cf10 <_kill_r>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	4d07      	ldr	r5, [pc, #28]	; (800cf30 <_kill_r+0x20>)
 800cf14:	2300      	movs	r3, #0
 800cf16:	4604      	mov	r4, r0
 800cf18:	4608      	mov	r0, r1
 800cf1a:	4611      	mov	r1, r2
 800cf1c:	602b      	str	r3, [r5, #0]
 800cf1e:	f7f5 fb65 	bl	80025ec <_kill>
 800cf22:	1c43      	adds	r3, r0, #1
 800cf24:	d102      	bne.n	800cf2c <_kill_r+0x1c>
 800cf26:	682b      	ldr	r3, [r5, #0]
 800cf28:	b103      	cbz	r3, 800cf2c <_kill_r+0x1c>
 800cf2a:	6023      	str	r3, [r4, #0]
 800cf2c:	bd38      	pop	{r3, r4, r5, pc}
 800cf2e:	bf00      	nop
 800cf30:	20000250 	.word	0x20000250

0800cf34 <_getpid_r>:
 800cf34:	f7f5 bb52 	b.w	80025dc <_getpid>

0800cf38 <_init>:
 800cf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3a:	bf00      	nop
 800cf3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf3e:	bc08      	pop	{r3}
 800cf40:	469e      	mov	lr, r3
 800cf42:	4770      	bx	lr

0800cf44 <_fini>:
 800cf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf46:	bf00      	nop
 800cf48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf4a:	bc08      	pop	{r3}
 800cf4c:	469e      	mov	lr, r3
 800cf4e:	4770      	bx	lr
