
DCmotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006fc  08011cf0  08011cf0  00021cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080123ec  080123ec  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  080123ec  080123ec  000223ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080123f4  080123f4  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080123f4  080123f4  000223f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080123fc  080123fc  000223fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08012400  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c0c  20000218  08012618  00030218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001e24  08012618  00031e24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ae33  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005573  00000000  00000000  0005b07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d48  00000000  00000000  000605f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ba0  00000000  00000000  00062338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc55  00000000  00000000  00063ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025acc  00000000  00000000  00081b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a159c  00000000  00000000  000a75f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148b95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f14  00000000  00000000  00148be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011cd8 	.word	0x08011cd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08011cd8 	.word	0x08011cd8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <HAL_GPIO_EXTI_Callback>:
float ActualLinearVelocity[2]   ;
float SetPointLinearVelocity[2] ;
float SetPointAngularVelocity[2];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
 static unsigned char state0,state1,state2,state3;
 static bool LEFT_ENCODER_A,RIGHT_ENCODER_A, LEFT_ENCODER_B,RIGHT_ENCODER_B;
 /* MOTOR A */
 if (GPIO_Pin == GPIO_PIN_12)
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f6c:	f040 80a1 	bne.w	80010b2 <HAL_GPIO_EXTI_Callback+0x156>
 {
   // chương trình ngắt của chân 12

	 LEFT_ENCODER_A=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12);
 8000f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f74:	4892      	ldr	r0, [pc, #584]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x264>)
 8000f76:	f005 fba9 	bl	80066cc <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf14      	ite	ne
 8000f80:	2301      	movne	r3, #1
 8000f82:	2300      	moveq	r3, #0
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b8f      	ldr	r3, [pc, #572]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x268>)
 8000f88:	701a      	strb	r2, [r3, #0]
	 state0=state0|LEFT_ENCODER_A;
 8000f8a:	4b8e      	ldr	r3, [pc, #568]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x268>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b8d      	ldr	r3, [pc, #564]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b8b      	ldr	r3, [pc, #556]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f9a:	701a      	strb	r2, [r3, #0]

	 state0=state0<<1;
 8000f9c:	4b8a      	ldr	r3, [pc, #552]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b88      	ldr	r3, [pc, #544]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fa6:	701a      	strb	r2, [r3, #0]
	 LEFT_ENCODER_B=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13);
 8000fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fac:	4884      	ldr	r0, [pc, #528]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x264>)
 8000fae:	f005 fb8d 	bl	80066cc <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b83      	ldr	r3, [pc, #524]	; (80011cc <HAL_GPIO_EXTI_Callback+0x270>)
 8000fc0:	701a      	strb	r2, [r3, #0]
	 state0=state0|LEFT_ENCODER_B;
 8000fc2:	4b82      	ldr	r3, [pc, #520]	; (80011cc <HAL_GPIO_EXTI_Callback+0x270>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b7f      	ldr	r3, [pc, #508]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b7d      	ldr	r3, [pc, #500]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fd2:	701a      	strb	r2, [r3, #0]
	 state0=state0 & 0x03;
 8000fd4:	4b7c      	ldr	r3, [pc, #496]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b7a      	ldr	r3, [pc, #488]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fe0:	701a      	strb	r2, [r3, #0]

	 switch(state0)
 8000fe2:	4b79      	ldr	r3, [pc, #484]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d85d      	bhi.n	80010a6 <HAL_GPIO_EXTI_Callback+0x14a>
 8000fea:	a201      	add	r2, pc, #4	; (adr r2, 8000ff0 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff0:	08001001 	.word	0x08001001
 8000ff4:	08001027 	.word	0x08001027
 8000ff8:	0800104d 	.word	0x0800104d
 8000ffc:	08001073 	.word	0x08001073
	 {
		 	 	 	 	 case 0:
							 	 if(left_previous==1){left_count++;}
 8001000:	4b73      	ldr	r3, [pc, #460]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d104      	bne.n	8001012 <HAL_GPIO_EXTI_Callback+0xb6>
 8001008:	4b72      	ldr	r3, [pc, #456]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	4a71      	ldr	r2, [pc, #452]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001010:	6013      	str	r3, [r2, #0]
							 	 if(left_previous==2) {left_count--;}
 8001012:	4b6f      	ldr	r3, [pc, #444]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d13e      	bne.n	8001098 <HAL_GPIO_EXTI_Callback+0x13c>
 800101a:	4b6e      	ldr	r3, [pc, #440]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3b01      	subs	r3, #1
 8001020:	4a6c      	ldr	r2, [pc, #432]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001022:	6013      	str	r3, [r2, #0]
							 	 break;
 8001024:	e038      	b.n	8001098 <HAL_GPIO_EXTI_Callback+0x13c>
		 	 	 	 	 case 1:
		 	 	 	 		 	 if(left_previous==3){left_count++;}
 8001026:	4b6a      	ldr	r3, [pc, #424]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d104      	bne.n	8001038 <HAL_GPIO_EXTI_Callback+0xdc>
 800102e:	4b69      	ldr	r3, [pc, #420]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	4a67      	ldr	r2, [pc, #412]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001036:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==0){left_count--;}
 8001038:	4b65      	ldr	r3, [pc, #404]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d12d      	bne.n	800109c <HAL_GPIO_EXTI_Callback+0x140>
 8001040:	4b64      	ldr	r3, [pc, #400]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3b01      	subs	r3, #1
 8001046:	4a63      	ldr	r2, [pc, #396]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001048:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 800104a:	e027      	b.n	800109c <HAL_GPIO_EXTI_Callback+0x140>
		 	 	 	 	 case 2:
		 	 	 	 		 	 if(left_previous==0){left_count++;}
 800104c:	4b60      	ldr	r3, [pc, #384]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d104      	bne.n	800105e <HAL_GPIO_EXTI_Callback+0x102>
 8001054:	4b5f      	ldr	r3, [pc, #380]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a5e      	ldr	r2, [pc, #376]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800105c:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==3) {left_count--;}
 800105e:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d11c      	bne.n	80010a0 <HAL_GPIO_EXTI_Callback+0x144>
 8001066:	4b5b      	ldr	r3, [pc, #364]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	3b01      	subs	r3, #1
 800106c:	4a59      	ldr	r2, [pc, #356]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800106e:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001070:	e016      	b.n	80010a0 <HAL_GPIO_EXTI_Callback+0x144>
		 	 	 	 	 case 3:
		 	 	 	 		 	 if(left_previous==2){left_count++;}
 8001072:	4b57      	ldr	r3, [pc, #348]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d104      	bne.n	8001084 <HAL_GPIO_EXTI_Callback+0x128>
 800107a:	4b56      	ldr	r3, [pc, #344]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a54      	ldr	r2, [pc, #336]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001082:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==1) {left_count--;}
 8001084:	4b52      	ldr	r3, [pc, #328]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d10b      	bne.n	80010a4 <HAL_GPIO_EXTI_Callback+0x148>
 800108c:	4b51      	ldr	r3, [pc, #324]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	3b01      	subs	r3, #1
 8001092:	4a50      	ldr	r2, [pc, #320]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001094:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001096:	e005      	b.n	80010a4 <HAL_GPIO_EXTI_Callback+0x148>
							 	 break;
 8001098:	bf00      	nop
 800109a:	e004      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x14a>
		 	 	 	 		 	 break;
 800109c:	bf00      	nop
 800109e:	e002      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x14a>
		 	 	 	 		 	 break;
 80010a0:	bf00      	nop
 80010a2:	e000      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x14a>
		 	 	 	 		 	 break;
 80010a4:	bf00      	nop
	 }
	 left_previous=state0;
 80010a6:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b48      	ldr	r3, [pc, #288]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 80010ae:	601a      	str	r2, [r3, #0]
		 	 	 	 		 	 if(right_previous==1) {right_count--;}
		 	 	 	 		 	 break;
		 }
		 right_previous=state3;
	 }
}
 80010b0:	e215      	b.n	80014de <HAL_GPIO_EXTI_Callback+0x582>
	 else if (GPIO_Pin == GPIO_PIN_13)
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010b8:	f040 80b0 	bne.w	800121c <HAL_GPIO_EXTI_Callback+0x2c0>
		 LEFT_ENCODER_A=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12);
 80010bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c0:	483f      	ldr	r0, [pc, #252]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x264>)
 80010c2:	f005 fb03 	bl	80066cc <HAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf14      	ite	ne
 80010cc:	2301      	movne	r3, #1
 80010ce:	2300      	moveq	r3, #0
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x268>)
 80010d4:	701a      	strb	r2, [r3, #0]
		 state1=state1|LEFT_ENCODER_A;
 80010d6:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x268>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b3c      	ldr	r3, [pc, #240]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010e6:	701a      	strb	r2, [r3, #0]
		 state1=state1<<1;
 80010e8:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 80010f2:	701a      	strb	r2, [r3, #0]
		 LEFT_ENCODER_B=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13);
 80010f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f8:	4831      	ldr	r0, [pc, #196]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x264>)
 80010fa:	f005 fae7 	bl	80066cc <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf14      	ite	ne
 8001104:	2301      	movne	r3, #1
 8001106:	2300      	moveq	r3, #0
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_GPIO_EXTI_Callback+0x270>)
 800110c:	701a      	strb	r2, [r3, #0]
		 state1=state1|LEFT_ENCODER_B;
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_GPIO_EXTI_Callback+0x270>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4313      	orrs	r3, r2
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 800111e:	701a      	strb	r2, [r3, #0]
		 state1=state1 & 0x03;
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 800112c:	701a      	strb	r2, [r3, #0]
		 switch(state1)
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d86c      	bhi.n	8001210 <HAL_GPIO_EXTI_Callback+0x2b4>
 8001136:	a201      	add	r2, pc, #4	; (adr r2, 800113c <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113c:	0800114d 	.word	0x0800114d
 8001140:	08001173 	.word	0x08001173
 8001144:	08001199 	.word	0x08001199
 8001148:	080011dd 	.word	0x080011dd
							 	 if(left_previous==1){left_count++;}
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d104      	bne.n	800115e <HAL_GPIO_EXTI_Callback+0x202>
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800115c:	6013      	str	r3, [r2, #0]
							 	 if(left_previous==2) {left_count--;}
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d14d      	bne.n	8001202 <HAL_GPIO_EXTI_Callback+0x2a6>
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3b01      	subs	r3, #1
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800116e:	6013      	str	r3, [r2, #0]
							 	 break;
 8001170:	e047      	b.n	8001202 <HAL_GPIO_EXTI_Callback+0x2a6>
		 	 	 	 		 	 if(left_previous==3){left_count++;}
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d104      	bne.n	8001184 <HAL_GPIO_EXTI_Callback+0x228>
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001182:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==0){left_count--;}
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d13c      	bne.n	8001206 <HAL_GPIO_EXTI_Callback+0x2aa>
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3b01      	subs	r3, #1
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 8001194:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001196:	e036      	b.n	8001206 <HAL_GPIO_EXTI_Callback+0x2aa>
		 	 	 	 		 	 if(left_previous==0){left_count++;}
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d104      	bne.n	80011aa <HAL_GPIO_EXTI_Callback+0x24e>
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80011a8:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==3) {left_count--;}
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x274>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d12b      	bne.n	800120a <HAL_GPIO_EXTI_Callback+0x2ae>
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80011ba:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 80011bc:	e025      	b.n	800120a <HAL_GPIO_EXTI_Callback+0x2ae>
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
 80011c4:	20000234 	.word	0x20000234
 80011c8:	20000235 	.word	0x20000235
 80011cc:	20000236 	.word	0x20000236
 80011d0:	20001708 	.word	0x20001708
 80011d4:	20001740 	.word	0x20001740
 80011d8:	20000237 	.word	0x20000237
		 	 	 	 		 	 if(left_previous==2){left_count++;}
 80011dc:	4b93      	ldr	r3, [pc, #588]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d104      	bne.n	80011ee <HAL_GPIO_EXTI_Callback+0x292>
 80011e4:	4b92      	ldr	r3, [pc, #584]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a91      	ldr	r2, [pc, #580]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80011ec:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(left_previous==1) {left_count--;}
 80011ee:	4b8f      	ldr	r3, [pc, #572]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d10b      	bne.n	800120e <HAL_GPIO_EXTI_Callback+0x2b2>
 80011f6:	4b8e      	ldr	r3, [pc, #568]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	4a8c      	ldr	r2, [pc, #560]	; (8001430 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80011fe:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001200:	e005      	b.n	800120e <HAL_GPIO_EXTI_Callback+0x2b2>
							 	 break;
 8001202:	bf00      	nop
 8001204:	e004      	b.n	8001210 <HAL_GPIO_EXTI_Callback+0x2b4>
		 	 	 	 		 	 break;
 8001206:	bf00      	nop
 8001208:	e002      	b.n	8001210 <HAL_GPIO_EXTI_Callback+0x2b4>
		 	 	 	 		 	 break;
 800120a:	bf00      	nop
 800120c:	e000      	b.n	8001210 <HAL_GPIO_EXTI_Callback+0x2b4>
		 	 	 	 		 	 break;
 800120e:	bf00      	nop
		 left_previous=state1;
 8001210:	4b88      	ldr	r3, [pc, #544]	; (8001434 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b85      	ldr	r3, [pc, #532]	; (800142c <HAL_GPIO_EXTI_Callback+0x4d0>)
 8001218:	601a      	str	r2, [r3, #0]
}
 800121a:	e160      	b.n	80014de <HAL_GPIO_EXTI_Callback+0x582>
	 else if (GPIO_Pin == GPIO_PIN_10)		 // LEFT CHANNEL B
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001222:	f040 80a2 	bne.w	800136a <HAL_GPIO_EXTI_Callback+0x40e>
		 RIGHT_ENCODER_A=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10);
 8001226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122a:	4883      	ldr	r0, [pc, #524]	; (8001438 <HAL_GPIO_EXTI_Callback+0x4dc>)
 800122c:	f005 fa4e 	bl	80066cc <HAL_GPIO_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b7f      	ldr	r3, [pc, #508]	; (800143c <HAL_GPIO_EXTI_Callback+0x4e0>)
 800123e:	701a      	strb	r2, [r3, #0]
		 state2=state2|RIGHT_ENCODER_A;
 8001240:	4b7e      	ldr	r3, [pc, #504]	; (800143c <HAL_GPIO_EXTI_Callback+0x4e0>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b7e      	ldr	r3, [pc, #504]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4313      	orrs	r3, r2
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b7c      	ldr	r3, [pc, #496]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001250:	701a      	strb	r2, [r3, #0]
		 state2=state2<<1;
 8001252:	4b7b      	ldr	r3, [pc, #492]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b79      	ldr	r3, [pc, #484]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800125c:	701a      	strb	r2, [r3, #0]
		 RIGHT_ENCODER_B=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_11);
 800125e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001262:	4875      	ldr	r0, [pc, #468]	; (8001438 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8001264:	f005 fa32 	bl	80066cc <HAL_GPIO_ReadPin>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf14      	ite	ne
 800126e:	2301      	movne	r3, #1
 8001270:	2300      	moveq	r3, #0
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b73      	ldr	r3, [pc, #460]	; (8001444 <HAL_GPIO_EXTI_Callback+0x4e8>)
 8001276:	701a      	strb	r2, [r3, #0]
		 state2=state2|RIGHT_ENCODER_B;
 8001278:	4b72      	ldr	r3, [pc, #456]	; (8001444 <HAL_GPIO_EXTI_Callback+0x4e8>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b70      	ldr	r3, [pc, #448]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b6e      	ldr	r3, [pc, #440]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001288:	701a      	strb	r2, [r3, #0]
		 state2=state2 & 0x03;
 800128a:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b6a      	ldr	r3, [pc, #424]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001296:	701a      	strb	r2, [r3, #0]
		 switch(state2)
 8001298:	4b69      	ldr	r3, [pc, #420]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d85e      	bhi.n	800135e <HAL_GPIO_EXTI_Callback+0x402>
 80012a0:	a201      	add	r2, pc, #4	; (adr r2, 80012a8 <HAL_GPIO_EXTI_Callback+0x34c>)
 80012a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a6:	bf00      	nop
 80012a8:	080012b9 	.word	0x080012b9
 80012ac:	080012df 	.word	0x080012df
 80012b0:	08001305 	.word	0x08001305
 80012b4:	0800132b 	.word	0x0800132b
				 if(right_previous==1){right_count++;}
 80012b8:	4b63      	ldr	r3, [pc, #396]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d104      	bne.n	80012ca <HAL_GPIO_EXTI_Callback+0x36e>
 80012c0:	4b62      	ldr	r3, [pc, #392]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a61      	ldr	r2, [pc, #388]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012c8:	6013      	str	r3, [r2, #0]
				 if(right_previous==2){right_count--;}
 80012ca:	4b5f      	ldr	r3, [pc, #380]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d13e      	bne.n	8001350 <HAL_GPIO_EXTI_Callback+0x3f4>
 80012d2:	4b5e      	ldr	r3, [pc, #376]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	4a5c      	ldr	r2, [pc, #368]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012da:	6013      	str	r3, [r2, #0]
				 break;
 80012dc:	e038      	b.n	8001350 <HAL_GPIO_EXTI_Callback+0x3f4>
	 	 		 	 if(right_previous==3){right_count++;}
 80012de:	4b5a      	ldr	r3, [pc, #360]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d104      	bne.n	80012f0 <HAL_GPIO_EXTI_Callback+0x394>
 80012e6:	4b59      	ldr	r3, [pc, #356]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	4a57      	ldr	r2, [pc, #348]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012ee:	6013      	str	r3, [r2, #0]
	 	 		 	 if(right_previous==0){right_count--;}
 80012f0:	4b55      	ldr	r3, [pc, #340]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d12d      	bne.n	8001354 <HAL_GPIO_EXTI_Callback+0x3f8>
 80012f8:	4b54      	ldr	r3, [pc, #336]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	4a53      	ldr	r2, [pc, #332]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001300:	6013      	str	r3, [r2, #0]
	 	 		 	 break;
 8001302:	e027      	b.n	8001354 <HAL_GPIO_EXTI_Callback+0x3f8>
	 	 		 	 if(right_previous==0){right_count++;}
 8001304:	4b50      	ldr	r3, [pc, #320]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d104      	bne.n	8001316 <HAL_GPIO_EXTI_Callback+0x3ba>
 800130c:	4b4f      	ldr	r3, [pc, #316]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	4a4e      	ldr	r2, [pc, #312]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001314:	6013      	str	r3, [r2, #0]
	 	 		 	 if(right_previous==3) {right_count--;}
 8001316:	4b4c      	ldr	r3, [pc, #304]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d11c      	bne.n	8001358 <HAL_GPIO_EXTI_Callback+0x3fc>
 800131e:	4b4b      	ldr	r3, [pc, #300]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3b01      	subs	r3, #1
 8001324:	4a49      	ldr	r2, [pc, #292]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001326:	6013      	str	r3, [r2, #0]
	 	 		 	 break;
 8001328:	e016      	b.n	8001358 <HAL_GPIO_EXTI_Callback+0x3fc>
	 	 		 	 if(right_previous==2){right_count++;}
 800132a:	4b47      	ldr	r3, [pc, #284]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d104      	bne.n	800133c <HAL_GPIO_EXTI_Callback+0x3e0>
 8001332:	4b46      	ldr	r3, [pc, #280]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	4a44      	ldr	r2, [pc, #272]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800133a:	6013      	str	r3, [r2, #0]
	 	 		 	 if(right_previous==1) {right_count--;}
 800133c:	4b42      	ldr	r3, [pc, #264]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d10b      	bne.n	800135c <HAL_GPIO_EXTI_Callback+0x400>
 8001344:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3b01      	subs	r3, #1
 800134a:	4a40      	ldr	r2, [pc, #256]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800134c:	6013      	str	r3, [r2, #0]
	 	 		 	 break;
 800134e:	e005      	b.n	800135c <HAL_GPIO_EXTI_Callback+0x400>
				 break;
 8001350:	bf00      	nop
 8001352:	e004      	b.n	800135e <HAL_GPIO_EXTI_Callback+0x402>
	 	 		 	 break;
 8001354:	bf00      	nop
 8001356:	e002      	b.n	800135e <HAL_GPIO_EXTI_Callback+0x402>
	 	 		 	 break;
 8001358:	bf00      	nop
 800135a:	e000      	b.n	800135e <HAL_GPIO_EXTI_Callback+0x402>
	 	 		 	 break;
 800135c:	bf00      	nop
		 right_previous=state2;
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	e0b9      	b.n	80014de <HAL_GPIO_EXTI_Callback+0x582>
	 else if (GPIO_Pin == GPIO_PIN_11)
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001370:	f040 80b5 	bne.w	80014de <HAL_GPIO_EXTI_Callback+0x582>
		 RIGHT_ENCODER_A=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10);
 8001374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001378:	482f      	ldr	r0, [pc, #188]	; (8001438 <HAL_GPIO_EXTI_Callback+0x4dc>)
 800137a:	f005 f9a7 	bl	80066cc <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf14      	ite	ne
 8001384:	2301      	movne	r3, #1
 8001386:	2300      	moveq	r3, #0
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <HAL_GPIO_EXTI_Callback+0x4e0>)
 800138c:	701a      	strb	r2, [r3, #0]
		 state3=state3|RIGHT_ENCODER_A;
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <HAL_GPIO_EXTI_Callback+0x4e0>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4313      	orrs	r3, r2
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 800139e:	701a      	strb	r2, [r3, #0]
		 state3=state3<<1;
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013aa:	701a      	strb	r2, [r3, #0]
		 RIGHT_ENCODER_B=HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_11);
 80013ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b0:	4821      	ldr	r0, [pc, #132]	; (8001438 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80013b2:	f005 f98b 	bl	80066cc <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	bf14      	ite	ne
 80013bc:	2301      	movne	r3, #1
 80013be:	2300      	moveq	r3, #0
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_GPIO_EXTI_Callback+0x4e8>)
 80013c4:	701a      	strb	r2, [r3, #0]
		 state3=state3|RIGHT_ENCODER_B;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <HAL_GPIO_EXTI_Callback+0x4e8>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013d6:	701a      	strb	r2, [r3, #0]
		 state3=state3 & 0x03;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013e4:	701a      	strb	r2, [r3, #0]
		 switch(state3)
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d872      	bhi.n	80014d4 <HAL_GPIO_EXTI_Callback+0x578>
 80013ee:	a201      	add	r2, pc, #4	; (adr r2, 80013f4 <HAL_GPIO_EXTI_Callback+0x498>)
 80013f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f4:	08001405 	.word	0x08001405
 80013f8:	08001455 	.word	0x08001455
 80013fc:	0800147b 	.word	0x0800147b
 8001400:	080014a1 	.word	0x080014a1
								 if(right_previous==1){right_count++;}
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d104      	bne.n	8001416 <HAL_GPIO_EXTI_Callback+0x4ba>
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001414:	6013      	str	r3, [r2, #0]
								 if(right_previous==2){right_count--;}
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_GPIO_EXTI_Callback+0x4ec>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d153      	bne.n	80014c6 <HAL_GPIO_EXTI_Callback+0x56a>
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3b01      	subs	r3, #1
 8001424:	4a09      	ldr	r2, [pc, #36]	; (800144c <HAL_GPIO_EXTI_Callback+0x4f0>)
 8001426:	6013      	str	r3, [r2, #0]
								 break;
 8001428:	e04d      	b.n	80014c6 <HAL_GPIO_EXTI_Callback+0x56a>
 800142a:	bf00      	nop
 800142c:	20001708 	.word	0x20001708
 8001430:	20001740 	.word	0x20001740
 8001434:	20000237 	.word	0x20000237
 8001438:	40021000 	.word	0x40021000
 800143c:	20000238 	.word	0x20000238
 8001440:	20000239 	.word	0x20000239
 8001444:	2000023a 	.word	0x2000023a
 8001448:	20001724 	.word	0x20001724
 800144c:	2000170c 	.word	0x2000170c
 8001450:	2000023b 	.word	0x2000023b
		 	 	 	 		 	 if(right_previous==3){right_count++;}
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d104      	bne.n	8001466 <HAL_GPIO_EXTI_Callback+0x50a>
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	4a22      	ldr	r2, [pc, #136]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 8001464:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(right_previous==0){right_count--;}
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d12d      	bne.n	80014ca <HAL_GPIO_EXTI_Callback+0x56e>
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3b01      	subs	r3, #1
 8001474:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 8001476:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 8001478:	e027      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0x56e>
		 	 	 	 		 	 if(right_previous==0){right_count++;}
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d104      	bne.n	800148c <HAL_GPIO_EXTI_Callback+0x530>
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	4a18      	ldr	r2, [pc, #96]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 800148a:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(right_previous==3) {right_count--;}
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b03      	cmp	r3, #3
 8001492:	d11c      	bne.n	80014ce <HAL_GPIO_EXTI_Callback+0x572>
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 800149c:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 800149e:	e016      	b.n	80014ce <HAL_GPIO_EXTI_Callback+0x572>
		 	 	 	 		 	 if(right_previous==2){right_count++;}
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d104      	bne.n	80014b2 <HAL_GPIO_EXTI_Callback+0x556>
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 80014b0:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 if(right_previous==1) {right_count--;}
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d10b      	bne.n	80014d2 <HAL_GPIO_EXTI_Callback+0x576>
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3b01      	subs	r3, #1
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_GPIO_EXTI_Callback+0x590>)
 80014c2:	6013      	str	r3, [r2, #0]
		 	 	 	 		 	 break;
 80014c4:	e005      	b.n	80014d2 <HAL_GPIO_EXTI_Callback+0x576>
								 break;
 80014c6:	bf00      	nop
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_EXTI_Callback+0x578>
		 	 	 	 		 	 break;
 80014ca:	bf00      	nop
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_EXTI_Callback+0x578>
		 	 	 	 		 	 break;
 80014ce:	bf00      	nop
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_EXTI_Callback+0x578>
		 	 	 	 		 	 break;
 80014d2:	bf00      	nop
		 right_previous=state3;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x594>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20001724 	.word	0x20001724
 80014ec:	2000170c 	.word	0x2000170c
 80014f0:	2000023b 	.word	0x2000023b
 80014f4:	00000000 	.word	0x00000000

080014f8 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	cnt++;
 8001500:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	4a30      	ldr	r2, [pc, #192]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001508:	6013      	str	r3, [r2, #0]
	if(cnt==(1000*SAMPLE_TIME)) //1 cnt = 0.001s, default:100 = 0.1s
 800150a:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b32      	cmp	r3, #50	; 0x32
 8001510:	d150      	bne.n	80015b4 <HAL_TIM_PeriodElapsedCallback+0xbc>
	{

		ActualAngularVelocity[0]   = left_count * 60  / (ENCODER_RESOLUTION*0.001*cnt);
 8001512:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4613      	mov	r3, r2
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	1a9b      	subs	r3, r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f808 	bl	8000534 <__aeabi_i2d>
 8001524:	4604      	mov	r4, r0
 8001526:	460d      	mov	r5, r1
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f801 	bl	8000534 <__aeabi_i2d>
 8001532:	a323      	add	r3, pc, #140	; (adr r3, 80015c0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7ff f866 	bl	8000608 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4620      	mov	r0, r4
 8001542:	4629      	mov	r1, r5
 8001544:	f7ff f98a 	bl	800085c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff fb32 	bl	8000bb8 <__aeabi_d2f>
 8001554:	4603      	mov	r3, r0
 8001556:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001558:	6013      	str	r3, [r2, #0]
		ActualAngularVelocity[1]   = right_count* 60  / (ENCODER_RESOLUTION*0.001*cnt);
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4613      	mov	r3, r2
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe ffe4 	bl	8000534 <__aeabi_i2d>
 800156c:	4604      	mov	r4, r0
 800156e:	460d      	mov	r5, r1
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ffdd 	bl	8000534 <__aeabi_i2d>
 800157a:	a311      	add	r3, pc, #68	; (adr r3, 80015c0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7ff f842 	bl	8000608 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4620      	mov	r0, r4
 800158a:	4629      	mov	r1, r5
 800158c:	f7ff f966 	bl	800085c <__aeabi_ddiv>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f7ff fb0e 	bl	8000bb8 <__aeabi_d2f>
 800159c:	4603      	mov	r3, r0
 800159e:	4a0c      	ldr	r2, [pc, #48]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80015a0:	6053      	str	r3, [r2, #4]

		left_count=0;
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
		right_count=0;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
		cnt=0;
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
	}
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bdb0      	pop	{r4, r5, r7, pc}
 80015bc:	f3af 8000 	nop.w
 80015c0:	24dd2f1b 	.word	0x24dd2f1b
 80015c4:	40158106 	.word	0x40158106
 80015c8:	20001714 	.word	0x20001714
 80015cc:	20001740 	.word	0x20001740
 80015d0:	20001728 	.word	0x20001728
 80015d4:	2000170c 	.word	0x2000170c

080015d8 <PID_Compute>:
float CurrentError;
void PID_Compute(PID_TypeDef *uPID,Error_TypeDef *Error,float Kp, float Ki, float Kb, double SetPoint, double ControlledVariable,float *PidOutput)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b090      	sub	sp, #64	; 0x40
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6278      	str	r0, [r7, #36]	; 0x24
 80015e0:	6239      	str	r1, [r7, #32]
 80015e2:	ed87 0a07 	vstr	s0, [r7, #28]
 80015e6:	edc7 0a06 	vstr	s1, [r7, #24]
 80015ea:	ed87 1a05 	vstr	s2, [r7, #20]
 80015ee:	ed87 2b02 	vstr	d2, [r7, #8]
 80015f2:	ed87 3b00 	vstr	d3, [r7]
 80015f6:	613a      	str	r2, [r7, #16]
	// PWM mode has the range from 0 to 400.
	float HighLimit = 400, PWM, PWM_hat, uk, ui;
 80015f8:	4b63      	ldr	r3, [pc, #396]	; (8001788 <PID_Compute+0x1b0>)
 80015fa:	63bb      	str	r3, [r7, #56]	; 0x38
	static float previous_ui;

	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->Kp = Kp;
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	601a      	str	r2, [r3, #0]
	uPID->Ki = Ki;
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	605a      	str	r2, [r3, #4]
	uPID->Kb = Kb;
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	609a      	str	r2, [r3, #8]

	// Calculate the error
	Error->CurrentError= SetPoint-fabs(ControlledVariable);
 800160e:	683c      	ldr	r4, [r7, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001616:	4622      	mov	r2, r4
 8001618:	462b      	mov	r3, r5
 800161a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800161e:	f7fe fe3b 	bl	8000298 <__aeabi_dsub>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fac5 	bl	8000bb8 <__aeabi_d2f>
 800162e:	4602      	mov	r2, r0
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	601a      	str	r2, [r3, #0]

	// Proportion
	uk = (uPID->Kp) * (Error->CurrentError);
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	ed93 7a00 	vldr	s14, [r3]
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001644:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Integration
	ui = previous_ui + (uPID->Ki) * (Error->CurrentError) * SAMPLE_TIME;
 8001648:	4b50      	ldr	r3, [pc, #320]	; (800178c <PID_Compute+0x1b4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff83 	bl	8000558 <__aeabi_f2d>
 8001652:	4604      	mov	r4, r0
 8001654:	460d      	mov	r5, r1
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	ed93 7a01 	vldr	s14, [r3, #4]
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	edd3 7a00 	vldr	s15, [r3]
 8001662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001666:	ee17 0a90 	vmov	r0, s15
 800166a:	f7fe ff75 	bl	8000558 <__aeabi_f2d>
 800166e:	a344      	add	r3, pc, #272	; (adr r3, 8001780 <PID_Compute+0x1a8>)
 8001670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001674:	f7fe ffc8 	bl	8000608 <__aeabi_dmul>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4620      	mov	r0, r4
 800167e:	4629      	mov	r1, r5
 8001680:	f7fe fe0c 	bl	800029c <__adddf3>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff fa94 	bl	8000bb8 <__aeabi_d2f>
 8001690:	4603      	mov	r3, r0
 8001692:	63fb      	str	r3, [r7, #60]	; 0x3c

	PWM = ui+uk;
 8001694:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001698:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800169c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	if(PWM < HighLimit)
 80016a4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80016a8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80016ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b4:	d50b      	bpl.n	80016ce <PID_Compute+0xf6>
	{
		PWM_hat = PWM;
 80016b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		Error-> ResetError  = 0;
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]

		*PidOutput   = PWM;
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016c6:	601a      	str	r2, [r3, #0]
		uPID->PidOutput=PWM;
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016cc:	60da      	str	r2, [r3, #12]
	}

	if(PWM > HighLimit)
 80016ce:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80016d2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80016d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016de:	dd47      	ble.n	8001770 <PID_Compute+0x198>
	{
		PWM_hat = HighLimit;
 80016e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		Error->ResetError = PWM_hat - PWM;
 80016e4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80016e8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80016ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	edc3 7a02 	vstr	s15, [r3, #8]

		Error->AntiWindupError = (uPID->Ki) * (Error->CurrentError) + (Error->ResetError)*(uPID->Kb);
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	edd3 6a02 	vldr	s13, [r3, #8]
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	edc3 7a01 	vstr	s15, [r3, #4]

		ui=previous_ui + (Error->AntiWindupError) * SAMPLE_TIME;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <PID_Compute+0x1b4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe ff17 	bl	8000558 <__aeabi_f2d>
 800172a:	4604      	mov	r4, r0
 800172c:	460d      	mov	r5, r1
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff10 	bl	8000558 <__aeabi_f2d>
 8001738:	a311      	add	r3, pc, #68	; (adr r3, 8001780 <PID_Compute+0x1a8>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe ff63 	bl	8000608 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4620      	mov	r0, r4
 8001748:	4629      	mov	r1, r5
 800174a:	f7fe fda7 	bl	800029c <__adddf3>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff fa2f 	bl	8000bb8 <__aeabi_d2f>
 800175a:	4603      	mov	r3, r0
 800175c:	63fb      	str	r3, [r7, #60]	; 0x3c

		*PidOutput = uk+ui;
 800175e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001762:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	edc3 7a00 	vstr	s15, [r3]
	}
	previous_ui=ui;
 8001770:	4a06      	ldr	r2, [pc, #24]	; (800178c <PID_Compute+0x1b4>)
 8001772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001774:	6013      	str	r3, [r2, #0]

}
 8001776:	bf00      	nop
 8001778:	3740      	adds	r7, #64	; 0x40
 800177a:	46bd      	mov	sp, r7
 800177c:	bdb0      	pop	{r4, r5, r7, pc}
 800177e:	bf00      	nop
 8001780:	9999999a 	.word	0x9999999a
 8001784:	3fa99999 	.word	0x3fa99999
 8001788:	43c80000 	.word	0x43c80000
 800178c:	2000023c 	.word	0x2000023c

08001790 <ReadEncoder>:

void ReadEncoder()
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <ComputeVelocity>:

void ComputeVelocity()
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	0000      	movs	r0, r0
	...

080017b0 <SubcribeVelocityFromRos>:

void SubcribeVelocityFromRos(const double linear_velocity,const double angular_velocity)
{
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	ed87 0b02 	vstr	d0, [r7, #8]
 80017ba:	ed87 1b00 	vstr	d1, [r7]

	// Calculate vel of each wheel
	SetPointLinearVelocity[0]    = (2*linear_velocity-angular_velocity*WHEEL_SEPARATION)/2;  // unit: m/s
 80017be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	f7fe fd69 	bl	800029c <__adddf3>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4614      	mov	r4, r2
 80017d0:	461d      	mov	r5, r3
 80017d2:	a3a5      	add	r3, pc, #660	; (adr r3, 8001a68 <SubcribeVelocityFromRos+0x2b8>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017dc:	f7fe ff14 	bl	8000608 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4620      	mov	r0, r4
 80017e6:	4629      	mov	r1, r5
 80017e8:	f7fe fd56 	bl	8000298 <__aeabi_dsub>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017fc:	f7ff f82e 	bl	800085c <__aeabi_ddiv>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f9d6 	bl	8000bb8 <__aeabi_d2f>
 800180c:	4603      	mov	r3, r0
 800180e:	4a9c      	ldr	r2, [pc, #624]	; (8001a80 <SubcribeVelocityFromRos+0x2d0>)
 8001810:	6013      	str	r3, [r2, #0]
	SetPointLinearVelocity[1]    = (2*linear_velocity+angular_velocity*WHEEL_SEPARATION)/2;
 8001812:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	f7fe fd3f 	bl	800029c <__adddf3>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4614      	mov	r4, r2
 8001824:	461d      	mov	r5, r3
 8001826:	a390      	add	r3, pc, #576	; (adr r3, 8001a68 <SubcribeVelocityFromRos+0x2b8>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001830:	f7fe feea 	bl	8000608 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4620      	mov	r0, r4
 800183a:	4629      	mov	r1, r5
 800183c:	f7fe fd2e 	bl	800029c <__adddf3>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001850:	f7ff f804 	bl	800085c <__aeabi_ddiv>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff f9ac 	bl	8000bb8 <__aeabi_d2f>
 8001860:	4603      	mov	r3, r0
 8001862:	4a87      	ldr	r2, [pc, #540]	; (8001a80 <SubcribeVelocityFromRos+0x2d0>)
 8001864:	6053      	str	r3, [r2, #4]

	//v=omega.r => omega=v/r (rad/s)
	SetPointAngularVelocity[0]   =  SetPointLinearVelocity[0] /WHEEL_RADIUS;
 8001866:	4b86      	ldr	r3, [pc, #536]	; (8001a80 <SubcribeVelocityFromRos+0x2d0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe74 	bl	8000558 <__aeabi_f2d>
 8001870:	a37f      	add	r3, pc, #508	; (adr r3, 8001a70 <SubcribeVelocityFromRos+0x2c0>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7fe fff1 	bl	800085c <__aeabi_ddiv>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff f999 	bl	8000bb8 <__aeabi_d2f>
 8001886:	4603      	mov	r3, r0
 8001888:	4a7e      	ldr	r2, [pc, #504]	; (8001a84 <SubcribeVelocityFromRos+0x2d4>)
 800188a:	6013      	str	r3, [r2, #0]
	SetPointAngularVelocity[1]   =  SetPointLinearVelocity[1] /WHEEL_RADIUS;
 800188c:	4b7c      	ldr	r3, [pc, #496]	; (8001a80 <SubcribeVelocityFromRos+0x2d0>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe61 	bl	8000558 <__aeabi_f2d>
 8001896:	a376      	add	r3, pc, #472	; (adr r3, 8001a70 <SubcribeVelocityFromRos+0x2c0>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7fe ffde 	bl	800085c <__aeabi_ddiv>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f7ff f986 	bl	8000bb8 <__aeabi_d2f>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4a75      	ldr	r2, [pc, #468]	; (8001a84 <SubcribeVelocityFromRos+0x2d4>)
 80018b0:	6053      	str	r3, [r2, #4]

	// convert to RPM
	SetPointAngularVelocity[0]   = SetPointAngularVelocity[0]*60 /2*PI;
 80018b2:	4b74      	ldr	r3, [pc, #464]	; (8001a84 <SubcribeVelocityFromRos+0x2d4>)
 80018b4:	edd3 7a00 	vldr	s15, [r3]
 80018b8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001a88 <SubcribeVelocityFromRos+0x2d8>
 80018bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80018c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018c8:	ee16 0a90 	vmov	r0, s13
 80018cc:	f7fe fe44 	bl	8000558 <__aeabi_f2d>
 80018d0:	a369      	add	r3, pc, #420	; (adr r3, 8001a78 <SubcribeVelocityFromRos+0x2c8>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe fe97 	bl	8000608 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f969 	bl	8000bb8 <__aeabi_d2f>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a66      	ldr	r2, [pc, #408]	; (8001a84 <SubcribeVelocityFromRos+0x2d4>)
 80018ea:	6013      	str	r3, [r2, #0]
	SetPointAngularVelocity[1]   = SetPointAngularVelocity[1]*60 /2*PI;
 80018ec:	4b65      	ldr	r3, [pc, #404]	; (8001a84 <SubcribeVelocityFromRos+0x2d4>)
 80018ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80018f2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001a88 <SubcribeVelocityFromRos+0x2d8>
 80018f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018fa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80018fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001902:	ee16 0a90 	vmov	r0, s13
 8001906:	f7fe fe27 	bl	8000558 <__aeabi_f2d>
 800190a:	a35b      	add	r3, pc, #364	; (adr r3, 8001a78 <SubcribeVelocityFromRos+0x2c8>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe fe7a 	bl	8000608 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f94c 	bl	8000bb8 <__aeabi_d2f>
 8001920:	4603      	mov	r3, r0
 8001922:	4a58      	ldr	r2, [pc, #352]	; (8001a84 <SubcribeVelocityFromRos+0x2d4>)
 8001924:	6053      	str	r3, [r2, #4]
	// Determine the direction with the sign of value corresponding
	// (0,1): clockwise, (1,0): counter clockwise.
	// IN1 (PB1), IN2 (PB2) pin    (motor A)
	// IN3 (PE8), IN4 (PE9) pin	   (motor B)

	if((SetPointLinearVelocity[0]>0) && (SetPointLinearVelocity[1]>0))
 8001926:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <SubcribeVelocityFromRos+0x2d0>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001934:	dd1d      	ble.n	8001972 <SubcribeVelocityFromRos+0x1c2>
 8001936:	4b52      	ldr	r3, [pc, #328]	; (8001a80 <SubcribeVelocityFromRos+0x2d0>)
 8001938:	edd3 7a01 	vldr	s15, [r3, #4]
 800193c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001944:	dd15      	ble.n	8001972 <SubcribeVelocityFromRos+0x1c2>
	{
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8001946:	2201      	movs	r2, #1
 8001948:	2102      	movs	r1, #2
 800194a:	4850      	ldr	r0, [pc, #320]	; (8001a8c <SubcribeVelocityFromRos+0x2dc>)
 800194c:	f004 fed6 	bl	80066fc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	2104      	movs	r1, #4
 8001954:	484d      	ldr	r0, [pc, #308]	; (8001a8c <SubcribeVelocityFromRos+0x2dc>)
 8001956:	f004 fed1 	bl	80066fc <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001960:	484b      	ldr	r0, [pc, #300]	; (8001a90 <SubcribeVelocityFromRos+0x2e0>)
 8001962:	f004 fecb 	bl	80066fc <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 8001966:	2201      	movs	r2, #1
 8001968:	f44f 7100 	mov.w	r1, #512	; 0x200
 800196c:	4848      	ldr	r0, [pc, #288]	; (8001a90 <SubcribeVelocityFromRos+0x2e0>)
 800196e:	f004 fec5 	bl	80066fc <HAL_GPIO_WritePin>
	}

	if((SetPointLinearVelocity[0]<0) && (SetPointLinearVelocity[1]<0))
 8001972:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <SubcribeVelocityFromRos+0x2d0>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001980:	d51d      	bpl.n	80019be <SubcribeVelocityFromRos+0x20e>
 8001982:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <SubcribeVelocityFromRos+0x2d0>)
 8001984:	edd3 7a01 	vldr	s15, [r3, #4]
 8001988:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001990:	d515      	bpl.n	80019be <SubcribeVelocityFromRos+0x20e>
	{
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001998:	483d      	ldr	r0, [pc, #244]	; (8001a90 <SubcribeVelocityFromRos+0x2e0>)
 800199a:	f004 feaf 	bl	80066fc <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019a4:	483a      	ldr	r0, [pc, #232]	; (8001a90 <SubcribeVelocityFromRos+0x2e0>)
 80019a6:	f004 fea9 	bl	80066fc <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 80019aa:	2201      	movs	r2, #1
 80019ac:	2102      	movs	r1, #2
 80019ae:	4837      	ldr	r0, [pc, #220]	; (8001a8c <SubcribeVelocityFromRos+0x2dc>)
 80019b0:	f004 fea4 	bl	80066fc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2104      	movs	r1, #4
 80019b8:	4834      	ldr	r0, [pc, #208]	; (8001a8c <SubcribeVelocityFromRos+0x2dc>)
 80019ba:	f004 fe9f 	bl	80066fc <HAL_GPIO_WritePin>
	}

	if((SetPointLinearVelocity[0]>0) && (SetPointLinearVelocity[1]<0))
 80019be:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <SubcribeVelocityFromRos+0x2d0>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019cc:	dd1d      	ble.n	8001a0a <SubcribeVelocityFromRos+0x25a>
 80019ce:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <SubcribeVelocityFromRos+0x2d0>)
 80019d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80019d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019dc:	d515      	bpl.n	8001a0a <SubcribeVelocityFromRos+0x25a>
	{
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_SET);
 80019de:	2201      	movs	r2, #1
 80019e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019e4:	482a      	ldr	r0, [pc, #168]	; (8001a90 <SubcribeVelocityFromRos+0x2e0>)
 80019e6:	f004 fe89 	bl	80066fc <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019f0:	4827      	ldr	r0, [pc, #156]	; (8001a90 <SubcribeVelocityFromRos+0x2e0>)
 80019f2:	f004 fe83 	bl	80066fc <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	2102      	movs	r1, #2
 80019fa:	4824      	ldr	r0, [pc, #144]	; (8001a8c <SubcribeVelocityFromRos+0x2dc>)
 80019fc:	f004 fe7e 	bl	80066fc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2104      	movs	r1, #4
 8001a04:	4821      	ldr	r0, [pc, #132]	; (8001a8c <SubcribeVelocityFromRos+0x2dc>)
 8001a06:	f004 fe79 	bl	80066fc <HAL_GPIO_WritePin>
	}

	if((SetPointLinearVelocity[0]<0) && (SetPointLinearVelocity[1]>0))
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <SubcribeVelocityFromRos+0x2d0>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	d400      	bmi.n	8001a1c <SubcribeVelocityFromRos+0x26c>
	          HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);

		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
	}
}
 8001a1a:	e01e      	b.n	8001a5a <SubcribeVelocityFromRos+0x2aa>
	if((SetPointLinearVelocity[0]<0) && (SetPointLinearVelocity[1]>0))
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <SubcribeVelocityFromRos+0x2d0>)
 8001a1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	dc00      	bgt.n	8001a2e <SubcribeVelocityFromRos+0x27e>
}
 8001a2c:	e015      	b.n	8001a5a <SubcribeVelocityFromRos+0x2aa>
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_RESET);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a34:	4816      	ldr	r0, [pc, #88]	; (8001a90 <SubcribeVelocityFromRos+0x2e0>)
 8001a36:	f004 fe61 	bl	80066fc <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a40:	4813      	ldr	r0, [pc, #76]	; (8001a90 <SubcribeVelocityFromRos+0x2e0>)
 8001a42:	f004 fe5b 	bl	80066fc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2102      	movs	r1, #2
 8001a4a:	4810      	ldr	r0, [pc, #64]	; (8001a8c <SubcribeVelocityFromRos+0x2dc>)
 8001a4c:	f004 fe56 	bl	80066fc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	2104      	movs	r1, #4
 8001a54:	480d      	ldr	r0, [pc, #52]	; (8001a8c <SubcribeVelocityFromRos+0x2dc>)
 8001a56:	f004 fe51 	bl	80066fc <HAL_GPIO_WritePin>
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bdb0      	pop	{r4, r5, r7, pc}
 8001a62:	bf00      	nop
 8001a64:	f3af 8000 	nop.w
 8001a68:	33333333 	.word	0x33333333
 8001a6c:	3fd33333 	.word	0x3fd33333
 8001a70:	9999999a 	.word	0x9999999a
 8001a74:	3fa99999 	.word	0x3fa99999
 8001a78:	54442d18 	.word	0x54442d18
 8001a7c:	400921fb 	.word	0x400921fb
 8001a80:	20001738 	.word	0x20001738
 8001a84:	20000010 	.word	0x20000010
 8001a88:	42700000 	.word	0x42700000
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40021000 	.word	0x40021000

08001a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a98:	f003 feea 	bl	8005870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a9c:	f000 f846 	bl	8001b2c <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001aa0:	f000 f8b6 	bl	8001c10 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aa4:	f000 fb04 	bl	80020b0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001aa8:	f000 fada 	bl	8002060 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001aac:	f000 f8d6 	bl	8001c5c <_ZL12MX_I2C1_Initv>
  MX_I2S2_Init();
 8001ab0:	f000 f908 	bl	8001cc4 <_ZL12MX_I2S2_Initv>
  MX_I2S3_Init();
 8001ab4:	f000 f93a 	bl	8001d2c <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 8001ab8:	f000 f96c 	bl	8001d94 <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 8001abc:	f00d f83c 	bl	800eb38 <MX_USB_HOST_Init>
  MX_TIM3_Init();
 8001ac0:	f000 fa00 	bl	8001ec4 <_ZL12MX_TIM3_Initv>
  MX_TIM2_Init();
 8001ac4:	f000 f9a2 	bl	8001e0c <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 8001ac8:	f000 fa9c 	bl	8002004 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 8001acc:	f002 fb0c 	bl	80040e8 <setup>
  HAL_TIM_Base_Start_IT(&htim2);
 8001ad0:	4812      	ldr	r0, [pc, #72]	; (8001b1c <main+0x88>)
 8001ad2:	f007 ff0d 	bl	80098f0 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4811      	ldr	r0, [pc, #68]	; (8001b20 <main+0x8c>)
 8001ada:	f007 ffc5 	bl	8009a68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8001ade:	2108      	movs	r1, #8
 8001ae0:	480f      	ldr	r0, [pc, #60]	; (8001b20 <main+0x8c>)
 8001ae2:	f007 ffc1 	bl	8009a68 <HAL_TIM_PWM_Start>


  // IN1,IN2 pin   (motor A)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2102      	movs	r1, #2
 8001aea:	480e      	ldr	r0, [pc, #56]	; (8001b24 <main+0x90>)
 8001aec:	f004 fe06 	bl	80066fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	2104      	movs	r1, #4
 8001af4:	480b      	ldr	r0, [pc, #44]	; (8001b24 <main+0x90>)
 8001af6:	f004 fe01 	bl	80066fc <HAL_GPIO_WritePin>

  // IN3,IN4 pin	(motor B)
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_RESET);    // (0,1): < 0: forward. (1,0): >0 : reverse.
 8001afa:	2200      	movs	r2, #0
 8001afc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b00:	4809      	ldr	r0, [pc, #36]	; (8001b28 <main+0x94>)
 8001b02:	f004 fdfb 	bl	80066fc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 8001b06:	2201      	movs	r2, #1
 8001b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b0c:	4806      	ldr	r0, [pc, #24]	; (8001b28 <main+0x94>)
 8001b0e:	f004 fdf5 	bl	80066fc <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001b12:	f00d f837 	bl	800eb84 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    loop();
 8001b16:	f002 faff 	bl	8004118 <loop>
    MX_USB_HOST_Process();
 8001b1a:	e7fa      	b.n	8001b12 <main+0x7e>
 8001b1c:	2000037c 	.word	0x2000037c
 8001b20:	200003c4 	.word	0x200003c4
 8001b24:	40020400 	.word	0x40020400
 8001b28:	40021000 	.word	0x40021000

08001b2c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b094      	sub	sp, #80	; 0x50
 8001b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b32:	f107 0320 	add.w	r3, r7, #32
 8001b36:	2230      	movs	r2, #48	; 0x30
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f00d fb8e 	bl	800f25c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	4b2c      	ldr	r3, [pc, #176]	; (8001c08 <_Z18SystemClock_Configv+0xdc>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	4a2b      	ldr	r2, [pc, #172]	; (8001c08 <_Z18SystemClock_Configv+0xdc>)
 8001b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <_Z18SystemClock_Configv+0xdc>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <_Z18SystemClock_Configv+0xe0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a25      	ldr	r2, [pc, #148]	; (8001c0c <_Z18SystemClock_Configv+0xe0>)
 8001b76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <_Z18SystemClock_Configv+0xe0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b92:	2302      	movs	r3, #2
 8001b94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ba0:	23c0      	movs	r3, #192	; 0xc0
 8001ba2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001ba8:	2308      	movs	r3, #8
 8001baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bac:	f107 0320 	add.w	r3, r7, #32
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f006 ffdd 	bl	8008b70 <HAL_RCC_OscConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf14      	ite	ne
 8001bbc:	2301      	movne	r3, #1
 8001bbe:	2300      	moveq	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001bc6:	f000 fb97 	bl	80022f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bca:	230f      	movs	r3, #15
 8001bcc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bd6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	2103      	movs	r1, #3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f007 fa3a 	bl	8009060 <HAL_RCC_ClockConfig>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	bf14      	ite	ne
 8001bf2:	2301      	movne	r3, #1
 8001bf4:	2300      	moveq	r3, #0
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001bfc:	f000 fb7c 	bl	80022f8 <Error_Handler>
  }
}
 8001c00:	bf00      	nop
 8001c02:	3750      	adds	r7, #80	; 0x50
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40007000 	.word	0x40007000

08001c10 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c16:	463b      	mov	r3, r7
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
 8001c24:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001c26:	2301      	movs	r3, #1
 8001c28:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001c2a:	23c8      	movs	r3, #200	; 0xc8
 8001c2c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001c2e:	2305      	movs	r3, #5
 8001c30:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001c32:	2302      	movs	r3, #2
 8001c34:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c36:	463b      	mov	r3, r7
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f007 fc31 	bl	80094a0 <HAL_RCCEx_PeriphCLKConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bf14      	ite	ne
 8001c44:	2301      	movne	r3, #1
 8001c46:	2300      	moveq	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 8001c4e:	f000 fb53 	bl	80022f8 <Error_Handler>
  }
}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c62:	4a16      	ldr	r2, [pc, #88]	; (8001cbc <_ZL12MX_I2C1_Initv+0x60>)
 8001c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c68:	4a15      	ldr	r2, [pc, #84]	; (8001cc0 <_ZL12MX_I2C1_Initv+0x64>)
 8001c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c98:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001c9a:	f006 f985 	bl	8007fa8 <HAL_I2C_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf14      	ite	ne
 8001ca4:	2301      	movne	r3, #1
 8001ca6:	2300      	moveq	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001cae:	f000 fb23 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000240 	.word	0x20000240
 8001cbc:	40005400 	.word	0x40005400
 8001cc0:	000186a0 	.word	0x000186a0

08001cc4 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cca:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <_ZL12MX_I2S2_Initv+0x60>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <_ZL12MX_I2S2_Initv+0x5c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cea:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <_ZL12MX_I2S2_Initv+0x64>)
 8001cec:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001d00:	4807      	ldr	r0, [pc, #28]	; (8001d20 <_ZL12MX_I2S2_Initv+0x5c>)
 8001d02:	f006 fa95 	bl	8008230 <HAL_I2S_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf14      	ite	ne
 8001d0c:	2301      	movne	r3, #1
 8001d0e:	2300      	moveq	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <_ZL12MX_I2S2_Initv+0x56>
  {
    Error_Handler();
 8001d16:	f000 faef 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000294 	.word	0x20000294
 8001d24:	40003800 	.word	0x40003800
 8001d28:	00017700 	.word	0x00017700

08001d2c <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d32:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <_ZL12MX_I2S3_Initv+0x60>)
 8001d34:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001d3e:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001d44:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d50:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d54:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <_ZL12MX_I2S3_Initv+0x64>)
 8001d56:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001d6a:	4807      	ldr	r0, [pc, #28]	; (8001d88 <_ZL12MX_I2S3_Initv+0x5c>)
 8001d6c:	f006 fa60 	bl	8008230 <HAL_I2S_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	bf14      	ite	ne
 8001d76:	2301      	movne	r3, #1
 8001d78:	2300      	moveq	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 8001d80:	f000 faba 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200002dc 	.word	0x200002dc
 8001d8c:	40003c00 	.word	0x40003c00
 8001d90:	00017700 	.word	0x00017700

08001d94 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <_ZL12MX_SPI1_Initv+0x70>)
 8001d9a:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <_ZL12MX_SPI1_Initv+0x74>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <_ZL12MX_SPI1_Initv+0x70>)
 8001da0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001da4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <_ZL12MX_SPI1_Initv+0x70>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <_ZL12MX_SPI1_Initv+0x70>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <_ZL12MX_SPI1_Initv+0x70>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <_ZL12MX_SPI1_Initv+0x70>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <_ZL12MX_SPI1_Initv+0x70>)
 8001dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <_ZL12MX_SPI1_Initv+0x70>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <_ZL12MX_SPI1_Initv+0x70>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <_ZL12MX_SPI1_Initv+0x70>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <_ZL12MX_SPI1_Initv+0x70>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <_ZL12MX_SPI1_Initv+0x70>)
 8001de0:	220a      	movs	r2, #10
 8001de2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001de4:	4807      	ldr	r0, [pc, #28]	; (8001e04 <_ZL12MX_SPI1_Initv+0x70>)
 8001de6:	f007 fcab 	bl	8009740 <HAL_SPI_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf14      	ite	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	2300      	moveq	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001dfa:	f000 fa7d 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000324 	.word	0x20000324
 8001e08:	40013000 	.word	0x40013000

08001e0c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e20:	463b      	mov	r3, r7
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e32:	222f      	movs	r2, #47	; 0x2f
 8001e34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001e3c:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e44:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e50:	481b      	ldr	r0, [pc, #108]	; (8001ec0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e52:	f007 fcfe 	bl	8009852 <HAL_TIM_Base_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001e66:	f000 fa47 	bl	80022f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e70:	f107 0308 	add.w	r3, r7, #8
 8001e74:	4619      	mov	r1, r3
 8001e76:	4812      	ldr	r0, [pc, #72]	; (8001ec0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e78:	f008 f870 	bl	8009f5c <HAL_TIM_ConfigClockSource>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bf14      	ite	ne
 8001e82:	2301      	movne	r3, #1
 8001e84:	2300      	moveq	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001e8c:	f000 fa34 	bl	80022f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e98:	463b      	mov	r3, r7
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4808      	ldr	r0, [pc, #32]	; (8001ec0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e9e:	f008 fc19 	bl	800a6d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf14      	ite	ne
 8001ea8:	2301      	movne	r3, #1
 8001eaa:	2300      	moveq	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001eb2:	f000 fa21 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000037c 	.word	0x2000037c

08001ec4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08e      	sub	sp, #56	; 0x38
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed8:	f107 0320 	add.w	r3, r7, #32
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
 8001ef0:	615a      	str	r2, [r3, #20]
 8001ef2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ef4:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <_ZL12MX_TIM3_Initv+0x138>)
 8001ef6:	4a42      	ldr	r2, [pc, #264]	; (8002000 <_ZL12MX_TIM3_Initv+0x13c>)
 8001ef8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 8001efa:	4b40      	ldr	r3, [pc, #256]	; (8001ffc <_ZL12MX_TIM3_Initv+0x138>)
 8001efc:	220b      	movs	r2, #11
 8001efe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f00:	4b3e      	ldr	r3, [pc, #248]	; (8001ffc <_ZL12MX_TIM3_Initv+0x138>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 8001f06:	4b3d      	ldr	r3, [pc, #244]	; (8001ffc <_ZL12MX_TIM3_Initv+0x138>)
 8001f08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001f0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0e:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <_ZL12MX_TIM3_Initv+0x138>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f14:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <_ZL12MX_TIM3_Initv+0x138>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f1a:	4838      	ldr	r0, [pc, #224]	; (8001ffc <_ZL12MX_TIM3_Initv+0x138>)
 8001f1c:	f007 fc99 	bl	8009852 <HAL_TIM_Base_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bf14      	ite	ne
 8001f26:	2301      	movne	r3, #1
 8001f28:	2300      	moveq	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8001f30:	f000 f9e2 	bl	80022f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3e:	4619      	mov	r1, r3
 8001f40:	482e      	ldr	r0, [pc, #184]	; (8001ffc <_ZL12MX_TIM3_Initv+0x138>)
 8001f42:	f008 f80b 	bl	8009f5c <HAL_TIM_ConfigClockSource>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf14      	ite	ne
 8001f4c:	2301      	movne	r3, #1
 8001f4e:	2300      	moveq	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8001f56:	f000 f9cf 	bl	80022f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f5a:	4828      	ldr	r0, [pc, #160]	; (8001ffc <_ZL12MX_TIM3_Initv+0x138>)
 8001f5c:	f007 fd2a 	bl	80099b4 <HAL_TIM_PWM_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	bf14      	ite	ne
 8001f66:	2301      	movne	r3, #1
 8001f68:	2300      	moveq	r3, #0
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8001f70:	f000 f9c2 	bl	80022f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f74:	2300      	movs	r3, #0
 8001f76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f7c:	f107 0320 	add.w	r3, r7, #32
 8001f80:	4619      	mov	r1, r3
 8001f82:	481e      	ldr	r0, [pc, #120]	; (8001ffc <_ZL12MX_TIM3_Initv+0x138>)
 8001f84:	f008 fba6 	bl	800a6d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bf14      	ite	ne
 8001f8e:	2301      	movne	r3, #1
 8001f90:	2300      	moveq	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8001f98:	f000 f9ae 	bl	80022f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f9c:	2360      	movs	r3, #96	; 0x60
 8001f9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	2200      	movs	r2, #0
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4812      	ldr	r0, [pc, #72]	; (8001ffc <_ZL12MX_TIM3_Initv+0x138>)
 8001fb4:	f007 ff10 	bl	8009dd8 <HAL_TIM_PWM_ConfigChannel>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bf14      	ite	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	2300      	moveq	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8001fc8:	f000 f996 	bl	80022f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	2208      	movs	r2, #8
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480a      	ldr	r0, [pc, #40]	; (8001ffc <_ZL12MX_TIM3_Initv+0x138>)
 8001fd4:	f007 ff00 	bl	8009dd8 <HAL_TIM_PWM_ConfigChannel>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bf14      	ite	ne
 8001fde:	2301      	movne	r3, #1
 8001fe0:	2300      	moveq	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8001fe8:	f000 f986 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fec:	4803      	ldr	r0, [pc, #12]	; (8001ffc <_ZL12MX_TIM3_Initv+0x138>)
 8001fee:	f003 f963 	bl	80052b8 <HAL_TIM_MspPostInit>

}
 8001ff2:	bf00      	nop
 8001ff4:	3738      	adds	r7, #56	; 0x38
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200003c4 	.word	0x200003c4
 8002000:	40000400 	.word	0x40000400

08002004 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <_ZL19MX_USART1_UART_Initv+0x54>)
 800200a:	4a14      	ldr	r2, [pc, #80]	; (800205c <_ZL19MX_USART1_UART_Initv+0x58>)
 800200c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002010:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002014:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <_ZL19MX_USART1_UART_Initv+0x54>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <_ZL19MX_USART1_UART_Initv+0x54>)
 800202a:	220c      	movs	r2, #12
 800202c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800203a:	4807      	ldr	r0, [pc, #28]	; (8002058 <_ZL19MX_USART1_UART_Initv+0x54>)
 800203c:	f008 fbcc 	bl	800a7d8 <HAL_UART_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	bf14      	ite	ne
 8002046:	2301      	movne	r3, #1
 8002048:	2300      	moveq	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002050:	f000 f952 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	2000040c 	.word	0x2000040c
 800205c:	40011000 	.word	0x40011000

08002060 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <_ZL11MX_DMA_Initv+0x4c>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a0f      	ldr	r2, [pc, #60]	; (80020ac <_ZL11MX_DMA_Initv+0x4c>)
 8002070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <_ZL11MX_DMA_Initv+0x4c>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	203a      	movs	r0, #58	; 0x3a
 8002088:	f003 fd63 	bl	8005b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800208c:	203a      	movs	r0, #58	; 0x3a
 800208e:	f003 fd7c 	bl	8005b8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	2046      	movs	r0, #70	; 0x46
 8002098:	f003 fd5b 	bl	8005b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800209c:	2046      	movs	r0, #70	; 0x46
 800209e:	f003 fd74 	bl	8005b8a <HAL_NVIC_EnableIRQ>

}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800

080020b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08c      	sub	sp, #48	; 0x30
 80020b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	60da      	str	r2, [r3, #12]
 80020c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	4b85      	ldr	r3, [pc, #532]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a84      	ldr	r2, [pc, #528]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 80020d0:	f043 0310 	orr.w	r3, r3, #16
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b82      	ldr	r3, [pc, #520]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	4b7e      	ldr	r3, [pc, #504]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a7d      	ldr	r2, [pc, #500]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b7b      	ldr	r3, [pc, #492]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	4b77      	ldr	r3, [pc, #476]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a76      	ldr	r2, [pc, #472]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 8002108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b74      	ldr	r3, [pc, #464]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4b70      	ldr	r3, [pc, #448]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a6f      	ldr	r2, [pc, #444]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b6d      	ldr	r3, [pc, #436]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	4b69      	ldr	r3, [pc, #420]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a68      	ldr	r2, [pc, #416]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b66      	ldr	r3, [pc, #408]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	4b62      	ldr	r3, [pc, #392]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a61      	ldr	r2, [pc, #388]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 800215c:	f043 0308 	orr.w	r3, r3, #8
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b5f      	ldr	r3, [pc, #380]	; (80022e0 <_ZL12MX_GPIO_Initv+0x230>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	f44f 7142 	mov.w	r1, #776	; 0x308
 8002174:	485b      	ldr	r0, [pc, #364]	; (80022e4 <_ZL12MX_GPIO_Initv+0x234>)
 8002176:	f004 fac1 	bl	80066fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800217a:	2201      	movs	r2, #1
 800217c:	2101      	movs	r1, #1
 800217e:	485a      	ldr	r0, [pc, #360]	; (80022e8 <_ZL12MX_GPIO_Initv+0x238>)
 8002180:	f004 fabc 	bl	80066fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8002184:	2200      	movs	r2, #0
 8002186:	2106      	movs	r1, #6
 8002188:	4858      	ldr	r0, [pc, #352]	; (80022ec <_ZL12MX_GPIO_Initv+0x23c>)
 800218a:	f004 fab7 	bl	80066fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800218e:	2200      	movs	r2, #0
 8002190:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002194:	4856      	ldr	r0, [pc, #344]	; (80022f0 <_ZL12MX_GPIO_Initv+0x240>)
 8002196:	f004 fab1 	bl	80066fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800219a:	2304      	movs	r3, #4
 800219c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	4619      	mov	r1, r3
 80021ac:	484d      	ldr	r0, [pc, #308]	; (80022e4 <_ZL12MX_GPIO_Initv+0x234>)
 80021ae:	f004 f909 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|IN3_Pin|IN4_Pin;
 80021b2:	f44f 7342 	mov.w	r3, #776	; 0x308
 80021b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	4619      	mov	r1, r3
 80021ca:	4846      	ldr	r0, [pc, #280]	; (80022e4 <_ZL12MX_GPIO_Initv+0x234>)
 80021cc:	f004 f8fa 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80021d0:	2332      	movs	r3, #50	; 0x32
 80021d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80021d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	4619      	mov	r1, r3
 80021e4:	483f      	ldr	r0, [pc, #252]	; (80022e4 <_ZL12MX_GPIO_Initv+0x234>)
 80021e6:	f004 f8ed 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80021ea:	2301      	movs	r3, #1
 80021ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ee:	2301      	movs	r3, #1
 80021f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	4619      	mov	r1, r3
 8002200:	4839      	ldr	r0, [pc, #228]	; (80022e8 <_ZL12MX_GPIO_Initv+0x238>)
 8002202:	f004 f8df 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002206:	2301      	movs	r3, #1
 8002208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800220a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800220e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	4836      	ldr	r0, [pc, #216]	; (80022f4 <_ZL12MX_GPIO_Initv+0x244>)
 800221c:	f004 f8d2 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8002220:	2306      	movs	r3, #6
 8002222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002224:	2301      	movs	r3, #1
 8002226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	4619      	mov	r1, r3
 8002236:	482d      	ldr	r0, [pc, #180]	; (80022ec <_ZL12MX_GPIO_Initv+0x23c>)
 8002238:	f004 f8c4 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_ENCODER_A_Pin LEFT_ENCODER_B_Pin RIGHT_ENCODER_A_Pin RIGHT_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = LEFT_ENCODER_A_Pin|LEFT_ENCODER_B_Pin|RIGHT_ENCODER_A_Pin|RIGHT_ENCODER_B_Pin;
 800223c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002242:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	4619      	mov	r1, r3
 8002252:	4824      	ldr	r0, [pc, #144]	; (80022e4 <_ZL12MX_GPIO_Initv+0x234>)
 8002254:	f004 f8b6 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800225c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800225e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	4619      	mov	r1, r3
 800226e:	481f      	ldr	r0, [pc, #124]	; (80022ec <_ZL12MX_GPIO_Initv+0x23c>)
 8002270:	f004 f8a8 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800227a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800227e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	4619      	mov	r1, r3
 800228a:	4819      	ldr	r0, [pc, #100]	; (80022f0 <_ZL12MX_GPIO_Initv+0x240>)
 800228c:	f004 f89a 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002290:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002294:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002296:	2301      	movs	r3, #1
 8002298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a2:	f107 031c 	add.w	r3, r7, #28
 80022a6:	4619      	mov	r1, r3
 80022a8:	4811      	ldr	r0, [pc, #68]	; (80022f0 <_ZL12MX_GPIO_Initv+0x240>)
 80022aa:	f004 f88b 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80022ae:	2320      	movs	r3, #32
 80022b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	4619      	mov	r1, r3
 80022c0:	480b      	ldr	r0, [pc, #44]	; (80022f0 <_ZL12MX_GPIO_Initv+0x240>)
 80022c2:	f004 f87f 	bl	80063c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	2028      	movs	r0, #40	; 0x28
 80022cc:	f003 fc41 	bl	8005b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022d0:	2028      	movs	r0, #40	; 0x28
 80022d2:	f003 fc5a 	bl	8005b8a <HAL_NVIC_EnableIRQ>

}
 80022d6:	bf00      	nop
 80022d8:	3730      	adds	r7, #48	; 0x30
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40020800 	.word	0x40020800
 80022ec:	40020400 	.word	0x40020400
 80022f0:	40020c00 	.word	0x40020c00
 80022f4:	40020000 	.word	0x40020000

080022f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022fc:	b672      	cpsid	i
}
 80022fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002300:	e7fe      	b.n	8002300 <Error_Handler+0x8>

08002302 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	ed87 0a01 	vstr	s0, [r7, #4]
 800230c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002310:	eef0 7ae7 	vabs.f32	s15, s15
 8002314:	eeb0 0a67 	vmov.f32	s0, s15
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	ed87 0a01 	vstr	s0, [r7, #4]
 800232c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002330:	f00c ff20 	bl	800f174 <roundf>
 8002334:	eef0 7a40 	vmov.f32	s15, s0
 8002338:	eeb0 0a67 	vmov.f32	s0, s15
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	4a04      	ldr	r2, [pc, #16]	; (8002380 <_ZN3ros3MsgC1Ev+0x1c>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	08011fe0 	.word	0x08011fe0

08002384 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
      data()
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ffe8 	bl	8002364 <_ZN3ros3MsgC1Ev>
 8002394:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3304      	adds	r3, #4
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ffcf 	bl	8002342 <_ZN3ros4TimeC1Ev>
    {
    }
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	08011fc8 	.word	0x08011fc8

080023b4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6859      	ldr	r1, [r3, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	b2ca      	uxtb	r2, r1
 80023ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	0a19      	lsrs	r1, r3, #8
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3301      	adds	r3, #1
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	b2ca      	uxtb	r2, r1
 80023e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	0c19      	lsrs	r1, r3, #16
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3302      	adds	r3, #2
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	b2ca      	uxtb	r2, r1
 80023f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	0e19      	lsrs	r1, r3, #24
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	3303      	adds	r3, #3
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	4413      	add	r3, r2
 8002402:	b2ca      	uxtb	r2, r1
 8002404:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	3304      	adds	r3, #4
 800240a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6899      	ldr	r1, [r3, #8]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	4413      	add	r3, r2
 8002416:	b2ca      	uxtb	r2, r1
 8002418:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	0a19      	lsrs	r1, r3, #8
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	3301      	adds	r3, #1
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	4413      	add	r3, r2
 8002428:	b2ca      	uxtb	r2, r1
 800242a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	0c19      	lsrs	r1, r3, #16
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	3302      	adds	r3, #2
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	4413      	add	r3, r2
 800243a:	b2ca      	uxtb	r2, r1
 800243c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0e19      	lsrs	r1, r3, #24
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	3303      	adds	r3, #3
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	4413      	add	r3, r2
 800244c:	b2ca      	uxtb	r2, r1
 800244e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3304      	adds	r3, #4
 8002454:	60fb      	str	r3, [r7, #12]
      return offset;
 8002456:	68fb      	ldr	r3, [r7, #12]
    }
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	4413      	add	r3, r2
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3301      	adds	r3, #1
 8002488:	6839      	ldr	r1, [r7, #0]
 800248a:	440b      	add	r3, r1
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3302      	adds	r3, #2
 800249e:	6839      	ldr	r1, [r7, #0]
 80024a0:	440b      	add	r3, r1
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	041b      	lsls	r3, r3, #16
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3303      	adds	r3, #3
 80024b4:	6839      	ldr	r1, [r7, #0]
 80024b6:	440b      	add	r3, r1
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	061b      	lsls	r3, r3, #24
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3304      	adds	r3, #4
 80024c6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	3301      	adds	r3, #1
 80024de:	6839      	ldr	r1, [r7, #0]
 80024e0:	440b      	add	r3, r1
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3302      	adds	r3, #2
 80024f4:	6839      	ldr	r1, [r7, #0]
 80024f6:	440b      	add	r3, r1
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	041b      	lsls	r3, r3, #16
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	3303      	adds	r3, #3
 800250a:	6839      	ldr	r1, [r7, #0]
 800250c:	440b      	add	r3, r1
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	061b      	lsls	r3, r3, #24
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	3304      	adds	r3, #4
 800251c:	60fb      	str	r3, [r7, #12]
     return offset;
 800251e:	68fb      	ldr	r3, [r7, #12]
    }
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	08011cf0 	.word	0x08011cf0

08002548 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	08011d00 	.word	0x08011d00

08002564 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fef8 	bl	8002364 <_ZN3ros3MsgC1Ev>
 8002574:	4a0b      	ldr	r2, [pc, #44]	; (80025a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	809a      	strh	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002590:	611a      	str	r2, [r3, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	615a      	str	r2, [r3, #20]
    {
    }
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	08011fb0 	.word	0x08011fb0
 80025a8:	08011d24 	.word	0x08011d24

080025ac <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8899      	ldrh	r1, [r3, #4]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	b2ca      	uxtb	r2, r1
 80025c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	889b      	ldrh	r3, [r3, #4]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	b299      	uxth	r1, r3
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	3301      	adds	r3, #1
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	b2ca      	uxtb	r2, r1
 80025da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	3302      	adds	r3, #2
 80025e0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd fdfa 	bl	80001e0 <strlen>
 80025ec:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	69b9      	ldr	r1, [r7, #24]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f001 fe48 	bl	800428c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	3304      	adds	r3, #4
 8002600:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	18d0      	adds	r0, r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4619      	mov	r1, r3
 8002610:	f00c fe16 	bl	800f240 <memcpy>
      offset += length_topic_name;
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	4413      	add	r3, r2
 800261a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd fddd 	bl	80001e0 <strlen>
 8002626:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	4413      	add	r3, r2
 800262e:	6979      	ldr	r1, [r7, #20]
 8002630:	4618      	mov	r0, r3
 8002632:	f001 fe2b 	bl	800428c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	18d0      	adds	r0, r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4619      	mov	r1, r3
 800264a:	f00c fdf9 	bl	800f240 <memcpy>
      offset += length_message_type;
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	4413      	add	r3, r2
 8002654:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fd fdc0 	bl	80001e0 <strlen>
 8002660:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	4413      	add	r3, r2
 8002668:	6939      	ldr	r1, [r7, #16]
 800266a:	4618      	mov	r0, r3
 800266c:	f001 fe0e 	bl	800428c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	3304      	adds	r3, #4
 8002674:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	18d0      	adds	r0, r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4619      	mov	r1, r3
 8002684:	f00c fddc 	bl	800f240 <memcpy>
      offset += length_md5sum;
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002696:	68f9      	ldr	r1, [r7, #12]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	4413      	add	r3, r2
 800269e:	b2ca      	uxtb	r2, r1
 80026a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	0a19      	lsrs	r1, r3, #8
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3301      	adds	r3, #1
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	4413      	add	r3, r2
 80026ae:	b2ca      	uxtb	r2, r1
 80026b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	0c19      	lsrs	r1, r3, #16
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3302      	adds	r3, #2
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	4413      	add	r3, r2
 80026be:	b2ca      	uxtb	r2, r1
 80026c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	0e19      	lsrs	r1, r3, #24
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3303      	adds	r3, #3
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	4413      	add	r3, r2
 80026ce:	b2ca      	uxtb	r2, r1
 80026d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3304      	adds	r3, #4
 80026d6:	61fb      	str	r3, [r7, #28]
      return offset;
 80026d8:	69fb      	ldr	r3, [r7, #28]
    }
 80026da:	4618      	mov	r0, r3
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b08a      	sub	sp, #40	; 0x28
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	4413      	add	r3, r2
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	889b      	ldrh	r3, [r3, #4]
 8002702:	b21a      	sxth	r2, r3
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	3301      	adds	r3, #1
 8002708:	6839      	ldr	r1, [r7, #0]
 800270a:	440b      	add	r3, r1
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	b21b      	sxth	r3, r3
 8002712:	4313      	orrs	r3, r2
 8002714:	b21b      	sxth	r3, r3
 8002716:	b29a      	uxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	3302      	adds	r3, #2
 8002720:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	441a      	add	r2, r3
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f001 fdca 	bl	80042c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	3304      	adds	r3, #4
 8002738:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	4413      	add	r3, r2
 8002744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002746:	429a      	cmp	r2, r3
 8002748:	d20c      	bcs.n	8002764 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	441a      	add	r2, r3
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	3b01      	subs	r3, #1
 8002754:	6839      	ldr	r1, [r7, #0]
 8002756:	440b      	add	r3, r1
 8002758:	7812      	ldrb	r2, [r2, #0]
 800275a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	3301      	adds	r3, #1
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
 8002762:	e7ec      	b.n	800273e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	4413      	add	r3, r2
 800276a:	3b01      	subs	r3, #1
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	4413      	add	r3, r2
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	3b01      	subs	r3, #1
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	441a      	add	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	4413      	add	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	441a      	add	r2, r3
 800278e:	f107 0310 	add.w	r3, r7, #16
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f001 fd97 	bl	80042c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	3304      	adds	r3, #4
 800279e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	623b      	str	r3, [r7, #32]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4413      	add	r3, r2
 80027aa:	6a3a      	ldr	r2, [r7, #32]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d20c      	bcs.n	80027ca <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	441a      	add	r2, r3
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	6839      	ldr	r1, [r7, #0]
 80027bc:	440b      	add	r3, r1
 80027be:	7812      	ldrb	r2, [r2, #0]
 80027c0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	3301      	adds	r3, #1
 80027c6:	623b      	str	r3, [r7, #32]
 80027c8:	e7ec      	b.n	80027a4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4413      	add	r3, r2
 80027d0:	3b01      	subs	r3, #1
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	4413      	add	r3, r2
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	3b01      	subs	r3, #1
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	441a      	add	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	441a      	add	r2, r3
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 fd64 	bl	80042c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	3304      	adds	r3, #4
 8002804:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	429a      	cmp	r2, r3
 8002814:	d20c      	bcs.n	8002830 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	441a      	add	r2, r3
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	3b01      	subs	r3, #1
 8002820:	6839      	ldr	r1, [r7, #0]
 8002822:	440b      	add	r3, r1
 8002824:	7812      	ldrb	r2, [r2, #0]
 8002826:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	3301      	adds	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	e7ec      	b.n	800280a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4413      	add	r3, r2
 8002836:	3b01      	subs	r3, #1
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	4413      	add	r3, r2
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	3b01      	subs	r3, #1
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	441a      	add	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4413      	add	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	6839      	ldr	r1, [r7, #0]
 800285e:	440a      	add	r2, r1
 8002860:	7812      	ldrb	r2, [r2, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	3301      	adds	r3, #1
 800286c:	6839      	ldr	r1, [r7, #0]
 800286e:	440b      	add	r3, r1
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	4313      	orrs	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	3302      	adds	r3, #2
 800287e:	6839      	ldr	r1, [r7, #0]
 8002880:	440b      	add	r3, r1
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	041b      	lsls	r3, r3, #16
 8002886:	4313      	orrs	r3, r2
 8002888:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	3303      	adds	r3, #3
 8002890:	6839      	ldr	r1, [r7, #0]
 8002892:	440b      	add	r3, r1
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	061b      	lsls	r3, r3, #24
 8002898:	4313      	orrs	r3, r2
 800289a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	3304      	adds	r3, #4
 80028a6:	61bb      	str	r3, [r7, #24]
     return offset;
 80028a8:	69bb      	ldr	r3, [r7, #24]
    }
 80028aa:	4618      	mov	r0, r3
 80028ac:	3728      	adds	r7, #40	; 0x28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	08011d28 	.word	0x08011d28

080028d0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	08011d44 	.word	0x08011d44

080028ec <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fd34 	bl	8002364 <_ZN3ros3MsgC1Ev>
 80028fc:	4a06      	ldr	r2, [pc, #24]	; (8002918 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	711a      	strb	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a04      	ldr	r2, [pc, #16]	; (800291c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800290c:	609a      	str	r2, [r3, #8]
    {
    }
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	08011f98 	.word	0x08011f98
 800291c:	08011d24 	.word	0x08011d24

08002920 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	4413      	add	r3, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	7912      	ldrb	r2, [r2, #4]
 8002938:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3301      	adds	r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fc4b 	bl	80001e0 <strlen>
 800294a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	4413      	add	r3, r2
 8002952:	68b9      	ldr	r1, [r7, #8]
 8002954:	4618      	mov	r0, r3
 8002956:	f001 fc99 	bl	800428c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3304      	adds	r3, #4
 800295e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	18d0      	adds	r0, r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	4619      	mov	r1, r3
 800296e:	f00c fc67 	bl	800f240 <memcpy>
      offset += length_msg;
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4413      	add	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
      return offset;
 800297a:	68fb      	ldr	r3, [r7, #12]
    }
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	4413      	add	r3, r2
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	3301      	adds	r3, #1
 80029a2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	441a      	add	r2, r3
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f001 fc89 	bl	80042c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	3304      	adds	r3, #4
 80029ba:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4413      	add	r3, r2
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d20c      	bcs.n	80029e6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	441a      	add	r2, r3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	6839      	ldr	r1, [r7, #0]
 80029d8:	440b      	add	r3, r1
 80029da:	7812      	ldrb	r2, [r2, #0]
 80029dc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	3301      	adds	r3, #1
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	e7ec      	b.n	80029c0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	3b01      	subs	r3, #1
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	441a      	add	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4413      	add	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
     return offset;
 8002a0a:	693b      	ldr	r3, [r7, #16]
    }
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	08011d68 	.word	0x08011d68

08002a30 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	08011d7c 	.word	0x08011d7c

08002a4c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fc84 	bl	8002364 <_ZN3ros3MsgC1Ev>
 8002a5c:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	60da      	str	r2, [r3, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	611a      	str	r2, [r3, #16]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	615a      	str	r2, [r3, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	61da      	str	r2, [r3, #28]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	621a      	str	r2, [r3, #32]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	08011f80 	.word	0x08011f80

08002aa8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6859      	ldr	r1, [r3, #4]
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	4413      	add	r3, r2
 8002ac0:	b2ca      	uxtb	r2, r1
 8002ac2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	0a19      	lsrs	r1, r3, #8
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	3301      	adds	r3, #1
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	b2ca      	uxtb	r2, r1
 8002ad4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	0c19      	lsrs	r1, r3, #16
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	3302      	adds	r3, #2
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	b2ca      	uxtb	r2, r1
 8002ae6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0e19      	lsrs	r1, r3, #24
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	3303      	adds	r3, #3
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	4413      	add	r3, r2
 8002af6:	b2ca      	uxtb	r2, r1
 8002af8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	3304      	adds	r3, #4
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002b00:	2300      	movs	r3, #0
 8002b02:	623b      	str	r3, [r7, #32]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	6a3a      	ldr	r2, [r7, #32]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d22b      	bcs.n	8002b66 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002b1c:	6939      	ldr	r1, [r7, #16]
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	4413      	add	r3, r2
 8002b24:	b2ca      	uxtb	r2, r1
 8002b26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	0a19      	lsrs	r1, r3, #8
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	3301      	adds	r3, #1
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	4413      	add	r3, r2
 8002b34:	b2ca      	uxtb	r2, r1
 8002b36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	0c19      	lsrs	r1, r3, #16
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	3302      	adds	r3, #2
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	b2ca      	uxtb	r2, r1
 8002b46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	0e19      	lsrs	r1, r3, #24
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	3303      	adds	r3, #3
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	4413      	add	r3, r2
 8002b54:	b2ca      	uxtb	r2, r1
 8002b56:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	3301      	adds	r3, #1
 8002b62:	623b      	str	r3, [r7, #32]
 8002b64:	e7ce      	b.n	8002b04 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6919      	ldr	r1, [r3, #16]
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	b2ca      	uxtb	r2, r1
 8002b72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	0a19      	lsrs	r1, r3, #8
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	4413      	add	r3, r2
 8002b82:	b2ca      	uxtb	r2, r1
 8002b84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	0c19      	lsrs	r1, r3, #16
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	3302      	adds	r3, #2
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	b2ca      	uxtb	r2, r1
 8002b96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	0e19      	lsrs	r1, r3, #24
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	3303      	adds	r3, #3
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	b2ca      	uxtb	r2, r1
 8002ba8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	3304      	adds	r3, #4
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d22b      	bcs.n	8002c16 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002bcc:	68f9      	ldr	r1, [r7, #12]
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	b2ca      	uxtb	r2, r1
 8002bd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	0a19      	lsrs	r1, r3, #8
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	3301      	adds	r3, #1
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	b2ca      	uxtb	r2, r1
 8002be6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	0c19      	lsrs	r1, r3, #16
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	3302      	adds	r3, #2
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	b2ca      	uxtb	r2, r1
 8002bf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	0e19      	lsrs	r1, r3, #24
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	3303      	adds	r3, #3
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	b2ca      	uxtb	r2, r1
 8002c06:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3301      	adds	r3, #1
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	e7ce      	b.n	8002bb4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69d9      	ldr	r1, [r3, #28]
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	4413      	add	r3, r2
 8002c20:	b2ca      	uxtb	r2, r1
 8002c22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	0a19      	lsrs	r1, r3, #8
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	4413      	add	r3, r2
 8002c32:	b2ca      	uxtb	r2, r1
 8002c34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	0c19      	lsrs	r1, r3, #16
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	3302      	adds	r3, #2
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	b2ca      	uxtb	r2, r1
 8002c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	0e19      	lsrs	r1, r3, #24
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	3303      	adds	r3, #3
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	4413      	add	r3, r2
 8002c56:	b2ca      	uxtb	r2, r1
 8002c58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002c60:	2300      	movs	r3, #0
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d228      	bcs.n	8002cc0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fab0 	bl	80001e0 <strlen>
 8002c80:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	4413      	add	r3, r2
 8002c88:	6979      	ldr	r1, [r7, #20]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 fafe 	bl	800428c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	3304      	adds	r3, #4
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	18d0      	adds	r0, r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4619      	mov	r1, r3
 8002cac:	f00c fac8 	bl	800f240 <memcpy>
      offset += length_stringsi;
 8002cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	e7d1      	b.n	8002c64 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3728      	adds	r7, #40	; 0x28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b08e      	sub	sp, #56	; 0x38
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	4413      	add	r3, r2
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	4413      	add	r3, r2
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	6a3a      	ldr	r2, [r7, #32]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	041b      	lsls	r3, r3, #16
 8002d00:	6a3a      	ldr	r2, [r7, #32]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d08:	3303      	adds	r3, #3
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	6a3a      	ldr	r2, [r7, #32]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	6a3a      	ldr	r2, [r7, #32]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d90a      	bls.n	8002d3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4619      	mov	r1, r3
 8002d32:	4610      	mov	r0, r2
 8002d34:	f00c ffe4 	bl	800fd00 <realloc>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a3a      	ldr	r2, [r7, #32]
 8002d42:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002d44:	2300      	movs	r3, #0
 8002d46:	633b      	str	r3, [r7, #48]	; 0x30
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d236      	bcs.n	8002dc0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d5a:	6839      	ldr	r1, [r7, #0]
 8002d5c:	440a      	add	r2, r1
 8002d5e:	7812      	ldrb	r2, [r2, #0]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d68:	3301      	adds	r3, #1
 8002d6a:	6839      	ldr	r1, [r7, #0]
 8002d6c:	440b      	add	r3, r1
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	6839      	ldr	r1, [r7, #0]
 8002d7e:	440b      	add	r3, r1
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	041b      	lsls	r3, r3, #16
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8c:	3303      	adds	r3, #3
 8002d8e:	6839      	ldr	r1, [r7, #0]
 8002d90:	440b      	add	r3, r1
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da2:	3304      	adds	r3, #4
 8002da4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	3208      	adds	r2, #8
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	3301      	adds	r3, #1
 8002dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8002dbe:	e7c3      	b.n	8002d48 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dcc:	3301      	adds	r3, #1
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dde:	3302      	adds	r3, #2
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	4413      	add	r3, r2
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	041b      	lsls	r3, r3, #16
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df0:	3303      	adds	r3, #3
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	4413      	add	r3, r2
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	061b      	lsls	r3, r3, #24
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	3304      	adds	r3, #4
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d90a      	bls.n	8002e26 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f00c ff70 	bl	800fd00 <realloc>
 8002e20:	4602      	mov	r2, r0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d236      	bcs.n	8002ea8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e42:	6839      	ldr	r1, [r7, #0]
 8002e44:	440a      	add	r2, r1
 8002e46:	7812      	ldrb	r2, [r2, #0]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e50:	3301      	adds	r3, #1
 8002e52:	6839      	ldr	r1, [r7, #0]
 8002e54:	440b      	add	r3, r1
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e62:	3302      	adds	r3, #2
 8002e64:	6839      	ldr	r1, [r7, #0]
 8002e66:	440b      	add	r3, r1
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	041b      	lsls	r3, r3, #16
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e74:	3303      	adds	r3, #3
 8002e76:	6839      	ldr	r1, [r7, #0]
 8002e78:	440b      	add	r3, r1
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	061b      	lsls	r3, r3, #24
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	3214      	adds	r2, #20
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea6:	e7c3      	b.n	8002e30 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	4413      	add	r3, r2
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	4413      	add	r3, r2
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	4413      	add	r3, r2
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	041b      	lsls	r3, r3, #16
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed8:	3303      	adds	r3, #3
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	4413      	add	r3, r2
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	061b      	lsls	r3, r3, #24
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eea:	3304      	adds	r3, #4
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d90a      	bls.n	8002f0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4619      	mov	r1, r3
 8002f02:	4610      	mov	r0, r2
 8002f04:	f00c fefc 	bl	800fd00 <realloc>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002f14:	2300      	movs	r3, #0
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d23f      	bcs.n	8002fa2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	441a      	add	r2, r3
 8002f28:	f107 030c 	add.w	r3, r7, #12
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 f9ca 	bl	80042c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f36:	3304      	adds	r3, #4
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4413      	add	r3, r2
 8002f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d20c      	bcs.n	8002f64 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	441a      	add	r2, r3
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	3b01      	subs	r3, #1
 8002f54:	6839      	ldr	r1, [r7, #0]
 8002f56:	440b      	add	r3, r1
 8002f58:	7812      	ldrb	r2, [r2, #0]
 8002f5a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	3301      	adds	r3, #1
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
 8002f62:	e7ec      	b.n	8002f3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002f64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4413      	add	r3, r2
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f76:	3b01      	subs	r3, #1
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	441a      	add	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4413      	add	r3, r2
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	3220      	adds	r2, #32
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa0:	e7ba      	b.n	8002f18 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3738      	adds	r7, #56	; 0x38
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	08011ebc 	.word	0x08011ebc

08002fc8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	08011da0 	.word	0x08011da0

08002fe4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	611a      	str	r2, [r3, #16]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68d8      	ldr	r0, [r3, #12]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6891      	ldr	r1, [r2, #8]
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	4798      	blx	r3
 8003030:	4603      	mov	r3, r0
  };
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
  }
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8003068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <_ZN13STM32HardwareC1Ev+0x34>)
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	2000040c 	.word	0x2000040c

080030b0 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f804 	bl	80030c6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3304      	adds	r3, #4
 80030d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030da:	4619      	mov	r1, r3
 80030dc:	f007 fc48 	bl	800a970 <HAL_UART_Receive_DMA>
    }
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <_ZN13STM32Hardware4readEv>:

    int read(){
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
      int c = -1;
 80030f0:	f04f 33ff 	mov.w	r3, #4294967295
 80030f4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff ffa8 	bl	8003052 <_ZN13STM32Hardware10getRdmaIndEv>
 8003102:	4603      	mov	r3, r0
 8003104:	429c      	cmp	r4, r3
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d012      	beq.n	8003138 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003118:	1c59      	adds	r1, r3, #1
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	791b      	ldrb	r3, [r3, #4]
 8003126:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800312e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 8003138:	68fb      	ldr	r3, [r7, #12]
    }
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	bd90      	pop	{r4, r7, pc}
	...

08003144 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b20      	cmp	r3, #32
 8003158:	d108      	bne.n	800316c <_ZN13STM32Hardware5flushEv+0x28>
 800315a:	4b28      	ldr	r3, [pc, #160]	; (80031fc <_ZN13STM32Hardware5flushEv+0xb8>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	f083 0301 	eor.w	r3, r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <_ZN13STM32Hardware5flushEv+0x28>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <_ZN13STM32Hardware5flushEv+0x2a>
 800316c:	2300      	movs	r3, #0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d03f      	beq.n	80031f2 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8003172:	4b22      	ldr	r3, [pc, #136]	; (80031fc <_ZN13STM32Hardware5flushEv+0xb8>)
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003184:	429a      	cmp	r2, r3
 8003186:	d031      	beq.n	80031ec <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003194:	429a      	cmp	r2, r3
 8003196:	d20a      	bcs.n	80031ae <_ZN13STM32Hardware5flushEv+0x6a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800319e:	b29a      	uxth	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	e006      	b.n	80031bc <_ZN13STM32Hardware5flushEv+0x78>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80031c8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	89fa      	ldrh	r2, [r7, #14]
 80031d2:	4619      	mov	r1, r3
 80031d4:	f007 fb4e 	bl	800a874 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80031de:	89fb      	ldrh	r3, [r7, #14]
 80031e0:	4413      	add	r3, r2
 80031e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        }
        mutex = false;
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <_ZN13STM32Hardware5flushEv+0xb8>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
      }
    }
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000510 	.word	0x20000510

08003200 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
      uint16_t n = length;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	b29b      	uxth	r3, r3
 8003210:	827b      	strh	r3, [r7, #18]
      n = n <= tbuflen ? n : tbuflen;
 8003212:	8a7b      	ldrh	r3, [r7, #18]
 8003214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003218:	d803      	bhi.n	8003222 <_ZN13STM32Hardware5writeEPhi+0x22>
 800321a:	f107 0312 	add.w	r3, r7, #18
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	e001      	b.n	8003226 <_ZN13STM32Hardware5writeEPhi+0x26>
 8003222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003226:	827b      	strh	r3, [r7, #18]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003228:	8a7b      	ldrh	r3, [r7, #18]
 800322a:	461a      	mov	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003232:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8003236:	4293      	cmp	r3, r2
 8003238:	bf28      	it	cs
 800323a:	4613      	movcs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]
      memcpy(&(tbuf[twind]), data, n_tail);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003244:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	4618      	mov	r0, r3
 8003252:	f00b fff5 	bl	800f240 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800325c:	8a7a      	ldrh	r2, [r7, #18]
 800325e:	4413      	add	r3, r2
 8003260:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

      if(n != n_tail){
 800326a:	8a7b      	ldrh	r3, [r7, #18]
 800326c:	461a      	mov	r2, r3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	4293      	cmp	r3, r2
 8003272:	d00c      	beq.n	800328e <_ZN13STM32Hardware5writeEPhi+0x8e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	18d1      	adds	r1, r2, r3
 8003280:	8a7b      	ldrh	r3, [r7, #18]
 8003282:	461a      	mov	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	461a      	mov	r2, r3
 800328a:	f00b ffd9 	bl	800f240 <memcpy>
      }

      flush();
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7ff ff58 	bl	8003144 <_ZN13STM32Hardware5flushEv>
    }
 8003294:	bf00      	nop
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	f002 fb4a 	bl	800593c <HAL_GetTick>
 80032a8:	4603      	mov	r3, r0
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff f850 	bl	8002364 <_ZN3ros3MsgC1Ev>
 80032c4:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	08011f3c 	.word	0x08011f3c

08003304 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003304:	b480      	push	{r7}
 8003306:	b08b      	sub	sp, #44	; 0x2c
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003318:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800331c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003322:	6838      	ldr	r0, [r7, #0]
 8003324:	4401      	add	r1, r0
 8003326:	b2d3      	uxtb	r3, r2
 8003328:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800332a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	0a02      	lsrs	r2, r0, #8
 8003338:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800333c:	0a0b      	lsrs	r3, r1, #8
 800333e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003340:	3101      	adds	r1, #1
 8003342:	6838      	ldr	r0, [r7, #0]
 8003344:	4401      	add	r1, r0
 8003346:	b2d3      	uxtb	r3, r2
 8003348:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800334a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	0c02      	lsrs	r2, r0, #16
 8003358:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800335c:	0c0b      	lsrs	r3, r1, #16
 800335e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003360:	3102      	adds	r1, #2
 8003362:	6838      	ldr	r0, [r7, #0]
 8003364:	4401      	add	r1, r0
 8003366:	b2d3      	uxtb	r3, r2
 8003368:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800336a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	0e02      	lsrs	r2, r0, #24
 8003378:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800337c:	0e0b      	lsrs	r3, r1, #24
 800337e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003380:	3103      	adds	r1, #3
 8003382:	6838      	ldr	r0, [r7, #0]
 8003384:	4401      	add	r1, r0
 8003386:	b2d3      	uxtb	r3, r2
 8003388:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800338a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	000a      	movs	r2, r1
 8003398:	2300      	movs	r3, #0
 800339a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800339c:	3104      	adds	r1, #4
 800339e:	6838      	ldr	r0, [r7, #0]
 80033a0:	4401      	add	r1, r0
 80033a2:	b2d3      	uxtb	r3, r2
 80033a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80033a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	0a0a      	lsrs	r2, r1, #8
 80033b4:	2300      	movs	r3, #0
 80033b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b8:	3105      	adds	r1, #5
 80033ba:	6838      	ldr	r0, [r7, #0]
 80033bc:	4401      	add	r1, r0
 80033be:	b2d3      	uxtb	r3, r2
 80033c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80033c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	0c0a      	lsrs	r2, r1, #16
 80033d0:	2300      	movs	r3, #0
 80033d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d4:	3106      	adds	r1, #6
 80033d6:	6838      	ldr	r0, [r7, #0]
 80033d8:	4401      	add	r1, r0
 80033da:	b2d3      	uxtb	r3, r2
 80033dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80033de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	0e0a      	lsrs	r2, r1, #24
 80033ec:	2300      	movs	r3, #0
 80033ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033f0:	3107      	adds	r1, #7
 80033f2:	6838      	ldr	r0, [r7, #0]
 80033f4:	4401      	add	r1, r0
 80033f6:	b2d3      	uxtb	r3, r2
 80033f8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	3308      	adds	r3, #8
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003406:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800340a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800340e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003410:	6838      	ldr	r0, [r7, #0]
 8003412:	4401      	add	r1, r0
 8003414:	b2d3      	uxtb	r3, r2
 8003416:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003418:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	0a02      	lsrs	r2, r0, #8
 8003426:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800342a:	0a0b      	lsrs	r3, r1, #8
 800342c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800342e:	3101      	adds	r1, #1
 8003430:	6838      	ldr	r0, [r7, #0]
 8003432:	4401      	add	r1, r0
 8003434:	b2d3      	uxtb	r3, r2
 8003436:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003438:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	0c02      	lsrs	r2, r0, #16
 8003446:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800344a:	0c0b      	lsrs	r3, r1, #16
 800344c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800344e:	3102      	adds	r1, #2
 8003450:	6838      	ldr	r0, [r7, #0]
 8003452:	4401      	add	r1, r0
 8003454:	b2d3      	uxtb	r3, r2
 8003456:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003458:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	0e02      	lsrs	r2, r0, #24
 8003466:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800346a:	0e0b      	lsrs	r3, r1, #24
 800346c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800346e:	3103      	adds	r1, #3
 8003470:	6838      	ldr	r0, [r7, #0]
 8003472:	4401      	add	r1, r0
 8003474:	b2d3      	uxtb	r3, r2
 8003476:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003478:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	000a      	movs	r2, r1
 8003486:	2300      	movs	r3, #0
 8003488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800348a:	3104      	adds	r1, #4
 800348c:	6838      	ldr	r0, [r7, #0]
 800348e:	4401      	add	r1, r0
 8003490:	b2d3      	uxtb	r3, r2
 8003492:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003494:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	0a0a      	lsrs	r2, r1, #8
 80034a2:	2300      	movs	r3, #0
 80034a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a6:	3105      	adds	r1, #5
 80034a8:	6838      	ldr	r0, [r7, #0]
 80034aa:	4401      	add	r1, r0
 80034ac:	b2d3      	uxtb	r3, r2
 80034ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80034b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	0c0a      	lsrs	r2, r1, #16
 80034be:	2300      	movs	r3, #0
 80034c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c2:	3106      	adds	r1, #6
 80034c4:	6838      	ldr	r0, [r7, #0]
 80034c6:	4401      	add	r1, r0
 80034c8:	b2d3      	uxtb	r3, r2
 80034ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80034cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	0e0a      	lsrs	r2, r1, #24
 80034da:	2300      	movs	r3, #0
 80034dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034de:	3107      	adds	r1, #7
 80034e0:	6838      	ldr	r0, [r7, #0]
 80034e2:	4401      	add	r1, r0
 80034e4:	b2d3      	uxtb	r3, r2
 80034e6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	3308      	adds	r3, #8
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80034f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80034f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034fe:	6838      	ldr	r0, [r7, #0]
 8003500:	4401      	add	r1, r0
 8003502:	b2d3      	uxtb	r3, r2
 8003504:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003506:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	0a02      	lsrs	r2, r0, #8
 8003514:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003518:	0a0b      	lsrs	r3, r1, #8
 800351a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800351c:	3101      	adds	r1, #1
 800351e:	6838      	ldr	r0, [r7, #0]
 8003520:	4401      	add	r1, r0
 8003522:	b2d3      	uxtb	r3, r2
 8003524:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003526:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	0c02      	lsrs	r2, r0, #16
 8003534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003538:	0c0b      	lsrs	r3, r1, #16
 800353a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800353c:	3102      	adds	r1, #2
 800353e:	6838      	ldr	r0, [r7, #0]
 8003540:	4401      	add	r1, r0
 8003542:	b2d3      	uxtb	r3, r2
 8003544:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003546:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	0e02      	lsrs	r2, r0, #24
 8003554:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003558:	0e0b      	lsrs	r3, r1, #24
 800355a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800355c:	3103      	adds	r1, #3
 800355e:	6838      	ldr	r0, [r7, #0]
 8003560:	4401      	add	r1, r0
 8003562:	b2d3      	uxtb	r3, r2
 8003564:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003566:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	000a      	movs	r2, r1
 8003574:	2300      	movs	r3, #0
 8003576:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003578:	3104      	adds	r1, #4
 800357a:	6838      	ldr	r0, [r7, #0]
 800357c:	4401      	add	r1, r0
 800357e:	b2d3      	uxtb	r3, r2
 8003580:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003582:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	0a0a      	lsrs	r2, r1, #8
 8003590:	2300      	movs	r3, #0
 8003592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003594:	3105      	adds	r1, #5
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	4401      	add	r1, r0
 800359a:	b2d3      	uxtb	r3, r2
 800359c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800359e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	0c0a      	lsrs	r2, r1, #16
 80035ac:	2300      	movs	r3, #0
 80035ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035b0:	3106      	adds	r1, #6
 80035b2:	6838      	ldr	r0, [r7, #0]
 80035b4:	4401      	add	r1, r0
 80035b6:	b2d3      	uxtb	r3, r2
 80035b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80035ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	0e0a      	lsrs	r2, r1, #24
 80035c8:	2300      	movs	r3, #0
 80035ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035cc:	3107      	adds	r1, #7
 80035ce:	6838      	ldr	r0, [r7, #0]
 80035d0:	4401      	add	r1, r0
 80035d2:	b2d3      	uxtb	r3, r2
 80035d4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	3308      	adds	r3, #8
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80035de:	4618      	mov	r0, r3
 80035e0:	372c      	adds	r7, #44	; 0x2c
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80035ea:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80035ee:	b0eb      	sub	sp, #428	; 0x1ac
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80035f6:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800360c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003610:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003614:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003618:	4413      	add	r3, r2
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2200      	movs	r2, #0
 8003620:	461c      	mov	r4, r3
 8003622:	4615      	mov	r5, r2
 8003624:	ea40 0804 	orr.w	r8, r0, r4
 8003628:	ea41 0905 	orr.w	r9, r1, r5
 800362c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003630:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003634:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800363e:	4413      	add	r3, r2
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2200      	movs	r2, #0
 8003646:	469a      	mov	sl, r3
 8003648:	4693      	mov	fp, r2
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003656:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800365a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800365e:	ea40 0402 	orr.w	r4, r0, r2
 8003662:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8003666:	430b      	orrs	r3, r1
 8003668:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800366c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003670:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003674:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003678:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800367c:	1c9a      	adds	r2, r3, #2
 800367e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003682:	4413      	add	r3, r2
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2200      	movs	r2, #0
 800368a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800368e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800369e:	464c      	mov	r4, r9
 80036a0:	0423      	lsls	r3, r4, #16
 80036a2:	4644      	mov	r4, r8
 80036a4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80036a8:	4644      	mov	r4, r8
 80036aa:	0422      	lsls	r2, r4, #16
 80036ac:	ea40 0402 	orr.w	r4, r0, r2
 80036b0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80036b4:	430b      	orrs	r3, r1
 80036b6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80036ba:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80036be:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80036c2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80036c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036ca:	1cda      	adds	r2, r3, #3
 80036cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036d0:	4413      	add	r3, r2
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80036dc:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80036e0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80036e4:	4623      	mov	r3, r4
 80036e6:	0a1b      	lsrs	r3, r3, #8
 80036e8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80036ec:	4623      	mov	r3, r4
 80036ee:	061b      	lsls	r3, r3, #24
 80036f0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80036f4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80036f8:	4623      	mov	r3, r4
 80036fa:	4303      	orrs	r3, r0
 80036fc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003700:	462b      	mov	r3, r5
 8003702:	430b      	orrs	r3, r1
 8003704:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003708:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800370c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003710:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003714:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003718:	1d1a      	adds	r2, r3, #4
 800371a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800371e:	4413      	add	r3, r2
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2200      	movs	r2, #0
 8003726:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800372a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800373a:	0023      	movs	r3, r4
 800373c:	2200      	movs	r2, #0
 800373e:	ea40 0402 	orr.w	r4, r0, r2
 8003742:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003746:	430b      	orrs	r3, r1
 8003748:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800374c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003750:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003754:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003758:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800375c:	1d5a      	adds	r2, r3, #5
 800375e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003762:	4413      	add	r3, r2
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2200      	movs	r2, #0
 800376a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800376e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800377e:	0223      	lsls	r3, r4, #8
 8003780:	2200      	movs	r2, #0
 8003782:	ea40 0402 	orr.w	r4, r0, r2
 8003786:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800378a:	430b      	orrs	r3, r1
 800378c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003790:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003794:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003798:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800379c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037a0:	1d9a      	adds	r2, r3, #6
 80037a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037a6:	4413      	add	r3, r2
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2200      	movs	r2, #0
 80037ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80037b2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80037c2:	0423      	lsls	r3, r4, #16
 80037c4:	2200      	movs	r2, #0
 80037c6:	ea40 0402 	orr.w	r4, r0, r2
 80037ca:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80037ce:	430b      	orrs	r3, r1
 80037d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80037d4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80037d8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80037dc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037e4:	1dda      	adds	r2, r3, #7
 80037e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037ea:	4413      	add	r3, r2
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80037f6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003806:	0623      	lsls	r3, r4, #24
 8003808:	2200      	movs	r2, #0
 800380a:	ea40 0402 	orr.w	r4, r0, r2
 800380e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003812:	430b      	orrs	r3, r1
 8003814:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003818:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800381c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003820:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003824:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003828:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800382c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003830:	3308      	adds	r3, #8
 8003832:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003842:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003846:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800384a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800384e:	4413      	add	r3, r2
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2200      	movs	r2, #0
 8003856:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800385a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800385e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003862:	4623      	mov	r3, r4
 8003864:	4303      	orrs	r3, r0
 8003866:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800386a:	462b      	mov	r3, r5
 800386c:	430b      	orrs	r3, r1
 800386e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003872:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003876:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800387a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800387e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003888:	4413      	add	r3, r2
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2200      	movs	r2, #0
 8003890:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003894:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80038a4:	464c      	mov	r4, r9
 80038a6:	0223      	lsls	r3, r4, #8
 80038a8:	4644      	mov	r4, r8
 80038aa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038ae:	4644      	mov	r4, r8
 80038b0:	0222      	lsls	r2, r4, #8
 80038b2:	ea40 0402 	orr.w	r4, r0, r2
 80038b6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80038ba:	430b      	orrs	r3, r1
 80038bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80038c0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80038c4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80038c8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80038cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038d0:	1c9a      	adds	r2, r3, #2
 80038d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038d6:	4413      	add	r3, r2
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2200      	movs	r2, #0
 80038de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80038f2:	464c      	mov	r4, r9
 80038f4:	0423      	lsls	r3, r4, #16
 80038f6:	4644      	mov	r4, r8
 80038f8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80038fc:	4644      	mov	r4, r8
 80038fe:	0422      	lsls	r2, r4, #16
 8003900:	ea40 0402 	orr.w	r4, r0, r2
 8003904:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003908:	430b      	orrs	r3, r1
 800390a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800390e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003912:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003916:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800391a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800391e:	1cda      	adds	r2, r3, #3
 8003920:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003924:	4413      	add	r3, r2
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2200      	movs	r2, #0
 800392c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003930:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003934:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003938:	4623      	mov	r3, r4
 800393a:	0a1b      	lsrs	r3, r3, #8
 800393c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003940:	4623      	mov	r3, r4
 8003942:	061b      	lsls	r3, r3, #24
 8003944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003948:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800394c:	4623      	mov	r3, r4
 800394e:	4303      	orrs	r3, r0
 8003950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003954:	462b      	mov	r3, r5
 8003956:	430b      	orrs	r3, r1
 8003958:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800395c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003960:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003964:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003968:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800396c:	1d1a      	adds	r2, r3, #4
 800396e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003972:	4413      	add	r3, r2
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2200      	movs	r2, #0
 800397a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800397e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800398e:	0023      	movs	r3, r4
 8003990:	2200      	movs	r2, #0
 8003992:	ea40 0402 	orr.w	r4, r0, r2
 8003996:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800399a:	430b      	orrs	r3, r1
 800399c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80039a0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80039a4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80039a8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039b0:	1d5a      	adds	r2, r3, #5
 80039b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039b6:	4413      	add	r3, r2
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2200      	movs	r2, #0
 80039be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039c2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80039d2:	0223      	lsls	r3, r4, #8
 80039d4:	2200      	movs	r2, #0
 80039d6:	ea40 0402 	orr.w	r4, r0, r2
 80039da:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80039de:	430b      	orrs	r3, r1
 80039e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039e4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80039e8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80039ec:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039f4:	1d9a      	adds	r2, r3, #6
 80039f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039fa:	4413      	add	r3, r2
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2200      	movs	r2, #0
 8003a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003a16:	0423      	lsls	r3, r4, #16
 8003a18:	2200      	movs	r2, #0
 8003a1a:	ea40 0402 	orr.w	r4, r0, r2
 8003a1e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003a22:	430b      	orrs	r3, r1
 8003a24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a28:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003a2c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003a30:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a38:	1dda      	adds	r2, r3, #7
 8003a3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a3e:	4413      	add	r3, r2
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2200      	movs	r2, #0
 8003a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003a5a:	0623      	lsls	r3, r4, #24
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	ea40 0402 	orr.w	r4, r0, r2
 8003a62:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003a66:	430b      	orrs	r3, r1
 8003a68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003a6c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003a70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003a74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a78:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003a7c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003a80:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a84:	3308      	adds	r3, #8
 8003a86:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a96:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003a9a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003a9e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003aa2:	4413      	add	r3, r2
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003aae:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ab2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003ab6:	4623      	mov	r3, r4
 8003ab8:	4303      	orrs	r3, r0
 8003aba:	67bb      	str	r3, [r7, #120]	; 0x78
 8003abc:	462b      	mov	r3, r5
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ac2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003ac6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003aca:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003ace:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ad8:	4413      	add	r3, r2
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2200      	movs	r2, #0
 8003ae0:	673b      	str	r3, [r7, #112]	; 0x70
 8003ae2:	677a      	str	r2, [r7, #116]	; 0x74
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003af0:	464c      	mov	r4, r9
 8003af2:	0223      	lsls	r3, r4, #8
 8003af4:	4644      	mov	r4, r8
 8003af6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003afa:	4644      	mov	r4, r8
 8003afc:	0222      	lsls	r2, r4, #8
 8003afe:	ea40 0402 	orr.w	r4, r0, r2
 8003b02:	66bc      	str	r4, [r7, #104]	; 0x68
 8003b04:	430b      	orrs	r3, r1
 8003b06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b08:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003b0c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b10:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b14:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b18:	1c9a      	adds	r2, r3, #2
 8003b1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b1e:	4413      	add	r3, r2
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2200      	movs	r2, #0
 8003b26:	663b      	str	r3, [r7, #96]	; 0x60
 8003b28:	667a      	str	r2, [r7, #100]	; 0x64
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b36:	464c      	mov	r4, r9
 8003b38:	0423      	lsls	r3, r4, #16
 8003b3a:	4644      	mov	r4, r8
 8003b3c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003b40:	4644      	mov	r4, r8
 8003b42:	0422      	lsls	r2, r4, #16
 8003b44:	ea40 0402 	orr.w	r4, r0, r2
 8003b48:	65bc      	str	r4, [r7, #88]	; 0x58
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b4e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003b52:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b56:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b5a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b5e:	1cda      	adds	r2, r3, #3
 8003b60:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b64:	4413      	add	r3, r2
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8003b6e:	657a      	str	r2, [r7, #84]	; 0x54
 8003b70:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003b74:	4623      	mov	r3, r4
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	061b      	lsls	r3, r3, #24
 8003b7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b80:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003b84:	4623      	mov	r3, r4
 8003b86:	4303      	orrs	r3, r0
 8003b88:	643b      	str	r3, [r7, #64]	; 0x40
 8003b8a:	462b      	mov	r3, r5
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b90:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003b94:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b98:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ba0:	1d1a      	adds	r2, r3, #4
 8003ba2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ba6:	4413      	add	r3, r2
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2200      	movs	r2, #0
 8003bae:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003bbc:	0023      	movs	r3, r4
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	ea40 0402 	orr.w	r4, r0, r2
 8003bc4:	633c      	str	r4, [r7, #48]	; 0x30
 8003bc6:	430b      	orrs	r3, r1
 8003bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bca:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003bce:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003bd2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003bd6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bda:	1d5a      	adds	r2, r3, #5
 8003bdc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003be0:	4413      	add	r3, r2
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2200      	movs	r2, #0
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003bf6:	0223      	lsls	r3, r4, #8
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	ea40 0402 	orr.w	r4, r0, r2
 8003bfe:	623c      	str	r4, [r7, #32]
 8003c00:	430b      	orrs	r3, r1
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
 8003c04:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003c08:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003c0c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c14:	3306      	adds	r3, #6
 8003c16:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003c1a:	4413      	add	r3, r2
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2200      	movs	r2, #0
 8003c22:	61bb      	str	r3, [r7, #24]
 8003c24:	61fa      	str	r2, [r7, #28]
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	69bc      	ldr	r4, [r7, #24]
 8003c30:	0423      	lsls	r3, r4, #16
 8003c32:	2200      	movs	r2, #0
 8003c34:	ea40 0402 	orr.w	r4, r0, r2
 8003c38:	613c      	str	r4, [r7, #16]
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003c42:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c46:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c4e:	3307      	adds	r3, #7
 8003c50:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003c54:	4413      	add	r3, r2
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	60fa      	str	r2, [r7, #12]
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	68bc      	ldr	r4, [r7, #8]
 8003c6a:	0623      	lsls	r3, r4, #24
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	ea40 0402 	orr.w	r4, r0, r2
 8003c72:	603c      	str	r4, [r7, #0]
 8003c74:	430b      	orrs	r3, r1
 8003c76:	607b      	str	r3, [r7, #4]
 8003c78:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003c7c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003c80:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003c84:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003c88:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003c8c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c90:	3308      	adds	r3, #8
 8003c92:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003c96:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003ca6:	4770      	bx	lr

08003ca8 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	08011dc4 	.word	0x08011dc4

08003cc4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	4b03      	ldr	r3, [pc, #12]	; (8003cdc <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003cce:	4618      	mov	r0, r3
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	08011ddc 	.word	0x08011ddc

08003ce0 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
      data("")
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe fb3a 	bl	8002364 <_ZN3ros3MsgC1Ev>
 8003cf0:	4a05      	ldr	r2, [pc, #20]	; (8003d08 <_ZN8std_msgs6StringC1Ev+0x28>)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <_ZN8std_msgs6StringC1Ev+0x2c>)
 8003cfa:	605a      	str	r2, [r3, #4]
    {
    }
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	08011f24 	.word	0x08011f24
 8003d0c:	08011d24 	.word	0x08011d24

08003d10 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fc fa5c 	bl	80001e0 <strlen>
 8003d28:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	4413      	add	r3, r2
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 faaa 	bl	800428c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	18d0      	adds	r0, r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f00b fa78 	bl	800f240 <memcpy>
      offset += length_data;
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4413      	add	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
      return offset;
 8003d58:	68fb      	ldr	r3, [r7, #12]
    }
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b086      	sub	sp, #24
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	441a      	add	r2, r3
 8003d76:	f107 030c 	add.w	r3, r7, #12
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 faa3 	bl	80042c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	3304      	adds	r3, #4
 8003d86:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4413      	add	r3, r2
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d20c      	bcs.n	8003db2 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	441a      	add	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	6839      	ldr	r1, [r7, #0]
 8003da4:	440b      	add	r3, r1
 8003da6:	7812      	ldrb	r2, [r2, #0]
 8003da8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	3301      	adds	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	e7ec      	b.n	8003d8c <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	3b01      	subs	r3, #1
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	441a      	add	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
     return offset;
 8003dd6:	693b      	ldr	r3, [r7, #16]
    }
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	4b03      	ldr	r3, [pc, #12]	; (8003df8 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8003dea:	4618      	mov	r0, r3
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	08011e00 	.word	0x08011e00

08003dfc <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	4b03      	ldr	r3, [pc, #12]	; (8003e14 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	08011e10 	.word	0x08011e10

08003e18 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fa9e 	bl	8002364 <_ZN3ros3MsgC1Ev>
 8003e28:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3308      	adds	r3, #8
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fa3e 	bl	80032b4 <_ZN13geometry_msgs7Vector3C1Ev>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3328      	adds	r3, #40	; 0x28
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff fa39 	bl	80032b4 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	08011f0c 	.word	0x08011f0c

08003e50 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f103 0008 	add.w	r0, r3, #8
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	4413      	add	r3, r2
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	f7ff fa4a 	bl	8003304 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	4413      	add	r3, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	f7ff fa3d 	bl	8003304 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
      return offset;
 8003e92:	68fb      	ldr	r3, [r7, #12]
    }
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f103 0008 	add.w	r0, r3, #8
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	f7ff fb97 	bl	80035ea <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	4413      	add	r3, r2
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f7ff fb8a 	bl	80035ea <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4413      	add	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
     return offset;
 8003ede:	68fb      	ldr	r3, [r7, #12]
    }
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	08011e34 	.word	0x08011e34

08003f04 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	4b03      	ldr	r3, [pc, #12]	; (8003f1c <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	08011e48 	.word	0x08011e48

08003f20 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	08011f6c 	.word	0x08011f6c

08003f40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 1024,
         int OUTPUT_SIZE = 1024>
class NodeHandle_ : public NodeHandleBase_
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff ffe8 	bl	8003f20 <_ZN3ros15NodeHandleBase_C1Ev>
 8003f50:	4a45      	ldr	r2, [pc, #276]	; (8004068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff f88c 	bl	8003078 <_ZN13STM32HardwareC1Ev>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f00b f965 	bl	800f25c <memset>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003f98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f00b f95c 	bl	800f25c <memset>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003faa:	3324      	adds	r3, #36	; 0x24
 8003fac:	2264      	movs	r2, #100	; 0x64
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f00b f953 	bl	800f25c <memset>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fbc:	3388      	adds	r3, #136	; 0x88
 8003fbe:	2264      	movs	r2, #100	; 0x64
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f00b f94a 	bl	800f25c <memset>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fdc:	461a      	mov	r2, r3
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fea:	461a      	mov	r2, r3
 8003fec:	2300      	movs	r3, #0
 8003fee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004006:	461a      	mov	r2, r3
 8004008:	2300      	movs	r3, #0
 800400a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004020:	461a      	mov	r2, r3
 8004022:	2300      	movs	r3, #0
 8004024:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402e:	461a      	mov	r2, r3
 8004030:	2300      	movs	r3, #0
 8004032:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403c:	461a      	mov	r2, r3
 800403e:	2300      	movs	r3, #0
 8004040:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004056:	3314      	adds	r3, #20
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe fcf7 	bl	8002a4c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	08011ef8 	.word	0x08011ef8
 800406c:	00000000 	.word	0x00000000

08004070 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE>:
extern float ActualAngularVelocity[2]  ;
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;

void commandVelocityCallback(const geometry_msgs::Twist& cmd_vel_msg)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	SubcribeVelocityFromRos(0.01,0);
 8004078:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8004090 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x20>
 800407c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8004098 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x28>
 8004080:	f7fd fb96 	bl	80017b0 <SubcribeVelocityFromRos>
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	f3af 8000 	nop.w
	...
 8004098:	47ae147b 	.word	0x47ae147b
 800409c:	3f847ae1 	.word	0x3f847ae1

080040a0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80040a8:	4805      	ldr	r0, [pc, #20]	; (80040c0 <HAL_UART_TxCpltCallback+0x20>)
 80040aa:	f000 f967 	bl	800437c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 80040ae:	4603      	mov	r3, r0
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff f847 	bl	8003144 <_ZN13STM32Hardware5flushEv>
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000530 	.word	0x20000530

080040c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80040cc:	4805      	ldr	r0, [pc, #20]	; (80040e4 <HAL_UART_RxCpltCallback+0x20>)
 80040ce:	f000 f955 	bl	800437c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 80040d2:	4603      	mov	r3, r0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe fff6 	bl	80030c6 <_ZN13STM32Hardware10reset_rbufEv>
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000530 	.word	0x20000530

080040e8 <setup>:

void setup(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  nh.initNode();
 80040ec:	4806      	ldr	r0, [pc, #24]	; (8004108 <setup+0x20>)
 80040ee:	f000 f951 	bl	8004394 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
  nh.advertise(chatter);
 80040f2:	4906      	ldr	r1, [pc, #24]	; (800410c <setup+0x24>)
 80040f4:	4804      	ldr	r0, [pc, #16]	; (8004108 <setup+0x20>)
 80040f6:	f000 f976 	bl	80043e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
  nh.subscribe(cmd_vel_sub);
 80040fa:	4905      	ldr	r1, [pc, #20]	; (8004110 <setup+0x28>)
 80040fc:	4802      	ldr	r0, [pc, #8]	; (8004108 <setup+0x20>)
 80040fe:	f000 f9a2 	bl	8004446 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E>


}
 8004102:	bf00      	nop
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000530 	.word	0x20000530
 800410c:	20001674 	.word	0x20001674
 8004110:	20001688 	.word	0x20001688
 8004114:	00000000 	.word	0x00000000

08004118 <loop>:

void loop(void)
{
 8004118:	b5b0      	push	{r4, r5, r7, lr}
 800411a:	af00      	add	r7, sp, #0

  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 800411c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004120:	484b      	ldr	r0, [pc, #300]	; (8004250 <loop+0x138>)
 8004122:	f002 fb04 	bl	800672e <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 8004126:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800412a:	4849      	ldr	r0, [pc, #292]	; (8004250 <loop+0x138>)
 800412c:	f002 faff 	bl	800672e <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8004130:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004134:	4846      	ldr	r0, [pc, #280]	; (8004250 <loop+0x138>)
 8004136:	f002 fafa 	bl	800672e <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 800413a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800413e:	4844      	ldr	r0, [pc, #272]	; (8004250 <loop+0x138>)
 8004140:	f002 faf5 	bl	800672e <HAL_GPIO_TogglePin>

  ReadEncoder();
 8004144:	f7fd fb24 	bl	8001790 <ReadEncoder>
  ComputeVelocity();
 8004148:	f7fd fb29 	bl	800179e <ComputeVelocity>
  SubcribeVelocityFromRos(0.01,0);
 800414c:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8004240 <loop+0x128>
 8004150:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 8004248 <loop+0x130>
 8004154:	f7fd fb2c 	bl	80017b0 <SubcribeVelocityFromRos>

  PID_Compute(&uPID,&err,0.229,15.3,22.222,SetPointAngularVelocity[0],ActualAngularVelocity[0],&PidOut[0]);
 8004158:	4b3e      	ldr	r3, [pc, #248]	; (8004254 <loop+0x13c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f7fc f9fb 	bl	8000558 <__aeabi_f2d>
 8004162:	4604      	mov	r4, r0
 8004164:	460d      	mov	r5, r1
 8004166:	4b3c      	ldr	r3, [pc, #240]	; (8004258 <loop+0x140>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fc f9f4 	bl	8000558 <__aeabi_f2d>
 8004170:	4a3a      	ldr	r2, [pc, #232]	; (800425c <loop+0x144>)
 8004172:	ec41 0b13 	vmov	d3, r0, r1
 8004176:	ec45 4b12 	vmov	d2, r4, r5
 800417a:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8004260 <loop+0x148>
 800417e:	eddf 0a39 	vldr	s1, [pc, #228]	; 8004264 <loop+0x14c>
 8004182:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8004268 <loop+0x150>
 8004186:	4939      	ldr	r1, [pc, #228]	; (800426c <loop+0x154>)
 8004188:	4839      	ldr	r0, [pc, #228]	; (8004270 <loop+0x158>)
 800418a:	f7fd fa25 	bl	80015d8 <PID_Compute>
  PID_Compute(&uPID,&err,0.229,15.3,22.222,SetPointAngularVelocity[1],ActualAngularVelocity[1],&PidOut[1]);
 800418e:	4b31      	ldr	r3, [pc, #196]	; (8004254 <loop+0x13c>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fc f9e0 	bl	8000558 <__aeabi_f2d>
 8004198:	4604      	mov	r4, r0
 800419a:	460d      	mov	r5, r1
 800419c:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <loop+0x140>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fc f9d9 	bl	8000558 <__aeabi_f2d>
 80041a6:	4a33      	ldr	r2, [pc, #204]	; (8004274 <loop+0x15c>)
 80041a8:	ec41 0b13 	vmov	d3, r0, r1
 80041ac:	ec45 4b12 	vmov	d2, r4, r5
 80041b0:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8004260 <loop+0x148>
 80041b4:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8004264 <loop+0x14c>
 80041b8:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8004268 <loop+0x150>
 80041bc:	492b      	ldr	r1, [pc, #172]	; (800426c <loop+0x154>)
 80041be:	482c      	ldr	r0, [pc, #176]	; (8004270 <loop+0x158>)
 80041c0:	f7fd fa0a 	bl	80015d8 <PID_Compute>
    HAL_Delay(1000*SAMPLE_TIME);
 80041c4:	2032      	movs	r0, #50	; 0x32
 80041c6:	f001 fbc5 	bl	8005954 <HAL_Delay>
  	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,fabs(round(PidOut[0])));
 80041ca:	4b24      	ldr	r3, [pc, #144]	; (800425c <loop+0x144>)
 80041cc:	edd3 7a00 	vldr	s15, [r3]
 80041d0:	eeb0 0a67 	vmov.f32	s0, s15
 80041d4:	f7fe f8a5 	bl	8002322 <_ZSt5roundf>
 80041d8:	eef0 7a40 	vmov.f32	s15, s0
 80041dc:	eeb0 0a67 	vmov.f32	s0, s15
 80041e0:	f7fe f88f 	bl	8002302 <_ZSt4fabsf>
 80041e4:	eef0 7a40 	vmov.f32	s15, s0
 80041e8:	4b23      	ldr	r3, [pc, #140]	; (8004278 <loop+0x160>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f0:	ee17 2a90 	vmov	r2, s15
 80041f4:	63da      	str	r2, [r3, #60]	; 0x3c
  	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,fabs(round(PidOut[1])));
 80041f6:	4b19      	ldr	r3, [pc, #100]	; (800425c <loop+0x144>)
 80041f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80041fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004200:	f7fe f88f 	bl	8002322 <_ZSt5roundf>
 8004204:	eef0 7a40 	vmov.f32	s15, s0
 8004208:	eeb0 0a67 	vmov.f32	s0, s15
 800420c:	f7fe f879 	bl	8002302 <_ZSt4fabsf>
 8004210:	eef0 7a40 	vmov.f32	s15, s0
 8004214:	4b18      	ldr	r3, [pc, #96]	; (8004278 <loop+0x160>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800421c:	ee17 2a90 	vmov	r2, s15
 8004220:	635a      	str	r2, [r3, #52]	; 0x34

  str_msg.data = hello;
 8004222:	4b16      	ldr	r3, [pc, #88]	; (800427c <loop+0x164>)
 8004224:	4a16      	ldr	r2, [pc, #88]	; (8004280 <loop+0x168>)
 8004226:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 8004228:	4914      	ldr	r1, [pc, #80]	; (800427c <loop+0x164>)
 800422a:	4816      	ldr	r0, [pc, #88]	; (8004284 <loop+0x16c>)
 800422c:	f7fe fef1 	bl	8003012 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 8004230:	4815      	ldr	r0, [pc, #84]	; (8004288 <loop+0x170>)
 8004232:	f000 f933 	bl	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
//
//  HAL_Delay(100);
}
 8004236:	bf00      	nop
 8004238:	bdb0      	pop	{r4, r5, r7, pc}
 800423a:	bf00      	nop
 800423c:	f3af 8000 	nop.w
	...
 8004248:	47ae147b 	.word	0x47ae147b
 800424c:	3f847ae1 	.word	0x3f847ae1
 8004250:	40020c00 	.word	0x40020c00
 8004254:	20000010 	.word	0x20000010
 8004258:	20001728 	.word	0x20001728
 800425c:	200016e8 	.word	0x200016e8
 8004260:	41b1c6a8 	.word	0x41b1c6a8
 8004264:	4174cccd 	.word	0x4174cccd
 8004268:	3e6a7efa 	.word	0x3e6a7efa
 800426c:	20000524 	.word	0x20000524
 8004270:	20000514 	.word	0x20000514
 8004274:	200016ec 	.word	0x200016ec
 8004278:	200003c4 	.word	0x200003c4
 800427c:	2000166c 	.word	0x2000166c
 8004280:	20000000 	.word	0x20000000
 8004284:	20001674 	.word	0x20001674
 8004288:	20000530 	.word	0x20000530

0800428c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b03      	cmp	r3, #3
 800429e:	d80d      	bhi.n	80042bc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	fa22 f103 	lsr.w	r1, r2, r3
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	b2ca      	uxtb	r2, r1
 80042b2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3301      	adds	r3, #1
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	e7ee      	b.n	800429a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d811      	bhi.n	8004306 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6839      	ldr	r1, [r7, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	440a      	add	r2, r1
 80042ec:	7812      	ldrb	r2, [r2, #0]
 80042ee:	4611      	mov	r1, r2
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	00d2      	lsls	r2, r2, #3
 80042f4:	fa01 f202 	lsl.w	r2, r1, r2
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3301      	adds	r3, #1
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	e7ea      	b.n	80042dc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	4a04      	ldr	r2, [pc, #16]	; (8004330 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	08011f54 	.word	0x08011f54

08004334 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff ffe5 	bl	8004314 <_ZN3ros11Subscriber_C1Ev>
 800434a:	4a0b      	ldr	r2, [pc, #44]	; (8004378 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3310      	adds	r3, #16
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff fd5f 	bl	8003e18 <_ZN13geometry_msgs5TwistC1Ev>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	659a      	str	r2, [r3, #88]	; 0x58
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	609a      	str	r2, [r3, #8]
  };
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	08011ee0 	.word	0x08011ee0

0800437c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
  }
 8004388:	4618      	mov	r0, r3
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe fe85 	bl	80030b0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ac:	461a      	mov	r2, r3
 80043ae:	2300      	movs	r3, #0
 80043b0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    bytes_ = 0;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ba:	461a      	mov	r2, r3
 80043bc:	2300      	movs	r3, #0
 80043be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    index_ = 0;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c8:	461a      	mov	r2, r3
 80043ca:	2300      	movs	r3, #0
 80043cc:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    topic_ = 0;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d6:	461a      	mov	r2, r3
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  };
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80043e6:	b480      	push	{r7}
 80043e8:	b085      	sub	sp, #20
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b18      	cmp	r3, #24
 80043f8:	dc1e      	bgt.n	8004438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d111      	bne.n	8004430 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	60da      	str	r2, [r3, #12]
        return true;
 800442c:	2301      	movs	r3, #1
 800442e:	e004      	b.n	800443a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3301      	adds	r3, #1
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	e7dd      	b.n	80043f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8004438:	2300      	movs	r3, #0
  }
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8004446:	b480      	push	{r7}
 8004448:	b085      	sub	sp, #20
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b18      	cmp	r3, #24
 8004458:	dc19      	bgt.n	800448e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10d      	bne.n	8004486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004472:	6839      	ldr	r1, [r7, #0]
 8004474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	605a      	str	r2, [r3, #4]
        return true;
 8004482:	2301      	movs	r3, #1
 8004484:	e004      	b.n	8004490 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3301      	adds	r3, #1
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	e7e2      	b.n	8004454 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 800448e:	2300      	movs	r3, #0
  }
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce() override
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3304      	adds	r3, #4
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fe fef7 	bl	800329c <_ZN13STM32Hardware4timeEv>
 80044ae:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d905      	bls.n	80044d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    if (mode_ != MODE_FIRST_FF)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00e      	beq.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d906      	bls.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f6:	461a      	mov	r2, r3
 80044f8:	2300      	movs	r3, #0
 80044fa:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
      if (spin_timeout_ > 0)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8004504:	2b00      	cmp	r3, #0
 8004506:	d014      	beq.n	8004532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3304      	adds	r3, #4
 800450c:	4618      	mov	r0, r3
 800450e:	f7fe fec5 	bl	800329c <_ZN13STM32Hardware4timeEv>
 8004512:	4602      	mov	r2, r0
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1ad2      	subs	r2, r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 800451e:	429a      	cmp	r2, r3
 8004520:	bf8c      	ite	hi
 8004522:	2301      	movhi	r3, #1
 8004524:	2300      	movls	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 800452c:	f06f 0301 	mvn.w	r3, #1
 8004530:	e221      	b.n	8004976 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3304      	adds	r3, #4
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe fdd6 	bl	80030e8 <_ZN13STM32Hardware4readEv>
 800453c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f2c0 81fa 	blt.w	800493a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454c:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4413      	add	r3, r2
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800455a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004564:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004568:	2b07      	cmp	r3, #7
 800456a:	d12b      	bne.n	80045c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004572:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800457e:	f8c1 20f8 	str.w	r2, [r1, #248]	; 0xf8
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	b2d1      	uxtb	r1, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	4413      	add	r3, r2
 800458a:	460a      	mov	r2, r1
 800458c:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800459a:	3b01      	subs	r3, #1
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1a4      	bne.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ba:	461a      	mov	r2, r3
 80045bc:	2308      	movs	r3, #8
 80045be:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80045c2:	e79c      	b.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d130      	bne.n	8004634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2bff      	cmp	r3, #255	; 0xff
 80045d6:	d112      	bne.n	80045fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80045e2:	3301      	adds	r3, #1
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045ea:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3314      	adds	r3, #20
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045f8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 80045fc:	e77f      	b.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3304      	adds	r3, #4
 8004602:	4618      	mov	r0, r3
 8004604:	f7fe fe4a 	bl	800329c <_ZN13STM32Hardware4timeEv>
 8004608:	4602      	mov	r2, r0
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004612:	4293      	cmp	r3, r2
 8004614:	bf8c      	ite	hi
 8004616:	2301      	movhi	r3, #1
 8004618:	2300      	movls	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	f43f af6e 	beq.w	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          return SPIN_TIMEOUT;
 800462e:	f06f 0301 	mvn.w	r3, #1
 8004632:	e1a0      	b.n	8004976 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800463e:	2b01      	cmp	r3, #1
 8004640:	d121      	bne.n	8004686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2bfe      	cmp	r3, #254	; 0xfe
 8004646:	d10b      	bne.n	8004660 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800464e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004652:	3301      	adds	r3, #1
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800465a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800465e:	e74e      	b.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004666:	461a      	mov	r2, r3
 8004668:	2300      	movs	r3, #0
 800466a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          if (configured_ == false)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004674:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	f47f af40 	bne.w	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f97d 	bl	800497e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 8004684:	e73b      	b.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004690:	2b02      	cmp	r3, #2
 8004692:	d120      	bne.n	80046d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469a:	461a      	mov	r2, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        index_ = 0;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a8:	461a      	mov	r2, r3
 80046aa:	2300      	movs	r3, #0
 80046ac:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80046ba:	3301      	adds	r3, #1
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046c2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte for calculating size checksum */
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046cc:	461a      	mov	r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80046d4:	e713      	b.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046dc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d118      	bne.n	8004716 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ea:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	021b      	lsls	r3, r3, #8
 80046f2:	4413      	add	r3, r2
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        mode_++;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004704:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004708:	3301      	adds	r3, #1
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004710:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004714:	e6f3      	b.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004720:	2b04      	cmp	r3, #4
 8004722:	d11f      	bne.n	8004764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800472e:	425a      	negs	r2, r3
 8004730:	b2db      	uxtb	r3, r3
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	bf58      	it	pl
 8004736:	4253      	negpl	r3, r2
 8004738:	2bff      	cmp	r3, #255	; 0xff
 800473a:	d10b      	bne.n	8004754 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004742:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004746:	3301      	adds	r3, #1
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800474e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004752:	e6d4      	b.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475a:	461a      	mov	r2, r3
 800475c:	2300      	movs	r3, #0
 800475e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004762:	e6cc      	b.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800476e:	2b05      	cmp	r3, #5
 8004770:	d119      	bne.n	80047a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004778:	461a      	mov	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004786:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800478a:	3301      	adds	r3, #1
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004792:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte included in checksum */
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479c:	461a      	mov	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80047a4:	e6ab      	b.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80047b0:	2b06      	cmp	r3, #6
 80047b2:	d123      	bne.n	80047fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ba:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	4413      	add	r3, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_ = MODE_MESSAGE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d4:	461a      	mov	r2, r3
 80047d6:	2307      	movs	r3, #7
 80047d8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if (bytes_ == 0)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f47f ae89 	bne.w	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f2:	461a      	mov	r2, r3
 80047f4:	2308      	movs	r3, #8
 80047f6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80047fa:	e680      	b.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004802:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004806:	2b08      	cmp	r3, #8
 8004808:	f47f ae79 	bne.w	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004812:	461a      	mov	r2, r3
 8004814:	2300      	movs	r3, #0
 8004816:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if ((checksum_ % 256) == 255)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004820:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004824:	425a      	negs	r2, r3
 8004826:	b2db      	uxtb	r3, r3
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	bf58      	it	pl
 800482c:	4253      	negpl	r3, r2
 800482e:	2bff      	cmp	r3, #255	; 0xff
 8004830:	f47f ae65 	bne.w	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d116      	bne.n	8004870 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f89b 	bl	800497e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f8b6 	bl	80049ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004854:	461a      	mov	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            last_sync_receive_time = c_time;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004862:	461a      	mov	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            return SPIN_ERR;
 800486a:	f04f 33ff 	mov.w	r3, #4294967295
 800486e:	e082      	b.n	8004976 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004876:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800487a:	2b0a      	cmp	r3, #10
 800487c:	d107      	bne.n	800488e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8004884:	4619      	mov	r1, r3
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f978 	bl	8004b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 800488c:	e637      	b.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004894:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004898:	2b06      	cmp	r3, #6
 800489a:	d111      	bne.n	80048c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80048a2:	3314      	adds	r3, #20
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	f602 0224 	addw	r2, r2, #2084	; 0x824
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fe fa0c 	bl	8002cca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80048be:	e61e      	b.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048ca:	2b0b      	cmp	r3, #11
 80048cc:	d106      	bne.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80048da:	e610      	b.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048e6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80048f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f43f ae02 	beq.w	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004904:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800490e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004918:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800491c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8004934:	4611      	mov	r1, r2
 8004936:	4798      	blx	r3
    while (true)
 8004938:	e5e1      	b.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 800493a:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004942:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d014      	beq.n	8004974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004950:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800495c:	4293      	cmp	r3, r2
 800495e:	d909      	bls.n	8004974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f80c 	bl	800497e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496c:	461a      	mov	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return SPIN_OK;
 8004974:	2300      	movs	r3, #0
  }
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 800497e:	b580      	push	{r7, lr}
 8004980:	b086      	sub	sp, #24
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004986:	f107 030c 	add.w	r3, r7, #12
 800498a:	4618      	mov	r0, r3
 800498c:	f7fd fcfa 	bl	8002384 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f107 020c 	add.w	r2, r7, #12
 800499a:	210a      	movs	r1, #10
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	4798      	blx	r3
    rt_time = hardware_.time();
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe fc79 	bl	800329c <_ZN13STM32Hardware4timeEv>
 80049aa:	4602      	mov	r2, r0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 80049b2:	bf00      	nop
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80049ba:	b590      	push	{r4, r7, lr}
 80049bc:	b08b      	sub	sp, #44	; 0x2c
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80049c2:	f107 030c 	add.w	r3, r7, #12
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fd fdcc 	bl	8002564 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80049cc:	2300      	movs	r3, #0
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	2b18      	cmp	r3, #24
 80049d4:	dc63      	bgt.n	8004a9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d056      	beq.n	8004a96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	6859      	ldr	r1, [r3, #4]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3308      	adds	r3, #8
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4608      	mov	r0, r1
 8004a36:	4798      	blx	r3
 8004a38:	4603      	mov	r3, r0
 8004a3a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	6859      	ldr	r1, [r3, #4]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4608      	mov	r0, r1
 8004a64:	4798      	blx	r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a6e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681c      	ldr	r4, [r3, #0]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fe fad8 	bl	800303a <_ZN3ros9Publisher15getEndpointTypeEv>
 8004a8a:	4601      	mov	r1, r0
 8004a8c:	f107 030c 	add.w	r3, r7, #12
 8004a90:	461a      	mov	r2, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	3301      	adds	r3, #1
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9c:	e798      	b.n	80049d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	2b18      	cmp	r3, #24
 8004aa6:	dc5f      	bgt.n	8004b68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aac:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d053      	beq.n	8004b60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abc:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ace:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ade:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004ae2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aea:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3308      	adds	r3, #8
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4608      	mov	r0, r1
 8004afa:	4798      	blx	r3
 8004afc:	4603      	mov	r3, r0
 8004afe:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b04:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004b08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b10:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4608      	mov	r0, r1
 8004b20:	4798      	blx	r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b2a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681c      	ldr	r4, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b36:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004b3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b42:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4608      	mov	r0, r1
 8004b52:	4798      	blx	r3
 8004b54:	4601      	mov	r1, r0
 8004b56:	f107 030c 	add.w	r3, r7, #12
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	3301      	adds	r3, #1
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
 8004b66:	e79c      	b.n	8004aa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
 8004b74:	bf00      	nop
 8004b76:	372c      	adds	r7, #44	; 0x2c
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd90      	pop	{r4, r7, pc}

08004b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004b86:	f107 0308 	add.w	r3, r7, #8
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fd fbfa 	bl	8002384 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fe fb81 	bl	800329c <_ZN13STM32Hardware4timeEv>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004ba6:	f107 0308 	add.w	r3, r7, #8
 8004baa:	6839      	ldr	r1, [r7, #0]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fd fc59 	bl	8002464 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	4916      	ldr	r1, [pc, #88]	; (8004c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8004bb8:	fba1 1303 	umull	r1, r3, r1, r3
 8004bbc:	099b      	lsrs	r3, r3, #6
 8004bbe:	4413      	add	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004bc2:	6939      	ldr	r1, [r7, #16]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8004bc8:	fba3 0302 	umull	r0, r3, r3, r2
 8004bcc:	099b      	lsrs	r3, r3, #6
 8004bce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004bd2:	fb00 f303 	mul.w	r3, r0, r3
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	4a0e      	ldr	r2, [pc, #56]	; (8004c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	440b      	add	r3, r1
 8004be0:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004be2:	f107 0308 	add.w	r3, r7, #8
 8004be6:	3304      	adds	r3, #4
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f8aa 	bl	8004d44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe fb51 	bl	800329c <_ZN13STM32Hardware4timeEv>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c02:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
 8004c06:	bf00      	nop
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	10624dd3 	.word	0x10624dd3
 8004c14:	000f4240 	.word	0x000f4240

08004c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2b63      	cmp	r3, #99	; 0x63
 8004c28:	dd0b      	ble.n	8004c42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c30:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004c34:	f083 0301 	eor.w	r3, r3, #1
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e079      	b.n	8004d36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	f602 4224 	addw	r2, r2, #3108	; 0xc24
 8004c4e:	3207      	adds	r2, #7
 8004c50:	4611      	mov	r1, r2
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	4798      	blx	r3
 8004c56:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	22ff      	movs	r2, #255	; 0xff
 8004c5c:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24
    message_out[1] = PROTOCOL_VER;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	22fe      	movs	r2, #254	; 0xfe
 8004c64:	f883 2c25 	strb.w	r2, [r3, #3109]	; 0xc25
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f883 2c26 	strb.w	r2, [r3, #3110]	; 0xc26
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	0a1b      	lsrs	r3, r3, #8
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f883 2c27 	strb.w	r2, [r3, #3111]	; 0xc27
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f893 2c26 	ldrb.w	r2, [r3, #3110]	; 0xc26
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 3c27 	ldrb.w	r3, [r3, #3111]	; 0xc27
 8004c8e:	4413      	add	r3, r2
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	43db      	mvns	r3, r3
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	b21b      	sxth	r3, r3
 8004caa:	121b      	asrs	r3, r3, #8
 8004cac:	b21b      	sxth	r3, r3
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a

    /* calculate checksum */
    int chk = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004cba:	2305      	movs	r3, #5
 8004cbc:	61bb      	str	r3, [r7, #24]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	3306      	adds	r3, #6
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	dc0d      	bgt.n	8004ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	e7ec      	b.n	8004cbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	3307      	adds	r3, #7
 8004ce8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	425a      	negs	r2, r3
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	bf58      	it	pl
 8004cf4:	4253      	negpl	r3, r2
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	1c59      	adds	r1, r3, #1
 8004cfc:	6179      	str	r1, [r7, #20]
 8004cfe:	43d2      	mvns	r2, r2
 8004d00:	b2d1      	uxtb	r1, r2
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	460a      	mov	r2, r1
 8004d08:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24

    if (l <= OUTPUT_SIZE)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d12:	dc0a      	bgt.n	8004d2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1d18      	adds	r0, r3, #4
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4619      	mov	r1, r3
 8004d22:	f7fe fa6d 	bl	8003200 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	e005      	b.n	8004d36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004d2a:	4905      	ldr	r1, [pc, #20]	; (8004d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f849 	bl	8004dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8004d32:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004d36:	4618      	mov	r0, r3
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	08011e6c 	.word	0x08011e6c

08004d44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3304      	adds	r3, #4
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fe faa2 	bl	800329c <_ZN13STM32Hardware4timeEv>
 8004d58:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4915      	ldr	r1, [pc, #84]	; (8004db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x74>)
 8004d62:	fba1 1303 	umull	r1, r3, r1, r3
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	1e5a      	subs	r2, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6859      	ldr	r1, [r3, #4]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x74>)
 8004d7a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d7e:	099b      	lsrs	r3, r3, #6
 8004d80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d84:	fb00 f303 	mul.w	r3, r0, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	4a0c      	ldr	r2, [pc, #48]	; (8004dbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x78>)
 8004d8c:	fb02 f303 	mul.w	r3, r2, r3
 8004d90:	1aca      	subs	r2, r1, r3
 8004d92:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERKNS_4TimeE+0x7c>)
 8004d94:	4413      	add	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f000 fd0a 	bl	80057c4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004db0:	bf00      	nop
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	10624dd3 	.word	0x10624dd3
 8004dbc:	000f4240 	.word	0x000f4240
 8004dc0:	3b9aca00 	.word	0x3b9aca00

08004dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	2103      	movs	r1, #3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f804 	bl	8004de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8004dd8:	bf00      	nop
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	460b      	mov	r3, r1
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004dee:	f107 0314 	add.w	r3, r7, #20
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fd fd7a 	bl	80028ec <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004df8:	7afb      	ldrb	r3, [r7, #11]
 8004dfa:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f107 0214 	add.w	r2, r7, #20
 8004e0a:	2107      	movs	r1, #7
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	4798      	blx	r3
  }
 8004e10:	bf00      	nop
 8004e12:	3720      	adds	r7, #32
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <_Z41__static_initialization_and_destruction_0ii>:
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d116      	bne.n	8004e56 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d111      	bne.n	8004e56 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8004e32:	480b      	ldr	r0, [pc, #44]	; (8004e60 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004e34:	f7ff f884 	bl	8003f40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
std_msgs::String str_msg;
 8004e38:	480a      	ldr	r0, [pc, #40]	; (8004e64 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004e3a:	f7fe ff51 	bl	8003ce0 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8004e3e:	2300      	movs	r3, #0
 8004e40:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004e42:	4909      	ldr	r1, [pc, #36]	; (8004e68 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004e44:	4809      	ldr	r0, [pc, #36]	; (8004e6c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004e46:	f7fe f8cd 	bl	8002fe4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> cmd_vel_sub("cmd_vel", commandVelocityCallback);
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	4a08      	ldr	r2, [pc, #32]	; (8004e70 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004e4e:	4909      	ldr	r1, [pc, #36]	; (8004e74 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004e50:	4809      	ldr	r0, [pc, #36]	; (8004e78 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004e52:	f7ff fa6f 	bl	8004334 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8004e56:	bf00      	nop
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000530 	.word	0x20000530
 8004e64:	2000166c 	.word	0x2000166c
 8004e68:	08011ea8 	.word	0x08011ea8
 8004e6c:	20001674 	.word	0x20001674
 8004e70:	08004071 	.word	0x08004071
 8004e74:	08011eb0 	.word	0x08011eb0
 8004e78:	20001688 	.word	0x20001688

08004e7c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3310      	adds	r3, #16
 8004e8a:	6839      	ldr	r1, [r7, #0]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff f805 	bl	8003e9c <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	3210      	adds	r2, #16
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	4798      	blx	r3
  }
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3310      	adds	r3, #16
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff f80c 	bl	8003ee8 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004ed0:	4603      	mov	r3, r0
  }
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3310      	adds	r3, #16
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff f80c 	bl	8003f04 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004eec:	4603      	mov	r3, r0
  }
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected() override
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
    return configured_;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f04:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  };
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <_GLOBAL__sub_I_uPID>:
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	f7ff ff7b 	bl	8004e18 <_Z41__static_initialization_and_destruction_0ii>
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	607b      	str	r3, [r7, #4]
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <HAL_MspInit+0x4c>)
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	4a0f      	ldr	r2, [pc, #60]	; (8004f70 <HAL_MspInit+0x4c>)
 8004f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f38:	6453      	str	r3, [r2, #68]	; 0x44
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	; (8004f70 <HAL_MspInit+0x4c>)
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f42:	607b      	str	r3, [r7, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f46:	2300      	movs	r3, #0
 8004f48:	603b      	str	r3, [r7, #0]
 8004f4a:	4b09      	ldr	r3, [pc, #36]	; (8004f70 <HAL_MspInit+0x4c>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <HAL_MspInit+0x4c>)
 8004f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f54:	6413      	str	r3, [r2, #64]	; 0x40
 8004f56:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <HAL_MspInit+0x4c>)
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004f62:	2007      	movs	r0, #7
 8004f64:	f000 fdea 	bl	8005b3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40023800 	.word	0x40023800

08004f74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	; 0x28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f7c:	f107 0314 	add.w	r3, r7, #20
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	605a      	str	r2, [r3, #4]
 8004f86:	609a      	str	r2, [r3, #8]
 8004f88:	60da      	str	r2, [r3, #12]
 8004f8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a19      	ldr	r2, [pc, #100]	; (8004ff8 <HAL_I2C_MspInit+0x84>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d12c      	bne.n	8004ff0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	4b18      	ldr	r3, [pc, #96]	; (8004ffc <HAL_I2C_MspInit+0x88>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	4a17      	ldr	r2, [pc, #92]	; (8004ffc <HAL_I2C_MspInit+0x88>)
 8004fa0:	f043 0302 	orr.w	r3, r3, #2
 8004fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa6:	4b15      	ldr	r3, [pc, #84]	; (8004ffc <HAL_I2C_MspInit+0x88>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004fb2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fb8:	2312      	movs	r3, #18
 8004fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fc8:	f107 0314 	add.w	r3, r7, #20
 8004fcc:	4619      	mov	r1, r3
 8004fce:	480c      	ldr	r0, [pc, #48]	; (8005000 <HAL_I2C_MspInit+0x8c>)
 8004fd0:	f001 f9f8 	bl	80063c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <HAL_I2C_MspInit+0x88>)
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	4a07      	ldr	r2, [pc, #28]	; (8004ffc <HAL_I2C_MspInit+0x88>)
 8004fde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_I2C_MspInit+0x88>)
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004ff0:	bf00      	nop
 8004ff2:	3728      	adds	r7, #40	; 0x28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40005400 	.word	0x40005400
 8004ffc:	40023800 	.word	0x40023800
 8005000:	40020400 	.word	0x40020400

08005004 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08e      	sub	sp, #56	; 0x38
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800500c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	605a      	str	r2, [r3, #4]
 8005016:	609a      	str	r2, [r3, #8]
 8005018:	60da      	str	r2, [r3, #12]
 800501a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a59      	ldr	r2, [pc, #356]	; (8005188 <HAL_I2S_MspInit+0x184>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d15b      	bne.n	80050de <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005026:	2300      	movs	r3, #0
 8005028:	623b      	str	r3, [r7, #32]
 800502a:	4b58      	ldr	r3, [pc, #352]	; (800518c <HAL_I2S_MspInit+0x188>)
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	4a57      	ldr	r2, [pc, #348]	; (800518c <HAL_I2S_MspInit+0x188>)
 8005030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005034:	6413      	str	r3, [r2, #64]	; 0x40
 8005036:	4b55      	ldr	r3, [pc, #340]	; (800518c <HAL_I2S_MspInit+0x188>)
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503e:	623b      	str	r3, [r7, #32]
 8005040:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	4b51      	ldr	r3, [pc, #324]	; (800518c <HAL_I2S_MspInit+0x188>)
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	4a50      	ldr	r2, [pc, #320]	; (800518c <HAL_I2S_MspInit+0x188>)
 800504c:	f043 0304 	orr.w	r3, r3, #4
 8005050:	6313      	str	r3, [r2, #48]	; 0x30
 8005052:	4b4e      	ldr	r3, [pc, #312]	; (800518c <HAL_I2S_MspInit+0x188>)
 8005054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	61fb      	str	r3, [r7, #28]
 800505c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800505e:	2300      	movs	r3, #0
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	4b4a      	ldr	r3, [pc, #296]	; (800518c <HAL_I2S_MspInit+0x188>)
 8005064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005066:	4a49      	ldr	r2, [pc, #292]	; (800518c <HAL_I2S_MspInit+0x188>)
 8005068:	f043 0302 	orr.w	r3, r3, #2
 800506c:	6313      	str	r3, [r2, #48]	; 0x30
 800506e:	4b47      	ldr	r3, [pc, #284]	; (800518c <HAL_I2S_MspInit+0x188>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800507a:	2304      	movs	r3, #4
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507e:	2302      	movs	r3, #2
 8005080:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005082:	2300      	movs	r3, #0
 8005084:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005086:	2300      	movs	r3, #0
 8005088:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800508a:	2306      	movs	r3, #6
 800508c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800508e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005092:	4619      	mov	r1, r3
 8005094:	483e      	ldr	r0, [pc, #248]	; (8005190 <HAL_I2S_MspInit+0x18c>)
 8005096:	f001 f995 	bl	80063c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800509a:	2308      	movs	r3, #8
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800509e:	2302      	movs	r3, #2
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a6:	2300      	movs	r3, #0
 80050a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80050aa:	2305      	movs	r3, #5
 80050ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80050ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050b2:	4619      	mov	r1, r3
 80050b4:	4836      	ldr	r0, [pc, #216]	; (8005190 <HAL_I2S_MspInit+0x18c>)
 80050b6:	f001 f985 	bl	80063c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80050ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c0:	2302      	movs	r3, #2
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c8:	2300      	movs	r3, #0
 80050ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80050cc:	2305      	movs	r3, #5
 80050ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050d4:	4619      	mov	r1, r3
 80050d6:	482f      	ldr	r0, [pc, #188]	; (8005194 <HAL_I2S_MspInit+0x190>)
 80050d8:	f001 f974 	bl	80063c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80050dc:	e04f      	b.n	800517e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a2d      	ldr	r2, [pc, #180]	; (8005198 <HAL_I2S_MspInit+0x194>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d14a      	bne.n	800517e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80050e8:	2300      	movs	r3, #0
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	4b27      	ldr	r3, [pc, #156]	; (800518c <HAL_I2S_MspInit+0x188>)
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	4a26      	ldr	r2, [pc, #152]	; (800518c <HAL_I2S_MspInit+0x188>)
 80050f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f6:	6413      	str	r3, [r2, #64]	; 0x40
 80050f8:	4b24      	ldr	r3, [pc, #144]	; (800518c <HAL_I2S_MspInit+0x188>)
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005104:	2300      	movs	r3, #0
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	4b20      	ldr	r3, [pc, #128]	; (800518c <HAL_I2S_MspInit+0x188>)
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	4a1f      	ldr	r2, [pc, #124]	; (800518c <HAL_I2S_MspInit+0x188>)
 800510e:	f043 0301 	orr.w	r3, r3, #1
 8005112:	6313      	str	r3, [r2, #48]	; 0x30
 8005114:	4b1d      	ldr	r3, [pc, #116]	; (800518c <HAL_I2S_MspInit+0x188>)
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	4b19      	ldr	r3, [pc, #100]	; (800518c <HAL_I2S_MspInit+0x188>)
 8005126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005128:	4a18      	ldr	r2, [pc, #96]	; (800518c <HAL_I2S_MspInit+0x188>)
 800512a:	f043 0304 	orr.w	r3, r3, #4
 800512e:	6313      	str	r3, [r2, #48]	; 0x30
 8005130:	4b16      	ldr	r3, [pc, #88]	; (800518c <HAL_I2S_MspInit+0x188>)
 8005132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800513c:	2310      	movs	r3, #16
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005140:	2302      	movs	r3, #2
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005144:	2300      	movs	r3, #0
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005148:	2300      	movs	r3, #0
 800514a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800514c:	2306      	movs	r3, #6
 800514e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8005150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005154:	4619      	mov	r1, r3
 8005156:	4811      	ldr	r0, [pc, #68]	; (800519c <HAL_I2S_MspInit+0x198>)
 8005158:	f001 f934 	bl	80063c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800515c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005162:	2302      	movs	r3, #2
 8005164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005166:	2300      	movs	r3, #0
 8005168:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800516a:	2300      	movs	r3, #0
 800516c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800516e:	2306      	movs	r3, #6
 8005170:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005176:	4619      	mov	r1, r3
 8005178:	4805      	ldr	r0, [pc, #20]	; (8005190 <HAL_I2S_MspInit+0x18c>)
 800517a:	f001 f923 	bl	80063c4 <HAL_GPIO_Init>
}
 800517e:	bf00      	nop
 8005180:	3738      	adds	r7, #56	; 0x38
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40003800 	.word	0x40003800
 800518c:	40023800 	.word	0x40023800
 8005190:	40020800 	.word	0x40020800
 8005194:	40020400 	.word	0x40020400
 8005198:	40003c00 	.word	0x40003c00
 800519c:	40020000 	.word	0x40020000

080051a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08a      	sub	sp, #40	; 0x28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051a8:	f107 0314 	add.w	r3, r7, #20
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	609a      	str	r2, [r3, #8]
 80051b4:	60da      	str	r2, [r3, #12]
 80051b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a19      	ldr	r2, [pc, #100]	; (8005224 <HAL_SPI_MspInit+0x84>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d12b      	bne.n	800521a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80051c2:	2300      	movs	r3, #0
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	4b18      	ldr	r3, [pc, #96]	; (8005228 <HAL_SPI_MspInit+0x88>)
 80051c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ca:	4a17      	ldr	r2, [pc, #92]	; (8005228 <HAL_SPI_MspInit+0x88>)
 80051cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051d0:	6453      	str	r3, [r2, #68]	; 0x44
 80051d2:	4b15      	ldr	r3, [pc, #84]	; (8005228 <HAL_SPI_MspInit+0x88>)
 80051d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	4b11      	ldr	r3, [pc, #68]	; (8005228 <HAL_SPI_MspInit+0x88>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	4a10      	ldr	r2, [pc, #64]	; (8005228 <HAL_SPI_MspInit+0x88>)
 80051e8:	f043 0301 	orr.w	r3, r3, #1
 80051ec:	6313      	str	r3, [r2, #48]	; 0x30
 80051ee:	4b0e      	ldr	r3, [pc, #56]	; (8005228 <HAL_SPI_MspInit+0x88>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80051fa:	23e0      	movs	r3, #224	; 0xe0
 80051fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fe:	2302      	movs	r3, #2
 8005200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005206:	2303      	movs	r3, #3
 8005208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800520a:	2305      	movs	r3, #5
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800520e:	f107 0314 	add.w	r3, r7, #20
 8005212:	4619      	mov	r1, r3
 8005214:	4805      	ldr	r0, [pc, #20]	; (800522c <HAL_SPI_MspInit+0x8c>)
 8005216:	f001 f8d5 	bl	80063c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800521a:	bf00      	nop
 800521c:	3728      	adds	r7, #40	; 0x28
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40013000 	.word	0x40013000
 8005228:	40023800 	.word	0x40023800
 800522c:	40020000 	.word	0x40020000

08005230 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005240:	d116      	bne.n	8005270 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	4b1a      	ldr	r3, [pc, #104]	; (80052b0 <HAL_TIM_Base_MspInit+0x80>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	4a19      	ldr	r2, [pc, #100]	; (80052b0 <HAL_TIM_Base_MspInit+0x80>)
 800524c:	f043 0301 	orr.w	r3, r3, #1
 8005250:	6413      	str	r3, [r2, #64]	; 0x40
 8005252:	4b17      	ldr	r3, [pc, #92]	; (80052b0 <HAL_TIM_Base_MspInit+0x80>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 800525e:	2202      	movs	r2, #2
 8005260:	2100      	movs	r1, #0
 8005262:	201c      	movs	r0, #28
 8005264:	f000 fc75 	bl	8005b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005268:	201c      	movs	r0, #28
 800526a:	f000 fc8e 	bl	8005b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800526e:	e01a      	b.n	80052a6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a0f      	ldr	r2, [pc, #60]	; (80052b4 <HAL_TIM_Base_MspInit+0x84>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d115      	bne.n	80052a6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800527a:	2300      	movs	r3, #0
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <HAL_TIM_Base_MspInit+0x80>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	4a0b      	ldr	r2, [pc, #44]	; (80052b0 <HAL_TIM_Base_MspInit+0x80>)
 8005284:	f043 0302 	orr.w	r3, r3, #2
 8005288:	6413      	str	r3, [r2, #64]	; 0x40
 800528a:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <HAL_TIM_Base_MspInit+0x80>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	60bb      	str	r3, [r7, #8]
 8005294:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 3);
 8005296:	2203      	movs	r2, #3
 8005298:	2100      	movs	r1, #0
 800529a:	201d      	movs	r0, #29
 800529c:	f000 fc59 	bl	8005b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80052a0:	201d      	movs	r0, #29
 80052a2:	f000 fc72 	bl	8005b8a <HAL_NVIC_EnableIRQ>
}
 80052a6:	bf00      	nop
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40023800 	.word	0x40023800
 80052b4:	40000400 	.word	0x40000400

080052b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08a      	sub	sp, #40	; 0x28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c0:	f107 0314 	add.w	r3, r7, #20
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	605a      	str	r2, [r3, #4]
 80052ca:	609a      	str	r2, [r3, #8]
 80052cc:	60da      	str	r2, [r3, #12]
 80052ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a21      	ldr	r2, [pc, #132]	; (800535c <HAL_TIM_MspPostInit+0xa4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d13b      	bne.n	8005352 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052da:	2300      	movs	r3, #0
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	4b20      	ldr	r3, [pc, #128]	; (8005360 <HAL_TIM_MspPostInit+0xa8>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	4a1f      	ldr	r2, [pc, #124]	; (8005360 <HAL_TIM_MspPostInit+0xa8>)
 80052e4:	f043 0302 	orr.w	r3, r3, #2
 80052e8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ea:	4b1d      	ldr	r3, [pc, #116]	; (8005360 <HAL_TIM_MspPostInit+0xa8>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	4b19      	ldr	r3, [pc, #100]	; (8005360 <HAL_TIM_MspPostInit+0xa8>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	4a18      	ldr	r2, [pc, #96]	; (8005360 <HAL_TIM_MspPostInit+0xa8>)
 8005300:	f043 0304 	orr.w	r3, r3, #4
 8005304:	6313      	str	r3, [r2, #48]	; 0x30
 8005306:	4b16      	ldr	r3, [pc, #88]	; (8005360 <HAL_TIM_MspPostInit+0xa8>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005312:	2301      	movs	r3, #1
 8005314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005316:	2302      	movs	r3, #2
 8005318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800531e:	2300      	movs	r3, #0
 8005320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005322:	2302      	movs	r3, #2
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005326:	f107 0314 	add.w	r3, r7, #20
 800532a:	4619      	mov	r1, r3
 800532c:	480d      	ldr	r0, [pc, #52]	; (8005364 <HAL_TIM_MspPostInit+0xac>)
 800532e:	f001 f849 	bl	80063c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005332:	2340      	movs	r3, #64	; 0x40
 8005334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005336:	2302      	movs	r3, #2
 8005338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533a:	2300      	movs	r3, #0
 800533c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800533e:	2300      	movs	r3, #0
 8005340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005342:	2302      	movs	r3, #2
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005346:	f107 0314 	add.w	r3, r7, #20
 800534a:	4619      	mov	r1, r3
 800534c:	4806      	ldr	r0, [pc, #24]	; (8005368 <HAL_TIM_MspPostInit+0xb0>)
 800534e:	f001 f839 	bl	80063c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005352:	bf00      	nop
 8005354:	3728      	adds	r7, #40	; 0x28
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40000400 	.word	0x40000400
 8005360:	40023800 	.word	0x40023800
 8005364:	40020400 	.word	0x40020400
 8005368:	40020800 	.word	0x40020800

0800536c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08a      	sub	sp, #40	; 0x28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005374:	f107 0314 	add.w	r3, r7, #20
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	605a      	str	r2, [r3, #4]
 800537e:	609a      	str	r2, [r3, #8]
 8005380:	60da      	str	r2, [r3, #12]
 8005382:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a5b      	ldr	r2, [pc, #364]	; (80054f8 <HAL_UART_MspInit+0x18c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	f040 80af 	bne.w	80054ee <HAL_UART_MspInit+0x182>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005390:	2300      	movs	r3, #0
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	4b59      	ldr	r3, [pc, #356]	; (80054fc <HAL_UART_MspInit+0x190>)
 8005396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005398:	4a58      	ldr	r2, [pc, #352]	; (80054fc <HAL_UART_MspInit+0x190>)
 800539a:	f043 0310 	orr.w	r3, r3, #16
 800539e:	6453      	str	r3, [r2, #68]	; 0x44
 80053a0:	4b56      	ldr	r3, [pc, #344]	; (80054fc <HAL_UART_MspInit+0x190>)
 80053a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a4:	f003 0310 	and.w	r3, r3, #16
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	4b52      	ldr	r3, [pc, #328]	; (80054fc <HAL_UART_MspInit+0x190>)
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	4a51      	ldr	r2, [pc, #324]	; (80054fc <HAL_UART_MspInit+0x190>)
 80053b6:	f043 0301 	orr.w	r3, r3, #1
 80053ba:	6313      	str	r3, [r2, #48]	; 0x30
 80053bc:	4b4f      	ldr	r3, [pc, #316]	; (80054fc <HAL_UART_MspInit+0x190>)
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053c8:	2300      	movs	r3, #0
 80053ca:	60bb      	str	r3, [r7, #8]
 80053cc:	4b4b      	ldr	r3, [pc, #300]	; (80054fc <HAL_UART_MspInit+0x190>)
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	4a4a      	ldr	r2, [pc, #296]	; (80054fc <HAL_UART_MspInit+0x190>)
 80053d2:	f043 0302 	orr.w	r3, r3, #2
 80053d6:	6313      	str	r3, [r2, #48]	; 0x30
 80053d8:	4b48      	ldr	r3, [pc, #288]	; (80054fc <HAL_UART_MspInit+0x190>)
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	60bb      	str	r3, [r7, #8]
 80053e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80053e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ea:	2302      	movs	r3, #2
 80053ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053f2:	2303      	movs	r3, #3
 80053f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053f6:	2307      	movs	r3, #7
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053fa:	f107 0314 	add.w	r3, r7, #20
 80053fe:	4619      	mov	r1, r3
 8005400:	483f      	ldr	r0, [pc, #252]	; (8005500 <HAL_UART_MspInit+0x194>)
 8005402:	f000 ffdf 	bl	80063c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005406:	2380      	movs	r3, #128	; 0x80
 8005408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800540a:	2302      	movs	r3, #2
 800540c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540e:	2300      	movs	r3, #0
 8005410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005412:	2303      	movs	r3, #3
 8005414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005416:	2307      	movs	r3, #7
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800541a:	f107 0314 	add.w	r3, r7, #20
 800541e:	4619      	mov	r1, r3
 8005420:	4838      	ldr	r0, [pc, #224]	; (8005504 <HAL_UART_MspInit+0x198>)
 8005422:	f000 ffcf 	bl	80063c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005426:	4b38      	ldr	r3, [pc, #224]	; (8005508 <HAL_UART_MspInit+0x19c>)
 8005428:	4a38      	ldr	r2, [pc, #224]	; (800550c <HAL_UART_MspInit+0x1a0>)
 800542a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800542c:	4b36      	ldr	r3, [pc, #216]	; (8005508 <HAL_UART_MspInit+0x19c>)
 800542e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005432:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005434:	4b34      	ldr	r3, [pc, #208]	; (8005508 <HAL_UART_MspInit+0x19c>)
 8005436:	2200      	movs	r2, #0
 8005438:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800543a:	4b33      	ldr	r3, [pc, #204]	; (8005508 <HAL_UART_MspInit+0x19c>)
 800543c:	2200      	movs	r2, #0
 800543e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005440:	4b31      	ldr	r3, [pc, #196]	; (8005508 <HAL_UART_MspInit+0x19c>)
 8005442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005446:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005448:	4b2f      	ldr	r3, [pc, #188]	; (8005508 <HAL_UART_MspInit+0x19c>)
 800544a:	2200      	movs	r2, #0
 800544c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800544e:	4b2e      	ldr	r3, [pc, #184]	; (8005508 <HAL_UART_MspInit+0x19c>)
 8005450:	2200      	movs	r2, #0
 8005452:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005454:	4b2c      	ldr	r3, [pc, #176]	; (8005508 <HAL_UART_MspInit+0x19c>)
 8005456:	2200      	movs	r2, #0
 8005458:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800545a:	4b2b      	ldr	r3, [pc, #172]	; (8005508 <HAL_UART_MspInit+0x19c>)
 800545c:	2200      	movs	r2, #0
 800545e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005460:	4b29      	ldr	r3, [pc, #164]	; (8005508 <HAL_UART_MspInit+0x19c>)
 8005462:	2200      	movs	r2, #0
 8005464:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005466:	4828      	ldr	r0, [pc, #160]	; (8005508 <HAL_UART_MspInit+0x19c>)
 8005468:	f000 fbaa 	bl	8005bc0 <HAL_DMA_Init>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8005472:	f7fc ff41 	bl	80022f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a23      	ldr	r2, [pc, #140]	; (8005508 <HAL_UART_MspInit+0x19c>)
 800547a:	639a      	str	r2, [r3, #56]	; 0x38
 800547c:	4a22      	ldr	r2, [pc, #136]	; (8005508 <HAL_UART_MspInit+0x19c>)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8005482:	4b23      	ldr	r3, [pc, #140]	; (8005510 <HAL_UART_MspInit+0x1a4>)
 8005484:	4a23      	ldr	r2, [pc, #140]	; (8005514 <HAL_UART_MspInit+0x1a8>)
 8005486:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005488:	4b21      	ldr	r3, [pc, #132]	; (8005510 <HAL_UART_MspInit+0x1a4>)
 800548a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800548e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005490:	4b1f      	ldr	r3, [pc, #124]	; (8005510 <HAL_UART_MspInit+0x1a4>)
 8005492:	2240      	movs	r2, #64	; 0x40
 8005494:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005496:	4b1e      	ldr	r3, [pc, #120]	; (8005510 <HAL_UART_MspInit+0x1a4>)
 8005498:	2200      	movs	r2, #0
 800549a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800549c:	4b1c      	ldr	r3, [pc, #112]	; (8005510 <HAL_UART_MspInit+0x1a4>)
 800549e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054a4:	4b1a      	ldr	r3, [pc, #104]	; (8005510 <HAL_UART_MspInit+0x1a4>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054aa:	4b19      	ldr	r3, [pc, #100]	; (8005510 <HAL_UART_MspInit+0x1a4>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80054b0:	4b17      	ldr	r3, [pc, #92]	; (8005510 <HAL_UART_MspInit+0x1a4>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80054b6:	4b16      	ldr	r3, [pc, #88]	; (8005510 <HAL_UART_MspInit+0x1a4>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054bc:	4b14      	ldr	r3, [pc, #80]	; (8005510 <HAL_UART_MspInit+0x1a4>)
 80054be:	2200      	movs	r2, #0
 80054c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80054c2:	4813      	ldr	r0, [pc, #76]	; (8005510 <HAL_UART_MspInit+0x1a4>)
 80054c4:	f000 fb7c 	bl	8005bc0 <HAL_DMA_Init>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 80054ce:	f7fc ff13 	bl	80022f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a0e      	ldr	r2, [pc, #56]	; (8005510 <HAL_UART_MspInit+0x1a4>)
 80054d6:	635a      	str	r2, [r3, #52]	; 0x34
 80054d8:	4a0d      	ldr	r2, [pc, #52]	; (8005510 <HAL_UART_MspInit+0x1a4>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80054de:	2200      	movs	r2, #0
 80054e0:	2100      	movs	r1, #0
 80054e2:	2025      	movs	r0, #37	; 0x25
 80054e4:	f000 fb35 	bl	8005b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80054e8:	2025      	movs	r0, #37	; 0x25
 80054ea:	f000 fb4e 	bl	8005b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80054ee:	bf00      	nop
 80054f0:	3728      	adds	r7, #40	; 0x28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40011000 	.word	0x40011000
 80054fc:	40023800 	.word	0x40023800
 8005500:	40020000 	.word	0x40020000
 8005504:	40020400 	.word	0x40020400
 8005508:	20000450 	.word	0x20000450
 800550c:	40026440 	.word	0x40026440
 8005510:	200004b0 	.word	0x200004b0
 8005514:	400264b8 	.word	0x400264b8

08005518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800551c:	e7fe      	b.n	800551c <NMI_Handler+0x4>

0800551e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800551e:	b480      	push	{r7}
 8005520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005522:	e7fe      	b.n	8005522 <HardFault_Handler+0x4>

08005524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005528:	e7fe      	b.n	8005528 <MemManage_Handler+0x4>

0800552a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800552a:	b480      	push	{r7}
 800552c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800552e:	e7fe      	b.n	800552e <BusFault_Handler+0x4>

08005530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005534:	e7fe      	b.n	8005534 <UsageFault_Handler+0x4>

08005536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005536:	b480      	push	{r7}
 8005538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800553a:	bf00      	nop
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005548:	bf00      	nop
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005552:	b480      	push	{r7}
 8005554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005556:	bf00      	nop
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005564:	f000 f9d6 	bl	8005914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005568:	bf00      	nop
 800556a:	bd80      	pop	{r7, pc}

0800556c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005570:	4802      	ldr	r0, [pc, #8]	; (800557c <TIM2_IRQHandler+0x10>)
 8005572:	f004 fb29 	bl	8009bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005576:	bf00      	nop
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	2000037c 	.word	0x2000037c

08005580 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005584:	4802      	ldr	r0, [pc, #8]	; (8005590 <TIM3_IRQHandler+0x10>)
 8005586:	f004 fb1f 	bl	8009bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800558a:	bf00      	nop
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	200003c4 	.word	0x200003c4

08005594 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005598:	4802      	ldr	r0, [pc, #8]	; (80055a4 <USART1_IRQHandler+0x10>)
 800559a:	f005 fa19 	bl	800a9d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800559e:	bf00      	nop
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	2000040c 	.word	0x2000040c

080055a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_ENCODER_A_Pin);
 80055ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80055b0:	f001 f8d8 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_ENCODER_B_Pin);
 80055b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80055b8:	f001 f8d4 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_ENCODER_A_Pin);
 80055bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80055c0:	f001 f8d0 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_ENCODER_B_Pin);
 80055c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80055c8:	f001 f8cc 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80055cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80055d0:	f001 f8c8 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80055d4:	bf00      	nop
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80055dc:	4802      	ldr	r0, [pc, #8]	; (80055e8 <DMA2_Stream2_IRQHandler+0x10>)
 80055de:	f000 fc87 	bl	8005ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80055e2:	bf00      	nop
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000450 	.word	0x20000450

080055ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80055f0:	4802      	ldr	r0, [pc, #8]	; (80055fc <OTG_FS_IRQHandler+0x10>)
 80055f2:	f001 fb39 	bl	8006c68 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80055f6:	bf00      	nop
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20001b20 	.word	0x20001b20

08005600 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005604:	4802      	ldr	r0, [pc, #8]	; (8005610 <DMA2_Stream7_IRQHandler+0x10>)
 8005606:	f000 fc73 	bl	8005ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800560a:	bf00      	nop
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	200004b0 	.word	0x200004b0

08005614 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
	return 1;
 8005618:	2301      	movs	r3, #1
}
 800561a:	4618      	mov	r0, r3
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <_kill>:

int _kill(int pid, int sig)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800562e:	f009 fdcd 	bl	800f1cc <__errno>
 8005632:	4603      	mov	r3, r0
 8005634:	2216      	movs	r2, #22
 8005636:	601a      	str	r2, [r3, #0]
	return -1;
 8005638:	f04f 33ff 	mov.w	r3, #4294967295
}
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <_exit>:

void _exit (int status)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800564c:	f04f 31ff 	mov.w	r1, #4294967295
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff ffe7 	bl	8005624 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005656:	e7fe      	b.n	8005656 <_exit+0x12>

08005658 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005664:	2300      	movs	r3, #0
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	e00a      	b.n	8005680 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800566a:	f3af 8000 	nop.w
 800566e:	4601      	mov	r1, r0
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	60ba      	str	r2, [r7, #8]
 8005676:	b2ca      	uxtb	r2, r1
 8005678:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	3301      	adds	r3, #1
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	429a      	cmp	r2, r3
 8005686:	dbf0      	blt.n	800566a <_read+0x12>
	}

return len;
 8005688:	687b      	ldr	r3, [r7, #4]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b086      	sub	sp, #24
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	e009      	b.n	80056b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	60ba      	str	r2, [r7, #8]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	3301      	adds	r3, #1
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	429a      	cmp	r2, r3
 80056be:	dbf1      	blt.n	80056a4 <_write+0x12>
	}
	return len;
 80056c0:	687b      	ldr	r3, [r7, #4]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <_close>:

int _close(int file)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
	return -1;
 80056d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056f2:	605a      	str	r2, [r3, #4]
	return 0;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <_isatty>:

int _isatty(int file)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
	return 1;
 800570a:	2301      	movs	r3, #1
}
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
	return 0;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
	...

08005734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800573c:	4a14      	ldr	r2, [pc, #80]	; (8005790 <_sbrk+0x5c>)
 800573e:	4b15      	ldr	r3, [pc, #84]	; (8005794 <_sbrk+0x60>)
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005748:	4b13      	ldr	r3, [pc, #76]	; (8005798 <_sbrk+0x64>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005750:	4b11      	ldr	r3, [pc, #68]	; (8005798 <_sbrk+0x64>)
 8005752:	4a12      	ldr	r2, [pc, #72]	; (800579c <_sbrk+0x68>)
 8005754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005756:	4b10      	ldr	r3, [pc, #64]	; (8005798 <_sbrk+0x64>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4413      	add	r3, r2
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	429a      	cmp	r2, r3
 8005762:	d207      	bcs.n	8005774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005764:	f009 fd32 	bl	800f1cc <__errno>
 8005768:	4603      	mov	r3, r0
 800576a:	220c      	movs	r2, #12
 800576c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800576e:	f04f 33ff 	mov.w	r3, #4294967295
 8005772:	e009      	b.n	8005788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005774:	4b08      	ldr	r3, [pc, #32]	; (8005798 <_sbrk+0x64>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <_sbrk+0x64>)
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4413      	add	r3, r2
 8005782:	4a05      	ldr	r2, [pc, #20]	; (8005798 <_sbrk+0x64>)
 8005784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005786:	68fb      	ldr	r3, [r7, #12]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	20020000 	.word	0x20020000
 8005794:	00000400 	.word	0x00000400
 8005798:	200016f0 	.word	0x200016f0
 800579c:	20001e28 	.word	0x20001e28

080057a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80057a4:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <SystemInit+0x20>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057aa:	4a05      	ldr	r2, [pc, #20]	; (80057c0 <SystemInit+0x20>)
 80057ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80057b4:	bf00      	nop
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	e000ed00 	.word	0xe000ed00

080057c4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	0a5a      	lsrs	r2, r3, #9
 80057d4:	490f      	ldr	r1, [pc, #60]	; (8005814 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80057d6:	fba1 1202 	umull	r1, r2, r1, r2
 80057da:	09d2      	lsrs	r2, r2, #7
 80057dc:	490e      	ldr	r1, [pc, #56]	; (8005818 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80057de:	fb01 f202 	mul.w	r2, r1, r2
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	0a5b      	lsrs	r3, r3, #9
 80057ec:	4a09      	ldr	r2, [pc, #36]	; (8005814 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	09db      	lsrs	r3, r3, #7
 80057f4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	441a      	add	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	601a      	str	r2, [r3, #0]
}
 8005808:	bf00      	nop
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	00044b83 	.word	0x00044b83
 8005818:	3b9aca00 	.word	0x3b9aca00

0800581c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800581c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005854 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005820:	480d      	ldr	r0, [pc, #52]	; (8005858 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005822:	490e      	ldr	r1, [pc, #56]	; (800585c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005824:	4a0e      	ldr	r2, [pc, #56]	; (8005860 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005828:	e002      	b.n	8005830 <LoopCopyDataInit>

0800582a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800582a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800582c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800582e:	3304      	adds	r3, #4

08005830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005834:	d3f9      	bcc.n	800582a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005836:	4a0b      	ldr	r2, [pc, #44]	; (8005864 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005838:	4c0b      	ldr	r4, [pc, #44]	; (8005868 <LoopFillZerobss+0x26>)
  movs r3, #0
 800583a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800583c:	e001      	b.n	8005842 <LoopFillZerobss>

0800583e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800583e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005840:	3204      	adds	r2, #4

08005842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005844:	d3fb      	bcc.n	800583e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005846:	f7ff ffab 	bl	80057a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800584a:	f009 fcc5 	bl	800f1d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800584e:	f7fc f921 	bl	8001a94 <main>
  bx  lr    
 8005852:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005854:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800585c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8005860:	08012400 	.word	0x08012400
  ldr r2, =_sbss
 8005864:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8005868:	20001e24 	.word	0x20001e24

0800586c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800586c:	e7fe      	b.n	800586c <ADC_IRQHandler>
	...

08005870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005874:	4b0e      	ldr	r3, [pc, #56]	; (80058b0 <HAL_Init+0x40>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a0d      	ldr	r2, [pc, #52]	; (80058b0 <HAL_Init+0x40>)
 800587a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800587e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <HAL_Init+0x40>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a0a      	ldr	r2, [pc, #40]	; (80058b0 <HAL_Init+0x40>)
 8005886:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800588a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800588c:	4b08      	ldr	r3, [pc, #32]	; (80058b0 <HAL_Init+0x40>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a07      	ldr	r2, [pc, #28]	; (80058b0 <HAL_Init+0x40>)
 8005892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005896:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005898:	2003      	movs	r0, #3
 800589a:	f000 f94f 	bl	8005b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800589e:	2000      	movs	r0, #0
 80058a0:	f000 f808 	bl	80058b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058a4:	f7ff fb3e 	bl	8004f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40023c00 	.word	0x40023c00

080058b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058bc:	4b12      	ldr	r3, [pc, #72]	; (8005908 <HAL_InitTick+0x54>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	4b12      	ldr	r3, [pc, #72]	; (800590c <HAL_InitTick+0x58>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	4619      	mov	r1, r3
 80058c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80058ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 f967 	bl	8005ba6 <HAL_SYSTICK_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e00e      	b.n	8005900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b0f      	cmp	r3, #15
 80058e6:	d80a      	bhi.n	80058fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058e8:	2200      	movs	r2, #0
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295
 80058f0:	f000 f92f 	bl	8005b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058f4:	4a06      	ldr	r2, [pc, #24]	; (8005910 <HAL_InitTick+0x5c>)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	e000      	b.n	8005900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20000018 	.word	0x20000018
 800590c:	20000020 	.word	0x20000020
 8005910:	2000001c 	.word	0x2000001c

08005914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005918:	4b06      	ldr	r3, [pc, #24]	; (8005934 <HAL_IncTick+0x20>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <HAL_IncTick+0x24>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4413      	add	r3, r2
 8005924:	4a04      	ldr	r2, [pc, #16]	; (8005938 <HAL_IncTick+0x24>)
 8005926:	6013      	str	r3, [r2, #0]
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	20000020 	.word	0x20000020
 8005938:	20001744 	.word	0x20001744

0800593c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  return uwTick;
 8005940:	4b03      	ldr	r3, [pc, #12]	; (8005950 <HAL_GetTick+0x14>)
 8005942:	681b      	ldr	r3, [r3, #0]
}
 8005944:	4618      	mov	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20001744 	.word	0x20001744

08005954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800595c:	f7ff ffee 	bl	800593c <HAL_GetTick>
 8005960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596c:	d005      	beq.n	800597a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800596e:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <HAL_Delay+0x44>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4413      	add	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800597a:	bf00      	nop
 800597c:	f7ff ffde 	bl	800593c <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	429a      	cmp	r2, r3
 800598a:	d8f7      	bhi.n	800597c <HAL_Delay+0x28>
  {
  }
}
 800598c:	bf00      	nop
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000020 	.word	0x20000020

0800599c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059ac:	4b0c      	ldr	r3, [pc, #48]	; (80059e0 <__NVIC_SetPriorityGrouping+0x44>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059b8:	4013      	ands	r3, r2
 80059ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059ce:	4a04      	ldr	r2, [pc, #16]	; (80059e0 <__NVIC_SetPriorityGrouping+0x44>)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	60d3      	str	r3, [r2, #12]
}
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	e000ed00 	.word	0xe000ed00

080059e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059e8:	4b04      	ldr	r3, [pc, #16]	; (80059fc <__NVIC_GetPriorityGrouping+0x18>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	0a1b      	lsrs	r3, r3, #8
 80059ee:	f003 0307 	and.w	r3, r3, #7
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	e000ed00 	.word	0xe000ed00

08005a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	db0b      	blt.n	8005a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	f003 021f 	and.w	r2, r3, #31
 8005a18:	4907      	ldr	r1, [pc, #28]	; (8005a38 <__NVIC_EnableIRQ+0x38>)
 8005a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	2001      	movs	r0, #1
 8005a22:	fa00 f202 	lsl.w	r2, r0, r2
 8005a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	e000e100 	.word	0xe000e100

08005a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	4603      	mov	r3, r0
 8005a44:	6039      	str	r1, [r7, #0]
 8005a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	db0a      	blt.n	8005a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	490c      	ldr	r1, [pc, #48]	; (8005a88 <__NVIC_SetPriority+0x4c>)
 8005a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a5a:	0112      	lsls	r2, r2, #4
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	440b      	add	r3, r1
 8005a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a64:	e00a      	b.n	8005a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	4908      	ldr	r1, [pc, #32]	; (8005a8c <__NVIC_SetPriority+0x50>)
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	3b04      	subs	r3, #4
 8005a74:	0112      	lsls	r2, r2, #4
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	440b      	add	r3, r1
 8005a7a:	761a      	strb	r2, [r3, #24]
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	e000e100 	.word	0xe000e100
 8005a8c:	e000ed00 	.word	0xe000ed00

08005a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b089      	sub	sp, #36	; 0x24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f1c3 0307 	rsb	r3, r3, #7
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	bf28      	it	cs
 8005aae:	2304      	movcs	r3, #4
 8005ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	2b06      	cmp	r3, #6
 8005ab8:	d902      	bls.n	8005ac0 <NVIC_EncodePriority+0x30>
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	3b03      	subs	r3, #3
 8005abe:	e000      	b.n	8005ac2 <NVIC_EncodePriority+0x32>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	43da      	mvns	r2, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	401a      	ands	r2, r3
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae2:	43d9      	mvns	r1, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ae8:	4313      	orrs	r3, r2
         );
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3724      	adds	r7, #36	; 0x24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
	...

08005af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b08:	d301      	bcc.n	8005b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e00f      	b.n	8005b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b0e:	4a0a      	ldr	r2, [pc, #40]	; (8005b38 <SysTick_Config+0x40>)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b16:	210f      	movs	r1, #15
 8005b18:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1c:	f7ff ff8e 	bl	8005a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b20:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <SysTick_Config+0x40>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b26:	4b04      	ldr	r3, [pc, #16]	; (8005b38 <SysTick_Config+0x40>)
 8005b28:	2207      	movs	r2, #7
 8005b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	e000e010 	.word	0xe000e010

08005b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7ff ff29 	bl	800599c <__NVIC_SetPriorityGrouping>
}
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b086      	sub	sp, #24
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	4603      	mov	r3, r0
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	607a      	str	r2, [r7, #4]
 8005b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b64:	f7ff ff3e 	bl	80059e4 <__NVIC_GetPriorityGrouping>
 8005b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	68b9      	ldr	r1, [r7, #8]
 8005b6e:	6978      	ldr	r0, [r7, #20]
 8005b70:	f7ff ff8e 	bl	8005a90 <NVIC_EncodePriority>
 8005b74:	4602      	mov	r2, r0
 8005b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff ff5d 	bl	8005a3c <__NVIC_SetPriority>
}
 8005b82:	bf00      	nop
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	4603      	mov	r3, r0
 8005b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff ff31 	bl	8005a00 <__NVIC_EnableIRQ>
}
 8005b9e:	bf00      	nop
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff ffa2 	bl	8005af8 <SysTick_Config>
 8005bb4:	4603      	mov	r3, r0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005bcc:	f7ff feb6 	bl	800593c <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e099      	b.n	8005d10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0201 	bic.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bfc:	e00f      	b.n	8005c1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bfe:	f7ff fe9d 	bl	800593c <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b05      	cmp	r3, #5
 8005c0a:	d908      	bls.n	8005c1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2203      	movs	r2, #3
 8005c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e078      	b.n	8005d10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e8      	bne.n	8005bfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4b38      	ldr	r3, [pc, #224]	; (8005d18 <HAL_DMA_Init+0x158>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d107      	bne.n	8005c88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	4313      	orrs	r3, r2
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f023 0307 	bic.w	r3, r3, #7
 8005c9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d117      	bne.n	8005ce2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00e      	beq.n	8005ce2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fb01 	bl	80062cc <DMA_CheckFifoParam>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d008      	beq.n	8005ce2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2240      	movs	r2, #64	; 0x40
 8005cd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e016      	b.n	8005d10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fab8 	bl	8006260 <DMA_CalcBaseAndBitshift>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf8:	223f      	movs	r2, #63	; 0x3f
 8005cfa:	409a      	lsls	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	f010803f 	.word	0xf010803f

08005d1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_DMA_Start_IT+0x26>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e040      	b.n	8005dc4 <HAL_DMA_Start_IT+0xa8>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d12f      	bne.n	8005db6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	68b9      	ldr	r1, [r7, #8]
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f000 fa4a 	bl	8006204 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d74:	223f      	movs	r2, #63	; 0x3f
 8005d76:	409a      	lsls	r2, r3
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0216 	orr.w	r2, r2, #22
 8005d8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0208 	orr.w	r2, r2, #8
 8005da2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	e005      	b.n	8005dc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005dda:	f7ff fdaf 	bl	800593c <HAL_GetTick>
 8005dde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d008      	beq.n	8005dfe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2280      	movs	r2, #128	; 0x80
 8005df0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e052      	b.n	8005ea4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0216 	bic.w	r2, r2, #22
 8005e0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695a      	ldr	r2, [r3, #20]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <HAL_DMA_Abort+0x62>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d007      	beq.n	8005e3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0208 	bic.w	r2, r2, #8
 8005e3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0201 	bic.w	r2, r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e4e:	e013      	b.n	8005e78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e50:	f7ff fd74 	bl	800593c <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b05      	cmp	r3, #5
 8005e5c:	d90c      	bls.n	8005e78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2203      	movs	r2, #3
 8005e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e015      	b.n	8005ea4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e4      	bne.n	8005e50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8a:	223f      	movs	r2, #63	; 0x3f
 8005e8c:	409a      	lsls	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d004      	beq.n	8005eca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2280      	movs	r2, #128	; 0x80
 8005ec4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e00c      	b.n	8005ee4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2205      	movs	r2, #5
 8005ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0201 	bic.w	r2, r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005efc:	4b8e      	ldr	r3, [pc, #568]	; (8006138 <HAL_DMA_IRQHandler+0x248>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a8e      	ldr	r2, [pc, #568]	; (800613c <HAL_DMA_IRQHandler+0x24c>)
 8005f02:	fba2 2303 	umull	r2, r3, r2, r3
 8005f06:	0a9b      	lsrs	r3, r3, #10
 8005f08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1a:	2208      	movs	r2, #8
 8005f1c:	409a      	lsls	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4013      	ands	r3, r2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d01a      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d013      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0204 	bic.w	r2, r2, #4
 8005f42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f48:	2208      	movs	r2, #8
 8005f4a:	409a      	lsls	r2, r3
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f54:	f043 0201 	orr.w	r2, r3, #1
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f60:	2201      	movs	r2, #1
 8005f62:	409a      	lsls	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4013      	ands	r3, r2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d012      	beq.n	8005f92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00b      	beq.n	8005f92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f7e:	2201      	movs	r2, #1
 8005f80:	409a      	lsls	r2, r3
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8a:	f043 0202 	orr.w	r2, r3, #2
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f96:	2204      	movs	r2, #4
 8005f98:	409a      	lsls	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d012      	beq.n	8005fc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00b      	beq.n	8005fc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb4:	2204      	movs	r2, #4
 8005fb6:	409a      	lsls	r2, r3
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc0:	f043 0204 	orr.w	r2, r3, #4
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fcc:	2210      	movs	r2, #16
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d043      	beq.n	8006060 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d03c      	beq.n	8006060 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fea:	2210      	movs	r2, #16
 8005fec:	409a      	lsls	r2, r3
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d018      	beq.n	8006032 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d108      	bne.n	8006020 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	d024      	beq.n	8006060 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	4798      	blx	r3
 800601e:	e01f      	b.n	8006060 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01b      	beq.n	8006060 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	4798      	blx	r3
 8006030:	e016      	b.n	8006060 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603c:	2b00      	cmp	r3, #0
 800603e:	d107      	bne.n	8006050 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0208 	bic.w	r2, r2, #8
 800604e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006064:	2220      	movs	r2, #32
 8006066:	409a      	lsls	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4013      	ands	r3, r2
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 808f 	beq.w	8006190 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8087 	beq.w	8006190 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006086:	2220      	movs	r2, #32
 8006088:	409a      	lsls	r2, r3
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b05      	cmp	r3, #5
 8006098:	d136      	bne.n	8006108 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0216 	bic.w	r2, r2, #22
 80060a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	695a      	ldr	r2, [r3, #20]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d103      	bne.n	80060ca <HAL_DMA_IRQHandler+0x1da>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d007      	beq.n	80060da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0208 	bic.w	r2, r2, #8
 80060d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060de:	223f      	movs	r2, #63	; 0x3f
 80060e0:	409a      	lsls	r2, r3
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d07e      	beq.n	80061fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	4798      	blx	r3
        }
        return;
 8006106:	e079      	b.n	80061fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d01d      	beq.n	8006152 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10d      	bne.n	8006140 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006128:	2b00      	cmp	r3, #0
 800612a:	d031      	beq.n	8006190 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
 8006134:	e02c      	b.n	8006190 <HAL_DMA_IRQHandler+0x2a0>
 8006136:	bf00      	nop
 8006138:	20000018 	.word	0x20000018
 800613c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006144:	2b00      	cmp	r3, #0
 8006146:	d023      	beq.n	8006190 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	4798      	blx	r3
 8006150:	e01e      	b.n	8006190 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10f      	bne.n	8006180 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0210 	bic.w	r2, r2, #16
 800616e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006194:	2b00      	cmp	r3, #0
 8006196:	d032      	beq.n	80061fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d022      	beq.n	80061ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2205      	movs	r2, #5
 80061a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0201 	bic.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	3301      	adds	r3, #1
 80061c0:	60bb      	str	r3, [r7, #8]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d307      	bcc.n	80061d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f2      	bne.n	80061bc <HAL_DMA_IRQHandler+0x2cc>
 80061d6:	e000      	b.n	80061da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80061d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	4798      	blx	r3
 80061fa:	e000      	b.n	80061fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80061fc:	bf00      	nop
    }
  }
}
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006220:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	2b40      	cmp	r3, #64	; 0x40
 8006230:	d108      	bne.n	8006244 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006242:	e007      	b.n	8006254 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	60da      	str	r2, [r3, #12]
}
 8006254:	bf00      	nop
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	3b10      	subs	r3, #16
 8006270:	4a14      	ldr	r2, [pc, #80]	; (80062c4 <DMA_CalcBaseAndBitshift+0x64>)
 8006272:	fba2 2303 	umull	r2, r3, r2, r3
 8006276:	091b      	lsrs	r3, r3, #4
 8006278:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800627a:	4a13      	ldr	r2, [pc, #76]	; (80062c8 <DMA_CalcBaseAndBitshift+0x68>)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4413      	add	r3, r2
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b03      	cmp	r3, #3
 800628c:	d909      	bls.n	80062a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006296:	f023 0303 	bic.w	r3, r3, #3
 800629a:	1d1a      	adds	r2, r3, #4
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	659a      	str	r2, [r3, #88]	; 0x58
 80062a0:	e007      	b.n	80062b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80062aa:	f023 0303 	bic.w	r3, r3, #3
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	aaaaaaab 	.word	0xaaaaaaab
 80062c8:	08012008 	.word	0x08012008

080062cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d11f      	bne.n	8006326 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d856      	bhi.n	800639a <DMA_CheckFifoParam+0xce>
 80062ec:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <DMA_CheckFifoParam+0x28>)
 80062ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f2:	bf00      	nop
 80062f4:	08006305 	.word	0x08006305
 80062f8:	08006317 	.word	0x08006317
 80062fc:	08006305 	.word	0x08006305
 8006300:	0800639b 	.word	0x0800639b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d046      	beq.n	800639e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006314:	e043      	b.n	800639e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800631e:	d140      	bne.n	80063a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006324:	e03d      	b.n	80063a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800632e:	d121      	bne.n	8006374 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b03      	cmp	r3, #3
 8006334:	d837      	bhi.n	80063a6 <DMA_CheckFifoParam+0xda>
 8006336:	a201      	add	r2, pc, #4	; (adr r2, 800633c <DMA_CheckFifoParam+0x70>)
 8006338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633c:	0800634d 	.word	0x0800634d
 8006340:	08006353 	.word	0x08006353
 8006344:	0800634d 	.word	0x0800634d
 8006348:	08006365 	.word	0x08006365
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	73fb      	strb	r3, [r7, #15]
      break;
 8006350:	e030      	b.n	80063b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d025      	beq.n	80063aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006362:	e022      	b.n	80063aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800636c:	d11f      	bne.n	80063ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006372:	e01c      	b.n	80063ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b02      	cmp	r3, #2
 8006378:	d903      	bls.n	8006382 <DMA_CheckFifoParam+0xb6>
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b03      	cmp	r3, #3
 800637e:	d003      	beq.n	8006388 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006380:	e018      	b.n	80063b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	73fb      	strb	r3, [r7, #15]
      break;
 8006386:	e015      	b.n	80063b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00e      	beq.n	80063b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	73fb      	strb	r3, [r7, #15]
      break;
 8006398:	e00b      	b.n	80063b2 <DMA_CheckFifoParam+0xe6>
      break;
 800639a:	bf00      	nop
 800639c:	e00a      	b.n	80063b4 <DMA_CheckFifoParam+0xe8>
      break;
 800639e:	bf00      	nop
 80063a0:	e008      	b.n	80063b4 <DMA_CheckFifoParam+0xe8>
      break;
 80063a2:	bf00      	nop
 80063a4:	e006      	b.n	80063b4 <DMA_CheckFifoParam+0xe8>
      break;
 80063a6:	bf00      	nop
 80063a8:	e004      	b.n	80063b4 <DMA_CheckFifoParam+0xe8>
      break;
 80063aa:	bf00      	nop
 80063ac:	e002      	b.n	80063b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80063ae:	bf00      	nop
 80063b0:	e000      	b.n	80063b4 <DMA_CheckFifoParam+0xe8>
      break;
 80063b2:	bf00      	nop
    }
  } 
  
  return status; 
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop

080063c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b089      	sub	sp, #36	; 0x24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063da:	2300      	movs	r3, #0
 80063dc:	61fb      	str	r3, [r7, #28]
 80063de:	e159      	b.n	8006694 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80063e0:	2201      	movs	r2, #1
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4013      	ands	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	f040 8148 	bne.w	800668e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	2b01      	cmp	r3, #1
 8006408:	d005      	beq.n	8006416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006412:	2b02      	cmp	r3, #2
 8006414:	d130      	bne.n	8006478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	2203      	movs	r2, #3
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	43db      	mvns	r3, r3
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	4013      	ands	r3, r2
 800642c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	fa02 f303 	lsl.w	r3, r2, r3
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	4313      	orrs	r3, r2
 800643e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800644c:	2201      	movs	r2, #1
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	43db      	mvns	r3, r3
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	4013      	ands	r3, r2
 800645a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	091b      	lsrs	r3, r3, #4
 8006462:	f003 0201 	and.w	r2, r3, #1
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	4313      	orrs	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f003 0303 	and.w	r3, r3, #3
 8006480:	2b03      	cmp	r3, #3
 8006482:	d017      	beq.n	80064b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	2203      	movs	r2, #3
 8006490:	fa02 f303 	lsl.w	r3, r2, r3
 8006494:	43db      	mvns	r3, r3
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	4013      	ands	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	fa02 f303 	lsl.w	r3, r2, r3
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f003 0303 	and.w	r3, r3, #3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d123      	bne.n	8006508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	08da      	lsrs	r2, r3, #3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3208      	adds	r2, #8
 80064c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	220f      	movs	r2, #15
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	43db      	mvns	r3, r3
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	4013      	ands	r3, r2
 80064e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	691a      	ldr	r2, [r3, #16]
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	08da      	lsrs	r2, r3, #3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	3208      	adds	r2, #8
 8006502:	69b9      	ldr	r1, [r7, #24]
 8006504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	2203      	movs	r2, #3
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	43db      	mvns	r3, r3
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	4013      	ands	r3, r2
 800651e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f003 0203 	and.w	r2, r3, #3
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	fa02 f303 	lsl.w	r3, r2, r3
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	4313      	orrs	r3, r2
 8006534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 80a2 	beq.w	800668e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	4b57      	ldr	r3, [pc, #348]	; (80066ac <HAL_GPIO_Init+0x2e8>)
 8006550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006552:	4a56      	ldr	r2, [pc, #344]	; (80066ac <HAL_GPIO_Init+0x2e8>)
 8006554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006558:	6453      	str	r3, [r2, #68]	; 0x44
 800655a:	4b54      	ldr	r3, [pc, #336]	; (80066ac <HAL_GPIO_Init+0x2e8>)
 800655c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006566:	4a52      	ldr	r2, [pc, #328]	; (80066b0 <HAL_GPIO_Init+0x2ec>)
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	089b      	lsrs	r3, r3, #2
 800656c:	3302      	adds	r3, #2
 800656e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	220f      	movs	r2, #15
 800657e:	fa02 f303 	lsl.w	r3, r2, r3
 8006582:	43db      	mvns	r3, r3
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	4013      	ands	r3, r2
 8006588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a49      	ldr	r2, [pc, #292]	; (80066b4 <HAL_GPIO_Init+0x2f0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d019      	beq.n	80065c6 <HAL_GPIO_Init+0x202>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a48      	ldr	r2, [pc, #288]	; (80066b8 <HAL_GPIO_Init+0x2f4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d013      	beq.n	80065c2 <HAL_GPIO_Init+0x1fe>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a47      	ldr	r2, [pc, #284]	; (80066bc <HAL_GPIO_Init+0x2f8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00d      	beq.n	80065be <HAL_GPIO_Init+0x1fa>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a46      	ldr	r2, [pc, #280]	; (80066c0 <HAL_GPIO_Init+0x2fc>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d007      	beq.n	80065ba <HAL_GPIO_Init+0x1f6>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a45      	ldr	r2, [pc, #276]	; (80066c4 <HAL_GPIO_Init+0x300>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d101      	bne.n	80065b6 <HAL_GPIO_Init+0x1f2>
 80065b2:	2304      	movs	r3, #4
 80065b4:	e008      	b.n	80065c8 <HAL_GPIO_Init+0x204>
 80065b6:	2307      	movs	r3, #7
 80065b8:	e006      	b.n	80065c8 <HAL_GPIO_Init+0x204>
 80065ba:	2303      	movs	r3, #3
 80065bc:	e004      	b.n	80065c8 <HAL_GPIO_Init+0x204>
 80065be:	2302      	movs	r3, #2
 80065c0:	e002      	b.n	80065c8 <HAL_GPIO_Init+0x204>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <HAL_GPIO_Init+0x204>
 80065c6:	2300      	movs	r3, #0
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	f002 0203 	and.w	r2, r2, #3
 80065ce:	0092      	lsls	r2, r2, #2
 80065d0:	4093      	lsls	r3, r2
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065d8:	4935      	ldr	r1, [pc, #212]	; (80066b0 <HAL_GPIO_Init+0x2ec>)
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	089b      	lsrs	r3, r3, #2
 80065de:	3302      	adds	r3, #2
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80065e6:	4b38      	ldr	r3, [pc, #224]	; (80066c8 <HAL_GPIO_Init+0x304>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	43db      	mvns	r3, r3
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	4013      	ands	r3, r2
 80065f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	4313      	orrs	r3, r2
 8006608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800660a:	4a2f      	ldr	r2, [pc, #188]	; (80066c8 <HAL_GPIO_Init+0x304>)
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006610:	4b2d      	ldr	r3, [pc, #180]	; (80066c8 <HAL_GPIO_Init+0x304>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	43db      	mvns	r3, r3
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	4013      	ands	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006634:	4a24      	ldr	r2, [pc, #144]	; (80066c8 <HAL_GPIO_Init+0x304>)
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800663a:	4b23      	ldr	r3, [pc, #140]	; (80066c8 <HAL_GPIO_Init+0x304>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	43db      	mvns	r3, r3
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	4013      	ands	r3, r2
 8006648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800665e:	4a1a      	ldr	r2, [pc, #104]	; (80066c8 <HAL_GPIO_Init+0x304>)
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006664:	4b18      	ldr	r3, [pc, #96]	; (80066c8 <HAL_GPIO_Init+0x304>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	43db      	mvns	r3, r3
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	4013      	ands	r3, r2
 8006672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006688:	4a0f      	ldr	r2, [pc, #60]	; (80066c8 <HAL_GPIO_Init+0x304>)
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	3301      	adds	r3, #1
 8006692:	61fb      	str	r3, [r7, #28]
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2b0f      	cmp	r3, #15
 8006698:	f67f aea2 	bls.w	80063e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	3724      	adds	r7, #36	; 0x24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	40023800 	.word	0x40023800
 80066b0:	40013800 	.word	0x40013800
 80066b4:	40020000 	.word	0x40020000
 80066b8:	40020400 	.word	0x40020400
 80066bc:	40020800 	.word	0x40020800
 80066c0:	40020c00 	.word	0x40020c00
 80066c4:	40021000 	.word	0x40021000
 80066c8:	40013c00 	.word	0x40013c00

080066cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691a      	ldr	r2, [r3, #16]
 80066dc:	887b      	ldrh	r3, [r7, #2]
 80066de:	4013      	ands	r3, r2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80066e4:	2301      	movs	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
 80066e8:	e001      	b.n	80066ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80066ea:	2300      	movs	r3, #0
 80066ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	460b      	mov	r3, r1
 8006706:	807b      	strh	r3, [r7, #2]
 8006708:	4613      	mov	r3, r2
 800670a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800670c:	787b      	ldrb	r3, [r7, #1]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006712:	887a      	ldrh	r2, [r7, #2]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006718:	e003      	b.n	8006722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800671a:	887b      	ldrh	r3, [r7, #2]
 800671c:	041a      	lsls	r2, r3, #16
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	619a      	str	r2, [r3, #24]
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800672e:	b480      	push	{r7}
 8006730:	b085      	sub	sp, #20
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	460b      	mov	r3, r1
 8006738:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006740:	887a      	ldrh	r2, [r7, #2]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4013      	ands	r3, r2
 8006746:	041a      	lsls	r2, r3, #16
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	43d9      	mvns	r1, r3
 800674c:	887b      	ldrh	r3, [r7, #2]
 800674e:	400b      	ands	r3, r1
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	619a      	str	r2, [r3, #24]
}
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
	...

08006764 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800676e:	4b08      	ldr	r3, [pc, #32]	; (8006790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006770:	695a      	ldr	r2, [r3, #20]
 8006772:	88fb      	ldrh	r3, [r7, #6]
 8006774:	4013      	ands	r3, r2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d006      	beq.n	8006788 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800677a:	4a05      	ldr	r2, [pc, #20]	; (8006790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800677c:	88fb      	ldrh	r3, [r7, #6]
 800677e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	4618      	mov	r0, r3
 8006784:	f7fa fbea 	bl	8000f5c <HAL_GPIO_EXTI_Callback>
  }
}
 8006788:	bf00      	nop
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	40013c00 	.word	0x40013c00

08006794 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006796:	b08f      	sub	sp, #60	; 0x3c
 8006798:	af0a      	add	r7, sp, #40	; 0x28
 800679a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e054      	b.n	8006850 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f008 fa17 	bl	800ebf4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2203      	movs	r2, #3
 80067ca:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d102      	bne.n	80067e0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f005 fa45 	bl	800bc74 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	603b      	str	r3, [r7, #0]
 80067f0:	687e      	ldr	r6, [r7, #4]
 80067f2:	466d      	mov	r5, sp
 80067f4:	f106 0410 	add.w	r4, r6, #16
 80067f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006800:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006804:	e885 0003 	stmia.w	r5, {r0, r1}
 8006808:	1d33      	adds	r3, r6, #4
 800680a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800680c:	6838      	ldr	r0, [r7, #0]
 800680e:	f005 f9bf 	bl	800bb90 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2101      	movs	r1, #1
 8006818:	4618      	mov	r0, r3
 800681a:	f005 fa3c 	bl	800bc96 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	687e      	ldr	r6, [r7, #4]
 8006826:	466d      	mov	r5, sp
 8006828:	f106 0410 	add.w	r4, r6, #16
 800682c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800682e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006834:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006838:	e885 0003 	stmia.w	r5, {r0, r1}
 800683c:	1d33      	adds	r3, r6, #4
 800683e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006840:	6838      	ldr	r0, [r7, #0]
 8006842:	f005 fbc5 	bl	800bfd0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006858 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8006858:	b590      	push	{r4, r7, lr}
 800685a:	b089      	sub	sp, #36	; 0x24
 800685c:	af04      	add	r7, sp, #16
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	4608      	mov	r0, r1
 8006862:	4611      	mov	r1, r2
 8006864:	461a      	mov	r2, r3
 8006866:	4603      	mov	r3, r0
 8006868:	70fb      	strb	r3, [r7, #3]
 800686a:	460b      	mov	r3, r1
 800686c:	70bb      	strb	r3, [r7, #2]
 800686e:	4613      	mov	r3, r2
 8006870:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_HCD_HC_Init+0x28>
 800687c:	2302      	movs	r3, #2
 800687e:	e076      	b.n	800696e <HAL_HCD_HC_Init+0x116>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	212c      	movs	r1, #44	; 0x2c
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	4413      	add	r3, r2
 8006894:	333d      	adds	r3, #61	; 0x3d
 8006896:	2200      	movs	r2, #0
 8006898:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	212c      	movs	r1, #44	; 0x2c
 80068a0:	fb01 f303 	mul.w	r3, r1, r3
 80068a4:	4413      	add	r3, r2
 80068a6:	3338      	adds	r3, #56	; 0x38
 80068a8:	787a      	ldrb	r2, [r7, #1]
 80068aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	212c      	movs	r1, #44	; 0x2c
 80068b2:	fb01 f303 	mul.w	r3, r1, r3
 80068b6:	4413      	add	r3, r2
 80068b8:	3340      	adds	r3, #64	; 0x40
 80068ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80068bc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80068be:	78fb      	ldrb	r3, [r7, #3]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	212c      	movs	r1, #44	; 0x2c
 80068c4:	fb01 f303 	mul.w	r3, r1, r3
 80068c8:	4413      	add	r3, r2
 80068ca:	3339      	adds	r3, #57	; 0x39
 80068cc:	78fa      	ldrb	r2, [r7, #3]
 80068ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	212c      	movs	r1, #44	; 0x2c
 80068d6:	fb01 f303 	mul.w	r3, r1, r3
 80068da:	4413      	add	r3, r2
 80068dc:	333f      	adds	r3, #63	; 0x3f
 80068de:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80068e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80068e4:	78fb      	ldrb	r3, [r7, #3]
 80068e6:	78ba      	ldrb	r2, [r7, #2]
 80068e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068ec:	b2d0      	uxtb	r0, r2
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	212c      	movs	r1, #44	; 0x2c
 80068f2:	fb01 f303 	mul.w	r3, r1, r3
 80068f6:	4413      	add	r3, r2
 80068f8:	333a      	adds	r3, #58	; 0x3a
 80068fa:	4602      	mov	r2, r0
 80068fc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80068fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006902:	2b00      	cmp	r3, #0
 8006904:	da09      	bge.n	800691a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006906:	78fb      	ldrb	r3, [r7, #3]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	212c      	movs	r1, #44	; 0x2c
 800690c:	fb01 f303 	mul.w	r3, r1, r3
 8006910:	4413      	add	r3, r2
 8006912:	333b      	adds	r3, #59	; 0x3b
 8006914:	2201      	movs	r2, #1
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	e008      	b.n	800692c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	212c      	movs	r1, #44	; 0x2c
 8006920:	fb01 f303 	mul.w	r3, r1, r3
 8006924:	4413      	add	r3, r2
 8006926:	333b      	adds	r3, #59	; 0x3b
 8006928:	2200      	movs	r2, #0
 800692a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	212c      	movs	r1, #44	; 0x2c
 8006932:	fb01 f303 	mul.w	r3, r1, r3
 8006936:	4413      	add	r3, r2
 8006938:	333c      	adds	r3, #60	; 0x3c
 800693a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800693e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6818      	ldr	r0, [r3, #0]
 8006944:	787c      	ldrb	r4, [r7, #1]
 8006946:	78ba      	ldrb	r2, [r7, #2]
 8006948:	78f9      	ldrb	r1, [r7, #3]
 800694a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800694c:	9302      	str	r3, [sp, #8]
 800694e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006952:	9301      	str	r3, [sp, #4]
 8006954:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	4623      	mov	r3, r4
 800695c:	f005 fcbe 	bl	800c2dc <USB_HC_Init>
 8006960:	4603      	mov	r3, r0
 8006962:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800696c:	7bfb      	ldrb	r3, [r7, #15]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	bd90      	pop	{r4, r7, pc}

08006976 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	460b      	mov	r3, r1
 8006980:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_HCD_HC_Halt+0x1e>
 8006990:	2302      	movs	r3, #2
 8006992:	e00f      	b.n	80069b4 <HAL_HCD_HC_Halt+0x3e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	4611      	mov	r1, r2
 80069a4:	4618      	mov	r0, r3
 80069a6:	f005 ff0e 	bl	800c7c6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	4608      	mov	r0, r1
 80069c6:	4611      	mov	r1, r2
 80069c8:	461a      	mov	r2, r3
 80069ca:	4603      	mov	r3, r0
 80069cc:	70fb      	strb	r3, [r7, #3]
 80069ce:	460b      	mov	r3, r1
 80069d0:	70bb      	strb	r3, [r7, #2]
 80069d2:	4613      	mov	r3, r2
 80069d4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80069d6:	78fb      	ldrb	r3, [r7, #3]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	212c      	movs	r1, #44	; 0x2c
 80069dc:	fb01 f303 	mul.w	r3, r1, r3
 80069e0:	4413      	add	r3, r2
 80069e2:	333b      	adds	r3, #59	; 0x3b
 80069e4:	78ba      	ldrb	r2, [r7, #2]
 80069e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	212c      	movs	r1, #44	; 0x2c
 80069ee:	fb01 f303 	mul.w	r3, r1, r3
 80069f2:	4413      	add	r3, r2
 80069f4:	333f      	adds	r3, #63	; 0x3f
 80069f6:	787a      	ldrb	r2, [r7, #1]
 80069f8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80069fa:	7c3b      	ldrb	r3, [r7, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d112      	bne.n	8006a26 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	212c      	movs	r1, #44	; 0x2c
 8006a06:	fb01 f303 	mul.w	r3, r1, r3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3342      	adds	r3, #66	; 0x42
 8006a0e:	2203      	movs	r2, #3
 8006a10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006a12:	78fb      	ldrb	r3, [r7, #3]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	212c      	movs	r1, #44	; 0x2c
 8006a18:	fb01 f303 	mul.w	r3, r1, r3
 8006a1c:	4413      	add	r3, r2
 8006a1e:	333d      	adds	r3, #61	; 0x3d
 8006a20:	7f3a      	ldrb	r2, [r7, #28]
 8006a22:	701a      	strb	r2, [r3, #0]
 8006a24:	e008      	b.n	8006a38 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	212c      	movs	r1, #44	; 0x2c
 8006a2c:	fb01 f303 	mul.w	r3, r1, r3
 8006a30:	4413      	add	r3, r2
 8006a32:	3342      	adds	r3, #66	; 0x42
 8006a34:	2202      	movs	r2, #2
 8006a36:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006a38:	787b      	ldrb	r3, [r7, #1]
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	f200 80c6 	bhi.w	8006bcc <HAL_HCD_HC_SubmitRequest+0x210>
 8006a40:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8006a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a46:	bf00      	nop
 8006a48:	08006a59 	.word	0x08006a59
 8006a4c:	08006bb9 	.word	0x08006bb9
 8006a50:	08006abd 	.word	0x08006abd
 8006a54:	08006b3b 	.word	0x08006b3b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006a58:	7c3b      	ldrb	r3, [r7, #16]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	f040 80b8 	bne.w	8006bd0 <HAL_HCD_HC_SubmitRequest+0x214>
 8006a60:	78bb      	ldrb	r3, [r7, #2]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f040 80b4 	bne.w	8006bd0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8006a68:	8b3b      	ldrh	r3, [r7, #24]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d108      	bne.n	8006a80 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006a6e:	78fb      	ldrb	r3, [r7, #3]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	212c      	movs	r1, #44	; 0x2c
 8006a74:	fb01 f303 	mul.w	r3, r1, r3
 8006a78:	4413      	add	r3, r2
 8006a7a:	3355      	adds	r3, #85	; 0x55
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	212c      	movs	r1, #44	; 0x2c
 8006a86:	fb01 f303 	mul.w	r3, r1, r3
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3355      	adds	r3, #85	; 0x55
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d109      	bne.n	8006aa8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	212c      	movs	r1, #44	; 0x2c
 8006a9a:	fb01 f303 	mul.w	r3, r1, r3
 8006a9e:	4413      	add	r3, r2
 8006aa0:	3342      	adds	r3, #66	; 0x42
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006aa6:	e093      	b.n	8006bd0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	212c      	movs	r1, #44	; 0x2c
 8006aae:	fb01 f303 	mul.w	r3, r1, r3
 8006ab2:	4413      	add	r3, r2
 8006ab4:	3342      	adds	r3, #66	; 0x42
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	701a      	strb	r2, [r3, #0]
      break;
 8006aba:	e089      	b.n	8006bd0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006abc:	78bb      	ldrb	r3, [r7, #2]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d11d      	bne.n	8006afe <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006ac2:	78fb      	ldrb	r3, [r7, #3]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	212c      	movs	r1, #44	; 0x2c
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	4413      	add	r3, r2
 8006ace:	3355      	adds	r3, #85	; 0x55
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d109      	bne.n	8006aea <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	212c      	movs	r1, #44	; 0x2c
 8006adc:	fb01 f303 	mul.w	r3, r1, r3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	3342      	adds	r3, #66	; 0x42
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006ae8:	e073      	b.n	8006bd2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006aea:	78fb      	ldrb	r3, [r7, #3]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	212c      	movs	r1, #44	; 0x2c
 8006af0:	fb01 f303 	mul.w	r3, r1, r3
 8006af4:	4413      	add	r3, r2
 8006af6:	3342      	adds	r3, #66	; 0x42
 8006af8:	2202      	movs	r2, #2
 8006afa:	701a      	strb	r2, [r3, #0]
      break;
 8006afc:	e069      	b.n	8006bd2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006afe:	78fb      	ldrb	r3, [r7, #3]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	212c      	movs	r1, #44	; 0x2c
 8006b04:	fb01 f303 	mul.w	r3, r1, r3
 8006b08:	4413      	add	r3, r2
 8006b0a:	3354      	adds	r3, #84	; 0x54
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d109      	bne.n	8006b26 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006b12:	78fb      	ldrb	r3, [r7, #3]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	212c      	movs	r1, #44	; 0x2c
 8006b18:	fb01 f303 	mul.w	r3, r1, r3
 8006b1c:	4413      	add	r3, r2
 8006b1e:	3342      	adds	r3, #66	; 0x42
 8006b20:	2200      	movs	r2, #0
 8006b22:	701a      	strb	r2, [r3, #0]
      break;
 8006b24:	e055      	b.n	8006bd2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	212c      	movs	r1, #44	; 0x2c
 8006b2c:	fb01 f303 	mul.w	r3, r1, r3
 8006b30:	4413      	add	r3, r2
 8006b32:	3342      	adds	r3, #66	; 0x42
 8006b34:	2202      	movs	r2, #2
 8006b36:	701a      	strb	r2, [r3, #0]
      break;
 8006b38:	e04b      	b.n	8006bd2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006b3a:	78bb      	ldrb	r3, [r7, #2]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d11d      	bne.n	8006b7c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	212c      	movs	r1, #44	; 0x2c
 8006b46:	fb01 f303 	mul.w	r3, r1, r3
 8006b4a:	4413      	add	r3, r2
 8006b4c:	3355      	adds	r3, #85	; 0x55
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d109      	bne.n	8006b68 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006b54:	78fb      	ldrb	r3, [r7, #3]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	212c      	movs	r1, #44	; 0x2c
 8006b5a:	fb01 f303 	mul.w	r3, r1, r3
 8006b5e:	4413      	add	r3, r2
 8006b60:	3342      	adds	r3, #66	; 0x42
 8006b62:	2200      	movs	r2, #0
 8006b64:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006b66:	e034      	b.n	8006bd2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	212c      	movs	r1, #44	; 0x2c
 8006b6e:	fb01 f303 	mul.w	r3, r1, r3
 8006b72:	4413      	add	r3, r2
 8006b74:	3342      	adds	r3, #66	; 0x42
 8006b76:	2202      	movs	r2, #2
 8006b78:	701a      	strb	r2, [r3, #0]
      break;
 8006b7a:	e02a      	b.n	8006bd2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	212c      	movs	r1, #44	; 0x2c
 8006b82:	fb01 f303 	mul.w	r3, r1, r3
 8006b86:	4413      	add	r3, r2
 8006b88:	3354      	adds	r3, #84	; 0x54
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d109      	bne.n	8006ba4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006b90:	78fb      	ldrb	r3, [r7, #3]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	212c      	movs	r1, #44	; 0x2c
 8006b96:	fb01 f303 	mul.w	r3, r1, r3
 8006b9a:	4413      	add	r3, r2
 8006b9c:	3342      	adds	r3, #66	; 0x42
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	701a      	strb	r2, [r3, #0]
      break;
 8006ba2:	e016      	b.n	8006bd2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	212c      	movs	r1, #44	; 0x2c
 8006baa:	fb01 f303 	mul.w	r3, r1, r3
 8006bae:	4413      	add	r3, r2
 8006bb0:	3342      	adds	r3, #66	; 0x42
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	701a      	strb	r2, [r3, #0]
      break;
 8006bb6:	e00c      	b.n	8006bd2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	212c      	movs	r1, #44	; 0x2c
 8006bbe:	fb01 f303 	mul.w	r3, r1, r3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3342      	adds	r3, #66	; 0x42
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	701a      	strb	r2, [r3, #0]
      break;
 8006bca:	e002      	b.n	8006bd2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006bcc:	bf00      	nop
 8006bce:	e000      	b.n	8006bd2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006bd0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	212c      	movs	r1, #44	; 0x2c
 8006bd8:	fb01 f303 	mul.w	r3, r1, r3
 8006bdc:	4413      	add	r3, r2
 8006bde:	3344      	adds	r3, #68	; 0x44
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	8b3a      	ldrh	r2, [r7, #24]
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	202c      	movs	r0, #44	; 0x2c
 8006bec:	fb00 f303 	mul.w	r3, r0, r3
 8006bf0:	440b      	add	r3, r1
 8006bf2:	334c      	adds	r3, #76	; 0x4c
 8006bf4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	212c      	movs	r1, #44	; 0x2c
 8006bfc:	fb01 f303 	mul.w	r3, r1, r3
 8006c00:	4413      	add	r3, r2
 8006c02:	3360      	adds	r3, #96	; 0x60
 8006c04:	2200      	movs	r2, #0
 8006c06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006c08:	78fb      	ldrb	r3, [r7, #3]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	212c      	movs	r1, #44	; 0x2c
 8006c0e:	fb01 f303 	mul.w	r3, r1, r3
 8006c12:	4413      	add	r3, r2
 8006c14:	3350      	adds	r3, #80	; 0x50
 8006c16:	2200      	movs	r2, #0
 8006c18:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	212c      	movs	r1, #44	; 0x2c
 8006c20:	fb01 f303 	mul.w	r3, r1, r3
 8006c24:	4413      	add	r3, r2
 8006c26:	3339      	adds	r3, #57	; 0x39
 8006c28:	78fa      	ldrb	r2, [r7, #3]
 8006c2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	212c      	movs	r1, #44	; 0x2c
 8006c32:	fb01 f303 	mul.w	r3, r1, r3
 8006c36:	4413      	add	r3, r2
 8006c38:	3361      	adds	r3, #97	; 0x61
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	78fb      	ldrb	r3, [r7, #3]
 8006c44:	222c      	movs	r2, #44	; 0x2c
 8006c46:	fb02 f303 	mul.w	r3, r2, r3
 8006c4a:	3338      	adds	r3, #56	; 0x38
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	18d1      	adds	r1, r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	461a      	mov	r2, r3
 8006c58:	f005 fc62 	bl	800c520 <USB_HC_StartXfer>
 8006c5c:	4603      	mov	r3, r0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop

08006c68 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f005 f963 	bl	800bf4a <USB_GetMode>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	f040 80f6 	bne.w	8006e78 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f005 f947 	bl	800bf24 <USB_ReadInterrupts>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 80ec 	beq.w	8006e76 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f005 f93e 	bl	800bf24 <USB_ReadInterrupts>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cb2:	d104      	bne.n	8006cbe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006cbc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f005 f92e 	bl	800bf24 <USB_ReadInterrupts>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cd2:	d104      	bne.n	8006cde <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006cdc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f005 f91e 	bl	800bf24 <USB_ReadInterrupts>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cf2:	d104      	bne.n	8006cfe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006cfc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f005 f90e 	bl	800bf24 <USB_ReadInterrupts>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d103      	bne.n	8006d1a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2202      	movs	r2, #2
 8006d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f005 f900 	bl	800bf24 <USB_ReadInterrupts>
 8006d24:	4603      	mov	r3, r0
 8006d26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d2e:	d11c      	bne.n	8006d6a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006d38:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10f      	bne.n	8006d6a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006d4a:	2110      	movs	r1, #16
 8006d4c:	6938      	ldr	r0, [r7, #16]
 8006d4e:	f004 ffef 	bl	800bd30 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006d52:	6938      	ldr	r0, [r7, #16]
 8006d54:	f005 f820 	bl	800bd98 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f005 f9f6 	bl	800c150 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f007 ffc3 	bl	800ecf0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f005 f8d8 	bl	800bf24 <USB_ReadInterrupts>
 8006d74:	4603      	mov	r3, r0
 8006d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d7e:	d102      	bne.n	8006d86 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 f89e 	bl	8007ec2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f005 f8ca 	bl	800bf24 <USB_ReadInterrupts>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f003 0308 	and.w	r3, r3, #8
 8006d96:	2b08      	cmp	r3, #8
 8006d98:	d106      	bne.n	8006da8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f007 ff8c 	bl	800ecb8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2208      	movs	r2, #8
 8006da6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f005 f8b9 	bl	800bf24 <USB_ReadInterrupts>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f003 0310 	and.w	r3, r3, #16
 8006db8:	2b10      	cmp	r3, #16
 8006dba:	d101      	bne.n	8006dc0 <HAL_HCD_IRQHandler+0x158>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <HAL_HCD_IRQHandler+0x15a>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d012      	beq.n	8006dec <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	699a      	ldr	r2, [r3, #24]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0210 	bic.w	r2, r2, #16
 8006dd4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 ffa1 	bl	8007d1e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0210 	orr.w	r2, r2, #16
 8006dea:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f005 f897 	bl	800bf24 <USB_ReadInterrupts>
 8006df6:	4603      	mov	r3, r0
 8006df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e00:	d13a      	bne.n	8006e78 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f005 fccc 	bl	800c7a4 <USB_HC_ReadInterrupt>
 8006e0c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006e0e:	2300      	movs	r3, #0
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	e025      	b.n	8006e60 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f003 030f 	and.w	r3, r3, #15
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d018      	beq.n	8006e5a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e3e:	d106      	bne.n	8006e4e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	4619      	mov	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f8ab 	bl	8006fa2 <HCD_HC_IN_IRQHandler>
 8006e4c:	e005      	b.n	8006e5a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fbf9 	bl	800764c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	617b      	str	r3, [r7, #20]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d3d4      	bcc.n	8006e14 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e72:	615a      	str	r2, [r3, #20]
 8006e74:	e000      	b.n	8006e78 <HAL_HCD_IRQHandler+0x210>
      return;
 8006e76:	bf00      	nop
    }
  }
}
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d101      	bne.n	8006e94 <HAL_HCD_Start+0x16>
 8006e90:	2302      	movs	r3, #2
 8006e92:	e013      	b.n	8006ebc <HAL_HCD_Start+0x3e>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f005 f9b8 	bl	800c218 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f004 fed0 	bl	800bc52 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d101      	bne.n	8006eda <HAL_HCD_Stop+0x16>
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	e00d      	b.n	8006ef6 <HAL_HCD_Stop+0x32>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f005 fda6 	bl	800ca38 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b082      	sub	sp, #8
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f005 f95a 	bl	800c1c4 <USB_ResetPort>
 8006f10:	4603      	mov	r3, r0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	460b      	mov	r3, r1
 8006f24:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006f26:	78fb      	ldrb	r3, [r7, #3]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	212c      	movs	r1, #44	; 0x2c
 8006f2c:	fb01 f303 	mul.w	r3, r1, r3
 8006f30:	4413      	add	r3, r2
 8006f32:	3360      	adds	r3, #96	; 0x60
 8006f34:	781b      	ldrb	r3, [r3, #0]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006f4e:	78fb      	ldrb	r3, [r7, #3]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	212c      	movs	r1, #44	; 0x2c
 8006f54:	fb01 f303 	mul.w	r3, r1, r3
 8006f58:	4413      	add	r3, r2
 8006f5a:	3350      	adds	r3, #80	; 0x50
 8006f5c:	681b      	ldr	r3, [r3, #0]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f005 f99e 	bl	800c2b8 <USB_GetCurrentFrame>
 8006f7c:	4603      	mov	r3, r0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f005 f979 	bl	800c28a <USB_GetHostSpeed>
 8006f98:	4603      	mov	r3, r0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b086      	sub	sp, #24
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	460b      	mov	r3, r1
 8006fac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f003 0304 	and.w	r3, r3, #4
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d11a      	bne.n	8007008 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fde:	461a      	mov	r2, r3
 8006fe0:	2304      	movs	r3, #4
 8006fe2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	212c      	movs	r1, #44	; 0x2c
 8006fea:	fb01 f303 	mul.w	r3, r1, r3
 8006fee:	4413      	add	r3, r2
 8006ff0:	3361      	adds	r3, #97	; 0x61
 8006ff2:	2206      	movs	r2, #6
 8006ff4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	b2d2      	uxtb	r2, r2
 8006ffe:	4611      	mov	r1, r2
 8007000:	4618      	mov	r0, r3
 8007002:	f005 fbe0 	bl	800c7c6 <USB_HC_Halt>
 8007006:	e0af      	b.n	8007168 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	4413      	add	r3, r2
 8007010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701e:	d11b      	bne.n	8007058 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	4413      	add	r3, r2
 8007028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702c:	461a      	mov	r2, r3
 800702e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007032:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	212c      	movs	r1, #44	; 0x2c
 800703a:	fb01 f303 	mul.w	r3, r1, r3
 800703e:	4413      	add	r3, r2
 8007040:	3361      	adds	r3, #97	; 0x61
 8007042:	2207      	movs	r2, #7
 8007044:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	4611      	mov	r1, r2
 8007050:	4618      	mov	r0, r3
 8007052:	f005 fbb8 	bl	800c7c6 <USB_HC_Halt>
 8007056:	e087      	b.n	8007168 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4413      	add	r3, r2
 8007060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b20      	cmp	r3, #32
 800706c:	d109      	bne.n	8007082 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	4413      	add	r3, r2
 8007076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800707a:	461a      	mov	r2, r3
 800707c:	2320      	movs	r3, #32
 800707e:	6093      	str	r3, [r2, #8]
 8007080:	e072      	b.n	8007168 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	4413      	add	r3, r2
 800708a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f003 0308 	and.w	r3, r3, #8
 8007094:	2b08      	cmp	r3, #8
 8007096:	d11a      	bne.n	80070ce <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a4:	461a      	mov	r2, r3
 80070a6:	2308      	movs	r3, #8
 80070a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	212c      	movs	r1, #44	; 0x2c
 80070b0:	fb01 f303 	mul.w	r3, r1, r3
 80070b4:	4413      	add	r3, r2
 80070b6:	3361      	adds	r3, #97	; 0x61
 80070b8:	2205      	movs	r2, #5
 80070ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	b2d2      	uxtb	r2, r2
 80070c4:	4611      	mov	r1, r2
 80070c6:	4618      	mov	r0, r3
 80070c8:	f005 fb7d 	bl	800c7c6 <USB_HC_Halt>
 80070cc:	e04c      	b.n	8007168 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e4:	d11b      	bne.n	800711e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f2:	461a      	mov	r2, r3
 80070f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	212c      	movs	r1, #44	; 0x2c
 8007100:	fb01 f303 	mul.w	r3, r1, r3
 8007104:	4413      	add	r3, r2
 8007106:	3361      	adds	r3, #97	; 0x61
 8007108:	2208      	movs	r2, #8
 800710a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	4611      	mov	r1, r2
 8007116:	4618      	mov	r0, r3
 8007118:	f005 fb55 	bl	800c7c6 <USB_HC_Halt>
 800711c:	e024      	b.n	8007168 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	4413      	add	r3, r2
 8007126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007130:	2b80      	cmp	r3, #128	; 0x80
 8007132:	d119      	bne.n	8007168 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	4413      	add	r3, r2
 800713c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007140:	461a      	mov	r2, r3
 8007142:	2380      	movs	r3, #128	; 0x80
 8007144:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	212c      	movs	r1, #44	; 0x2c
 800714c:	fb01 f303 	mul.w	r3, r1, r3
 8007150:	4413      	add	r3, r2
 8007152:	3361      	adds	r3, #97	; 0x61
 8007154:	2206      	movs	r2, #6
 8007156:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	b2d2      	uxtb	r2, r2
 8007160:	4611      	mov	r1, r2
 8007162:	4618      	mov	r0, r3
 8007164:	f005 fb2f 	bl	800c7c6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	4413      	add	r3, r2
 8007170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800717a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800717e:	d112      	bne.n	80071a6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	4611      	mov	r1, r2
 800718a:	4618      	mov	r0, r3
 800718c:	f005 fb1b 	bl	800c7c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	4413      	add	r3, r2
 8007198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800719c:	461a      	mov	r2, r3
 800719e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071a2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80071a4:	e24e      	b.n	8007644 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	f040 80df 	bne.w	800737c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d019      	beq.n	80071fa <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	212c      	movs	r1, #44	; 0x2c
 80071cc:	fb01 f303 	mul.w	r3, r1, r3
 80071d0:	4413      	add	r3, r2
 80071d2:	3348      	adds	r3, #72	; 0x48
 80071d4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	0159      	lsls	r1, r3, #5
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	440b      	add	r3, r1
 80071de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80071e8:	1ad2      	subs	r2, r2, r3
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	202c      	movs	r0, #44	; 0x2c
 80071f0:	fb00 f303 	mul.w	r3, r0, r3
 80071f4:	440b      	add	r3, r1
 80071f6:	3350      	adds	r3, #80	; 0x50
 80071f8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	212c      	movs	r1, #44	; 0x2c
 8007200:	fb01 f303 	mul.w	r3, r1, r3
 8007204:	4413      	add	r3, r2
 8007206:	3361      	adds	r3, #97	; 0x61
 8007208:	2201      	movs	r2, #1
 800720a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	212c      	movs	r1, #44	; 0x2c
 8007212:	fb01 f303 	mul.w	r3, r1, r3
 8007216:	4413      	add	r3, r2
 8007218:	335c      	adds	r3, #92	; 0x5c
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	4413      	add	r3, r2
 8007226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800722a:	461a      	mov	r2, r3
 800722c:	2301      	movs	r3, #1
 800722e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	212c      	movs	r1, #44	; 0x2c
 8007236:	fb01 f303 	mul.w	r3, r1, r3
 800723a:	4413      	add	r3, r2
 800723c:	333f      	adds	r3, #63	; 0x3f
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d009      	beq.n	8007258 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	212c      	movs	r1, #44	; 0x2c
 800724a:	fb01 f303 	mul.w	r3, r1, r3
 800724e:	4413      	add	r3, r2
 8007250:	333f      	adds	r3, #63	; 0x3f
 8007252:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007254:	2b02      	cmp	r3, #2
 8007256:	d111      	bne.n	800727c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	4611      	mov	r1, r2
 8007262:	4618      	mov	r0, r3
 8007264:	f005 faaf 	bl	800c7c6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	4413      	add	r3, r2
 8007270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007274:	461a      	mov	r2, r3
 8007276:	2310      	movs	r3, #16
 8007278:	6093      	str	r3, [r2, #8]
 800727a:	e03a      	b.n	80072f2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	212c      	movs	r1, #44	; 0x2c
 8007282:	fb01 f303 	mul.w	r3, r1, r3
 8007286:	4413      	add	r3, r2
 8007288:	333f      	adds	r3, #63	; 0x3f
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2b03      	cmp	r3, #3
 800728e:	d009      	beq.n	80072a4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	212c      	movs	r1, #44	; 0x2c
 8007296:	fb01 f303 	mul.w	r3, r1, r3
 800729a:	4413      	add	r3, r2
 800729c:	333f      	adds	r3, #63	; 0x3f
 800729e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d126      	bne.n	80072f2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	0151      	lsls	r1, r2, #5
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	440a      	add	r2, r1
 80072ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072c2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	212c      	movs	r1, #44	; 0x2c
 80072ca:	fb01 f303 	mul.w	r3, r1, r3
 80072ce:	4413      	add	r3, r2
 80072d0:	3360      	adds	r3, #96	; 0x60
 80072d2:	2201      	movs	r2, #1
 80072d4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	b2d9      	uxtb	r1, r3
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	202c      	movs	r0, #44	; 0x2c
 80072e0:	fb00 f303 	mul.w	r3, r0, r3
 80072e4:	4413      	add	r3, r2
 80072e6:	3360      	adds	r3, #96	; 0x60
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f007 fd0d 	bl	800ed0c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d12b      	bne.n	8007352 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	212c      	movs	r1, #44	; 0x2c
 8007300:	fb01 f303 	mul.w	r3, r1, r3
 8007304:	4413      	add	r3, r2
 8007306:	3348      	adds	r3, #72	; 0x48
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	202c      	movs	r0, #44	; 0x2c
 8007310:	fb00 f202 	mul.w	r2, r0, r2
 8007314:	440a      	add	r2, r1
 8007316:	3240      	adds	r2, #64	; 0x40
 8007318:	8812      	ldrh	r2, [r2, #0]
 800731a:	fbb3 f3f2 	udiv	r3, r3, r2
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	f000 818e 	beq.w	8007644 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	212c      	movs	r1, #44	; 0x2c
 800732e:	fb01 f303 	mul.w	r3, r1, r3
 8007332:	4413      	add	r3, r2
 8007334:	3354      	adds	r3, #84	; 0x54
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f083 0301 	eor.w	r3, r3, #1
 800733c:	b2d8      	uxtb	r0, r3
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	212c      	movs	r1, #44	; 0x2c
 8007344:	fb01 f303 	mul.w	r3, r1, r3
 8007348:	4413      	add	r3, r2
 800734a:	3354      	adds	r3, #84	; 0x54
 800734c:	4602      	mov	r2, r0
 800734e:	701a      	strb	r2, [r3, #0]
}
 8007350:	e178      	b.n	8007644 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	212c      	movs	r1, #44	; 0x2c
 8007358:	fb01 f303 	mul.w	r3, r1, r3
 800735c:	4413      	add	r3, r2
 800735e:	3354      	adds	r3, #84	; 0x54
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	f083 0301 	eor.w	r3, r3, #1
 8007366:	b2d8      	uxtb	r0, r3
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	212c      	movs	r1, #44	; 0x2c
 800736e:	fb01 f303 	mul.w	r3, r1, r3
 8007372:	4413      	add	r3, r2
 8007374:	3354      	adds	r3, #84	; 0x54
 8007376:	4602      	mov	r2, r0
 8007378:	701a      	strb	r2, [r3, #0]
}
 800737a:	e163      	b.n	8007644 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	4413      	add	r3, r2
 8007384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b02      	cmp	r3, #2
 8007390:	f040 80f6 	bne.w	8007580 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	212c      	movs	r1, #44	; 0x2c
 800739a:	fb01 f303 	mul.w	r3, r1, r3
 800739e:	4413      	add	r3, r2
 80073a0:	3361      	adds	r3, #97	; 0x61
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d109      	bne.n	80073bc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	212c      	movs	r1, #44	; 0x2c
 80073ae:	fb01 f303 	mul.w	r3, r1, r3
 80073b2:	4413      	add	r3, r2
 80073b4:	3360      	adds	r3, #96	; 0x60
 80073b6:	2201      	movs	r2, #1
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	e0c9      	b.n	8007550 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	212c      	movs	r1, #44	; 0x2c
 80073c2:	fb01 f303 	mul.w	r3, r1, r3
 80073c6:	4413      	add	r3, r2
 80073c8:	3361      	adds	r3, #97	; 0x61
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b05      	cmp	r3, #5
 80073ce:	d109      	bne.n	80073e4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	212c      	movs	r1, #44	; 0x2c
 80073d6:	fb01 f303 	mul.w	r3, r1, r3
 80073da:	4413      	add	r3, r2
 80073dc:	3360      	adds	r3, #96	; 0x60
 80073de:	2205      	movs	r2, #5
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	e0b5      	b.n	8007550 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	212c      	movs	r1, #44	; 0x2c
 80073ea:	fb01 f303 	mul.w	r3, r1, r3
 80073ee:	4413      	add	r3, r2
 80073f0:	3361      	adds	r3, #97	; 0x61
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b06      	cmp	r3, #6
 80073f6:	d009      	beq.n	800740c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	212c      	movs	r1, #44	; 0x2c
 80073fe:	fb01 f303 	mul.w	r3, r1, r3
 8007402:	4413      	add	r3, r2
 8007404:	3361      	adds	r3, #97	; 0x61
 8007406:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007408:	2b08      	cmp	r3, #8
 800740a:	d150      	bne.n	80074ae <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	212c      	movs	r1, #44	; 0x2c
 8007412:	fb01 f303 	mul.w	r3, r1, r3
 8007416:	4413      	add	r3, r2
 8007418:	335c      	adds	r3, #92	; 0x5c
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	202c      	movs	r0, #44	; 0x2c
 8007424:	fb00 f303 	mul.w	r3, r0, r3
 8007428:	440b      	add	r3, r1
 800742a:	335c      	adds	r3, #92	; 0x5c
 800742c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	212c      	movs	r1, #44	; 0x2c
 8007434:	fb01 f303 	mul.w	r3, r1, r3
 8007438:	4413      	add	r3, r2
 800743a:	335c      	adds	r3, #92	; 0x5c
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d912      	bls.n	8007468 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	212c      	movs	r1, #44	; 0x2c
 8007448:	fb01 f303 	mul.w	r3, r1, r3
 800744c:	4413      	add	r3, r2
 800744e:	335c      	adds	r3, #92	; 0x5c
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	212c      	movs	r1, #44	; 0x2c
 800745a:	fb01 f303 	mul.w	r3, r1, r3
 800745e:	4413      	add	r3, r2
 8007460:	3360      	adds	r3, #96	; 0x60
 8007462:	2204      	movs	r2, #4
 8007464:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007466:	e073      	b.n	8007550 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	212c      	movs	r1, #44	; 0x2c
 800746e:	fb01 f303 	mul.w	r3, r1, r3
 8007472:	4413      	add	r3, r2
 8007474:	3360      	adds	r3, #96	; 0x60
 8007476:	2202      	movs	r2, #2
 8007478:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	4413      	add	r3, r2
 8007482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007490:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007498:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074a6:	461a      	mov	r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80074ac:	e050      	b.n	8007550 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	212c      	movs	r1, #44	; 0x2c
 80074b4:	fb01 f303 	mul.w	r3, r1, r3
 80074b8:	4413      	add	r3, r2
 80074ba:	3361      	adds	r3, #97	; 0x61
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d122      	bne.n	8007508 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	212c      	movs	r1, #44	; 0x2c
 80074c8:	fb01 f303 	mul.w	r3, r1, r3
 80074cc:	4413      	add	r3, r2
 80074ce:	3360      	adds	r3, #96	; 0x60
 80074d0:	2202      	movs	r2, #2
 80074d2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074ea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074f2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007500:	461a      	mov	r2, r3
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	6013      	str	r3, [r2, #0]
 8007506:	e023      	b.n	8007550 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	212c      	movs	r1, #44	; 0x2c
 800750e:	fb01 f303 	mul.w	r3, r1, r3
 8007512:	4413      	add	r3, r2
 8007514:	3361      	adds	r3, #97	; 0x61
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b07      	cmp	r3, #7
 800751a:	d119      	bne.n	8007550 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	212c      	movs	r1, #44	; 0x2c
 8007522:	fb01 f303 	mul.w	r3, r1, r3
 8007526:	4413      	add	r3, r2
 8007528:	335c      	adds	r3, #92	; 0x5c
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	202c      	movs	r0, #44	; 0x2c
 8007534:	fb00 f303 	mul.w	r3, r0, r3
 8007538:	440b      	add	r3, r1
 800753a:	335c      	adds	r3, #92	; 0x5c
 800753c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	212c      	movs	r1, #44	; 0x2c
 8007544:	fb01 f303 	mul.w	r3, r1, r3
 8007548:	4413      	add	r3, r2
 800754a:	3360      	adds	r3, #96	; 0x60
 800754c:	2204      	movs	r2, #4
 800754e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	4413      	add	r3, r2
 8007558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800755c:	461a      	mov	r2, r3
 800755e:	2302      	movs	r3, #2
 8007560:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	b2d9      	uxtb	r1, r3
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	202c      	movs	r0, #44	; 0x2c
 800756c:	fb00 f303 	mul.w	r3, r0, r3
 8007570:	4413      	add	r3, r2
 8007572:	3360      	adds	r3, #96	; 0x60
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f007 fbc7 	bl	800ed0c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800757e:	e061      	b.n	8007644 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	4413      	add	r3, r2
 8007588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f003 0310 	and.w	r3, r3, #16
 8007592:	2b10      	cmp	r3, #16
 8007594:	d156      	bne.n	8007644 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	212c      	movs	r1, #44	; 0x2c
 800759c:	fb01 f303 	mul.w	r3, r1, r3
 80075a0:	4413      	add	r3, r2
 80075a2:	333f      	adds	r3, #63	; 0x3f
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d111      	bne.n	80075ce <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	212c      	movs	r1, #44	; 0x2c
 80075b0:	fb01 f303 	mul.w	r3, r1, r3
 80075b4:	4413      	add	r3, r2
 80075b6:	335c      	adds	r3, #92	; 0x5c
 80075b8:	2200      	movs	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	4611      	mov	r1, r2
 80075c6:	4618      	mov	r0, r3
 80075c8:	f005 f8fd 	bl	800c7c6 <USB_HC_Halt>
 80075cc:	e031      	b.n	8007632 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	212c      	movs	r1, #44	; 0x2c
 80075d4:	fb01 f303 	mul.w	r3, r1, r3
 80075d8:	4413      	add	r3, r2
 80075da:	333f      	adds	r3, #63	; 0x3f
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d009      	beq.n	80075f6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	212c      	movs	r1, #44	; 0x2c
 80075e8:	fb01 f303 	mul.w	r3, r1, r3
 80075ec:	4413      	add	r3, r2
 80075ee:	333f      	adds	r3, #63	; 0x3f
 80075f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d11d      	bne.n	8007632 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	212c      	movs	r1, #44	; 0x2c
 80075fc:	fb01 f303 	mul.w	r3, r1, r3
 8007600:	4413      	add	r3, r2
 8007602:	335c      	adds	r3, #92	; 0x5c
 8007604:	2200      	movs	r2, #0
 8007606:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d110      	bne.n	8007632 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	212c      	movs	r1, #44	; 0x2c
 8007616:	fb01 f303 	mul.w	r3, r1, r3
 800761a:	4413      	add	r3, r2
 800761c:	3361      	adds	r3, #97	; 0x61
 800761e:	2203      	movs	r2, #3
 8007620:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	b2d2      	uxtb	r2, r2
 800762a:	4611      	mov	r1, r2
 800762c:	4618      	mov	r0, r3
 800762e:	f005 f8ca 	bl	800c7c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	4413      	add	r3, r2
 800763a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800763e:	461a      	mov	r2, r3
 8007640:	2310      	movs	r3, #16
 8007642:	6093      	str	r3, [r2, #8]
}
 8007644:	bf00      	nop
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	460b      	mov	r3, r1
 8007656:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	4413      	add	r3, r2
 800766e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f003 0304 	and.w	r3, r3, #4
 8007678:	2b04      	cmp	r3, #4
 800767a:	d11a      	bne.n	80076b2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	4413      	add	r3, r2
 8007684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007688:	461a      	mov	r2, r3
 800768a:	2304      	movs	r3, #4
 800768c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	212c      	movs	r1, #44	; 0x2c
 8007694:	fb01 f303 	mul.w	r3, r1, r3
 8007698:	4413      	add	r3, r2
 800769a:	3361      	adds	r3, #97	; 0x61
 800769c:	2206      	movs	r2, #6
 800769e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	b2d2      	uxtb	r2, r2
 80076a8:	4611      	mov	r1, r2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f005 f88b 	bl	800c7c6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80076b0:	e331      	b.n	8007d16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f003 0320 	and.w	r3, r3, #32
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	d12e      	bne.n	8007726 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d4:	461a      	mov	r2, r3
 80076d6:	2320      	movs	r3, #32
 80076d8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	212c      	movs	r1, #44	; 0x2c
 80076e0:	fb01 f303 	mul.w	r3, r1, r3
 80076e4:	4413      	add	r3, r2
 80076e6:	333d      	adds	r3, #61	; 0x3d
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	f040 8313 	bne.w	8007d16 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	212c      	movs	r1, #44	; 0x2c
 80076f6:	fb01 f303 	mul.w	r3, r1, r3
 80076fa:	4413      	add	r3, r2
 80076fc:	333d      	adds	r3, #61	; 0x3d
 80076fe:	2200      	movs	r2, #0
 8007700:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	212c      	movs	r1, #44	; 0x2c
 8007708:	fb01 f303 	mul.w	r3, r1, r3
 800770c:	4413      	add	r3, r2
 800770e:	3360      	adds	r3, #96	; 0x60
 8007710:	2202      	movs	r2, #2
 8007712:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	4611      	mov	r1, r2
 800771e:	4618      	mov	r0, r3
 8007720:	f005 f851 	bl	800c7c6 <USB_HC_Halt>
}
 8007724:	e2f7      	b.n	8007d16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	4413      	add	r3, r2
 800772e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800773c:	d112      	bne.n	8007764 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	4413      	add	r3, r2
 8007746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800774a:	461a      	mov	r2, r3
 800774c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007750:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	b2d2      	uxtb	r2, r2
 800775a:	4611      	mov	r1, r2
 800775c:	4618      	mov	r0, r3
 800775e:	f005 f832 	bl	800c7c6 <USB_HC_Halt>
}
 8007762:	e2d8      	b.n	8007d16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	4413      	add	r3, r2
 800776c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b01      	cmp	r3, #1
 8007778:	d140      	bne.n	80077fc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	212c      	movs	r1, #44	; 0x2c
 8007780:	fb01 f303 	mul.w	r3, r1, r3
 8007784:	4413      	add	r3, r2
 8007786:	335c      	adds	r3, #92	; 0x5c
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	4413      	add	r3, r2
 8007794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779e:	2b40      	cmp	r3, #64	; 0x40
 80077a0:	d111      	bne.n	80077c6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	212c      	movs	r1, #44	; 0x2c
 80077a8:	fb01 f303 	mul.w	r3, r1, r3
 80077ac:	4413      	add	r3, r2
 80077ae:	333d      	adds	r3, #61	; 0x3d
 80077b0:	2201      	movs	r2, #1
 80077b2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077c0:	461a      	mov	r2, r3
 80077c2:	2340      	movs	r3, #64	; 0x40
 80077c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	015a      	lsls	r2, r3, #5
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	4413      	add	r3, r2
 80077ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077d2:	461a      	mov	r2, r3
 80077d4:	2301      	movs	r3, #1
 80077d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	212c      	movs	r1, #44	; 0x2c
 80077de:	fb01 f303 	mul.w	r3, r1, r3
 80077e2:	4413      	add	r3, r2
 80077e4:	3361      	adds	r3, #97	; 0x61
 80077e6:	2201      	movs	r2, #1
 80077e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	b2d2      	uxtb	r2, r2
 80077f2:	4611      	mov	r1, r2
 80077f4:	4618      	mov	r0, r3
 80077f6:	f004 ffe6 	bl	800c7c6 <USB_HC_Halt>
}
 80077fa:	e28c      	b.n	8007d16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	4413      	add	r3, r2
 8007804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800780e:	2b40      	cmp	r3, #64	; 0x40
 8007810:	d12c      	bne.n	800786c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	212c      	movs	r1, #44	; 0x2c
 8007818:	fb01 f303 	mul.w	r3, r1, r3
 800781c:	4413      	add	r3, r2
 800781e:	3361      	adds	r3, #97	; 0x61
 8007820:	2204      	movs	r2, #4
 8007822:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	212c      	movs	r1, #44	; 0x2c
 800782a:	fb01 f303 	mul.w	r3, r1, r3
 800782e:	4413      	add	r3, r2
 8007830:	333d      	adds	r3, #61	; 0x3d
 8007832:	2201      	movs	r2, #1
 8007834:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	212c      	movs	r1, #44	; 0x2c
 800783c:	fb01 f303 	mul.w	r3, r1, r3
 8007840:	4413      	add	r3, r2
 8007842:	335c      	adds	r3, #92	; 0x5c
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	b2d2      	uxtb	r2, r2
 8007850:	4611      	mov	r1, r2
 8007852:	4618      	mov	r0, r3
 8007854:	f004 ffb7 	bl	800c7c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	4413      	add	r3, r2
 8007860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007864:	461a      	mov	r2, r3
 8007866:	2340      	movs	r3, #64	; 0x40
 8007868:	6093      	str	r3, [r2, #8]
}
 800786a:	e254      	b.n	8007d16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	4413      	add	r3, r2
 8007874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f003 0308 	and.w	r3, r3, #8
 800787e:	2b08      	cmp	r3, #8
 8007880:	d11a      	bne.n	80078b8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	4413      	add	r3, r2
 800788a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800788e:	461a      	mov	r2, r3
 8007890:	2308      	movs	r3, #8
 8007892:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	212c      	movs	r1, #44	; 0x2c
 800789a:	fb01 f303 	mul.w	r3, r1, r3
 800789e:	4413      	add	r3, r2
 80078a0:	3361      	adds	r3, #97	; 0x61
 80078a2:	2205      	movs	r2, #5
 80078a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	b2d2      	uxtb	r2, r2
 80078ae:	4611      	mov	r1, r2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f004 ff88 	bl	800c7c6 <USB_HC_Halt>
}
 80078b6:	e22e      	b.n	8007d16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f003 0310 	and.w	r3, r3, #16
 80078ca:	2b10      	cmp	r3, #16
 80078cc:	d140      	bne.n	8007950 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	212c      	movs	r1, #44	; 0x2c
 80078d4:	fb01 f303 	mul.w	r3, r1, r3
 80078d8:	4413      	add	r3, r2
 80078da:	335c      	adds	r3, #92	; 0x5c
 80078dc:	2200      	movs	r2, #0
 80078de:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	212c      	movs	r1, #44	; 0x2c
 80078e6:	fb01 f303 	mul.w	r3, r1, r3
 80078ea:	4413      	add	r3, r2
 80078ec:	3361      	adds	r3, #97	; 0x61
 80078ee:	2203      	movs	r2, #3
 80078f0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	212c      	movs	r1, #44	; 0x2c
 80078f8:	fb01 f303 	mul.w	r3, r1, r3
 80078fc:	4413      	add	r3, r2
 80078fe:	333d      	adds	r3, #61	; 0x3d
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d112      	bne.n	800792c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	212c      	movs	r1, #44	; 0x2c
 800790c:	fb01 f303 	mul.w	r3, r1, r3
 8007910:	4413      	add	r3, r2
 8007912:	333c      	adds	r3, #60	; 0x3c
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d108      	bne.n	800792c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	212c      	movs	r1, #44	; 0x2c
 8007920:	fb01 f303 	mul.w	r3, r1, r3
 8007924:	4413      	add	r3, r2
 8007926:	333d      	adds	r3, #61	; 0x3d
 8007928:	2201      	movs	r2, #1
 800792a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	b2d2      	uxtb	r2, r2
 8007934:	4611      	mov	r1, r2
 8007936:	4618      	mov	r0, r3
 8007938:	f004 ff45 	bl	800c7c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	4413      	add	r3, r2
 8007944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007948:	461a      	mov	r2, r3
 800794a:	2310      	movs	r3, #16
 800794c:	6093      	str	r3, [r2, #8]
}
 800794e:	e1e2      	b.n	8007d16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	4413      	add	r3, r2
 8007958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007962:	2b80      	cmp	r3, #128	; 0x80
 8007964:	d164      	bne.n	8007a30 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d111      	bne.n	8007992 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	212c      	movs	r1, #44	; 0x2c
 8007974:	fb01 f303 	mul.w	r3, r1, r3
 8007978:	4413      	add	r3, r2
 800797a:	3361      	adds	r3, #97	; 0x61
 800797c:	2206      	movs	r2, #6
 800797e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	b2d2      	uxtb	r2, r2
 8007988:	4611      	mov	r1, r2
 800798a:	4618      	mov	r0, r3
 800798c:	f004 ff1b 	bl	800c7c6 <USB_HC_Halt>
 8007990:	e044      	b.n	8007a1c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	212c      	movs	r1, #44	; 0x2c
 8007998:	fb01 f303 	mul.w	r3, r1, r3
 800799c:	4413      	add	r3, r2
 800799e:	335c      	adds	r3, #92	; 0x5c
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	202c      	movs	r0, #44	; 0x2c
 80079aa:	fb00 f303 	mul.w	r3, r0, r3
 80079ae:	440b      	add	r3, r1
 80079b0:	335c      	adds	r3, #92	; 0x5c
 80079b2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	212c      	movs	r1, #44	; 0x2c
 80079ba:	fb01 f303 	mul.w	r3, r1, r3
 80079be:	4413      	add	r3, r2
 80079c0:	335c      	adds	r3, #92	; 0x5c
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d920      	bls.n	8007a0a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	212c      	movs	r1, #44	; 0x2c
 80079ce:	fb01 f303 	mul.w	r3, r1, r3
 80079d2:	4413      	add	r3, r2
 80079d4:	335c      	adds	r3, #92	; 0x5c
 80079d6:	2200      	movs	r2, #0
 80079d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	212c      	movs	r1, #44	; 0x2c
 80079e0:	fb01 f303 	mul.w	r3, r1, r3
 80079e4:	4413      	add	r3, r2
 80079e6:	3360      	adds	r3, #96	; 0x60
 80079e8:	2204      	movs	r2, #4
 80079ea:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	b2d9      	uxtb	r1, r3
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	202c      	movs	r0, #44	; 0x2c
 80079f6:	fb00 f303 	mul.w	r3, r0, r3
 80079fa:	4413      	add	r3, r2
 80079fc:	3360      	adds	r3, #96	; 0x60
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	461a      	mov	r2, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f007 f982 	bl	800ed0c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007a08:	e008      	b.n	8007a1c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	212c      	movs	r1, #44	; 0x2c
 8007a10:	fb01 f303 	mul.w	r3, r1, r3
 8007a14:	4413      	add	r3, r2
 8007a16:	3360      	adds	r3, #96	; 0x60
 8007a18:	2202      	movs	r2, #2
 8007a1a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a28:	461a      	mov	r2, r3
 8007a2a:	2380      	movs	r3, #128	; 0x80
 8007a2c:	6093      	str	r3, [r2, #8]
}
 8007a2e:	e172      	b.n	8007d16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a46:	d11b      	bne.n	8007a80 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	212c      	movs	r1, #44	; 0x2c
 8007a4e:	fb01 f303 	mul.w	r3, r1, r3
 8007a52:	4413      	add	r3, r2
 8007a54:	3361      	adds	r3, #97	; 0x61
 8007a56:	2208      	movs	r2, #8
 8007a58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	b2d2      	uxtb	r2, r2
 8007a62:	4611      	mov	r1, r2
 8007a64:	4618      	mov	r0, r3
 8007a66:	f004 feae 	bl	800c7c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a76:	461a      	mov	r2, r3
 8007a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a7c:	6093      	str	r3, [r2, #8]
}
 8007a7e:	e14a      	b.n	8007d16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	f040 813f 	bne.w	8007d16 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	212c      	movs	r1, #44	; 0x2c
 8007a9e:	fb01 f303 	mul.w	r3, r1, r3
 8007aa2:	4413      	add	r3, r2
 8007aa4:	3361      	adds	r3, #97	; 0x61
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d17d      	bne.n	8007ba8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	212c      	movs	r1, #44	; 0x2c
 8007ab2:	fb01 f303 	mul.w	r3, r1, r3
 8007ab6:	4413      	add	r3, r2
 8007ab8:	3360      	adds	r3, #96	; 0x60
 8007aba:	2201      	movs	r2, #1
 8007abc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	212c      	movs	r1, #44	; 0x2c
 8007ac4:	fb01 f303 	mul.w	r3, r1, r3
 8007ac8:	4413      	add	r3, r2
 8007aca:	333f      	adds	r3, #63	; 0x3f
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d00a      	beq.n	8007ae8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	212c      	movs	r1, #44	; 0x2c
 8007ad8:	fb01 f303 	mul.w	r3, r1, r3
 8007adc:	4413      	add	r3, r2
 8007ade:	333f      	adds	r3, #63	; 0x3f
 8007ae0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	f040 8100 	bne.w	8007ce8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d113      	bne.n	8007b18 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	212c      	movs	r1, #44	; 0x2c
 8007af6:	fb01 f303 	mul.w	r3, r1, r3
 8007afa:	4413      	add	r3, r2
 8007afc:	3355      	adds	r3, #85	; 0x55
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	f083 0301 	eor.w	r3, r3, #1
 8007b04:	b2d8      	uxtb	r0, r3
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	212c      	movs	r1, #44	; 0x2c
 8007b0c:	fb01 f303 	mul.w	r3, r1, r3
 8007b10:	4413      	add	r3, r2
 8007b12:	3355      	adds	r3, #85	; 0x55
 8007b14:	4602      	mov	r2, r0
 8007b16:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	f040 80e3 	bne.w	8007ce8 <HCD_HC_OUT_IRQHandler+0x69c>
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	212c      	movs	r1, #44	; 0x2c
 8007b28:	fb01 f303 	mul.w	r3, r1, r3
 8007b2c:	4413      	add	r3, r2
 8007b2e:	334c      	adds	r3, #76	; 0x4c
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 80d8 	beq.w	8007ce8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	212c      	movs	r1, #44	; 0x2c
 8007b3e:	fb01 f303 	mul.w	r3, r1, r3
 8007b42:	4413      	add	r3, r2
 8007b44:	334c      	adds	r3, #76	; 0x4c
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6879      	ldr	r1, [r7, #4]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	202c      	movs	r0, #44	; 0x2c
 8007b4e:	fb00 f202 	mul.w	r2, r0, r2
 8007b52:	440a      	add	r2, r1
 8007b54:	3240      	adds	r2, #64	; 0x40
 8007b56:	8812      	ldrh	r2, [r2, #0]
 8007b58:	4413      	add	r3, r2
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	202c      	movs	r0, #44	; 0x2c
 8007b62:	fb00 f202 	mul.w	r2, r0, r2
 8007b66:	440a      	add	r2, r1
 8007b68:	3240      	adds	r2, #64	; 0x40
 8007b6a:	8812      	ldrh	r2, [r2, #0]
 8007b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b70:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 80b5 	beq.w	8007ce8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	212c      	movs	r1, #44	; 0x2c
 8007b84:	fb01 f303 	mul.w	r3, r1, r3
 8007b88:	4413      	add	r3, r2
 8007b8a:	3355      	adds	r3, #85	; 0x55
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	f083 0301 	eor.w	r3, r3, #1
 8007b92:	b2d8      	uxtb	r0, r3
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	212c      	movs	r1, #44	; 0x2c
 8007b9a:	fb01 f303 	mul.w	r3, r1, r3
 8007b9e:	4413      	add	r3, r2
 8007ba0:	3355      	adds	r3, #85	; 0x55
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	e09f      	b.n	8007ce8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	212c      	movs	r1, #44	; 0x2c
 8007bae:	fb01 f303 	mul.w	r3, r1, r3
 8007bb2:	4413      	add	r3, r2
 8007bb4:	3361      	adds	r3, #97	; 0x61
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d109      	bne.n	8007bd0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	212c      	movs	r1, #44	; 0x2c
 8007bc2:	fb01 f303 	mul.w	r3, r1, r3
 8007bc6:	4413      	add	r3, r2
 8007bc8:	3360      	adds	r3, #96	; 0x60
 8007bca:	2202      	movs	r2, #2
 8007bcc:	701a      	strb	r2, [r3, #0]
 8007bce:	e08b      	b.n	8007ce8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	212c      	movs	r1, #44	; 0x2c
 8007bd6:	fb01 f303 	mul.w	r3, r1, r3
 8007bda:	4413      	add	r3, r2
 8007bdc:	3361      	adds	r3, #97	; 0x61
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b04      	cmp	r3, #4
 8007be2:	d109      	bne.n	8007bf8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	212c      	movs	r1, #44	; 0x2c
 8007bea:	fb01 f303 	mul.w	r3, r1, r3
 8007bee:	4413      	add	r3, r2
 8007bf0:	3360      	adds	r3, #96	; 0x60
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	701a      	strb	r2, [r3, #0]
 8007bf6:	e077      	b.n	8007ce8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	212c      	movs	r1, #44	; 0x2c
 8007bfe:	fb01 f303 	mul.w	r3, r1, r3
 8007c02:	4413      	add	r3, r2
 8007c04:	3361      	adds	r3, #97	; 0x61
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2b05      	cmp	r3, #5
 8007c0a:	d109      	bne.n	8007c20 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	212c      	movs	r1, #44	; 0x2c
 8007c12:	fb01 f303 	mul.w	r3, r1, r3
 8007c16:	4413      	add	r3, r2
 8007c18:	3360      	adds	r3, #96	; 0x60
 8007c1a:	2205      	movs	r2, #5
 8007c1c:	701a      	strb	r2, [r3, #0]
 8007c1e:	e063      	b.n	8007ce8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	212c      	movs	r1, #44	; 0x2c
 8007c26:	fb01 f303 	mul.w	r3, r1, r3
 8007c2a:	4413      	add	r3, r2
 8007c2c:	3361      	adds	r3, #97	; 0x61
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b06      	cmp	r3, #6
 8007c32:	d009      	beq.n	8007c48 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	212c      	movs	r1, #44	; 0x2c
 8007c3a:	fb01 f303 	mul.w	r3, r1, r3
 8007c3e:	4413      	add	r3, r2
 8007c40:	3361      	adds	r3, #97	; 0x61
 8007c42:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d14f      	bne.n	8007ce8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	212c      	movs	r1, #44	; 0x2c
 8007c4e:	fb01 f303 	mul.w	r3, r1, r3
 8007c52:	4413      	add	r3, r2
 8007c54:	335c      	adds	r3, #92	; 0x5c
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	6879      	ldr	r1, [r7, #4]
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	202c      	movs	r0, #44	; 0x2c
 8007c60:	fb00 f303 	mul.w	r3, r0, r3
 8007c64:	440b      	add	r3, r1
 8007c66:	335c      	adds	r3, #92	; 0x5c
 8007c68:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	212c      	movs	r1, #44	; 0x2c
 8007c70:	fb01 f303 	mul.w	r3, r1, r3
 8007c74:	4413      	add	r3, r2
 8007c76:	335c      	adds	r3, #92	; 0x5c
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d912      	bls.n	8007ca4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	212c      	movs	r1, #44	; 0x2c
 8007c84:	fb01 f303 	mul.w	r3, r1, r3
 8007c88:	4413      	add	r3, r2
 8007c8a:	335c      	adds	r3, #92	; 0x5c
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	212c      	movs	r1, #44	; 0x2c
 8007c96:	fb01 f303 	mul.w	r3, r1, r3
 8007c9a:	4413      	add	r3, r2
 8007c9c:	3360      	adds	r3, #96	; 0x60
 8007c9e:	2204      	movs	r2, #4
 8007ca0:	701a      	strb	r2, [r3, #0]
 8007ca2:	e021      	b.n	8007ce8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	212c      	movs	r1, #44	; 0x2c
 8007caa:	fb01 f303 	mul.w	r3, r1, r3
 8007cae:	4413      	add	r3, r2
 8007cb0:	3360      	adds	r3, #96	; 0x60
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ccc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cd4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	b2d9      	uxtb	r1, r3
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	202c      	movs	r0, #44	; 0x2c
 8007d04:	fb00 f303 	mul.w	r3, r0, r3
 8007d08:	4413      	add	r3, r2
 8007d0a:	3360      	adds	r3, #96	; 0x60
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f006 fffb 	bl	800ed0c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007d16:	bf00      	nop
 8007d18:	3720      	adds	r7, #32
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b08a      	sub	sp, #40	; 0x28
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	f003 030f 	and.w	r3, r3, #15
 8007d3e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	0c5b      	lsrs	r3, r3, #17
 8007d44:	f003 030f 	and.w	r3, r3, #15
 8007d48:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	091b      	lsrs	r3, r3, #4
 8007d4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d52:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d004      	beq.n	8007d64 <HCD_RXQLVL_IRQHandler+0x46>
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b05      	cmp	r3, #5
 8007d5e:	f000 80a9 	beq.w	8007eb4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007d62:	e0aa      	b.n	8007eba <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 80a6 	beq.w	8007eb8 <HCD_RXQLVL_IRQHandler+0x19a>
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	212c      	movs	r1, #44	; 0x2c
 8007d72:	fb01 f303 	mul.w	r3, r1, r3
 8007d76:	4413      	add	r3, r2
 8007d78:	3344      	adds	r3, #68	; 0x44
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 809b 	beq.w	8007eb8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	212c      	movs	r1, #44	; 0x2c
 8007d88:	fb01 f303 	mul.w	r3, r1, r3
 8007d8c:	4413      	add	r3, r2
 8007d8e:	3350      	adds	r3, #80	; 0x50
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	441a      	add	r2, r3
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	202c      	movs	r0, #44	; 0x2c
 8007d9c:	fb00 f303 	mul.w	r3, r0, r3
 8007da0:	440b      	add	r3, r1
 8007da2:	334c      	adds	r3, #76	; 0x4c
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d87a      	bhi.n	8007ea0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	212c      	movs	r1, #44	; 0x2c
 8007db4:	fb01 f303 	mul.w	r3, r1, r3
 8007db8:	4413      	add	r3, r2
 8007dba:	3344      	adds	r3, #68	; 0x44
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	b292      	uxth	r2, r2
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	f004 f856 	bl	800be74 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	212c      	movs	r1, #44	; 0x2c
 8007dce:	fb01 f303 	mul.w	r3, r1, r3
 8007dd2:	4413      	add	r3, r2
 8007dd4:	3344      	adds	r3, #68	; 0x44
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	441a      	add	r2, r3
 8007ddc:	6879      	ldr	r1, [r7, #4]
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	202c      	movs	r0, #44	; 0x2c
 8007de2:	fb00 f303 	mul.w	r3, r0, r3
 8007de6:	440b      	add	r3, r1
 8007de8:	3344      	adds	r3, #68	; 0x44
 8007dea:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	212c      	movs	r1, #44	; 0x2c
 8007df2:	fb01 f303 	mul.w	r3, r1, r3
 8007df6:	4413      	add	r3, r2
 8007df8:	3350      	adds	r3, #80	; 0x50
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	441a      	add	r2, r3
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	202c      	movs	r0, #44	; 0x2c
 8007e06:	fb00 f303 	mul.w	r3, r0, r3
 8007e0a:	440b      	add	r3, r1
 8007e0c:	3350      	adds	r3, #80	; 0x50
 8007e0e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	0cdb      	lsrs	r3, r3, #19
 8007e20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e24:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	212c      	movs	r1, #44	; 0x2c
 8007e2c:	fb01 f303 	mul.w	r3, r1, r3
 8007e30:	4413      	add	r3, r2
 8007e32:	3340      	adds	r3, #64	; 0x40
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	461a      	mov	r2, r3
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d13c      	bne.n	8007eb8 <HCD_RXQLVL_IRQHandler+0x19a>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d039      	beq.n	8007eb8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e5a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e62:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e70:	461a      	mov	r2, r3
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	212c      	movs	r1, #44	; 0x2c
 8007e7c:	fb01 f303 	mul.w	r3, r1, r3
 8007e80:	4413      	add	r3, r2
 8007e82:	3354      	adds	r3, #84	; 0x54
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	f083 0301 	eor.w	r3, r3, #1
 8007e8a:	b2d8      	uxtb	r0, r3
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	212c      	movs	r1, #44	; 0x2c
 8007e92:	fb01 f303 	mul.w	r3, r1, r3
 8007e96:	4413      	add	r3, r2
 8007e98:	3354      	adds	r3, #84	; 0x54
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	701a      	strb	r2, [r3, #0]
      break;
 8007e9e:	e00b      	b.n	8007eb8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	212c      	movs	r1, #44	; 0x2c
 8007ea6:	fb01 f303 	mul.w	r3, r1, r3
 8007eaa:	4413      	add	r3, r2
 8007eac:	3360      	adds	r3, #96	; 0x60
 8007eae:	2204      	movs	r2, #4
 8007eb0:	701a      	strb	r2, [r3, #0]
      break;
 8007eb2:	e001      	b.n	8007eb8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007eb4:	bf00      	nop
 8007eb6:	e000      	b.n	8007eba <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007eb8:	bf00      	nop
  }
}
 8007eba:	bf00      	nop
 8007ebc:	3728      	adds	r7, #40	; 0x28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b086      	sub	sp, #24
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007eee:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d10b      	bne.n	8007f12 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d102      	bne.n	8007f0a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f006 fee5 	bl	800ecd4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f043 0302 	orr.w	r3, r3, #2
 8007f10:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f003 0308 	and.w	r3, r3, #8
 8007f18:	2b08      	cmp	r3, #8
 8007f1a:	d132      	bne.n	8007f82 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	f043 0308 	orr.w	r3, r3, #8
 8007f22:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f003 0304 	and.w	r3, r3, #4
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d126      	bne.n	8007f7c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d113      	bne.n	8007f5e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007f3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f40:	d106      	bne.n	8007f50 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2102      	movs	r1, #2
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f004 f901 	bl	800c150 <USB_InitFSLSPClkSel>
 8007f4e:	e011      	b.n	8007f74 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2101      	movs	r1, #1
 8007f56:	4618      	mov	r0, r3
 8007f58:	f004 f8fa 	bl	800c150 <USB_InitFSLSPClkSel>
 8007f5c:	e00a      	b.n	8007f74 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d106      	bne.n	8007f74 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007f72:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f006 fed7 	bl	800ed28 <HAL_HCD_PortEnabled_Callback>
 8007f7a:	e002      	b.n	8007f82 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f006 fee1 	bl	800ed44 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b20      	cmp	r3, #32
 8007f8a:	d103      	bne.n	8007f94 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	f043 0320 	orr.w	r3, r3, #32
 8007f92:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	6013      	str	r3, [r2, #0]
}
 8007fa0:	bf00      	nop
 8007fa2:	3718      	adds	r7, #24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e12b      	b.n	8008212 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d106      	bne.n	8007fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7fc ffd0 	bl	8004f74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2224      	movs	r2, #36	; 0x24
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f022 0201 	bic.w	r2, r2, #1
 8007fea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ffa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800800a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800800c:	f001 fa20 	bl	8009450 <HAL_RCC_GetPCLK1Freq>
 8008010:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	4a81      	ldr	r2, [pc, #516]	; (800821c <HAL_I2C_Init+0x274>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d807      	bhi.n	800802c <HAL_I2C_Init+0x84>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4a80      	ldr	r2, [pc, #512]	; (8008220 <HAL_I2C_Init+0x278>)
 8008020:	4293      	cmp	r3, r2
 8008022:	bf94      	ite	ls
 8008024:	2301      	movls	r3, #1
 8008026:	2300      	movhi	r3, #0
 8008028:	b2db      	uxtb	r3, r3
 800802a:	e006      	b.n	800803a <HAL_I2C_Init+0x92>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4a7d      	ldr	r2, [pc, #500]	; (8008224 <HAL_I2C_Init+0x27c>)
 8008030:	4293      	cmp	r3, r2
 8008032:	bf94      	ite	ls
 8008034:	2301      	movls	r3, #1
 8008036:	2300      	movhi	r3, #0
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e0e7      	b.n	8008212 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	4a78      	ldr	r2, [pc, #480]	; (8008228 <HAL_I2C_Init+0x280>)
 8008046:	fba2 2303 	umull	r2, r3, r2, r3
 800804a:	0c9b      	lsrs	r3, r3, #18
 800804c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	430a      	orrs	r2, r1
 8008060:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6a1b      	ldr	r3, [r3, #32]
 8008068:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	4a6a      	ldr	r2, [pc, #424]	; (800821c <HAL_I2C_Init+0x274>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d802      	bhi.n	800807c <HAL_I2C_Init+0xd4>
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	3301      	adds	r3, #1
 800807a:	e009      	b.n	8008090 <HAL_I2C_Init+0xe8>
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008082:	fb02 f303 	mul.w	r3, r2, r3
 8008086:	4a69      	ldr	r2, [pc, #420]	; (800822c <HAL_I2C_Init+0x284>)
 8008088:	fba2 2303 	umull	r2, r3, r2, r3
 800808c:	099b      	lsrs	r3, r3, #6
 800808e:	3301      	adds	r3, #1
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	6812      	ldr	r2, [r2, #0]
 8008094:	430b      	orrs	r3, r1
 8008096:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80080a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	495c      	ldr	r1, [pc, #368]	; (800821c <HAL_I2C_Init+0x274>)
 80080ac:	428b      	cmp	r3, r1
 80080ae:	d819      	bhi.n	80080e4 <HAL_I2C_Init+0x13c>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	1e59      	subs	r1, r3, #1
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80080be:	1c59      	adds	r1, r3, #1
 80080c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80080c4:	400b      	ands	r3, r1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <HAL_I2C_Init+0x138>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	1e59      	subs	r1, r3, #1
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80080d8:	3301      	adds	r3, #1
 80080da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080de:	e051      	b.n	8008184 <HAL_I2C_Init+0x1dc>
 80080e0:	2304      	movs	r3, #4
 80080e2:	e04f      	b.n	8008184 <HAL_I2C_Init+0x1dc>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d111      	bne.n	8008110 <HAL_I2C_Init+0x168>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	1e58      	subs	r0, r3, #1
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6859      	ldr	r1, [r3, #4]
 80080f4:	460b      	mov	r3, r1
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	440b      	add	r3, r1
 80080fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80080fe:	3301      	adds	r3, #1
 8008100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008104:	2b00      	cmp	r3, #0
 8008106:	bf0c      	ite	eq
 8008108:	2301      	moveq	r3, #1
 800810a:	2300      	movne	r3, #0
 800810c:	b2db      	uxtb	r3, r3
 800810e:	e012      	b.n	8008136 <HAL_I2C_Init+0x18e>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	1e58      	subs	r0, r3, #1
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6859      	ldr	r1, [r3, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	440b      	add	r3, r1
 800811e:	0099      	lsls	r1, r3, #2
 8008120:	440b      	add	r3, r1
 8008122:	fbb0 f3f3 	udiv	r3, r0, r3
 8008126:	3301      	adds	r3, #1
 8008128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800812c:	2b00      	cmp	r3, #0
 800812e:	bf0c      	ite	eq
 8008130:	2301      	moveq	r3, #1
 8008132:	2300      	movne	r3, #0
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <HAL_I2C_Init+0x196>
 800813a:	2301      	movs	r3, #1
 800813c:	e022      	b.n	8008184 <HAL_I2C_Init+0x1dc>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10e      	bne.n	8008164 <HAL_I2C_Init+0x1bc>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	1e58      	subs	r0, r3, #1
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6859      	ldr	r1, [r3, #4]
 800814e:	460b      	mov	r3, r1
 8008150:	005b      	lsls	r3, r3, #1
 8008152:	440b      	add	r3, r1
 8008154:	fbb0 f3f3 	udiv	r3, r0, r3
 8008158:	3301      	adds	r3, #1
 800815a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800815e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008162:	e00f      	b.n	8008184 <HAL_I2C_Init+0x1dc>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	1e58      	subs	r0, r3, #1
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6859      	ldr	r1, [r3, #4]
 800816c:	460b      	mov	r3, r1
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	440b      	add	r3, r1
 8008172:	0099      	lsls	r1, r3, #2
 8008174:	440b      	add	r3, r1
 8008176:	fbb0 f3f3 	udiv	r3, r0, r3
 800817a:	3301      	adds	r3, #1
 800817c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008180:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008184:	6879      	ldr	r1, [r7, #4]
 8008186:	6809      	ldr	r1, [r1, #0]
 8008188:	4313      	orrs	r3, r2
 800818a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	69da      	ldr	r2, [r3, #28]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	431a      	orrs	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80081b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	6911      	ldr	r1, [r2, #16]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	68d2      	ldr	r2, [r2, #12]
 80081be:	4311      	orrs	r1, r2
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	430b      	orrs	r3, r1
 80081c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	695a      	ldr	r2, [r3, #20]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	430a      	orrs	r2, r1
 80081e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f042 0201 	orr.w	r2, r2, #1
 80081f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2220      	movs	r2, #32
 80081fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	000186a0 	.word	0x000186a0
 8008220:	001e847f 	.word	0x001e847f
 8008224:	003d08ff 	.word	0x003d08ff
 8008228:	431bde83 	.word	0x431bde83
 800822c:	10624dd3 	.word	0x10624dd3

08008230 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e128      	b.n	8008494 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d109      	bne.n	8008262 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a90      	ldr	r2, [pc, #576]	; (800849c <HAL_I2S_Init+0x26c>)
 800825a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7fc fed1 	bl	8005004 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2202      	movs	r2, #2
 8008266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	6812      	ldr	r2, [r2, #0]
 8008274:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008278:	f023 030f 	bic.w	r3, r3, #15
 800827c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2202      	movs	r2, #2
 8008284:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	2b02      	cmp	r3, #2
 800828c:	d060      	beq.n	8008350 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d102      	bne.n	800829c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008296:	2310      	movs	r3, #16
 8008298:	617b      	str	r3, [r7, #20]
 800829a:	e001      	b.n	80082a0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800829c:	2320      	movs	r3, #32
 800829e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	d802      	bhi.n	80082ae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80082ae:	2001      	movs	r0, #1
 80082b0:	f001 f9e6 	bl	8009680 <HAL_RCCEx_GetPeriphCLKFreq>
 80082b4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082be:	d125      	bne.n	800830c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d010      	beq.n	80082ea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80082d2:	4613      	mov	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4413      	add	r3, r2
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	461a      	mov	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082e4:	3305      	adds	r3, #5
 80082e6:	613b      	str	r3, [r7, #16]
 80082e8:	e01f      	b.n	800832a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	00db      	lsls	r3, r3, #3
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80082f4:	4613      	mov	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	461a      	mov	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	fbb2 f3f3 	udiv	r3, r2, r3
 8008306:	3305      	adds	r3, #5
 8008308:	613b      	str	r3, [r7, #16]
 800830a:	e00e      	b.n	800832a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	fbb2 f2f3 	udiv	r2, r2, r3
 8008314:	4613      	mov	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	461a      	mov	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	fbb2 f3f3 	udiv	r3, r2, r3
 8008326:	3305      	adds	r3, #5
 8008328:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	4a5c      	ldr	r2, [pc, #368]	; (80084a0 <HAL_I2S_Init+0x270>)
 800832e:	fba2 2303 	umull	r2, r3, r2, r3
 8008332:	08db      	lsrs	r3, r3, #3
 8008334:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	085b      	lsrs	r3, r3, #1
 8008346:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	021b      	lsls	r3, r3, #8
 800834c:	61bb      	str	r3, [r7, #24]
 800834e:	e003      	b.n	8008358 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008350:	2302      	movs	r3, #2
 8008352:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d902      	bls.n	8008364 <HAL_I2S_Init+0x134>
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	2bff      	cmp	r3, #255	; 0xff
 8008362:	d907      	bls.n	8008374 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008368:	f043 0210 	orr.w	r2, r3, #16
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e08f      	b.n	8008494 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	691a      	ldr	r2, [r3, #16]
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	ea42 0103 	orr.w	r1, r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	69fa      	ldr	r2, [r7, #28]
 8008384:	430a      	orrs	r2, r1
 8008386:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008392:	f023 030f 	bic.w	r3, r3, #15
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	6851      	ldr	r1, [r2, #4]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	6892      	ldr	r2, [r2, #8]
 800839e:	4311      	orrs	r1, r2
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	68d2      	ldr	r2, [r2, #12]
 80083a4:	4311      	orrs	r1, r2
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	6992      	ldr	r2, [r2, #24]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	431a      	orrs	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083b6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d161      	bne.n	8008484 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a38      	ldr	r2, [pc, #224]	; (80084a4 <HAL_I2S_Init+0x274>)
 80083c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a37      	ldr	r2, [pc, #220]	; (80084a8 <HAL_I2S_Init+0x278>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d101      	bne.n	80083d4 <HAL_I2S_Init+0x1a4>
 80083d0:	4b36      	ldr	r3, [pc, #216]	; (80084ac <HAL_I2S_Init+0x27c>)
 80083d2:	e001      	b.n	80083d8 <HAL_I2S_Init+0x1a8>
 80083d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	6812      	ldr	r2, [r2, #0]
 80083de:	4932      	ldr	r1, [pc, #200]	; (80084a8 <HAL_I2S_Init+0x278>)
 80083e0:	428a      	cmp	r2, r1
 80083e2:	d101      	bne.n	80083e8 <HAL_I2S_Init+0x1b8>
 80083e4:	4a31      	ldr	r2, [pc, #196]	; (80084ac <HAL_I2S_Init+0x27c>)
 80083e6:	e001      	b.n	80083ec <HAL_I2S_Init+0x1bc>
 80083e8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80083ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80083f0:	f023 030f 	bic.w	r3, r3, #15
 80083f4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a2b      	ldr	r2, [pc, #172]	; (80084a8 <HAL_I2S_Init+0x278>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d101      	bne.n	8008404 <HAL_I2S_Init+0x1d4>
 8008400:	4b2a      	ldr	r3, [pc, #168]	; (80084ac <HAL_I2S_Init+0x27c>)
 8008402:	e001      	b.n	8008408 <HAL_I2S_Init+0x1d8>
 8008404:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008408:	2202      	movs	r2, #2
 800840a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a25      	ldr	r2, [pc, #148]	; (80084a8 <HAL_I2S_Init+0x278>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d101      	bne.n	800841a <HAL_I2S_Init+0x1ea>
 8008416:	4b25      	ldr	r3, [pc, #148]	; (80084ac <HAL_I2S_Init+0x27c>)
 8008418:	e001      	b.n	800841e <HAL_I2S_Init+0x1ee>
 800841a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800842a:	d003      	beq.n	8008434 <HAL_I2S_Init+0x204>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d103      	bne.n	800843c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8008434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008438:	613b      	str	r3, [r7, #16]
 800843a:	e001      	b.n	8008440 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800843c:	2300      	movs	r3, #0
 800843e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800844a:	4313      	orrs	r3, r2
 800844c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008454:	4313      	orrs	r3, r2
 8008456:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800845e:	4313      	orrs	r3, r2
 8008460:	b29a      	uxth	r2, r3
 8008462:	897b      	ldrh	r3, [r7, #10]
 8008464:	4313      	orrs	r3, r2
 8008466:	b29b      	uxth	r3, r3
 8008468:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800846c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a0d      	ldr	r2, [pc, #52]	; (80084a8 <HAL_I2S_Init+0x278>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d101      	bne.n	800847c <HAL_I2S_Init+0x24c>
 8008478:	4b0c      	ldr	r3, [pc, #48]	; (80084ac <HAL_I2S_Init+0x27c>)
 800847a:	e001      	b.n	8008480 <HAL_I2S_Init+0x250>
 800847c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008480:	897a      	ldrh	r2, [r7, #10]
 8008482:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3720      	adds	r7, #32
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	080085a7 	.word	0x080085a7
 80084a0:	cccccccd 	.word	0xcccccccd
 80084a4:	080086bd 	.word	0x080086bd
 80084a8:	40003800 	.word	0x40003800
 80084ac:	40003400 	.word	0x40003400

080084b0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	881a      	ldrh	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	1c9a      	adds	r2, r3, #2
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800850e:	b29b      	uxth	r3, r3
 8008510:	3b01      	subs	r3, #1
 8008512:	b29a      	uxth	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800851c:	b29b      	uxth	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10e      	bne.n	8008540 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008530:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff ffb8 	bl	80084b0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	b292      	uxth	r2, r2
 800855c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008562:	1c9a      	adds	r2, r3, #2
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800856c:	b29b      	uxth	r3, r3
 800856e:	3b01      	subs	r3, #1
 8008570:	b29a      	uxth	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800857a:	b29b      	uxth	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10e      	bne.n	800859e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800858e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7ff ff93 	bl	80084c4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b086      	sub	sp, #24
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d13a      	bne.n	8008638 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d109      	bne.n	80085e0 <I2S_IRQHandler+0x3a>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d6:	2b40      	cmp	r3, #64	; 0x40
 80085d8:	d102      	bne.n	80085e0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7ff ffb4 	bl	8008548 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e6:	2b40      	cmp	r3, #64	; 0x40
 80085e8:	d126      	bne.n	8008638 <I2S_IRQHandler+0x92>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f003 0320 	and.w	r3, r3, #32
 80085f4:	2b20      	cmp	r3, #32
 80085f6:	d11f      	bne.n	8008638 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008606:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008608:	2300      	movs	r3, #0
 800860a:	613b      	str	r3, [r7, #16]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	613b      	str	r3, [r7, #16]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	613b      	str	r3, [r7, #16]
 800861c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862a:	f043 0202 	orr.w	r2, r3, #2
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7ff ff50 	bl	80084d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b03      	cmp	r3, #3
 8008642:	d136      	bne.n	80086b2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b02      	cmp	r3, #2
 800864c:	d109      	bne.n	8008662 <I2S_IRQHandler+0xbc>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008658:	2b80      	cmp	r3, #128	; 0x80
 800865a:	d102      	bne.n	8008662 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f7ff ff45 	bl	80084ec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f003 0308 	and.w	r3, r3, #8
 8008668:	2b08      	cmp	r3, #8
 800866a:	d122      	bne.n	80086b2 <I2S_IRQHandler+0x10c>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f003 0320 	and.w	r3, r3, #32
 8008676:	2b20      	cmp	r3, #32
 8008678:	d11b      	bne.n	80086b2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008688:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800868a:	2300      	movs	r3, #0
 800868c:	60fb      	str	r3, [r7, #12]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a4:	f043 0204 	orr.w	r2, r3, #4
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7ff ff13 	bl	80084d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80086b2:	bf00      	nop
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
	...

080086bc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a92      	ldr	r2, [pc, #584]	; (800891c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d101      	bne.n	80086da <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80086d6:	4b92      	ldr	r3, [pc, #584]	; (8008920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80086d8:	e001      	b.n	80086de <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80086da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a8b      	ldr	r2, [pc, #556]	; (800891c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d101      	bne.n	80086f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80086f4:	4b8a      	ldr	r3, [pc, #552]	; (8008920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80086f6:	e001      	b.n	80086fc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80086f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008708:	d004      	beq.n	8008714 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	f040 8099 	bne.w	8008846 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	2b02      	cmp	r3, #2
 800871c:	d107      	bne.n	800872e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f925 	bl	8008978 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b01      	cmp	r3, #1
 8008736:	d107      	bne.n	8008748 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f9c8 	bl	8008ad8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874e:	2b40      	cmp	r3, #64	; 0x40
 8008750:	d13a      	bne.n	80087c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f003 0320 	and.w	r3, r3, #32
 8008758:	2b00      	cmp	r3, #0
 800875a:	d035      	beq.n	80087c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a6e      	ldr	r2, [pc, #440]	; (800891c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d101      	bne.n	800876a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8008766:	4b6e      	ldr	r3, [pc, #440]	; (8008920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008768:	e001      	b.n	800876e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800876a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4969      	ldr	r1, [pc, #420]	; (800891c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008776:	428b      	cmp	r3, r1
 8008778:	d101      	bne.n	800877e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800877a:	4b69      	ldr	r3, [pc, #420]	; (8008920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800877c:	e001      	b.n	8008782 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800877e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008782:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008786:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008796:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	60fb      	str	r3, [r7, #12]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ba:	f043 0202 	orr.w	r2, r3, #2
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff fe88 	bl	80084d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	f003 0308 	and.w	r3, r3, #8
 80087ce:	2b08      	cmp	r3, #8
 80087d0:	f040 80c3 	bne.w	800895a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	f003 0320 	and.w	r3, r3, #32
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 80bd 	beq.w	800895a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80087ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a49      	ldr	r2, [pc, #292]	; (800891c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d101      	bne.n	80087fe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80087fa:	4b49      	ldr	r3, [pc, #292]	; (8008920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80087fc:	e001      	b.n	8008802 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80087fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4944      	ldr	r1, [pc, #272]	; (800891c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800880a:	428b      	cmp	r3, r1
 800880c:	d101      	bne.n	8008812 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800880e:	4b44      	ldr	r3, [pc, #272]	; (8008920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008810:	e001      	b.n	8008816 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8008812:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008816:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800881a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800881c:	2300      	movs	r3, #0
 800881e:	60bb      	str	r3, [r7, #8]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	60bb      	str	r3, [r7, #8]
 8008828:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008836:	f043 0204 	orr.w	r2, r3, #4
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff fe4a 	bl	80084d8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008844:	e089      	b.n	800895a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b02      	cmp	r3, #2
 800884e:	d107      	bne.n	8008860 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008856:	2b00      	cmp	r3, #0
 8008858:	d002      	beq.n	8008860 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f8be 	bl	80089dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	f003 0301 	and.w	r3, r3, #1
 8008866:	2b01      	cmp	r3, #1
 8008868:	d107      	bne.n	800887a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008870:	2b00      	cmp	r3, #0
 8008872:	d002      	beq.n	800887a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f8fd 	bl	8008a74 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008880:	2b40      	cmp	r3, #64	; 0x40
 8008882:	d12f      	bne.n	80088e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	f003 0320 	and.w	r3, r3, #32
 800888a:	2b00      	cmp	r3, #0
 800888c:	d02a      	beq.n	80088e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800889c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a1e      	ldr	r2, [pc, #120]	; (800891c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d101      	bne.n	80088ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80088a8:	4b1d      	ldr	r3, [pc, #116]	; (8008920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80088aa:	e001      	b.n	80088b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80088ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4919      	ldr	r1, [pc, #100]	; (800891c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80088b8:	428b      	cmp	r3, r1
 80088ba:	d101      	bne.n	80088c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80088bc:	4b18      	ldr	r3, [pc, #96]	; (8008920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80088be:	e001      	b.n	80088c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80088c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80088c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80088c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d6:	f043 0202 	orr.w	r2, r3, #2
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f7ff fdfa 	bl	80084d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	f003 0308 	and.w	r3, r3, #8
 80088ea:	2b08      	cmp	r3, #8
 80088ec:	d136      	bne.n	800895c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f003 0320 	and.w	r3, r3, #32
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d031      	beq.n	800895c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a07      	ldr	r2, [pc, #28]	; (800891c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d101      	bne.n	8008906 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8008902:	4b07      	ldr	r3, [pc, #28]	; (8008920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008904:	e001      	b.n	800890a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8008906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4902      	ldr	r1, [pc, #8]	; (800891c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008912:	428b      	cmp	r3, r1
 8008914:	d106      	bne.n	8008924 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8008916:	4b02      	ldr	r3, [pc, #8]	; (8008920 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008918:	e006      	b.n	8008928 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800891a:	bf00      	nop
 800891c:	40003800 	.word	0x40003800
 8008920:	40003400 	.word	0x40003400
 8008924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008928:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800892c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800893c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800894a:	f043 0204 	orr.w	r2, r3, #4
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7ff fdc0 	bl	80084d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008958:	e000      	b.n	800895c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800895a:	bf00      	nop
}
 800895c:	bf00      	nop
 800895e:	3720      	adds	r7, #32
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008984:	1c99      	adds	r1, r3, #2
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	6251      	str	r1, [r2, #36]	; 0x24
 800898a:	881a      	ldrh	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008996:	b29b      	uxth	r3, r3
 8008998:	3b01      	subs	r3, #1
 800899a:	b29a      	uxth	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d113      	bne.n	80089d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80089b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089be:	b29b      	uxth	r3, r3
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d106      	bne.n	80089d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7ff ffc9 	bl	8008964 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80089d2:	bf00      	nop
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	1c99      	adds	r1, r3, #2
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	6251      	str	r1, [r2, #36]	; 0x24
 80089ee:	8819      	ldrh	r1, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a1d      	ldr	r2, [pc, #116]	; (8008a6c <I2SEx_TxISR_I2SExt+0x90>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d101      	bne.n	80089fe <I2SEx_TxISR_I2SExt+0x22>
 80089fa:	4b1d      	ldr	r3, [pc, #116]	; (8008a70 <I2SEx_TxISR_I2SExt+0x94>)
 80089fc:	e001      	b.n	8008a02 <I2SEx_TxISR_I2SExt+0x26>
 80089fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008a02:	460a      	mov	r2, r1
 8008a04:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d121      	bne.n	8008a62 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a12      	ldr	r2, [pc, #72]	; (8008a6c <I2SEx_TxISR_I2SExt+0x90>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d101      	bne.n	8008a2c <I2SEx_TxISR_I2SExt+0x50>
 8008a28:	4b11      	ldr	r3, [pc, #68]	; (8008a70 <I2SEx_TxISR_I2SExt+0x94>)
 8008a2a:	e001      	b.n	8008a30 <I2SEx_TxISR_I2SExt+0x54>
 8008a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	490d      	ldr	r1, [pc, #52]	; (8008a6c <I2SEx_TxISR_I2SExt+0x90>)
 8008a38:	428b      	cmp	r3, r1
 8008a3a:	d101      	bne.n	8008a40 <I2SEx_TxISR_I2SExt+0x64>
 8008a3c:	4b0c      	ldr	r3, [pc, #48]	; (8008a70 <I2SEx_TxISR_I2SExt+0x94>)
 8008a3e:	e001      	b.n	8008a44 <I2SEx_TxISR_I2SExt+0x68>
 8008a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008a44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008a48:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d106      	bne.n	8008a62 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff ff81 	bl	8008964 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008a62:	bf00      	nop
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	40003800 	.word	0x40003800
 8008a70:	40003400 	.word	0x40003400

08008a74 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68d8      	ldr	r0, [r3, #12]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a86:	1c99      	adds	r1, r3, #2
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008a8c:	b282      	uxth	r2, r0
 8008a8e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	3b01      	subs	r3, #1
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d113      	bne.n	8008ad0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008ab6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d106      	bne.n	8008ad0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7ff ff4a 	bl	8008964 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a20      	ldr	r2, [pc, #128]	; (8008b68 <I2SEx_RxISR_I2SExt+0x90>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d101      	bne.n	8008aee <I2SEx_RxISR_I2SExt+0x16>
 8008aea:	4b20      	ldr	r3, [pc, #128]	; (8008b6c <I2SEx_RxISR_I2SExt+0x94>)
 8008aec:	e001      	b.n	8008af2 <I2SEx_RxISR_I2SExt+0x1a>
 8008aee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008af2:	68d8      	ldr	r0, [r3, #12]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af8:	1c99      	adds	r1, r3, #2
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008afe:	b282      	uxth	r2, r0
 8008b00:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d121      	bne.n	8008b5e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a12      	ldr	r2, [pc, #72]	; (8008b68 <I2SEx_RxISR_I2SExt+0x90>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d101      	bne.n	8008b28 <I2SEx_RxISR_I2SExt+0x50>
 8008b24:	4b11      	ldr	r3, [pc, #68]	; (8008b6c <I2SEx_RxISR_I2SExt+0x94>)
 8008b26:	e001      	b.n	8008b2c <I2SEx_RxISR_I2SExt+0x54>
 8008b28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	490d      	ldr	r1, [pc, #52]	; (8008b68 <I2SEx_RxISR_I2SExt+0x90>)
 8008b34:	428b      	cmp	r3, r1
 8008b36:	d101      	bne.n	8008b3c <I2SEx_RxISR_I2SExt+0x64>
 8008b38:	4b0c      	ldr	r3, [pc, #48]	; (8008b6c <I2SEx_RxISR_I2SExt+0x94>)
 8008b3a:	e001      	b.n	8008b40 <I2SEx_RxISR_I2SExt+0x68>
 8008b3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008b40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008b44:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d106      	bne.n	8008b5e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7ff ff03 	bl	8008964 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008b5e:	bf00      	nop
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	40003800 	.word	0x40003800
 8008b6c:	40003400 	.word	0x40003400

08008b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e267      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d075      	beq.n	8008c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b8e:	4b88      	ldr	r3, [pc, #544]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f003 030c 	and.w	r3, r3, #12
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	d00c      	beq.n	8008bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b9a:	4b85      	ldr	r3, [pc, #532]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ba2:	2b08      	cmp	r3, #8
 8008ba4:	d112      	bne.n	8008bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ba6:	4b82      	ldr	r3, [pc, #520]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bb2:	d10b      	bne.n	8008bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bb4:	4b7e      	ldr	r3, [pc, #504]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d05b      	beq.n	8008c78 <HAL_RCC_OscConfig+0x108>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d157      	bne.n	8008c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e242      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bd4:	d106      	bne.n	8008be4 <HAL_RCC_OscConfig+0x74>
 8008bd6:	4b76      	ldr	r3, [pc, #472]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a75      	ldr	r2, [pc, #468]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008be0:	6013      	str	r3, [r2, #0]
 8008be2:	e01d      	b.n	8008c20 <HAL_RCC_OscConfig+0xb0>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bec:	d10c      	bne.n	8008c08 <HAL_RCC_OscConfig+0x98>
 8008bee:	4b70      	ldr	r3, [pc, #448]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a6f      	ldr	r2, [pc, #444]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bf8:	6013      	str	r3, [r2, #0]
 8008bfa:	4b6d      	ldr	r3, [pc, #436]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a6c      	ldr	r2, [pc, #432]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c04:	6013      	str	r3, [r2, #0]
 8008c06:	e00b      	b.n	8008c20 <HAL_RCC_OscConfig+0xb0>
 8008c08:	4b69      	ldr	r3, [pc, #420]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a68      	ldr	r2, [pc, #416]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	4b66      	ldr	r3, [pc, #408]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a65      	ldr	r2, [pc, #404]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d013      	beq.n	8008c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c28:	f7fc fe88 	bl	800593c <HAL_GetTick>
 8008c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c2e:	e008      	b.n	8008c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c30:	f7fc fe84 	bl	800593c <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	2b64      	cmp	r3, #100	; 0x64
 8008c3c:	d901      	bls.n	8008c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e207      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c42:	4b5b      	ldr	r3, [pc, #364]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d0f0      	beq.n	8008c30 <HAL_RCC_OscConfig+0xc0>
 8008c4e:	e014      	b.n	8008c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c50:	f7fc fe74 	bl	800593c <HAL_GetTick>
 8008c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c56:	e008      	b.n	8008c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c58:	f7fc fe70 	bl	800593c <HAL_GetTick>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	2b64      	cmp	r3, #100	; 0x64
 8008c64:	d901      	bls.n	8008c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e1f3      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c6a:	4b51      	ldr	r3, [pc, #324]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1f0      	bne.n	8008c58 <HAL_RCC_OscConfig+0xe8>
 8008c76:	e000      	b.n	8008c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0302 	and.w	r3, r3, #2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d063      	beq.n	8008d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c86:	4b4a      	ldr	r3, [pc, #296]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f003 030c 	and.w	r3, r3, #12
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00b      	beq.n	8008caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c92:	4b47      	ldr	r3, [pc, #284]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c9a:	2b08      	cmp	r3, #8
 8008c9c:	d11c      	bne.n	8008cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c9e:	4b44      	ldr	r3, [pc, #272]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d116      	bne.n	8008cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008caa:	4b41      	ldr	r3, [pc, #260]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d005      	beq.n	8008cc2 <HAL_RCC_OscConfig+0x152>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d001      	beq.n	8008cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e1c7      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cc2:	4b3b      	ldr	r3, [pc, #236]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	4937      	ldr	r1, [pc, #220]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cd6:	e03a      	b.n	8008d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d020      	beq.n	8008d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ce0:	4b34      	ldr	r3, [pc, #208]	; (8008db4 <HAL_RCC_OscConfig+0x244>)
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ce6:	f7fc fe29 	bl	800593c <HAL_GetTick>
 8008cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cec:	e008      	b.n	8008d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cee:	f7fc fe25 	bl	800593c <HAL_GetTick>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d901      	bls.n	8008d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e1a8      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d00:	4b2b      	ldr	r3, [pc, #172]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0302 	and.w	r3, r3, #2
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d0f0      	beq.n	8008cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d0c:	4b28      	ldr	r3, [pc, #160]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	4925      	ldr	r1, [pc, #148]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	600b      	str	r3, [r1, #0]
 8008d20:	e015      	b.n	8008d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d22:	4b24      	ldr	r3, [pc, #144]	; (8008db4 <HAL_RCC_OscConfig+0x244>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d28:	f7fc fe08 	bl	800593c <HAL_GetTick>
 8008d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d2e:	e008      	b.n	8008d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d30:	f7fc fe04 	bl	800593c <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d901      	bls.n	8008d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e187      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d42:	4b1b      	ldr	r3, [pc, #108]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0302 	and.w	r3, r3, #2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1f0      	bne.n	8008d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0308 	and.w	r3, r3, #8
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d036      	beq.n	8008dc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d016      	beq.n	8008d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d62:	4b15      	ldr	r3, [pc, #84]	; (8008db8 <HAL_RCC_OscConfig+0x248>)
 8008d64:	2201      	movs	r2, #1
 8008d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d68:	f7fc fde8 	bl	800593c <HAL_GetTick>
 8008d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d6e:	e008      	b.n	8008d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d70:	f7fc fde4 	bl	800593c <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d901      	bls.n	8008d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e167      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d82:	4b0b      	ldr	r3, [pc, #44]	; (8008db0 <HAL_RCC_OscConfig+0x240>)
 8008d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d0f0      	beq.n	8008d70 <HAL_RCC_OscConfig+0x200>
 8008d8e:	e01b      	b.n	8008dc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d90:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <HAL_RCC_OscConfig+0x248>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d96:	f7fc fdd1 	bl	800593c <HAL_GetTick>
 8008d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d9c:	e00e      	b.n	8008dbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d9e:	f7fc fdcd 	bl	800593c <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d907      	bls.n	8008dbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e150      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
 8008db0:	40023800 	.word	0x40023800
 8008db4:	42470000 	.word	0x42470000
 8008db8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008dbc:	4b88      	ldr	r3, [pc, #544]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dc0:	f003 0302 	and.w	r3, r3, #2
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1ea      	bne.n	8008d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0304 	and.w	r3, r3, #4
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 8097 	beq.w	8008f04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008dda:	4b81      	ldr	r3, [pc, #516]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10f      	bne.n	8008e06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008de6:	2300      	movs	r3, #0
 8008de8:	60bb      	str	r3, [r7, #8]
 8008dea:	4b7d      	ldr	r3, [pc, #500]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dee:	4a7c      	ldr	r2, [pc, #496]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008df4:	6413      	str	r3, [r2, #64]	; 0x40
 8008df6:	4b7a      	ldr	r3, [pc, #488]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dfe:	60bb      	str	r3, [r7, #8]
 8008e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e02:	2301      	movs	r3, #1
 8008e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e06:	4b77      	ldr	r3, [pc, #476]	; (8008fe4 <HAL_RCC_OscConfig+0x474>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d118      	bne.n	8008e44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e12:	4b74      	ldr	r3, [pc, #464]	; (8008fe4 <HAL_RCC_OscConfig+0x474>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a73      	ldr	r2, [pc, #460]	; (8008fe4 <HAL_RCC_OscConfig+0x474>)
 8008e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e1e:	f7fc fd8d 	bl	800593c <HAL_GetTick>
 8008e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e24:	e008      	b.n	8008e38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e26:	f7fc fd89 	bl	800593c <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d901      	bls.n	8008e38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e10c      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e38:	4b6a      	ldr	r3, [pc, #424]	; (8008fe4 <HAL_RCC_OscConfig+0x474>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d0f0      	beq.n	8008e26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d106      	bne.n	8008e5a <HAL_RCC_OscConfig+0x2ea>
 8008e4c:	4b64      	ldr	r3, [pc, #400]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e50:	4a63      	ldr	r2, [pc, #396]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008e52:	f043 0301 	orr.w	r3, r3, #1
 8008e56:	6713      	str	r3, [r2, #112]	; 0x70
 8008e58:	e01c      	b.n	8008e94 <HAL_RCC_OscConfig+0x324>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	2b05      	cmp	r3, #5
 8008e60:	d10c      	bne.n	8008e7c <HAL_RCC_OscConfig+0x30c>
 8008e62:	4b5f      	ldr	r3, [pc, #380]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e66:	4a5e      	ldr	r2, [pc, #376]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008e68:	f043 0304 	orr.w	r3, r3, #4
 8008e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8008e6e:	4b5c      	ldr	r3, [pc, #368]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e72:	4a5b      	ldr	r2, [pc, #364]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008e74:	f043 0301 	orr.w	r3, r3, #1
 8008e78:	6713      	str	r3, [r2, #112]	; 0x70
 8008e7a:	e00b      	b.n	8008e94 <HAL_RCC_OscConfig+0x324>
 8008e7c:	4b58      	ldr	r3, [pc, #352]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e80:	4a57      	ldr	r2, [pc, #348]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008e82:	f023 0301 	bic.w	r3, r3, #1
 8008e86:	6713      	str	r3, [r2, #112]	; 0x70
 8008e88:	4b55      	ldr	r3, [pc, #340]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8c:	4a54      	ldr	r2, [pc, #336]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008e8e:	f023 0304 	bic.w	r3, r3, #4
 8008e92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d015      	beq.n	8008ec8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e9c:	f7fc fd4e 	bl	800593c <HAL_GetTick>
 8008ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ea2:	e00a      	b.n	8008eba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ea4:	f7fc fd4a 	bl	800593c <HAL_GetTick>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d901      	bls.n	8008eba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e0cb      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eba:	4b49      	ldr	r3, [pc, #292]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ebe:	f003 0302 	and.w	r3, r3, #2
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d0ee      	beq.n	8008ea4 <HAL_RCC_OscConfig+0x334>
 8008ec6:	e014      	b.n	8008ef2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ec8:	f7fc fd38 	bl	800593c <HAL_GetTick>
 8008ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ece:	e00a      	b.n	8008ee6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ed0:	f7fc fd34 	bl	800593c <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d901      	bls.n	8008ee6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e0b5      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ee6:	4b3e      	ldr	r3, [pc, #248]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eea:	f003 0302 	and.w	r3, r3, #2
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1ee      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ef2:	7dfb      	ldrb	r3, [r7, #23]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d105      	bne.n	8008f04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ef8:	4b39      	ldr	r3, [pc, #228]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efc:	4a38      	ldr	r2, [pc, #224]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f000 80a1 	beq.w	8009050 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f0e:	4b34      	ldr	r3, [pc, #208]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f003 030c 	and.w	r3, r3, #12
 8008f16:	2b08      	cmp	r3, #8
 8008f18:	d05c      	beq.n	8008fd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d141      	bne.n	8008fa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f22:	4b31      	ldr	r3, [pc, #196]	; (8008fe8 <HAL_RCC_OscConfig+0x478>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f28:	f7fc fd08 	bl	800593c <HAL_GetTick>
 8008f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f2e:	e008      	b.n	8008f42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f30:	f7fc fd04 	bl	800593c <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d901      	bls.n	8008f42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e087      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f42:	4b27      	ldr	r3, [pc, #156]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1f0      	bne.n	8008f30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	69da      	ldr	r2, [r3, #28]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	431a      	orrs	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5c:	019b      	lsls	r3, r3, #6
 8008f5e:	431a      	orrs	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f64:	085b      	lsrs	r3, r3, #1
 8008f66:	3b01      	subs	r3, #1
 8008f68:	041b      	lsls	r3, r3, #16
 8008f6a:	431a      	orrs	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f70:	061b      	lsls	r3, r3, #24
 8008f72:	491b      	ldr	r1, [pc, #108]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008f74:	4313      	orrs	r3, r2
 8008f76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f78:	4b1b      	ldr	r3, [pc, #108]	; (8008fe8 <HAL_RCC_OscConfig+0x478>)
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f7e:	f7fc fcdd 	bl	800593c <HAL_GetTick>
 8008f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f84:	e008      	b.n	8008f98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f86:	f7fc fcd9 	bl	800593c <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d901      	bls.n	8008f98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e05c      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f98:	4b11      	ldr	r3, [pc, #68]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d0f0      	beq.n	8008f86 <HAL_RCC_OscConfig+0x416>
 8008fa4:	e054      	b.n	8009050 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fa6:	4b10      	ldr	r3, [pc, #64]	; (8008fe8 <HAL_RCC_OscConfig+0x478>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fac:	f7fc fcc6 	bl	800593c <HAL_GetTick>
 8008fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fb2:	e008      	b.n	8008fc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fb4:	f7fc fcc2 	bl	800593c <HAL_GetTick>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d901      	bls.n	8008fc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e045      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fc6:	4b06      	ldr	r3, [pc, #24]	; (8008fe0 <HAL_RCC_OscConfig+0x470>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1f0      	bne.n	8008fb4 <HAL_RCC_OscConfig+0x444>
 8008fd2:	e03d      	b.n	8009050 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d107      	bne.n	8008fec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e038      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
 8008fe0:	40023800 	.word	0x40023800
 8008fe4:	40007000 	.word	0x40007000
 8008fe8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008fec:	4b1b      	ldr	r3, [pc, #108]	; (800905c <HAL_RCC_OscConfig+0x4ec>)
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d028      	beq.n	800904c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009004:	429a      	cmp	r2, r3
 8009006:	d121      	bne.n	800904c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009012:	429a      	cmp	r2, r3
 8009014:	d11a      	bne.n	800904c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800901c:	4013      	ands	r3, r2
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009022:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009024:	4293      	cmp	r3, r2
 8009026:	d111      	bne.n	800904c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009032:	085b      	lsrs	r3, r3, #1
 8009034:	3b01      	subs	r3, #1
 8009036:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009038:	429a      	cmp	r2, r3
 800903a:	d107      	bne.n	800904c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009046:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009048:	429a      	cmp	r2, r3
 800904a:	d001      	beq.n	8009050 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e000      	b.n	8009052 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3718      	adds	r7, #24
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	40023800 	.word	0x40023800

08009060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e0cc      	b.n	800920e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009074:	4b68      	ldr	r3, [pc, #416]	; (8009218 <HAL_RCC_ClockConfig+0x1b8>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0307 	and.w	r3, r3, #7
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	429a      	cmp	r2, r3
 8009080:	d90c      	bls.n	800909c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009082:	4b65      	ldr	r3, [pc, #404]	; (8009218 <HAL_RCC_ClockConfig+0x1b8>)
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	b2d2      	uxtb	r2, r2
 8009088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800908a:	4b63      	ldr	r3, [pc, #396]	; (8009218 <HAL_RCC_ClockConfig+0x1b8>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	429a      	cmp	r2, r3
 8009096:	d001      	beq.n	800909c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e0b8      	b.n	800920e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0302 	and.w	r3, r3, #2
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d020      	beq.n	80090ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0304 	and.w	r3, r3, #4
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d005      	beq.n	80090c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090b4:	4b59      	ldr	r3, [pc, #356]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	4a58      	ldr	r2, [pc, #352]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80090ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80090be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0308 	and.w	r3, r3, #8
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d005      	beq.n	80090d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090cc:	4b53      	ldr	r3, [pc, #332]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	4a52      	ldr	r2, [pc, #328]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80090d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80090d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090d8:	4b50      	ldr	r3, [pc, #320]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	494d      	ldr	r1, [pc, #308]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d044      	beq.n	8009180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d107      	bne.n	800910e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090fe:	4b47      	ldr	r3, [pc, #284]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d119      	bne.n	800913e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e07f      	b.n	800920e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	2b02      	cmp	r3, #2
 8009114:	d003      	beq.n	800911e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800911a:	2b03      	cmp	r3, #3
 800911c:	d107      	bne.n	800912e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800911e:	4b3f      	ldr	r3, [pc, #252]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d109      	bne.n	800913e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e06f      	b.n	800920e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800912e:	4b3b      	ldr	r3, [pc, #236]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0302 	and.w	r3, r3, #2
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e067      	b.n	800920e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800913e:	4b37      	ldr	r3, [pc, #220]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f023 0203 	bic.w	r2, r3, #3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	4934      	ldr	r1, [pc, #208]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 800914c:	4313      	orrs	r3, r2
 800914e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009150:	f7fc fbf4 	bl	800593c <HAL_GetTick>
 8009154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009156:	e00a      	b.n	800916e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009158:	f7fc fbf0 	bl	800593c <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	f241 3288 	movw	r2, #5000	; 0x1388
 8009166:	4293      	cmp	r3, r2
 8009168:	d901      	bls.n	800916e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e04f      	b.n	800920e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800916e:	4b2b      	ldr	r3, [pc, #172]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f003 020c 	and.w	r2, r3, #12
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	429a      	cmp	r2, r3
 800917e:	d1eb      	bne.n	8009158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009180:	4b25      	ldr	r3, [pc, #148]	; (8009218 <HAL_RCC_ClockConfig+0x1b8>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 0307 	and.w	r3, r3, #7
 8009188:	683a      	ldr	r2, [r7, #0]
 800918a:	429a      	cmp	r2, r3
 800918c:	d20c      	bcs.n	80091a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800918e:	4b22      	ldr	r3, [pc, #136]	; (8009218 <HAL_RCC_ClockConfig+0x1b8>)
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	b2d2      	uxtb	r2, r2
 8009194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009196:	4b20      	ldr	r3, [pc, #128]	; (8009218 <HAL_RCC_ClockConfig+0x1b8>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0307 	and.w	r3, r3, #7
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d001      	beq.n	80091a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e032      	b.n	800920e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0304 	and.w	r3, r3, #4
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d008      	beq.n	80091c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091b4:	4b19      	ldr	r3, [pc, #100]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	4916      	ldr	r1, [pc, #88]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0308 	and.w	r3, r3, #8
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d009      	beq.n	80091e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091d2:	4b12      	ldr	r3, [pc, #72]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	00db      	lsls	r3, r3, #3
 80091e0:	490e      	ldr	r1, [pc, #56]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80091e6:	f000 f821 	bl	800922c <HAL_RCC_GetSysClockFreq>
 80091ea:	4602      	mov	r2, r0
 80091ec:	4b0b      	ldr	r3, [pc, #44]	; (800921c <HAL_RCC_ClockConfig+0x1bc>)
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	091b      	lsrs	r3, r3, #4
 80091f2:	f003 030f 	and.w	r3, r3, #15
 80091f6:	490a      	ldr	r1, [pc, #40]	; (8009220 <HAL_RCC_ClockConfig+0x1c0>)
 80091f8:	5ccb      	ldrb	r3, [r1, r3]
 80091fa:	fa22 f303 	lsr.w	r3, r2, r3
 80091fe:	4a09      	ldr	r2, [pc, #36]	; (8009224 <HAL_RCC_ClockConfig+0x1c4>)
 8009200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009202:	4b09      	ldr	r3, [pc, #36]	; (8009228 <HAL_RCC_ClockConfig+0x1c8>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4618      	mov	r0, r3
 8009208:	f7fc fb54 	bl	80058b4 <HAL_InitTick>

  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	40023c00 	.word	0x40023c00
 800921c:	40023800 	.word	0x40023800
 8009220:	08011ff0 	.word	0x08011ff0
 8009224:	20000018 	.word	0x20000018
 8009228:	2000001c 	.word	0x2000001c

0800922c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800922c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009230:	b094      	sub	sp, #80	; 0x50
 8009232:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009234:	2300      	movs	r3, #0
 8009236:	647b      	str	r3, [r7, #68]	; 0x44
 8009238:	2300      	movs	r3, #0
 800923a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800923c:	2300      	movs	r3, #0
 800923e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009240:	2300      	movs	r3, #0
 8009242:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009244:	4b79      	ldr	r3, [pc, #484]	; (800942c <HAL_RCC_GetSysClockFreq+0x200>)
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f003 030c 	and.w	r3, r3, #12
 800924c:	2b08      	cmp	r3, #8
 800924e:	d00d      	beq.n	800926c <HAL_RCC_GetSysClockFreq+0x40>
 8009250:	2b08      	cmp	r3, #8
 8009252:	f200 80e1 	bhi.w	8009418 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <HAL_RCC_GetSysClockFreq+0x34>
 800925a:	2b04      	cmp	r3, #4
 800925c:	d003      	beq.n	8009266 <HAL_RCC_GetSysClockFreq+0x3a>
 800925e:	e0db      	b.n	8009418 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009260:	4b73      	ldr	r3, [pc, #460]	; (8009430 <HAL_RCC_GetSysClockFreq+0x204>)
 8009262:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009264:	e0db      	b.n	800941e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009266:	4b73      	ldr	r3, [pc, #460]	; (8009434 <HAL_RCC_GetSysClockFreq+0x208>)
 8009268:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800926a:	e0d8      	b.n	800941e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800926c:	4b6f      	ldr	r3, [pc, #444]	; (800942c <HAL_RCC_GetSysClockFreq+0x200>)
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009274:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009276:	4b6d      	ldr	r3, [pc, #436]	; (800942c <HAL_RCC_GetSysClockFreq+0x200>)
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d063      	beq.n	800934a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009282:	4b6a      	ldr	r3, [pc, #424]	; (800942c <HAL_RCC_GetSysClockFreq+0x200>)
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	099b      	lsrs	r3, r3, #6
 8009288:	2200      	movs	r2, #0
 800928a:	63bb      	str	r3, [r7, #56]	; 0x38
 800928c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800928e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009294:	633b      	str	r3, [r7, #48]	; 0x30
 8009296:	2300      	movs	r3, #0
 8009298:	637b      	str	r3, [r7, #52]	; 0x34
 800929a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800929e:	4622      	mov	r2, r4
 80092a0:	462b      	mov	r3, r5
 80092a2:	f04f 0000 	mov.w	r0, #0
 80092a6:	f04f 0100 	mov.w	r1, #0
 80092aa:	0159      	lsls	r1, r3, #5
 80092ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092b0:	0150      	lsls	r0, r2, #5
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	4621      	mov	r1, r4
 80092b8:	1a51      	subs	r1, r2, r1
 80092ba:	6139      	str	r1, [r7, #16]
 80092bc:	4629      	mov	r1, r5
 80092be:	eb63 0301 	sbc.w	r3, r3, r1
 80092c2:	617b      	str	r3, [r7, #20]
 80092c4:	f04f 0200 	mov.w	r2, #0
 80092c8:	f04f 0300 	mov.w	r3, #0
 80092cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092d0:	4659      	mov	r1, fp
 80092d2:	018b      	lsls	r3, r1, #6
 80092d4:	4651      	mov	r1, sl
 80092d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80092da:	4651      	mov	r1, sl
 80092dc:	018a      	lsls	r2, r1, #6
 80092de:	4651      	mov	r1, sl
 80092e0:	ebb2 0801 	subs.w	r8, r2, r1
 80092e4:	4659      	mov	r1, fp
 80092e6:	eb63 0901 	sbc.w	r9, r3, r1
 80092ea:	f04f 0200 	mov.w	r2, #0
 80092ee:	f04f 0300 	mov.w	r3, #0
 80092f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80092fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80092fe:	4690      	mov	r8, r2
 8009300:	4699      	mov	r9, r3
 8009302:	4623      	mov	r3, r4
 8009304:	eb18 0303 	adds.w	r3, r8, r3
 8009308:	60bb      	str	r3, [r7, #8]
 800930a:	462b      	mov	r3, r5
 800930c:	eb49 0303 	adc.w	r3, r9, r3
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	f04f 0200 	mov.w	r2, #0
 8009316:	f04f 0300 	mov.w	r3, #0
 800931a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800931e:	4629      	mov	r1, r5
 8009320:	024b      	lsls	r3, r1, #9
 8009322:	4621      	mov	r1, r4
 8009324:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009328:	4621      	mov	r1, r4
 800932a:	024a      	lsls	r2, r1, #9
 800932c:	4610      	mov	r0, r2
 800932e:	4619      	mov	r1, r3
 8009330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009332:	2200      	movs	r2, #0
 8009334:	62bb      	str	r3, [r7, #40]	; 0x28
 8009336:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009338:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800933c:	f7f7 fc8c 	bl	8000c58 <__aeabi_uldivmod>
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	4613      	mov	r3, r2
 8009346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009348:	e058      	b.n	80093fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800934a:	4b38      	ldr	r3, [pc, #224]	; (800942c <HAL_RCC_GetSysClockFreq+0x200>)
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	099b      	lsrs	r3, r3, #6
 8009350:	2200      	movs	r2, #0
 8009352:	4618      	mov	r0, r3
 8009354:	4611      	mov	r1, r2
 8009356:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800935a:	623b      	str	r3, [r7, #32]
 800935c:	2300      	movs	r3, #0
 800935e:	627b      	str	r3, [r7, #36]	; 0x24
 8009360:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009364:	4642      	mov	r2, r8
 8009366:	464b      	mov	r3, r9
 8009368:	f04f 0000 	mov.w	r0, #0
 800936c:	f04f 0100 	mov.w	r1, #0
 8009370:	0159      	lsls	r1, r3, #5
 8009372:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009376:	0150      	lsls	r0, r2, #5
 8009378:	4602      	mov	r2, r0
 800937a:	460b      	mov	r3, r1
 800937c:	4641      	mov	r1, r8
 800937e:	ebb2 0a01 	subs.w	sl, r2, r1
 8009382:	4649      	mov	r1, r9
 8009384:	eb63 0b01 	sbc.w	fp, r3, r1
 8009388:	f04f 0200 	mov.w	r2, #0
 800938c:	f04f 0300 	mov.w	r3, #0
 8009390:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009394:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009398:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800939c:	ebb2 040a 	subs.w	r4, r2, sl
 80093a0:	eb63 050b 	sbc.w	r5, r3, fp
 80093a4:	f04f 0200 	mov.w	r2, #0
 80093a8:	f04f 0300 	mov.w	r3, #0
 80093ac:	00eb      	lsls	r3, r5, #3
 80093ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093b2:	00e2      	lsls	r2, r4, #3
 80093b4:	4614      	mov	r4, r2
 80093b6:	461d      	mov	r5, r3
 80093b8:	4643      	mov	r3, r8
 80093ba:	18e3      	adds	r3, r4, r3
 80093bc:	603b      	str	r3, [r7, #0]
 80093be:	464b      	mov	r3, r9
 80093c0:	eb45 0303 	adc.w	r3, r5, r3
 80093c4:	607b      	str	r3, [r7, #4]
 80093c6:	f04f 0200 	mov.w	r2, #0
 80093ca:	f04f 0300 	mov.w	r3, #0
 80093ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093d2:	4629      	mov	r1, r5
 80093d4:	028b      	lsls	r3, r1, #10
 80093d6:	4621      	mov	r1, r4
 80093d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093dc:	4621      	mov	r1, r4
 80093de:	028a      	lsls	r2, r1, #10
 80093e0:	4610      	mov	r0, r2
 80093e2:	4619      	mov	r1, r3
 80093e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093e6:	2200      	movs	r2, #0
 80093e8:	61bb      	str	r3, [r7, #24]
 80093ea:	61fa      	str	r2, [r7, #28]
 80093ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093f0:	f7f7 fc32 	bl	8000c58 <__aeabi_uldivmod>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	4613      	mov	r3, r2
 80093fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80093fc:	4b0b      	ldr	r3, [pc, #44]	; (800942c <HAL_RCC_GetSysClockFreq+0x200>)
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	0c1b      	lsrs	r3, r3, #16
 8009402:	f003 0303 	and.w	r3, r3, #3
 8009406:	3301      	adds	r3, #1
 8009408:	005b      	lsls	r3, r3, #1
 800940a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800940c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800940e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009410:	fbb2 f3f3 	udiv	r3, r2, r3
 8009414:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009416:	e002      	b.n	800941e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009418:	4b05      	ldr	r3, [pc, #20]	; (8009430 <HAL_RCC_GetSysClockFreq+0x204>)
 800941a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800941c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800941e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009420:	4618      	mov	r0, r3
 8009422:	3750      	adds	r7, #80	; 0x50
 8009424:	46bd      	mov	sp, r7
 8009426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800942a:	bf00      	nop
 800942c:	40023800 	.word	0x40023800
 8009430:	00f42400 	.word	0x00f42400
 8009434:	007a1200 	.word	0x007a1200

08009438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009438:	b480      	push	{r7}
 800943a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800943c:	4b03      	ldr	r3, [pc, #12]	; (800944c <HAL_RCC_GetHCLKFreq+0x14>)
 800943e:	681b      	ldr	r3, [r3, #0]
}
 8009440:	4618      	mov	r0, r3
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	20000018 	.word	0x20000018

08009450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009454:	f7ff fff0 	bl	8009438 <HAL_RCC_GetHCLKFreq>
 8009458:	4602      	mov	r2, r0
 800945a:	4b05      	ldr	r3, [pc, #20]	; (8009470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	0a9b      	lsrs	r3, r3, #10
 8009460:	f003 0307 	and.w	r3, r3, #7
 8009464:	4903      	ldr	r1, [pc, #12]	; (8009474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009466:	5ccb      	ldrb	r3, [r1, r3]
 8009468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800946c:	4618      	mov	r0, r3
 800946e:	bd80      	pop	{r7, pc}
 8009470:	40023800 	.word	0x40023800
 8009474:	08012000 	.word	0x08012000

08009478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800947c:	f7ff ffdc 	bl	8009438 <HAL_RCC_GetHCLKFreq>
 8009480:	4602      	mov	r2, r0
 8009482:	4b05      	ldr	r3, [pc, #20]	; (8009498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	0b5b      	lsrs	r3, r3, #13
 8009488:	f003 0307 	and.w	r3, r3, #7
 800948c:	4903      	ldr	r1, [pc, #12]	; (800949c <HAL_RCC_GetPCLK2Freq+0x24>)
 800948e:	5ccb      	ldrb	r3, [r1, r3]
 8009490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009494:	4618      	mov	r0, r3
 8009496:	bd80      	pop	{r7, pc}
 8009498:	40023800 	.word	0x40023800
 800949c:	08012000 	.word	0x08012000

080094a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80094a8:	2300      	movs	r3, #0
 80094aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 0301 	and.w	r3, r3, #1
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d105      	bne.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d038      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80094c8:	4b68      	ldr	r3, [pc, #416]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80094ce:	f7fc fa35 	bl	800593c <HAL_GetTick>
 80094d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094d4:	e008      	b.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80094d6:	f7fc fa31 	bl	800593c <HAL_GetTick>
 80094da:	4602      	mov	r2, r0
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	d901      	bls.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e0bd      	b.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094e8:	4b61      	ldr	r3, [pc, #388]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1f0      	bne.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	019b      	lsls	r3, r3, #6
 80094fe:	431a      	orrs	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	071b      	lsls	r3, r3, #28
 8009506:	495a      	ldr	r1, [pc, #360]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009508:	4313      	orrs	r3, r2
 800950a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800950e:	4b57      	ldr	r3, [pc, #348]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009510:	2201      	movs	r2, #1
 8009512:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009514:	f7fc fa12 	bl	800593c <HAL_GetTick>
 8009518:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800951a:	e008      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800951c:	f7fc fa0e 	bl	800593c <HAL_GetTick>
 8009520:	4602      	mov	r2, r0
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	2b02      	cmp	r3, #2
 8009528:	d901      	bls.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e09a      	b.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800952e:	4b50      	ldr	r3, [pc, #320]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009536:	2b00      	cmp	r3, #0
 8009538:	d0f0      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f003 0302 	and.w	r3, r3, #2
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 8083 	beq.w	800964e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009548:	2300      	movs	r3, #0
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	4b48      	ldr	r3, [pc, #288]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800954e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009550:	4a47      	ldr	r2, [pc, #284]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009556:	6413      	str	r3, [r2, #64]	; 0x40
 8009558:	4b45      	ldr	r3, [pc, #276]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800955a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009564:	4b43      	ldr	r3, [pc, #268]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a42      	ldr	r2, [pc, #264]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800956a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800956e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009570:	f7fc f9e4 	bl	800593c <HAL_GetTick>
 8009574:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009576:	e008      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009578:	f7fc f9e0 	bl	800593c <HAL_GetTick>
 800957c:	4602      	mov	r2, r0
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	2b02      	cmp	r3, #2
 8009584:	d901      	bls.n	800958a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e06c      	b.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800958a:	4b3a      	ldr	r3, [pc, #232]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009592:	2b00      	cmp	r3, #0
 8009594:	d0f0      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009596:	4b36      	ldr	r3, [pc, #216]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800959e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d02f      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d028      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80095b4:	4b2e      	ldr	r3, [pc, #184]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095bc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80095be:	4b2e      	ldr	r3, [pc, #184]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80095c0:	2201      	movs	r2, #1
 80095c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80095c4:	4b2c      	ldr	r3, [pc, #176]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80095ca:	4a29      	ldr	r2, [pc, #164]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80095d0:	4b27      	ldr	r3, [pc, #156]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d4:	f003 0301 	and.w	r3, r3, #1
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d114      	bne.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80095dc:	f7fc f9ae 	bl	800593c <HAL_GetTick>
 80095e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095e2:	e00a      	b.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095e4:	f7fc f9aa 	bl	800593c <HAL_GetTick>
 80095e8:	4602      	mov	r2, r0
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	1ad3      	subs	r3, r2, r3
 80095ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d901      	bls.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80095f6:	2303      	movs	r3, #3
 80095f8:	e034      	b.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095fa:	4b1d      	ldr	r3, [pc, #116]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095fe:	f003 0302 	and.w	r3, r3, #2
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0ee      	beq.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800960e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009612:	d10d      	bne.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8009614:	4b16      	ldr	r3, [pc, #88]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009628:	4911      	ldr	r1, [pc, #68]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800962a:	4313      	orrs	r3, r2
 800962c:	608b      	str	r3, [r1, #8]
 800962e:	e005      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8009630:	4b0f      	ldr	r3, [pc, #60]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	4a0e      	ldr	r2, [pc, #56]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009636:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800963a:	6093      	str	r3, [r2, #8]
 800963c:	4b0c      	ldr	r3, [pc, #48]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800963e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009648:	4909      	ldr	r1, [pc, #36]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800964a:	4313      	orrs	r3, r2
 800964c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 0308 	and.w	r3, r3, #8
 8009656:	2b00      	cmp	r3, #0
 8009658:	d003      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	7d1a      	ldrb	r2, [r3, #20]
 800965e:	4b07      	ldr	r3, [pc, #28]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009660:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	42470068 	.word	0x42470068
 8009670:	40023800 	.word	0x40023800
 8009674:	40007000 	.word	0x40007000
 8009678:	42470e40 	.word	0x42470e40
 800967c:	424711e0 	.word	0x424711e0

08009680 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009680:	b480      	push	{r7}
 8009682:	b087      	sub	sp, #28
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8009688:	2300      	movs	r3, #0
 800968a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800968c:	2300      	movs	r3, #0
 800968e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009694:	2300      	movs	r3, #0
 8009696:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b01      	cmp	r3, #1
 800969c:	d140      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800969e:	4b24      	ldr	r3, [pc, #144]	; (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096a6:	60fb      	str	r3, [r7, #12]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d005      	beq.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d131      	bne.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80096b4:	4b1f      	ldr	r3, [pc, #124]	; (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80096b6:	617b      	str	r3, [r7, #20]
          break;
 80096b8:	e031      	b.n	800971e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80096ba:	4b1d      	ldr	r3, [pc, #116]	; (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096c6:	d109      	bne.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80096c8:	4b19      	ldr	r3, [pc, #100]	; (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80096ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096d2:	4a19      	ldr	r2, [pc, #100]	; (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80096d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d8:	613b      	str	r3, [r7, #16]
 80096da:	e008      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80096dc:	4b14      	ldr	r3, [pc, #80]	; (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80096de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096e6:	4a15      	ldr	r2, [pc, #84]	; (800973c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80096e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ec:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80096ee:	4b10      	ldr	r3, [pc, #64]	; (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80096f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096f4:	099b      	lsrs	r3, r3, #6
 80096f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	fb02 f303 	mul.w	r3, r2, r3
 8009700:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8009702:	4b0b      	ldr	r3, [pc, #44]	; (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009708:	0f1b      	lsrs	r3, r3, #28
 800970a:	f003 0307 	and.w	r3, r3, #7
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	fbb2 f3f3 	udiv	r3, r2, r3
 8009714:	617b      	str	r3, [r7, #20]
          break;
 8009716:	e002      	b.n	800971e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]
          break;
 800971c:	bf00      	nop
        }
      }
      break;
 800971e:	bf00      	nop
    }
  }
  return frequency;
 8009720:	697b      	ldr	r3, [r7, #20]
}
 8009722:	4618      	mov	r0, r3
 8009724:	371c      	adds	r7, #28
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	40023800 	.word	0x40023800
 8009734:	00bb8000 	.word	0x00bb8000
 8009738:	007a1200 	.word	0x007a1200
 800973c:	00f42400 	.word	0x00f42400

08009740 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e07b      	b.n	800984a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009756:	2b00      	cmp	r3, #0
 8009758:	d108      	bne.n	800976c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009762:	d009      	beq.n	8009778 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	61da      	str	r2, [r3, #28]
 800976a:	e005      	b.n	8009778 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d106      	bne.n	8009798 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7fb fd04 	bl	80051a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2202      	movs	r2, #2
 800979c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80097c0:	431a      	orrs	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097ca:	431a      	orrs	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	f003 0302 	and.w	r3, r3, #2
 80097d4:	431a      	orrs	r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	431a      	orrs	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097e8:	431a      	orrs	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	69db      	ldr	r3, [r3, #28]
 80097ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097f2:	431a      	orrs	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a1b      	ldr	r3, [r3, #32]
 80097f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097fc:	ea42 0103 	orr.w	r1, r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009804:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	430a      	orrs	r2, r1
 800980e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	0c1b      	lsrs	r3, r3, #16
 8009816:	f003 0104 	and.w	r1, r3, #4
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981e:	f003 0210 	and.w	r2, r3, #16
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	69da      	ldr	r2, [r3, #28]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009838:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d101      	bne.n	8009864 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e041      	b.n	80098e8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b00      	cmp	r3, #0
 800986e:	d106      	bne.n	800987e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7fb fcd9 	bl	8005230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2202      	movs	r2, #2
 8009882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	3304      	adds	r3, #4
 800988e:	4619      	mov	r1, r3
 8009890:	4610      	mov	r0, r2
 8009892:	f000 fc53 	bl	800a13c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	2b01      	cmp	r3, #1
 8009902:	d001      	beq.n	8009908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e044      	b.n	8009992 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2202      	movs	r2, #2
 800990c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68da      	ldr	r2, [r3, #12]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f042 0201 	orr.w	r2, r2, #1
 800991e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a1e      	ldr	r2, [pc, #120]	; (80099a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d018      	beq.n	800995c <HAL_TIM_Base_Start_IT+0x6c>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009932:	d013      	beq.n	800995c <HAL_TIM_Base_Start_IT+0x6c>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a1a      	ldr	r2, [pc, #104]	; (80099a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d00e      	beq.n	800995c <HAL_TIM_Base_Start_IT+0x6c>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a19      	ldr	r2, [pc, #100]	; (80099a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d009      	beq.n	800995c <HAL_TIM_Base_Start_IT+0x6c>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a17      	ldr	r2, [pc, #92]	; (80099ac <HAL_TIM_Base_Start_IT+0xbc>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d004      	beq.n	800995c <HAL_TIM_Base_Start_IT+0x6c>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a16      	ldr	r2, [pc, #88]	; (80099b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d111      	bne.n	8009980 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f003 0307 	and.w	r3, r3, #7
 8009966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2b06      	cmp	r3, #6
 800996c:	d010      	beq.n	8009990 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f042 0201 	orr.w	r2, r2, #1
 800997c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800997e:	e007      	b.n	8009990 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f042 0201 	orr.w	r2, r2, #1
 800998e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3714      	adds	r7, #20
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	40010000 	.word	0x40010000
 80099a4:	40000400 	.word	0x40000400
 80099a8:	40000800 	.word	0x40000800
 80099ac:	40000c00 	.word	0x40000c00
 80099b0:	40014000 	.word	0x40014000

080099b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d101      	bne.n	80099c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e041      	b.n	8009a4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d106      	bne.n	80099e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f839 	bl	8009a52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2202      	movs	r2, #2
 80099e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	3304      	adds	r3, #4
 80099f0:	4619      	mov	r1, r3
 80099f2:	4610      	mov	r0, r2
 80099f4:	f000 fba2 	bl	800a13c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b083      	sub	sp, #12
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009a5a:	bf00      	nop
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
	...

08009a68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d109      	bne.n	8009a8c <HAL_TIM_PWM_Start+0x24>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	bf14      	ite	ne
 8009a84:	2301      	movne	r3, #1
 8009a86:	2300      	moveq	r3, #0
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	e022      	b.n	8009ad2 <HAL_TIM_PWM_Start+0x6a>
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2b04      	cmp	r3, #4
 8009a90:	d109      	bne.n	8009aa6 <HAL_TIM_PWM_Start+0x3e>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	bf14      	ite	ne
 8009a9e:	2301      	movne	r3, #1
 8009aa0:	2300      	moveq	r3, #0
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	e015      	b.n	8009ad2 <HAL_TIM_PWM_Start+0x6a>
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	2b08      	cmp	r3, #8
 8009aaa:	d109      	bne.n	8009ac0 <HAL_TIM_PWM_Start+0x58>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	bf14      	ite	ne
 8009ab8:	2301      	movne	r3, #1
 8009aba:	2300      	moveq	r3, #0
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	e008      	b.n	8009ad2 <HAL_TIM_PWM_Start+0x6a>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	bf14      	ite	ne
 8009acc:	2301      	movne	r3, #1
 8009ace:	2300      	moveq	r3, #0
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e068      	b.n	8009bac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d104      	bne.n	8009aea <HAL_TIM_PWM_Start+0x82>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ae8:	e013      	b.n	8009b12 <HAL_TIM_PWM_Start+0xaa>
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	2b04      	cmp	r3, #4
 8009aee:	d104      	bne.n	8009afa <HAL_TIM_PWM_Start+0x92>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009af8:	e00b      	b.n	8009b12 <HAL_TIM_PWM_Start+0xaa>
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b08      	cmp	r3, #8
 8009afe:	d104      	bne.n	8009b0a <HAL_TIM_PWM_Start+0xa2>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b08:	e003      	b.n	8009b12 <HAL_TIM_PWM_Start+0xaa>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2202      	movs	r2, #2
 8009b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2201      	movs	r2, #1
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 fdb4 	bl	800a688 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a23      	ldr	r2, [pc, #140]	; (8009bb4 <HAL_TIM_PWM_Start+0x14c>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d107      	bne.n	8009b3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a1d      	ldr	r2, [pc, #116]	; (8009bb4 <HAL_TIM_PWM_Start+0x14c>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d018      	beq.n	8009b76 <HAL_TIM_PWM_Start+0x10e>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b4c:	d013      	beq.n	8009b76 <HAL_TIM_PWM_Start+0x10e>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a19      	ldr	r2, [pc, #100]	; (8009bb8 <HAL_TIM_PWM_Start+0x150>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d00e      	beq.n	8009b76 <HAL_TIM_PWM_Start+0x10e>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a17      	ldr	r2, [pc, #92]	; (8009bbc <HAL_TIM_PWM_Start+0x154>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d009      	beq.n	8009b76 <HAL_TIM_PWM_Start+0x10e>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a16      	ldr	r2, [pc, #88]	; (8009bc0 <HAL_TIM_PWM_Start+0x158>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d004      	beq.n	8009b76 <HAL_TIM_PWM_Start+0x10e>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a14      	ldr	r2, [pc, #80]	; (8009bc4 <HAL_TIM_PWM_Start+0x15c>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d111      	bne.n	8009b9a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f003 0307 	and.w	r3, r3, #7
 8009b80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b06      	cmp	r3, #6
 8009b86:	d010      	beq.n	8009baa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f042 0201 	orr.w	r2, r2, #1
 8009b96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b98:	e007      	b.n	8009baa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f042 0201 	orr.w	r2, r2, #1
 8009ba8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	40010000 	.word	0x40010000
 8009bb8:	40000400 	.word	0x40000400
 8009bbc:	40000800 	.word	0x40000800
 8009bc0:	40000c00 	.word	0x40000c00
 8009bc4:	40014000 	.word	0x40014000

08009bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	f003 0302 	and.w	r3, r3, #2
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d122      	bne.n	8009c24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d11b      	bne.n	8009c24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f06f 0202 	mvn.w	r2, #2
 8009bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	f003 0303 	and.w	r3, r3, #3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d003      	beq.n	8009c12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fa77 	bl	800a0fe <HAL_TIM_IC_CaptureCallback>
 8009c10:	e005      	b.n	8009c1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 fa69 	bl	800a0ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 fa7a 	bl	800a112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	f003 0304 	and.w	r3, r3, #4
 8009c2e:	2b04      	cmp	r3, #4
 8009c30:	d122      	bne.n	8009c78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	f003 0304 	and.w	r3, r3, #4
 8009c3c:	2b04      	cmp	r3, #4
 8009c3e:	d11b      	bne.n	8009c78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f06f 0204 	mvn.w	r2, #4
 8009c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fa4d 	bl	800a0fe <HAL_TIM_IC_CaptureCallback>
 8009c64:	e005      	b.n	8009c72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fa3f 	bl	800a0ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fa50 	bl	800a112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	f003 0308 	and.w	r3, r3, #8
 8009c82:	2b08      	cmp	r3, #8
 8009c84:	d122      	bne.n	8009ccc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	f003 0308 	and.w	r3, r3, #8
 8009c90:	2b08      	cmp	r3, #8
 8009c92:	d11b      	bne.n	8009ccc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f06f 0208 	mvn.w	r2, #8
 8009c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2204      	movs	r2, #4
 8009ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	69db      	ldr	r3, [r3, #28]
 8009caa:	f003 0303 	and.w	r3, r3, #3
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d003      	beq.n	8009cba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fa23 	bl	800a0fe <HAL_TIM_IC_CaptureCallback>
 8009cb8:	e005      	b.n	8009cc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fa15 	bl	800a0ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 fa26 	bl	800a112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	f003 0310 	and.w	r3, r3, #16
 8009cd6:	2b10      	cmp	r3, #16
 8009cd8:	d122      	bne.n	8009d20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	f003 0310 	and.w	r3, r3, #16
 8009ce4:	2b10      	cmp	r3, #16
 8009ce6:	d11b      	bne.n	8009d20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f06f 0210 	mvn.w	r2, #16
 8009cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2208      	movs	r2, #8
 8009cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f9f9 	bl	800a0fe <HAL_TIM_IC_CaptureCallback>
 8009d0c:	e005      	b.n	8009d1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f9eb 	bl	800a0ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 f9fc 	bl	800a112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d10e      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d107      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f06f 0201 	mvn.w	r2, #1
 8009d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7f7 fbd6 	bl	80014f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d56:	2b80      	cmp	r3, #128	; 0x80
 8009d58:	d10e      	bne.n	8009d78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d64:	2b80      	cmp	r3, #128	; 0x80
 8009d66:	d107      	bne.n	8009d78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fd26 	bl	800a7c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d82:	2b40      	cmp	r3, #64	; 0x40
 8009d84:	d10e      	bne.n	8009da4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d90:	2b40      	cmp	r3, #64	; 0x40
 8009d92:	d107      	bne.n	8009da4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f9c1 	bl	800a126 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	f003 0320 	and.w	r3, r3, #32
 8009dae:	2b20      	cmp	r3, #32
 8009db0:	d10e      	bne.n	8009dd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	f003 0320 	and.w	r3, r3, #32
 8009dbc:	2b20      	cmp	r3, #32
 8009dbe:	d107      	bne.n	8009dd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f06f 0220 	mvn.w	r2, #32
 8009dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fcf0 	bl	800a7b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009dd0:	bf00      	nop
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d101      	bne.n	8009df6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009df2:	2302      	movs	r3, #2
 8009df4:	e0ae      	b.n	8009f54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b0c      	cmp	r3, #12
 8009e02:	f200 809f 	bhi.w	8009f44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009e06:	a201      	add	r2, pc, #4	; (adr r2, 8009e0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0c:	08009e41 	.word	0x08009e41
 8009e10:	08009f45 	.word	0x08009f45
 8009e14:	08009f45 	.word	0x08009f45
 8009e18:	08009f45 	.word	0x08009f45
 8009e1c:	08009e81 	.word	0x08009e81
 8009e20:	08009f45 	.word	0x08009f45
 8009e24:	08009f45 	.word	0x08009f45
 8009e28:	08009f45 	.word	0x08009f45
 8009e2c:	08009ec3 	.word	0x08009ec3
 8009e30:	08009f45 	.word	0x08009f45
 8009e34:	08009f45 	.word	0x08009f45
 8009e38:	08009f45 	.word	0x08009f45
 8009e3c:	08009f03 	.word	0x08009f03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68b9      	ldr	r1, [r7, #8]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 f9f8 	bl	800a23c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	699a      	ldr	r2, [r3, #24]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f042 0208 	orr.w	r2, r2, #8
 8009e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	699a      	ldr	r2, [r3, #24]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f022 0204 	bic.w	r2, r2, #4
 8009e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6999      	ldr	r1, [r3, #24]
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	691a      	ldr	r2, [r3, #16]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	430a      	orrs	r2, r1
 8009e7c:	619a      	str	r2, [r3, #24]
      break;
 8009e7e:	e064      	b.n	8009f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68b9      	ldr	r1, [r7, #8]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 fa3e 	bl	800a308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	699a      	ldr	r2, [r3, #24]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	699a      	ldr	r2, [r3, #24]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6999      	ldr	r1, [r3, #24]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	021a      	lsls	r2, r3, #8
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	619a      	str	r2, [r3, #24]
      break;
 8009ec0:	e043      	b.n	8009f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68b9      	ldr	r1, [r7, #8]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f000 fa89 	bl	800a3e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	69da      	ldr	r2, [r3, #28]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f042 0208 	orr.w	r2, r2, #8
 8009edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	69da      	ldr	r2, [r3, #28]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f022 0204 	bic.w	r2, r2, #4
 8009eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	69d9      	ldr	r1, [r3, #28]
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	691a      	ldr	r2, [r3, #16]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	430a      	orrs	r2, r1
 8009efe:	61da      	str	r2, [r3, #28]
      break;
 8009f00:	e023      	b.n	8009f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68b9      	ldr	r1, [r7, #8]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 fad3 	bl	800a4b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	69da      	ldr	r2, [r3, #28]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	69da      	ldr	r2, [r3, #28]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	69d9      	ldr	r1, [r3, #28]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	021a      	lsls	r2, r3, #8
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	61da      	str	r2, [r3, #28]
      break;
 8009f42:	e002      	b.n	8009f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	75fb      	strb	r3, [r7, #23]
      break;
 8009f48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3718      	adds	r7, #24
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f66:	2300      	movs	r3, #0
 8009f68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d101      	bne.n	8009f78 <HAL_TIM_ConfigClockSource+0x1c>
 8009f74:	2302      	movs	r3, #2
 8009f76:	e0b4      	b.n	800a0e2 <HAL_TIM_ConfigClockSource+0x186>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2202      	movs	r2, #2
 8009f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fb0:	d03e      	beq.n	800a030 <HAL_TIM_ConfigClockSource+0xd4>
 8009fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fb6:	f200 8087 	bhi.w	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fbe:	f000 8086 	beq.w	800a0ce <HAL_TIM_ConfigClockSource+0x172>
 8009fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fc6:	d87f      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fc8:	2b70      	cmp	r3, #112	; 0x70
 8009fca:	d01a      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0xa6>
 8009fcc:	2b70      	cmp	r3, #112	; 0x70
 8009fce:	d87b      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fd0:	2b60      	cmp	r3, #96	; 0x60
 8009fd2:	d050      	beq.n	800a076 <HAL_TIM_ConfigClockSource+0x11a>
 8009fd4:	2b60      	cmp	r3, #96	; 0x60
 8009fd6:	d877      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fd8:	2b50      	cmp	r3, #80	; 0x50
 8009fda:	d03c      	beq.n	800a056 <HAL_TIM_ConfigClockSource+0xfa>
 8009fdc:	2b50      	cmp	r3, #80	; 0x50
 8009fde:	d873      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fe0:	2b40      	cmp	r3, #64	; 0x40
 8009fe2:	d058      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0x13a>
 8009fe4:	2b40      	cmp	r3, #64	; 0x40
 8009fe6:	d86f      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fe8:	2b30      	cmp	r3, #48	; 0x30
 8009fea:	d064      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0x15a>
 8009fec:	2b30      	cmp	r3, #48	; 0x30
 8009fee:	d86b      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ff0:	2b20      	cmp	r3, #32
 8009ff2:	d060      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0x15a>
 8009ff4:	2b20      	cmp	r3, #32
 8009ff6:	d867      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d05c      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0x15a>
 8009ffc:	2b10      	cmp	r3, #16
 8009ffe:	d05a      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0x15a>
 800a000:	e062      	b.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6818      	ldr	r0, [r3, #0]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	6899      	ldr	r1, [r3, #8]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	f000 fb19 	bl	800a648 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a024:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	609a      	str	r2, [r3, #8]
      break;
 800a02e:	e04f      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6818      	ldr	r0, [r3, #0]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	6899      	ldr	r1, [r3, #8]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	f000 fb02 	bl	800a648 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	689a      	ldr	r2, [r3, #8]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a052:	609a      	str	r2, [r3, #8]
      break;
 800a054:	e03c      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	6859      	ldr	r1, [r3, #4]
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	461a      	mov	r2, r3
 800a064:	f000 fa76 	bl	800a554 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2150      	movs	r1, #80	; 0x50
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 facf 	bl	800a612 <TIM_ITRx_SetConfig>
      break;
 800a074:	e02c      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6818      	ldr	r0, [r3, #0]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	6859      	ldr	r1, [r3, #4]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	461a      	mov	r2, r3
 800a084:	f000 fa95 	bl	800a5b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2160      	movs	r1, #96	; 0x60
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 fabf 	bl	800a612 <TIM_ITRx_SetConfig>
      break;
 800a094:	e01c      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6818      	ldr	r0, [r3, #0]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	6859      	ldr	r1, [r3, #4]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f000 fa56 	bl	800a554 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2140      	movs	r1, #64	; 0x40
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 faaf 	bl	800a612 <TIM_ITRx_SetConfig>
      break;
 800a0b4:	e00c      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	f000 faa6 	bl	800a612 <TIM_ITRx_SetConfig>
      break;
 800a0c6:	e003      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a0cc:	e000      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a0ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b083      	sub	sp, #12
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0f2:	bf00      	nop
 800a0f4:	370c      	adds	r7, #12
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b083      	sub	sp, #12
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a106:	bf00      	nop
 800a108:	370c      	adds	r7, #12
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a112:	b480      	push	{r7}
 800a114:	b083      	sub	sp, #12
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a11a:	bf00      	nop
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a126:	b480      	push	{r7}
 800a128:	b083      	sub	sp, #12
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a12e:	bf00      	nop
 800a130:	370c      	adds	r7, #12
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
	...

0800a13c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a34      	ldr	r2, [pc, #208]	; (800a220 <TIM_Base_SetConfig+0xe4>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d00f      	beq.n	800a174 <TIM_Base_SetConfig+0x38>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a15a:	d00b      	beq.n	800a174 <TIM_Base_SetConfig+0x38>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a31      	ldr	r2, [pc, #196]	; (800a224 <TIM_Base_SetConfig+0xe8>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d007      	beq.n	800a174 <TIM_Base_SetConfig+0x38>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a30      	ldr	r2, [pc, #192]	; (800a228 <TIM_Base_SetConfig+0xec>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d003      	beq.n	800a174 <TIM_Base_SetConfig+0x38>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a2f      	ldr	r2, [pc, #188]	; (800a22c <TIM_Base_SetConfig+0xf0>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d108      	bne.n	800a186 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a17a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	4313      	orrs	r3, r2
 800a184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a25      	ldr	r2, [pc, #148]	; (800a220 <TIM_Base_SetConfig+0xe4>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d01b      	beq.n	800a1c6 <TIM_Base_SetConfig+0x8a>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a194:	d017      	beq.n	800a1c6 <TIM_Base_SetConfig+0x8a>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a22      	ldr	r2, [pc, #136]	; (800a224 <TIM_Base_SetConfig+0xe8>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d013      	beq.n	800a1c6 <TIM_Base_SetConfig+0x8a>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a21      	ldr	r2, [pc, #132]	; (800a228 <TIM_Base_SetConfig+0xec>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d00f      	beq.n	800a1c6 <TIM_Base_SetConfig+0x8a>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a20      	ldr	r2, [pc, #128]	; (800a22c <TIM_Base_SetConfig+0xf0>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d00b      	beq.n	800a1c6 <TIM_Base_SetConfig+0x8a>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a1f      	ldr	r2, [pc, #124]	; (800a230 <TIM_Base_SetConfig+0xf4>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d007      	beq.n	800a1c6 <TIM_Base_SetConfig+0x8a>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a1e      	ldr	r2, [pc, #120]	; (800a234 <TIM_Base_SetConfig+0xf8>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d003      	beq.n	800a1c6 <TIM_Base_SetConfig+0x8a>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a1d      	ldr	r2, [pc, #116]	; (800a238 <TIM_Base_SetConfig+0xfc>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d108      	bne.n	800a1d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	689a      	ldr	r2, [r3, #8]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a08      	ldr	r2, [pc, #32]	; (800a220 <TIM_Base_SetConfig+0xe4>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d103      	bne.n	800a20c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	691a      	ldr	r2, [r3, #16]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	615a      	str	r2, [r3, #20]
}
 800a212:	bf00      	nop
 800a214:	3714      	adds	r7, #20
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	40010000 	.word	0x40010000
 800a224:	40000400 	.word	0x40000400
 800a228:	40000800 	.word	0x40000800
 800a22c:	40000c00 	.word	0x40000c00
 800a230:	40014000 	.word	0x40014000
 800a234:	40014400 	.word	0x40014400
 800a238:	40014800 	.word	0x40014800

0800a23c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b087      	sub	sp, #28
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	f023 0201 	bic.w	r2, r3, #1
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a26a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f023 0303 	bic.w	r3, r3, #3
 800a272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f023 0302 	bic.w	r3, r3, #2
 800a284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a1c      	ldr	r2, [pc, #112]	; (800a304 <TIM_OC1_SetConfig+0xc8>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d10c      	bne.n	800a2b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	f023 0308 	bic.w	r3, r3, #8
 800a29e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	697a      	ldr	r2, [r7, #20]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f023 0304 	bic.w	r3, r3, #4
 800a2b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a13      	ldr	r2, [pc, #76]	; (800a304 <TIM_OC1_SetConfig+0xc8>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d111      	bne.n	800a2de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	621a      	str	r2, [r3, #32]
}
 800a2f8:	bf00      	nop
 800a2fa:	371c      	adds	r7, #28
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	40010000 	.word	0x40010000

0800a308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a308:	b480      	push	{r7}
 800a30a:	b087      	sub	sp, #28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a1b      	ldr	r3, [r3, #32]
 800a316:	f023 0210 	bic.w	r2, r3, #16
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	699b      	ldr	r3, [r3, #24]
 800a32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a33e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	021b      	lsls	r3, r3, #8
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	4313      	orrs	r3, r2
 800a34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	f023 0320 	bic.w	r3, r3, #32
 800a352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	011b      	lsls	r3, r3, #4
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a1e      	ldr	r2, [pc, #120]	; (800a3dc <TIM_OC2_SetConfig+0xd4>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d10d      	bne.n	800a384 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a36e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	011b      	lsls	r3, r3, #4
 800a376:	697a      	ldr	r2, [r7, #20]
 800a378:	4313      	orrs	r3, r2
 800a37a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a382:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a15      	ldr	r2, [pc, #84]	; (800a3dc <TIM_OC2_SetConfig+0xd4>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d113      	bne.n	800a3b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a392:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a39a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	697a      	ldr	r2, [r7, #20]
 800a3cc:	621a      	str	r2, [r3, #32]
}
 800a3ce:	bf00      	nop
 800a3d0:	371c      	adds	r7, #28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	40010000 	.word	0x40010000

0800a3e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b087      	sub	sp, #28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	69db      	ldr	r3, [r3, #28]
 800a406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a40e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f023 0303 	bic.w	r3, r3, #3
 800a416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	4313      	orrs	r3, r2
 800a420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	021b      	lsls	r3, r3, #8
 800a430:	697a      	ldr	r2, [r7, #20]
 800a432:	4313      	orrs	r3, r2
 800a434:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a1d      	ldr	r2, [pc, #116]	; (800a4b0 <TIM_OC3_SetConfig+0xd0>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d10d      	bne.n	800a45a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	021b      	lsls	r3, r3, #8
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	4313      	orrs	r3, r2
 800a450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a14      	ldr	r2, [pc, #80]	; (800a4b0 <TIM_OC3_SetConfig+0xd0>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d113      	bne.n	800a48a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	011b      	lsls	r3, r3, #4
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	011b      	lsls	r3, r3, #4
 800a484:	693a      	ldr	r2, [r7, #16]
 800a486:	4313      	orrs	r3, r2
 800a488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	685a      	ldr	r2, [r3, #4]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	621a      	str	r2, [r3, #32]
}
 800a4a4:	bf00      	nop
 800a4a6:	371c      	adds	r7, #28
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr
 800a4b0:	40010000 	.word	0x40010000

0800a4b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b087      	sub	sp, #28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a1b      	ldr	r3, [r3, #32]
 800a4c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a1b      	ldr	r3, [r3, #32]
 800a4ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	69db      	ldr	r3, [r3, #28]
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	021b      	lsls	r3, r3, #8
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	031b      	lsls	r3, r3, #12
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	4313      	orrs	r3, r2
 800a50a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a10      	ldr	r2, [pc, #64]	; (800a550 <TIM_OC4_SetConfig+0x9c>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d109      	bne.n	800a528 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a51a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	695b      	ldr	r3, [r3, #20]
 800a520:	019b      	lsls	r3, r3, #6
 800a522:	697a      	ldr	r2, [r7, #20]
 800a524:	4313      	orrs	r3, r2
 800a526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	685a      	ldr	r2, [r3, #4]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	621a      	str	r2, [r3, #32]
}
 800a542:	bf00      	nop
 800a544:	371c      	adds	r7, #28
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	40010000 	.word	0x40010000

0800a554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a554:	b480      	push	{r7}
 800a556:	b087      	sub	sp, #28
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6a1b      	ldr	r3, [r3, #32]
 800a564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	f023 0201 	bic.w	r2, r3, #1
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a57e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	011b      	lsls	r3, r3, #4
 800a584:	693a      	ldr	r2, [r7, #16]
 800a586:	4313      	orrs	r3, r2
 800a588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f023 030a 	bic.w	r3, r3, #10
 800a590:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	4313      	orrs	r3, r2
 800a598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	621a      	str	r2, [r3, #32]
}
 800a5a6:	bf00      	nop
 800a5a8:	371c      	adds	r7, #28
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b087      	sub	sp, #28
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	60f8      	str	r0, [r7, #12]
 800a5ba:	60b9      	str	r1, [r7, #8]
 800a5bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6a1b      	ldr	r3, [r3, #32]
 800a5c2:	f023 0210 	bic.w	r2, r3, #16
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	699b      	ldr	r3, [r3, #24]
 800a5ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6a1b      	ldr	r3, [r3, #32]
 800a5d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	031b      	lsls	r3, r3, #12
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	011b      	lsls	r3, r3, #4
 800a5f4:	693a      	ldr	r2, [r7, #16]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	693a      	ldr	r2, [r7, #16]
 800a604:	621a      	str	r2, [r3, #32]
}
 800a606:	bf00      	nop
 800a608:	371c      	adds	r7, #28
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a612:	b480      	push	{r7}
 800a614:	b085      	sub	sp, #20
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	4313      	orrs	r3, r2
 800a630:	f043 0307 	orr.w	r3, r3, #7
 800a634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	609a      	str	r2, [r3, #8]
}
 800a63c:	bf00      	nop
 800a63e:	3714      	adds	r7, #20
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a648:	b480      	push	{r7}
 800a64a:	b087      	sub	sp, #28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
 800a654:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a662:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	021a      	lsls	r2, r3, #8
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	431a      	orrs	r2, r3
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	4313      	orrs	r3, r2
 800a670:	697a      	ldr	r2, [r7, #20]
 800a672:	4313      	orrs	r3, r2
 800a674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	697a      	ldr	r2, [r7, #20]
 800a67a:	609a      	str	r2, [r3, #8]
}
 800a67c:	bf00      	nop
 800a67e:	371c      	adds	r7, #28
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a688:	b480      	push	{r7}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f003 031f 	and.w	r3, r3, #31
 800a69a:	2201      	movs	r2, #1
 800a69c:	fa02 f303 	lsl.w	r3, r2, r3
 800a6a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6a1a      	ldr	r2, [r3, #32]
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	43db      	mvns	r3, r3
 800a6aa:	401a      	ands	r2, r3
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6a1a      	ldr	r2, [r3, #32]
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	f003 031f 	and.w	r3, r3, #31
 800a6ba:	6879      	ldr	r1, [r7, #4]
 800a6bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a6c0:	431a      	orrs	r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	621a      	str	r2, [r3, #32]
}
 800a6c6:	bf00      	nop
 800a6c8:	371c      	adds	r7, #28
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
	...

0800a6d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d101      	bne.n	800a6ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6e8:	2302      	movs	r3, #2
 800a6ea:	e050      	b.n	800a78e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2202      	movs	r2, #2
 800a6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a712:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a1c      	ldr	r2, [pc, #112]	; (800a79c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d018      	beq.n	800a762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a738:	d013      	beq.n	800a762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a18      	ldr	r2, [pc, #96]	; (800a7a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d00e      	beq.n	800a762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a16      	ldr	r2, [pc, #88]	; (800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d009      	beq.n	800a762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a15      	ldr	r2, [pc, #84]	; (800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d004      	beq.n	800a762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a13      	ldr	r2, [pc, #76]	; (800a7ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d10c      	bne.n	800a77c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	4313      	orrs	r3, r2
 800a772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3714      	adds	r7, #20
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	40010000 	.word	0x40010000
 800a7a0:	40000400 	.word	0x40000400
 800a7a4:	40000800 	.word	0x40000800
 800a7a8:	40000c00 	.word	0x40000c00
 800a7ac:	40014000 	.word	0x40014000

0800a7b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7b8:	bf00      	nop
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d101      	bne.n	800a7ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e03f      	b.n	800a86a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d106      	bne.n	800a804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f7fa fdb4 	bl	800536c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2224      	movs	r2, #36	; 0x24
 800a808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	68da      	ldr	r2, [r3, #12]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a81a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 ff43 	bl	800b6a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	691a      	ldr	r2, [r3, #16]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	695a      	ldr	r2, [r3, #20]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68da      	ldr	r2, [r3, #12]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2220      	movs	r2, #32
 800a85c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2220      	movs	r2, #32
 800a864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b08c      	sub	sp, #48	; 0x30
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	4613      	mov	r3, r2
 800a880:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b20      	cmp	r3, #32
 800a88c:	d165      	bne.n	800a95a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <HAL_UART_Transmit_DMA+0x26>
 800a894:	88fb      	ldrh	r3, [r7, #6]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d101      	bne.n	800a89e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	e05e      	b.n	800a95c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d101      	bne.n	800a8ac <HAL_UART_Transmit_DMA+0x38>
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	e057      	b.n	800a95c <HAL_UART_Transmit_DMA+0xe8>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	88fa      	ldrh	r2, [r7, #6]
 800a8be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	88fa      	ldrh	r2, [r7, #6]
 800a8c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2221      	movs	r2, #33	; 0x21
 800a8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d8:	4a22      	ldr	r2, [pc, #136]	; (800a964 <HAL_UART_Transmit_DMA+0xf0>)
 800a8da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8e0:	4a21      	ldr	r2, [pc, #132]	; (800a968 <HAL_UART_Transmit_DMA+0xf4>)
 800a8e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8e8:	4a20      	ldr	r2, [pc, #128]	; (800a96c <HAL_UART_Transmit_DMA+0xf8>)
 800a8ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a8f4:	f107 0308 	add.w	r3, r7, #8
 800a8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a900:	6819      	ldr	r1, [r3, #0]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	3304      	adds	r3, #4
 800a908:	461a      	mov	r2, r3
 800a90a:	88fb      	ldrh	r3, [r7, #6]
 800a90c:	f7fb fa06 	bl	8005d1c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a918:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3314      	adds	r3, #20
 800a928:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	e853 3f00 	ldrex	r3, [r3]
 800a930:	617b      	str	r3, [r7, #20]
   return(result);
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a938:	62bb      	str	r3, [r7, #40]	; 0x28
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3314      	adds	r3, #20
 800a940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a942:	627a      	str	r2, [r7, #36]	; 0x24
 800a944:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a946:	6a39      	ldr	r1, [r7, #32]
 800a948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a94a:	e841 2300 	strex	r3, r2, [r1]
 800a94e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d1e5      	bne.n	800a922 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a956:	2300      	movs	r3, #0
 800a958:	e000      	b.n	800a95c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a95a:	2302      	movs	r3, #2
  }
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3730      	adds	r7, #48	; 0x30
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	0800af41 	.word	0x0800af41
 800a968:	0800afdb 	.word	0x0800afdb
 800a96c:	0800b153 	.word	0x0800b153

0800a970 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	4613      	mov	r3, r2
 800a97c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b20      	cmp	r3, #32
 800a988:	d11d      	bne.n	800a9c6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <HAL_UART_Receive_DMA+0x26>
 800a990:	88fb      	ldrh	r3, [r7, #6]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	e016      	b.n	800a9c8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d101      	bne.n	800a9a8 <HAL_UART_Receive_DMA+0x38>
 800a9a4:	2302      	movs	r3, #2
 800a9a6:	e00f      	b.n	800a9c8 <HAL_UART_Receive_DMA+0x58>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a9b6:	88fb      	ldrh	r3, [r7, #6]
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	68b9      	ldr	r1, [r7, #8]
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f000 fc13 	bl	800b1e8 <UART_Start_Receive_DMA>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	e000      	b.n	800a9c8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a9c6:	2302      	movs	r3, #2
  }
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b0ba      	sub	sp, #232	; 0xe8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	695b      	ldr	r3, [r3, #20]
 800a9f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800aa02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa06:	f003 030f 	and.w	r3, r3, #15
 800aa0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800aa0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10f      	bne.n	800aa36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aa16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa1a:	f003 0320 	and.w	r3, r3, #32
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d009      	beq.n	800aa36 <HAL_UART_IRQHandler+0x66>
 800aa22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa26:	f003 0320 	and.w	r3, r3, #32
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d003      	beq.n	800aa36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fd7f 	bl	800b532 <UART_Receive_IT>
      return;
 800aa34:	e256      	b.n	800aee4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aa36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f000 80de 	beq.w	800abfc <HAL_UART_IRQHandler+0x22c>
 800aa40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa44:	f003 0301 	and.w	r3, r3, #1
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d106      	bne.n	800aa5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aa4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 80d1 	beq.w	800abfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aa5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa5e:	f003 0301 	and.w	r3, r3, #1
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00b      	beq.n	800aa7e <HAL_UART_IRQHandler+0xae>
 800aa66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d005      	beq.n	800aa7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa76:	f043 0201 	orr.w	r2, r3, #1
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa82:	f003 0304 	and.w	r3, r3, #4
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00b      	beq.n	800aaa2 <HAL_UART_IRQHandler+0xd2>
 800aa8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa8e:	f003 0301 	and.w	r3, r3, #1
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d005      	beq.n	800aaa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9a:	f043 0202 	orr.w	r2, r3, #2
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aaa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaa6:	f003 0302 	and.w	r3, r3, #2
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00b      	beq.n	800aac6 <HAL_UART_IRQHandler+0xf6>
 800aaae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aab2:	f003 0301 	and.w	r3, r3, #1
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d005      	beq.n	800aac6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aabe:	f043 0204 	orr.w	r2, r3, #4
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaca:	f003 0308 	and.w	r3, r3, #8
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d011      	beq.n	800aaf6 <HAL_UART_IRQHandler+0x126>
 800aad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aad6:	f003 0320 	and.w	r3, r3, #32
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d105      	bne.n	800aaea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aae2:	f003 0301 	and.w	r3, r3, #1
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d005      	beq.n	800aaf6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaee:	f043 0208 	orr.w	r2, r3, #8
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f000 81ed 	beq.w	800aeda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab04:	f003 0320 	and.w	r3, r3, #32
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d008      	beq.n	800ab1e <HAL_UART_IRQHandler+0x14e>
 800ab0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab10:	f003 0320 	and.w	r3, r3, #32
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fd0a 	bl	800b532 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	695b      	ldr	r3, [r3, #20]
 800ab24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab28:	2b40      	cmp	r3, #64	; 0x40
 800ab2a:	bf0c      	ite	eq
 800ab2c:	2301      	moveq	r3, #1
 800ab2e:	2300      	movne	r3, #0
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3a:	f003 0308 	and.w	r3, r3, #8
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d103      	bne.n	800ab4a <HAL_UART_IRQHandler+0x17a>
 800ab42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d04f      	beq.n	800abea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fc12 	bl	800b374 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	695b      	ldr	r3, [r3, #20]
 800ab56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab5a:	2b40      	cmp	r3, #64	; 0x40
 800ab5c:	d141      	bne.n	800abe2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	3314      	adds	r3, #20
 800ab64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab6c:	e853 3f00 	ldrex	r3, [r3]
 800ab70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ab74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	3314      	adds	r3, #20
 800ab86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ab8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ab8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ab96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ab9a:	e841 2300 	strex	r3, r2, [r1]
 800ab9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800aba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1d9      	bne.n	800ab5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d013      	beq.n	800abda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb6:	4a7d      	ldr	r2, [pc, #500]	; (800adac <HAL_UART_IRQHandler+0x3dc>)
 800abb8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fb f974 	bl	8005eac <HAL_DMA_Abort_IT>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d016      	beq.n	800abf8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800abd4:	4610      	mov	r0, r2
 800abd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abd8:	e00e      	b.n	800abf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 f99a 	bl	800af14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abe0:	e00a      	b.n	800abf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f996 	bl	800af14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abe8:	e006      	b.n	800abf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 f992 	bl	800af14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800abf6:	e170      	b.n	800aeda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abf8:	bf00      	nop
    return;
 800abfa:	e16e      	b.n	800aeda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	f040 814a 	bne.w	800ae9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ac06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac0a:	f003 0310 	and.w	r3, r3, #16
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f000 8143 	beq.w	800ae9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ac14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac18:	f003 0310 	and.w	r3, r3, #16
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f000 813c 	beq.w	800ae9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ac22:	2300      	movs	r3, #0
 800ac24:	60bb      	str	r3, [r7, #8]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	60bb      	str	r3, [r7, #8]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	60bb      	str	r3, [r7, #8]
 800ac36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	695b      	ldr	r3, [r3, #20]
 800ac3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac42:	2b40      	cmp	r3, #64	; 0x40
 800ac44:	f040 80b4 	bne.w	800adb0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f000 8140 	beq.w	800aede <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ac62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac66:	429a      	cmp	r2, r3
 800ac68:	f080 8139 	bcs.w	800aede <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac78:	69db      	ldr	r3, [r3, #28]
 800ac7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac7e:	f000 8088 	beq.w	800ad92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	330c      	adds	r3, #12
 800ac88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac90:	e853 3f00 	ldrex	r3, [r3]
 800ac94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ac98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aca0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	330c      	adds	r3, #12
 800acaa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800acae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800acb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800acba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800acbe:	e841 2300 	strex	r3, r2, [r1]
 800acc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800acc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1d9      	bne.n	800ac82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	3314      	adds	r3, #20
 800acd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acd8:	e853 3f00 	ldrex	r3, [r3]
 800acdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800acde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ace0:	f023 0301 	bic.w	r3, r3, #1
 800ace4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	3314      	adds	r3, #20
 800acee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800acf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800acf6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800acfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800acfe:	e841 2300 	strex	r3, r2, [r1]
 800ad02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ad04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1e1      	bne.n	800acce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	3314      	adds	r3, #20
 800ad10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad14:	e853 3f00 	ldrex	r3, [r3]
 800ad18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ad1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3314      	adds	r3, #20
 800ad2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ad2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ad30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ad34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ad36:	e841 2300 	strex	r3, r2, [r1]
 800ad3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ad3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1e3      	bne.n	800ad0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2220      	movs	r2, #32
 800ad46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	330c      	adds	r3, #12
 800ad56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad5a:	e853 3f00 	ldrex	r3, [r3]
 800ad5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad62:	f023 0310 	bic.w	r3, r3, #16
 800ad66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	330c      	adds	r3, #12
 800ad70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ad74:	65ba      	str	r2, [r7, #88]	; 0x58
 800ad76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad7c:	e841 2300 	strex	r3, r2, [r1]
 800ad80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d1e3      	bne.n	800ad50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7fb f81d 	bl	8005dcc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	4619      	mov	r1, r3
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 f8c0 	bl	800af28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ada8:	e099      	b.n	800aede <HAL_UART_IRQHandler+0x50e>
 800adaa:	bf00      	nop
 800adac:	0800b43b 	.word	0x0800b43b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800adb8:	b29b      	uxth	r3, r3
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 808b 	beq.w	800aee2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800adcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 8086 	beq.w	800aee2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	330c      	adds	r3, #12
 800addc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade0:	e853 3f00 	ldrex	r3, [r3]
 800ade4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ade6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800adec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	330c      	adds	r3, #12
 800adf6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800adfa:	647a      	str	r2, [r7, #68]	; 0x44
 800adfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae02:	e841 2300 	strex	r3, r2, [r1]
 800ae06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1e3      	bne.n	800add6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3314      	adds	r3, #20
 800ae14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae18:	e853 3f00 	ldrex	r3, [r3]
 800ae1c:	623b      	str	r3, [r7, #32]
   return(result);
 800ae1e:	6a3b      	ldr	r3, [r7, #32]
 800ae20:	f023 0301 	bic.w	r3, r3, #1
 800ae24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3314      	adds	r3, #20
 800ae2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ae32:	633a      	str	r2, [r7, #48]	; 0x30
 800ae34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae3a:	e841 2300 	strex	r3, r2, [r1]
 800ae3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1e3      	bne.n	800ae0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2220      	movs	r2, #32
 800ae4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	330c      	adds	r3, #12
 800ae5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	e853 3f00 	ldrex	r3, [r3]
 800ae62:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f023 0310 	bic.w	r3, r3, #16
 800ae6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	330c      	adds	r3, #12
 800ae74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ae78:	61fa      	str	r2, [r7, #28]
 800ae7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7c:	69b9      	ldr	r1, [r7, #24]
 800ae7e:	69fa      	ldr	r2, [r7, #28]
 800ae80:	e841 2300 	strex	r3, r2, [r1]
 800ae84:	617b      	str	r3, [r7, #20]
   return(result);
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e3      	bne.n	800ae54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 f848 	bl	800af28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ae98:	e023      	b.n	800aee2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ae9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d009      	beq.n	800aeba <HAL_UART_IRQHandler+0x4ea>
 800aea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d003      	beq.n	800aeba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fad5 	bl	800b462 <UART_Transmit_IT>
    return;
 800aeb8:	e014      	b.n	800aee4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aeba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00e      	beq.n	800aee4 <HAL_UART_IRQHandler+0x514>
 800aec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d008      	beq.n	800aee4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 fb15 	bl	800b502 <UART_EndTransmit_IT>
    return;
 800aed8:	e004      	b.n	800aee4 <HAL_UART_IRQHandler+0x514>
    return;
 800aeda:	bf00      	nop
 800aedc:	e002      	b.n	800aee4 <HAL_UART_IRQHandler+0x514>
      return;
 800aede:	bf00      	nop
 800aee0:	e000      	b.n	800aee4 <HAL_UART_IRQHandler+0x514>
      return;
 800aee2:	bf00      	nop
  }
}
 800aee4:	37e8      	adds	r7, #232	; 0xe8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop

0800aeec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	460b      	mov	r3, r1
 800af32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b090      	sub	sp, #64	; 0x40
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d137      	bne.n	800afcc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800af5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af5e:	2200      	movs	r2, #0
 800af60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3314      	adds	r3, #20
 800af68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6c:	e853 3f00 	ldrex	r3, [r3]
 800af70:	623b      	str	r3, [r7, #32]
   return(result);
 800af72:	6a3b      	ldr	r3, [r7, #32]
 800af74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af78:	63bb      	str	r3, [r7, #56]	; 0x38
 800af7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	3314      	adds	r3, #20
 800af80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af82:	633a      	str	r2, [r7, #48]	; 0x30
 800af84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af8a:	e841 2300 	strex	r3, r2, [r1]
 800af8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1e5      	bne.n	800af62 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	330c      	adds	r3, #12
 800af9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	e853 3f00 	ldrex	r3, [r3]
 800afa4:	60fb      	str	r3, [r7, #12]
   return(result);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afac:	637b      	str	r3, [r7, #52]	; 0x34
 800afae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	330c      	adds	r3, #12
 800afb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afb6:	61fa      	str	r2, [r7, #28]
 800afb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afba:	69b9      	ldr	r1, [r7, #24]
 800afbc:	69fa      	ldr	r2, [r7, #28]
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	617b      	str	r3, [r7, #20]
   return(result);
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1e5      	bne.n	800af96 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afca:	e002      	b.n	800afd2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800afcc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800afce:	f7f9 f867 	bl	80040a0 <HAL_UART_TxCpltCallback>
}
 800afd2:	bf00      	nop
 800afd4:	3740      	adds	r7, #64	; 0x40
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b084      	sub	sp, #16
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f7ff ff7f 	bl	800aeec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afee:	bf00      	nop
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b09c      	sub	sp, #112	; 0x70
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b002:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d172      	bne.n	800b0f8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b014:	2200      	movs	r2, #0
 800b016:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	330c      	adds	r3, #12
 800b01e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b022:	e853 3f00 	ldrex	r3, [r3]
 800b026:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b02a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b02e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	330c      	adds	r3, #12
 800b036:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b038:	65ba      	str	r2, [r7, #88]	; 0x58
 800b03a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b03e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b040:	e841 2300 	strex	r3, r2, [r1]
 800b044:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1e5      	bne.n	800b018 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b04c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	3314      	adds	r3, #20
 800b052:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b056:	e853 3f00 	ldrex	r3, [r3]
 800b05a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b05e:	f023 0301 	bic.w	r3, r3, #1
 800b062:	667b      	str	r3, [r7, #100]	; 0x64
 800b064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	3314      	adds	r3, #20
 800b06a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b06c:	647a      	str	r2, [r7, #68]	; 0x44
 800b06e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b070:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b074:	e841 2300 	strex	r3, r2, [r1]
 800b078:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1e5      	bne.n	800b04c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	3314      	adds	r3, #20
 800b086:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08a:	e853 3f00 	ldrex	r3, [r3]
 800b08e:	623b      	str	r3, [r7, #32]
   return(result);
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b096:	663b      	str	r3, [r7, #96]	; 0x60
 800b098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	3314      	adds	r3, #20
 800b09e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b0a0:	633a      	str	r2, [r7, #48]	; 0x30
 800b0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0a8:	e841 2300 	strex	r3, r2, [r1]
 800b0ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1e5      	bne.n	800b080 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b0b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0b6:	2220      	movs	r2, #32
 800b0b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d119      	bne.n	800b0f8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	330c      	adds	r3, #12
 800b0ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	e853 3f00 	ldrex	r3, [r3]
 800b0d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f023 0310 	bic.w	r3, r3, #16
 800b0da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	330c      	adds	r3, #12
 800b0e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b0e4:	61fa      	str	r2, [r7, #28]
 800b0e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e8:	69b9      	ldr	r1, [r7, #24]
 800b0ea:	69fa      	ldr	r2, [r7, #28]
 800b0ec:	e841 2300 	strex	r3, r2, [r1]
 800b0f0:	617b      	str	r3, [r7, #20]
   return(result);
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d1e5      	bne.n	800b0c4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d106      	bne.n	800b10e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b102:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b104:	4619      	mov	r1, r3
 800b106:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b108:	f7ff ff0e 	bl	800af28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b10c:	e002      	b.n	800b114 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b10e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b110:	f7f8 ffd8 	bl	80040c4 <HAL_UART_RxCpltCallback>
}
 800b114:	bf00      	nop
 800b116:	3770      	adds	r7, #112	; 0x70
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b128:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d108      	bne.n	800b144 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b136:	085b      	lsrs	r3, r3, #1
 800b138:	b29b      	uxth	r3, r3
 800b13a:	4619      	mov	r1, r3
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f7ff fef3 	bl	800af28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b142:	e002      	b.n	800b14a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f7ff fedb 	bl	800af00 <HAL_UART_RxHalfCpltCallback>
}
 800b14a:	bf00      	nop
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b084      	sub	sp, #16
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b162:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b16e:	2b80      	cmp	r3, #128	; 0x80
 800b170:	bf0c      	ite	eq
 800b172:	2301      	moveq	r3, #1
 800b174:	2300      	movne	r3, #0
 800b176:	b2db      	uxtb	r3, r3
 800b178:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b180:	b2db      	uxtb	r3, r3
 800b182:	2b21      	cmp	r3, #33	; 0x21
 800b184:	d108      	bne.n	800b198 <UART_DMAError+0x46>
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d005      	beq.n	800b198 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	2200      	movs	r2, #0
 800b190:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b192:	68b8      	ldr	r0, [r7, #8]
 800b194:	f000 f8c6 	bl	800b324 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	695b      	ldr	r3, [r3, #20]
 800b19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1a2:	2b40      	cmp	r3, #64	; 0x40
 800b1a4:	bf0c      	ite	eq
 800b1a6:	2301      	moveq	r3, #1
 800b1a8:	2300      	movne	r3, #0
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b22      	cmp	r3, #34	; 0x22
 800b1b8:	d108      	bne.n	800b1cc <UART_DMAError+0x7a>
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d005      	beq.n	800b1cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b1c6:	68b8      	ldr	r0, [r7, #8]
 800b1c8:	f000 f8d4 	bl	800b374 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d0:	f043 0210 	orr.w	r2, r3, #16
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1d8:	68b8      	ldr	r0, [r7, #8]
 800b1da:	f7ff fe9b 	bl	800af14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1de:	bf00      	nop
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
	...

0800b1e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b098      	sub	sp, #96	; 0x60
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	88fa      	ldrh	r2, [r7, #6]
 800b200:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2200      	movs	r2, #0
 800b206:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2222      	movs	r2, #34	; 0x22
 800b20c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b214:	4a40      	ldr	r2, [pc, #256]	; (800b318 <UART_Start_Receive_DMA+0x130>)
 800b216:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b21c:	4a3f      	ldr	r2, [pc, #252]	; (800b31c <UART_Start_Receive_DMA+0x134>)
 800b21e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b224:	4a3e      	ldr	r2, [pc, #248]	; (800b320 <UART_Start_Receive_DMA+0x138>)
 800b226:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22c:	2200      	movs	r2, #0
 800b22e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b230:	f107 0308 	add.w	r3, r7, #8
 800b234:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3304      	adds	r3, #4
 800b240:	4619      	mov	r1, r3
 800b242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	88fb      	ldrh	r3, [r7, #6]
 800b248:	f7fa fd68 	bl	8005d1c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b24c:	2300      	movs	r3, #0
 800b24e:	613b      	str	r3, [r7, #16]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	613b      	str	r3, [r7, #16]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	613b      	str	r3, [r7, #16]
 800b260:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2200      	movs	r2, #0
 800b266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d019      	beq.n	800b2a6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	330c      	adds	r3, #12
 800b278:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b27a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b27c:	e853 3f00 	ldrex	r3, [r3]
 800b280:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b288:	65bb      	str	r3, [r7, #88]	; 0x58
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	330c      	adds	r3, #12
 800b290:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b292:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b294:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b296:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b298:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b29a:	e841 2300 	strex	r3, r2, [r1]
 800b29e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b2a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1e5      	bne.n	800b272 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	3314      	adds	r3, #20
 800b2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b0:	e853 3f00 	ldrex	r3, [r3]
 800b2b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b8:	f043 0301 	orr.w	r3, r3, #1
 800b2bc:	657b      	str	r3, [r7, #84]	; 0x54
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	3314      	adds	r3, #20
 800b2c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b2c6:	63ba      	str	r2, [r7, #56]	; 0x38
 800b2c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b2cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2ce:	e841 2300 	strex	r3, r2, [r1]
 800b2d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1e5      	bne.n	800b2a6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3314      	adds	r3, #20
 800b2e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	e853 3f00 	ldrex	r3, [r3]
 800b2e8:	617b      	str	r3, [r7, #20]
   return(result);
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2f0:	653b      	str	r3, [r7, #80]	; 0x50
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3314      	adds	r3, #20
 800b2f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2fa:	627a      	str	r2, [r7, #36]	; 0x24
 800b2fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fe:	6a39      	ldr	r1, [r7, #32]
 800b300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b302:	e841 2300 	strex	r3, r2, [r1]
 800b306:	61fb      	str	r3, [r7, #28]
   return(result);
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1e5      	bne.n	800b2da <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b30e:	2300      	movs	r3, #0
}
 800b310:	4618      	mov	r0, r3
 800b312:	3760      	adds	r7, #96	; 0x60
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	0800aff7 	.word	0x0800aff7
 800b31c:	0800b11d 	.word	0x0800b11d
 800b320:	0800b153 	.word	0x0800b153

0800b324 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b324:	b480      	push	{r7}
 800b326:	b089      	sub	sp, #36	; 0x24
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	330c      	adds	r3, #12
 800b332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	e853 3f00 	ldrex	r3, [r3]
 800b33a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b342:	61fb      	str	r3, [r7, #28]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	330c      	adds	r3, #12
 800b34a:	69fa      	ldr	r2, [r7, #28]
 800b34c:	61ba      	str	r2, [r7, #24]
 800b34e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b350:	6979      	ldr	r1, [r7, #20]
 800b352:	69ba      	ldr	r2, [r7, #24]
 800b354:	e841 2300 	strex	r3, r2, [r1]
 800b358:	613b      	str	r3, [r7, #16]
   return(result);
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1e5      	bne.n	800b32c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2220      	movs	r2, #32
 800b364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b368:	bf00      	nop
 800b36a:	3724      	adds	r7, #36	; 0x24
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b374:	b480      	push	{r7}
 800b376:	b095      	sub	sp, #84	; 0x54
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	330c      	adds	r3, #12
 800b382:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b386:	e853 3f00 	ldrex	r3, [r3]
 800b38a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b392:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	330c      	adds	r3, #12
 800b39a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b39c:	643a      	str	r2, [r7, #64]	; 0x40
 800b39e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3a4:	e841 2300 	strex	r3, r2, [r1]
 800b3a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1e5      	bne.n	800b37c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3314      	adds	r3, #20
 800b3b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b8:	6a3b      	ldr	r3, [r7, #32]
 800b3ba:	e853 3f00 	ldrex	r3, [r3]
 800b3be:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	f023 0301 	bic.w	r3, r3, #1
 800b3c6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	3314      	adds	r3, #20
 800b3ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3d8:	e841 2300 	strex	r3, r2, [r1]
 800b3dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1e5      	bne.n	800b3b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d119      	bne.n	800b420 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	330c      	adds	r3, #12
 800b3f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	e853 3f00 	ldrex	r3, [r3]
 800b3fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	f023 0310 	bic.w	r3, r3, #16
 800b402:	647b      	str	r3, [r7, #68]	; 0x44
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	330c      	adds	r3, #12
 800b40a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b40c:	61ba      	str	r2, [r7, #24]
 800b40e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b410:	6979      	ldr	r1, [r7, #20]
 800b412:	69ba      	ldr	r2, [r7, #24]
 800b414:	e841 2300 	strex	r3, r2, [r1]
 800b418:	613b      	str	r3, [r7, #16]
   return(result);
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1e5      	bne.n	800b3ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2220      	movs	r2, #32
 800b424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b42e:	bf00      	nop
 800b430:	3754      	adds	r7, #84	; 0x54
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr

0800b43a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b084      	sub	sp, #16
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b446:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2200      	movs	r2, #0
 800b44c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2200      	movs	r2, #0
 800b452:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f7ff fd5d 	bl	800af14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b45a:	bf00      	nop
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b462:	b480      	push	{r7}
 800b464:	b085      	sub	sp, #20
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b21      	cmp	r3, #33	; 0x21
 800b474:	d13e      	bne.n	800b4f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b47e:	d114      	bne.n	800b4aa <UART_Transmit_IT+0x48>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	691b      	ldr	r3, [r3, #16]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d110      	bne.n	800b4aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6a1b      	ldr	r3, [r3, #32]
 800b48c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	881b      	ldrh	r3, [r3, #0]
 800b492:	461a      	mov	r2, r3
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b49c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	1c9a      	adds	r2, r3, #2
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	621a      	str	r2, [r3, #32]
 800b4a8:	e008      	b.n	800b4bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a1b      	ldr	r3, [r3, #32]
 800b4ae:	1c59      	adds	r1, r3, #1
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	6211      	str	r1, [r2, #32]
 800b4b4:	781a      	ldrb	r2, [r3, #0]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d10f      	bne.n	800b4f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68da      	ldr	r2, [r3, #12]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68da      	ldr	r2, [r3, #12]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	e000      	b.n	800b4f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b4f4:	2302      	movs	r3, #2
  }
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr

0800b502 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b082      	sub	sp, #8
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	68da      	ldr	r2, [r3, #12]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b518:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2220      	movs	r2, #32
 800b51e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7f8 fdbc 	bl	80040a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b08c      	sub	sp, #48	; 0x30
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b22      	cmp	r3, #34	; 0x22
 800b544:	f040 80ab 	bne.w	800b69e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b550:	d117      	bne.n	800b582 <UART_Receive_IT+0x50>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d113      	bne.n	800b582 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b55a:	2300      	movs	r3, #0
 800b55c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b562:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b570:	b29a      	uxth	r2, r3
 800b572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b574:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b57a:	1c9a      	adds	r2, r3, #2
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	629a      	str	r2, [r3, #40]	; 0x28
 800b580:	e026      	b.n	800b5d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b586:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b588:	2300      	movs	r3, #0
 800b58a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b594:	d007      	beq.n	800b5a6 <UART_Receive_IT+0x74>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d10a      	bne.n	800b5b4 <UART_Receive_IT+0x82>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d106      	bne.n	800b5b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	b2da      	uxtb	r2, r3
 800b5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b0:	701a      	strb	r2, [r3, #0]
 800b5b2:	e008      	b.n	800b5c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5c0:	b2da      	uxtb	r2, r3
 800b5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ca:	1c5a      	adds	r2, r3, #1
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	4619      	mov	r1, r3
 800b5de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d15a      	bne.n	800b69a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	68da      	ldr	r2, [r3, #12]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f022 0220 	bic.w	r2, r2, #32
 800b5f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	68da      	ldr	r2, [r3, #12]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b602:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	695a      	ldr	r2, [r3, #20]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f022 0201 	bic.w	r2, r2, #1
 800b612:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2220      	movs	r2, #32
 800b618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b620:	2b01      	cmp	r3, #1
 800b622:	d135      	bne.n	800b690 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	330c      	adds	r3, #12
 800b630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	e853 3f00 	ldrex	r3, [r3]
 800b638:	613b      	str	r3, [r7, #16]
   return(result);
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	f023 0310 	bic.w	r3, r3, #16
 800b640:	627b      	str	r3, [r7, #36]	; 0x24
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	330c      	adds	r3, #12
 800b648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b64a:	623a      	str	r2, [r7, #32]
 800b64c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b64e:	69f9      	ldr	r1, [r7, #28]
 800b650:	6a3a      	ldr	r2, [r7, #32]
 800b652:	e841 2300 	strex	r3, r2, [r1]
 800b656:	61bb      	str	r3, [r7, #24]
   return(result);
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d1e5      	bne.n	800b62a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f003 0310 	and.w	r3, r3, #16
 800b668:	2b10      	cmp	r3, #16
 800b66a:	d10a      	bne.n	800b682 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b66c:	2300      	movs	r3, #0
 800b66e:	60fb      	str	r3, [r7, #12]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	60fb      	str	r3, [r7, #12]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	60fb      	str	r3, [r7, #12]
 800b680:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b686:	4619      	mov	r1, r3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7ff fc4d 	bl	800af28 <HAL_UARTEx_RxEventCallback>
 800b68e:	e002      	b.n	800b696 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f7f8 fd17 	bl	80040c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b696:	2300      	movs	r3, #0
 800b698:	e002      	b.n	800b6a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b69a:	2300      	movs	r3, #0
 800b69c:	e000      	b.n	800b6a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b69e:	2302      	movs	r3, #2
  }
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3730      	adds	r7, #48	; 0x30
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6ac:	b0c0      	sub	sp, #256	; 0x100
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b6c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6c4:	68d9      	ldr	r1, [r3, #12]
 800b6c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	ea40 0301 	orr.w	r3, r0, r1
 800b6d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b6d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d6:	689a      	ldr	r2, [r3, #8]
 800b6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	431a      	orrs	r2, r3
 800b6e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	431a      	orrs	r2, r3
 800b6e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ec:	69db      	ldr	r3, [r3, #28]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b6f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b700:	f021 010c 	bic.w	r1, r1, #12
 800b704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b70e:	430b      	orrs	r3, r1
 800b710:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	695b      	ldr	r3, [r3, #20]
 800b71a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b71e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b722:	6999      	ldr	r1, [r3, #24]
 800b724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	ea40 0301 	orr.w	r3, r0, r1
 800b72e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	4b8f      	ldr	r3, [pc, #572]	; (800b974 <UART_SetConfig+0x2cc>)
 800b738:	429a      	cmp	r2, r3
 800b73a:	d005      	beq.n	800b748 <UART_SetConfig+0xa0>
 800b73c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	4b8d      	ldr	r3, [pc, #564]	; (800b978 <UART_SetConfig+0x2d0>)
 800b744:	429a      	cmp	r2, r3
 800b746:	d104      	bne.n	800b752 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b748:	f7fd fe96 	bl	8009478 <HAL_RCC_GetPCLK2Freq>
 800b74c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b750:	e003      	b.n	800b75a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b752:	f7fd fe7d 	bl	8009450 <HAL_RCC_GetPCLK1Freq>
 800b756:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b75a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b75e:	69db      	ldr	r3, [r3, #28]
 800b760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b764:	f040 810c 	bne.w	800b980 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b76c:	2200      	movs	r2, #0
 800b76e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b772:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b776:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b77a:	4622      	mov	r2, r4
 800b77c:	462b      	mov	r3, r5
 800b77e:	1891      	adds	r1, r2, r2
 800b780:	65b9      	str	r1, [r7, #88]	; 0x58
 800b782:	415b      	adcs	r3, r3
 800b784:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b786:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b78a:	4621      	mov	r1, r4
 800b78c:	eb12 0801 	adds.w	r8, r2, r1
 800b790:	4629      	mov	r1, r5
 800b792:	eb43 0901 	adc.w	r9, r3, r1
 800b796:	f04f 0200 	mov.w	r2, #0
 800b79a:	f04f 0300 	mov.w	r3, #0
 800b79e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b7a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b7a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b7aa:	4690      	mov	r8, r2
 800b7ac:	4699      	mov	r9, r3
 800b7ae:	4623      	mov	r3, r4
 800b7b0:	eb18 0303 	adds.w	r3, r8, r3
 800b7b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b7b8:	462b      	mov	r3, r5
 800b7ba:	eb49 0303 	adc.w	r3, r9, r3
 800b7be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b7c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b7ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b7d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	18db      	adds	r3, r3, r3
 800b7da:	653b      	str	r3, [r7, #80]	; 0x50
 800b7dc:	4613      	mov	r3, r2
 800b7de:	eb42 0303 	adc.w	r3, r2, r3
 800b7e2:	657b      	str	r3, [r7, #84]	; 0x54
 800b7e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b7e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b7ec:	f7f5 fa34 	bl	8000c58 <__aeabi_uldivmod>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4b61      	ldr	r3, [pc, #388]	; (800b97c <UART_SetConfig+0x2d4>)
 800b7f6:	fba3 2302 	umull	r2, r3, r3, r2
 800b7fa:	095b      	lsrs	r3, r3, #5
 800b7fc:	011c      	lsls	r4, r3, #4
 800b7fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b802:	2200      	movs	r2, #0
 800b804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b808:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b80c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b810:	4642      	mov	r2, r8
 800b812:	464b      	mov	r3, r9
 800b814:	1891      	adds	r1, r2, r2
 800b816:	64b9      	str	r1, [r7, #72]	; 0x48
 800b818:	415b      	adcs	r3, r3
 800b81a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b81c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b820:	4641      	mov	r1, r8
 800b822:	eb12 0a01 	adds.w	sl, r2, r1
 800b826:	4649      	mov	r1, r9
 800b828:	eb43 0b01 	adc.w	fp, r3, r1
 800b82c:	f04f 0200 	mov.w	r2, #0
 800b830:	f04f 0300 	mov.w	r3, #0
 800b834:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b838:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b83c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b840:	4692      	mov	sl, r2
 800b842:	469b      	mov	fp, r3
 800b844:	4643      	mov	r3, r8
 800b846:	eb1a 0303 	adds.w	r3, sl, r3
 800b84a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b84e:	464b      	mov	r3, r9
 800b850:	eb4b 0303 	adc.w	r3, fp, r3
 800b854:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b864:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b868:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b86c:	460b      	mov	r3, r1
 800b86e:	18db      	adds	r3, r3, r3
 800b870:	643b      	str	r3, [r7, #64]	; 0x40
 800b872:	4613      	mov	r3, r2
 800b874:	eb42 0303 	adc.w	r3, r2, r3
 800b878:	647b      	str	r3, [r7, #68]	; 0x44
 800b87a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b87e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b882:	f7f5 f9e9 	bl	8000c58 <__aeabi_uldivmod>
 800b886:	4602      	mov	r2, r0
 800b888:	460b      	mov	r3, r1
 800b88a:	4611      	mov	r1, r2
 800b88c:	4b3b      	ldr	r3, [pc, #236]	; (800b97c <UART_SetConfig+0x2d4>)
 800b88e:	fba3 2301 	umull	r2, r3, r3, r1
 800b892:	095b      	lsrs	r3, r3, #5
 800b894:	2264      	movs	r2, #100	; 0x64
 800b896:	fb02 f303 	mul.w	r3, r2, r3
 800b89a:	1acb      	subs	r3, r1, r3
 800b89c:	00db      	lsls	r3, r3, #3
 800b89e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b8a2:	4b36      	ldr	r3, [pc, #216]	; (800b97c <UART_SetConfig+0x2d4>)
 800b8a4:	fba3 2302 	umull	r2, r3, r3, r2
 800b8a8:	095b      	lsrs	r3, r3, #5
 800b8aa:	005b      	lsls	r3, r3, #1
 800b8ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b8b0:	441c      	add	r4, r3
 800b8b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b8c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b8c4:	4642      	mov	r2, r8
 800b8c6:	464b      	mov	r3, r9
 800b8c8:	1891      	adds	r1, r2, r2
 800b8ca:	63b9      	str	r1, [r7, #56]	; 0x38
 800b8cc:	415b      	adcs	r3, r3
 800b8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b8d4:	4641      	mov	r1, r8
 800b8d6:	1851      	adds	r1, r2, r1
 800b8d8:	6339      	str	r1, [r7, #48]	; 0x30
 800b8da:	4649      	mov	r1, r9
 800b8dc:	414b      	adcs	r3, r1
 800b8de:	637b      	str	r3, [r7, #52]	; 0x34
 800b8e0:	f04f 0200 	mov.w	r2, #0
 800b8e4:	f04f 0300 	mov.w	r3, #0
 800b8e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b8ec:	4659      	mov	r1, fp
 800b8ee:	00cb      	lsls	r3, r1, #3
 800b8f0:	4651      	mov	r1, sl
 800b8f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8f6:	4651      	mov	r1, sl
 800b8f8:	00ca      	lsls	r2, r1, #3
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	4603      	mov	r3, r0
 800b900:	4642      	mov	r2, r8
 800b902:	189b      	adds	r3, r3, r2
 800b904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b908:	464b      	mov	r3, r9
 800b90a:	460a      	mov	r2, r1
 800b90c:	eb42 0303 	adc.w	r3, r2, r3
 800b910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b920:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b924:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b928:	460b      	mov	r3, r1
 800b92a:	18db      	adds	r3, r3, r3
 800b92c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b92e:	4613      	mov	r3, r2
 800b930:	eb42 0303 	adc.w	r3, r2, r3
 800b934:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b936:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b93a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b93e:	f7f5 f98b 	bl	8000c58 <__aeabi_uldivmod>
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	4b0d      	ldr	r3, [pc, #52]	; (800b97c <UART_SetConfig+0x2d4>)
 800b948:	fba3 1302 	umull	r1, r3, r3, r2
 800b94c:	095b      	lsrs	r3, r3, #5
 800b94e:	2164      	movs	r1, #100	; 0x64
 800b950:	fb01 f303 	mul.w	r3, r1, r3
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	00db      	lsls	r3, r3, #3
 800b958:	3332      	adds	r3, #50	; 0x32
 800b95a:	4a08      	ldr	r2, [pc, #32]	; (800b97c <UART_SetConfig+0x2d4>)
 800b95c:	fba2 2303 	umull	r2, r3, r2, r3
 800b960:	095b      	lsrs	r3, r3, #5
 800b962:	f003 0207 	and.w	r2, r3, #7
 800b966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4422      	add	r2, r4
 800b96e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b970:	e105      	b.n	800bb7e <UART_SetConfig+0x4d6>
 800b972:	bf00      	nop
 800b974:	40011000 	.word	0x40011000
 800b978:	40011400 	.word	0x40011400
 800b97c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b984:	2200      	movs	r2, #0
 800b986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b98a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b98e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b992:	4642      	mov	r2, r8
 800b994:	464b      	mov	r3, r9
 800b996:	1891      	adds	r1, r2, r2
 800b998:	6239      	str	r1, [r7, #32]
 800b99a:	415b      	adcs	r3, r3
 800b99c:	627b      	str	r3, [r7, #36]	; 0x24
 800b99e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b9a2:	4641      	mov	r1, r8
 800b9a4:	1854      	adds	r4, r2, r1
 800b9a6:	4649      	mov	r1, r9
 800b9a8:	eb43 0501 	adc.w	r5, r3, r1
 800b9ac:	f04f 0200 	mov.w	r2, #0
 800b9b0:	f04f 0300 	mov.w	r3, #0
 800b9b4:	00eb      	lsls	r3, r5, #3
 800b9b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b9ba:	00e2      	lsls	r2, r4, #3
 800b9bc:	4614      	mov	r4, r2
 800b9be:	461d      	mov	r5, r3
 800b9c0:	4643      	mov	r3, r8
 800b9c2:	18e3      	adds	r3, r4, r3
 800b9c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b9c8:	464b      	mov	r3, r9
 800b9ca:	eb45 0303 	adc.w	r3, r5, r3
 800b9ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b9d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b9de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b9e2:	f04f 0200 	mov.w	r2, #0
 800b9e6:	f04f 0300 	mov.w	r3, #0
 800b9ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b9ee:	4629      	mov	r1, r5
 800b9f0:	008b      	lsls	r3, r1, #2
 800b9f2:	4621      	mov	r1, r4
 800b9f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b9f8:	4621      	mov	r1, r4
 800b9fa:	008a      	lsls	r2, r1, #2
 800b9fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ba00:	f7f5 f92a 	bl	8000c58 <__aeabi_uldivmod>
 800ba04:	4602      	mov	r2, r0
 800ba06:	460b      	mov	r3, r1
 800ba08:	4b60      	ldr	r3, [pc, #384]	; (800bb8c <UART_SetConfig+0x4e4>)
 800ba0a:	fba3 2302 	umull	r2, r3, r3, r2
 800ba0e:	095b      	lsrs	r3, r3, #5
 800ba10:	011c      	lsls	r4, r3, #4
 800ba12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba16:	2200      	movs	r2, #0
 800ba18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ba1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ba20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ba24:	4642      	mov	r2, r8
 800ba26:	464b      	mov	r3, r9
 800ba28:	1891      	adds	r1, r2, r2
 800ba2a:	61b9      	str	r1, [r7, #24]
 800ba2c:	415b      	adcs	r3, r3
 800ba2e:	61fb      	str	r3, [r7, #28]
 800ba30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba34:	4641      	mov	r1, r8
 800ba36:	1851      	adds	r1, r2, r1
 800ba38:	6139      	str	r1, [r7, #16]
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	414b      	adcs	r3, r1
 800ba3e:	617b      	str	r3, [r7, #20]
 800ba40:	f04f 0200 	mov.w	r2, #0
 800ba44:	f04f 0300 	mov.w	r3, #0
 800ba48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ba4c:	4659      	mov	r1, fp
 800ba4e:	00cb      	lsls	r3, r1, #3
 800ba50:	4651      	mov	r1, sl
 800ba52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba56:	4651      	mov	r1, sl
 800ba58:	00ca      	lsls	r2, r1, #3
 800ba5a:	4610      	mov	r0, r2
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	4603      	mov	r3, r0
 800ba60:	4642      	mov	r2, r8
 800ba62:	189b      	adds	r3, r3, r2
 800ba64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba68:	464b      	mov	r3, r9
 800ba6a:	460a      	mov	r2, r1
 800ba6c:	eb42 0303 	adc.w	r3, r2, r3
 800ba70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ba80:	f04f 0200 	mov.w	r2, #0
 800ba84:	f04f 0300 	mov.w	r3, #0
 800ba88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ba8c:	4649      	mov	r1, r9
 800ba8e:	008b      	lsls	r3, r1, #2
 800ba90:	4641      	mov	r1, r8
 800ba92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba96:	4641      	mov	r1, r8
 800ba98:	008a      	lsls	r2, r1, #2
 800ba9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ba9e:	f7f5 f8db 	bl	8000c58 <__aeabi_uldivmod>
 800baa2:	4602      	mov	r2, r0
 800baa4:	460b      	mov	r3, r1
 800baa6:	4b39      	ldr	r3, [pc, #228]	; (800bb8c <UART_SetConfig+0x4e4>)
 800baa8:	fba3 1302 	umull	r1, r3, r3, r2
 800baac:	095b      	lsrs	r3, r3, #5
 800baae:	2164      	movs	r1, #100	; 0x64
 800bab0:	fb01 f303 	mul.w	r3, r1, r3
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	011b      	lsls	r3, r3, #4
 800bab8:	3332      	adds	r3, #50	; 0x32
 800baba:	4a34      	ldr	r2, [pc, #208]	; (800bb8c <UART_SetConfig+0x4e4>)
 800babc:	fba2 2303 	umull	r2, r3, r2, r3
 800bac0:	095b      	lsrs	r3, r3, #5
 800bac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bac6:	441c      	add	r4, r3
 800bac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bacc:	2200      	movs	r2, #0
 800bace:	673b      	str	r3, [r7, #112]	; 0x70
 800bad0:	677a      	str	r2, [r7, #116]	; 0x74
 800bad2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bad6:	4642      	mov	r2, r8
 800bad8:	464b      	mov	r3, r9
 800bada:	1891      	adds	r1, r2, r2
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	415b      	adcs	r3, r3
 800bae0:	60fb      	str	r3, [r7, #12]
 800bae2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bae6:	4641      	mov	r1, r8
 800bae8:	1851      	adds	r1, r2, r1
 800baea:	6039      	str	r1, [r7, #0]
 800baec:	4649      	mov	r1, r9
 800baee:	414b      	adcs	r3, r1
 800baf0:	607b      	str	r3, [r7, #4]
 800baf2:	f04f 0200 	mov.w	r2, #0
 800baf6:	f04f 0300 	mov.w	r3, #0
 800bafa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bafe:	4659      	mov	r1, fp
 800bb00:	00cb      	lsls	r3, r1, #3
 800bb02:	4651      	mov	r1, sl
 800bb04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb08:	4651      	mov	r1, sl
 800bb0a:	00ca      	lsls	r2, r1, #3
 800bb0c:	4610      	mov	r0, r2
 800bb0e:	4619      	mov	r1, r3
 800bb10:	4603      	mov	r3, r0
 800bb12:	4642      	mov	r2, r8
 800bb14:	189b      	adds	r3, r3, r2
 800bb16:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb18:	464b      	mov	r3, r9
 800bb1a:	460a      	mov	r2, r1
 800bb1c:	eb42 0303 	adc.w	r3, r2, r3
 800bb20:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	663b      	str	r3, [r7, #96]	; 0x60
 800bb2c:	667a      	str	r2, [r7, #100]	; 0x64
 800bb2e:	f04f 0200 	mov.w	r2, #0
 800bb32:	f04f 0300 	mov.w	r3, #0
 800bb36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bb3a:	4649      	mov	r1, r9
 800bb3c:	008b      	lsls	r3, r1, #2
 800bb3e:	4641      	mov	r1, r8
 800bb40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb44:	4641      	mov	r1, r8
 800bb46:	008a      	lsls	r2, r1, #2
 800bb48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bb4c:	f7f5 f884 	bl	8000c58 <__aeabi_uldivmod>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4b0d      	ldr	r3, [pc, #52]	; (800bb8c <UART_SetConfig+0x4e4>)
 800bb56:	fba3 1302 	umull	r1, r3, r3, r2
 800bb5a:	095b      	lsrs	r3, r3, #5
 800bb5c:	2164      	movs	r1, #100	; 0x64
 800bb5e:	fb01 f303 	mul.w	r3, r1, r3
 800bb62:	1ad3      	subs	r3, r2, r3
 800bb64:	011b      	lsls	r3, r3, #4
 800bb66:	3332      	adds	r3, #50	; 0x32
 800bb68:	4a08      	ldr	r2, [pc, #32]	; (800bb8c <UART_SetConfig+0x4e4>)
 800bb6a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb6e:	095b      	lsrs	r3, r3, #5
 800bb70:	f003 020f 	and.w	r2, r3, #15
 800bb74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4422      	add	r2, r4
 800bb7c:	609a      	str	r2, [r3, #8]
}
 800bb7e:	bf00      	nop
 800bb80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bb84:	46bd      	mov	sp, r7
 800bb86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb8a:	bf00      	nop
 800bb8c:	51eb851f 	.word	0x51eb851f

0800bb90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb90:	b084      	sub	sp, #16
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b084      	sub	sp, #16
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	f107 001c 	add.w	r0, r7, #28
 800bb9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d122      	bne.n	800bbee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bbbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bbd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d105      	bne.n	800bbe2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 f9c0 	bl	800bf68 <USB_CoreReset>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	73fb      	strb	r3, [r7, #15]
 800bbec:	e01a      	b.n	800bc24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 f9b4 	bl	800bf68 <USB_CoreReset>
 800bc00:	4603      	mov	r3, r0
 800bc02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bc04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d106      	bne.n	800bc18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	639a      	str	r2, [r3, #56]	; 0x38
 800bc16:	e005      	b.n	800bc24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d10b      	bne.n	800bc42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	f043 0206 	orr.w	r2, r3, #6
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	f043 0220 	orr.w	r2, r3, #32
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3710      	adds	r7, #16
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc4e:	b004      	add	sp, #16
 800bc50:	4770      	bx	lr

0800bc52 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc52:	b480      	push	{r7}
 800bc54:	b083      	sub	sp, #12
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	f043 0201 	orr.w	r2, r3, #1
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bc66:	2300      	movs	r3, #0
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	f023 0201 	bic.w	r2, r3, #1
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	370c      	adds	r7, #12
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr

0800bc96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b084      	sub	sp, #16
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
 800bc9e:	460b      	mov	r3, r1
 800bca0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bca2:	2300      	movs	r3, #0
 800bca4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bcb2:	78fb      	ldrb	r3, [r7, #3]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d115      	bne.n	800bce4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bcc4:	2001      	movs	r0, #1
 800bcc6:	f7f9 fe45 	bl	8005954 <HAL_Delay>
      ms++;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	3301      	adds	r3, #1
 800bcce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 f93a 	bl	800bf4a <USB_GetMode>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d01e      	beq.n	800bd1a <USB_SetCurrentMode+0x84>
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2b31      	cmp	r3, #49	; 0x31
 800bce0:	d9f0      	bls.n	800bcc4 <USB_SetCurrentMode+0x2e>
 800bce2:	e01a      	b.n	800bd1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bce4:	78fb      	ldrb	r3, [r7, #3]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d115      	bne.n	800bd16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bcf6:	2001      	movs	r0, #1
 800bcf8:	f7f9 fe2c 	bl	8005954 <HAL_Delay>
      ms++;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 f921 	bl	800bf4a <USB_GetMode>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d005      	beq.n	800bd1a <USB_SetCurrentMode+0x84>
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2b31      	cmp	r3, #49	; 0x31
 800bd12:	d9f0      	bls.n	800bcf6 <USB_SetCurrentMode+0x60>
 800bd14:	e001      	b.n	800bd1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bd16:	2301      	movs	r3, #1
 800bd18:	e005      	b.n	800bd26 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2b32      	cmp	r3, #50	; 0x32
 800bd1e:	d101      	bne.n	800bd24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	e000      	b.n	800bd26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
	...

0800bd30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b085      	sub	sp, #20
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	3301      	adds	r3, #1
 800bd42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	4a13      	ldr	r2, [pc, #76]	; (800bd94 <USB_FlushTxFifo+0x64>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d901      	bls.n	800bd50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bd4c:	2303      	movs	r3, #3
 800bd4e:	e01b      	b.n	800bd88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	daf2      	bge.n	800bd3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	019b      	lsls	r3, r3, #6
 800bd60:	f043 0220 	orr.w	r2, r3, #32
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	4a08      	ldr	r2, [pc, #32]	; (800bd94 <USB_FlushTxFifo+0x64>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d901      	bls.n	800bd7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bd76:	2303      	movs	r3, #3
 800bd78:	e006      	b.n	800bd88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	691b      	ldr	r3, [r3, #16]
 800bd7e:	f003 0320 	and.w	r3, r3, #32
 800bd82:	2b20      	cmp	r3, #32
 800bd84:	d0f0      	beq.n	800bd68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3714      	adds	r7, #20
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr
 800bd94:	00030d40 	.word	0x00030d40

0800bd98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bda0:	2300      	movs	r3, #0
 800bda2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	3301      	adds	r3, #1
 800bda8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	4a11      	ldr	r2, [pc, #68]	; (800bdf4 <USB_FlushRxFifo+0x5c>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d901      	bls.n	800bdb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	e018      	b.n	800bde8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	daf2      	bge.n	800bda4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2210      	movs	r2, #16
 800bdc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	4a08      	ldr	r2, [pc, #32]	; (800bdf4 <USB_FlushRxFifo+0x5c>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d901      	bls.n	800bdda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	e006      	b.n	800bde8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	f003 0310 	and.w	r3, r3, #16
 800bde2:	2b10      	cmp	r3, #16
 800bde4:	d0f0      	beq.n	800bdc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3714      	adds	r7, #20
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr
 800bdf4:	00030d40 	.word	0x00030d40

0800bdf8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b089      	sub	sp, #36	; 0x24
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	4611      	mov	r1, r2
 800be04:	461a      	mov	r2, r3
 800be06:	460b      	mov	r3, r1
 800be08:	71fb      	strb	r3, [r7, #7]
 800be0a:	4613      	mov	r3, r2
 800be0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800be16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d123      	bne.n	800be66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800be1e:	88bb      	ldrh	r3, [r7, #4]
 800be20:	3303      	adds	r3, #3
 800be22:	089b      	lsrs	r3, r3, #2
 800be24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800be26:	2300      	movs	r3, #0
 800be28:	61bb      	str	r3, [r7, #24]
 800be2a:	e018      	b.n	800be5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800be2c:	79fb      	ldrb	r3, [r7, #7]
 800be2e:	031a      	lsls	r2, r3, #12
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	4413      	add	r3, r2
 800be34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be38:	461a      	mov	r2, r3
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	3301      	adds	r3, #1
 800be44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800be46:	69fb      	ldr	r3, [r7, #28]
 800be48:	3301      	adds	r3, #1
 800be4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	3301      	adds	r3, #1
 800be50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	3301      	adds	r3, #1
 800be56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	3301      	adds	r3, #1
 800be5c:	61bb      	str	r3, [r7, #24]
 800be5e:	69ba      	ldr	r2, [r7, #24]
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	429a      	cmp	r2, r3
 800be64:	d3e2      	bcc.n	800be2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3724      	adds	r7, #36	; 0x24
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800be74:	b480      	push	{r7}
 800be76:	b08b      	sub	sp, #44	; 0x2c
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	4613      	mov	r3, r2
 800be80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800be8a:	88fb      	ldrh	r3, [r7, #6]
 800be8c:	089b      	lsrs	r3, r3, #2
 800be8e:	b29b      	uxth	r3, r3
 800be90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800be92:	88fb      	ldrh	r3, [r7, #6]
 800be94:	f003 0303 	and.w	r3, r3, #3
 800be98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800be9a:	2300      	movs	r3, #0
 800be9c:	623b      	str	r3, [r7, #32]
 800be9e:	e014      	b.n	800beca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beaa:	601a      	str	r2, [r3, #0]
    pDest++;
 800beac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beae:	3301      	adds	r3, #1
 800beb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800beb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb4:	3301      	adds	r3, #1
 800beb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800beb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beba:	3301      	adds	r3, #1
 800bebc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec0:	3301      	adds	r3, #1
 800bec2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bec4:	6a3b      	ldr	r3, [r7, #32]
 800bec6:	3301      	adds	r3, #1
 800bec8:	623b      	str	r3, [r7, #32]
 800beca:	6a3a      	ldr	r2, [r7, #32]
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d3e6      	bcc.n	800bea0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bed2:	8bfb      	ldrh	r3, [r7, #30]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d01e      	beq.n	800bf16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bed8:	2300      	movs	r3, #0
 800beda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bee2:	461a      	mov	r2, r3
 800bee4:	f107 0310 	add.w	r3, r7, #16
 800bee8:	6812      	ldr	r2, [r2, #0]
 800beea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800beec:	693a      	ldr	r2, [r7, #16]
 800beee:	6a3b      	ldr	r3, [r7, #32]
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	00db      	lsls	r3, r3, #3
 800bef4:	fa22 f303 	lsr.w	r3, r2, r3
 800bef8:	b2da      	uxtb	r2, r3
 800befa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befc:	701a      	strb	r2, [r3, #0]
      i++;
 800befe:	6a3b      	ldr	r3, [r7, #32]
 800bf00:	3301      	adds	r3, #1
 800bf02:	623b      	str	r3, [r7, #32]
      pDest++;
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	3301      	adds	r3, #1
 800bf08:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bf0a:	8bfb      	ldrh	r3, [r7, #30]
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bf10:	8bfb      	ldrh	r3, [r7, #30]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1ea      	bne.n	800beec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	372c      	adds	r7, #44	; 0x2c
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr

0800bf24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b085      	sub	sp, #20
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	695b      	ldr	r3, [r3, #20]
 800bf30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	699b      	ldr	r3, [r3, #24]
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	4013      	ands	r3, r2
 800bf3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3714      	adds	r7, #20
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	b083      	sub	sp, #12
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	695b      	ldr	r3, [r3, #20]
 800bf56:	f003 0301 	and.w	r3, r3, #1
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	370c      	adds	r7, #12
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
	...

0800bf68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf70:	2300      	movs	r3, #0
 800bf72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	3301      	adds	r3, #1
 800bf78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	4a13      	ldr	r2, [pc, #76]	; (800bfcc <USB_CoreReset+0x64>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d901      	bls.n	800bf86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bf82:	2303      	movs	r3, #3
 800bf84:	e01b      	b.n	800bfbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	691b      	ldr	r3, [r3, #16]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	daf2      	bge.n	800bf74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	f043 0201 	orr.w	r2, r3, #1
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	4a09      	ldr	r2, [pc, #36]	; (800bfcc <USB_CoreReset+0x64>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d901      	bls.n	800bfb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bfac:	2303      	movs	r3, #3
 800bfae:	e006      	b.n	800bfbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	f003 0301 	and.w	r3, r3, #1
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d0f0      	beq.n	800bf9e <USB_CoreReset+0x36>

  return HAL_OK;
 800bfbc:	2300      	movs	r3, #0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3714      	adds	r7, #20
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	00030d40 	.word	0x00030d40

0800bfd0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bfd0:	b084      	sub	sp, #16
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b086      	sub	sp, #24
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bfde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bff0:	461a      	mov	r2, r3
 800bff2:	2300      	movs	r3, #0
 800bff4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bffa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c006:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c012:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c01e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c022:	2b00      	cmp	r3, #0
 800c024:	d018      	beq.n	800c058 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d10a      	bne.n	800c042 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c03a:	f043 0304 	orr.w	r3, r3, #4
 800c03e:	6013      	str	r3, [r2, #0]
 800c040:	e014      	b.n	800c06c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c050:	f023 0304 	bic.w	r3, r3, #4
 800c054:	6013      	str	r3, [r2, #0]
 800c056:	e009      	b.n	800c06c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c066:	f023 0304 	bic.w	r3, r3, #4
 800c06a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c06c:	2110      	movs	r1, #16
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7ff fe5e 	bl	800bd30 <USB_FlushTxFifo>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800c07a:	2301      	movs	r3, #1
 800c07c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7ff fe8a 	bl	800bd98 <USB_FlushRxFifo>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	d001      	beq.n	800c08e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800c08a:	2301      	movs	r3, #1
 800c08c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c08e:	2300      	movs	r3, #0
 800c090:	613b      	str	r3, [r7, #16]
 800c092:	e015      	b.n	800c0c0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	015a      	lsls	r2, r3, #5
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	4413      	add	r3, r2
 800c09c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	015a      	lsls	r2, r3, #5
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	613b      	str	r3, [r7, #16]
 800c0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c2:	693a      	ldr	r2, [r7, #16]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d3e5      	bcc.n	800c094 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00b      	beq.n	800c0fa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c0e8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	4a13      	ldr	r2, [pc, #76]	; (800c13c <USB_HostInit+0x16c>)
 800c0ee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a13      	ldr	r2, [pc, #76]	; (800c140 <USB_HostInit+0x170>)
 800c0f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c0f8:	e009      	b.n	800c10e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2280      	movs	r2, #128	; 0x80
 800c0fe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4a10      	ldr	r2, [pc, #64]	; (800c144 <USB_HostInit+0x174>)
 800c104:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4a0f      	ldr	r2, [pc, #60]	; (800c148 <USB_HostInit+0x178>)
 800c10a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c110:	2b00      	cmp	r3, #0
 800c112:	d105      	bne.n	800c120 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	699b      	ldr	r3, [r3, #24]
 800c118:	f043 0210 	orr.w	r2, r3, #16
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	699a      	ldr	r2, [r3, #24]
 800c124:	4b09      	ldr	r3, [pc, #36]	; (800c14c <USB_HostInit+0x17c>)
 800c126:	4313      	orrs	r3, r2
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c12c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3718      	adds	r7, #24
 800c132:	46bd      	mov	sp, r7
 800c134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c138:	b004      	add	sp, #16
 800c13a:	4770      	bx	lr
 800c13c:	01000200 	.word	0x01000200
 800c140:	00e00300 	.word	0x00e00300
 800c144:	00600080 	.word	0x00600080
 800c148:	004000e0 	.word	0x004000e0
 800c14c:	a3200008 	.word	0xa3200008

0800c150 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	460b      	mov	r3, r1
 800c15a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c16e:	f023 0303 	bic.w	r3, r3, #3
 800c172:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	78fb      	ldrb	r3, [r7, #3]
 800c17e:	f003 0303 	and.w	r3, r3, #3
 800c182:	68f9      	ldr	r1, [r7, #12]
 800c184:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c188:	4313      	orrs	r3, r2
 800c18a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c18c:	78fb      	ldrb	r3, [r7, #3]
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d107      	bne.n	800c1a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c198:	461a      	mov	r2, r3
 800c19a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c19e:	6053      	str	r3, [r2, #4]
 800c1a0:	e009      	b.n	800c1b6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c1a2:	78fb      	ldrb	r3, [r7, #3]
 800c1a4:	2b02      	cmp	r3, #2
 800c1a6:	d106      	bne.n	800c1b6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	f241 7370 	movw	r3, #6000	; 0x1770
 800c1b4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3714      	adds	r7, #20
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c1e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c1ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c1f4:	2064      	movs	r0, #100	; 0x64
 800c1f6:	f7f9 fbad 	bl	8005954 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	68fa      	ldr	r2, [r7, #12]
 800c1fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c202:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c206:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c208:	200a      	movs	r0, #10
 800c20a:	f7f9 fba3 	bl	8005954 <HAL_Delay>

  return HAL_OK;
 800c20e:	2300      	movs	r3, #0
}
 800c210:	4618      	mov	r0, r3
 800c212:	3710      	adds	r7, #16
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	460b      	mov	r3, r1
 800c222:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c228:	2300      	movs	r3, #0
 800c22a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c23c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c244:	2b00      	cmp	r3, #0
 800c246:	d109      	bne.n	800c25c <USB_DriveVbus+0x44>
 800c248:	78fb      	ldrb	r3, [r7, #3]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d106      	bne.n	800c25c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	68fa      	ldr	r2, [r7, #12]
 800c252:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c256:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c25a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c266:	d109      	bne.n	800c27c <USB_DriveVbus+0x64>
 800c268:	78fb      	ldrb	r3, [r7, #3]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d106      	bne.n	800c27c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c27a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3714      	adds	r7, #20
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr

0800c28a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c28a:	b480      	push	{r7}
 800c28c:	b085      	sub	sp, #20
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c296:	2300      	movs	r3, #0
 800c298:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	0c5b      	lsrs	r3, r3, #17
 800c2a8:	f003 0303 	and.w	r3, r3, #3
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3714      	adds	r7, #20
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	b29b      	uxth	r3, r3
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3714      	adds	r7, #20
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr
	...

0800c2dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b088      	sub	sp, #32
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	4608      	mov	r0, r1
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	70fb      	strb	r3, [r7, #3]
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	70bb      	strb	r3, [r7, #2]
 800c2f2:	4613      	mov	r3, r2
 800c2f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c2fe:	78fb      	ldrb	r3, [r7, #3]
 800c300:	015a      	lsls	r2, r3, #5
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	4413      	add	r3, r2
 800c306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c30a:	461a      	mov	r2, r3
 800c30c:	f04f 33ff 	mov.w	r3, #4294967295
 800c310:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c312:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c316:	2b03      	cmp	r3, #3
 800c318:	d87e      	bhi.n	800c418 <USB_HC_Init+0x13c>
 800c31a:	a201      	add	r2, pc, #4	; (adr r2, 800c320 <USB_HC_Init+0x44>)
 800c31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c320:	0800c331 	.word	0x0800c331
 800c324:	0800c3db 	.word	0x0800c3db
 800c328:	0800c331 	.word	0x0800c331
 800c32c:	0800c39d 	.word	0x0800c39d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c330:	78fb      	ldrb	r3, [r7, #3]
 800c332:	015a      	lsls	r2, r3, #5
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	4413      	add	r3, r2
 800c338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c33c:	461a      	mov	r2, r3
 800c33e:	f240 439d 	movw	r3, #1181	; 0x49d
 800c342:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c344:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	da10      	bge.n	800c36e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c34c:	78fb      	ldrb	r3, [r7, #3]
 800c34e:	015a      	lsls	r2, r3, #5
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	4413      	add	r3, r2
 800c354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	78fa      	ldrb	r2, [r7, #3]
 800c35c:	0151      	lsls	r1, r2, #5
 800c35e:	693a      	ldr	r2, [r7, #16]
 800c360:	440a      	add	r2, r1
 800c362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c36a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c36c:	e057      	b.n	800c41e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c376:	2b00      	cmp	r3, #0
 800c378:	d051      	beq.n	800c41e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c37a:	78fb      	ldrb	r3, [r7, #3]
 800c37c:	015a      	lsls	r2, r3, #5
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	4413      	add	r3, r2
 800c382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	78fa      	ldrb	r2, [r7, #3]
 800c38a:	0151      	lsls	r1, r2, #5
 800c38c:	693a      	ldr	r2, [r7, #16]
 800c38e:	440a      	add	r2, r1
 800c390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c394:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c398:	60d3      	str	r3, [r2, #12]
      break;
 800c39a:	e040      	b.n	800c41e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c39c:	78fb      	ldrb	r3, [r7, #3]
 800c39e:	015a      	lsls	r2, r3, #5
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	f240 639d 	movw	r3, #1693	; 0x69d
 800c3ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c3b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	da34      	bge.n	800c422 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c3b8:	78fb      	ldrb	r3, [r7, #3]
 800c3ba:	015a      	lsls	r2, r3, #5
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	4413      	add	r3, r2
 800c3c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	78fa      	ldrb	r2, [r7, #3]
 800c3c8:	0151      	lsls	r1, r2, #5
 800c3ca:	693a      	ldr	r2, [r7, #16]
 800c3cc:	440a      	add	r2, r1
 800c3ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c3d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3d6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c3d8:	e023      	b.n	800c422 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c3da:	78fb      	ldrb	r3, [r7, #3]
 800c3dc:	015a      	lsls	r2, r3, #5
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	f240 2325 	movw	r3, #549	; 0x225
 800c3ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c3ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	da17      	bge.n	800c426 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c3f6:	78fb      	ldrb	r3, [r7, #3]
 800c3f8:	015a      	lsls	r2, r3, #5
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	78fa      	ldrb	r2, [r7, #3]
 800c406:	0151      	lsls	r1, r2, #5
 800c408:	693a      	ldr	r2, [r7, #16]
 800c40a:	440a      	add	r2, r1
 800c40c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c410:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c414:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c416:	e006      	b.n	800c426 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c418:	2301      	movs	r3, #1
 800c41a:	77fb      	strb	r3, [r7, #31]
      break;
 800c41c:	e004      	b.n	800c428 <USB_HC_Init+0x14c>
      break;
 800c41e:	bf00      	nop
 800c420:	e002      	b.n	800c428 <USB_HC_Init+0x14c>
      break;
 800c422:	bf00      	nop
 800c424:	e000      	b.n	800c428 <USB_HC_Init+0x14c>
      break;
 800c426:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c428:	78fb      	ldrb	r3, [r7, #3]
 800c42a:	015a      	lsls	r2, r3, #5
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	4413      	add	r3, r2
 800c430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	78fa      	ldrb	r2, [r7, #3]
 800c438:	0151      	lsls	r1, r2, #5
 800c43a:	693a      	ldr	r2, [r7, #16]
 800c43c:	440a      	add	r2, r1
 800c43e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c442:	f043 0302 	orr.w	r3, r3, #2
 800c446:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c44e:	699a      	ldr	r2, [r3, #24]
 800c450:	78fb      	ldrb	r3, [r7, #3]
 800c452:	f003 030f 	and.w	r3, r3, #15
 800c456:	2101      	movs	r1, #1
 800c458:	fa01 f303 	lsl.w	r3, r1, r3
 800c45c:	6939      	ldr	r1, [r7, #16]
 800c45e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c462:	4313      	orrs	r3, r2
 800c464:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	699b      	ldr	r3, [r3, #24]
 800c46a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c472:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c476:	2b00      	cmp	r3, #0
 800c478:	da03      	bge.n	800c482 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c47a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c47e:	61bb      	str	r3, [r7, #24]
 800c480:	e001      	b.n	800c486 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800c482:	2300      	movs	r3, #0
 800c484:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f7ff feff 	bl	800c28a <USB_GetHostSpeed>
 800c48c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c48e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c492:	2b02      	cmp	r3, #2
 800c494:	d106      	bne.n	800c4a4 <USB_HC_Init+0x1c8>
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2b02      	cmp	r3, #2
 800c49a:	d003      	beq.n	800c4a4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c49c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c4a0:	617b      	str	r3, [r7, #20]
 800c4a2:	e001      	b.n	800c4a8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c4a8:	787b      	ldrb	r3, [r7, #1]
 800c4aa:	059b      	lsls	r3, r3, #22
 800c4ac:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c4b0:	78bb      	ldrb	r3, [r7, #2]
 800c4b2:	02db      	lsls	r3, r3, #11
 800c4b4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c4b8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c4ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c4be:	049b      	lsls	r3, r3, #18
 800c4c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c4c4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c4c6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c4c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c4cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c4d2:	78fb      	ldrb	r3, [r7, #3]
 800c4d4:	0159      	lsls	r1, r3, #5
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	440b      	add	r3, r1
 800c4da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4de:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c4e4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c4e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c4ea:	2b03      	cmp	r3, #3
 800c4ec:	d003      	beq.n	800c4f6 <USB_HC_Init+0x21a>
 800c4ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d10f      	bne.n	800c516 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c4f6:	78fb      	ldrb	r3, [r7, #3]
 800c4f8:	015a      	lsls	r2, r3, #5
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	78fa      	ldrb	r2, [r7, #3]
 800c506:	0151      	lsls	r1, r2, #5
 800c508:	693a      	ldr	r2, [r7, #16]
 800c50a:	440a      	add	r2, r1
 800c50c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c510:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c514:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c516:	7ffb      	ldrb	r3, [r7, #31]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3720      	adds	r7, #32
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b08c      	sub	sp, #48	; 0x30
 800c524:	af02      	add	r7, sp, #8
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	4613      	mov	r3, r2
 800c52c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	785b      	ldrb	r3, [r3, #1]
 800c536:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c53c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c546:	2b00      	cmp	r3, #0
 800c548:	d02d      	beq.n	800c5a6 <USB_HC_StartXfer+0x86>
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	791b      	ldrb	r3, [r3, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d129      	bne.n	800c5a6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c552:	79fb      	ldrb	r3, [r7, #7]
 800c554:	2b01      	cmp	r3, #1
 800c556:	d117      	bne.n	800c588 <USB_HC_StartXfer+0x68>
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	79db      	ldrb	r3, [r3, #7]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d003      	beq.n	800c568 <USB_HC_StartXfer+0x48>
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	79db      	ldrb	r3, [r3, #7]
 800c564:	2b02      	cmp	r3, #2
 800c566:	d10f      	bne.n	800c588 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	015a      	lsls	r2, r3, #5
 800c56c:	6a3b      	ldr	r3, [r7, #32]
 800c56e:	4413      	add	r3, r2
 800c570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	69fa      	ldr	r2, [r7, #28]
 800c578:	0151      	lsls	r1, r2, #5
 800c57a:	6a3a      	ldr	r2, [r7, #32]
 800c57c:	440a      	add	r2, r1
 800c57e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c586:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c588:	79fb      	ldrb	r3, [r7, #7]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d10b      	bne.n	800c5a6 <USB_HC_StartXfer+0x86>
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	795b      	ldrb	r3, [r3, #5]
 800c592:	2b01      	cmp	r3, #1
 800c594:	d107      	bne.n	800c5a6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	785b      	ldrb	r3, [r3, #1]
 800c59a:	4619      	mov	r1, r3
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f000 fa0f 	bl	800c9c0 <USB_DoPing>
      return HAL_OK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	e0f8      	b.n	800c798 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	695b      	ldr	r3, [r3, #20]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d018      	beq.n	800c5e0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	695b      	ldr	r3, [r3, #20]
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	8912      	ldrh	r2, [r2, #8]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	68ba      	ldr	r2, [r7, #8]
 800c5bc:	8912      	ldrh	r2, [r2, #8]
 800c5be:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5c2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c5c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c5c6:	8b7b      	ldrh	r3, [r7, #26]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d90b      	bls.n	800c5e4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c5cc:	8b7b      	ldrh	r3, [r7, #26]
 800c5ce:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c5d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c5d2:	68ba      	ldr	r2, [r7, #8]
 800c5d4:	8912      	ldrh	r2, [r2, #8]
 800c5d6:	fb03 f202 	mul.w	r2, r3, r2
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	611a      	str	r2, [r3, #16]
 800c5de:	e001      	b.n	800c5e4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	78db      	ldrb	r3, [r3, #3]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d007      	beq.n	800c5fc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c5ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	8912      	ldrh	r2, [r2, #8]
 800c5f2:	fb03 f202 	mul.w	r2, r3, r2
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	611a      	str	r2, [r3, #16]
 800c5fa:	e003      	b.n	800c604 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	695a      	ldr	r2, [r3, #20]
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	691b      	ldr	r3, [r3, #16]
 800c608:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c60c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c60e:	04d9      	lsls	r1, r3, #19
 800c610:	4b63      	ldr	r3, [pc, #396]	; (800c7a0 <USB_HC_StartXfer+0x280>)
 800c612:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c614:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	7a9b      	ldrb	r3, [r3, #10]
 800c61a:	075b      	lsls	r3, r3, #29
 800c61c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c620:	69f9      	ldr	r1, [r7, #28]
 800c622:	0148      	lsls	r0, r1, #5
 800c624:	6a39      	ldr	r1, [r7, #32]
 800c626:	4401      	add	r1, r0
 800c628:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c62c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c62e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c630:	79fb      	ldrb	r3, [r7, #7]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d009      	beq.n	800c64a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	68d9      	ldr	r1, [r3, #12]
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	015a      	lsls	r2, r3, #5
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	4413      	add	r3, r2
 800c642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c646:	460a      	mov	r2, r1
 800c648:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c64a:	6a3b      	ldr	r3, [r7, #32]
 800c64c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	f003 0301 	and.w	r3, r3, #1
 800c656:	2b00      	cmp	r3, #0
 800c658:	bf0c      	ite	eq
 800c65a:	2301      	moveq	r3, #1
 800c65c:	2300      	movne	r3, #0
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	015a      	lsls	r2, r3, #5
 800c666:	6a3b      	ldr	r3, [r7, #32]
 800c668:	4413      	add	r3, r2
 800c66a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	69fa      	ldr	r2, [r7, #28]
 800c672:	0151      	lsls	r1, r2, #5
 800c674:	6a3a      	ldr	r2, [r7, #32]
 800c676:	440a      	add	r2, r1
 800c678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c67c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c680:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	015a      	lsls	r2, r3, #5
 800c686:	6a3b      	ldr	r3, [r7, #32]
 800c688:	4413      	add	r3, r2
 800c68a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	7e7b      	ldrb	r3, [r7, #25]
 800c692:	075b      	lsls	r3, r3, #29
 800c694:	69f9      	ldr	r1, [r7, #28]
 800c696:	0148      	lsls	r0, r1, #5
 800c698:	6a39      	ldr	r1, [r7, #32]
 800c69a:	4401      	add	r1, r0
 800c69c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	015a      	lsls	r2, r3, #5
 800c6a8:	6a3b      	ldr	r3, [r7, #32]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c6ba:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	78db      	ldrb	r3, [r3, #3]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d004      	beq.n	800c6ce <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6ca:	613b      	str	r3, [r7, #16]
 800c6cc:	e003      	b.n	800c6d6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c6d4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c6dc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	015a      	lsls	r2, r3, #5
 800c6e2:	6a3b      	ldr	r3, [r7, #32]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c6f0:	79fb      	ldrb	r3, [r7, #7]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d001      	beq.n	800c6fa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	e04e      	b.n	800c798 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	78db      	ldrb	r3, [r3, #3]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d149      	bne.n	800c796 <USB_HC_StartXfer+0x276>
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	695b      	ldr	r3, [r3, #20]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d045      	beq.n	800c796 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	79db      	ldrb	r3, [r3, #7]
 800c70e:	2b03      	cmp	r3, #3
 800c710:	d830      	bhi.n	800c774 <USB_HC_StartXfer+0x254>
 800c712:	a201      	add	r2, pc, #4	; (adr r2, 800c718 <USB_HC_StartXfer+0x1f8>)
 800c714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c718:	0800c729 	.word	0x0800c729
 800c71c:	0800c74d 	.word	0x0800c74d
 800c720:	0800c729 	.word	0x0800c729
 800c724:	0800c74d 	.word	0x0800c74d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	695b      	ldr	r3, [r3, #20]
 800c72c:	3303      	adds	r3, #3
 800c72e:	089b      	lsrs	r3, r3, #2
 800c730:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c732:	8afa      	ldrh	r2, [r7, #22]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c738:	b29b      	uxth	r3, r3
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d91c      	bls.n	800c778 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	699b      	ldr	r3, [r3, #24]
 800c742:	f043 0220 	orr.w	r2, r3, #32
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	619a      	str	r2, [r3, #24]
        }
        break;
 800c74a:	e015      	b.n	800c778 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	695b      	ldr	r3, [r3, #20]
 800c750:	3303      	adds	r3, #3
 800c752:	089b      	lsrs	r3, r3, #2
 800c754:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c756:	8afa      	ldrh	r2, [r7, #22]
 800c758:	6a3b      	ldr	r3, [r7, #32]
 800c75a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c75e:	691b      	ldr	r3, [r3, #16]
 800c760:	b29b      	uxth	r3, r3
 800c762:	429a      	cmp	r2, r3
 800c764:	d90a      	bls.n	800c77c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	699b      	ldr	r3, [r3, #24]
 800c76a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	619a      	str	r2, [r3, #24]
        }
        break;
 800c772:	e003      	b.n	800c77c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c774:	bf00      	nop
 800c776:	e002      	b.n	800c77e <USB_HC_StartXfer+0x25e>
        break;
 800c778:	bf00      	nop
 800c77a:	e000      	b.n	800c77e <USB_HC_StartXfer+0x25e>
        break;
 800c77c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	68d9      	ldr	r1, [r3, #12]
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	785a      	ldrb	r2, [r3, #1]
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	2000      	movs	r0, #0
 800c78e:	9000      	str	r0, [sp, #0]
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f7ff fb31 	bl	800bdf8 <USB_WritePacket>
  }

  return HAL_OK;
 800c796:	2300      	movs	r3, #0
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3728      	adds	r7, #40	; 0x28
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	1ff80000 	.word	0x1ff80000

0800c7a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c7b6:	695b      	ldr	r3, [r3, #20]
 800c7b8:	b29b      	uxth	r3, r3
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3714      	adds	r7, #20
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr

0800c7c6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c7c6:	b480      	push	{r7}
 800c7c8:	b089      	sub	sp, #36	; 0x24
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800c7d6:	78fb      	ldrb	r3, [r7, #3]
 800c7d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	015a      	lsls	r2, r3, #5
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	0c9b      	lsrs	r3, r3, #18
 800c7ee:	f003 0303 	and.w	r3, r3, #3
 800c7f2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c7f4:	69bb      	ldr	r3, [r7, #24]
 800c7f6:	015a      	lsls	r2, r3, #5
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	0fdb      	lsrs	r3, r3, #31
 800c804:	f003 0301 	and.w	r3, r3, #1
 800c808:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	f003 0320 	and.w	r3, r3, #32
 800c812:	2b20      	cmp	r3, #32
 800c814:	d104      	bne.n	800c820 <USB_HC_Halt+0x5a>
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d101      	bne.n	800c820 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c81c:	2300      	movs	r3, #0
 800c81e:	e0c8      	b.n	800c9b2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d002      	beq.n	800c82c <USB_HC_Halt+0x66>
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	2b02      	cmp	r3, #2
 800c82a:	d163      	bne.n	800c8f4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	015a      	lsls	r2, r3, #5
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	4413      	add	r3, r2
 800c834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	69ba      	ldr	r2, [r7, #24]
 800c83c:	0151      	lsls	r1, r2, #5
 800c83e:	69fa      	ldr	r2, [r7, #28]
 800c840:	440a      	add	r2, r1
 800c842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c846:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c84a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	f003 0320 	and.w	r3, r3, #32
 800c854:	2b00      	cmp	r3, #0
 800c856:	f040 80ab 	bne.w	800c9b0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c862:	2b00      	cmp	r3, #0
 800c864:	d133      	bne.n	800c8ce <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	015a      	lsls	r2, r3, #5
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	4413      	add	r3, r2
 800c86e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	69ba      	ldr	r2, [r7, #24]
 800c876:	0151      	lsls	r1, r2, #5
 800c878:	69fa      	ldr	r2, [r7, #28]
 800c87a:	440a      	add	r2, r1
 800c87c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c880:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c884:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c886:	69bb      	ldr	r3, [r7, #24]
 800c888:	015a      	lsls	r2, r3, #5
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	4413      	add	r3, r2
 800c88e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	69ba      	ldr	r2, [r7, #24]
 800c896:	0151      	lsls	r1, r2, #5
 800c898:	69fa      	ldr	r2, [r7, #28]
 800c89a:	440a      	add	r2, r1
 800c89c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c8a4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8b2:	d81d      	bhi.n	800c8f0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	015a      	lsls	r2, r3, #5
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8ca:	d0ec      	beq.n	800c8a6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c8cc:	e070      	b.n	800c9b0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	015a      	lsls	r2, r3, #5
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	69ba      	ldr	r2, [r7, #24]
 800c8de:	0151      	lsls	r1, r2, #5
 800c8e0:	69fa      	ldr	r2, [r7, #28]
 800c8e2:	440a      	add	r2, r1
 800c8e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c8ec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c8ee:	e05f      	b.n	800c9b0 <USB_HC_Halt+0x1ea>
            break;
 800c8f0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c8f2:	e05d      	b.n	800c9b0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	015a      	lsls	r2, r3, #5
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	69ba      	ldr	r2, [r7, #24]
 800c904:	0151      	lsls	r1, r2, #5
 800c906:	69fa      	ldr	r2, [r7, #28]
 800c908:	440a      	add	r2, r1
 800c90a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c90e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c912:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c920:	2b00      	cmp	r3, #0
 800c922:	d133      	bne.n	800c98c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	015a      	lsls	r2, r3, #5
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	4413      	add	r3, r2
 800c92c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	69ba      	ldr	r2, [r7, #24]
 800c934:	0151      	lsls	r1, r2, #5
 800c936:	69fa      	ldr	r2, [r7, #28]
 800c938:	440a      	add	r2, r1
 800c93a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c93e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c942:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	015a      	lsls	r2, r3, #5
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	4413      	add	r3, r2
 800c94c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	69ba      	ldr	r2, [r7, #24]
 800c954:	0151      	lsls	r1, r2, #5
 800c956:	69fa      	ldr	r2, [r7, #28]
 800c958:	440a      	add	r2, r1
 800c95a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c95e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c962:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	3301      	adds	r3, #1
 800c968:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c970:	d81d      	bhi.n	800c9ae <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	015a      	lsls	r2, r3, #5
 800c976:	69fb      	ldr	r3, [r7, #28]
 800c978:	4413      	add	r3, r2
 800c97a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c988:	d0ec      	beq.n	800c964 <USB_HC_Halt+0x19e>
 800c98a:	e011      	b.n	800c9b0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	015a      	lsls	r2, r3, #5
 800c990:	69fb      	ldr	r3, [r7, #28]
 800c992:	4413      	add	r3, r2
 800c994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	69ba      	ldr	r2, [r7, #24]
 800c99c:	0151      	lsls	r1, r2, #5
 800c99e:	69fa      	ldr	r2, [r7, #28]
 800c9a0:	440a      	add	r2, r1
 800c9a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c9aa:	6013      	str	r3, [r2, #0]
 800c9ac:	e000      	b.n	800c9b0 <USB_HC_Halt+0x1ea>
          break;
 800c9ae:	bf00      	nop
    }
  }

  return HAL_OK;
 800c9b0:	2300      	movs	r3, #0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3724      	adds	r7, #36	; 0x24
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr
	...

0800c9c0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b087      	sub	sp, #28
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c9d0:	78fb      	ldrb	r3, [r7, #3]
 800c9d2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	04da      	lsls	r2, r3, #19
 800c9dc:	4b15      	ldr	r3, [pc, #84]	; (800ca34 <USB_DoPing+0x74>)
 800c9de:	4013      	ands	r3, r2
 800c9e0:	693a      	ldr	r2, [r7, #16]
 800c9e2:	0151      	lsls	r1, r2, #5
 800c9e4:	697a      	ldr	r2, [r7, #20]
 800c9e6:	440a      	add	r2, r1
 800c9e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c9f0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	015a      	lsls	r2, r3, #5
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ca08:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca10:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	015a      	lsls	r2, r3, #5
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	4413      	add	r3, r2
 800ca1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca1e:	461a      	mov	r2, r3
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ca24:	2300      	movs	r3, #0
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	371c      	adds	r7, #28
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	1ff80000 	.word	0x1ff80000

0800ca38 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b088      	sub	sp, #32
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ca40:	2300      	movs	r3, #0
 800ca42:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f7ff f911 	bl	800bc74 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ca52:	2110      	movs	r1, #16
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f7ff f96b 	bl	800bd30 <USB_FlushTxFifo>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d001      	beq.n	800ca64 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800ca60:	2301      	movs	r3, #1
 800ca62:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f7ff f997 	bl	800bd98 <USB_FlushRxFifo>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d001      	beq.n	800ca74 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800ca70:	2301      	movs	r3, #1
 800ca72:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ca74:	2300      	movs	r3, #0
 800ca76:	61bb      	str	r3, [r7, #24]
 800ca78:	e01f      	b.n	800caba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	015a      	lsls	r2, r3, #5
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	4413      	add	r3, r2
 800ca82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca90:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800caa0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	015a      	lsls	r2, r3, #5
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	4413      	add	r3, r2
 800caaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800caae:	461a      	mov	r2, r3
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	3301      	adds	r3, #1
 800cab8:	61bb      	str	r3, [r7, #24]
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	2b0f      	cmp	r3, #15
 800cabe:	d9dc      	bls.n	800ca7a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cac0:	2300      	movs	r3, #0
 800cac2:	61bb      	str	r3, [r7, #24]
 800cac4:	e034      	b.n	800cb30 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	015a      	lsls	r2, r3, #5
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	4413      	add	r3, r2
 800cace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cadc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cae4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800caec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	015a      	lsls	r2, r3, #5
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	4413      	add	r3, r2
 800caf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cafa:	461a      	mov	r2, r3
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	3301      	adds	r3, #1
 800cb04:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb0c:	d80c      	bhi.n	800cb28 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	015a      	lsls	r2, r3, #5
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	4413      	add	r3, r2
 800cb16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb24:	d0ec      	beq.n	800cb00 <USB_StopHost+0xc8>
 800cb26:	e000      	b.n	800cb2a <USB_StopHost+0xf2>
        break;
 800cb28:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	61bb      	str	r3, [r7, #24]
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	2b0f      	cmp	r3, #15
 800cb34:	d9c7      	bls.n	800cac6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb42:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f04f 32ff 	mov.w	r2, #4294967295
 800cb4a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7ff f880 	bl	800bc52 <USB_EnableGlobalInt>

  return ret;
 800cb52:	7ffb      	ldrb	r3, [r7, #31]
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3720      	adds	r7, #32
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800cb5c:	b590      	push	{r4, r7, lr}
 800cb5e:	b089      	sub	sp, #36	; 0x24
 800cb60:	af04      	add	r7, sp, #16
 800cb62:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800cb64:	2301      	movs	r3, #1
 800cb66:	2202      	movs	r2, #2
 800cb68:	2102      	movs	r1, #2
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 fc66 	bl	800d43c <USBH_FindInterface>
 800cb70:	4603      	mov	r3, r0
 800cb72:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800cb74:	7bfb      	ldrb	r3, [r7, #15]
 800cb76:	2bff      	cmp	r3, #255	; 0xff
 800cb78:	d002      	beq.n	800cb80 <USBH_CDC_InterfaceInit+0x24>
 800cb7a:	7bfb      	ldrb	r3, [r7, #15]
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d901      	bls.n	800cb84 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cb80:	2302      	movs	r3, #2
 800cb82:	e13d      	b.n	800ce00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800cb84:	7bfb      	ldrb	r3, [r7, #15]
 800cb86:	4619      	mov	r1, r3
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fc3b 	bl	800d404 <USBH_SelectInterface>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800cb92:	7bbb      	ldrb	r3, [r7, #14]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d001      	beq.n	800cb9c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800cb98:	2302      	movs	r3, #2
 800cb9a:	e131      	b.n	800ce00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800cba2:	2050      	movs	r0, #80	; 0x50
 800cba4:	f002 fb3c 	bl	800f220 <malloc>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbb2:	69db      	ldr	r3, [r3, #28]
 800cbb4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800cbbc:	2302      	movs	r3, #2
 800cbbe:	e11f      	b.n	800ce00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800cbc0:	2250      	movs	r2, #80	; 0x50
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	68b8      	ldr	r0, [r7, #8]
 800cbc6:	f002 fb49 	bl	800f25c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800cbca:	7bfb      	ldrb	r3, [r7, #15]
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	211a      	movs	r1, #26
 800cbd0:	fb01 f303 	mul.w	r3, r1, r3
 800cbd4:	4413      	add	r3, r2
 800cbd6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	b25b      	sxtb	r3, r3
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	da15      	bge.n	800cc0e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cbe2:	7bfb      	ldrb	r3, [r7, #15]
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	211a      	movs	r1, #26
 800cbe8:	fb01 f303 	mul.w	r3, r1, r3
 800cbec:	4413      	add	r3, r2
 800cbee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cbf2:	781a      	ldrb	r2, [r3, #0]
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cbf8:	7bfb      	ldrb	r3, [r7, #15]
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	211a      	movs	r1, #26
 800cbfe:	fb01 f303 	mul.w	r3, r1, r3
 800cc02:	4413      	add	r3, r2
 800cc04:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cc08:	881a      	ldrh	r2, [r3, #0]
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	785b      	ldrb	r3, [r3, #1]
 800cc12:	4619      	mov	r1, r3
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f001 ff2c 	bl	800ea72 <USBH_AllocPipe>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	7819      	ldrb	r1, [r3, #0]
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	7858      	ldrb	r0, [r3, #1]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cc36:	68ba      	ldr	r2, [r7, #8]
 800cc38:	8952      	ldrh	r2, [r2, #10]
 800cc3a:	9202      	str	r2, [sp, #8]
 800cc3c:	2203      	movs	r2, #3
 800cc3e:	9201      	str	r2, [sp, #4]
 800cc40:	9300      	str	r3, [sp, #0]
 800cc42:	4623      	mov	r3, r4
 800cc44:	4602      	mov	r2, r0
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f001 fee4 	bl	800ea14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	2200      	movs	r2, #0
 800cc52:	4619      	mov	r1, r3
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f002 f9f3 	bl	800f040 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	210a      	movs	r1, #10
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 fbeb 	bl	800d43c <USBH_FindInterface>
 800cc66:	4603      	mov	r3, r0
 800cc68:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800cc6a:	7bfb      	ldrb	r3, [r7, #15]
 800cc6c:	2bff      	cmp	r3, #255	; 0xff
 800cc6e:	d002      	beq.n	800cc76 <USBH_CDC_InterfaceInit+0x11a>
 800cc70:	7bfb      	ldrb	r3, [r7, #15]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d901      	bls.n	800cc7a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cc76:	2302      	movs	r3, #2
 800cc78:	e0c2      	b.n	800ce00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800cc7a:	7bfb      	ldrb	r3, [r7, #15]
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	211a      	movs	r1, #26
 800cc80:	fb01 f303 	mul.w	r3, r1, r3
 800cc84:	4413      	add	r3, r2
 800cc86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	b25b      	sxtb	r3, r3
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	da16      	bge.n	800ccc0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cc92:	7bfb      	ldrb	r3, [r7, #15]
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	211a      	movs	r1, #26
 800cc98:	fb01 f303 	mul.w	r3, r1, r3
 800cc9c:	4413      	add	r3, r2
 800cc9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cca2:	781a      	ldrb	r2, [r3, #0]
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cca8:	7bfb      	ldrb	r3, [r7, #15]
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	211a      	movs	r1, #26
 800ccae:	fb01 f303 	mul.w	r3, r1, r3
 800ccb2:	4413      	add	r3, r2
 800ccb4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ccb8:	881a      	ldrh	r2, [r3, #0]
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	835a      	strh	r2, [r3, #26]
 800ccbe:	e015      	b.n	800ccec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	211a      	movs	r1, #26
 800ccc6:	fb01 f303 	mul.w	r3, r1, r3
 800ccca:	4413      	add	r3, r2
 800cccc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ccd0:	781a      	ldrb	r2, [r3, #0]
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ccd6:	7bfb      	ldrb	r3, [r7, #15]
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	211a      	movs	r1, #26
 800ccdc:	fb01 f303 	mul.w	r3, r1, r3
 800cce0:	4413      	add	r3, r2
 800cce2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cce6:	881a      	ldrh	r2, [r3, #0]
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800ccec:	7bfb      	ldrb	r3, [r7, #15]
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	211a      	movs	r1, #26
 800ccf2:	fb01 f303 	mul.w	r3, r1, r3
 800ccf6:	4413      	add	r3, r2
 800ccf8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	b25b      	sxtb	r3, r3
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	da16      	bge.n	800cd32 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800cd04:	7bfb      	ldrb	r3, [r7, #15]
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	211a      	movs	r1, #26
 800cd0a:	fb01 f303 	mul.w	r3, r1, r3
 800cd0e:	4413      	add	r3, r2
 800cd10:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cd14:	781a      	ldrb	r2, [r3, #0]
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800cd1a:	7bfb      	ldrb	r3, [r7, #15]
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	211a      	movs	r1, #26
 800cd20:	fb01 f303 	mul.w	r3, r1, r3
 800cd24:	4413      	add	r3, r2
 800cd26:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800cd2a:	881a      	ldrh	r2, [r3, #0]
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	835a      	strh	r2, [r3, #26]
 800cd30:	e015      	b.n	800cd5e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	211a      	movs	r1, #26
 800cd38:	fb01 f303 	mul.w	r3, r1, r3
 800cd3c:	4413      	add	r3, r2
 800cd3e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cd42:	781a      	ldrb	r2, [r3, #0]
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800cd48:	7bfb      	ldrb	r3, [r7, #15]
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	211a      	movs	r1, #26
 800cd4e:	fb01 f303 	mul.w	r3, r1, r3
 800cd52:	4413      	add	r3, r2
 800cd54:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800cd58:	881a      	ldrh	r2, [r3, #0]
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	7b9b      	ldrb	r3, [r3, #14]
 800cd62:	4619      	mov	r1, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f001 fe84 	bl	800ea72 <USBH_AllocPipe>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	7bdb      	ldrb	r3, [r3, #15]
 800cd76:	4619      	mov	r1, r3
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f001 fe7a 	bl	800ea72 <USBH_AllocPipe>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	461a      	mov	r2, r3
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	7b59      	ldrb	r1, [r3, #13]
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	7b98      	ldrb	r0, [r3, #14]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	8b12      	ldrh	r2, [r2, #24]
 800cd9e:	9202      	str	r2, [sp, #8]
 800cda0:	2202      	movs	r2, #2
 800cda2:	9201      	str	r2, [sp, #4]
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	4623      	mov	r3, r4
 800cda8:	4602      	mov	r2, r0
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f001 fe32 	bl	800ea14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	7b19      	ldrb	r1, [r3, #12]
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	7bd8      	ldrb	r0, [r3, #15]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cdc4:	68ba      	ldr	r2, [r7, #8]
 800cdc6:	8b52      	ldrh	r2, [r2, #26]
 800cdc8:	9202      	str	r2, [sp, #8]
 800cdca:	2202      	movs	r2, #2
 800cdcc:	9201      	str	r2, [sp, #4]
 800cdce:	9300      	str	r3, [sp, #0]
 800cdd0:	4623      	mov	r3, r4
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f001 fe1d 	bl	800ea14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	2200      	movs	r2, #0
 800cdde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	7b5b      	ldrb	r3, [r3, #13]
 800cde6:	2200      	movs	r2, #0
 800cde8:	4619      	mov	r1, r3
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f002 f928 	bl	800f040 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	7b1b      	ldrb	r3, [r3, #12]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f002 f921 	bl	800f040 <USBH_LL_SetToggle>

  return USBH_OK;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3714      	adds	r7, #20
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd90      	pop	{r4, r7, pc}

0800ce08 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce16:	69db      	ldr	r3, [r3, #28]
 800ce18:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00e      	beq.n	800ce40 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	4619      	mov	r1, r3
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f001 fe12 	bl	800ea52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	4619      	mov	r1, r3
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f001 fe3d 	bl	800eab4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	7b1b      	ldrb	r3, [r3, #12]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00e      	beq.n	800ce66 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	7b1b      	ldrb	r3, [r3, #12]
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f001 fdff 	bl	800ea52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	7b1b      	ldrb	r3, [r3, #12]
 800ce58:	4619      	mov	r1, r3
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f001 fe2a 	bl	800eab4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2200      	movs	r2, #0
 800ce64:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	7b5b      	ldrb	r3, [r3, #13]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00e      	beq.n	800ce8c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	7b5b      	ldrb	r3, [r3, #13]
 800ce72:	4619      	mov	r1, r3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f001 fdec 	bl	800ea52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	7b5b      	ldrb	r3, [r3, #13]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f001 fe17 	bl	800eab4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce92:	69db      	ldr	r3, [r3, #28]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00b      	beq.n	800ceb0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce9e:	69db      	ldr	r3, [r3, #28]
 800cea0:	4618      	mov	r0, r3
 800cea2:	f002 f9c5 	bl	800f230 <free>
    phost->pActiveClass->pData = 0U;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ceac:	2200      	movs	r2, #0
 800ceae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ceb0:	2300      	movs	r3, #0
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3710      	adds	r7, #16
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}

0800ceba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ceba:	b580      	push	{r7, lr}
 800cebc:	b084      	sub	sp, #16
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cec8:	69db      	ldr	r3, [r3, #28]
 800ceca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	3340      	adds	r3, #64	; 0x40
 800ced0:	4619      	mov	r1, r3
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 f8b1 	bl	800d03a <GetLineCoding>
 800ced8:	4603      	mov	r3, r0
 800ceda:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800cedc:	7afb      	ldrb	r3, [r7, #11]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d105      	bne.n	800ceee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cee8:	2102      	movs	r1, #2
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800ceee:	7afb      	ldrb	r3, [r7, #11]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800cf00:	2301      	movs	r3, #1
 800cf02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800cf04:	2300      	movs	r3, #0
 800cf06:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf0e:	69db      	ldr	r3, [r3, #28]
 800cf10:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800cf18:	2b04      	cmp	r3, #4
 800cf1a:	d877      	bhi.n	800d00c <USBH_CDC_Process+0x114>
 800cf1c:	a201      	add	r2, pc, #4	; (adr r2, 800cf24 <USBH_CDC_Process+0x2c>)
 800cf1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf22:	bf00      	nop
 800cf24:	0800cf39 	.word	0x0800cf39
 800cf28:	0800cf3f 	.word	0x0800cf3f
 800cf2c:	0800cf6f 	.word	0x0800cf6f
 800cf30:	0800cfe3 	.word	0x0800cfe3
 800cf34:	0800cff1 	.word	0x0800cff1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	73fb      	strb	r3, [r7, #15]
      break;
 800cf3c:	e06d      	b.n	800d01a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf42:	4619      	mov	r1, r3
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 f897 	bl	800d078 <SetLineCoding>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cf4e:	7bbb      	ldrb	r3, [r7, #14]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d104      	bne.n	800cf5e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	2202      	movs	r2, #2
 800cf58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cf5c:	e058      	b.n	800d010 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800cf5e:	7bbb      	ldrb	r3, [r7, #14]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d055      	beq.n	800d010 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	2204      	movs	r2, #4
 800cf68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cf6c:	e050      	b.n	800d010 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	3340      	adds	r3, #64	; 0x40
 800cf72:	4619      	mov	r1, r3
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 f860 	bl	800d03a <GetLineCoding>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cf7e:	7bbb      	ldrb	r3, [r7, #14]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d126      	bne.n	800cfd2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	2200      	movs	r2, #0
 800cf88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf96:	791b      	ldrb	r3, [r3, #4]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d13b      	bne.n	800d014 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfa6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d133      	bne.n	800d014 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfb6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d12b      	bne.n	800d014 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfc4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d124      	bne.n	800d014 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 f958 	bl	800d280 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cfd0:	e020      	b.n	800d014 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800cfd2:	7bbb      	ldrb	r3, [r7, #14]
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d01d      	beq.n	800d014 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	2204      	movs	r2, #4
 800cfdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cfe0:	e018      	b.n	800d014 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f867 	bl	800d0b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 f8da 	bl	800d1a2 <CDC_ProcessReception>
      break;
 800cfee:	e014      	b.n	800d01a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800cff0:	2100      	movs	r1, #0
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 ffef 	bl	800dfd6 <USBH_ClrFeature>
 800cff8:	4603      	mov	r3, r0
 800cffa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cffc:	7bbb      	ldrb	r3, [r7, #14]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10a      	bne.n	800d018 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	2200      	movs	r2, #0
 800d006:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800d00a:	e005      	b.n	800d018 <USBH_CDC_Process+0x120>

    default:
      break;
 800d00c:	bf00      	nop
 800d00e:	e004      	b.n	800d01a <USBH_CDC_Process+0x122>
      break;
 800d010:	bf00      	nop
 800d012:	e002      	b.n	800d01a <USBH_CDC_Process+0x122>
      break;
 800d014:	bf00      	nop
 800d016:	e000      	b.n	800d01a <USBH_CDC_Process+0x122>
      break;
 800d018:	bf00      	nop

  }

  return status;
 800d01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr

0800d03a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b082      	sub	sp, #8
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
 800d042:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	22a1      	movs	r2, #161	; 0xa1
 800d048:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2221      	movs	r2, #33	; 0x21
 800d04e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2207      	movs	r2, #7
 800d060:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	2207      	movs	r2, #7
 800d066:	4619      	mov	r1, r3
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f001 fa81 	bl	800e570 <USBH_CtlReq>
 800d06e:	4603      	mov	r3, r0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2221      	movs	r2, #33	; 0x21
 800d086:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2220      	movs	r2, #32
 800d08c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2207      	movs	r2, #7
 800d09e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	2207      	movs	r2, #7
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f001 fa62 	bl	800e570 <USBH_CtlReq>
 800d0ac:	4603      	mov	r3, r0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3708      	adds	r7, #8
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}

0800d0b6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b086      	sub	sp, #24
 800d0ba:	af02      	add	r7, sp, #8
 800d0bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0c4:	69db      	ldr	r3, [r3, #28]
 800d0c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d002      	beq.n	800d0dc <CDC_ProcessTransmission+0x26>
 800d0d6:	2b02      	cmp	r3, #2
 800d0d8:	d023      	beq.n	800d122 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800d0da:	e05e      	b.n	800d19a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e0:	68fa      	ldr	r2, [r7, #12]
 800d0e2:	8b12      	ldrh	r2, [r2, #24]
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d90b      	bls.n	800d100 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	69d9      	ldr	r1, [r3, #28]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	8b1a      	ldrh	r2, [r3, #24]
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	7b5b      	ldrb	r3, [r3, #13]
 800d0f4:	2001      	movs	r0, #1
 800d0f6:	9000      	str	r0, [sp, #0]
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f001 fc48 	bl	800e98e <USBH_BulkSendData>
 800d0fe:	e00b      	b.n	800d118 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800d108:	b29a      	uxth	r2, r3
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	7b5b      	ldrb	r3, [r3, #13]
 800d10e:	2001      	movs	r0, #1
 800d110:	9000      	str	r0, [sp, #0]
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f001 fc3b 	bl	800e98e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2202      	movs	r2, #2
 800d11c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d120:	e03b      	b.n	800d19a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	7b5b      	ldrb	r3, [r3, #13]
 800d126:	4619      	mov	r1, r3
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f001 ff5f 	bl	800efec <USBH_LL_GetURBState>
 800d12e:	4603      	mov	r3, r0
 800d130:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800d132:	7afb      	ldrb	r3, [r7, #11]
 800d134:	2b01      	cmp	r3, #1
 800d136:	d128      	bne.n	800d18a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	8b12      	ldrh	r2, [r2, #24]
 800d140:	4293      	cmp	r3, r2
 800d142:	d90e      	bls.n	800d162 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d148:	68fa      	ldr	r2, [r7, #12]
 800d14a:	8b12      	ldrh	r2, [r2, #24]
 800d14c:	1a9a      	subs	r2, r3, r2
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	69db      	ldr	r3, [r3, #28]
 800d156:	68fa      	ldr	r2, [r7, #12]
 800d158:	8b12      	ldrh	r2, [r2, #24]
 800d15a:	441a      	add	r2, r3
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	61da      	str	r2, [r3, #28]
 800d160:	e002      	b.n	800d168 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2200      	movs	r2, #0
 800d166:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d004      	beq.n	800d17a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d178:	e00e      	b.n	800d198 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2200      	movs	r2, #0
 800d17e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f868 	bl	800d258 <USBH_CDC_TransmitCallback>
      break;
 800d188:	e006      	b.n	800d198 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800d18a:	7afb      	ldrb	r3, [r7, #11]
 800d18c:	2b02      	cmp	r3, #2
 800d18e:	d103      	bne.n	800d198 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d198:	bf00      	nop
  }
}
 800d19a:	bf00      	nop
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b086      	sub	sp, #24
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d1b0:	69db      	ldr	r3, [r3, #28]
 800d1b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d1be:	2b03      	cmp	r3, #3
 800d1c0:	d002      	beq.n	800d1c8 <CDC_ProcessReception+0x26>
 800d1c2:	2b04      	cmp	r3, #4
 800d1c4:	d00e      	beq.n	800d1e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800d1c6:	e043      	b.n	800d250 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	6a19      	ldr	r1, [r3, #32]
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	8b5a      	ldrh	r2, [r3, #26]
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	7b1b      	ldrb	r3, [r3, #12]
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f001 fbff 	bl	800e9d8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	2204      	movs	r2, #4
 800d1de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800d1e2:	e035      	b.n	800d250 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	7b1b      	ldrb	r3, [r3, #12]
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f001 fefe 	bl	800efec <USBH_LL_GetURBState>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800d1f4:	7cfb      	ldrb	r3, [r7, #19]
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d129      	bne.n	800d24e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	7b1b      	ldrb	r3, [r3, #12]
 800d1fe:	4619      	mov	r1, r3
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f001 fe61 	bl	800eec8 <USBH_LL_GetLastXferSize>
 800d206:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d016      	beq.n	800d240 <CDC_ProcessReception+0x9e>
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	8b5b      	ldrh	r3, [r3, #26]
 800d216:	461a      	mov	r2, r3
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d910      	bls.n	800d240 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	1ad2      	subs	r2, r2, r3
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	6a1a      	ldr	r2, [r3, #32]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	441a      	add	r2, r3
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	2203      	movs	r2, #3
 800d23a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800d23e:	e006      	b.n	800d24e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	2200      	movs	r2, #0
 800d244:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 f80f 	bl	800d26c <USBH_CDC_ReceiveCallback>
      break;
 800d24e:	bf00      	nop
  }
}
 800d250:	bf00      	nop
 800d252:	3718      	adds	r7, #24
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d260:	bf00      	nop
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d274:	bf00      	nop
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr

0800d280 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d288:	bf00      	nop
 800d28a:	370c      	adds	r7, #12
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr

0800d294 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	4613      	mov	r3, r2
 800d2a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d101      	bne.n	800d2ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d2a8:	2302      	movs	r3, #2
 800d2aa:	e029      	b.n	800d300 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	79fa      	ldrb	r2, [r7, #7]
 800d2b0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	f000 f81f 	bl	800d308 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d003      	beq.n	800d2f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	68ba      	ldr	r2, [r7, #8]
 800d2f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f001 fd31 	bl	800ed60 <USBH_LL_Init>

  return USBH_OK;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d310:	2300      	movs	r3, #0
 800d312:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d314:	2300      	movs	r3, #0
 800d316:	60fb      	str	r3, [r7, #12]
 800d318:	e009      	b.n	800d32e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	33e0      	adds	r3, #224	; 0xe0
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	4413      	add	r3, r2
 800d324:	2200      	movs	r2, #0
 800d326:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	3301      	adds	r3, #1
 800d32c:	60fb      	str	r3, [r7, #12]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2b0f      	cmp	r3, #15
 800d332:	d9f2      	bls.n	800d31a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d334:	2300      	movs	r3, #0
 800d336:	60fb      	str	r3, [r7, #12]
 800d338:	e009      	b.n	800d34e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	4413      	add	r3, r2
 800d340:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d344:	2200      	movs	r2, #0
 800d346:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	3301      	adds	r3, #1
 800d34c:	60fb      	str	r3, [r7, #12]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d354:	d3f1      	bcc.n	800d33a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2200      	movs	r2, #0
 800d35a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2201      	movs	r2, #1
 800d366:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2200      	movs	r2, #0
 800d36c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2201      	movs	r2, #1
 800d374:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2240      	movs	r2, #64	; 0x40
 800d37a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2200      	movs	r2, #0
 800d386:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2201      	movs	r2, #1
 800d38e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2200      	movs	r2, #0
 800d396:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d3a2:	2300      	movs	r3, #0
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3714      	adds	r7, #20
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr

0800d3b0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d016      	beq.n	800d3f2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d10e      	bne.n	800d3ec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d3d4:	1c59      	adds	r1, r3, #1
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	33de      	adds	r3, #222	; 0xde
 800d3e0:	6839      	ldr	r1, [r7, #0]
 800d3e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	73fb      	strb	r3, [r7, #15]
 800d3ea:	e004      	b.n	800d3f6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d3ec:	2302      	movs	r3, #2
 800d3ee:	73fb      	strb	r3, [r7, #15]
 800d3f0:	e001      	b.n	800d3f6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d3f2:	2302      	movs	r3, #2
 800d3f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d3f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3714      	adds	r7, #20
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d404:	b480      	push	{r7}
 800d406:	b085      	sub	sp, #20
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	460b      	mov	r3, r1
 800d40e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d410:	2300      	movs	r3, #0
 800d412:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d41a:	78fa      	ldrb	r2, [r7, #3]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d204      	bcs.n	800d42a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	78fa      	ldrb	r2, [r7, #3]
 800d424:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d428:	e001      	b.n	800d42e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d42a:	2302      	movs	r3, #2
 800d42c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d430:	4618      	mov	r0, r3
 800d432:	3714      	adds	r7, #20
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b087      	sub	sp, #28
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	4608      	mov	r0, r1
 800d446:	4611      	mov	r1, r2
 800d448:	461a      	mov	r2, r3
 800d44a:	4603      	mov	r3, r0
 800d44c:	70fb      	strb	r3, [r7, #3]
 800d44e:	460b      	mov	r3, r1
 800d450:	70bb      	strb	r3, [r7, #2]
 800d452:	4613      	mov	r3, r2
 800d454:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d456:	2300      	movs	r3, #0
 800d458:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d45a:	2300      	movs	r3, #0
 800d45c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d464:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d466:	e025      	b.n	800d4b4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d468:	7dfb      	ldrb	r3, [r7, #23]
 800d46a:	221a      	movs	r2, #26
 800d46c:	fb02 f303 	mul.w	r3, r2, r3
 800d470:	3308      	adds	r3, #8
 800d472:	68fa      	ldr	r2, [r7, #12]
 800d474:	4413      	add	r3, r2
 800d476:	3302      	adds	r3, #2
 800d478:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	795b      	ldrb	r3, [r3, #5]
 800d47e:	78fa      	ldrb	r2, [r7, #3]
 800d480:	429a      	cmp	r2, r3
 800d482:	d002      	beq.n	800d48a <USBH_FindInterface+0x4e>
 800d484:	78fb      	ldrb	r3, [r7, #3]
 800d486:	2bff      	cmp	r3, #255	; 0xff
 800d488:	d111      	bne.n	800d4ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d48e:	78ba      	ldrb	r2, [r7, #2]
 800d490:	429a      	cmp	r2, r3
 800d492:	d002      	beq.n	800d49a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d494:	78bb      	ldrb	r3, [r7, #2]
 800d496:	2bff      	cmp	r3, #255	; 0xff
 800d498:	d109      	bne.n	800d4ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d49e:	787a      	ldrb	r2, [r7, #1]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d002      	beq.n	800d4aa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d4a4:	787b      	ldrb	r3, [r7, #1]
 800d4a6:	2bff      	cmp	r3, #255	; 0xff
 800d4a8:	d101      	bne.n	800d4ae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d4aa:	7dfb      	ldrb	r3, [r7, #23]
 800d4ac:	e006      	b.n	800d4bc <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d4ae:	7dfb      	ldrb	r3, [r7, #23]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d4b4:	7dfb      	ldrb	r3, [r7, #23]
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d9d6      	bls.n	800d468 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d4ba:	23ff      	movs	r3, #255	; 0xff
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	371c      	adds	r7, #28
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f001 fc81 	bl	800edd8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800d4d6:	2101      	movs	r1, #1
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f001 fd9a 	bl	800f012 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d4de:	2300      	movs	r3, #0
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b088      	sub	sp, #32
 800d4ec:	af04      	add	r7, sp, #16
 800d4ee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d4f0:	2302      	movs	r3, #2
 800d4f2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	2b01      	cmp	r3, #1
 800d502:	d102      	bne.n	800d50a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2203      	movs	r2, #3
 800d508:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	2b0b      	cmp	r3, #11
 800d512:	f200 81be 	bhi.w	800d892 <USBH_Process+0x3aa>
 800d516:	a201      	add	r2, pc, #4	; (adr r2, 800d51c <USBH_Process+0x34>)
 800d518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d51c:	0800d54d 	.word	0x0800d54d
 800d520:	0800d57f 	.word	0x0800d57f
 800d524:	0800d5e7 	.word	0x0800d5e7
 800d528:	0800d82d 	.word	0x0800d82d
 800d52c:	0800d893 	.word	0x0800d893
 800d530:	0800d68b 	.word	0x0800d68b
 800d534:	0800d7d3 	.word	0x0800d7d3
 800d538:	0800d6c1 	.word	0x0800d6c1
 800d53c:	0800d6e1 	.word	0x0800d6e1
 800d540:	0800d701 	.word	0x0800d701
 800d544:	0800d745 	.word	0x0800d745
 800d548:	0800d815 	.word	0x0800d815
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d552:	b2db      	uxtb	r3, r3
 800d554:	2b00      	cmp	r3, #0
 800d556:	f000 819e 	beq.w	800d896 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2201      	movs	r2, #1
 800d55e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d560:	20c8      	movs	r0, #200	; 0xc8
 800d562:	f001 fd9d 	bl	800f0a0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f001 fc93 	bl	800ee92 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d57c:	e18b      	b.n	800d896 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d584:	2b01      	cmp	r3, #1
 800d586:	d107      	bne.n	800d598 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2200      	movs	r2, #0
 800d58c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2202      	movs	r2, #2
 800d594:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d596:	e18d      	b.n	800d8b4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d59e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d5a2:	d914      	bls.n	800d5ce <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	b2da      	uxtb	r2, r3
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d5ba:	2b03      	cmp	r3, #3
 800d5bc:	d903      	bls.n	800d5c6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	220d      	movs	r2, #13
 800d5c2:	701a      	strb	r2, [r3, #0]
      break;
 800d5c4:	e176      	b.n	800d8b4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	701a      	strb	r2, [r3, #0]
      break;
 800d5cc:	e172      	b.n	800d8b4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d5d4:	f103 020a 	add.w	r2, r3, #10
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d5de:	200a      	movs	r0, #10
 800d5e0:	f001 fd5e 	bl	800f0a0 <USBH_Delay>
      break;
 800d5e4:	e166      	b.n	800d8b4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d005      	beq.n	800d5fc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d5f6:	2104      	movs	r1, #4
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d5fc:	2064      	movs	r0, #100	; 0x64
 800d5fe:	f001 fd4f 	bl	800f0a0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f001 fc1e 	bl	800ee44 <USBH_LL_GetSpeed>
 800d608:	4603      	mov	r3, r0
 800d60a:	461a      	mov	r2, r3
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2205      	movs	r2, #5
 800d616:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d618:	2100      	movs	r1, #0
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f001 fa29 	bl	800ea72 <USBH_AllocPipe>
 800d620:	4603      	mov	r3, r0
 800d622:	461a      	mov	r2, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d628:	2180      	movs	r1, #128	; 0x80
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f001 fa21 	bl	800ea72 <USBH_AllocPipe>
 800d630:	4603      	mov	r3, r0
 800d632:	461a      	mov	r2, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	7919      	ldrb	r1, [r3, #4]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d64c:	b292      	uxth	r2, r2
 800d64e:	9202      	str	r2, [sp, #8]
 800d650:	2200      	movs	r2, #0
 800d652:	9201      	str	r2, [sp, #4]
 800d654:	9300      	str	r3, [sp, #0]
 800d656:	4603      	mov	r3, r0
 800d658:	2280      	movs	r2, #128	; 0x80
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f001 f9da 	bl	800ea14 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	7959      	ldrb	r1, [r3, #5]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d674:	b292      	uxth	r2, r2
 800d676:	9202      	str	r2, [sp, #8]
 800d678:	2200      	movs	r2, #0
 800d67a:	9201      	str	r2, [sp, #4]
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	4603      	mov	r3, r0
 800d680:	2200      	movs	r2, #0
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f001 f9c6 	bl	800ea14 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d688:	e114      	b.n	800d8b4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 f918 	bl	800d8c0 <USBH_HandleEnum>
 800d690:	4603      	mov	r3, r0
 800d692:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d694:	7bbb      	ldrb	r3, [r7, #14]
 800d696:	b2db      	uxtb	r3, r3
 800d698:	2b00      	cmp	r3, #0
 800d69a:	f040 80fe 	bne.w	800d89a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d103      	bne.n	800d6b8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2208      	movs	r2, #8
 800d6b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d6b6:	e0f0      	b.n	800d89a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2207      	movs	r2, #7
 800d6bc:	701a      	strb	r2, [r3, #0]
      break;
 800d6be:	e0ec      	b.n	800d89a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	f000 80e9 	beq.w	800d89e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d6d2:	2101      	movs	r1, #1
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2208      	movs	r2, #8
 800d6dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800d6de:	e0de      	b.n	800d89e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 fc2c 	bl	800df48 <USBH_SetCfg>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	f040 80d5 	bne.w	800d8a2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2209      	movs	r2, #9
 800d6fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d6fe:	e0d0      	b.n	800d8a2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d706:	f003 0320 	and.w	r3, r3, #32
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d016      	beq.n	800d73c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800d70e:	2101      	movs	r1, #1
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 fc3c 	bl	800df8e <USBH_SetFeature>
 800d716:	4603      	mov	r3, r0
 800d718:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d71a:	7bbb      	ldrb	r3, [r7, #14]
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d103      	bne.n	800d72a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	220a      	movs	r2, #10
 800d726:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d728:	e0bd      	b.n	800d8a6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800d72a:	7bbb      	ldrb	r3, [r7, #14]
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	2b03      	cmp	r3, #3
 800d730:	f040 80b9 	bne.w	800d8a6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	220a      	movs	r2, #10
 800d738:	701a      	strb	r2, [r3, #0]
      break;
 800d73a:	e0b4      	b.n	800d8a6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	220a      	movs	r2, #10
 800d740:	701a      	strb	r2, [r3, #0]
      break;
 800d742:	e0b0      	b.n	800d8a6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	f000 80ad 	beq.w	800d8aa <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2200      	movs	r2, #0
 800d754:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d758:	2300      	movs	r3, #0
 800d75a:	73fb      	strb	r3, [r7, #15]
 800d75c:	e016      	b.n	800d78c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d75e:	7bfa      	ldrb	r2, [r7, #15]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	32de      	adds	r2, #222	; 0xde
 800d764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d768:	791a      	ldrb	r2, [r3, #4]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d770:	429a      	cmp	r2, r3
 800d772:	d108      	bne.n	800d786 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d774:	7bfa      	ldrb	r2, [r7, #15]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	32de      	adds	r2, #222	; 0xde
 800d77a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d784:	e005      	b.n	800d792 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d786:	7bfb      	ldrb	r3, [r7, #15]
 800d788:	3301      	adds	r3, #1
 800d78a:	73fb      	strb	r3, [r7, #15]
 800d78c:	7bfb      	ldrb	r3, [r7, #15]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d0e5      	beq.n	800d75e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d016      	beq.n	800d7ca <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d7a2:	689b      	ldr	r3, [r3, #8]
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	4798      	blx	r3
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d109      	bne.n	800d7c2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2206      	movs	r2, #6
 800d7b2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d7ba:	2103      	movs	r1, #3
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d7c0:	e073      	b.n	800d8aa <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	220d      	movs	r2, #13
 800d7c6:	701a      	strb	r2, [r3, #0]
      break;
 800d7c8:	e06f      	b.n	800d8aa <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	220d      	movs	r2, #13
 800d7ce:	701a      	strb	r2, [r3, #0]
      break;
 800d7d0:	e06b      	b.n	800d8aa <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d017      	beq.n	800d80c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d7e2:	691b      	ldr	r3, [r3, #16]
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	4798      	blx	r3
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d7ec:	7bbb      	ldrb	r3, [r7, #14]
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d103      	bne.n	800d7fc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	220b      	movs	r2, #11
 800d7f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d7fa:	e058      	b.n	800d8ae <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800d7fc:	7bbb      	ldrb	r3, [r7, #14]
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	2b02      	cmp	r3, #2
 800d802:	d154      	bne.n	800d8ae <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	220d      	movs	r2, #13
 800d808:	701a      	strb	r2, [r3, #0]
      break;
 800d80a:	e050      	b.n	800d8ae <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	220d      	movs	r2, #13
 800d810:	701a      	strb	r2, [r3, #0]
      break;
 800d812:	e04c      	b.n	800d8ae <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d049      	beq.n	800d8b2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d824:	695b      	ldr	r3, [r3, #20]
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	4798      	blx	r3
      }
      break;
 800d82a:	e042      	b.n	800d8b2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f7ff fd67 	bl	800d308 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d840:	2b00      	cmp	r3, #0
 800d842:	d009      	beq.n	800d858 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2200      	movs	r2, #0
 800d854:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d005      	beq.n	800d86e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d868:	2105      	movs	r1, #5
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d874:	b2db      	uxtb	r3, r3
 800d876:	2b01      	cmp	r3, #1
 800d878:	d107      	bne.n	800d88a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2200      	movs	r2, #0
 800d87e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f7ff fe20 	bl	800d4c8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d888:	e014      	b.n	800d8b4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f001 faa4 	bl	800edd8 <USBH_LL_Start>
      break;
 800d890:	e010      	b.n	800d8b4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800d892:	bf00      	nop
 800d894:	e00e      	b.n	800d8b4 <USBH_Process+0x3cc>
      break;
 800d896:	bf00      	nop
 800d898:	e00c      	b.n	800d8b4 <USBH_Process+0x3cc>
      break;
 800d89a:	bf00      	nop
 800d89c:	e00a      	b.n	800d8b4 <USBH_Process+0x3cc>
    break;
 800d89e:	bf00      	nop
 800d8a0:	e008      	b.n	800d8b4 <USBH_Process+0x3cc>
      break;
 800d8a2:	bf00      	nop
 800d8a4:	e006      	b.n	800d8b4 <USBH_Process+0x3cc>
      break;
 800d8a6:	bf00      	nop
 800d8a8:	e004      	b.n	800d8b4 <USBH_Process+0x3cc>
      break;
 800d8aa:	bf00      	nop
 800d8ac:	e002      	b.n	800d8b4 <USBH_Process+0x3cc>
      break;
 800d8ae:	bf00      	nop
 800d8b0:	e000      	b.n	800d8b4 <USBH_Process+0x3cc>
      break;
 800d8b2:	bf00      	nop
  }
  return USBH_OK;
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3710      	adds	r7, #16
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop

0800d8c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b088      	sub	sp, #32
 800d8c4:	af04      	add	r7, sp, #16
 800d8c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	785b      	ldrb	r3, [r3, #1]
 800d8d4:	2b07      	cmp	r3, #7
 800d8d6:	f200 81c1 	bhi.w	800dc5c <USBH_HandleEnum+0x39c>
 800d8da:	a201      	add	r2, pc, #4	; (adr r2, 800d8e0 <USBH_HandleEnum+0x20>)
 800d8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e0:	0800d901 	.word	0x0800d901
 800d8e4:	0800d9bf 	.word	0x0800d9bf
 800d8e8:	0800da29 	.word	0x0800da29
 800d8ec:	0800dab7 	.word	0x0800dab7
 800d8f0:	0800db21 	.word	0x0800db21
 800d8f4:	0800db91 	.word	0x0800db91
 800d8f8:	0800dbd7 	.word	0x0800dbd7
 800d8fc:	0800dc1d 	.word	0x0800dc1d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d900:	2108      	movs	r1, #8
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 fa50 	bl	800dda8 <USBH_Get_DevDesc>
 800d908:	4603      	mov	r3, r0
 800d90a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d90c:	7bbb      	ldrb	r3, [r7, #14]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d130      	bne.n	800d974 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	7919      	ldrb	r1, [r3, #4]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d936:	b292      	uxth	r2, r2
 800d938:	9202      	str	r2, [sp, #8]
 800d93a:	2200      	movs	r2, #0
 800d93c:	9201      	str	r2, [sp, #4]
 800d93e:	9300      	str	r3, [sp, #0]
 800d940:	4603      	mov	r3, r0
 800d942:	2280      	movs	r2, #128	; 0x80
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f001 f865 	bl	800ea14 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	7959      	ldrb	r1, [r3, #5]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d95e:	b292      	uxth	r2, r2
 800d960:	9202      	str	r2, [sp, #8]
 800d962:	2200      	movs	r2, #0
 800d964:	9201      	str	r2, [sp, #4]
 800d966:	9300      	str	r3, [sp, #0]
 800d968:	4603      	mov	r3, r0
 800d96a:	2200      	movs	r2, #0
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f001 f851 	bl	800ea14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d972:	e175      	b.n	800dc60 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d974:	7bbb      	ldrb	r3, [r7, #14]
 800d976:	2b03      	cmp	r3, #3
 800d978:	f040 8172 	bne.w	800dc60 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d982:	3301      	adds	r3, #1
 800d984:	b2da      	uxtb	r2, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d992:	2b03      	cmp	r3, #3
 800d994:	d903      	bls.n	800d99e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	220d      	movs	r2, #13
 800d99a:	701a      	strb	r2, [r3, #0]
      break;
 800d99c:	e160      	b.n	800dc60 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	795b      	ldrb	r3, [r3, #5]
 800d9a2:	4619      	mov	r1, r3
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f001 f885 	bl	800eab4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	791b      	ldrb	r3, [r3, #4]
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f001 f87f 	bl	800eab4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	701a      	strb	r2, [r3, #0]
      break;
 800d9bc:	e150      	b.n	800dc60 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d9be:	2112      	movs	r1, #18
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f000 f9f1 	bl	800dda8 <USBH_Get_DevDesc>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d9ca:	7bbb      	ldrb	r3, [r7, #14]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d103      	bne.n	800d9d8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2202      	movs	r2, #2
 800d9d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d9d6:	e145      	b.n	800dc64 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d9d8:	7bbb      	ldrb	r3, [r7, #14]
 800d9da:	2b03      	cmp	r3, #3
 800d9dc:	f040 8142 	bne.w	800dc64 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d9f6:	2b03      	cmp	r3, #3
 800d9f8:	d903      	bls.n	800da02 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	220d      	movs	r2, #13
 800d9fe:	701a      	strb	r2, [r3, #0]
      break;
 800da00:	e130      	b.n	800dc64 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	795b      	ldrb	r3, [r3, #5]
 800da06:	4619      	mov	r1, r3
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f001 f853 	bl	800eab4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	791b      	ldrb	r3, [r3, #4]
 800da12:	4619      	mov	r1, r3
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f001 f84d 	bl	800eab4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	701a      	strb	r2, [r3, #0]
      break;
 800da26:	e11d      	b.n	800dc64 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800da28:	2101      	movs	r1, #1
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 fa68 	bl	800df00 <USBH_SetAddress>
 800da30:	4603      	mov	r3, r0
 800da32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800da34:	7bbb      	ldrb	r3, [r7, #14]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d132      	bne.n	800daa0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800da3a:	2002      	movs	r0, #2
 800da3c:	f001 fb30 	bl	800f0a0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2203      	movs	r2, #3
 800da4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	7919      	ldrb	r1, [r3, #4]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800da62:	b292      	uxth	r2, r2
 800da64:	9202      	str	r2, [sp, #8]
 800da66:	2200      	movs	r2, #0
 800da68:	9201      	str	r2, [sp, #4]
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	4603      	mov	r3, r0
 800da6e:	2280      	movs	r2, #128	; 0x80
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 ffcf 	bl	800ea14 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	7959      	ldrb	r1, [r3, #5]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800da8a:	b292      	uxth	r2, r2
 800da8c:	9202      	str	r2, [sp, #8]
 800da8e:	2200      	movs	r2, #0
 800da90:	9201      	str	r2, [sp, #4]
 800da92:	9300      	str	r3, [sp, #0]
 800da94:	4603      	mov	r3, r0
 800da96:	2200      	movs	r2, #0
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 ffbb 	bl	800ea14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800da9e:	e0e3      	b.n	800dc68 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800daa0:	7bbb      	ldrb	r3, [r7, #14]
 800daa2:	2b03      	cmp	r3, #3
 800daa4:	f040 80e0 	bne.w	800dc68 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	220d      	movs	r2, #13
 800daac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	705a      	strb	r2, [r3, #1]
      break;
 800dab4:	e0d8      	b.n	800dc68 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800dab6:	2109      	movs	r1, #9
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f000 f99d 	bl	800ddf8 <USBH_Get_CfgDesc>
 800dabe:	4603      	mov	r3, r0
 800dac0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dac2:	7bbb      	ldrb	r3, [r7, #14]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d103      	bne.n	800dad0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2204      	movs	r2, #4
 800dacc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800dace:	e0cd      	b.n	800dc6c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dad0:	7bbb      	ldrb	r3, [r7, #14]
 800dad2:	2b03      	cmp	r3, #3
 800dad4:	f040 80ca 	bne.w	800dc6c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dade:	3301      	adds	r3, #1
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800daee:	2b03      	cmp	r3, #3
 800daf0:	d903      	bls.n	800dafa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	220d      	movs	r2, #13
 800daf6:	701a      	strb	r2, [r3, #0]
      break;
 800daf8:	e0b8      	b.n	800dc6c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	795b      	ldrb	r3, [r3, #5]
 800dafe:	4619      	mov	r1, r3
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 ffd7 	bl	800eab4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	791b      	ldrb	r3, [r3, #4]
 800db0a:	4619      	mov	r1, r3
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 ffd1 	bl	800eab4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2200      	movs	r2, #0
 800db1c:	701a      	strb	r2, [r3, #0]
      break;
 800db1e:	e0a5      	b.n	800dc6c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800db26:	4619      	mov	r1, r3
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 f965 	bl	800ddf8 <USBH_Get_CfgDesc>
 800db2e:	4603      	mov	r3, r0
 800db30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800db32:	7bbb      	ldrb	r3, [r7, #14]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d103      	bne.n	800db40 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2205      	movs	r2, #5
 800db3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800db3e:	e097      	b.n	800dc70 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800db40:	7bbb      	ldrb	r3, [r7, #14]
 800db42:	2b03      	cmp	r3, #3
 800db44:	f040 8094 	bne.w	800dc70 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800db4e:	3301      	adds	r3, #1
 800db50:	b2da      	uxtb	r2, r3
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800db5e:	2b03      	cmp	r3, #3
 800db60:	d903      	bls.n	800db6a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	220d      	movs	r2, #13
 800db66:	701a      	strb	r2, [r3, #0]
      break;
 800db68:	e082      	b.n	800dc70 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	795b      	ldrb	r3, [r3, #5]
 800db6e:	4619      	mov	r1, r3
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f000 ff9f 	bl	800eab4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	791b      	ldrb	r3, [r3, #4]
 800db7a:	4619      	mov	r1, r3
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 ff99 	bl	800eab4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2200      	movs	r2, #0
 800db86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2200      	movs	r2, #0
 800db8c:	701a      	strb	r2, [r3, #0]
      break;
 800db8e:	e06f      	b.n	800dc70 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800db96:	2b00      	cmp	r3, #0
 800db98:	d019      	beq.n	800dbce <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800dba6:	23ff      	movs	r3, #255	; 0xff
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f000 f949 	bl	800de40 <USBH_Get_StringDesc>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dbb2:	7bbb      	ldrb	r3, [r7, #14]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d103      	bne.n	800dbc0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2206      	movs	r2, #6
 800dbbc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800dbbe:	e059      	b.n	800dc74 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dbc0:	7bbb      	ldrb	r3, [r7, #14]
 800dbc2:	2b03      	cmp	r3, #3
 800dbc4:	d156      	bne.n	800dc74 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2206      	movs	r2, #6
 800dbca:	705a      	strb	r2, [r3, #1]
      break;
 800dbcc:	e052      	b.n	800dc74 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2206      	movs	r2, #6
 800dbd2:	705a      	strb	r2, [r3, #1]
      break;
 800dbd4:	e04e      	b.n	800dc74 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d019      	beq.n	800dc14 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800dbec:	23ff      	movs	r3, #255	; 0xff
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f926 	bl	800de40 <USBH_Get_StringDesc>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dbf8:	7bbb      	ldrb	r3, [r7, #14]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d103      	bne.n	800dc06 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2207      	movs	r2, #7
 800dc02:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800dc04:	e038      	b.n	800dc78 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dc06:	7bbb      	ldrb	r3, [r7, #14]
 800dc08:	2b03      	cmp	r3, #3
 800dc0a:	d135      	bne.n	800dc78 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2207      	movs	r2, #7
 800dc10:	705a      	strb	r2, [r3, #1]
      break;
 800dc12:	e031      	b.n	800dc78 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2207      	movs	r2, #7
 800dc18:	705a      	strb	r2, [r3, #1]
      break;
 800dc1a:	e02d      	b.n	800dc78 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d017      	beq.n	800dc56 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800dc32:	23ff      	movs	r3, #255	; 0xff
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f000 f903 	bl	800de40 <USBH_Get_StringDesc>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dc3e:	7bbb      	ldrb	r3, [r7, #14]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d102      	bne.n	800dc4a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800dc44:	2300      	movs	r3, #0
 800dc46:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800dc48:	e018      	b.n	800dc7c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dc4a:	7bbb      	ldrb	r3, [r7, #14]
 800dc4c:	2b03      	cmp	r3, #3
 800dc4e:	d115      	bne.n	800dc7c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800dc50:	2300      	movs	r3, #0
 800dc52:	73fb      	strb	r3, [r7, #15]
      break;
 800dc54:	e012      	b.n	800dc7c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800dc56:	2300      	movs	r3, #0
 800dc58:	73fb      	strb	r3, [r7, #15]
      break;
 800dc5a:	e00f      	b.n	800dc7c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800dc5c:	bf00      	nop
 800dc5e:	e00e      	b.n	800dc7e <USBH_HandleEnum+0x3be>
      break;
 800dc60:	bf00      	nop
 800dc62:	e00c      	b.n	800dc7e <USBH_HandleEnum+0x3be>
      break;
 800dc64:	bf00      	nop
 800dc66:	e00a      	b.n	800dc7e <USBH_HandleEnum+0x3be>
      break;
 800dc68:	bf00      	nop
 800dc6a:	e008      	b.n	800dc7e <USBH_HandleEnum+0x3be>
      break;
 800dc6c:	bf00      	nop
 800dc6e:	e006      	b.n	800dc7e <USBH_HandleEnum+0x3be>
      break;
 800dc70:	bf00      	nop
 800dc72:	e004      	b.n	800dc7e <USBH_HandleEnum+0x3be>
      break;
 800dc74:	bf00      	nop
 800dc76:	e002      	b.n	800dc7e <USBH_HandleEnum+0x3be>
      break;
 800dc78:	bf00      	nop
 800dc7a:	e000      	b.n	800dc7e <USBH_HandleEnum+0x3be>
      break;
 800dc7c:	bf00      	nop
  }
  return Status;
 800dc7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3710      	adds	r7, #16
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	683a      	ldr	r2, [r7, #0]
 800dc96:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800dc9a:	bf00      	nop
 800dc9c:	370c      	adds	r7, #12
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca4:	4770      	bx	lr

0800dca6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b082      	sub	sp, #8
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dcb4:	1c5a      	adds	r2, r3, #1
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 f804 	bl	800dcca <USBH_HandleSof>
}
 800dcc2:	bf00      	nop
 800dcc4:	3708      	adds	r7, #8
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}

0800dcca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800dcca:	b580      	push	{r7, lr}
 800dccc:	b082      	sub	sp, #8
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	2b0b      	cmp	r3, #11
 800dcda:	d10a      	bne.n	800dcf2 <USBH_HandleSof+0x28>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d005      	beq.n	800dcf2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dcec:	699b      	ldr	r3, [r3, #24]
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	4798      	blx	r3
  }
}
 800dcf2:	bf00      	nop
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}

0800dcfa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800dcfa:	b480      	push	{r7}
 800dcfc:	b083      	sub	sp, #12
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2201      	movs	r2, #1
 800dd06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800dd0a:	bf00      	nop
}
 800dd0c:	370c      	adds	r7, #12
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr

0800dd16 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800dd16:	b480      	push	{r7}
 800dd18:	b083      	sub	sp, #12
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800dd26:	bf00      	nop
}
 800dd28:	370c      	adds	r7, #12
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr

0800dd32 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800dd32:	b480      	push	{r7}
 800dd34:	b083      	sub	sp, #12
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2200      	movs	r2, #0
 800dd46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800dd52:	2300      	movs	r3, #0
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	370c      	adds	r7, #12
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr

0800dd60 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f001 f844 	bl	800ee0e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	791b      	ldrb	r3, [r3, #4]
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f000 fe91 	bl	800eab4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	795b      	ldrb	r3, [r3, #5]
 800dd96:	4619      	mov	r1, r3
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f000 fe8b 	bl	800eab4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800dd9e:	2300      	movs	r3, #0
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3708      	adds	r7, #8
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b086      	sub	sp, #24
 800ddac:	af02      	add	r7, sp, #8
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ddba:	78fb      	ldrb	r3, [r7, #3]
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	9300      	str	r3, [sp, #0]
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ddc6:	2100      	movs	r1, #0
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 f864 	bl	800de96 <USBH_GetDescriptor>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800ddd2:	7bfb      	ldrb	r3, [r7, #15]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d10a      	bne.n	800ddee <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dde4:	78fa      	ldrb	r2, [r7, #3]
 800dde6:	b292      	uxth	r2, r2
 800dde8:	4619      	mov	r1, r3
 800ddea:	f000 f918 	bl	800e01e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ddee:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3710      	adds	r7, #16
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b086      	sub	sp, #24
 800ddfc:	af02      	add	r7, sp, #8
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	460b      	mov	r3, r1
 800de02:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	331c      	adds	r3, #28
 800de08:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800de0a:	887b      	ldrh	r3, [r7, #2]
 800de0c:	9300      	str	r3, [sp, #0]
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de14:	2100      	movs	r1, #0
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 f83d 	bl	800de96 <USBH_GetDescriptor>
 800de1c:	4603      	mov	r3, r0
 800de1e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800de20:	7bfb      	ldrb	r3, [r7, #15]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d107      	bne.n	800de36 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800de26:	887b      	ldrh	r3, [r7, #2]
 800de28:	461a      	mov	r2, r3
 800de2a:	68b9      	ldr	r1, [r7, #8]
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f000 f987 	bl	800e140 <USBH_ParseCfgDesc>
 800de32:	4603      	mov	r3, r0
 800de34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800de36:	7bfb      	ldrb	r3, [r7, #15]
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3710      	adds	r7, #16
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b088      	sub	sp, #32
 800de44:	af02      	add	r7, sp, #8
 800de46:	60f8      	str	r0, [r7, #12]
 800de48:	607a      	str	r2, [r7, #4]
 800de4a:	461a      	mov	r2, r3
 800de4c:	460b      	mov	r3, r1
 800de4e:	72fb      	strb	r3, [r7, #11]
 800de50:	4613      	mov	r3, r2
 800de52:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800de54:	7afb      	ldrb	r3, [r7, #11]
 800de56:	b29b      	uxth	r3, r3
 800de58:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800de5c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800de64:	893b      	ldrh	r3, [r7, #8]
 800de66:	9300      	str	r3, [sp, #0]
 800de68:	460b      	mov	r3, r1
 800de6a:	2100      	movs	r1, #0
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f000 f812 	bl	800de96 <USBH_GetDescriptor>
 800de72:	4603      	mov	r3, r0
 800de74:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800de76:	7dfb      	ldrb	r3, [r7, #23]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d107      	bne.n	800de8c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800de82:	893a      	ldrh	r2, [r7, #8]
 800de84:	6879      	ldr	r1, [r7, #4]
 800de86:	4618      	mov	r0, r3
 800de88:	f000 fb24 	bl	800e4d4 <USBH_ParseStringDesc>
  }

  return status;
 800de8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3718      	adds	r7, #24
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}

0800de96 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800de96:	b580      	push	{r7, lr}
 800de98:	b084      	sub	sp, #16
 800de9a:	af00      	add	r7, sp, #0
 800de9c:	60f8      	str	r0, [r7, #12]
 800de9e:	607b      	str	r3, [r7, #4]
 800dea0:	460b      	mov	r3, r1
 800dea2:	72fb      	strb	r3, [r7, #11]
 800dea4:	4613      	mov	r3, r2
 800dea6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	789b      	ldrb	r3, [r3, #2]
 800deac:	2b01      	cmp	r3, #1
 800deae:	d11c      	bne.n	800deea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800deb0:	7afb      	ldrb	r3, [r7, #11]
 800deb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800deb6:	b2da      	uxtb	r2, r3
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2206      	movs	r2, #6
 800dec0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	893a      	ldrh	r2, [r7, #8]
 800dec6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800dec8:	893b      	ldrh	r3, [r7, #8]
 800deca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ded2:	d104      	bne.n	800dede <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f240 4209 	movw	r2, #1033	; 0x409
 800deda:	829a      	strh	r2, [r3, #20]
 800dedc:	e002      	b.n	800dee4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	8b3a      	ldrh	r2, [r7, #24]
 800dee8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800deea:	8b3b      	ldrh	r3, [r7, #24]
 800deec:	461a      	mov	r2, r3
 800deee:	6879      	ldr	r1, [r7, #4]
 800def0:	68f8      	ldr	r0, [r7, #12]
 800def2:	f000 fb3d 	bl	800e570 <USBH_CtlReq>
 800def6:	4603      	mov	r3, r0
}
 800def8:	4618      	mov	r0, r3
 800defa:	3710      	adds	r7, #16
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	460b      	mov	r3, r1
 800df0a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	789b      	ldrb	r3, [r3, #2]
 800df10:	2b01      	cmp	r3, #1
 800df12:	d10f      	bne.n	800df34 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2200      	movs	r2, #0
 800df18:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2205      	movs	r2, #5
 800df1e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800df20:	78fb      	ldrb	r3, [r7, #3]
 800df22:	b29a      	uxth	r2, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2200      	movs	r2, #0
 800df2c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2200      	movs	r2, #0
 800df32:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800df34:	2200      	movs	r2, #0
 800df36:	2100      	movs	r1, #0
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 fb19 	bl	800e570 <USBH_CtlReq>
 800df3e:	4603      	mov	r3, r0
}
 800df40:	4618      	mov	r0, r3
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	460b      	mov	r3, r1
 800df52:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	789b      	ldrb	r3, [r3, #2]
 800df58:	2b01      	cmp	r3, #1
 800df5a:	d10e      	bne.n	800df7a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2200      	movs	r2, #0
 800df60:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2209      	movs	r2, #9
 800df66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	887a      	ldrh	r2, [r7, #2]
 800df6c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2200      	movs	r2, #0
 800df72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2200      	movs	r2, #0
 800df78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800df7a:	2200      	movs	r2, #0
 800df7c:	2100      	movs	r1, #0
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f000 faf6 	bl	800e570 <USBH_CtlReq>
 800df84:	4603      	mov	r3, r0
}
 800df86:	4618      	mov	r0, r3
 800df88:	3708      	adds	r7, #8
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}

0800df8e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800df8e:	b580      	push	{r7, lr}
 800df90:	b082      	sub	sp, #8
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
 800df96:	460b      	mov	r3, r1
 800df98:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	789b      	ldrb	r3, [r3, #2]
 800df9e:	2b01      	cmp	r3, #1
 800dfa0:	d10f      	bne.n	800dfc2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2203      	movs	r2, #3
 800dfac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800dfae:	78fb      	ldrb	r3, [r7, #3]
 800dfb0:	b29a      	uxth	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	2100      	movs	r1, #0
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 fad2 	bl	800e570 <USBH_CtlReq>
 800dfcc:	4603      	mov	r3, r0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3708      	adds	r7, #8
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800dfd6:	b580      	push	{r7, lr}
 800dfd8:	b082      	sub	sp, #8
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	6078      	str	r0, [r7, #4]
 800dfde:	460b      	mov	r3, r1
 800dfe0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	789b      	ldrb	r3, [r3, #2]
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d10f      	bne.n	800e00a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2202      	movs	r2, #2
 800dfee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2201      	movs	r2, #1
 800dff4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2200      	movs	r2, #0
 800dffa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800dffc:	78fb      	ldrb	r3, [r7, #3]
 800dffe:	b29a      	uxth	r2, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2200      	movs	r2, #0
 800e008:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800e00a:	2200      	movs	r2, #0
 800e00c:	2100      	movs	r1, #0
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 faae 	bl	800e570 <USBH_CtlReq>
 800e014:	4603      	mov	r3, r0
}
 800e016:	4618      	mov	r0, r3
 800e018:	3708      	adds	r7, #8
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800e01e:	b480      	push	{r7}
 800e020:	b085      	sub	sp, #20
 800e022:	af00      	add	r7, sp, #0
 800e024:	60f8      	str	r0, [r7, #12]
 800e026:	60b9      	str	r1, [r7, #8]
 800e028:	4613      	mov	r3, r2
 800e02a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	781a      	ldrb	r2, [r3, #0]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	785a      	ldrb	r2, [r3, #1]
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	3302      	adds	r3, #2
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	b29a      	uxth	r2, r3
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	3303      	adds	r3, #3
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	021b      	lsls	r3, r3, #8
 800e04e:	b29b      	uxth	r3, r3
 800e050:	4313      	orrs	r3, r2
 800e052:	b29a      	uxth	r2, r3
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	791a      	ldrb	r2, [r3, #4]
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	795a      	ldrb	r2, [r3, #5]
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	799a      	ldrb	r2, [r3, #6]
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	79da      	ldrb	r2, [r3, #7]
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	79db      	ldrb	r3, [r3, #7]
 800e07c:	2b20      	cmp	r3, #32
 800e07e:	dc11      	bgt.n	800e0a4 <USBH_ParseDevDesc+0x86>
 800e080:	2b08      	cmp	r3, #8
 800e082:	db16      	blt.n	800e0b2 <USBH_ParseDevDesc+0x94>
 800e084:	3b08      	subs	r3, #8
 800e086:	2201      	movs	r2, #1
 800e088:	fa02 f303 	lsl.w	r3, r2, r3
 800e08c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800e090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e094:	2b00      	cmp	r3, #0
 800e096:	bf14      	ite	ne
 800e098:	2301      	movne	r3, #1
 800e09a:	2300      	moveq	r3, #0
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d102      	bne.n	800e0a8 <USBH_ParseDevDesc+0x8a>
 800e0a2:	e006      	b.n	800e0b2 <USBH_ParseDevDesc+0x94>
 800e0a4:	2b40      	cmp	r3, #64	; 0x40
 800e0a6:	d104      	bne.n	800e0b2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	79da      	ldrb	r2, [r3, #7]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	71da      	strb	r2, [r3, #7]
      break;
 800e0b0:	e003      	b.n	800e0ba <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2240      	movs	r2, #64	; 0x40
 800e0b6:	71da      	strb	r2, [r3, #7]
      break;
 800e0b8:	bf00      	nop
  }

  if (length > 8U)
 800e0ba:	88fb      	ldrh	r3, [r7, #6]
 800e0bc:	2b08      	cmp	r3, #8
 800e0be:	d939      	bls.n	800e134 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	3308      	adds	r3, #8
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	b29a      	uxth	r2, r3
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	3309      	adds	r3, #9
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	021b      	lsls	r3, r3, #8
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	b29a      	uxth	r2, r3
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	330a      	adds	r3, #10
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	b29a      	uxth	r2, r3
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	330b      	adds	r3, #11
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	021b      	lsls	r3, r3, #8
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	b29a      	uxth	r2, r3
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	330c      	adds	r3, #12
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	b29a      	uxth	r2, r3
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	330d      	adds	r3, #13
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	b29b      	uxth	r3, r3
 800e108:	021b      	lsls	r3, r3, #8
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	4313      	orrs	r3, r2
 800e10e:	b29a      	uxth	r2, r3
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	7b9a      	ldrb	r2, [r3, #14]
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	7bda      	ldrb	r2, [r3, #15]
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	7c1a      	ldrb	r2, [r3, #16]
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	7c5a      	ldrb	r2, [r3, #17]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	745a      	strb	r2, [r3, #17]
  }
}
 800e134:	bf00      	nop
 800e136:	3714      	adds	r7, #20
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b08c      	sub	sp, #48	; 0x30
 800e144:	af00      	add	r7, sp, #0
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	60b9      	str	r1, [r7, #8]
 800e14a:	4613      	mov	r3, r2
 800e14c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e154:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800e156:	2300      	movs	r3, #0
 800e158:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e160:	2300      	movs	r3, #0
 800e162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800e166:	2300      	movs	r3, #0
 800e168:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	781a      	ldrb	r2, [r3, #0]
 800e174:	6a3b      	ldr	r3, [r7, #32]
 800e176:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	785a      	ldrb	r2, [r3, #1]
 800e17c:	6a3b      	ldr	r3, [r7, #32]
 800e17e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	3302      	adds	r3, #2
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	b29a      	uxth	r2, r3
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	3303      	adds	r3, #3
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	b29b      	uxth	r3, r3
 800e190:	021b      	lsls	r3, r3, #8
 800e192:	b29b      	uxth	r3, r3
 800e194:	4313      	orrs	r3, r2
 800e196:	b29b      	uxth	r3, r3
 800e198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e19c:	bf28      	it	cs
 800e19e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800e1a2:	b29a      	uxth	r2, r3
 800e1a4:	6a3b      	ldr	r3, [r7, #32]
 800e1a6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	791a      	ldrb	r2, [r3, #4]
 800e1ac:	6a3b      	ldr	r3, [r7, #32]
 800e1ae:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	795a      	ldrb	r2, [r3, #5]
 800e1b4:	6a3b      	ldr	r3, [r7, #32]
 800e1b6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	799a      	ldrb	r2, [r3, #6]
 800e1bc:	6a3b      	ldr	r3, [r7, #32]
 800e1be:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	79da      	ldrb	r2, [r3, #7]
 800e1c4:	6a3b      	ldr	r3, [r7, #32]
 800e1c6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	7a1a      	ldrb	r2, [r3, #8]
 800e1cc:	6a3b      	ldr	r3, [r7, #32]
 800e1ce:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800e1d0:	6a3b      	ldr	r3, [r7, #32]
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	2b09      	cmp	r3, #9
 800e1d6:	d002      	beq.n	800e1de <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800e1d8:	6a3b      	ldr	r3, [r7, #32]
 800e1da:	2209      	movs	r2, #9
 800e1dc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e1de:	88fb      	ldrh	r3, [r7, #6]
 800e1e0:	2b09      	cmp	r3, #9
 800e1e2:	f240 809d 	bls.w	800e320 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800e1e6:	2309      	movs	r3, #9
 800e1e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e1ee:	e081      	b.n	800e2f4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e1f0:	f107 0316 	add.w	r3, r7, #22
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1f8:	f000 f99f 	bl	800e53a <USBH_GetNextDesc>
 800e1fc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800e1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e200:	785b      	ldrb	r3, [r3, #1]
 800e202:	2b04      	cmp	r3, #4
 800e204:	d176      	bne.n	800e2f4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800e206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	2b09      	cmp	r3, #9
 800e20c:	d002      	beq.n	800e214 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800e20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e210:	2209      	movs	r2, #9
 800e212:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800e214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e218:	221a      	movs	r2, #26
 800e21a:	fb02 f303 	mul.w	r3, r2, r3
 800e21e:	3308      	adds	r3, #8
 800e220:	6a3a      	ldr	r2, [r7, #32]
 800e222:	4413      	add	r3, r2
 800e224:	3302      	adds	r3, #2
 800e226:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e22a:	69f8      	ldr	r0, [r7, #28]
 800e22c:	f000 f87e 	bl	800e32c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e230:	2300      	movs	r3, #0
 800e232:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800e236:	2300      	movs	r3, #0
 800e238:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e23a:	e043      	b.n	800e2c4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e23c:	f107 0316 	add.w	r3, r7, #22
 800e240:	4619      	mov	r1, r3
 800e242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e244:	f000 f979 	bl	800e53a <USBH_GetNextDesc>
 800e248:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24c:	785b      	ldrb	r3, [r3, #1]
 800e24e:	2b05      	cmp	r3, #5
 800e250:	d138      	bne.n	800e2c4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	795b      	ldrb	r3, [r3, #5]
 800e256:	2b01      	cmp	r3, #1
 800e258:	d10f      	bne.n	800e27a <USBH_ParseCfgDesc+0x13a>
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	799b      	ldrb	r3, [r3, #6]
 800e25e:	2b02      	cmp	r3, #2
 800e260:	d10b      	bne.n	800e27a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	79db      	ldrb	r3, [r3, #7]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d10f      	bne.n	800e28a <USBH_ParseCfgDesc+0x14a>
 800e26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	2b09      	cmp	r3, #9
 800e270:	d00b      	beq.n	800e28a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800e272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e274:	2209      	movs	r2, #9
 800e276:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e278:	e007      	b.n	800e28a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800e27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	2b07      	cmp	r3, #7
 800e280:	d004      	beq.n	800e28c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800e282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e284:	2207      	movs	r2, #7
 800e286:	701a      	strb	r2, [r3, #0]
 800e288:	e000      	b.n	800e28c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e28a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e290:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e294:	3201      	adds	r2, #1
 800e296:	00d2      	lsls	r2, r2, #3
 800e298:	211a      	movs	r1, #26
 800e29a:	fb01 f303 	mul.w	r3, r1, r3
 800e29e:	4413      	add	r3, r2
 800e2a0:	3308      	adds	r3, #8
 800e2a2:	6a3a      	ldr	r2, [r7, #32]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	3304      	adds	r3, #4
 800e2a8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800e2aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2ac:	69b9      	ldr	r1, [r7, #24]
 800e2ae:	68f8      	ldr	r0, [r7, #12]
 800e2b0:	f000 f86b 	bl	800e38a <USBH_ParseEPDesc>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800e2ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e2be:	3301      	adds	r3, #1
 800e2c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	791b      	ldrb	r3, [r3, #4]
 800e2c8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d204      	bcs.n	800e2da <USBH_ParseCfgDesc+0x19a>
 800e2d0:	6a3b      	ldr	r3, [r7, #32]
 800e2d2:	885a      	ldrh	r2, [r3, #2]
 800e2d4:	8afb      	ldrh	r3, [r7, #22]
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d8b0      	bhi.n	800e23c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	791b      	ldrb	r3, [r3, #4]
 800e2de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d201      	bcs.n	800e2ea <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800e2e6:	2303      	movs	r3, #3
 800e2e8:	e01c      	b.n	800e324 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800e2ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2ee:	3301      	adds	r3, #1
 800e2f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e2f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d805      	bhi.n	800e308 <USBH_ParseCfgDesc+0x1c8>
 800e2fc:	6a3b      	ldr	r3, [r7, #32]
 800e2fe:	885a      	ldrh	r2, [r3, #2]
 800e300:	8afb      	ldrh	r3, [r7, #22]
 800e302:	429a      	cmp	r2, r3
 800e304:	f63f af74 	bhi.w	800e1f0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800e308:	6a3b      	ldr	r3, [r7, #32]
 800e30a:	791b      	ldrb	r3, [r3, #4]
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	bf28      	it	cs
 800e310:	2302      	movcs	r3, #2
 800e312:	b2db      	uxtb	r3, r3
 800e314:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e318:	429a      	cmp	r2, r3
 800e31a:	d201      	bcs.n	800e320 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800e31c:	2303      	movs	r3, #3
 800e31e:	e001      	b.n	800e324 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800e320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e324:	4618      	mov	r0, r3
 800e326:	3730      	adds	r7, #48	; 0x30
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	781a      	ldrb	r2, [r3, #0]
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	785a      	ldrb	r2, [r3, #1]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	789a      	ldrb	r2, [r3, #2]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	78da      	ldrb	r2, [r3, #3]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	791a      	ldrb	r2, [r3, #4]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	795a      	ldrb	r2, [r3, #5]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	799a      	ldrb	r2, [r3, #6]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	79da      	ldrb	r2, [r3, #7]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	7a1a      	ldrb	r2, [r3, #8]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	721a      	strb	r2, [r3, #8]
}
 800e37e:	bf00      	nop
 800e380:	370c      	adds	r7, #12
 800e382:	46bd      	mov	sp, r7
 800e384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e388:	4770      	bx	lr

0800e38a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800e38a:	b480      	push	{r7}
 800e38c:	b087      	sub	sp, #28
 800e38e:	af00      	add	r7, sp, #0
 800e390:	60f8      	str	r0, [r7, #12]
 800e392:	60b9      	str	r1, [r7, #8]
 800e394:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800e396:	2300      	movs	r3, #0
 800e398:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	781a      	ldrb	r2, [r3, #0]
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	785a      	ldrb	r2, [r3, #1]
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	789a      	ldrb	r2, [r3, #2]
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	78da      	ldrb	r2, [r3, #3]
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	3304      	adds	r3, #4
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	b29a      	uxth	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	3305      	adds	r3, #5
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	021b      	lsls	r3, r3, #8
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	b29a      	uxth	r2, r3
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	799a      	ldrb	r2, [r3, #6]
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	889b      	ldrh	r3, [r3, #4]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d102      	bne.n	800e3ec <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800e3e6:	2303      	movs	r3, #3
 800e3e8:	75fb      	strb	r3, [r7, #23]
 800e3ea:	e033      	b.n	800e454 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	889b      	ldrh	r3, [r3, #4]
 800e3f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e3f4:	f023 0307 	bic.w	r3, r3, #7
 800e3f8:	b29a      	uxth	r2, r3
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	889b      	ldrh	r3, [r3, #4]
 800e402:	b21a      	sxth	r2, r3
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	3304      	adds	r3, #4
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	b299      	uxth	r1, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	3305      	adds	r3, #5
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	b29b      	uxth	r3, r3
 800e414:	021b      	lsls	r3, r3, #8
 800e416:	b29b      	uxth	r3, r3
 800e418:	430b      	orrs	r3, r1
 800e41a:	b29b      	uxth	r3, r3
 800e41c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e420:	2b00      	cmp	r3, #0
 800e422:	d110      	bne.n	800e446 <USBH_ParseEPDesc+0xbc>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	3304      	adds	r3, #4
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	b299      	uxth	r1, r3
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	3305      	adds	r3, #5
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	b29b      	uxth	r3, r3
 800e434:	021b      	lsls	r3, r3, #8
 800e436:	b29b      	uxth	r3, r3
 800e438:	430b      	orrs	r3, r1
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	b21b      	sxth	r3, r3
 800e43e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e442:	b21b      	sxth	r3, r3
 800e444:	e001      	b.n	800e44a <USBH_ParseEPDesc+0xc0>
 800e446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e44a:	4313      	orrs	r3, r2
 800e44c:	b21b      	sxth	r3, r3
 800e44e:	b29a      	uxth	r2, r3
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d116      	bne.n	800e48c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	78db      	ldrb	r3, [r3, #3]
 800e462:	f003 0303 	and.w	r3, r3, #3
 800e466:	2b01      	cmp	r3, #1
 800e468:	d005      	beq.n	800e476 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	78db      	ldrb	r3, [r3, #3]
 800e46e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e472:	2b03      	cmp	r3, #3
 800e474:	d127      	bne.n	800e4c6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	799b      	ldrb	r3, [r3, #6]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d003      	beq.n	800e486 <USBH_ParseEPDesc+0xfc>
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	799b      	ldrb	r3, [r3, #6]
 800e482:	2b10      	cmp	r3, #16
 800e484:	d91f      	bls.n	800e4c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e486:	2303      	movs	r3, #3
 800e488:	75fb      	strb	r3, [r7, #23]
 800e48a:	e01c      	b.n	800e4c6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	78db      	ldrb	r3, [r3, #3]
 800e490:	f003 0303 	and.w	r3, r3, #3
 800e494:	2b01      	cmp	r3, #1
 800e496:	d10a      	bne.n	800e4ae <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	799b      	ldrb	r3, [r3, #6]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d003      	beq.n	800e4a8 <USBH_ParseEPDesc+0x11e>
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	799b      	ldrb	r3, [r3, #6]
 800e4a4:	2b10      	cmp	r3, #16
 800e4a6:	d90e      	bls.n	800e4c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e4a8:	2303      	movs	r3, #3
 800e4aa:	75fb      	strb	r3, [r7, #23]
 800e4ac:	e00b      	b.n	800e4c6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	78db      	ldrb	r3, [r3, #3]
 800e4b2:	f003 0303 	and.w	r3, r3, #3
 800e4b6:	2b03      	cmp	r3, #3
 800e4b8:	d105      	bne.n	800e4c6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	799b      	ldrb	r3, [r3, #6]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d101      	bne.n	800e4c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e4c2:	2303      	movs	r3, #3
 800e4c4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800e4c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	371c      	adds	r7, #28
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr

0800e4d4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b087      	sub	sp, #28
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	60f8      	str	r0, [r7, #12]
 800e4dc:	60b9      	str	r1, [r7, #8]
 800e4de:	4613      	mov	r3, r2
 800e4e0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	2b03      	cmp	r3, #3
 800e4ea:	d120      	bne.n	800e52e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	1e9a      	subs	r2, r3, #2
 800e4f2:	88fb      	ldrh	r3, [r7, #6]
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	bf28      	it	cs
 800e4f8:	4613      	movcs	r3, r2
 800e4fa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	3302      	adds	r3, #2
 800e500:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e502:	2300      	movs	r3, #0
 800e504:	82fb      	strh	r3, [r7, #22]
 800e506:	e00b      	b.n	800e520 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e508:	8afb      	ldrh	r3, [r7, #22]
 800e50a:	68fa      	ldr	r2, [r7, #12]
 800e50c:	4413      	add	r3, r2
 800e50e:	781a      	ldrb	r2, [r3, #0]
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	3301      	adds	r3, #1
 800e518:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e51a:	8afb      	ldrh	r3, [r7, #22]
 800e51c:	3302      	adds	r3, #2
 800e51e:	82fb      	strh	r3, [r7, #22]
 800e520:	8afa      	ldrh	r2, [r7, #22]
 800e522:	8abb      	ldrh	r3, [r7, #20]
 800e524:	429a      	cmp	r2, r3
 800e526:	d3ef      	bcc.n	800e508 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	2200      	movs	r2, #0
 800e52c:	701a      	strb	r2, [r3, #0]
  }
}
 800e52e:	bf00      	nop
 800e530:	371c      	adds	r7, #28
 800e532:	46bd      	mov	sp, r7
 800e534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e538:	4770      	bx	lr

0800e53a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e53a:	b480      	push	{r7}
 800e53c:	b085      	sub	sp, #20
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
 800e542:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	881a      	ldrh	r2, [r3, #0]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	4413      	add	r3, r2
 800e550:	b29a      	uxth	r2, r3
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	4413      	add	r3, r2
 800e560:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e562:	68fb      	ldr	r3, [r7, #12]
}
 800e564:	4618      	mov	r0, r3
 800e566:	3714      	adds	r7, #20
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr

0800e570 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b086      	sub	sp, #24
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	4613      	mov	r3, r2
 800e57c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e57e:	2301      	movs	r3, #1
 800e580:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	789b      	ldrb	r3, [r3, #2]
 800e586:	2b01      	cmp	r3, #1
 800e588:	d002      	beq.n	800e590 <USBH_CtlReq+0x20>
 800e58a:	2b02      	cmp	r3, #2
 800e58c:	d00f      	beq.n	800e5ae <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e58e:	e027      	b.n	800e5e0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	68ba      	ldr	r2, [r7, #8]
 800e594:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	88fa      	ldrh	r2, [r7, #6]
 800e59a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2201      	movs	r2, #1
 800e5a0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2202      	movs	r2, #2
 800e5a6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	75fb      	strb	r3, [r7, #23]
      break;
 800e5ac:	e018      	b.n	800e5e0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	f000 f81c 	bl	800e5ec <USBH_HandleControl>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e5b8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d002      	beq.n	800e5c4 <USBH_CtlReq+0x54>
 800e5be:	7dfb      	ldrb	r3, [r7, #23]
 800e5c0:	2b03      	cmp	r3, #3
 800e5c2:	d106      	bne.n	800e5d2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	761a      	strb	r2, [r3, #24]
      break;
 800e5d0:	e005      	b.n	800e5de <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e5d2:	7dfb      	ldrb	r3, [r7, #23]
 800e5d4:	2b02      	cmp	r3, #2
 800e5d6:	d102      	bne.n	800e5de <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	709a      	strb	r2, [r3, #2]
      break;
 800e5de:	bf00      	nop
  }
  return status;
 800e5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3718      	adds	r7, #24
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
	...

0800e5ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b086      	sub	sp, #24
 800e5f0:	af02      	add	r7, sp, #8
 800e5f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	7e1b      	ldrb	r3, [r3, #24]
 800e600:	3b01      	subs	r3, #1
 800e602:	2b0a      	cmp	r3, #10
 800e604:	f200 8156 	bhi.w	800e8b4 <USBH_HandleControl+0x2c8>
 800e608:	a201      	add	r2, pc, #4	; (adr r2, 800e610 <USBH_HandleControl+0x24>)
 800e60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e60e:	bf00      	nop
 800e610:	0800e63d 	.word	0x0800e63d
 800e614:	0800e657 	.word	0x0800e657
 800e618:	0800e6c1 	.word	0x0800e6c1
 800e61c:	0800e6e7 	.word	0x0800e6e7
 800e620:	0800e71f 	.word	0x0800e71f
 800e624:	0800e749 	.word	0x0800e749
 800e628:	0800e79b 	.word	0x0800e79b
 800e62c:	0800e7bd 	.word	0x0800e7bd
 800e630:	0800e7f9 	.word	0x0800e7f9
 800e634:	0800e81f 	.word	0x0800e81f
 800e638:	0800e85d 	.word	0x0800e85d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f103 0110 	add.w	r1, r3, #16
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	795b      	ldrb	r3, [r3, #5]
 800e646:	461a      	mov	r2, r3
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 f943 	bl	800e8d4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2202      	movs	r2, #2
 800e652:	761a      	strb	r2, [r3, #24]
      break;
 800e654:	e139      	b.n	800e8ca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	795b      	ldrb	r3, [r3, #5]
 800e65a:	4619      	mov	r1, r3
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f000 fcc5 	bl	800efec <USBH_LL_GetURBState>
 800e662:	4603      	mov	r3, r0
 800e664:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e666:	7bbb      	ldrb	r3, [r7, #14]
 800e668:	2b01      	cmp	r3, #1
 800e66a:	d11e      	bne.n	800e6aa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	7c1b      	ldrb	r3, [r3, #16]
 800e670:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e674:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	8adb      	ldrh	r3, [r3, #22]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00a      	beq.n	800e694 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e67e:	7b7b      	ldrb	r3, [r7, #13]
 800e680:	2b80      	cmp	r3, #128	; 0x80
 800e682:	d103      	bne.n	800e68c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2203      	movs	r2, #3
 800e688:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e68a:	e115      	b.n	800e8b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2205      	movs	r2, #5
 800e690:	761a      	strb	r2, [r3, #24]
      break;
 800e692:	e111      	b.n	800e8b8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800e694:	7b7b      	ldrb	r3, [r7, #13]
 800e696:	2b80      	cmp	r3, #128	; 0x80
 800e698:	d103      	bne.n	800e6a2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2209      	movs	r2, #9
 800e69e:	761a      	strb	r2, [r3, #24]
      break;
 800e6a0:	e10a      	b.n	800e8b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2207      	movs	r2, #7
 800e6a6:	761a      	strb	r2, [r3, #24]
      break;
 800e6a8:	e106      	b.n	800e8b8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e6aa:	7bbb      	ldrb	r3, [r7, #14]
 800e6ac:	2b04      	cmp	r3, #4
 800e6ae:	d003      	beq.n	800e6b8 <USBH_HandleControl+0xcc>
 800e6b0:	7bbb      	ldrb	r3, [r7, #14]
 800e6b2:	2b02      	cmp	r3, #2
 800e6b4:	f040 8100 	bne.w	800e8b8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	220b      	movs	r2, #11
 800e6bc:	761a      	strb	r2, [r3, #24]
      break;
 800e6be:	e0fb      	b.n	800e8b8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e6c6:	b29a      	uxth	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6899      	ldr	r1, [r3, #8]
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	899a      	ldrh	r2, [r3, #12]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	791b      	ldrb	r3, [r3, #4]
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 f93a 	bl	800e952 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2204      	movs	r2, #4
 800e6e2:	761a      	strb	r2, [r3, #24]
      break;
 800e6e4:	e0f1      	b.n	800e8ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	791b      	ldrb	r3, [r3, #4]
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 fc7d 	bl	800efec <USBH_LL_GetURBState>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e6f6:	7bbb      	ldrb	r3, [r7, #14]
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d102      	bne.n	800e702 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2209      	movs	r2, #9
 800e700:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e702:	7bbb      	ldrb	r3, [r7, #14]
 800e704:	2b05      	cmp	r3, #5
 800e706:	d102      	bne.n	800e70e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e708:	2303      	movs	r3, #3
 800e70a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e70c:	e0d6      	b.n	800e8bc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800e70e:	7bbb      	ldrb	r3, [r7, #14]
 800e710:	2b04      	cmp	r3, #4
 800e712:	f040 80d3 	bne.w	800e8bc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	220b      	movs	r2, #11
 800e71a:	761a      	strb	r2, [r3, #24]
      break;
 800e71c:	e0ce      	b.n	800e8bc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6899      	ldr	r1, [r3, #8]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	899a      	ldrh	r2, [r3, #12]
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	795b      	ldrb	r3, [r3, #5]
 800e72a:	2001      	movs	r0, #1
 800e72c:	9000      	str	r0, [sp, #0]
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f000 f8ea 	bl	800e908 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e73a:	b29a      	uxth	r2, r3
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2206      	movs	r2, #6
 800e744:	761a      	strb	r2, [r3, #24]
      break;
 800e746:	e0c0      	b.n	800e8ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	795b      	ldrb	r3, [r3, #5]
 800e74c:	4619      	mov	r1, r3
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 fc4c 	bl	800efec <USBH_LL_GetURBState>
 800e754:	4603      	mov	r3, r0
 800e756:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e758:	7bbb      	ldrb	r3, [r7, #14]
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d103      	bne.n	800e766 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2207      	movs	r2, #7
 800e762:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e764:	e0ac      	b.n	800e8c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e766:	7bbb      	ldrb	r3, [r7, #14]
 800e768:	2b05      	cmp	r3, #5
 800e76a:	d105      	bne.n	800e778 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	220c      	movs	r2, #12
 800e770:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e772:	2303      	movs	r3, #3
 800e774:	73fb      	strb	r3, [r7, #15]
      break;
 800e776:	e0a3      	b.n	800e8c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e778:	7bbb      	ldrb	r3, [r7, #14]
 800e77a:	2b02      	cmp	r3, #2
 800e77c:	d103      	bne.n	800e786 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2205      	movs	r2, #5
 800e782:	761a      	strb	r2, [r3, #24]
      break;
 800e784:	e09c      	b.n	800e8c0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e786:	7bbb      	ldrb	r3, [r7, #14]
 800e788:	2b04      	cmp	r3, #4
 800e78a:	f040 8099 	bne.w	800e8c0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	220b      	movs	r2, #11
 800e792:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e794:	2302      	movs	r3, #2
 800e796:	73fb      	strb	r3, [r7, #15]
      break;
 800e798:	e092      	b.n	800e8c0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	791b      	ldrb	r3, [r3, #4]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	2100      	movs	r1, #0
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 f8d5 	bl	800e952 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e7ae:	b29a      	uxth	r2, r3
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2208      	movs	r2, #8
 800e7b8:	761a      	strb	r2, [r3, #24]

      break;
 800e7ba:	e086      	b.n	800e8ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	791b      	ldrb	r3, [r3, #4]
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 fc12 	bl	800efec <USBH_LL_GetURBState>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e7cc:	7bbb      	ldrb	r3, [r7, #14]
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d105      	bne.n	800e7de <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	220d      	movs	r2, #13
 800e7d6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e7dc:	e072      	b.n	800e8c4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e7de:	7bbb      	ldrb	r3, [r7, #14]
 800e7e0:	2b04      	cmp	r3, #4
 800e7e2:	d103      	bne.n	800e7ec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	220b      	movs	r2, #11
 800e7e8:	761a      	strb	r2, [r3, #24]
      break;
 800e7ea:	e06b      	b.n	800e8c4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e7ec:	7bbb      	ldrb	r3, [r7, #14]
 800e7ee:	2b05      	cmp	r3, #5
 800e7f0:	d168      	bne.n	800e8c4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e7f2:	2303      	movs	r3, #3
 800e7f4:	73fb      	strb	r3, [r7, #15]
      break;
 800e7f6:	e065      	b.n	800e8c4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	795b      	ldrb	r3, [r3, #5]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	9200      	str	r2, [sp, #0]
 800e800:	2200      	movs	r2, #0
 800e802:	2100      	movs	r1, #0
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f000 f87f 	bl	800e908 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e810:	b29a      	uxth	r2, r3
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	220a      	movs	r2, #10
 800e81a:	761a      	strb	r2, [r3, #24]
      break;
 800e81c:	e055      	b.n	800e8ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	795b      	ldrb	r3, [r3, #5]
 800e822:	4619      	mov	r1, r3
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 fbe1 	bl	800efec <USBH_LL_GetURBState>
 800e82a:	4603      	mov	r3, r0
 800e82c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e82e:	7bbb      	ldrb	r3, [r7, #14]
 800e830:	2b01      	cmp	r3, #1
 800e832:	d105      	bne.n	800e840 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e834:	2300      	movs	r3, #0
 800e836:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	220d      	movs	r2, #13
 800e83c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e83e:	e043      	b.n	800e8c8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e840:	7bbb      	ldrb	r3, [r7, #14]
 800e842:	2b02      	cmp	r3, #2
 800e844:	d103      	bne.n	800e84e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2209      	movs	r2, #9
 800e84a:	761a      	strb	r2, [r3, #24]
      break;
 800e84c:	e03c      	b.n	800e8c8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e84e:	7bbb      	ldrb	r3, [r7, #14]
 800e850:	2b04      	cmp	r3, #4
 800e852:	d139      	bne.n	800e8c8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	220b      	movs	r2, #11
 800e858:	761a      	strb	r2, [r3, #24]
      break;
 800e85a:	e035      	b.n	800e8c8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	7e5b      	ldrb	r3, [r3, #25]
 800e860:	3301      	adds	r3, #1
 800e862:	b2da      	uxtb	r2, r3
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	765a      	strb	r2, [r3, #25]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	7e5b      	ldrb	r3, [r3, #25]
 800e86c:	2b02      	cmp	r3, #2
 800e86e:	d806      	bhi.n	800e87e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2201      	movs	r2, #1
 800e874:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2201      	movs	r2, #1
 800e87a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e87c:	e025      	b.n	800e8ca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e884:	2106      	movs	r1, #6
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2200      	movs	r2, #0
 800e88e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	795b      	ldrb	r3, [r3, #5]
 800e894:	4619      	mov	r1, r3
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f000 f90c 	bl	800eab4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	791b      	ldrb	r3, [r3, #4]
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 f906 	bl	800eab4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e8ae:	2302      	movs	r3, #2
 800e8b0:	73fb      	strb	r3, [r7, #15]
      break;
 800e8b2:	e00a      	b.n	800e8ca <USBH_HandleControl+0x2de>

    default:
      break;
 800e8b4:	bf00      	nop
 800e8b6:	e008      	b.n	800e8ca <USBH_HandleControl+0x2de>
      break;
 800e8b8:	bf00      	nop
 800e8ba:	e006      	b.n	800e8ca <USBH_HandleControl+0x2de>
      break;
 800e8bc:	bf00      	nop
 800e8be:	e004      	b.n	800e8ca <USBH_HandleControl+0x2de>
      break;
 800e8c0:	bf00      	nop
 800e8c2:	e002      	b.n	800e8ca <USBH_HandleControl+0x2de>
      break;
 800e8c4:	bf00      	nop
 800e8c6:	e000      	b.n	800e8ca <USBH_HandleControl+0x2de>
      break;
 800e8c8:	bf00      	nop
  }

  return status;
 800e8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b088      	sub	sp, #32
 800e8d8:	af04      	add	r7, sp, #16
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	60b9      	str	r1, [r7, #8]
 800e8de:	4613      	mov	r3, r2
 800e8e0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e8e2:	79f9      	ldrb	r1, [r7, #7]
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	9303      	str	r3, [sp, #12]
 800e8e8:	2308      	movs	r3, #8
 800e8ea:	9302      	str	r3, [sp, #8]
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	9301      	str	r3, [sp, #4]
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	9300      	str	r3, [sp, #0]
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	68f8      	ldr	r0, [r7, #12]
 800e8fa:	f000 fb46 	bl	800ef8a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e8fe:	2300      	movs	r3, #0
}
 800e900:	4618      	mov	r0, r3
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b088      	sub	sp, #32
 800e90c:	af04      	add	r7, sp, #16
 800e90e:	60f8      	str	r0, [r7, #12]
 800e910:	60b9      	str	r1, [r7, #8]
 800e912:	4611      	mov	r1, r2
 800e914:	461a      	mov	r2, r3
 800e916:	460b      	mov	r3, r1
 800e918:	80fb      	strh	r3, [r7, #6]
 800e91a:	4613      	mov	r3, r2
 800e91c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e924:	2b00      	cmp	r3, #0
 800e926:	d001      	beq.n	800e92c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e928:	2300      	movs	r3, #0
 800e92a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e92c:	7979      	ldrb	r1, [r7, #5]
 800e92e:	7e3b      	ldrb	r3, [r7, #24]
 800e930:	9303      	str	r3, [sp, #12]
 800e932:	88fb      	ldrh	r3, [r7, #6]
 800e934:	9302      	str	r3, [sp, #8]
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	9301      	str	r3, [sp, #4]
 800e93a:	2301      	movs	r3, #1
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	2300      	movs	r3, #0
 800e940:	2200      	movs	r2, #0
 800e942:	68f8      	ldr	r0, [r7, #12]
 800e944:	f000 fb21 	bl	800ef8a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e948:	2300      	movs	r3, #0
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3710      	adds	r7, #16
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}

0800e952 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e952:	b580      	push	{r7, lr}
 800e954:	b088      	sub	sp, #32
 800e956:	af04      	add	r7, sp, #16
 800e958:	60f8      	str	r0, [r7, #12]
 800e95a:	60b9      	str	r1, [r7, #8]
 800e95c:	4611      	mov	r1, r2
 800e95e:	461a      	mov	r2, r3
 800e960:	460b      	mov	r3, r1
 800e962:	80fb      	strh	r3, [r7, #6]
 800e964:	4613      	mov	r3, r2
 800e966:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e968:	7979      	ldrb	r1, [r7, #5]
 800e96a:	2300      	movs	r3, #0
 800e96c:	9303      	str	r3, [sp, #12]
 800e96e:	88fb      	ldrh	r3, [r7, #6]
 800e970:	9302      	str	r3, [sp, #8]
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	9301      	str	r3, [sp, #4]
 800e976:	2301      	movs	r3, #1
 800e978:	9300      	str	r3, [sp, #0]
 800e97a:	2300      	movs	r3, #0
 800e97c:	2201      	movs	r2, #1
 800e97e:	68f8      	ldr	r0, [r7, #12]
 800e980:	f000 fb03 	bl	800ef8a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e984:	2300      	movs	r3, #0

}
 800e986:	4618      	mov	r0, r3
 800e988:	3710      	adds	r7, #16
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}

0800e98e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e98e:	b580      	push	{r7, lr}
 800e990:	b088      	sub	sp, #32
 800e992:	af04      	add	r7, sp, #16
 800e994:	60f8      	str	r0, [r7, #12]
 800e996:	60b9      	str	r1, [r7, #8]
 800e998:	4611      	mov	r1, r2
 800e99a:	461a      	mov	r2, r3
 800e99c:	460b      	mov	r3, r1
 800e99e:	80fb      	strh	r3, [r7, #6]
 800e9a0:	4613      	mov	r3, r2
 800e9a2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d001      	beq.n	800e9b2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e9b2:	7979      	ldrb	r1, [r7, #5]
 800e9b4:	7e3b      	ldrb	r3, [r7, #24]
 800e9b6:	9303      	str	r3, [sp, #12]
 800e9b8:	88fb      	ldrh	r3, [r7, #6]
 800e9ba:	9302      	str	r3, [sp, #8]
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	9301      	str	r3, [sp, #4]
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	9300      	str	r3, [sp, #0]
 800e9c4:	2302      	movs	r3, #2
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	68f8      	ldr	r0, [r7, #12]
 800e9ca:	f000 fade 	bl	800ef8a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e9ce:	2300      	movs	r3, #0
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3710      	adds	r7, #16
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b088      	sub	sp, #32
 800e9dc:	af04      	add	r7, sp, #16
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	4611      	mov	r1, r2
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	80fb      	strh	r3, [r7, #6]
 800e9ea:	4613      	mov	r3, r2
 800e9ec:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e9ee:	7979      	ldrb	r1, [r7, #5]
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	9303      	str	r3, [sp, #12]
 800e9f4:	88fb      	ldrh	r3, [r7, #6]
 800e9f6:	9302      	str	r3, [sp, #8]
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	9301      	str	r3, [sp, #4]
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	9300      	str	r3, [sp, #0]
 800ea00:	2302      	movs	r3, #2
 800ea02:	2201      	movs	r2, #1
 800ea04:	68f8      	ldr	r0, [r7, #12]
 800ea06:	f000 fac0 	bl	800ef8a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ea0a:	2300      	movs	r3, #0
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3710      	adds	r7, #16
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b086      	sub	sp, #24
 800ea18:	af04      	add	r7, sp, #16
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	4608      	mov	r0, r1
 800ea1e:	4611      	mov	r1, r2
 800ea20:	461a      	mov	r2, r3
 800ea22:	4603      	mov	r3, r0
 800ea24:	70fb      	strb	r3, [r7, #3]
 800ea26:	460b      	mov	r3, r1
 800ea28:	70bb      	strb	r3, [r7, #2]
 800ea2a:	4613      	mov	r3, r2
 800ea2c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ea2e:	7878      	ldrb	r0, [r7, #1]
 800ea30:	78ba      	ldrb	r2, [r7, #2]
 800ea32:	78f9      	ldrb	r1, [r7, #3]
 800ea34:	8b3b      	ldrh	r3, [r7, #24]
 800ea36:	9302      	str	r3, [sp, #8]
 800ea38:	7d3b      	ldrb	r3, [r7, #20]
 800ea3a:	9301      	str	r3, [sp, #4]
 800ea3c:	7c3b      	ldrb	r3, [r7, #16]
 800ea3e:	9300      	str	r3, [sp, #0]
 800ea40:	4603      	mov	r3, r0
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 fa53 	bl	800eeee <USBH_LL_OpenPipe>

  return USBH_OK;
 800ea48:	2300      	movs	r3, #0
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b082      	sub	sp, #8
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
 800ea5a:	460b      	mov	r3, r1
 800ea5c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ea5e:	78fb      	ldrb	r3, [r7, #3]
 800ea60:	4619      	mov	r1, r3
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 fa72 	bl	800ef4c <USBH_LL_ClosePipe>

  return USBH_OK;
 800ea68:	2300      	movs	r3, #0
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3708      	adds	r7, #8
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}

0800ea72 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ea72:	b580      	push	{r7, lr}
 800ea74:	b084      	sub	sp, #16
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	6078      	str	r0, [r7, #4]
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 f836 	bl	800eaf0 <USBH_GetFreePipe>
 800ea84:	4603      	mov	r3, r0
 800ea86:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ea88:	89fb      	ldrh	r3, [r7, #14]
 800ea8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d00a      	beq.n	800eaa8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ea92:	78fa      	ldrb	r2, [r7, #3]
 800ea94:	89fb      	ldrh	r3, [r7, #14]
 800ea96:	f003 030f 	and.w	r3, r3, #15
 800ea9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ea9e:	6879      	ldr	r1, [r7, #4]
 800eaa0:	33e0      	adds	r3, #224	; 0xe0
 800eaa2:	009b      	lsls	r3, r3, #2
 800eaa4:	440b      	add	r3, r1
 800eaa6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800eaa8:	89fb      	ldrh	r3, [r7, #14]
 800eaaa:	b2db      	uxtb	r3, r3
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3710      	adds	r7, #16
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	460b      	mov	r3, r1
 800eabe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800eac0:	78fb      	ldrb	r3, [r7, #3]
 800eac2:	2b0f      	cmp	r3, #15
 800eac4:	d80d      	bhi.n	800eae2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800eac6:	78fb      	ldrb	r3, [r7, #3]
 800eac8:	687a      	ldr	r2, [r7, #4]
 800eaca:	33e0      	adds	r3, #224	; 0xe0
 800eacc:	009b      	lsls	r3, r3, #2
 800eace:	4413      	add	r3, r2
 800ead0:	685a      	ldr	r2, [r3, #4]
 800ead2:	78fb      	ldrb	r3, [r7, #3]
 800ead4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ead8:	6879      	ldr	r1, [r7, #4]
 800eada:	33e0      	adds	r3, #224	; 0xe0
 800eadc:	009b      	lsls	r3, r3, #2
 800eade:	440b      	add	r3, r1
 800eae0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800eae2:	2300      	movs	r3, #0
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	370c      	adds	r7, #12
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b085      	sub	sp, #20
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800eafc:	2300      	movs	r3, #0
 800eafe:	73fb      	strb	r3, [r7, #15]
 800eb00:	e00f      	b.n	800eb22 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800eb02:	7bfb      	ldrb	r3, [r7, #15]
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	33e0      	adds	r3, #224	; 0xe0
 800eb08:	009b      	lsls	r3, r3, #2
 800eb0a:	4413      	add	r3, r2
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d102      	bne.n	800eb1c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800eb16:	7bfb      	ldrb	r3, [r7, #15]
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	e007      	b.n	800eb2c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800eb1c:	7bfb      	ldrb	r3, [r7, #15]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	73fb      	strb	r3, [r7, #15]
 800eb22:	7bfb      	ldrb	r3, [r7, #15]
 800eb24:	2b0f      	cmp	r3, #15
 800eb26:	d9ec      	bls.n	800eb02 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800eb28:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3714      	adds	r7, #20
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr

0800eb38 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	490e      	ldr	r1, [pc, #56]	; (800eb78 <MX_USB_HOST_Init+0x40>)
 800eb40:	480e      	ldr	r0, [pc, #56]	; (800eb7c <MX_USB_HOST_Init+0x44>)
 800eb42:	f7fe fba7 	bl	800d294 <USBH_Init>
 800eb46:	4603      	mov	r3, r0
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d001      	beq.n	800eb50 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800eb4c:	f7f3 fbd4 	bl	80022f8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800eb50:	490b      	ldr	r1, [pc, #44]	; (800eb80 <MX_USB_HOST_Init+0x48>)
 800eb52:	480a      	ldr	r0, [pc, #40]	; (800eb7c <MX_USB_HOST_Init+0x44>)
 800eb54:	f7fe fc2c 	bl	800d3b0 <USBH_RegisterClass>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d001      	beq.n	800eb62 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800eb5e:	f7f3 fbcb 	bl	80022f8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800eb62:	4806      	ldr	r0, [pc, #24]	; (800eb7c <MX_USB_HOST_Init+0x44>)
 800eb64:	f7fe fcb0 	bl	800d4c8 <USBH_Start>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d001      	beq.n	800eb72 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800eb6e:	f7f3 fbc3 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800eb72:	bf00      	nop
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	0800eb99 	.word	0x0800eb99
 800eb7c:	20001748 	.word	0x20001748
 800eb80:	20000024 	.word	0x20000024

0800eb84 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800eb88:	4802      	ldr	r0, [pc, #8]	; (800eb94 <MX_USB_HOST_Process+0x10>)
 800eb8a:	f7fe fcad 	bl	800d4e8 <USBH_Process>
}
 800eb8e:	bf00      	nop
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	20001748 	.word	0x20001748

0800eb98 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	460b      	mov	r3, r1
 800eba2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800eba4:	78fb      	ldrb	r3, [r7, #3]
 800eba6:	3b01      	subs	r3, #1
 800eba8:	2b04      	cmp	r3, #4
 800ebaa:	d819      	bhi.n	800ebe0 <USBH_UserProcess+0x48>
 800ebac:	a201      	add	r2, pc, #4	; (adr r2, 800ebb4 <USBH_UserProcess+0x1c>)
 800ebae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebb2:	bf00      	nop
 800ebb4:	0800ebe1 	.word	0x0800ebe1
 800ebb8:	0800ebd1 	.word	0x0800ebd1
 800ebbc:	0800ebe1 	.word	0x0800ebe1
 800ebc0:	0800ebd9 	.word	0x0800ebd9
 800ebc4:	0800ebc9 	.word	0x0800ebc9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ebc8:	4b09      	ldr	r3, [pc, #36]	; (800ebf0 <USBH_UserProcess+0x58>)
 800ebca:	2203      	movs	r2, #3
 800ebcc:	701a      	strb	r2, [r3, #0]
  break;
 800ebce:	e008      	b.n	800ebe2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ebd0:	4b07      	ldr	r3, [pc, #28]	; (800ebf0 <USBH_UserProcess+0x58>)
 800ebd2:	2202      	movs	r2, #2
 800ebd4:	701a      	strb	r2, [r3, #0]
  break;
 800ebd6:	e004      	b.n	800ebe2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ebd8:	4b05      	ldr	r3, [pc, #20]	; (800ebf0 <USBH_UserProcess+0x58>)
 800ebda:	2201      	movs	r2, #1
 800ebdc:	701a      	strb	r2, [r3, #0]
  break;
 800ebde:	e000      	b.n	800ebe2 <USBH_UserProcess+0x4a>

  default:
  break;
 800ebe0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ebe2:	bf00      	nop
 800ebe4:	370c      	adds	r7, #12
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	200016f4 	.word	0x200016f4

0800ebf4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b08a      	sub	sp, #40	; 0x28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ebfc:	f107 0314 	add.w	r3, r7, #20
 800ec00:	2200      	movs	r2, #0
 800ec02:	601a      	str	r2, [r3, #0]
 800ec04:	605a      	str	r2, [r3, #4]
 800ec06:	609a      	str	r2, [r3, #8]
 800ec08:	60da      	str	r2, [r3, #12]
 800ec0a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ec14:	d147      	bne.n	800eca6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec16:	2300      	movs	r3, #0
 800ec18:	613b      	str	r3, [r7, #16]
 800ec1a:	4b25      	ldr	r3, [pc, #148]	; (800ecb0 <HAL_HCD_MspInit+0xbc>)
 800ec1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec1e:	4a24      	ldr	r2, [pc, #144]	; (800ecb0 <HAL_HCD_MspInit+0xbc>)
 800ec20:	f043 0301 	orr.w	r3, r3, #1
 800ec24:	6313      	str	r3, [r2, #48]	; 0x30
 800ec26:	4b22      	ldr	r3, [pc, #136]	; (800ecb0 <HAL_HCD_MspInit+0xbc>)
 800ec28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec2a:	f003 0301 	and.w	r3, r3, #1
 800ec2e:	613b      	str	r3, [r7, #16]
 800ec30:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ec32:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ec40:	f107 0314 	add.w	r3, r7, #20
 800ec44:	4619      	mov	r1, r3
 800ec46:	481b      	ldr	r0, [pc, #108]	; (800ecb4 <HAL_HCD_MspInit+0xc0>)
 800ec48:	f7f7 fbbc 	bl	80063c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ec4c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ec50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec52:	2302      	movs	r3, #2
 800ec54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec56:	2300      	movs	r3, #0
 800ec58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec5a:	2303      	movs	r3, #3
 800ec5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ec5e:	230a      	movs	r3, #10
 800ec60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec62:	f107 0314 	add.w	r3, r7, #20
 800ec66:	4619      	mov	r1, r3
 800ec68:	4812      	ldr	r0, [pc, #72]	; (800ecb4 <HAL_HCD_MspInit+0xc0>)
 800ec6a:	f7f7 fbab 	bl	80063c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ec6e:	4b10      	ldr	r3, [pc, #64]	; (800ecb0 <HAL_HCD_MspInit+0xbc>)
 800ec70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec72:	4a0f      	ldr	r2, [pc, #60]	; (800ecb0 <HAL_HCD_MspInit+0xbc>)
 800ec74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec78:	6353      	str	r3, [r2, #52]	; 0x34
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	60fb      	str	r3, [r7, #12]
 800ec7e:	4b0c      	ldr	r3, [pc, #48]	; (800ecb0 <HAL_HCD_MspInit+0xbc>)
 800ec80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec82:	4a0b      	ldr	r2, [pc, #44]	; (800ecb0 <HAL_HCD_MspInit+0xbc>)
 800ec84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ec88:	6453      	str	r3, [r2, #68]	; 0x44
 800ec8a:	4b09      	ldr	r3, [pc, #36]	; (800ecb0 <HAL_HCD_MspInit+0xbc>)
 800ec8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec92:	60fb      	str	r3, [r7, #12]
 800ec94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ec96:	2200      	movs	r2, #0
 800ec98:	2100      	movs	r1, #0
 800ec9a:	2043      	movs	r0, #67	; 0x43
 800ec9c:	f7f6 ff59 	bl	8005b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eca0:	2043      	movs	r0, #67	; 0x43
 800eca2:	f7f6 ff72 	bl	8005b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eca6:	bf00      	nop
 800eca8:	3728      	adds	r7, #40	; 0x28
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	40023800 	.word	0x40023800
 800ecb4:	40020000 	.word	0x40020000

0800ecb8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fe ffed 	bl	800dca6 <USBH_LL_IncTimer>
}
 800eccc:	bf00      	nop
 800ecce:	3708      	adds	r7, #8
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7ff f825 	bl	800dd32 <USBH_LL_Connect>
}
 800ece8:	bf00      	nop
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7ff f82e 	bl	800dd60 <USBH_LL_Disconnect>
}
 800ed04:	bf00      	nop
 800ed06:	3708      	adds	r7, #8
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	460b      	mov	r3, r1
 800ed16:	70fb      	strb	r3, [r7, #3]
 800ed18:	4613      	mov	r3, r2
 800ed1a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ed1c:	bf00      	nop
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7fe ffdf 	bl	800dcfa <USBH_LL_PortEnabled>
}
 800ed3c:	bf00      	nop
 800ed3e:	3708      	adds	r7, #8
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7fe ffdf 	bl	800dd16 <USBH_LL_PortDisabled>
}
 800ed58:	bf00      	nop
 800ed5a:	3708      	adds	r7, #8
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b082      	sub	sp, #8
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d12a      	bne.n	800edc8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ed72:	4a18      	ldr	r2, [pc, #96]	; (800edd4 <USBH_LL_Init+0x74>)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	4a15      	ldr	r2, [pc, #84]	; (800edd4 <USBH_LL_Init+0x74>)
 800ed7e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ed82:	4b14      	ldr	r3, [pc, #80]	; (800edd4 <USBH_LL_Init+0x74>)
 800ed84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ed88:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ed8a:	4b12      	ldr	r3, [pc, #72]	; (800edd4 <USBH_LL_Init+0x74>)
 800ed8c:	2208      	movs	r2, #8
 800ed8e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ed90:	4b10      	ldr	r3, [pc, #64]	; (800edd4 <USBH_LL_Init+0x74>)
 800ed92:	2201      	movs	r2, #1
 800ed94:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ed96:	4b0f      	ldr	r3, [pc, #60]	; (800edd4 <USBH_LL_Init+0x74>)
 800ed98:	2200      	movs	r2, #0
 800ed9a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ed9c:	4b0d      	ldr	r3, [pc, #52]	; (800edd4 <USBH_LL_Init+0x74>)
 800ed9e:	2202      	movs	r2, #2
 800eda0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eda2:	4b0c      	ldr	r3, [pc, #48]	; (800edd4 <USBH_LL_Init+0x74>)
 800eda4:	2200      	movs	r2, #0
 800eda6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800eda8:	480a      	ldr	r0, [pc, #40]	; (800edd4 <USBH_LL_Init+0x74>)
 800edaa:	f7f7 fcf3 	bl	8006794 <HAL_HCD_Init>
 800edae:	4603      	mov	r3, r0
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d001      	beq.n	800edb8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800edb4:	f7f3 faa0 	bl	80022f8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800edb8:	4806      	ldr	r0, [pc, #24]	; (800edd4 <USBH_LL_Init+0x74>)
 800edba:	f7f8 f8d6 	bl	8006f6a <HAL_HCD_GetCurrentFrame>
 800edbe:	4603      	mov	r3, r0
 800edc0:	4619      	mov	r1, r3
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f7fe ff60 	bl	800dc88 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800edc8:	2300      	movs	r3, #0
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3708      	adds	r7, #8
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	bf00      	nop
 800edd4:	20001b20 	.word	0x20001b20

0800edd8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ede0:	2300      	movs	r3, #0
 800ede2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ede4:	2300      	movs	r3, #0
 800ede6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800edee:	4618      	mov	r0, r3
 800edf0:	f7f8 f845 	bl	8006e7e <HAL_HCD_Start>
 800edf4:	4603      	mov	r3, r0
 800edf6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800edf8:	7bfb      	ldrb	r3, [r7, #15]
 800edfa:	4618      	mov	r0, r3
 800edfc:	f000 f95c 	bl	800f0b8 <USBH_Get_USB_Status>
 800ee00:	4603      	mov	r3, r0
 800ee02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3710      	adds	r7, #16
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}

0800ee0e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ee0e:	b580      	push	{r7, lr}
 800ee10:	b084      	sub	sp, #16
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee16:	2300      	movs	r3, #0
 800ee18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7f8 f84d 	bl	8006ec4 <HAL_HCD_Stop>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee2e:	7bfb      	ldrb	r3, [r7, #15]
 800ee30:	4618      	mov	r0, r3
 800ee32:	f000 f941 	bl	800f0b8 <USBH_Get_USB_Status>
 800ee36:	4603      	mov	r3, r0
 800ee38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3710      	adds	r7, #16
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7f8 f895 	bl	8006f86 <HAL_HCD_GetCurrentSpeed>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2b02      	cmp	r3, #2
 800ee60:	d00c      	beq.n	800ee7c <USBH_LL_GetSpeed+0x38>
 800ee62:	2b02      	cmp	r3, #2
 800ee64:	d80d      	bhi.n	800ee82 <USBH_LL_GetSpeed+0x3e>
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d002      	beq.n	800ee70 <USBH_LL_GetSpeed+0x2c>
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d003      	beq.n	800ee76 <USBH_LL_GetSpeed+0x32>
 800ee6e:	e008      	b.n	800ee82 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ee70:	2300      	movs	r3, #0
 800ee72:	73fb      	strb	r3, [r7, #15]
    break;
 800ee74:	e008      	b.n	800ee88 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ee76:	2301      	movs	r3, #1
 800ee78:	73fb      	strb	r3, [r7, #15]
    break;
 800ee7a:	e005      	b.n	800ee88 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ee7c:	2302      	movs	r3, #2
 800ee7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ee80:	e002      	b.n	800ee88 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ee82:	2301      	movs	r3, #1
 800ee84:	73fb      	strb	r3, [r7, #15]
    break;
 800ee86:	bf00      	nop
  }
  return  speed;
 800ee88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b084      	sub	sp, #16
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7f8 f828 	bl	8006efe <HAL_HCD_ResetPort>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eeb2:	7bfb      	ldrb	r3, [r7, #15]
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f000 f8ff 	bl	800f0b8 <USBH_Get_USB_Status>
 800eeba:	4603      	mov	r3, r0
 800eebc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eebe:	7bbb      	ldrb	r3, [r7, #14]
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3710      	adds	r7, #16
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	460b      	mov	r3, r1
 800eed2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eeda:	78fa      	ldrb	r2, [r7, #3]
 800eedc:	4611      	mov	r1, r2
 800eede:	4618      	mov	r0, r3
 800eee0:	f7f8 f82f 	bl	8006f42 <HAL_HCD_HC_GetXferCount>
 800eee4:	4603      	mov	r3, r0
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3708      	adds	r7, #8
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}

0800eeee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800eeee:	b590      	push	{r4, r7, lr}
 800eef0:	b089      	sub	sp, #36	; 0x24
 800eef2:	af04      	add	r7, sp, #16
 800eef4:	6078      	str	r0, [r7, #4]
 800eef6:	4608      	mov	r0, r1
 800eef8:	4611      	mov	r1, r2
 800eefa:	461a      	mov	r2, r3
 800eefc:	4603      	mov	r3, r0
 800eefe:	70fb      	strb	r3, [r7, #3]
 800ef00:	460b      	mov	r3, r1
 800ef02:	70bb      	strb	r3, [r7, #2]
 800ef04:	4613      	mov	r3, r2
 800ef06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ef16:	787c      	ldrb	r4, [r7, #1]
 800ef18:	78ba      	ldrb	r2, [r7, #2]
 800ef1a:	78f9      	ldrb	r1, [r7, #3]
 800ef1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ef1e:	9302      	str	r3, [sp, #8]
 800ef20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ef24:	9301      	str	r3, [sp, #4]
 800ef26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef2a:	9300      	str	r3, [sp, #0]
 800ef2c:	4623      	mov	r3, r4
 800ef2e:	f7f7 fc93 	bl	8006858 <HAL_HCD_HC_Init>
 800ef32:	4603      	mov	r3, r0
 800ef34:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ef36:	7bfb      	ldrb	r3, [r7, #15]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f000 f8bd 	bl	800f0b8 <USBH_Get_USB_Status>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3714      	adds	r7, #20
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd90      	pop	{r4, r7, pc}

0800ef4c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	460b      	mov	r3, r1
 800ef56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ef66:	78fa      	ldrb	r2, [r7, #3]
 800ef68:	4611      	mov	r1, r2
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7f7 fd03 	bl	8006976 <HAL_HCD_HC_Halt>
 800ef70:	4603      	mov	r3, r0
 800ef72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ef74:	7bfb      	ldrb	r3, [r7, #15]
 800ef76:	4618      	mov	r0, r3
 800ef78:	f000 f89e 	bl	800f0b8 <USBH_Get_USB_Status>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}

0800ef8a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ef8a:	b590      	push	{r4, r7, lr}
 800ef8c:	b089      	sub	sp, #36	; 0x24
 800ef8e:	af04      	add	r7, sp, #16
 800ef90:	6078      	str	r0, [r7, #4]
 800ef92:	4608      	mov	r0, r1
 800ef94:	4611      	mov	r1, r2
 800ef96:	461a      	mov	r2, r3
 800ef98:	4603      	mov	r3, r0
 800ef9a:	70fb      	strb	r3, [r7, #3]
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	70bb      	strb	r3, [r7, #2]
 800efa0:	4613      	mov	r3, r2
 800efa2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efa4:	2300      	movs	r3, #0
 800efa6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800efa8:	2300      	movs	r3, #0
 800efaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800efb2:	787c      	ldrb	r4, [r7, #1]
 800efb4:	78ba      	ldrb	r2, [r7, #2]
 800efb6:	78f9      	ldrb	r1, [r7, #3]
 800efb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800efbc:	9303      	str	r3, [sp, #12]
 800efbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800efc0:	9302      	str	r3, [sp, #8]
 800efc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc4:	9301      	str	r3, [sp, #4]
 800efc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800efca:	9300      	str	r3, [sp, #0]
 800efcc:	4623      	mov	r3, r4
 800efce:	f7f7 fcf5 	bl	80069bc <HAL_HCD_HC_SubmitRequest>
 800efd2:	4603      	mov	r3, r0
 800efd4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800efd6:	7bfb      	ldrb	r3, [r7, #15]
 800efd8:	4618      	mov	r0, r3
 800efda:	f000 f86d 	bl	800f0b8 <USBH_Get_USB_Status>
 800efde:	4603      	mov	r3, r0
 800efe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3714      	adds	r7, #20
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd90      	pop	{r4, r7, pc}

0800efec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	460b      	mov	r3, r1
 800eff6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800effe:	78fa      	ldrb	r2, [r7, #3]
 800f000:	4611      	mov	r1, r2
 800f002:	4618      	mov	r0, r3
 800f004:	f7f7 ff89 	bl	8006f1a <HAL_HCD_HC_GetURBState>
 800f008:	4603      	mov	r3, r0
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}

0800f012 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f012:	b580      	push	{r7, lr}
 800f014:	b082      	sub	sp, #8
 800f016:	af00      	add	r7, sp, #0
 800f018:	6078      	str	r0, [r7, #4]
 800f01a:	460b      	mov	r3, r1
 800f01c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f024:	2b01      	cmp	r3, #1
 800f026:	d103      	bne.n	800f030 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f028:	78fb      	ldrb	r3, [r7, #3]
 800f02a:	4618      	mov	r0, r3
 800f02c:	f000 f870 	bl	800f110 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f030:	20c8      	movs	r0, #200	; 0xc8
 800f032:	f7f6 fc8f 	bl	8005954 <HAL_Delay>
  return USBH_OK;
 800f036:	2300      	movs	r3, #0
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3708      	adds	r7, #8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f040:	b480      	push	{r7}
 800f042:	b085      	sub	sp, #20
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	460b      	mov	r3, r1
 800f04a:	70fb      	strb	r3, [r7, #3]
 800f04c:	4613      	mov	r3, r2
 800f04e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f056:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f058:	78fb      	ldrb	r3, [r7, #3]
 800f05a:	68fa      	ldr	r2, [r7, #12]
 800f05c:	212c      	movs	r1, #44	; 0x2c
 800f05e:	fb01 f303 	mul.w	r3, r1, r3
 800f062:	4413      	add	r3, r2
 800f064:	333b      	adds	r3, #59	; 0x3b
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d009      	beq.n	800f080 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f06c:	78fb      	ldrb	r3, [r7, #3]
 800f06e:	68fa      	ldr	r2, [r7, #12]
 800f070:	212c      	movs	r1, #44	; 0x2c
 800f072:	fb01 f303 	mul.w	r3, r1, r3
 800f076:	4413      	add	r3, r2
 800f078:	3354      	adds	r3, #84	; 0x54
 800f07a:	78ba      	ldrb	r2, [r7, #2]
 800f07c:	701a      	strb	r2, [r3, #0]
 800f07e:	e008      	b.n	800f092 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f080:	78fb      	ldrb	r3, [r7, #3]
 800f082:	68fa      	ldr	r2, [r7, #12]
 800f084:	212c      	movs	r1, #44	; 0x2c
 800f086:	fb01 f303 	mul.w	r3, r1, r3
 800f08a:	4413      	add	r3, r2
 800f08c:	3355      	adds	r3, #85	; 0x55
 800f08e:	78ba      	ldrb	r2, [r7, #2]
 800f090:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f092:	2300      	movs	r3, #0
}
 800f094:	4618      	mov	r0, r3
 800f096:	3714      	adds	r7, #20
 800f098:	46bd      	mov	sp, r7
 800f09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09e:	4770      	bx	lr

0800f0a0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b082      	sub	sp, #8
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f7f6 fc53 	bl	8005954 <HAL_Delay>
}
 800f0ae:	bf00      	nop
 800f0b0:	3708      	adds	r7, #8
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
	...

0800f0b8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b085      	sub	sp, #20
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	4603      	mov	r3, r0
 800f0c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f0c6:	79fb      	ldrb	r3, [r7, #7]
 800f0c8:	2b03      	cmp	r3, #3
 800f0ca:	d817      	bhi.n	800f0fc <USBH_Get_USB_Status+0x44>
 800f0cc:	a201      	add	r2, pc, #4	; (adr r2, 800f0d4 <USBH_Get_USB_Status+0x1c>)
 800f0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d2:	bf00      	nop
 800f0d4:	0800f0e5 	.word	0x0800f0e5
 800f0d8:	0800f0eb 	.word	0x0800f0eb
 800f0dc:	0800f0f1 	.word	0x0800f0f1
 800f0e0:	0800f0f7 	.word	0x0800f0f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f0e8:	e00b      	b.n	800f102 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f0ea:	2302      	movs	r3, #2
 800f0ec:	73fb      	strb	r3, [r7, #15]
    break;
 800f0ee:	e008      	b.n	800f102 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	73fb      	strb	r3, [r7, #15]
    break;
 800f0f4:	e005      	b.n	800f102 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f0f6:	2302      	movs	r3, #2
 800f0f8:	73fb      	strb	r3, [r7, #15]
    break;
 800f0fa:	e002      	b.n	800f102 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f0fc:	2302      	movs	r3, #2
 800f0fe:	73fb      	strb	r3, [r7, #15]
    break;
 800f100:	bf00      	nop
  }
  return usb_status;
 800f102:	7bfb      	ldrb	r3, [r7, #15]
}
 800f104:	4618      	mov	r0, r3
 800f106:	3714      	adds	r7, #20
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr

0800f110 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	4603      	mov	r3, r0
 800f118:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f11a:	79fb      	ldrb	r3, [r7, #7]
 800f11c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f11e:	79fb      	ldrb	r3, [r7, #7]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d102      	bne.n	800f12a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800f124:	2300      	movs	r3, #0
 800f126:	73fb      	strb	r3, [r7, #15]
 800f128:	e001      	b.n	800f12e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800f12a:	2301      	movs	r3, #1
 800f12c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f12e:	7bfb      	ldrb	r3, [r7, #15]
 800f130:	461a      	mov	r2, r3
 800f132:	2101      	movs	r1, #1
 800f134:	4803      	ldr	r0, [pc, #12]	; (800f144 <MX_DriverVbusFS+0x34>)
 800f136:	f7f7 fae1 	bl	80066fc <HAL_GPIO_WritePin>
}
 800f13a:	bf00      	nop
 800f13c:	3710      	adds	r7, #16
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	40020800 	.word	0x40020800

0800f148 <__cxa_pure_virtual>:
 800f148:	b508      	push	{r3, lr}
 800f14a:	f000 f80d 	bl	800f168 <_ZSt9terminatev>

0800f14e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f14e:	b508      	push	{r3, lr}
 800f150:	4780      	blx	r0
 800f152:	f000 f833 	bl	800f1bc <abort>
	...

0800f158 <_ZSt13get_terminatev>:
 800f158:	4b02      	ldr	r3, [pc, #8]	; (800f164 <_ZSt13get_terminatev+0xc>)
 800f15a:	6818      	ldr	r0, [r3, #0]
 800f15c:	f3bf 8f5b 	dmb	ish
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop
 800f164:	20000044 	.word	0x20000044

0800f168 <_ZSt9terminatev>:
 800f168:	b508      	push	{r3, lr}
 800f16a:	f7ff fff5 	bl	800f158 <_ZSt13get_terminatev>
 800f16e:	f7ff ffee 	bl	800f14e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800f174 <roundf>:
 800f174:	ee10 0a10 	vmov	r0, s0
 800f178:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800f17c:	3a7f      	subs	r2, #127	; 0x7f
 800f17e:	2a16      	cmp	r2, #22
 800f180:	dc15      	bgt.n	800f1ae <roundf+0x3a>
 800f182:	2a00      	cmp	r2, #0
 800f184:	da08      	bge.n	800f198 <roundf+0x24>
 800f186:	3201      	adds	r2, #1
 800f188:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800f18c:	d101      	bne.n	800f192 <roundf+0x1e>
 800f18e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800f192:	ee00 3a10 	vmov	s0, r3
 800f196:	4770      	bx	lr
 800f198:	4907      	ldr	r1, [pc, #28]	; (800f1b8 <roundf+0x44>)
 800f19a:	4111      	asrs	r1, r2
 800f19c:	4208      	tst	r0, r1
 800f19e:	d0fa      	beq.n	800f196 <roundf+0x22>
 800f1a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f1a4:	4113      	asrs	r3, r2
 800f1a6:	4403      	add	r3, r0
 800f1a8:	ea23 0301 	bic.w	r3, r3, r1
 800f1ac:	e7f1      	b.n	800f192 <roundf+0x1e>
 800f1ae:	2a80      	cmp	r2, #128	; 0x80
 800f1b0:	d1f1      	bne.n	800f196 <roundf+0x22>
 800f1b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f1b6:	4770      	bx	lr
 800f1b8:	007fffff 	.word	0x007fffff

0800f1bc <abort>:
 800f1bc:	b508      	push	{r3, lr}
 800f1be:	2006      	movs	r0, #6
 800f1c0:	f000 fdde 	bl	800fd80 <raise>
 800f1c4:	2001      	movs	r0, #1
 800f1c6:	f7f6 fa3d 	bl	8005644 <_exit>
	...

0800f1cc <__errno>:
 800f1cc:	4b01      	ldr	r3, [pc, #4]	; (800f1d4 <__errno+0x8>)
 800f1ce:	6818      	ldr	r0, [r3, #0]
 800f1d0:	4770      	bx	lr
 800f1d2:	bf00      	nop
 800f1d4:	20000048 	.word	0x20000048

0800f1d8 <__libc_init_array>:
 800f1d8:	b570      	push	{r4, r5, r6, lr}
 800f1da:	4d0d      	ldr	r5, [pc, #52]	; (800f210 <__libc_init_array+0x38>)
 800f1dc:	4c0d      	ldr	r4, [pc, #52]	; (800f214 <__libc_init_array+0x3c>)
 800f1de:	1b64      	subs	r4, r4, r5
 800f1e0:	10a4      	asrs	r4, r4, #2
 800f1e2:	2600      	movs	r6, #0
 800f1e4:	42a6      	cmp	r6, r4
 800f1e6:	d109      	bne.n	800f1fc <__libc_init_array+0x24>
 800f1e8:	4d0b      	ldr	r5, [pc, #44]	; (800f218 <__libc_init_array+0x40>)
 800f1ea:	4c0c      	ldr	r4, [pc, #48]	; (800f21c <__libc_init_array+0x44>)
 800f1ec:	f002 fd74 	bl	8011cd8 <_init>
 800f1f0:	1b64      	subs	r4, r4, r5
 800f1f2:	10a4      	asrs	r4, r4, #2
 800f1f4:	2600      	movs	r6, #0
 800f1f6:	42a6      	cmp	r6, r4
 800f1f8:	d105      	bne.n	800f206 <__libc_init_array+0x2e>
 800f1fa:	bd70      	pop	{r4, r5, r6, pc}
 800f1fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f200:	4798      	blx	r3
 800f202:	3601      	adds	r6, #1
 800f204:	e7ee      	b.n	800f1e4 <__libc_init_array+0xc>
 800f206:	f855 3b04 	ldr.w	r3, [r5], #4
 800f20a:	4798      	blx	r3
 800f20c:	3601      	adds	r6, #1
 800f20e:	e7f2      	b.n	800f1f6 <__libc_init_array+0x1e>
 800f210:	080123f4 	.word	0x080123f4
 800f214:	080123f4 	.word	0x080123f4
 800f218:	080123f4 	.word	0x080123f4
 800f21c:	080123fc 	.word	0x080123fc

0800f220 <malloc>:
 800f220:	4b02      	ldr	r3, [pc, #8]	; (800f22c <malloc+0xc>)
 800f222:	4601      	mov	r1, r0
 800f224:	6818      	ldr	r0, [r3, #0]
 800f226:	f000 b88d 	b.w	800f344 <_malloc_r>
 800f22a:	bf00      	nop
 800f22c:	20000048 	.word	0x20000048

0800f230 <free>:
 800f230:	4b02      	ldr	r3, [pc, #8]	; (800f23c <free+0xc>)
 800f232:	4601      	mov	r1, r0
 800f234:	6818      	ldr	r0, [r3, #0]
 800f236:	f000 b819 	b.w	800f26c <_free_r>
 800f23a:	bf00      	nop
 800f23c:	20000048 	.word	0x20000048

0800f240 <memcpy>:
 800f240:	440a      	add	r2, r1
 800f242:	4291      	cmp	r1, r2
 800f244:	f100 33ff 	add.w	r3, r0, #4294967295
 800f248:	d100      	bne.n	800f24c <memcpy+0xc>
 800f24a:	4770      	bx	lr
 800f24c:	b510      	push	{r4, lr}
 800f24e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f252:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f256:	4291      	cmp	r1, r2
 800f258:	d1f9      	bne.n	800f24e <memcpy+0xe>
 800f25a:	bd10      	pop	{r4, pc}

0800f25c <memset>:
 800f25c:	4402      	add	r2, r0
 800f25e:	4603      	mov	r3, r0
 800f260:	4293      	cmp	r3, r2
 800f262:	d100      	bne.n	800f266 <memset+0xa>
 800f264:	4770      	bx	lr
 800f266:	f803 1b01 	strb.w	r1, [r3], #1
 800f26a:	e7f9      	b.n	800f260 <memset+0x4>

0800f26c <_free_r>:
 800f26c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f26e:	2900      	cmp	r1, #0
 800f270:	d044      	beq.n	800f2fc <_free_r+0x90>
 800f272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f276:	9001      	str	r0, [sp, #4]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	f1a1 0404 	sub.w	r4, r1, #4
 800f27e:	bfb8      	it	lt
 800f280:	18e4      	addlt	r4, r4, r3
 800f282:	f001 fc17 	bl	8010ab4 <__malloc_lock>
 800f286:	4a1e      	ldr	r2, [pc, #120]	; (800f300 <_free_r+0x94>)
 800f288:	9801      	ldr	r0, [sp, #4]
 800f28a:	6813      	ldr	r3, [r2, #0]
 800f28c:	b933      	cbnz	r3, 800f29c <_free_r+0x30>
 800f28e:	6063      	str	r3, [r4, #4]
 800f290:	6014      	str	r4, [r2, #0]
 800f292:	b003      	add	sp, #12
 800f294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f298:	f001 bc12 	b.w	8010ac0 <__malloc_unlock>
 800f29c:	42a3      	cmp	r3, r4
 800f29e:	d908      	bls.n	800f2b2 <_free_r+0x46>
 800f2a0:	6825      	ldr	r5, [r4, #0]
 800f2a2:	1961      	adds	r1, r4, r5
 800f2a4:	428b      	cmp	r3, r1
 800f2a6:	bf01      	itttt	eq
 800f2a8:	6819      	ldreq	r1, [r3, #0]
 800f2aa:	685b      	ldreq	r3, [r3, #4]
 800f2ac:	1949      	addeq	r1, r1, r5
 800f2ae:	6021      	streq	r1, [r4, #0]
 800f2b0:	e7ed      	b.n	800f28e <_free_r+0x22>
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	b10b      	cbz	r3, 800f2bc <_free_r+0x50>
 800f2b8:	42a3      	cmp	r3, r4
 800f2ba:	d9fa      	bls.n	800f2b2 <_free_r+0x46>
 800f2bc:	6811      	ldr	r1, [r2, #0]
 800f2be:	1855      	adds	r5, r2, r1
 800f2c0:	42a5      	cmp	r5, r4
 800f2c2:	d10b      	bne.n	800f2dc <_free_r+0x70>
 800f2c4:	6824      	ldr	r4, [r4, #0]
 800f2c6:	4421      	add	r1, r4
 800f2c8:	1854      	adds	r4, r2, r1
 800f2ca:	42a3      	cmp	r3, r4
 800f2cc:	6011      	str	r1, [r2, #0]
 800f2ce:	d1e0      	bne.n	800f292 <_free_r+0x26>
 800f2d0:	681c      	ldr	r4, [r3, #0]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	6053      	str	r3, [r2, #4]
 800f2d6:	4421      	add	r1, r4
 800f2d8:	6011      	str	r1, [r2, #0]
 800f2da:	e7da      	b.n	800f292 <_free_r+0x26>
 800f2dc:	d902      	bls.n	800f2e4 <_free_r+0x78>
 800f2de:	230c      	movs	r3, #12
 800f2e0:	6003      	str	r3, [r0, #0]
 800f2e2:	e7d6      	b.n	800f292 <_free_r+0x26>
 800f2e4:	6825      	ldr	r5, [r4, #0]
 800f2e6:	1961      	adds	r1, r4, r5
 800f2e8:	428b      	cmp	r3, r1
 800f2ea:	bf04      	itt	eq
 800f2ec:	6819      	ldreq	r1, [r3, #0]
 800f2ee:	685b      	ldreq	r3, [r3, #4]
 800f2f0:	6063      	str	r3, [r4, #4]
 800f2f2:	bf04      	itt	eq
 800f2f4:	1949      	addeq	r1, r1, r5
 800f2f6:	6021      	streq	r1, [r4, #0]
 800f2f8:	6054      	str	r4, [r2, #4]
 800f2fa:	e7ca      	b.n	800f292 <_free_r+0x26>
 800f2fc:	b003      	add	sp, #12
 800f2fe:	bd30      	pop	{r4, r5, pc}
 800f300:	200016f8 	.word	0x200016f8

0800f304 <sbrk_aligned>:
 800f304:	b570      	push	{r4, r5, r6, lr}
 800f306:	4e0e      	ldr	r6, [pc, #56]	; (800f340 <sbrk_aligned+0x3c>)
 800f308:	460c      	mov	r4, r1
 800f30a:	6831      	ldr	r1, [r6, #0]
 800f30c:	4605      	mov	r5, r0
 800f30e:	b911      	cbnz	r1, 800f316 <sbrk_aligned+0x12>
 800f310:	f000 fcfe 	bl	800fd10 <_sbrk_r>
 800f314:	6030      	str	r0, [r6, #0]
 800f316:	4621      	mov	r1, r4
 800f318:	4628      	mov	r0, r5
 800f31a:	f000 fcf9 	bl	800fd10 <_sbrk_r>
 800f31e:	1c43      	adds	r3, r0, #1
 800f320:	d00a      	beq.n	800f338 <sbrk_aligned+0x34>
 800f322:	1cc4      	adds	r4, r0, #3
 800f324:	f024 0403 	bic.w	r4, r4, #3
 800f328:	42a0      	cmp	r0, r4
 800f32a:	d007      	beq.n	800f33c <sbrk_aligned+0x38>
 800f32c:	1a21      	subs	r1, r4, r0
 800f32e:	4628      	mov	r0, r5
 800f330:	f000 fcee 	bl	800fd10 <_sbrk_r>
 800f334:	3001      	adds	r0, #1
 800f336:	d101      	bne.n	800f33c <sbrk_aligned+0x38>
 800f338:	f04f 34ff 	mov.w	r4, #4294967295
 800f33c:	4620      	mov	r0, r4
 800f33e:	bd70      	pop	{r4, r5, r6, pc}
 800f340:	200016fc 	.word	0x200016fc

0800f344 <_malloc_r>:
 800f344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f348:	1ccd      	adds	r5, r1, #3
 800f34a:	f025 0503 	bic.w	r5, r5, #3
 800f34e:	3508      	adds	r5, #8
 800f350:	2d0c      	cmp	r5, #12
 800f352:	bf38      	it	cc
 800f354:	250c      	movcc	r5, #12
 800f356:	2d00      	cmp	r5, #0
 800f358:	4607      	mov	r7, r0
 800f35a:	db01      	blt.n	800f360 <_malloc_r+0x1c>
 800f35c:	42a9      	cmp	r1, r5
 800f35e:	d905      	bls.n	800f36c <_malloc_r+0x28>
 800f360:	230c      	movs	r3, #12
 800f362:	603b      	str	r3, [r7, #0]
 800f364:	2600      	movs	r6, #0
 800f366:	4630      	mov	r0, r6
 800f368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f36c:	4e2e      	ldr	r6, [pc, #184]	; (800f428 <_malloc_r+0xe4>)
 800f36e:	f001 fba1 	bl	8010ab4 <__malloc_lock>
 800f372:	6833      	ldr	r3, [r6, #0]
 800f374:	461c      	mov	r4, r3
 800f376:	bb34      	cbnz	r4, 800f3c6 <_malloc_r+0x82>
 800f378:	4629      	mov	r1, r5
 800f37a:	4638      	mov	r0, r7
 800f37c:	f7ff ffc2 	bl	800f304 <sbrk_aligned>
 800f380:	1c43      	adds	r3, r0, #1
 800f382:	4604      	mov	r4, r0
 800f384:	d14d      	bne.n	800f422 <_malloc_r+0xde>
 800f386:	6834      	ldr	r4, [r6, #0]
 800f388:	4626      	mov	r6, r4
 800f38a:	2e00      	cmp	r6, #0
 800f38c:	d140      	bne.n	800f410 <_malloc_r+0xcc>
 800f38e:	6823      	ldr	r3, [r4, #0]
 800f390:	4631      	mov	r1, r6
 800f392:	4638      	mov	r0, r7
 800f394:	eb04 0803 	add.w	r8, r4, r3
 800f398:	f000 fcba 	bl	800fd10 <_sbrk_r>
 800f39c:	4580      	cmp	r8, r0
 800f39e:	d13a      	bne.n	800f416 <_malloc_r+0xd2>
 800f3a0:	6821      	ldr	r1, [r4, #0]
 800f3a2:	3503      	adds	r5, #3
 800f3a4:	1a6d      	subs	r5, r5, r1
 800f3a6:	f025 0503 	bic.w	r5, r5, #3
 800f3aa:	3508      	adds	r5, #8
 800f3ac:	2d0c      	cmp	r5, #12
 800f3ae:	bf38      	it	cc
 800f3b0:	250c      	movcc	r5, #12
 800f3b2:	4629      	mov	r1, r5
 800f3b4:	4638      	mov	r0, r7
 800f3b6:	f7ff ffa5 	bl	800f304 <sbrk_aligned>
 800f3ba:	3001      	adds	r0, #1
 800f3bc:	d02b      	beq.n	800f416 <_malloc_r+0xd2>
 800f3be:	6823      	ldr	r3, [r4, #0]
 800f3c0:	442b      	add	r3, r5
 800f3c2:	6023      	str	r3, [r4, #0]
 800f3c4:	e00e      	b.n	800f3e4 <_malloc_r+0xa0>
 800f3c6:	6822      	ldr	r2, [r4, #0]
 800f3c8:	1b52      	subs	r2, r2, r5
 800f3ca:	d41e      	bmi.n	800f40a <_malloc_r+0xc6>
 800f3cc:	2a0b      	cmp	r2, #11
 800f3ce:	d916      	bls.n	800f3fe <_malloc_r+0xba>
 800f3d0:	1961      	adds	r1, r4, r5
 800f3d2:	42a3      	cmp	r3, r4
 800f3d4:	6025      	str	r5, [r4, #0]
 800f3d6:	bf18      	it	ne
 800f3d8:	6059      	strne	r1, [r3, #4]
 800f3da:	6863      	ldr	r3, [r4, #4]
 800f3dc:	bf08      	it	eq
 800f3de:	6031      	streq	r1, [r6, #0]
 800f3e0:	5162      	str	r2, [r4, r5]
 800f3e2:	604b      	str	r3, [r1, #4]
 800f3e4:	4638      	mov	r0, r7
 800f3e6:	f104 060b 	add.w	r6, r4, #11
 800f3ea:	f001 fb69 	bl	8010ac0 <__malloc_unlock>
 800f3ee:	f026 0607 	bic.w	r6, r6, #7
 800f3f2:	1d23      	adds	r3, r4, #4
 800f3f4:	1af2      	subs	r2, r6, r3
 800f3f6:	d0b6      	beq.n	800f366 <_malloc_r+0x22>
 800f3f8:	1b9b      	subs	r3, r3, r6
 800f3fa:	50a3      	str	r3, [r4, r2]
 800f3fc:	e7b3      	b.n	800f366 <_malloc_r+0x22>
 800f3fe:	6862      	ldr	r2, [r4, #4]
 800f400:	42a3      	cmp	r3, r4
 800f402:	bf0c      	ite	eq
 800f404:	6032      	streq	r2, [r6, #0]
 800f406:	605a      	strne	r2, [r3, #4]
 800f408:	e7ec      	b.n	800f3e4 <_malloc_r+0xa0>
 800f40a:	4623      	mov	r3, r4
 800f40c:	6864      	ldr	r4, [r4, #4]
 800f40e:	e7b2      	b.n	800f376 <_malloc_r+0x32>
 800f410:	4634      	mov	r4, r6
 800f412:	6876      	ldr	r6, [r6, #4]
 800f414:	e7b9      	b.n	800f38a <_malloc_r+0x46>
 800f416:	230c      	movs	r3, #12
 800f418:	603b      	str	r3, [r7, #0]
 800f41a:	4638      	mov	r0, r7
 800f41c:	f001 fb50 	bl	8010ac0 <__malloc_unlock>
 800f420:	e7a1      	b.n	800f366 <_malloc_r+0x22>
 800f422:	6025      	str	r5, [r4, #0]
 800f424:	e7de      	b.n	800f3e4 <_malloc_r+0xa0>
 800f426:	bf00      	nop
 800f428:	200016f8 	.word	0x200016f8

0800f42c <__cvt>:
 800f42c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f430:	ec55 4b10 	vmov	r4, r5, d0
 800f434:	2d00      	cmp	r5, #0
 800f436:	460e      	mov	r6, r1
 800f438:	4619      	mov	r1, r3
 800f43a:	462b      	mov	r3, r5
 800f43c:	bfbb      	ittet	lt
 800f43e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f442:	461d      	movlt	r5, r3
 800f444:	2300      	movge	r3, #0
 800f446:	232d      	movlt	r3, #45	; 0x2d
 800f448:	700b      	strb	r3, [r1, #0]
 800f44a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f44c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f450:	4691      	mov	r9, r2
 800f452:	f023 0820 	bic.w	r8, r3, #32
 800f456:	bfbc      	itt	lt
 800f458:	4622      	movlt	r2, r4
 800f45a:	4614      	movlt	r4, r2
 800f45c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f460:	d005      	beq.n	800f46e <__cvt+0x42>
 800f462:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f466:	d100      	bne.n	800f46a <__cvt+0x3e>
 800f468:	3601      	adds	r6, #1
 800f46a:	2102      	movs	r1, #2
 800f46c:	e000      	b.n	800f470 <__cvt+0x44>
 800f46e:	2103      	movs	r1, #3
 800f470:	ab03      	add	r3, sp, #12
 800f472:	9301      	str	r3, [sp, #4]
 800f474:	ab02      	add	r3, sp, #8
 800f476:	9300      	str	r3, [sp, #0]
 800f478:	ec45 4b10 	vmov	d0, r4, r5
 800f47c:	4653      	mov	r3, sl
 800f47e:	4632      	mov	r2, r6
 800f480:	f000 fd26 	bl	800fed0 <_dtoa_r>
 800f484:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f488:	4607      	mov	r7, r0
 800f48a:	d102      	bne.n	800f492 <__cvt+0x66>
 800f48c:	f019 0f01 	tst.w	r9, #1
 800f490:	d022      	beq.n	800f4d8 <__cvt+0xac>
 800f492:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f496:	eb07 0906 	add.w	r9, r7, r6
 800f49a:	d110      	bne.n	800f4be <__cvt+0x92>
 800f49c:	783b      	ldrb	r3, [r7, #0]
 800f49e:	2b30      	cmp	r3, #48	; 0x30
 800f4a0:	d10a      	bne.n	800f4b8 <__cvt+0x8c>
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	4629      	mov	r1, r5
 800f4aa:	f7f1 fb15 	bl	8000ad8 <__aeabi_dcmpeq>
 800f4ae:	b918      	cbnz	r0, 800f4b8 <__cvt+0x8c>
 800f4b0:	f1c6 0601 	rsb	r6, r6, #1
 800f4b4:	f8ca 6000 	str.w	r6, [sl]
 800f4b8:	f8da 3000 	ldr.w	r3, [sl]
 800f4bc:	4499      	add	r9, r3
 800f4be:	2200      	movs	r2, #0
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	4629      	mov	r1, r5
 800f4c6:	f7f1 fb07 	bl	8000ad8 <__aeabi_dcmpeq>
 800f4ca:	b108      	cbz	r0, 800f4d0 <__cvt+0xa4>
 800f4cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800f4d0:	2230      	movs	r2, #48	; 0x30
 800f4d2:	9b03      	ldr	r3, [sp, #12]
 800f4d4:	454b      	cmp	r3, r9
 800f4d6:	d307      	bcc.n	800f4e8 <__cvt+0xbc>
 800f4d8:	9b03      	ldr	r3, [sp, #12]
 800f4da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4dc:	1bdb      	subs	r3, r3, r7
 800f4de:	4638      	mov	r0, r7
 800f4e0:	6013      	str	r3, [r2, #0]
 800f4e2:	b004      	add	sp, #16
 800f4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e8:	1c59      	adds	r1, r3, #1
 800f4ea:	9103      	str	r1, [sp, #12]
 800f4ec:	701a      	strb	r2, [r3, #0]
 800f4ee:	e7f0      	b.n	800f4d2 <__cvt+0xa6>

0800f4f0 <__exponent>:
 800f4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2900      	cmp	r1, #0
 800f4f6:	bfb8      	it	lt
 800f4f8:	4249      	neglt	r1, r1
 800f4fa:	f803 2b02 	strb.w	r2, [r3], #2
 800f4fe:	bfb4      	ite	lt
 800f500:	222d      	movlt	r2, #45	; 0x2d
 800f502:	222b      	movge	r2, #43	; 0x2b
 800f504:	2909      	cmp	r1, #9
 800f506:	7042      	strb	r2, [r0, #1]
 800f508:	dd2a      	ble.n	800f560 <__exponent+0x70>
 800f50a:	f10d 0407 	add.w	r4, sp, #7
 800f50e:	46a4      	mov	ip, r4
 800f510:	270a      	movs	r7, #10
 800f512:	46a6      	mov	lr, r4
 800f514:	460a      	mov	r2, r1
 800f516:	fb91 f6f7 	sdiv	r6, r1, r7
 800f51a:	fb07 1516 	mls	r5, r7, r6, r1
 800f51e:	3530      	adds	r5, #48	; 0x30
 800f520:	2a63      	cmp	r2, #99	; 0x63
 800f522:	f104 34ff 	add.w	r4, r4, #4294967295
 800f526:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f52a:	4631      	mov	r1, r6
 800f52c:	dcf1      	bgt.n	800f512 <__exponent+0x22>
 800f52e:	3130      	adds	r1, #48	; 0x30
 800f530:	f1ae 0502 	sub.w	r5, lr, #2
 800f534:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f538:	1c44      	adds	r4, r0, #1
 800f53a:	4629      	mov	r1, r5
 800f53c:	4561      	cmp	r1, ip
 800f53e:	d30a      	bcc.n	800f556 <__exponent+0x66>
 800f540:	f10d 0209 	add.w	r2, sp, #9
 800f544:	eba2 020e 	sub.w	r2, r2, lr
 800f548:	4565      	cmp	r5, ip
 800f54a:	bf88      	it	hi
 800f54c:	2200      	movhi	r2, #0
 800f54e:	4413      	add	r3, r2
 800f550:	1a18      	subs	r0, r3, r0
 800f552:	b003      	add	sp, #12
 800f554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f55a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f55e:	e7ed      	b.n	800f53c <__exponent+0x4c>
 800f560:	2330      	movs	r3, #48	; 0x30
 800f562:	3130      	adds	r1, #48	; 0x30
 800f564:	7083      	strb	r3, [r0, #2]
 800f566:	70c1      	strb	r1, [r0, #3]
 800f568:	1d03      	adds	r3, r0, #4
 800f56a:	e7f1      	b.n	800f550 <__exponent+0x60>

0800f56c <_printf_float>:
 800f56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f570:	ed2d 8b02 	vpush	{d8}
 800f574:	b08d      	sub	sp, #52	; 0x34
 800f576:	460c      	mov	r4, r1
 800f578:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f57c:	4616      	mov	r6, r2
 800f57e:	461f      	mov	r7, r3
 800f580:	4605      	mov	r5, r0
 800f582:	f001 fa93 	bl	8010aac <_localeconv_r>
 800f586:	f8d0 a000 	ldr.w	sl, [r0]
 800f58a:	4650      	mov	r0, sl
 800f58c:	f7f0 fe28 	bl	80001e0 <strlen>
 800f590:	2300      	movs	r3, #0
 800f592:	930a      	str	r3, [sp, #40]	; 0x28
 800f594:	6823      	ldr	r3, [r4, #0]
 800f596:	9305      	str	r3, [sp, #20]
 800f598:	f8d8 3000 	ldr.w	r3, [r8]
 800f59c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f5a0:	3307      	adds	r3, #7
 800f5a2:	f023 0307 	bic.w	r3, r3, #7
 800f5a6:	f103 0208 	add.w	r2, r3, #8
 800f5aa:	f8c8 2000 	str.w	r2, [r8]
 800f5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f5b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f5ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f5be:	9307      	str	r3, [sp, #28]
 800f5c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800f5c4:	ee08 0a10 	vmov	s16, r0
 800f5c8:	4b9f      	ldr	r3, [pc, #636]	; (800f848 <_printf_float+0x2dc>)
 800f5ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f5d2:	f7f1 fab3 	bl	8000b3c <__aeabi_dcmpun>
 800f5d6:	bb88      	cbnz	r0, 800f63c <_printf_float+0xd0>
 800f5d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5dc:	4b9a      	ldr	r3, [pc, #616]	; (800f848 <_printf_float+0x2dc>)
 800f5de:	f04f 32ff 	mov.w	r2, #4294967295
 800f5e2:	f7f1 fa8d 	bl	8000b00 <__aeabi_dcmple>
 800f5e6:	bb48      	cbnz	r0, 800f63c <_printf_float+0xd0>
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	4640      	mov	r0, r8
 800f5ee:	4649      	mov	r1, r9
 800f5f0:	f7f1 fa7c 	bl	8000aec <__aeabi_dcmplt>
 800f5f4:	b110      	cbz	r0, 800f5fc <_printf_float+0x90>
 800f5f6:	232d      	movs	r3, #45	; 0x2d
 800f5f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5fc:	4b93      	ldr	r3, [pc, #588]	; (800f84c <_printf_float+0x2e0>)
 800f5fe:	4894      	ldr	r0, [pc, #592]	; (800f850 <_printf_float+0x2e4>)
 800f600:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f604:	bf94      	ite	ls
 800f606:	4698      	movls	r8, r3
 800f608:	4680      	movhi	r8, r0
 800f60a:	2303      	movs	r3, #3
 800f60c:	6123      	str	r3, [r4, #16]
 800f60e:	9b05      	ldr	r3, [sp, #20]
 800f610:	f023 0204 	bic.w	r2, r3, #4
 800f614:	6022      	str	r2, [r4, #0]
 800f616:	f04f 0900 	mov.w	r9, #0
 800f61a:	9700      	str	r7, [sp, #0]
 800f61c:	4633      	mov	r3, r6
 800f61e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f620:	4621      	mov	r1, r4
 800f622:	4628      	mov	r0, r5
 800f624:	f000 f9d8 	bl	800f9d8 <_printf_common>
 800f628:	3001      	adds	r0, #1
 800f62a:	f040 8090 	bne.w	800f74e <_printf_float+0x1e2>
 800f62e:	f04f 30ff 	mov.w	r0, #4294967295
 800f632:	b00d      	add	sp, #52	; 0x34
 800f634:	ecbd 8b02 	vpop	{d8}
 800f638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f63c:	4642      	mov	r2, r8
 800f63e:	464b      	mov	r3, r9
 800f640:	4640      	mov	r0, r8
 800f642:	4649      	mov	r1, r9
 800f644:	f7f1 fa7a 	bl	8000b3c <__aeabi_dcmpun>
 800f648:	b140      	cbz	r0, 800f65c <_printf_float+0xf0>
 800f64a:	464b      	mov	r3, r9
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	bfbc      	itt	lt
 800f650:	232d      	movlt	r3, #45	; 0x2d
 800f652:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f656:	487f      	ldr	r0, [pc, #508]	; (800f854 <_printf_float+0x2e8>)
 800f658:	4b7f      	ldr	r3, [pc, #508]	; (800f858 <_printf_float+0x2ec>)
 800f65a:	e7d1      	b.n	800f600 <_printf_float+0x94>
 800f65c:	6863      	ldr	r3, [r4, #4]
 800f65e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f662:	9206      	str	r2, [sp, #24]
 800f664:	1c5a      	adds	r2, r3, #1
 800f666:	d13f      	bne.n	800f6e8 <_printf_float+0x17c>
 800f668:	2306      	movs	r3, #6
 800f66a:	6063      	str	r3, [r4, #4]
 800f66c:	9b05      	ldr	r3, [sp, #20]
 800f66e:	6861      	ldr	r1, [r4, #4]
 800f670:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f674:	2300      	movs	r3, #0
 800f676:	9303      	str	r3, [sp, #12]
 800f678:	ab0a      	add	r3, sp, #40	; 0x28
 800f67a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f67e:	ab09      	add	r3, sp, #36	; 0x24
 800f680:	ec49 8b10 	vmov	d0, r8, r9
 800f684:	9300      	str	r3, [sp, #0]
 800f686:	6022      	str	r2, [r4, #0]
 800f688:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f68c:	4628      	mov	r0, r5
 800f68e:	f7ff fecd 	bl	800f42c <__cvt>
 800f692:	9b06      	ldr	r3, [sp, #24]
 800f694:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f696:	2b47      	cmp	r3, #71	; 0x47
 800f698:	4680      	mov	r8, r0
 800f69a:	d108      	bne.n	800f6ae <_printf_float+0x142>
 800f69c:	1cc8      	adds	r0, r1, #3
 800f69e:	db02      	blt.n	800f6a6 <_printf_float+0x13a>
 800f6a0:	6863      	ldr	r3, [r4, #4]
 800f6a2:	4299      	cmp	r1, r3
 800f6a4:	dd41      	ble.n	800f72a <_printf_float+0x1be>
 800f6a6:	f1ab 0b02 	sub.w	fp, fp, #2
 800f6aa:	fa5f fb8b 	uxtb.w	fp, fp
 800f6ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f6b2:	d820      	bhi.n	800f6f6 <_printf_float+0x18a>
 800f6b4:	3901      	subs	r1, #1
 800f6b6:	465a      	mov	r2, fp
 800f6b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f6bc:	9109      	str	r1, [sp, #36]	; 0x24
 800f6be:	f7ff ff17 	bl	800f4f0 <__exponent>
 800f6c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6c4:	1813      	adds	r3, r2, r0
 800f6c6:	2a01      	cmp	r2, #1
 800f6c8:	4681      	mov	r9, r0
 800f6ca:	6123      	str	r3, [r4, #16]
 800f6cc:	dc02      	bgt.n	800f6d4 <_printf_float+0x168>
 800f6ce:	6822      	ldr	r2, [r4, #0]
 800f6d0:	07d2      	lsls	r2, r2, #31
 800f6d2:	d501      	bpl.n	800f6d8 <_printf_float+0x16c>
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	6123      	str	r3, [r4, #16]
 800f6d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d09c      	beq.n	800f61a <_printf_float+0xae>
 800f6e0:	232d      	movs	r3, #45	; 0x2d
 800f6e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6e6:	e798      	b.n	800f61a <_printf_float+0xae>
 800f6e8:	9a06      	ldr	r2, [sp, #24]
 800f6ea:	2a47      	cmp	r2, #71	; 0x47
 800f6ec:	d1be      	bne.n	800f66c <_printf_float+0x100>
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d1bc      	bne.n	800f66c <_printf_float+0x100>
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	e7b9      	b.n	800f66a <_printf_float+0xfe>
 800f6f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f6fa:	d118      	bne.n	800f72e <_printf_float+0x1c2>
 800f6fc:	2900      	cmp	r1, #0
 800f6fe:	6863      	ldr	r3, [r4, #4]
 800f700:	dd0b      	ble.n	800f71a <_printf_float+0x1ae>
 800f702:	6121      	str	r1, [r4, #16]
 800f704:	b913      	cbnz	r3, 800f70c <_printf_float+0x1a0>
 800f706:	6822      	ldr	r2, [r4, #0]
 800f708:	07d0      	lsls	r0, r2, #31
 800f70a:	d502      	bpl.n	800f712 <_printf_float+0x1a6>
 800f70c:	3301      	adds	r3, #1
 800f70e:	440b      	add	r3, r1
 800f710:	6123      	str	r3, [r4, #16]
 800f712:	65a1      	str	r1, [r4, #88]	; 0x58
 800f714:	f04f 0900 	mov.w	r9, #0
 800f718:	e7de      	b.n	800f6d8 <_printf_float+0x16c>
 800f71a:	b913      	cbnz	r3, 800f722 <_printf_float+0x1b6>
 800f71c:	6822      	ldr	r2, [r4, #0]
 800f71e:	07d2      	lsls	r2, r2, #31
 800f720:	d501      	bpl.n	800f726 <_printf_float+0x1ba>
 800f722:	3302      	adds	r3, #2
 800f724:	e7f4      	b.n	800f710 <_printf_float+0x1a4>
 800f726:	2301      	movs	r3, #1
 800f728:	e7f2      	b.n	800f710 <_printf_float+0x1a4>
 800f72a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f72e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f730:	4299      	cmp	r1, r3
 800f732:	db05      	blt.n	800f740 <_printf_float+0x1d4>
 800f734:	6823      	ldr	r3, [r4, #0]
 800f736:	6121      	str	r1, [r4, #16]
 800f738:	07d8      	lsls	r0, r3, #31
 800f73a:	d5ea      	bpl.n	800f712 <_printf_float+0x1a6>
 800f73c:	1c4b      	adds	r3, r1, #1
 800f73e:	e7e7      	b.n	800f710 <_printf_float+0x1a4>
 800f740:	2900      	cmp	r1, #0
 800f742:	bfd4      	ite	le
 800f744:	f1c1 0202 	rsble	r2, r1, #2
 800f748:	2201      	movgt	r2, #1
 800f74a:	4413      	add	r3, r2
 800f74c:	e7e0      	b.n	800f710 <_printf_float+0x1a4>
 800f74e:	6823      	ldr	r3, [r4, #0]
 800f750:	055a      	lsls	r2, r3, #21
 800f752:	d407      	bmi.n	800f764 <_printf_float+0x1f8>
 800f754:	6923      	ldr	r3, [r4, #16]
 800f756:	4642      	mov	r2, r8
 800f758:	4631      	mov	r1, r6
 800f75a:	4628      	mov	r0, r5
 800f75c:	47b8      	blx	r7
 800f75e:	3001      	adds	r0, #1
 800f760:	d12c      	bne.n	800f7bc <_printf_float+0x250>
 800f762:	e764      	b.n	800f62e <_printf_float+0xc2>
 800f764:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f768:	f240 80e0 	bls.w	800f92c <_printf_float+0x3c0>
 800f76c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f770:	2200      	movs	r2, #0
 800f772:	2300      	movs	r3, #0
 800f774:	f7f1 f9b0 	bl	8000ad8 <__aeabi_dcmpeq>
 800f778:	2800      	cmp	r0, #0
 800f77a:	d034      	beq.n	800f7e6 <_printf_float+0x27a>
 800f77c:	4a37      	ldr	r2, [pc, #220]	; (800f85c <_printf_float+0x2f0>)
 800f77e:	2301      	movs	r3, #1
 800f780:	4631      	mov	r1, r6
 800f782:	4628      	mov	r0, r5
 800f784:	47b8      	blx	r7
 800f786:	3001      	adds	r0, #1
 800f788:	f43f af51 	beq.w	800f62e <_printf_float+0xc2>
 800f78c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f790:	429a      	cmp	r2, r3
 800f792:	db02      	blt.n	800f79a <_printf_float+0x22e>
 800f794:	6823      	ldr	r3, [r4, #0]
 800f796:	07d8      	lsls	r0, r3, #31
 800f798:	d510      	bpl.n	800f7bc <_printf_float+0x250>
 800f79a:	ee18 3a10 	vmov	r3, s16
 800f79e:	4652      	mov	r2, sl
 800f7a0:	4631      	mov	r1, r6
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	47b8      	blx	r7
 800f7a6:	3001      	adds	r0, #1
 800f7a8:	f43f af41 	beq.w	800f62e <_printf_float+0xc2>
 800f7ac:	f04f 0800 	mov.w	r8, #0
 800f7b0:	f104 091a 	add.w	r9, r4, #26
 800f7b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7b6:	3b01      	subs	r3, #1
 800f7b8:	4543      	cmp	r3, r8
 800f7ba:	dc09      	bgt.n	800f7d0 <_printf_float+0x264>
 800f7bc:	6823      	ldr	r3, [r4, #0]
 800f7be:	079b      	lsls	r3, r3, #30
 800f7c0:	f100 8105 	bmi.w	800f9ce <_printf_float+0x462>
 800f7c4:	68e0      	ldr	r0, [r4, #12]
 800f7c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7c8:	4298      	cmp	r0, r3
 800f7ca:	bfb8      	it	lt
 800f7cc:	4618      	movlt	r0, r3
 800f7ce:	e730      	b.n	800f632 <_printf_float+0xc6>
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	464a      	mov	r2, r9
 800f7d4:	4631      	mov	r1, r6
 800f7d6:	4628      	mov	r0, r5
 800f7d8:	47b8      	blx	r7
 800f7da:	3001      	adds	r0, #1
 800f7dc:	f43f af27 	beq.w	800f62e <_printf_float+0xc2>
 800f7e0:	f108 0801 	add.w	r8, r8, #1
 800f7e4:	e7e6      	b.n	800f7b4 <_printf_float+0x248>
 800f7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	dc39      	bgt.n	800f860 <_printf_float+0x2f4>
 800f7ec:	4a1b      	ldr	r2, [pc, #108]	; (800f85c <_printf_float+0x2f0>)
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	4631      	mov	r1, r6
 800f7f2:	4628      	mov	r0, r5
 800f7f4:	47b8      	blx	r7
 800f7f6:	3001      	adds	r0, #1
 800f7f8:	f43f af19 	beq.w	800f62e <_printf_float+0xc2>
 800f7fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f800:	4313      	orrs	r3, r2
 800f802:	d102      	bne.n	800f80a <_printf_float+0x29e>
 800f804:	6823      	ldr	r3, [r4, #0]
 800f806:	07d9      	lsls	r1, r3, #31
 800f808:	d5d8      	bpl.n	800f7bc <_printf_float+0x250>
 800f80a:	ee18 3a10 	vmov	r3, s16
 800f80e:	4652      	mov	r2, sl
 800f810:	4631      	mov	r1, r6
 800f812:	4628      	mov	r0, r5
 800f814:	47b8      	blx	r7
 800f816:	3001      	adds	r0, #1
 800f818:	f43f af09 	beq.w	800f62e <_printf_float+0xc2>
 800f81c:	f04f 0900 	mov.w	r9, #0
 800f820:	f104 0a1a 	add.w	sl, r4, #26
 800f824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f826:	425b      	negs	r3, r3
 800f828:	454b      	cmp	r3, r9
 800f82a:	dc01      	bgt.n	800f830 <_printf_float+0x2c4>
 800f82c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f82e:	e792      	b.n	800f756 <_printf_float+0x1ea>
 800f830:	2301      	movs	r3, #1
 800f832:	4652      	mov	r2, sl
 800f834:	4631      	mov	r1, r6
 800f836:	4628      	mov	r0, r5
 800f838:	47b8      	blx	r7
 800f83a:	3001      	adds	r0, #1
 800f83c:	f43f aef7 	beq.w	800f62e <_printf_float+0xc2>
 800f840:	f109 0901 	add.w	r9, r9, #1
 800f844:	e7ee      	b.n	800f824 <_printf_float+0x2b8>
 800f846:	bf00      	nop
 800f848:	7fefffff 	.word	0x7fefffff
 800f84c:	08012014 	.word	0x08012014
 800f850:	08012018 	.word	0x08012018
 800f854:	08012020 	.word	0x08012020
 800f858:	0801201c 	.word	0x0801201c
 800f85c:	08012024 	.word	0x08012024
 800f860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f862:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f864:	429a      	cmp	r2, r3
 800f866:	bfa8      	it	ge
 800f868:	461a      	movge	r2, r3
 800f86a:	2a00      	cmp	r2, #0
 800f86c:	4691      	mov	r9, r2
 800f86e:	dc37      	bgt.n	800f8e0 <_printf_float+0x374>
 800f870:	f04f 0b00 	mov.w	fp, #0
 800f874:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f878:	f104 021a 	add.w	r2, r4, #26
 800f87c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f87e:	9305      	str	r3, [sp, #20]
 800f880:	eba3 0309 	sub.w	r3, r3, r9
 800f884:	455b      	cmp	r3, fp
 800f886:	dc33      	bgt.n	800f8f0 <_printf_float+0x384>
 800f888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f88c:	429a      	cmp	r2, r3
 800f88e:	db3b      	blt.n	800f908 <_printf_float+0x39c>
 800f890:	6823      	ldr	r3, [r4, #0]
 800f892:	07da      	lsls	r2, r3, #31
 800f894:	d438      	bmi.n	800f908 <_printf_float+0x39c>
 800f896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f898:	9a05      	ldr	r2, [sp, #20]
 800f89a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f89c:	1a9a      	subs	r2, r3, r2
 800f89e:	eba3 0901 	sub.w	r9, r3, r1
 800f8a2:	4591      	cmp	r9, r2
 800f8a4:	bfa8      	it	ge
 800f8a6:	4691      	movge	r9, r2
 800f8a8:	f1b9 0f00 	cmp.w	r9, #0
 800f8ac:	dc35      	bgt.n	800f91a <_printf_float+0x3ae>
 800f8ae:	f04f 0800 	mov.w	r8, #0
 800f8b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f8b6:	f104 0a1a 	add.w	sl, r4, #26
 800f8ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8be:	1a9b      	subs	r3, r3, r2
 800f8c0:	eba3 0309 	sub.w	r3, r3, r9
 800f8c4:	4543      	cmp	r3, r8
 800f8c6:	f77f af79 	ble.w	800f7bc <_printf_float+0x250>
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	4652      	mov	r2, sl
 800f8ce:	4631      	mov	r1, r6
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	47b8      	blx	r7
 800f8d4:	3001      	adds	r0, #1
 800f8d6:	f43f aeaa 	beq.w	800f62e <_printf_float+0xc2>
 800f8da:	f108 0801 	add.w	r8, r8, #1
 800f8de:	e7ec      	b.n	800f8ba <_printf_float+0x34e>
 800f8e0:	4613      	mov	r3, r2
 800f8e2:	4631      	mov	r1, r6
 800f8e4:	4642      	mov	r2, r8
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	47b8      	blx	r7
 800f8ea:	3001      	adds	r0, #1
 800f8ec:	d1c0      	bne.n	800f870 <_printf_float+0x304>
 800f8ee:	e69e      	b.n	800f62e <_printf_float+0xc2>
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	4631      	mov	r1, r6
 800f8f4:	4628      	mov	r0, r5
 800f8f6:	9205      	str	r2, [sp, #20]
 800f8f8:	47b8      	blx	r7
 800f8fa:	3001      	adds	r0, #1
 800f8fc:	f43f ae97 	beq.w	800f62e <_printf_float+0xc2>
 800f900:	9a05      	ldr	r2, [sp, #20]
 800f902:	f10b 0b01 	add.w	fp, fp, #1
 800f906:	e7b9      	b.n	800f87c <_printf_float+0x310>
 800f908:	ee18 3a10 	vmov	r3, s16
 800f90c:	4652      	mov	r2, sl
 800f90e:	4631      	mov	r1, r6
 800f910:	4628      	mov	r0, r5
 800f912:	47b8      	blx	r7
 800f914:	3001      	adds	r0, #1
 800f916:	d1be      	bne.n	800f896 <_printf_float+0x32a>
 800f918:	e689      	b.n	800f62e <_printf_float+0xc2>
 800f91a:	9a05      	ldr	r2, [sp, #20]
 800f91c:	464b      	mov	r3, r9
 800f91e:	4442      	add	r2, r8
 800f920:	4631      	mov	r1, r6
 800f922:	4628      	mov	r0, r5
 800f924:	47b8      	blx	r7
 800f926:	3001      	adds	r0, #1
 800f928:	d1c1      	bne.n	800f8ae <_printf_float+0x342>
 800f92a:	e680      	b.n	800f62e <_printf_float+0xc2>
 800f92c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f92e:	2a01      	cmp	r2, #1
 800f930:	dc01      	bgt.n	800f936 <_printf_float+0x3ca>
 800f932:	07db      	lsls	r3, r3, #31
 800f934:	d538      	bpl.n	800f9a8 <_printf_float+0x43c>
 800f936:	2301      	movs	r3, #1
 800f938:	4642      	mov	r2, r8
 800f93a:	4631      	mov	r1, r6
 800f93c:	4628      	mov	r0, r5
 800f93e:	47b8      	blx	r7
 800f940:	3001      	adds	r0, #1
 800f942:	f43f ae74 	beq.w	800f62e <_printf_float+0xc2>
 800f946:	ee18 3a10 	vmov	r3, s16
 800f94a:	4652      	mov	r2, sl
 800f94c:	4631      	mov	r1, r6
 800f94e:	4628      	mov	r0, r5
 800f950:	47b8      	blx	r7
 800f952:	3001      	adds	r0, #1
 800f954:	f43f ae6b 	beq.w	800f62e <_printf_float+0xc2>
 800f958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f95c:	2200      	movs	r2, #0
 800f95e:	2300      	movs	r3, #0
 800f960:	f7f1 f8ba 	bl	8000ad8 <__aeabi_dcmpeq>
 800f964:	b9d8      	cbnz	r0, 800f99e <_printf_float+0x432>
 800f966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f968:	f108 0201 	add.w	r2, r8, #1
 800f96c:	3b01      	subs	r3, #1
 800f96e:	4631      	mov	r1, r6
 800f970:	4628      	mov	r0, r5
 800f972:	47b8      	blx	r7
 800f974:	3001      	adds	r0, #1
 800f976:	d10e      	bne.n	800f996 <_printf_float+0x42a>
 800f978:	e659      	b.n	800f62e <_printf_float+0xc2>
 800f97a:	2301      	movs	r3, #1
 800f97c:	4652      	mov	r2, sl
 800f97e:	4631      	mov	r1, r6
 800f980:	4628      	mov	r0, r5
 800f982:	47b8      	blx	r7
 800f984:	3001      	adds	r0, #1
 800f986:	f43f ae52 	beq.w	800f62e <_printf_float+0xc2>
 800f98a:	f108 0801 	add.w	r8, r8, #1
 800f98e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f990:	3b01      	subs	r3, #1
 800f992:	4543      	cmp	r3, r8
 800f994:	dcf1      	bgt.n	800f97a <_printf_float+0x40e>
 800f996:	464b      	mov	r3, r9
 800f998:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f99c:	e6dc      	b.n	800f758 <_printf_float+0x1ec>
 800f99e:	f04f 0800 	mov.w	r8, #0
 800f9a2:	f104 0a1a 	add.w	sl, r4, #26
 800f9a6:	e7f2      	b.n	800f98e <_printf_float+0x422>
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	4642      	mov	r2, r8
 800f9ac:	e7df      	b.n	800f96e <_printf_float+0x402>
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	464a      	mov	r2, r9
 800f9b2:	4631      	mov	r1, r6
 800f9b4:	4628      	mov	r0, r5
 800f9b6:	47b8      	blx	r7
 800f9b8:	3001      	adds	r0, #1
 800f9ba:	f43f ae38 	beq.w	800f62e <_printf_float+0xc2>
 800f9be:	f108 0801 	add.w	r8, r8, #1
 800f9c2:	68e3      	ldr	r3, [r4, #12]
 800f9c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9c6:	1a5b      	subs	r3, r3, r1
 800f9c8:	4543      	cmp	r3, r8
 800f9ca:	dcf0      	bgt.n	800f9ae <_printf_float+0x442>
 800f9cc:	e6fa      	b.n	800f7c4 <_printf_float+0x258>
 800f9ce:	f04f 0800 	mov.w	r8, #0
 800f9d2:	f104 0919 	add.w	r9, r4, #25
 800f9d6:	e7f4      	b.n	800f9c2 <_printf_float+0x456>

0800f9d8 <_printf_common>:
 800f9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9dc:	4616      	mov	r6, r2
 800f9de:	4699      	mov	r9, r3
 800f9e0:	688a      	ldr	r2, [r1, #8]
 800f9e2:	690b      	ldr	r3, [r1, #16]
 800f9e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	bfb8      	it	lt
 800f9ec:	4613      	movlt	r3, r2
 800f9ee:	6033      	str	r3, [r6, #0]
 800f9f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f9f4:	4607      	mov	r7, r0
 800f9f6:	460c      	mov	r4, r1
 800f9f8:	b10a      	cbz	r2, 800f9fe <_printf_common+0x26>
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	6033      	str	r3, [r6, #0]
 800f9fe:	6823      	ldr	r3, [r4, #0]
 800fa00:	0699      	lsls	r1, r3, #26
 800fa02:	bf42      	ittt	mi
 800fa04:	6833      	ldrmi	r3, [r6, #0]
 800fa06:	3302      	addmi	r3, #2
 800fa08:	6033      	strmi	r3, [r6, #0]
 800fa0a:	6825      	ldr	r5, [r4, #0]
 800fa0c:	f015 0506 	ands.w	r5, r5, #6
 800fa10:	d106      	bne.n	800fa20 <_printf_common+0x48>
 800fa12:	f104 0a19 	add.w	sl, r4, #25
 800fa16:	68e3      	ldr	r3, [r4, #12]
 800fa18:	6832      	ldr	r2, [r6, #0]
 800fa1a:	1a9b      	subs	r3, r3, r2
 800fa1c:	42ab      	cmp	r3, r5
 800fa1e:	dc26      	bgt.n	800fa6e <_printf_common+0x96>
 800fa20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa24:	1e13      	subs	r3, r2, #0
 800fa26:	6822      	ldr	r2, [r4, #0]
 800fa28:	bf18      	it	ne
 800fa2a:	2301      	movne	r3, #1
 800fa2c:	0692      	lsls	r2, r2, #26
 800fa2e:	d42b      	bmi.n	800fa88 <_printf_common+0xb0>
 800fa30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa34:	4649      	mov	r1, r9
 800fa36:	4638      	mov	r0, r7
 800fa38:	47c0      	blx	r8
 800fa3a:	3001      	adds	r0, #1
 800fa3c:	d01e      	beq.n	800fa7c <_printf_common+0xa4>
 800fa3e:	6823      	ldr	r3, [r4, #0]
 800fa40:	68e5      	ldr	r5, [r4, #12]
 800fa42:	6832      	ldr	r2, [r6, #0]
 800fa44:	f003 0306 	and.w	r3, r3, #6
 800fa48:	2b04      	cmp	r3, #4
 800fa4a:	bf08      	it	eq
 800fa4c:	1aad      	subeq	r5, r5, r2
 800fa4e:	68a3      	ldr	r3, [r4, #8]
 800fa50:	6922      	ldr	r2, [r4, #16]
 800fa52:	bf0c      	ite	eq
 800fa54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa58:	2500      	movne	r5, #0
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	bfc4      	itt	gt
 800fa5e:	1a9b      	subgt	r3, r3, r2
 800fa60:	18ed      	addgt	r5, r5, r3
 800fa62:	2600      	movs	r6, #0
 800fa64:	341a      	adds	r4, #26
 800fa66:	42b5      	cmp	r5, r6
 800fa68:	d11a      	bne.n	800faa0 <_printf_common+0xc8>
 800fa6a:	2000      	movs	r0, #0
 800fa6c:	e008      	b.n	800fa80 <_printf_common+0xa8>
 800fa6e:	2301      	movs	r3, #1
 800fa70:	4652      	mov	r2, sl
 800fa72:	4649      	mov	r1, r9
 800fa74:	4638      	mov	r0, r7
 800fa76:	47c0      	blx	r8
 800fa78:	3001      	adds	r0, #1
 800fa7a:	d103      	bne.n	800fa84 <_printf_common+0xac>
 800fa7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa84:	3501      	adds	r5, #1
 800fa86:	e7c6      	b.n	800fa16 <_printf_common+0x3e>
 800fa88:	18e1      	adds	r1, r4, r3
 800fa8a:	1c5a      	adds	r2, r3, #1
 800fa8c:	2030      	movs	r0, #48	; 0x30
 800fa8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa92:	4422      	add	r2, r4
 800fa94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa9c:	3302      	adds	r3, #2
 800fa9e:	e7c7      	b.n	800fa30 <_printf_common+0x58>
 800faa0:	2301      	movs	r3, #1
 800faa2:	4622      	mov	r2, r4
 800faa4:	4649      	mov	r1, r9
 800faa6:	4638      	mov	r0, r7
 800faa8:	47c0      	blx	r8
 800faaa:	3001      	adds	r0, #1
 800faac:	d0e6      	beq.n	800fa7c <_printf_common+0xa4>
 800faae:	3601      	adds	r6, #1
 800fab0:	e7d9      	b.n	800fa66 <_printf_common+0x8e>
	...

0800fab4 <_printf_i>:
 800fab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fab8:	7e0f      	ldrb	r7, [r1, #24]
 800faba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fabc:	2f78      	cmp	r7, #120	; 0x78
 800fabe:	4691      	mov	r9, r2
 800fac0:	4680      	mov	r8, r0
 800fac2:	460c      	mov	r4, r1
 800fac4:	469a      	mov	sl, r3
 800fac6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800faca:	d807      	bhi.n	800fadc <_printf_i+0x28>
 800facc:	2f62      	cmp	r7, #98	; 0x62
 800face:	d80a      	bhi.n	800fae6 <_printf_i+0x32>
 800fad0:	2f00      	cmp	r7, #0
 800fad2:	f000 80d8 	beq.w	800fc86 <_printf_i+0x1d2>
 800fad6:	2f58      	cmp	r7, #88	; 0x58
 800fad8:	f000 80a3 	beq.w	800fc22 <_printf_i+0x16e>
 800fadc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fae4:	e03a      	b.n	800fb5c <_printf_i+0xa8>
 800fae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800faea:	2b15      	cmp	r3, #21
 800faec:	d8f6      	bhi.n	800fadc <_printf_i+0x28>
 800faee:	a101      	add	r1, pc, #4	; (adr r1, 800faf4 <_printf_i+0x40>)
 800faf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800faf4:	0800fb4d 	.word	0x0800fb4d
 800faf8:	0800fb61 	.word	0x0800fb61
 800fafc:	0800fadd 	.word	0x0800fadd
 800fb00:	0800fadd 	.word	0x0800fadd
 800fb04:	0800fadd 	.word	0x0800fadd
 800fb08:	0800fadd 	.word	0x0800fadd
 800fb0c:	0800fb61 	.word	0x0800fb61
 800fb10:	0800fadd 	.word	0x0800fadd
 800fb14:	0800fadd 	.word	0x0800fadd
 800fb18:	0800fadd 	.word	0x0800fadd
 800fb1c:	0800fadd 	.word	0x0800fadd
 800fb20:	0800fc6d 	.word	0x0800fc6d
 800fb24:	0800fb91 	.word	0x0800fb91
 800fb28:	0800fc4f 	.word	0x0800fc4f
 800fb2c:	0800fadd 	.word	0x0800fadd
 800fb30:	0800fadd 	.word	0x0800fadd
 800fb34:	0800fc8f 	.word	0x0800fc8f
 800fb38:	0800fadd 	.word	0x0800fadd
 800fb3c:	0800fb91 	.word	0x0800fb91
 800fb40:	0800fadd 	.word	0x0800fadd
 800fb44:	0800fadd 	.word	0x0800fadd
 800fb48:	0800fc57 	.word	0x0800fc57
 800fb4c:	682b      	ldr	r3, [r5, #0]
 800fb4e:	1d1a      	adds	r2, r3, #4
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	602a      	str	r2, [r5, #0]
 800fb54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	e0a3      	b.n	800fca8 <_printf_i+0x1f4>
 800fb60:	6820      	ldr	r0, [r4, #0]
 800fb62:	6829      	ldr	r1, [r5, #0]
 800fb64:	0606      	lsls	r6, r0, #24
 800fb66:	f101 0304 	add.w	r3, r1, #4
 800fb6a:	d50a      	bpl.n	800fb82 <_printf_i+0xce>
 800fb6c:	680e      	ldr	r6, [r1, #0]
 800fb6e:	602b      	str	r3, [r5, #0]
 800fb70:	2e00      	cmp	r6, #0
 800fb72:	da03      	bge.n	800fb7c <_printf_i+0xc8>
 800fb74:	232d      	movs	r3, #45	; 0x2d
 800fb76:	4276      	negs	r6, r6
 800fb78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb7c:	485e      	ldr	r0, [pc, #376]	; (800fcf8 <_printf_i+0x244>)
 800fb7e:	230a      	movs	r3, #10
 800fb80:	e019      	b.n	800fbb6 <_printf_i+0x102>
 800fb82:	680e      	ldr	r6, [r1, #0]
 800fb84:	602b      	str	r3, [r5, #0]
 800fb86:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fb8a:	bf18      	it	ne
 800fb8c:	b236      	sxthne	r6, r6
 800fb8e:	e7ef      	b.n	800fb70 <_printf_i+0xbc>
 800fb90:	682b      	ldr	r3, [r5, #0]
 800fb92:	6820      	ldr	r0, [r4, #0]
 800fb94:	1d19      	adds	r1, r3, #4
 800fb96:	6029      	str	r1, [r5, #0]
 800fb98:	0601      	lsls	r1, r0, #24
 800fb9a:	d501      	bpl.n	800fba0 <_printf_i+0xec>
 800fb9c:	681e      	ldr	r6, [r3, #0]
 800fb9e:	e002      	b.n	800fba6 <_printf_i+0xf2>
 800fba0:	0646      	lsls	r6, r0, #25
 800fba2:	d5fb      	bpl.n	800fb9c <_printf_i+0xe8>
 800fba4:	881e      	ldrh	r6, [r3, #0]
 800fba6:	4854      	ldr	r0, [pc, #336]	; (800fcf8 <_printf_i+0x244>)
 800fba8:	2f6f      	cmp	r7, #111	; 0x6f
 800fbaa:	bf0c      	ite	eq
 800fbac:	2308      	moveq	r3, #8
 800fbae:	230a      	movne	r3, #10
 800fbb0:	2100      	movs	r1, #0
 800fbb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fbb6:	6865      	ldr	r5, [r4, #4]
 800fbb8:	60a5      	str	r5, [r4, #8]
 800fbba:	2d00      	cmp	r5, #0
 800fbbc:	bfa2      	ittt	ge
 800fbbe:	6821      	ldrge	r1, [r4, #0]
 800fbc0:	f021 0104 	bicge.w	r1, r1, #4
 800fbc4:	6021      	strge	r1, [r4, #0]
 800fbc6:	b90e      	cbnz	r6, 800fbcc <_printf_i+0x118>
 800fbc8:	2d00      	cmp	r5, #0
 800fbca:	d04d      	beq.n	800fc68 <_printf_i+0x1b4>
 800fbcc:	4615      	mov	r5, r2
 800fbce:	fbb6 f1f3 	udiv	r1, r6, r3
 800fbd2:	fb03 6711 	mls	r7, r3, r1, r6
 800fbd6:	5dc7      	ldrb	r7, [r0, r7]
 800fbd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fbdc:	4637      	mov	r7, r6
 800fbde:	42bb      	cmp	r3, r7
 800fbe0:	460e      	mov	r6, r1
 800fbe2:	d9f4      	bls.n	800fbce <_printf_i+0x11a>
 800fbe4:	2b08      	cmp	r3, #8
 800fbe6:	d10b      	bne.n	800fc00 <_printf_i+0x14c>
 800fbe8:	6823      	ldr	r3, [r4, #0]
 800fbea:	07de      	lsls	r6, r3, #31
 800fbec:	d508      	bpl.n	800fc00 <_printf_i+0x14c>
 800fbee:	6923      	ldr	r3, [r4, #16]
 800fbf0:	6861      	ldr	r1, [r4, #4]
 800fbf2:	4299      	cmp	r1, r3
 800fbf4:	bfde      	ittt	le
 800fbf6:	2330      	movle	r3, #48	; 0x30
 800fbf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fbfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fc00:	1b52      	subs	r2, r2, r5
 800fc02:	6122      	str	r2, [r4, #16]
 800fc04:	f8cd a000 	str.w	sl, [sp]
 800fc08:	464b      	mov	r3, r9
 800fc0a:	aa03      	add	r2, sp, #12
 800fc0c:	4621      	mov	r1, r4
 800fc0e:	4640      	mov	r0, r8
 800fc10:	f7ff fee2 	bl	800f9d8 <_printf_common>
 800fc14:	3001      	adds	r0, #1
 800fc16:	d14c      	bne.n	800fcb2 <_printf_i+0x1fe>
 800fc18:	f04f 30ff 	mov.w	r0, #4294967295
 800fc1c:	b004      	add	sp, #16
 800fc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc22:	4835      	ldr	r0, [pc, #212]	; (800fcf8 <_printf_i+0x244>)
 800fc24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fc28:	6829      	ldr	r1, [r5, #0]
 800fc2a:	6823      	ldr	r3, [r4, #0]
 800fc2c:	f851 6b04 	ldr.w	r6, [r1], #4
 800fc30:	6029      	str	r1, [r5, #0]
 800fc32:	061d      	lsls	r5, r3, #24
 800fc34:	d514      	bpl.n	800fc60 <_printf_i+0x1ac>
 800fc36:	07df      	lsls	r7, r3, #31
 800fc38:	bf44      	itt	mi
 800fc3a:	f043 0320 	orrmi.w	r3, r3, #32
 800fc3e:	6023      	strmi	r3, [r4, #0]
 800fc40:	b91e      	cbnz	r6, 800fc4a <_printf_i+0x196>
 800fc42:	6823      	ldr	r3, [r4, #0]
 800fc44:	f023 0320 	bic.w	r3, r3, #32
 800fc48:	6023      	str	r3, [r4, #0]
 800fc4a:	2310      	movs	r3, #16
 800fc4c:	e7b0      	b.n	800fbb0 <_printf_i+0xfc>
 800fc4e:	6823      	ldr	r3, [r4, #0]
 800fc50:	f043 0320 	orr.w	r3, r3, #32
 800fc54:	6023      	str	r3, [r4, #0]
 800fc56:	2378      	movs	r3, #120	; 0x78
 800fc58:	4828      	ldr	r0, [pc, #160]	; (800fcfc <_printf_i+0x248>)
 800fc5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc5e:	e7e3      	b.n	800fc28 <_printf_i+0x174>
 800fc60:	0659      	lsls	r1, r3, #25
 800fc62:	bf48      	it	mi
 800fc64:	b2b6      	uxthmi	r6, r6
 800fc66:	e7e6      	b.n	800fc36 <_printf_i+0x182>
 800fc68:	4615      	mov	r5, r2
 800fc6a:	e7bb      	b.n	800fbe4 <_printf_i+0x130>
 800fc6c:	682b      	ldr	r3, [r5, #0]
 800fc6e:	6826      	ldr	r6, [r4, #0]
 800fc70:	6961      	ldr	r1, [r4, #20]
 800fc72:	1d18      	adds	r0, r3, #4
 800fc74:	6028      	str	r0, [r5, #0]
 800fc76:	0635      	lsls	r5, r6, #24
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	d501      	bpl.n	800fc80 <_printf_i+0x1cc>
 800fc7c:	6019      	str	r1, [r3, #0]
 800fc7e:	e002      	b.n	800fc86 <_printf_i+0x1d2>
 800fc80:	0670      	lsls	r0, r6, #25
 800fc82:	d5fb      	bpl.n	800fc7c <_printf_i+0x1c8>
 800fc84:	8019      	strh	r1, [r3, #0]
 800fc86:	2300      	movs	r3, #0
 800fc88:	6123      	str	r3, [r4, #16]
 800fc8a:	4615      	mov	r5, r2
 800fc8c:	e7ba      	b.n	800fc04 <_printf_i+0x150>
 800fc8e:	682b      	ldr	r3, [r5, #0]
 800fc90:	1d1a      	adds	r2, r3, #4
 800fc92:	602a      	str	r2, [r5, #0]
 800fc94:	681d      	ldr	r5, [r3, #0]
 800fc96:	6862      	ldr	r2, [r4, #4]
 800fc98:	2100      	movs	r1, #0
 800fc9a:	4628      	mov	r0, r5
 800fc9c:	f7f0 faa8 	bl	80001f0 <memchr>
 800fca0:	b108      	cbz	r0, 800fca6 <_printf_i+0x1f2>
 800fca2:	1b40      	subs	r0, r0, r5
 800fca4:	6060      	str	r0, [r4, #4]
 800fca6:	6863      	ldr	r3, [r4, #4]
 800fca8:	6123      	str	r3, [r4, #16]
 800fcaa:	2300      	movs	r3, #0
 800fcac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcb0:	e7a8      	b.n	800fc04 <_printf_i+0x150>
 800fcb2:	6923      	ldr	r3, [r4, #16]
 800fcb4:	462a      	mov	r2, r5
 800fcb6:	4649      	mov	r1, r9
 800fcb8:	4640      	mov	r0, r8
 800fcba:	47d0      	blx	sl
 800fcbc:	3001      	adds	r0, #1
 800fcbe:	d0ab      	beq.n	800fc18 <_printf_i+0x164>
 800fcc0:	6823      	ldr	r3, [r4, #0]
 800fcc2:	079b      	lsls	r3, r3, #30
 800fcc4:	d413      	bmi.n	800fcee <_printf_i+0x23a>
 800fcc6:	68e0      	ldr	r0, [r4, #12]
 800fcc8:	9b03      	ldr	r3, [sp, #12]
 800fcca:	4298      	cmp	r0, r3
 800fccc:	bfb8      	it	lt
 800fcce:	4618      	movlt	r0, r3
 800fcd0:	e7a4      	b.n	800fc1c <_printf_i+0x168>
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	4632      	mov	r2, r6
 800fcd6:	4649      	mov	r1, r9
 800fcd8:	4640      	mov	r0, r8
 800fcda:	47d0      	blx	sl
 800fcdc:	3001      	adds	r0, #1
 800fcde:	d09b      	beq.n	800fc18 <_printf_i+0x164>
 800fce0:	3501      	adds	r5, #1
 800fce2:	68e3      	ldr	r3, [r4, #12]
 800fce4:	9903      	ldr	r1, [sp, #12]
 800fce6:	1a5b      	subs	r3, r3, r1
 800fce8:	42ab      	cmp	r3, r5
 800fcea:	dcf2      	bgt.n	800fcd2 <_printf_i+0x21e>
 800fcec:	e7eb      	b.n	800fcc6 <_printf_i+0x212>
 800fcee:	2500      	movs	r5, #0
 800fcf0:	f104 0619 	add.w	r6, r4, #25
 800fcf4:	e7f5      	b.n	800fce2 <_printf_i+0x22e>
 800fcf6:	bf00      	nop
 800fcf8:	08012026 	.word	0x08012026
 800fcfc:	08012037 	.word	0x08012037

0800fd00 <realloc>:
 800fd00:	4b02      	ldr	r3, [pc, #8]	; (800fd0c <realloc+0xc>)
 800fd02:	460a      	mov	r2, r1
 800fd04:	4601      	mov	r1, r0
 800fd06:	6818      	ldr	r0, [r3, #0]
 800fd08:	f001 ba7a 	b.w	8011200 <_realloc_r>
 800fd0c:	20000048 	.word	0x20000048

0800fd10 <_sbrk_r>:
 800fd10:	b538      	push	{r3, r4, r5, lr}
 800fd12:	4d06      	ldr	r5, [pc, #24]	; (800fd2c <_sbrk_r+0x1c>)
 800fd14:	2300      	movs	r3, #0
 800fd16:	4604      	mov	r4, r0
 800fd18:	4608      	mov	r0, r1
 800fd1a:	602b      	str	r3, [r5, #0]
 800fd1c:	f7f5 fd0a 	bl	8005734 <_sbrk>
 800fd20:	1c43      	adds	r3, r0, #1
 800fd22:	d102      	bne.n	800fd2a <_sbrk_r+0x1a>
 800fd24:	682b      	ldr	r3, [r5, #0]
 800fd26:	b103      	cbz	r3, 800fd2a <_sbrk_r+0x1a>
 800fd28:	6023      	str	r3, [r4, #0]
 800fd2a:	bd38      	pop	{r3, r4, r5, pc}
 800fd2c:	20001700 	.word	0x20001700

0800fd30 <_raise_r>:
 800fd30:	291f      	cmp	r1, #31
 800fd32:	b538      	push	{r3, r4, r5, lr}
 800fd34:	4604      	mov	r4, r0
 800fd36:	460d      	mov	r5, r1
 800fd38:	d904      	bls.n	800fd44 <_raise_r+0x14>
 800fd3a:	2316      	movs	r3, #22
 800fd3c:	6003      	str	r3, [r0, #0]
 800fd3e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd42:	bd38      	pop	{r3, r4, r5, pc}
 800fd44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fd46:	b112      	cbz	r2, 800fd4e <_raise_r+0x1e>
 800fd48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd4c:	b94b      	cbnz	r3, 800fd62 <_raise_r+0x32>
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f000 f830 	bl	800fdb4 <_getpid_r>
 800fd54:	462a      	mov	r2, r5
 800fd56:	4601      	mov	r1, r0
 800fd58:	4620      	mov	r0, r4
 800fd5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd5e:	f000 b817 	b.w	800fd90 <_kill_r>
 800fd62:	2b01      	cmp	r3, #1
 800fd64:	d00a      	beq.n	800fd7c <_raise_r+0x4c>
 800fd66:	1c59      	adds	r1, r3, #1
 800fd68:	d103      	bne.n	800fd72 <_raise_r+0x42>
 800fd6a:	2316      	movs	r3, #22
 800fd6c:	6003      	str	r3, [r0, #0]
 800fd6e:	2001      	movs	r0, #1
 800fd70:	e7e7      	b.n	800fd42 <_raise_r+0x12>
 800fd72:	2400      	movs	r4, #0
 800fd74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fd78:	4628      	mov	r0, r5
 800fd7a:	4798      	blx	r3
 800fd7c:	2000      	movs	r0, #0
 800fd7e:	e7e0      	b.n	800fd42 <_raise_r+0x12>

0800fd80 <raise>:
 800fd80:	4b02      	ldr	r3, [pc, #8]	; (800fd8c <raise+0xc>)
 800fd82:	4601      	mov	r1, r0
 800fd84:	6818      	ldr	r0, [r3, #0]
 800fd86:	f7ff bfd3 	b.w	800fd30 <_raise_r>
 800fd8a:	bf00      	nop
 800fd8c:	20000048 	.word	0x20000048

0800fd90 <_kill_r>:
 800fd90:	b538      	push	{r3, r4, r5, lr}
 800fd92:	4d07      	ldr	r5, [pc, #28]	; (800fdb0 <_kill_r+0x20>)
 800fd94:	2300      	movs	r3, #0
 800fd96:	4604      	mov	r4, r0
 800fd98:	4608      	mov	r0, r1
 800fd9a:	4611      	mov	r1, r2
 800fd9c:	602b      	str	r3, [r5, #0]
 800fd9e:	f7f5 fc41 	bl	8005624 <_kill>
 800fda2:	1c43      	adds	r3, r0, #1
 800fda4:	d102      	bne.n	800fdac <_kill_r+0x1c>
 800fda6:	682b      	ldr	r3, [r5, #0]
 800fda8:	b103      	cbz	r3, 800fdac <_kill_r+0x1c>
 800fdaa:	6023      	str	r3, [r4, #0]
 800fdac:	bd38      	pop	{r3, r4, r5, pc}
 800fdae:	bf00      	nop
 800fdb0:	20001700 	.word	0x20001700

0800fdb4 <_getpid_r>:
 800fdb4:	f7f5 bc2e 	b.w	8005614 <_getpid>

0800fdb8 <quorem>:
 800fdb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdbc:	6903      	ldr	r3, [r0, #16]
 800fdbe:	690c      	ldr	r4, [r1, #16]
 800fdc0:	42a3      	cmp	r3, r4
 800fdc2:	4607      	mov	r7, r0
 800fdc4:	f2c0 8081 	blt.w	800feca <quorem+0x112>
 800fdc8:	3c01      	subs	r4, #1
 800fdca:	f101 0814 	add.w	r8, r1, #20
 800fdce:	f100 0514 	add.w	r5, r0, #20
 800fdd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdd6:	9301      	str	r3, [sp, #4]
 800fdd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fddc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fde0:	3301      	adds	r3, #1
 800fde2:	429a      	cmp	r2, r3
 800fde4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fde8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fdec:	fbb2 f6f3 	udiv	r6, r2, r3
 800fdf0:	d331      	bcc.n	800fe56 <quorem+0x9e>
 800fdf2:	f04f 0e00 	mov.w	lr, #0
 800fdf6:	4640      	mov	r0, r8
 800fdf8:	46ac      	mov	ip, r5
 800fdfa:	46f2      	mov	sl, lr
 800fdfc:	f850 2b04 	ldr.w	r2, [r0], #4
 800fe00:	b293      	uxth	r3, r2
 800fe02:	fb06 e303 	mla	r3, r6, r3, lr
 800fe06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fe0a:	b29b      	uxth	r3, r3
 800fe0c:	ebaa 0303 	sub.w	r3, sl, r3
 800fe10:	f8dc a000 	ldr.w	sl, [ip]
 800fe14:	0c12      	lsrs	r2, r2, #16
 800fe16:	fa13 f38a 	uxtah	r3, r3, sl
 800fe1a:	fb06 e202 	mla	r2, r6, r2, lr
 800fe1e:	9300      	str	r3, [sp, #0]
 800fe20:	9b00      	ldr	r3, [sp, #0]
 800fe22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fe26:	b292      	uxth	r2, r2
 800fe28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fe2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe30:	f8bd 3000 	ldrh.w	r3, [sp]
 800fe34:	4581      	cmp	r9, r0
 800fe36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe3a:	f84c 3b04 	str.w	r3, [ip], #4
 800fe3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fe42:	d2db      	bcs.n	800fdfc <quorem+0x44>
 800fe44:	f855 300b 	ldr.w	r3, [r5, fp]
 800fe48:	b92b      	cbnz	r3, 800fe56 <quorem+0x9e>
 800fe4a:	9b01      	ldr	r3, [sp, #4]
 800fe4c:	3b04      	subs	r3, #4
 800fe4e:	429d      	cmp	r5, r3
 800fe50:	461a      	mov	r2, r3
 800fe52:	d32e      	bcc.n	800feb2 <quorem+0xfa>
 800fe54:	613c      	str	r4, [r7, #16]
 800fe56:	4638      	mov	r0, r7
 800fe58:	f001 f8ba 	bl	8010fd0 <__mcmp>
 800fe5c:	2800      	cmp	r0, #0
 800fe5e:	db24      	blt.n	800feaa <quorem+0xf2>
 800fe60:	3601      	adds	r6, #1
 800fe62:	4628      	mov	r0, r5
 800fe64:	f04f 0c00 	mov.w	ip, #0
 800fe68:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe6c:	f8d0 e000 	ldr.w	lr, [r0]
 800fe70:	b293      	uxth	r3, r2
 800fe72:	ebac 0303 	sub.w	r3, ip, r3
 800fe76:	0c12      	lsrs	r2, r2, #16
 800fe78:	fa13 f38e 	uxtah	r3, r3, lr
 800fe7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fe80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe84:	b29b      	uxth	r3, r3
 800fe86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe8a:	45c1      	cmp	r9, r8
 800fe8c:	f840 3b04 	str.w	r3, [r0], #4
 800fe90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fe94:	d2e8      	bcs.n	800fe68 <quorem+0xb0>
 800fe96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe9e:	b922      	cbnz	r2, 800feaa <quorem+0xf2>
 800fea0:	3b04      	subs	r3, #4
 800fea2:	429d      	cmp	r5, r3
 800fea4:	461a      	mov	r2, r3
 800fea6:	d30a      	bcc.n	800febe <quorem+0x106>
 800fea8:	613c      	str	r4, [r7, #16]
 800feaa:	4630      	mov	r0, r6
 800feac:	b003      	add	sp, #12
 800feae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb2:	6812      	ldr	r2, [r2, #0]
 800feb4:	3b04      	subs	r3, #4
 800feb6:	2a00      	cmp	r2, #0
 800feb8:	d1cc      	bne.n	800fe54 <quorem+0x9c>
 800feba:	3c01      	subs	r4, #1
 800febc:	e7c7      	b.n	800fe4e <quorem+0x96>
 800febe:	6812      	ldr	r2, [r2, #0]
 800fec0:	3b04      	subs	r3, #4
 800fec2:	2a00      	cmp	r2, #0
 800fec4:	d1f0      	bne.n	800fea8 <quorem+0xf0>
 800fec6:	3c01      	subs	r4, #1
 800fec8:	e7eb      	b.n	800fea2 <quorem+0xea>
 800feca:	2000      	movs	r0, #0
 800fecc:	e7ee      	b.n	800feac <quorem+0xf4>
	...

0800fed0 <_dtoa_r>:
 800fed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fed4:	ed2d 8b04 	vpush	{d8-d9}
 800fed8:	ec57 6b10 	vmov	r6, r7, d0
 800fedc:	b093      	sub	sp, #76	; 0x4c
 800fede:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fee0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fee4:	9106      	str	r1, [sp, #24]
 800fee6:	ee10 aa10 	vmov	sl, s0
 800feea:	4604      	mov	r4, r0
 800feec:	9209      	str	r2, [sp, #36]	; 0x24
 800feee:	930c      	str	r3, [sp, #48]	; 0x30
 800fef0:	46bb      	mov	fp, r7
 800fef2:	b975      	cbnz	r5, 800ff12 <_dtoa_r+0x42>
 800fef4:	2010      	movs	r0, #16
 800fef6:	f7ff f993 	bl	800f220 <malloc>
 800fefa:	4602      	mov	r2, r0
 800fefc:	6260      	str	r0, [r4, #36]	; 0x24
 800fefe:	b920      	cbnz	r0, 800ff0a <_dtoa_r+0x3a>
 800ff00:	4ba7      	ldr	r3, [pc, #668]	; (80101a0 <_dtoa_r+0x2d0>)
 800ff02:	21ea      	movs	r1, #234	; 0xea
 800ff04:	48a7      	ldr	r0, [pc, #668]	; (80101a4 <_dtoa_r+0x2d4>)
 800ff06:	f001 f9ab 	bl	8011260 <__assert_func>
 800ff0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ff0e:	6005      	str	r5, [r0, #0]
 800ff10:	60c5      	str	r5, [r0, #12]
 800ff12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff14:	6819      	ldr	r1, [r3, #0]
 800ff16:	b151      	cbz	r1, 800ff2e <_dtoa_r+0x5e>
 800ff18:	685a      	ldr	r2, [r3, #4]
 800ff1a:	604a      	str	r2, [r1, #4]
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	4093      	lsls	r3, r2
 800ff20:	608b      	str	r3, [r1, #8]
 800ff22:	4620      	mov	r0, r4
 800ff24:	f000 fe12 	bl	8010b4c <_Bfree>
 800ff28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	601a      	str	r2, [r3, #0]
 800ff2e:	1e3b      	subs	r3, r7, #0
 800ff30:	bfaa      	itet	ge
 800ff32:	2300      	movge	r3, #0
 800ff34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ff38:	f8c8 3000 	strge.w	r3, [r8]
 800ff3c:	4b9a      	ldr	r3, [pc, #616]	; (80101a8 <_dtoa_r+0x2d8>)
 800ff3e:	bfbc      	itt	lt
 800ff40:	2201      	movlt	r2, #1
 800ff42:	f8c8 2000 	strlt.w	r2, [r8]
 800ff46:	ea33 030b 	bics.w	r3, r3, fp
 800ff4a:	d11b      	bne.n	800ff84 <_dtoa_r+0xb4>
 800ff4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff4e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ff52:	6013      	str	r3, [r2, #0]
 800ff54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff58:	4333      	orrs	r3, r6
 800ff5a:	f000 8592 	beq.w	8010a82 <_dtoa_r+0xbb2>
 800ff5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff60:	b963      	cbnz	r3, 800ff7c <_dtoa_r+0xac>
 800ff62:	4b92      	ldr	r3, [pc, #584]	; (80101ac <_dtoa_r+0x2dc>)
 800ff64:	e022      	b.n	800ffac <_dtoa_r+0xdc>
 800ff66:	4b92      	ldr	r3, [pc, #584]	; (80101b0 <_dtoa_r+0x2e0>)
 800ff68:	9301      	str	r3, [sp, #4]
 800ff6a:	3308      	adds	r3, #8
 800ff6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ff6e:	6013      	str	r3, [r2, #0]
 800ff70:	9801      	ldr	r0, [sp, #4]
 800ff72:	b013      	add	sp, #76	; 0x4c
 800ff74:	ecbd 8b04 	vpop	{d8-d9}
 800ff78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff7c:	4b8b      	ldr	r3, [pc, #556]	; (80101ac <_dtoa_r+0x2dc>)
 800ff7e:	9301      	str	r3, [sp, #4]
 800ff80:	3303      	adds	r3, #3
 800ff82:	e7f3      	b.n	800ff6c <_dtoa_r+0x9c>
 800ff84:	2200      	movs	r2, #0
 800ff86:	2300      	movs	r3, #0
 800ff88:	4650      	mov	r0, sl
 800ff8a:	4659      	mov	r1, fp
 800ff8c:	f7f0 fda4 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff90:	ec4b ab19 	vmov	d9, sl, fp
 800ff94:	4680      	mov	r8, r0
 800ff96:	b158      	cbz	r0, 800ffb0 <_dtoa_r+0xe0>
 800ff98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	6013      	str	r3, [r2, #0]
 800ff9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	f000 856b 	beq.w	8010a7c <_dtoa_r+0xbac>
 800ffa6:	4883      	ldr	r0, [pc, #524]	; (80101b4 <_dtoa_r+0x2e4>)
 800ffa8:	6018      	str	r0, [r3, #0]
 800ffaa:	1e43      	subs	r3, r0, #1
 800ffac:	9301      	str	r3, [sp, #4]
 800ffae:	e7df      	b.n	800ff70 <_dtoa_r+0xa0>
 800ffb0:	ec4b ab10 	vmov	d0, sl, fp
 800ffb4:	aa10      	add	r2, sp, #64	; 0x40
 800ffb6:	a911      	add	r1, sp, #68	; 0x44
 800ffb8:	4620      	mov	r0, r4
 800ffba:	f001 f8af 	bl	801111c <__d2b>
 800ffbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ffc2:	ee08 0a10 	vmov	s16, r0
 800ffc6:	2d00      	cmp	r5, #0
 800ffc8:	f000 8084 	beq.w	80100d4 <_dtoa_r+0x204>
 800ffcc:	ee19 3a90 	vmov	r3, s19
 800ffd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ffd8:	4656      	mov	r6, sl
 800ffda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ffde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ffe2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ffe6:	4b74      	ldr	r3, [pc, #464]	; (80101b8 <_dtoa_r+0x2e8>)
 800ffe8:	2200      	movs	r2, #0
 800ffea:	4630      	mov	r0, r6
 800ffec:	4639      	mov	r1, r7
 800ffee:	f7f0 f953 	bl	8000298 <__aeabi_dsub>
 800fff2:	a365      	add	r3, pc, #404	; (adr r3, 8010188 <_dtoa_r+0x2b8>)
 800fff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff8:	f7f0 fb06 	bl	8000608 <__aeabi_dmul>
 800fffc:	a364      	add	r3, pc, #400	; (adr r3, 8010190 <_dtoa_r+0x2c0>)
 800fffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010002:	f7f0 f94b 	bl	800029c <__adddf3>
 8010006:	4606      	mov	r6, r0
 8010008:	4628      	mov	r0, r5
 801000a:	460f      	mov	r7, r1
 801000c:	f7f0 fa92 	bl	8000534 <__aeabi_i2d>
 8010010:	a361      	add	r3, pc, #388	; (adr r3, 8010198 <_dtoa_r+0x2c8>)
 8010012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010016:	f7f0 faf7 	bl	8000608 <__aeabi_dmul>
 801001a:	4602      	mov	r2, r0
 801001c:	460b      	mov	r3, r1
 801001e:	4630      	mov	r0, r6
 8010020:	4639      	mov	r1, r7
 8010022:	f7f0 f93b 	bl	800029c <__adddf3>
 8010026:	4606      	mov	r6, r0
 8010028:	460f      	mov	r7, r1
 801002a:	f7f0 fd9d 	bl	8000b68 <__aeabi_d2iz>
 801002e:	2200      	movs	r2, #0
 8010030:	9000      	str	r0, [sp, #0]
 8010032:	2300      	movs	r3, #0
 8010034:	4630      	mov	r0, r6
 8010036:	4639      	mov	r1, r7
 8010038:	f7f0 fd58 	bl	8000aec <__aeabi_dcmplt>
 801003c:	b150      	cbz	r0, 8010054 <_dtoa_r+0x184>
 801003e:	9800      	ldr	r0, [sp, #0]
 8010040:	f7f0 fa78 	bl	8000534 <__aeabi_i2d>
 8010044:	4632      	mov	r2, r6
 8010046:	463b      	mov	r3, r7
 8010048:	f7f0 fd46 	bl	8000ad8 <__aeabi_dcmpeq>
 801004c:	b910      	cbnz	r0, 8010054 <_dtoa_r+0x184>
 801004e:	9b00      	ldr	r3, [sp, #0]
 8010050:	3b01      	subs	r3, #1
 8010052:	9300      	str	r3, [sp, #0]
 8010054:	9b00      	ldr	r3, [sp, #0]
 8010056:	2b16      	cmp	r3, #22
 8010058:	d85a      	bhi.n	8010110 <_dtoa_r+0x240>
 801005a:	9a00      	ldr	r2, [sp, #0]
 801005c:	4b57      	ldr	r3, [pc, #348]	; (80101bc <_dtoa_r+0x2ec>)
 801005e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010066:	ec51 0b19 	vmov	r0, r1, d9
 801006a:	f7f0 fd3f 	bl	8000aec <__aeabi_dcmplt>
 801006e:	2800      	cmp	r0, #0
 8010070:	d050      	beq.n	8010114 <_dtoa_r+0x244>
 8010072:	9b00      	ldr	r3, [sp, #0]
 8010074:	3b01      	subs	r3, #1
 8010076:	9300      	str	r3, [sp, #0]
 8010078:	2300      	movs	r3, #0
 801007a:	930b      	str	r3, [sp, #44]	; 0x2c
 801007c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801007e:	1b5d      	subs	r5, r3, r5
 8010080:	1e6b      	subs	r3, r5, #1
 8010082:	9305      	str	r3, [sp, #20]
 8010084:	bf45      	ittet	mi
 8010086:	f1c5 0301 	rsbmi	r3, r5, #1
 801008a:	9304      	strmi	r3, [sp, #16]
 801008c:	2300      	movpl	r3, #0
 801008e:	2300      	movmi	r3, #0
 8010090:	bf4c      	ite	mi
 8010092:	9305      	strmi	r3, [sp, #20]
 8010094:	9304      	strpl	r3, [sp, #16]
 8010096:	9b00      	ldr	r3, [sp, #0]
 8010098:	2b00      	cmp	r3, #0
 801009a:	db3d      	blt.n	8010118 <_dtoa_r+0x248>
 801009c:	9b05      	ldr	r3, [sp, #20]
 801009e:	9a00      	ldr	r2, [sp, #0]
 80100a0:	920a      	str	r2, [sp, #40]	; 0x28
 80100a2:	4413      	add	r3, r2
 80100a4:	9305      	str	r3, [sp, #20]
 80100a6:	2300      	movs	r3, #0
 80100a8:	9307      	str	r3, [sp, #28]
 80100aa:	9b06      	ldr	r3, [sp, #24]
 80100ac:	2b09      	cmp	r3, #9
 80100ae:	f200 8089 	bhi.w	80101c4 <_dtoa_r+0x2f4>
 80100b2:	2b05      	cmp	r3, #5
 80100b4:	bfc4      	itt	gt
 80100b6:	3b04      	subgt	r3, #4
 80100b8:	9306      	strgt	r3, [sp, #24]
 80100ba:	9b06      	ldr	r3, [sp, #24]
 80100bc:	f1a3 0302 	sub.w	r3, r3, #2
 80100c0:	bfcc      	ite	gt
 80100c2:	2500      	movgt	r5, #0
 80100c4:	2501      	movle	r5, #1
 80100c6:	2b03      	cmp	r3, #3
 80100c8:	f200 8087 	bhi.w	80101da <_dtoa_r+0x30a>
 80100cc:	e8df f003 	tbb	[pc, r3]
 80100d0:	59383a2d 	.word	0x59383a2d
 80100d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80100d8:	441d      	add	r5, r3
 80100da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80100de:	2b20      	cmp	r3, #32
 80100e0:	bfc1      	itttt	gt
 80100e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80100e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80100ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80100ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80100f2:	bfda      	itte	le
 80100f4:	f1c3 0320 	rsble	r3, r3, #32
 80100f8:	fa06 f003 	lslle.w	r0, r6, r3
 80100fc:	4318      	orrgt	r0, r3
 80100fe:	f7f0 fa09 	bl	8000514 <__aeabi_ui2d>
 8010102:	2301      	movs	r3, #1
 8010104:	4606      	mov	r6, r0
 8010106:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801010a:	3d01      	subs	r5, #1
 801010c:	930e      	str	r3, [sp, #56]	; 0x38
 801010e:	e76a      	b.n	800ffe6 <_dtoa_r+0x116>
 8010110:	2301      	movs	r3, #1
 8010112:	e7b2      	b.n	801007a <_dtoa_r+0x1aa>
 8010114:	900b      	str	r0, [sp, #44]	; 0x2c
 8010116:	e7b1      	b.n	801007c <_dtoa_r+0x1ac>
 8010118:	9b04      	ldr	r3, [sp, #16]
 801011a:	9a00      	ldr	r2, [sp, #0]
 801011c:	1a9b      	subs	r3, r3, r2
 801011e:	9304      	str	r3, [sp, #16]
 8010120:	4253      	negs	r3, r2
 8010122:	9307      	str	r3, [sp, #28]
 8010124:	2300      	movs	r3, #0
 8010126:	930a      	str	r3, [sp, #40]	; 0x28
 8010128:	e7bf      	b.n	80100aa <_dtoa_r+0x1da>
 801012a:	2300      	movs	r3, #0
 801012c:	9308      	str	r3, [sp, #32]
 801012e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010130:	2b00      	cmp	r3, #0
 8010132:	dc55      	bgt.n	80101e0 <_dtoa_r+0x310>
 8010134:	2301      	movs	r3, #1
 8010136:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801013a:	461a      	mov	r2, r3
 801013c:	9209      	str	r2, [sp, #36]	; 0x24
 801013e:	e00c      	b.n	801015a <_dtoa_r+0x28a>
 8010140:	2301      	movs	r3, #1
 8010142:	e7f3      	b.n	801012c <_dtoa_r+0x25c>
 8010144:	2300      	movs	r3, #0
 8010146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010148:	9308      	str	r3, [sp, #32]
 801014a:	9b00      	ldr	r3, [sp, #0]
 801014c:	4413      	add	r3, r2
 801014e:	9302      	str	r3, [sp, #8]
 8010150:	3301      	adds	r3, #1
 8010152:	2b01      	cmp	r3, #1
 8010154:	9303      	str	r3, [sp, #12]
 8010156:	bfb8      	it	lt
 8010158:	2301      	movlt	r3, #1
 801015a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801015c:	2200      	movs	r2, #0
 801015e:	6042      	str	r2, [r0, #4]
 8010160:	2204      	movs	r2, #4
 8010162:	f102 0614 	add.w	r6, r2, #20
 8010166:	429e      	cmp	r6, r3
 8010168:	6841      	ldr	r1, [r0, #4]
 801016a:	d93d      	bls.n	80101e8 <_dtoa_r+0x318>
 801016c:	4620      	mov	r0, r4
 801016e:	f000 fcad 	bl	8010acc <_Balloc>
 8010172:	9001      	str	r0, [sp, #4]
 8010174:	2800      	cmp	r0, #0
 8010176:	d13b      	bne.n	80101f0 <_dtoa_r+0x320>
 8010178:	4b11      	ldr	r3, [pc, #68]	; (80101c0 <_dtoa_r+0x2f0>)
 801017a:	4602      	mov	r2, r0
 801017c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010180:	e6c0      	b.n	800ff04 <_dtoa_r+0x34>
 8010182:	2301      	movs	r3, #1
 8010184:	e7df      	b.n	8010146 <_dtoa_r+0x276>
 8010186:	bf00      	nop
 8010188:	636f4361 	.word	0x636f4361
 801018c:	3fd287a7 	.word	0x3fd287a7
 8010190:	8b60c8b3 	.word	0x8b60c8b3
 8010194:	3fc68a28 	.word	0x3fc68a28
 8010198:	509f79fb 	.word	0x509f79fb
 801019c:	3fd34413 	.word	0x3fd34413
 80101a0:	08012055 	.word	0x08012055
 80101a4:	0801206c 	.word	0x0801206c
 80101a8:	7ff00000 	.word	0x7ff00000
 80101ac:	08012051 	.word	0x08012051
 80101b0:	08012048 	.word	0x08012048
 80101b4:	08012025 	.word	0x08012025
 80101b8:	3ff80000 	.word	0x3ff80000
 80101bc:	08012160 	.word	0x08012160
 80101c0:	080120c7 	.word	0x080120c7
 80101c4:	2501      	movs	r5, #1
 80101c6:	2300      	movs	r3, #0
 80101c8:	9306      	str	r3, [sp, #24]
 80101ca:	9508      	str	r5, [sp, #32]
 80101cc:	f04f 33ff 	mov.w	r3, #4294967295
 80101d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80101d4:	2200      	movs	r2, #0
 80101d6:	2312      	movs	r3, #18
 80101d8:	e7b0      	b.n	801013c <_dtoa_r+0x26c>
 80101da:	2301      	movs	r3, #1
 80101dc:	9308      	str	r3, [sp, #32]
 80101de:	e7f5      	b.n	80101cc <_dtoa_r+0x2fc>
 80101e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80101e6:	e7b8      	b.n	801015a <_dtoa_r+0x28a>
 80101e8:	3101      	adds	r1, #1
 80101ea:	6041      	str	r1, [r0, #4]
 80101ec:	0052      	lsls	r2, r2, #1
 80101ee:	e7b8      	b.n	8010162 <_dtoa_r+0x292>
 80101f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101f2:	9a01      	ldr	r2, [sp, #4]
 80101f4:	601a      	str	r2, [r3, #0]
 80101f6:	9b03      	ldr	r3, [sp, #12]
 80101f8:	2b0e      	cmp	r3, #14
 80101fa:	f200 809d 	bhi.w	8010338 <_dtoa_r+0x468>
 80101fe:	2d00      	cmp	r5, #0
 8010200:	f000 809a 	beq.w	8010338 <_dtoa_r+0x468>
 8010204:	9b00      	ldr	r3, [sp, #0]
 8010206:	2b00      	cmp	r3, #0
 8010208:	dd32      	ble.n	8010270 <_dtoa_r+0x3a0>
 801020a:	4ab7      	ldr	r2, [pc, #732]	; (80104e8 <_dtoa_r+0x618>)
 801020c:	f003 030f 	and.w	r3, r3, #15
 8010210:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010214:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010218:	9b00      	ldr	r3, [sp, #0]
 801021a:	05d8      	lsls	r0, r3, #23
 801021c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010220:	d516      	bpl.n	8010250 <_dtoa_r+0x380>
 8010222:	4bb2      	ldr	r3, [pc, #712]	; (80104ec <_dtoa_r+0x61c>)
 8010224:	ec51 0b19 	vmov	r0, r1, d9
 8010228:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801022c:	f7f0 fb16 	bl	800085c <__aeabi_ddiv>
 8010230:	f007 070f 	and.w	r7, r7, #15
 8010234:	4682      	mov	sl, r0
 8010236:	468b      	mov	fp, r1
 8010238:	2503      	movs	r5, #3
 801023a:	4eac      	ldr	r6, [pc, #688]	; (80104ec <_dtoa_r+0x61c>)
 801023c:	b957      	cbnz	r7, 8010254 <_dtoa_r+0x384>
 801023e:	4642      	mov	r2, r8
 8010240:	464b      	mov	r3, r9
 8010242:	4650      	mov	r0, sl
 8010244:	4659      	mov	r1, fp
 8010246:	f7f0 fb09 	bl	800085c <__aeabi_ddiv>
 801024a:	4682      	mov	sl, r0
 801024c:	468b      	mov	fp, r1
 801024e:	e028      	b.n	80102a2 <_dtoa_r+0x3d2>
 8010250:	2502      	movs	r5, #2
 8010252:	e7f2      	b.n	801023a <_dtoa_r+0x36a>
 8010254:	07f9      	lsls	r1, r7, #31
 8010256:	d508      	bpl.n	801026a <_dtoa_r+0x39a>
 8010258:	4640      	mov	r0, r8
 801025a:	4649      	mov	r1, r9
 801025c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010260:	f7f0 f9d2 	bl	8000608 <__aeabi_dmul>
 8010264:	3501      	adds	r5, #1
 8010266:	4680      	mov	r8, r0
 8010268:	4689      	mov	r9, r1
 801026a:	107f      	asrs	r7, r7, #1
 801026c:	3608      	adds	r6, #8
 801026e:	e7e5      	b.n	801023c <_dtoa_r+0x36c>
 8010270:	f000 809b 	beq.w	80103aa <_dtoa_r+0x4da>
 8010274:	9b00      	ldr	r3, [sp, #0]
 8010276:	4f9d      	ldr	r7, [pc, #628]	; (80104ec <_dtoa_r+0x61c>)
 8010278:	425e      	negs	r6, r3
 801027a:	4b9b      	ldr	r3, [pc, #620]	; (80104e8 <_dtoa_r+0x618>)
 801027c:	f006 020f 	and.w	r2, r6, #15
 8010280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010288:	ec51 0b19 	vmov	r0, r1, d9
 801028c:	f7f0 f9bc 	bl	8000608 <__aeabi_dmul>
 8010290:	1136      	asrs	r6, r6, #4
 8010292:	4682      	mov	sl, r0
 8010294:	468b      	mov	fp, r1
 8010296:	2300      	movs	r3, #0
 8010298:	2502      	movs	r5, #2
 801029a:	2e00      	cmp	r6, #0
 801029c:	d17a      	bne.n	8010394 <_dtoa_r+0x4c4>
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d1d3      	bne.n	801024a <_dtoa_r+0x37a>
 80102a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	f000 8082 	beq.w	80103ae <_dtoa_r+0x4de>
 80102aa:	4b91      	ldr	r3, [pc, #580]	; (80104f0 <_dtoa_r+0x620>)
 80102ac:	2200      	movs	r2, #0
 80102ae:	4650      	mov	r0, sl
 80102b0:	4659      	mov	r1, fp
 80102b2:	f7f0 fc1b 	bl	8000aec <__aeabi_dcmplt>
 80102b6:	2800      	cmp	r0, #0
 80102b8:	d079      	beq.n	80103ae <_dtoa_r+0x4de>
 80102ba:	9b03      	ldr	r3, [sp, #12]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d076      	beq.n	80103ae <_dtoa_r+0x4de>
 80102c0:	9b02      	ldr	r3, [sp, #8]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	dd36      	ble.n	8010334 <_dtoa_r+0x464>
 80102c6:	9b00      	ldr	r3, [sp, #0]
 80102c8:	4650      	mov	r0, sl
 80102ca:	4659      	mov	r1, fp
 80102cc:	1e5f      	subs	r7, r3, #1
 80102ce:	2200      	movs	r2, #0
 80102d0:	4b88      	ldr	r3, [pc, #544]	; (80104f4 <_dtoa_r+0x624>)
 80102d2:	f7f0 f999 	bl	8000608 <__aeabi_dmul>
 80102d6:	9e02      	ldr	r6, [sp, #8]
 80102d8:	4682      	mov	sl, r0
 80102da:	468b      	mov	fp, r1
 80102dc:	3501      	adds	r5, #1
 80102de:	4628      	mov	r0, r5
 80102e0:	f7f0 f928 	bl	8000534 <__aeabi_i2d>
 80102e4:	4652      	mov	r2, sl
 80102e6:	465b      	mov	r3, fp
 80102e8:	f7f0 f98e 	bl	8000608 <__aeabi_dmul>
 80102ec:	4b82      	ldr	r3, [pc, #520]	; (80104f8 <_dtoa_r+0x628>)
 80102ee:	2200      	movs	r2, #0
 80102f0:	f7ef ffd4 	bl	800029c <__adddf3>
 80102f4:	46d0      	mov	r8, sl
 80102f6:	46d9      	mov	r9, fp
 80102f8:	4682      	mov	sl, r0
 80102fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80102fe:	2e00      	cmp	r6, #0
 8010300:	d158      	bne.n	80103b4 <_dtoa_r+0x4e4>
 8010302:	4b7e      	ldr	r3, [pc, #504]	; (80104fc <_dtoa_r+0x62c>)
 8010304:	2200      	movs	r2, #0
 8010306:	4640      	mov	r0, r8
 8010308:	4649      	mov	r1, r9
 801030a:	f7ef ffc5 	bl	8000298 <__aeabi_dsub>
 801030e:	4652      	mov	r2, sl
 8010310:	465b      	mov	r3, fp
 8010312:	4680      	mov	r8, r0
 8010314:	4689      	mov	r9, r1
 8010316:	f7f0 fc07 	bl	8000b28 <__aeabi_dcmpgt>
 801031a:	2800      	cmp	r0, #0
 801031c:	f040 8295 	bne.w	801084a <_dtoa_r+0x97a>
 8010320:	4652      	mov	r2, sl
 8010322:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010326:	4640      	mov	r0, r8
 8010328:	4649      	mov	r1, r9
 801032a:	f7f0 fbdf 	bl	8000aec <__aeabi_dcmplt>
 801032e:	2800      	cmp	r0, #0
 8010330:	f040 8289 	bne.w	8010846 <_dtoa_r+0x976>
 8010334:	ec5b ab19 	vmov	sl, fp, d9
 8010338:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801033a:	2b00      	cmp	r3, #0
 801033c:	f2c0 8148 	blt.w	80105d0 <_dtoa_r+0x700>
 8010340:	9a00      	ldr	r2, [sp, #0]
 8010342:	2a0e      	cmp	r2, #14
 8010344:	f300 8144 	bgt.w	80105d0 <_dtoa_r+0x700>
 8010348:	4b67      	ldr	r3, [pc, #412]	; (80104e8 <_dtoa_r+0x618>)
 801034a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801034e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010354:	2b00      	cmp	r3, #0
 8010356:	f280 80d5 	bge.w	8010504 <_dtoa_r+0x634>
 801035a:	9b03      	ldr	r3, [sp, #12]
 801035c:	2b00      	cmp	r3, #0
 801035e:	f300 80d1 	bgt.w	8010504 <_dtoa_r+0x634>
 8010362:	f040 826f 	bne.w	8010844 <_dtoa_r+0x974>
 8010366:	4b65      	ldr	r3, [pc, #404]	; (80104fc <_dtoa_r+0x62c>)
 8010368:	2200      	movs	r2, #0
 801036a:	4640      	mov	r0, r8
 801036c:	4649      	mov	r1, r9
 801036e:	f7f0 f94b 	bl	8000608 <__aeabi_dmul>
 8010372:	4652      	mov	r2, sl
 8010374:	465b      	mov	r3, fp
 8010376:	f7f0 fbcd 	bl	8000b14 <__aeabi_dcmpge>
 801037a:	9e03      	ldr	r6, [sp, #12]
 801037c:	4637      	mov	r7, r6
 801037e:	2800      	cmp	r0, #0
 8010380:	f040 8245 	bne.w	801080e <_dtoa_r+0x93e>
 8010384:	9d01      	ldr	r5, [sp, #4]
 8010386:	2331      	movs	r3, #49	; 0x31
 8010388:	f805 3b01 	strb.w	r3, [r5], #1
 801038c:	9b00      	ldr	r3, [sp, #0]
 801038e:	3301      	adds	r3, #1
 8010390:	9300      	str	r3, [sp, #0]
 8010392:	e240      	b.n	8010816 <_dtoa_r+0x946>
 8010394:	07f2      	lsls	r2, r6, #31
 8010396:	d505      	bpl.n	80103a4 <_dtoa_r+0x4d4>
 8010398:	e9d7 2300 	ldrd	r2, r3, [r7]
 801039c:	f7f0 f934 	bl	8000608 <__aeabi_dmul>
 80103a0:	3501      	adds	r5, #1
 80103a2:	2301      	movs	r3, #1
 80103a4:	1076      	asrs	r6, r6, #1
 80103a6:	3708      	adds	r7, #8
 80103a8:	e777      	b.n	801029a <_dtoa_r+0x3ca>
 80103aa:	2502      	movs	r5, #2
 80103ac:	e779      	b.n	80102a2 <_dtoa_r+0x3d2>
 80103ae:	9f00      	ldr	r7, [sp, #0]
 80103b0:	9e03      	ldr	r6, [sp, #12]
 80103b2:	e794      	b.n	80102de <_dtoa_r+0x40e>
 80103b4:	9901      	ldr	r1, [sp, #4]
 80103b6:	4b4c      	ldr	r3, [pc, #304]	; (80104e8 <_dtoa_r+0x618>)
 80103b8:	4431      	add	r1, r6
 80103ba:	910d      	str	r1, [sp, #52]	; 0x34
 80103bc:	9908      	ldr	r1, [sp, #32]
 80103be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80103c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80103c6:	2900      	cmp	r1, #0
 80103c8:	d043      	beq.n	8010452 <_dtoa_r+0x582>
 80103ca:	494d      	ldr	r1, [pc, #308]	; (8010500 <_dtoa_r+0x630>)
 80103cc:	2000      	movs	r0, #0
 80103ce:	f7f0 fa45 	bl	800085c <__aeabi_ddiv>
 80103d2:	4652      	mov	r2, sl
 80103d4:	465b      	mov	r3, fp
 80103d6:	f7ef ff5f 	bl	8000298 <__aeabi_dsub>
 80103da:	9d01      	ldr	r5, [sp, #4]
 80103dc:	4682      	mov	sl, r0
 80103de:	468b      	mov	fp, r1
 80103e0:	4649      	mov	r1, r9
 80103e2:	4640      	mov	r0, r8
 80103e4:	f7f0 fbc0 	bl	8000b68 <__aeabi_d2iz>
 80103e8:	4606      	mov	r6, r0
 80103ea:	f7f0 f8a3 	bl	8000534 <__aeabi_i2d>
 80103ee:	4602      	mov	r2, r0
 80103f0:	460b      	mov	r3, r1
 80103f2:	4640      	mov	r0, r8
 80103f4:	4649      	mov	r1, r9
 80103f6:	f7ef ff4f 	bl	8000298 <__aeabi_dsub>
 80103fa:	3630      	adds	r6, #48	; 0x30
 80103fc:	f805 6b01 	strb.w	r6, [r5], #1
 8010400:	4652      	mov	r2, sl
 8010402:	465b      	mov	r3, fp
 8010404:	4680      	mov	r8, r0
 8010406:	4689      	mov	r9, r1
 8010408:	f7f0 fb70 	bl	8000aec <__aeabi_dcmplt>
 801040c:	2800      	cmp	r0, #0
 801040e:	d163      	bne.n	80104d8 <_dtoa_r+0x608>
 8010410:	4642      	mov	r2, r8
 8010412:	464b      	mov	r3, r9
 8010414:	4936      	ldr	r1, [pc, #216]	; (80104f0 <_dtoa_r+0x620>)
 8010416:	2000      	movs	r0, #0
 8010418:	f7ef ff3e 	bl	8000298 <__aeabi_dsub>
 801041c:	4652      	mov	r2, sl
 801041e:	465b      	mov	r3, fp
 8010420:	f7f0 fb64 	bl	8000aec <__aeabi_dcmplt>
 8010424:	2800      	cmp	r0, #0
 8010426:	f040 80b5 	bne.w	8010594 <_dtoa_r+0x6c4>
 801042a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801042c:	429d      	cmp	r5, r3
 801042e:	d081      	beq.n	8010334 <_dtoa_r+0x464>
 8010430:	4b30      	ldr	r3, [pc, #192]	; (80104f4 <_dtoa_r+0x624>)
 8010432:	2200      	movs	r2, #0
 8010434:	4650      	mov	r0, sl
 8010436:	4659      	mov	r1, fp
 8010438:	f7f0 f8e6 	bl	8000608 <__aeabi_dmul>
 801043c:	4b2d      	ldr	r3, [pc, #180]	; (80104f4 <_dtoa_r+0x624>)
 801043e:	4682      	mov	sl, r0
 8010440:	468b      	mov	fp, r1
 8010442:	4640      	mov	r0, r8
 8010444:	4649      	mov	r1, r9
 8010446:	2200      	movs	r2, #0
 8010448:	f7f0 f8de 	bl	8000608 <__aeabi_dmul>
 801044c:	4680      	mov	r8, r0
 801044e:	4689      	mov	r9, r1
 8010450:	e7c6      	b.n	80103e0 <_dtoa_r+0x510>
 8010452:	4650      	mov	r0, sl
 8010454:	4659      	mov	r1, fp
 8010456:	f7f0 f8d7 	bl	8000608 <__aeabi_dmul>
 801045a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801045c:	9d01      	ldr	r5, [sp, #4]
 801045e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010460:	4682      	mov	sl, r0
 8010462:	468b      	mov	fp, r1
 8010464:	4649      	mov	r1, r9
 8010466:	4640      	mov	r0, r8
 8010468:	f7f0 fb7e 	bl	8000b68 <__aeabi_d2iz>
 801046c:	4606      	mov	r6, r0
 801046e:	f7f0 f861 	bl	8000534 <__aeabi_i2d>
 8010472:	3630      	adds	r6, #48	; 0x30
 8010474:	4602      	mov	r2, r0
 8010476:	460b      	mov	r3, r1
 8010478:	4640      	mov	r0, r8
 801047a:	4649      	mov	r1, r9
 801047c:	f7ef ff0c 	bl	8000298 <__aeabi_dsub>
 8010480:	f805 6b01 	strb.w	r6, [r5], #1
 8010484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010486:	429d      	cmp	r5, r3
 8010488:	4680      	mov	r8, r0
 801048a:	4689      	mov	r9, r1
 801048c:	f04f 0200 	mov.w	r2, #0
 8010490:	d124      	bne.n	80104dc <_dtoa_r+0x60c>
 8010492:	4b1b      	ldr	r3, [pc, #108]	; (8010500 <_dtoa_r+0x630>)
 8010494:	4650      	mov	r0, sl
 8010496:	4659      	mov	r1, fp
 8010498:	f7ef ff00 	bl	800029c <__adddf3>
 801049c:	4602      	mov	r2, r0
 801049e:	460b      	mov	r3, r1
 80104a0:	4640      	mov	r0, r8
 80104a2:	4649      	mov	r1, r9
 80104a4:	f7f0 fb40 	bl	8000b28 <__aeabi_dcmpgt>
 80104a8:	2800      	cmp	r0, #0
 80104aa:	d173      	bne.n	8010594 <_dtoa_r+0x6c4>
 80104ac:	4652      	mov	r2, sl
 80104ae:	465b      	mov	r3, fp
 80104b0:	4913      	ldr	r1, [pc, #76]	; (8010500 <_dtoa_r+0x630>)
 80104b2:	2000      	movs	r0, #0
 80104b4:	f7ef fef0 	bl	8000298 <__aeabi_dsub>
 80104b8:	4602      	mov	r2, r0
 80104ba:	460b      	mov	r3, r1
 80104bc:	4640      	mov	r0, r8
 80104be:	4649      	mov	r1, r9
 80104c0:	f7f0 fb14 	bl	8000aec <__aeabi_dcmplt>
 80104c4:	2800      	cmp	r0, #0
 80104c6:	f43f af35 	beq.w	8010334 <_dtoa_r+0x464>
 80104ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80104cc:	1e6b      	subs	r3, r5, #1
 80104ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80104d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80104d4:	2b30      	cmp	r3, #48	; 0x30
 80104d6:	d0f8      	beq.n	80104ca <_dtoa_r+0x5fa>
 80104d8:	9700      	str	r7, [sp, #0]
 80104da:	e049      	b.n	8010570 <_dtoa_r+0x6a0>
 80104dc:	4b05      	ldr	r3, [pc, #20]	; (80104f4 <_dtoa_r+0x624>)
 80104de:	f7f0 f893 	bl	8000608 <__aeabi_dmul>
 80104e2:	4680      	mov	r8, r0
 80104e4:	4689      	mov	r9, r1
 80104e6:	e7bd      	b.n	8010464 <_dtoa_r+0x594>
 80104e8:	08012160 	.word	0x08012160
 80104ec:	08012138 	.word	0x08012138
 80104f0:	3ff00000 	.word	0x3ff00000
 80104f4:	40240000 	.word	0x40240000
 80104f8:	401c0000 	.word	0x401c0000
 80104fc:	40140000 	.word	0x40140000
 8010500:	3fe00000 	.word	0x3fe00000
 8010504:	9d01      	ldr	r5, [sp, #4]
 8010506:	4656      	mov	r6, sl
 8010508:	465f      	mov	r7, fp
 801050a:	4642      	mov	r2, r8
 801050c:	464b      	mov	r3, r9
 801050e:	4630      	mov	r0, r6
 8010510:	4639      	mov	r1, r7
 8010512:	f7f0 f9a3 	bl	800085c <__aeabi_ddiv>
 8010516:	f7f0 fb27 	bl	8000b68 <__aeabi_d2iz>
 801051a:	4682      	mov	sl, r0
 801051c:	f7f0 f80a 	bl	8000534 <__aeabi_i2d>
 8010520:	4642      	mov	r2, r8
 8010522:	464b      	mov	r3, r9
 8010524:	f7f0 f870 	bl	8000608 <__aeabi_dmul>
 8010528:	4602      	mov	r2, r0
 801052a:	460b      	mov	r3, r1
 801052c:	4630      	mov	r0, r6
 801052e:	4639      	mov	r1, r7
 8010530:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010534:	f7ef feb0 	bl	8000298 <__aeabi_dsub>
 8010538:	f805 6b01 	strb.w	r6, [r5], #1
 801053c:	9e01      	ldr	r6, [sp, #4]
 801053e:	9f03      	ldr	r7, [sp, #12]
 8010540:	1bae      	subs	r6, r5, r6
 8010542:	42b7      	cmp	r7, r6
 8010544:	4602      	mov	r2, r0
 8010546:	460b      	mov	r3, r1
 8010548:	d135      	bne.n	80105b6 <_dtoa_r+0x6e6>
 801054a:	f7ef fea7 	bl	800029c <__adddf3>
 801054e:	4642      	mov	r2, r8
 8010550:	464b      	mov	r3, r9
 8010552:	4606      	mov	r6, r0
 8010554:	460f      	mov	r7, r1
 8010556:	f7f0 fae7 	bl	8000b28 <__aeabi_dcmpgt>
 801055a:	b9d0      	cbnz	r0, 8010592 <_dtoa_r+0x6c2>
 801055c:	4642      	mov	r2, r8
 801055e:	464b      	mov	r3, r9
 8010560:	4630      	mov	r0, r6
 8010562:	4639      	mov	r1, r7
 8010564:	f7f0 fab8 	bl	8000ad8 <__aeabi_dcmpeq>
 8010568:	b110      	cbz	r0, 8010570 <_dtoa_r+0x6a0>
 801056a:	f01a 0f01 	tst.w	sl, #1
 801056e:	d110      	bne.n	8010592 <_dtoa_r+0x6c2>
 8010570:	4620      	mov	r0, r4
 8010572:	ee18 1a10 	vmov	r1, s16
 8010576:	f000 fae9 	bl	8010b4c <_Bfree>
 801057a:	2300      	movs	r3, #0
 801057c:	9800      	ldr	r0, [sp, #0]
 801057e:	702b      	strb	r3, [r5, #0]
 8010580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010582:	3001      	adds	r0, #1
 8010584:	6018      	str	r0, [r3, #0]
 8010586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010588:	2b00      	cmp	r3, #0
 801058a:	f43f acf1 	beq.w	800ff70 <_dtoa_r+0xa0>
 801058e:	601d      	str	r5, [r3, #0]
 8010590:	e4ee      	b.n	800ff70 <_dtoa_r+0xa0>
 8010592:	9f00      	ldr	r7, [sp, #0]
 8010594:	462b      	mov	r3, r5
 8010596:	461d      	mov	r5, r3
 8010598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801059c:	2a39      	cmp	r2, #57	; 0x39
 801059e:	d106      	bne.n	80105ae <_dtoa_r+0x6de>
 80105a0:	9a01      	ldr	r2, [sp, #4]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d1f7      	bne.n	8010596 <_dtoa_r+0x6c6>
 80105a6:	9901      	ldr	r1, [sp, #4]
 80105a8:	2230      	movs	r2, #48	; 0x30
 80105aa:	3701      	adds	r7, #1
 80105ac:	700a      	strb	r2, [r1, #0]
 80105ae:	781a      	ldrb	r2, [r3, #0]
 80105b0:	3201      	adds	r2, #1
 80105b2:	701a      	strb	r2, [r3, #0]
 80105b4:	e790      	b.n	80104d8 <_dtoa_r+0x608>
 80105b6:	4ba6      	ldr	r3, [pc, #664]	; (8010850 <_dtoa_r+0x980>)
 80105b8:	2200      	movs	r2, #0
 80105ba:	f7f0 f825 	bl	8000608 <__aeabi_dmul>
 80105be:	2200      	movs	r2, #0
 80105c0:	2300      	movs	r3, #0
 80105c2:	4606      	mov	r6, r0
 80105c4:	460f      	mov	r7, r1
 80105c6:	f7f0 fa87 	bl	8000ad8 <__aeabi_dcmpeq>
 80105ca:	2800      	cmp	r0, #0
 80105cc:	d09d      	beq.n	801050a <_dtoa_r+0x63a>
 80105ce:	e7cf      	b.n	8010570 <_dtoa_r+0x6a0>
 80105d0:	9a08      	ldr	r2, [sp, #32]
 80105d2:	2a00      	cmp	r2, #0
 80105d4:	f000 80d7 	beq.w	8010786 <_dtoa_r+0x8b6>
 80105d8:	9a06      	ldr	r2, [sp, #24]
 80105da:	2a01      	cmp	r2, #1
 80105dc:	f300 80ba 	bgt.w	8010754 <_dtoa_r+0x884>
 80105e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80105e2:	2a00      	cmp	r2, #0
 80105e4:	f000 80b2 	beq.w	801074c <_dtoa_r+0x87c>
 80105e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80105ec:	9e07      	ldr	r6, [sp, #28]
 80105ee:	9d04      	ldr	r5, [sp, #16]
 80105f0:	9a04      	ldr	r2, [sp, #16]
 80105f2:	441a      	add	r2, r3
 80105f4:	9204      	str	r2, [sp, #16]
 80105f6:	9a05      	ldr	r2, [sp, #20]
 80105f8:	2101      	movs	r1, #1
 80105fa:	441a      	add	r2, r3
 80105fc:	4620      	mov	r0, r4
 80105fe:	9205      	str	r2, [sp, #20]
 8010600:	f000 fb5c 	bl	8010cbc <__i2b>
 8010604:	4607      	mov	r7, r0
 8010606:	2d00      	cmp	r5, #0
 8010608:	dd0c      	ble.n	8010624 <_dtoa_r+0x754>
 801060a:	9b05      	ldr	r3, [sp, #20]
 801060c:	2b00      	cmp	r3, #0
 801060e:	dd09      	ble.n	8010624 <_dtoa_r+0x754>
 8010610:	42ab      	cmp	r3, r5
 8010612:	9a04      	ldr	r2, [sp, #16]
 8010614:	bfa8      	it	ge
 8010616:	462b      	movge	r3, r5
 8010618:	1ad2      	subs	r2, r2, r3
 801061a:	9204      	str	r2, [sp, #16]
 801061c:	9a05      	ldr	r2, [sp, #20]
 801061e:	1aed      	subs	r5, r5, r3
 8010620:	1ad3      	subs	r3, r2, r3
 8010622:	9305      	str	r3, [sp, #20]
 8010624:	9b07      	ldr	r3, [sp, #28]
 8010626:	b31b      	cbz	r3, 8010670 <_dtoa_r+0x7a0>
 8010628:	9b08      	ldr	r3, [sp, #32]
 801062a:	2b00      	cmp	r3, #0
 801062c:	f000 80af 	beq.w	801078e <_dtoa_r+0x8be>
 8010630:	2e00      	cmp	r6, #0
 8010632:	dd13      	ble.n	801065c <_dtoa_r+0x78c>
 8010634:	4639      	mov	r1, r7
 8010636:	4632      	mov	r2, r6
 8010638:	4620      	mov	r0, r4
 801063a:	f000 fbff 	bl	8010e3c <__pow5mult>
 801063e:	ee18 2a10 	vmov	r2, s16
 8010642:	4601      	mov	r1, r0
 8010644:	4607      	mov	r7, r0
 8010646:	4620      	mov	r0, r4
 8010648:	f000 fb4e 	bl	8010ce8 <__multiply>
 801064c:	ee18 1a10 	vmov	r1, s16
 8010650:	4680      	mov	r8, r0
 8010652:	4620      	mov	r0, r4
 8010654:	f000 fa7a 	bl	8010b4c <_Bfree>
 8010658:	ee08 8a10 	vmov	s16, r8
 801065c:	9b07      	ldr	r3, [sp, #28]
 801065e:	1b9a      	subs	r2, r3, r6
 8010660:	d006      	beq.n	8010670 <_dtoa_r+0x7a0>
 8010662:	ee18 1a10 	vmov	r1, s16
 8010666:	4620      	mov	r0, r4
 8010668:	f000 fbe8 	bl	8010e3c <__pow5mult>
 801066c:	ee08 0a10 	vmov	s16, r0
 8010670:	2101      	movs	r1, #1
 8010672:	4620      	mov	r0, r4
 8010674:	f000 fb22 	bl	8010cbc <__i2b>
 8010678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801067a:	2b00      	cmp	r3, #0
 801067c:	4606      	mov	r6, r0
 801067e:	f340 8088 	ble.w	8010792 <_dtoa_r+0x8c2>
 8010682:	461a      	mov	r2, r3
 8010684:	4601      	mov	r1, r0
 8010686:	4620      	mov	r0, r4
 8010688:	f000 fbd8 	bl	8010e3c <__pow5mult>
 801068c:	9b06      	ldr	r3, [sp, #24]
 801068e:	2b01      	cmp	r3, #1
 8010690:	4606      	mov	r6, r0
 8010692:	f340 8081 	ble.w	8010798 <_dtoa_r+0x8c8>
 8010696:	f04f 0800 	mov.w	r8, #0
 801069a:	6933      	ldr	r3, [r6, #16]
 801069c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80106a0:	6918      	ldr	r0, [r3, #16]
 80106a2:	f000 fabb 	bl	8010c1c <__hi0bits>
 80106a6:	f1c0 0020 	rsb	r0, r0, #32
 80106aa:	9b05      	ldr	r3, [sp, #20]
 80106ac:	4418      	add	r0, r3
 80106ae:	f010 001f 	ands.w	r0, r0, #31
 80106b2:	f000 8092 	beq.w	80107da <_dtoa_r+0x90a>
 80106b6:	f1c0 0320 	rsb	r3, r0, #32
 80106ba:	2b04      	cmp	r3, #4
 80106bc:	f340 808a 	ble.w	80107d4 <_dtoa_r+0x904>
 80106c0:	f1c0 001c 	rsb	r0, r0, #28
 80106c4:	9b04      	ldr	r3, [sp, #16]
 80106c6:	4403      	add	r3, r0
 80106c8:	9304      	str	r3, [sp, #16]
 80106ca:	9b05      	ldr	r3, [sp, #20]
 80106cc:	4403      	add	r3, r0
 80106ce:	4405      	add	r5, r0
 80106d0:	9305      	str	r3, [sp, #20]
 80106d2:	9b04      	ldr	r3, [sp, #16]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	dd07      	ble.n	80106e8 <_dtoa_r+0x818>
 80106d8:	ee18 1a10 	vmov	r1, s16
 80106dc:	461a      	mov	r2, r3
 80106de:	4620      	mov	r0, r4
 80106e0:	f000 fc06 	bl	8010ef0 <__lshift>
 80106e4:	ee08 0a10 	vmov	s16, r0
 80106e8:	9b05      	ldr	r3, [sp, #20]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	dd05      	ble.n	80106fa <_dtoa_r+0x82a>
 80106ee:	4631      	mov	r1, r6
 80106f0:	461a      	mov	r2, r3
 80106f2:	4620      	mov	r0, r4
 80106f4:	f000 fbfc 	bl	8010ef0 <__lshift>
 80106f8:	4606      	mov	r6, r0
 80106fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d06e      	beq.n	80107de <_dtoa_r+0x90e>
 8010700:	ee18 0a10 	vmov	r0, s16
 8010704:	4631      	mov	r1, r6
 8010706:	f000 fc63 	bl	8010fd0 <__mcmp>
 801070a:	2800      	cmp	r0, #0
 801070c:	da67      	bge.n	80107de <_dtoa_r+0x90e>
 801070e:	9b00      	ldr	r3, [sp, #0]
 8010710:	3b01      	subs	r3, #1
 8010712:	ee18 1a10 	vmov	r1, s16
 8010716:	9300      	str	r3, [sp, #0]
 8010718:	220a      	movs	r2, #10
 801071a:	2300      	movs	r3, #0
 801071c:	4620      	mov	r0, r4
 801071e:	f000 fa37 	bl	8010b90 <__multadd>
 8010722:	9b08      	ldr	r3, [sp, #32]
 8010724:	ee08 0a10 	vmov	s16, r0
 8010728:	2b00      	cmp	r3, #0
 801072a:	f000 81b1 	beq.w	8010a90 <_dtoa_r+0xbc0>
 801072e:	2300      	movs	r3, #0
 8010730:	4639      	mov	r1, r7
 8010732:	220a      	movs	r2, #10
 8010734:	4620      	mov	r0, r4
 8010736:	f000 fa2b 	bl	8010b90 <__multadd>
 801073a:	9b02      	ldr	r3, [sp, #8]
 801073c:	2b00      	cmp	r3, #0
 801073e:	4607      	mov	r7, r0
 8010740:	f300 808e 	bgt.w	8010860 <_dtoa_r+0x990>
 8010744:	9b06      	ldr	r3, [sp, #24]
 8010746:	2b02      	cmp	r3, #2
 8010748:	dc51      	bgt.n	80107ee <_dtoa_r+0x91e>
 801074a:	e089      	b.n	8010860 <_dtoa_r+0x990>
 801074c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801074e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010752:	e74b      	b.n	80105ec <_dtoa_r+0x71c>
 8010754:	9b03      	ldr	r3, [sp, #12]
 8010756:	1e5e      	subs	r6, r3, #1
 8010758:	9b07      	ldr	r3, [sp, #28]
 801075a:	42b3      	cmp	r3, r6
 801075c:	bfbf      	itttt	lt
 801075e:	9b07      	ldrlt	r3, [sp, #28]
 8010760:	9607      	strlt	r6, [sp, #28]
 8010762:	1af2      	sublt	r2, r6, r3
 8010764:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010766:	bfb6      	itet	lt
 8010768:	189b      	addlt	r3, r3, r2
 801076a:	1b9e      	subge	r6, r3, r6
 801076c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801076e:	9b03      	ldr	r3, [sp, #12]
 8010770:	bfb8      	it	lt
 8010772:	2600      	movlt	r6, #0
 8010774:	2b00      	cmp	r3, #0
 8010776:	bfb7      	itett	lt
 8010778:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801077c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010780:	1a9d      	sublt	r5, r3, r2
 8010782:	2300      	movlt	r3, #0
 8010784:	e734      	b.n	80105f0 <_dtoa_r+0x720>
 8010786:	9e07      	ldr	r6, [sp, #28]
 8010788:	9d04      	ldr	r5, [sp, #16]
 801078a:	9f08      	ldr	r7, [sp, #32]
 801078c:	e73b      	b.n	8010606 <_dtoa_r+0x736>
 801078e:	9a07      	ldr	r2, [sp, #28]
 8010790:	e767      	b.n	8010662 <_dtoa_r+0x792>
 8010792:	9b06      	ldr	r3, [sp, #24]
 8010794:	2b01      	cmp	r3, #1
 8010796:	dc18      	bgt.n	80107ca <_dtoa_r+0x8fa>
 8010798:	f1ba 0f00 	cmp.w	sl, #0
 801079c:	d115      	bne.n	80107ca <_dtoa_r+0x8fa>
 801079e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80107a2:	b993      	cbnz	r3, 80107ca <_dtoa_r+0x8fa>
 80107a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80107a8:	0d1b      	lsrs	r3, r3, #20
 80107aa:	051b      	lsls	r3, r3, #20
 80107ac:	b183      	cbz	r3, 80107d0 <_dtoa_r+0x900>
 80107ae:	9b04      	ldr	r3, [sp, #16]
 80107b0:	3301      	adds	r3, #1
 80107b2:	9304      	str	r3, [sp, #16]
 80107b4:	9b05      	ldr	r3, [sp, #20]
 80107b6:	3301      	adds	r3, #1
 80107b8:	9305      	str	r3, [sp, #20]
 80107ba:	f04f 0801 	mov.w	r8, #1
 80107be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	f47f af6a 	bne.w	801069a <_dtoa_r+0x7ca>
 80107c6:	2001      	movs	r0, #1
 80107c8:	e76f      	b.n	80106aa <_dtoa_r+0x7da>
 80107ca:	f04f 0800 	mov.w	r8, #0
 80107ce:	e7f6      	b.n	80107be <_dtoa_r+0x8ee>
 80107d0:	4698      	mov	r8, r3
 80107d2:	e7f4      	b.n	80107be <_dtoa_r+0x8ee>
 80107d4:	f43f af7d 	beq.w	80106d2 <_dtoa_r+0x802>
 80107d8:	4618      	mov	r0, r3
 80107da:	301c      	adds	r0, #28
 80107dc:	e772      	b.n	80106c4 <_dtoa_r+0x7f4>
 80107de:	9b03      	ldr	r3, [sp, #12]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	dc37      	bgt.n	8010854 <_dtoa_r+0x984>
 80107e4:	9b06      	ldr	r3, [sp, #24]
 80107e6:	2b02      	cmp	r3, #2
 80107e8:	dd34      	ble.n	8010854 <_dtoa_r+0x984>
 80107ea:	9b03      	ldr	r3, [sp, #12]
 80107ec:	9302      	str	r3, [sp, #8]
 80107ee:	9b02      	ldr	r3, [sp, #8]
 80107f0:	b96b      	cbnz	r3, 801080e <_dtoa_r+0x93e>
 80107f2:	4631      	mov	r1, r6
 80107f4:	2205      	movs	r2, #5
 80107f6:	4620      	mov	r0, r4
 80107f8:	f000 f9ca 	bl	8010b90 <__multadd>
 80107fc:	4601      	mov	r1, r0
 80107fe:	4606      	mov	r6, r0
 8010800:	ee18 0a10 	vmov	r0, s16
 8010804:	f000 fbe4 	bl	8010fd0 <__mcmp>
 8010808:	2800      	cmp	r0, #0
 801080a:	f73f adbb 	bgt.w	8010384 <_dtoa_r+0x4b4>
 801080e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010810:	9d01      	ldr	r5, [sp, #4]
 8010812:	43db      	mvns	r3, r3
 8010814:	9300      	str	r3, [sp, #0]
 8010816:	f04f 0800 	mov.w	r8, #0
 801081a:	4631      	mov	r1, r6
 801081c:	4620      	mov	r0, r4
 801081e:	f000 f995 	bl	8010b4c <_Bfree>
 8010822:	2f00      	cmp	r7, #0
 8010824:	f43f aea4 	beq.w	8010570 <_dtoa_r+0x6a0>
 8010828:	f1b8 0f00 	cmp.w	r8, #0
 801082c:	d005      	beq.n	801083a <_dtoa_r+0x96a>
 801082e:	45b8      	cmp	r8, r7
 8010830:	d003      	beq.n	801083a <_dtoa_r+0x96a>
 8010832:	4641      	mov	r1, r8
 8010834:	4620      	mov	r0, r4
 8010836:	f000 f989 	bl	8010b4c <_Bfree>
 801083a:	4639      	mov	r1, r7
 801083c:	4620      	mov	r0, r4
 801083e:	f000 f985 	bl	8010b4c <_Bfree>
 8010842:	e695      	b.n	8010570 <_dtoa_r+0x6a0>
 8010844:	2600      	movs	r6, #0
 8010846:	4637      	mov	r7, r6
 8010848:	e7e1      	b.n	801080e <_dtoa_r+0x93e>
 801084a:	9700      	str	r7, [sp, #0]
 801084c:	4637      	mov	r7, r6
 801084e:	e599      	b.n	8010384 <_dtoa_r+0x4b4>
 8010850:	40240000 	.word	0x40240000
 8010854:	9b08      	ldr	r3, [sp, #32]
 8010856:	2b00      	cmp	r3, #0
 8010858:	f000 80ca 	beq.w	80109f0 <_dtoa_r+0xb20>
 801085c:	9b03      	ldr	r3, [sp, #12]
 801085e:	9302      	str	r3, [sp, #8]
 8010860:	2d00      	cmp	r5, #0
 8010862:	dd05      	ble.n	8010870 <_dtoa_r+0x9a0>
 8010864:	4639      	mov	r1, r7
 8010866:	462a      	mov	r2, r5
 8010868:	4620      	mov	r0, r4
 801086a:	f000 fb41 	bl	8010ef0 <__lshift>
 801086e:	4607      	mov	r7, r0
 8010870:	f1b8 0f00 	cmp.w	r8, #0
 8010874:	d05b      	beq.n	801092e <_dtoa_r+0xa5e>
 8010876:	6879      	ldr	r1, [r7, #4]
 8010878:	4620      	mov	r0, r4
 801087a:	f000 f927 	bl	8010acc <_Balloc>
 801087e:	4605      	mov	r5, r0
 8010880:	b928      	cbnz	r0, 801088e <_dtoa_r+0x9be>
 8010882:	4b87      	ldr	r3, [pc, #540]	; (8010aa0 <_dtoa_r+0xbd0>)
 8010884:	4602      	mov	r2, r0
 8010886:	f240 21ea 	movw	r1, #746	; 0x2ea
 801088a:	f7ff bb3b 	b.w	800ff04 <_dtoa_r+0x34>
 801088e:	693a      	ldr	r2, [r7, #16]
 8010890:	3202      	adds	r2, #2
 8010892:	0092      	lsls	r2, r2, #2
 8010894:	f107 010c 	add.w	r1, r7, #12
 8010898:	300c      	adds	r0, #12
 801089a:	f7fe fcd1 	bl	800f240 <memcpy>
 801089e:	2201      	movs	r2, #1
 80108a0:	4629      	mov	r1, r5
 80108a2:	4620      	mov	r0, r4
 80108a4:	f000 fb24 	bl	8010ef0 <__lshift>
 80108a8:	9b01      	ldr	r3, [sp, #4]
 80108aa:	f103 0901 	add.w	r9, r3, #1
 80108ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80108b2:	4413      	add	r3, r2
 80108b4:	9305      	str	r3, [sp, #20]
 80108b6:	f00a 0301 	and.w	r3, sl, #1
 80108ba:	46b8      	mov	r8, r7
 80108bc:	9304      	str	r3, [sp, #16]
 80108be:	4607      	mov	r7, r0
 80108c0:	4631      	mov	r1, r6
 80108c2:	ee18 0a10 	vmov	r0, s16
 80108c6:	f7ff fa77 	bl	800fdb8 <quorem>
 80108ca:	4641      	mov	r1, r8
 80108cc:	9002      	str	r0, [sp, #8]
 80108ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80108d2:	ee18 0a10 	vmov	r0, s16
 80108d6:	f000 fb7b 	bl	8010fd0 <__mcmp>
 80108da:	463a      	mov	r2, r7
 80108dc:	9003      	str	r0, [sp, #12]
 80108de:	4631      	mov	r1, r6
 80108e0:	4620      	mov	r0, r4
 80108e2:	f000 fb91 	bl	8011008 <__mdiff>
 80108e6:	68c2      	ldr	r2, [r0, #12]
 80108e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80108ec:	4605      	mov	r5, r0
 80108ee:	bb02      	cbnz	r2, 8010932 <_dtoa_r+0xa62>
 80108f0:	4601      	mov	r1, r0
 80108f2:	ee18 0a10 	vmov	r0, s16
 80108f6:	f000 fb6b 	bl	8010fd0 <__mcmp>
 80108fa:	4602      	mov	r2, r0
 80108fc:	4629      	mov	r1, r5
 80108fe:	4620      	mov	r0, r4
 8010900:	9207      	str	r2, [sp, #28]
 8010902:	f000 f923 	bl	8010b4c <_Bfree>
 8010906:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801090a:	ea43 0102 	orr.w	r1, r3, r2
 801090e:	9b04      	ldr	r3, [sp, #16]
 8010910:	430b      	orrs	r3, r1
 8010912:	464d      	mov	r5, r9
 8010914:	d10f      	bne.n	8010936 <_dtoa_r+0xa66>
 8010916:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801091a:	d02a      	beq.n	8010972 <_dtoa_r+0xaa2>
 801091c:	9b03      	ldr	r3, [sp, #12]
 801091e:	2b00      	cmp	r3, #0
 8010920:	dd02      	ble.n	8010928 <_dtoa_r+0xa58>
 8010922:	9b02      	ldr	r3, [sp, #8]
 8010924:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010928:	f88b a000 	strb.w	sl, [fp]
 801092c:	e775      	b.n	801081a <_dtoa_r+0x94a>
 801092e:	4638      	mov	r0, r7
 8010930:	e7ba      	b.n	80108a8 <_dtoa_r+0x9d8>
 8010932:	2201      	movs	r2, #1
 8010934:	e7e2      	b.n	80108fc <_dtoa_r+0xa2c>
 8010936:	9b03      	ldr	r3, [sp, #12]
 8010938:	2b00      	cmp	r3, #0
 801093a:	db04      	blt.n	8010946 <_dtoa_r+0xa76>
 801093c:	9906      	ldr	r1, [sp, #24]
 801093e:	430b      	orrs	r3, r1
 8010940:	9904      	ldr	r1, [sp, #16]
 8010942:	430b      	orrs	r3, r1
 8010944:	d122      	bne.n	801098c <_dtoa_r+0xabc>
 8010946:	2a00      	cmp	r2, #0
 8010948:	ddee      	ble.n	8010928 <_dtoa_r+0xa58>
 801094a:	ee18 1a10 	vmov	r1, s16
 801094e:	2201      	movs	r2, #1
 8010950:	4620      	mov	r0, r4
 8010952:	f000 facd 	bl	8010ef0 <__lshift>
 8010956:	4631      	mov	r1, r6
 8010958:	ee08 0a10 	vmov	s16, r0
 801095c:	f000 fb38 	bl	8010fd0 <__mcmp>
 8010960:	2800      	cmp	r0, #0
 8010962:	dc03      	bgt.n	801096c <_dtoa_r+0xa9c>
 8010964:	d1e0      	bne.n	8010928 <_dtoa_r+0xa58>
 8010966:	f01a 0f01 	tst.w	sl, #1
 801096a:	d0dd      	beq.n	8010928 <_dtoa_r+0xa58>
 801096c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010970:	d1d7      	bne.n	8010922 <_dtoa_r+0xa52>
 8010972:	2339      	movs	r3, #57	; 0x39
 8010974:	f88b 3000 	strb.w	r3, [fp]
 8010978:	462b      	mov	r3, r5
 801097a:	461d      	mov	r5, r3
 801097c:	3b01      	subs	r3, #1
 801097e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010982:	2a39      	cmp	r2, #57	; 0x39
 8010984:	d071      	beq.n	8010a6a <_dtoa_r+0xb9a>
 8010986:	3201      	adds	r2, #1
 8010988:	701a      	strb	r2, [r3, #0]
 801098a:	e746      	b.n	801081a <_dtoa_r+0x94a>
 801098c:	2a00      	cmp	r2, #0
 801098e:	dd07      	ble.n	80109a0 <_dtoa_r+0xad0>
 8010990:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010994:	d0ed      	beq.n	8010972 <_dtoa_r+0xaa2>
 8010996:	f10a 0301 	add.w	r3, sl, #1
 801099a:	f88b 3000 	strb.w	r3, [fp]
 801099e:	e73c      	b.n	801081a <_dtoa_r+0x94a>
 80109a0:	9b05      	ldr	r3, [sp, #20]
 80109a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80109a6:	4599      	cmp	r9, r3
 80109a8:	d047      	beq.n	8010a3a <_dtoa_r+0xb6a>
 80109aa:	ee18 1a10 	vmov	r1, s16
 80109ae:	2300      	movs	r3, #0
 80109b0:	220a      	movs	r2, #10
 80109b2:	4620      	mov	r0, r4
 80109b4:	f000 f8ec 	bl	8010b90 <__multadd>
 80109b8:	45b8      	cmp	r8, r7
 80109ba:	ee08 0a10 	vmov	s16, r0
 80109be:	f04f 0300 	mov.w	r3, #0
 80109c2:	f04f 020a 	mov.w	r2, #10
 80109c6:	4641      	mov	r1, r8
 80109c8:	4620      	mov	r0, r4
 80109ca:	d106      	bne.n	80109da <_dtoa_r+0xb0a>
 80109cc:	f000 f8e0 	bl	8010b90 <__multadd>
 80109d0:	4680      	mov	r8, r0
 80109d2:	4607      	mov	r7, r0
 80109d4:	f109 0901 	add.w	r9, r9, #1
 80109d8:	e772      	b.n	80108c0 <_dtoa_r+0x9f0>
 80109da:	f000 f8d9 	bl	8010b90 <__multadd>
 80109de:	4639      	mov	r1, r7
 80109e0:	4680      	mov	r8, r0
 80109e2:	2300      	movs	r3, #0
 80109e4:	220a      	movs	r2, #10
 80109e6:	4620      	mov	r0, r4
 80109e8:	f000 f8d2 	bl	8010b90 <__multadd>
 80109ec:	4607      	mov	r7, r0
 80109ee:	e7f1      	b.n	80109d4 <_dtoa_r+0xb04>
 80109f0:	9b03      	ldr	r3, [sp, #12]
 80109f2:	9302      	str	r3, [sp, #8]
 80109f4:	9d01      	ldr	r5, [sp, #4]
 80109f6:	ee18 0a10 	vmov	r0, s16
 80109fa:	4631      	mov	r1, r6
 80109fc:	f7ff f9dc 	bl	800fdb8 <quorem>
 8010a00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010a04:	9b01      	ldr	r3, [sp, #4]
 8010a06:	f805 ab01 	strb.w	sl, [r5], #1
 8010a0a:	1aea      	subs	r2, r5, r3
 8010a0c:	9b02      	ldr	r3, [sp, #8]
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	dd09      	ble.n	8010a26 <_dtoa_r+0xb56>
 8010a12:	ee18 1a10 	vmov	r1, s16
 8010a16:	2300      	movs	r3, #0
 8010a18:	220a      	movs	r2, #10
 8010a1a:	4620      	mov	r0, r4
 8010a1c:	f000 f8b8 	bl	8010b90 <__multadd>
 8010a20:	ee08 0a10 	vmov	s16, r0
 8010a24:	e7e7      	b.n	80109f6 <_dtoa_r+0xb26>
 8010a26:	9b02      	ldr	r3, [sp, #8]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	bfc8      	it	gt
 8010a2c:	461d      	movgt	r5, r3
 8010a2e:	9b01      	ldr	r3, [sp, #4]
 8010a30:	bfd8      	it	le
 8010a32:	2501      	movle	r5, #1
 8010a34:	441d      	add	r5, r3
 8010a36:	f04f 0800 	mov.w	r8, #0
 8010a3a:	ee18 1a10 	vmov	r1, s16
 8010a3e:	2201      	movs	r2, #1
 8010a40:	4620      	mov	r0, r4
 8010a42:	f000 fa55 	bl	8010ef0 <__lshift>
 8010a46:	4631      	mov	r1, r6
 8010a48:	ee08 0a10 	vmov	s16, r0
 8010a4c:	f000 fac0 	bl	8010fd0 <__mcmp>
 8010a50:	2800      	cmp	r0, #0
 8010a52:	dc91      	bgt.n	8010978 <_dtoa_r+0xaa8>
 8010a54:	d102      	bne.n	8010a5c <_dtoa_r+0xb8c>
 8010a56:	f01a 0f01 	tst.w	sl, #1
 8010a5a:	d18d      	bne.n	8010978 <_dtoa_r+0xaa8>
 8010a5c:	462b      	mov	r3, r5
 8010a5e:	461d      	mov	r5, r3
 8010a60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a64:	2a30      	cmp	r2, #48	; 0x30
 8010a66:	d0fa      	beq.n	8010a5e <_dtoa_r+0xb8e>
 8010a68:	e6d7      	b.n	801081a <_dtoa_r+0x94a>
 8010a6a:	9a01      	ldr	r2, [sp, #4]
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d184      	bne.n	801097a <_dtoa_r+0xaaa>
 8010a70:	9b00      	ldr	r3, [sp, #0]
 8010a72:	3301      	adds	r3, #1
 8010a74:	9300      	str	r3, [sp, #0]
 8010a76:	2331      	movs	r3, #49	; 0x31
 8010a78:	7013      	strb	r3, [r2, #0]
 8010a7a:	e6ce      	b.n	801081a <_dtoa_r+0x94a>
 8010a7c:	4b09      	ldr	r3, [pc, #36]	; (8010aa4 <_dtoa_r+0xbd4>)
 8010a7e:	f7ff ba95 	b.w	800ffac <_dtoa_r+0xdc>
 8010a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	f47f aa6e 	bne.w	800ff66 <_dtoa_r+0x96>
 8010a8a:	4b07      	ldr	r3, [pc, #28]	; (8010aa8 <_dtoa_r+0xbd8>)
 8010a8c:	f7ff ba8e 	b.w	800ffac <_dtoa_r+0xdc>
 8010a90:	9b02      	ldr	r3, [sp, #8]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	dcae      	bgt.n	80109f4 <_dtoa_r+0xb24>
 8010a96:	9b06      	ldr	r3, [sp, #24]
 8010a98:	2b02      	cmp	r3, #2
 8010a9a:	f73f aea8 	bgt.w	80107ee <_dtoa_r+0x91e>
 8010a9e:	e7a9      	b.n	80109f4 <_dtoa_r+0xb24>
 8010aa0:	080120c7 	.word	0x080120c7
 8010aa4:	08012024 	.word	0x08012024
 8010aa8:	08012048 	.word	0x08012048

08010aac <_localeconv_r>:
 8010aac:	4800      	ldr	r0, [pc, #0]	; (8010ab0 <_localeconv_r+0x4>)
 8010aae:	4770      	bx	lr
 8010ab0:	2000019c 	.word	0x2000019c

08010ab4 <__malloc_lock>:
 8010ab4:	4801      	ldr	r0, [pc, #4]	; (8010abc <__malloc_lock+0x8>)
 8010ab6:	f000 bc04 	b.w	80112c2 <__retarget_lock_acquire_recursive>
 8010aba:	bf00      	nop
 8010abc:	20001704 	.word	0x20001704

08010ac0 <__malloc_unlock>:
 8010ac0:	4801      	ldr	r0, [pc, #4]	; (8010ac8 <__malloc_unlock+0x8>)
 8010ac2:	f000 bbff 	b.w	80112c4 <__retarget_lock_release_recursive>
 8010ac6:	bf00      	nop
 8010ac8:	20001704 	.word	0x20001704

08010acc <_Balloc>:
 8010acc:	b570      	push	{r4, r5, r6, lr}
 8010ace:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	460d      	mov	r5, r1
 8010ad4:	b976      	cbnz	r6, 8010af4 <_Balloc+0x28>
 8010ad6:	2010      	movs	r0, #16
 8010ad8:	f7fe fba2 	bl	800f220 <malloc>
 8010adc:	4602      	mov	r2, r0
 8010ade:	6260      	str	r0, [r4, #36]	; 0x24
 8010ae0:	b920      	cbnz	r0, 8010aec <_Balloc+0x20>
 8010ae2:	4b18      	ldr	r3, [pc, #96]	; (8010b44 <_Balloc+0x78>)
 8010ae4:	4818      	ldr	r0, [pc, #96]	; (8010b48 <_Balloc+0x7c>)
 8010ae6:	2166      	movs	r1, #102	; 0x66
 8010ae8:	f000 fbba 	bl	8011260 <__assert_func>
 8010aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010af0:	6006      	str	r6, [r0, #0]
 8010af2:	60c6      	str	r6, [r0, #12]
 8010af4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010af6:	68f3      	ldr	r3, [r6, #12]
 8010af8:	b183      	cbz	r3, 8010b1c <_Balloc+0x50>
 8010afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010afc:	68db      	ldr	r3, [r3, #12]
 8010afe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010b02:	b9b8      	cbnz	r0, 8010b34 <_Balloc+0x68>
 8010b04:	2101      	movs	r1, #1
 8010b06:	fa01 f605 	lsl.w	r6, r1, r5
 8010b0a:	1d72      	adds	r2, r6, #5
 8010b0c:	0092      	lsls	r2, r2, #2
 8010b0e:	4620      	mov	r0, r4
 8010b10:	f000 fb60 	bl	80111d4 <_calloc_r>
 8010b14:	b160      	cbz	r0, 8010b30 <_Balloc+0x64>
 8010b16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010b1a:	e00e      	b.n	8010b3a <_Balloc+0x6e>
 8010b1c:	2221      	movs	r2, #33	; 0x21
 8010b1e:	2104      	movs	r1, #4
 8010b20:	4620      	mov	r0, r4
 8010b22:	f000 fb57 	bl	80111d4 <_calloc_r>
 8010b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b28:	60f0      	str	r0, [r6, #12]
 8010b2a:	68db      	ldr	r3, [r3, #12]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d1e4      	bne.n	8010afa <_Balloc+0x2e>
 8010b30:	2000      	movs	r0, #0
 8010b32:	bd70      	pop	{r4, r5, r6, pc}
 8010b34:	6802      	ldr	r2, [r0, #0]
 8010b36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010b40:	e7f7      	b.n	8010b32 <_Balloc+0x66>
 8010b42:	bf00      	nop
 8010b44:	08012055 	.word	0x08012055
 8010b48:	080120d8 	.word	0x080120d8

08010b4c <_Bfree>:
 8010b4c:	b570      	push	{r4, r5, r6, lr}
 8010b4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010b50:	4605      	mov	r5, r0
 8010b52:	460c      	mov	r4, r1
 8010b54:	b976      	cbnz	r6, 8010b74 <_Bfree+0x28>
 8010b56:	2010      	movs	r0, #16
 8010b58:	f7fe fb62 	bl	800f220 <malloc>
 8010b5c:	4602      	mov	r2, r0
 8010b5e:	6268      	str	r0, [r5, #36]	; 0x24
 8010b60:	b920      	cbnz	r0, 8010b6c <_Bfree+0x20>
 8010b62:	4b09      	ldr	r3, [pc, #36]	; (8010b88 <_Bfree+0x3c>)
 8010b64:	4809      	ldr	r0, [pc, #36]	; (8010b8c <_Bfree+0x40>)
 8010b66:	218a      	movs	r1, #138	; 0x8a
 8010b68:	f000 fb7a 	bl	8011260 <__assert_func>
 8010b6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b70:	6006      	str	r6, [r0, #0]
 8010b72:	60c6      	str	r6, [r0, #12]
 8010b74:	b13c      	cbz	r4, 8010b86 <_Bfree+0x3a>
 8010b76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010b78:	6862      	ldr	r2, [r4, #4]
 8010b7a:	68db      	ldr	r3, [r3, #12]
 8010b7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b80:	6021      	str	r1, [r4, #0]
 8010b82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010b86:	bd70      	pop	{r4, r5, r6, pc}
 8010b88:	08012055 	.word	0x08012055
 8010b8c:	080120d8 	.word	0x080120d8

08010b90 <__multadd>:
 8010b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b94:	690d      	ldr	r5, [r1, #16]
 8010b96:	4607      	mov	r7, r0
 8010b98:	460c      	mov	r4, r1
 8010b9a:	461e      	mov	r6, r3
 8010b9c:	f101 0c14 	add.w	ip, r1, #20
 8010ba0:	2000      	movs	r0, #0
 8010ba2:	f8dc 3000 	ldr.w	r3, [ip]
 8010ba6:	b299      	uxth	r1, r3
 8010ba8:	fb02 6101 	mla	r1, r2, r1, r6
 8010bac:	0c1e      	lsrs	r6, r3, #16
 8010bae:	0c0b      	lsrs	r3, r1, #16
 8010bb0:	fb02 3306 	mla	r3, r2, r6, r3
 8010bb4:	b289      	uxth	r1, r1
 8010bb6:	3001      	adds	r0, #1
 8010bb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010bbc:	4285      	cmp	r5, r0
 8010bbe:	f84c 1b04 	str.w	r1, [ip], #4
 8010bc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010bc6:	dcec      	bgt.n	8010ba2 <__multadd+0x12>
 8010bc8:	b30e      	cbz	r6, 8010c0e <__multadd+0x7e>
 8010bca:	68a3      	ldr	r3, [r4, #8]
 8010bcc:	42ab      	cmp	r3, r5
 8010bce:	dc19      	bgt.n	8010c04 <__multadd+0x74>
 8010bd0:	6861      	ldr	r1, [r4, #4]
 8010bd2:	4638      	mov	r0, r7
 8010bd4:	3101      	adds	r1, #1
 8010bd6:	f7ff ff79 	bl	8010acc <_Balloc>
 8010bda:	4680      	mov	r8, r0
 8010bdc:	b928      	cbnz	r0, 8010bea <__multadd+0x5a>
 8010bde:	4602      	mov	r2, r0
 8010be0:	4b0c      	ldr	r3, [pc, #48]	; (8010c14 <__multadd+0x84>)
 8010be2:	480d      	ldr	r0, [pc, #52]	; (8010c18 <__multadd+0x88>)
 8010be4:	21b5      	movs	r1, #181	; 0xb5
 8010be6:	f000 fb3b 	bl	8011260 <__assert_func>
 8010bea:	6922      	ldr	r2, [r4, #16]
 8010bec:	3202      	adds	r2, #2
 8010bee:	f104 010c 	add.w	r1, r4, #12
 8010bf2:	0092      	lsls	r2, r2, #2
 8010bf4:	300c      	adds	r0, #12
 8010bf6:	f7fe fb23 	bl	800f240 <memcpy>
 8010bfa:	4621      	mov	r1, r4
 8010bfc:	4638      	mov	r0, r7
 8010bfe:	f7ff ffa5 	bl	8010b4c <_Bfree>
 8010c02:	4644      	mov	r4, r8
 8010c04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010c08:	3501      	adds	r5, #1
 8010c0a:	615e      	str	r6, [r3, #20]
 8010c0c:	6125      	str	r5, [r4, #16]
 8010c0e:	4620      	mov	r0, r4
 8010c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c14:	080120c7 	.word	0x080120c7
 8010c18:	080120d8 	.word	0x080120d8

08010c1c <__hi0bits>:
 8010c1c:	0c03      	lsrs	r3, r0, #16
 8010c1e:	041b      	lsls	r3, r3, #16
 8010c20:	b9d3      	cbnz	r3, 8010c58 <__hi0bits+0x3c>
 8010c22:	0400      	lsls	r0, r0, #16
 8010c24:	2310      	movs	r3, #16
 8010c26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010c2a:	bf04      	itt	eq
 8010c2c:	0200      	lsleq	r0, r0, #8
 8010c2e:	3308      	addeq	r3, #8
 8010c30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010c34:	bf04      	itt	eq
 8010c36:	0100      	lsleq	r0, r0, #4
 8010c38:	3304      	addeq	r3, #4
 8010c3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010c3e:	bf04      	itt	eq
 8010c40:	0080      	lsleq	r0, r0, #2
 8010c42:	3302      	addeq	r3, #2
 8010c44:	2800      	cmp	r0, #0
 8010c46:	db05      	blt.n	8010c54 <__hi0bits+0x38>
 8010c48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010c4c:	f103 0301 	add.w	r3, r3, #1
 8010c50:	bf08      	it	eq
 8010c52:	2320      	moveq	r3, #32
 8010c54:	4618      	mov	r0, r3
 8010c56:	4770      	bx	lr
 8010c58:	2300      	movs	r3, #0
 8010c5a:	e7e4      	b.n	8010c26 <__hi0bits+0xa>

08010c5c <__lo0bits>:
 8010c5c:	6803      	ldr	r3, [r0, #0]
 8010c5e:	f013 0207 	ands.w	r2, r3, #7
 8010c62:	4601      	mov	r1, r0
 8010c64:	d00b      	beq.n	8010c7e <__lo0bits+0x22>
 8010c66:	07da      	lsls	r2, r3, #31
 8010c68:	d423      	bmi.n	8010cb2 <__lo0bits+0x56>
 8010c6a:	0798      	lsls	r0, r3, #30
 8010c6c:	bf49      	itett	mi
 8010c6e:	085b      	lsrmi	r3, r3, #1
 8010c70:	089b      	lsrpl	r3, r3, #2
 8010c72:	2001      	movmi	r0, #1
 8010c74:	600b      	strmi	r3, [r1, #0]
 8010c76:	bf5c      	itt	pl
 8010c78:	600b      	strpl	r3, [r1, #0]
 8010c7a:	2002      	movpl	r0, #2
 8010c7c:	4770      	bx	lr
 8010c7e:	b298      	uxth	r0, r3
 8010c80:	b9a8      	cbnz	r0, 8010cae <__lo0bits+0x52>
 8010c82:	0c1b      	lsrs	r3, r3, #16
 8010c84:	2010      	movs	r0, #16
 8010c86:	b2da      	uxtb	r2, r3
 8010c88:	b90a      	cbnz	r2, 8010c8e <__lo0bits+0x32>
 8010c8a:	3008      	adds	r0, #8
 8010c8c:	0a1b      	lsrs	r3, r3, #8
 8010c8e:	071a      	lsls	r2, r3, #28
 8010c90:	bf04      	itt	eq
 8010c92:	091b      	lsreq	r3, r3, #4
 8010c94:	3004      	addeq	r0, #4
 8010c96:	079a      	lsls	r2, r3, #30
 8010c98:	bf04      	itt	eq
 8010c9a:	089b      	lsreq	r3, r3, #2
 8010c9c:	3002      	addeq	r0, #2
 8010c9e:	07da      	lsls	r2, r3, #31
 8010ca0:	d403      	bmi.n	8010caa <__lo0bits+0x4e>
 8010ca2:	085b      	lsrs	r3, r3, #1
 8010ca4:	f100 0001 	add.w	r0, r0, #1
 8010ca8:	d005      	beq.n	8010cb6 <__lo0bits+0x5a>
 8010caa:	600b      	str	r3, [r1, #0]
 8010cac:	4770      	bx	lr
 8010cae:	4610      	mov	r0, r2
 8010cb0:	e7e9      	b.n	8010c86 <__lo0bits+0x2a>
 8010cb2:	2000      	movs	r0, #0
 8010cb4:	4770      	bx	lr
 8010cb6:	2020      	movs	r0, #32
 8010cb8:	4770      	bx	lr
	...

08010cbc <__i2b>:
 8010cbc:	b510      	push	{r4, lr}
 8010cbe:	460c      	mov	r4, r1
 8010cc0:	2101      	movs	r1, #1
 8010cc2:	f7ff ff03 	bl	8010acc <_Balloc>
 8010cc6:	4602      	mov	r2, r0
 8010cc8:	b928      	cbnz	r0, 8010cd6 <__i2b+0x1a>
 8010cca:	4b05      	ldr	r3, [pc, #20]	; (8010ce0 <__i2b+0x24>)
 8010ccc:	4805      	ldr	r0, [pc, #20]	; (8010ce4 <__i2b+0x28>)
 8010cce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010cd2:	f000 fac5 	bl	8011260 <__assert_func>
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	6144      	str	r4, [r0, #20]
 8010cda:	6103      	str	r3, [r0, #16]
 8010cdc:	bd10      	pop	{r4, pc}
 8010cde:	bf00      	nop
 8010ce0:	080120c7 	.word	0x080120c7
 8010ce4:	080120d8 	.word	0x080120d8

08010ce8 <__multiply>:
 8010ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cec:	4691      	mov	r9, r2
 8010cee:	690a      	ldr	r2, [r1, #16]
 8010cf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	bfb8      	it	lt
 8010cf8:	460b      	movlt	r3, r1
 8010cfa:	460c      	mov	r4, r1
 8010cfc:	bfbc      	itt	lt
 8010cfe:	464c      	movlt	r4, r9
 8010d00:	4699      	movlt	r9, r3
 8010d02:	6927      	ldr	r7, [r4, #16]
 8010d04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010d08:	68a3      	ldr	r3, [r4, #8]
 8010d0a:	6861      	ldr	r1, [r4, #4]
 8010d0c:	eb07 060a 	add.w	r6, r7, sl
 8010d10:	42b3      	cmp	r3, r6
 8010d12:	b085      	sub	sp, #20
 8010d14:	bfb8      	it	lt
 8010d16:	3101      	addlt	r1, #1
 8010d18:	f7ff fed8 	bl	8010acc <_Balloc>
 8010d1c:	b930      	cbnz	r0, 8010d2c <__multiply+0x44>
 8010d1e:	4602      	mov	r2, r0
 8010d20:	4b44      	ldr	r3, [pc, #272]	; (8010e34 <__multiply+0x14c>)
 8010d22:	4845      	ldr	r0, [pc, #276]	; (8010e38 <__multiply+0x150>)
 8010d24:	f240 115d 	movw	r1, #349	; 0x15d
 8010d28:	f000 fa9a 	bl	8011260 <__assert_func>
 8010d2c:	f100 0514 	add.w	r5, r0, #20
 8010d30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010d34:	462b      	mov	r3, r5
 8010d36:	2200      	movs	r2, #0
 8010d38:	4543      	cmp	r3, r8
 8010d3a:	d321      	bcc.n	8010d80 <__multiply+0x98>
 8010d3c:	f104 0314 	add.w	r3, r4, #20
 8010d40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010d44:	f109 0314 	add.w	r3, r9, #20
 8010d48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010d4c:	9202      	str	r2, [sp, #8]
 8010d4e:	1b3a      	subs	r2, r7, r4
 8010d50:	3a15      	subs	r2, #21
 8010d52:	f022 0203 	bic.w	r2, r2, #3
 8010d56:	3204      	adds	r2, #4
 8010d58:	f104 0115 	add.w	r1, r4, #21
 8010d5c:	428f      	cmp	r7, r1
 8010d5e:	bf38      	it	cc
 8010d60:	2204      	movcc	r2, #4
 8010d62:	9201      	str	r2, [sp, #4]
 8010d64:	9a02      	ldr	r2, [sp, #8]
 8010d66:	9303      	str	r3, [sp, #12]
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	d80c      	bhi.n	8010d86 <__multiply+0x9e>
 8010d6c:	2e00      	cmp	r6, #0
 8010d6e:	dd03      	ble.n	8010d78 <__multiply+0x90>
 8010d70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d05a      	beq.n	8010e2e <__multiply+0x146>
 8010d78:	6106      	str	r6, [r0, #16]
 8010d7a:	b005      	add	sp, #20
 8010d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d80:	f843 2b04 	str.w	r2, [r3], #4
 8010d84:	e7d8      	b.n	8010d38 <__multiply+0x50>
 8010d86:	f8b3 a000 	ldrh.w	sl, [r3]
 8010d8a:	f1ba 0f00 	cmp.w	sl, #0
 8010d8e:	d024      	beq.n	8010dda <__multiply+0xf2>
 8010d90:	f104 0e14 	add.w	lr, r4, #20
 8010d94:	46a9      	mov	r9, r5
 8010d96:	f04f 0c00 	mov.w	ip, #0
 8010d9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010d9e:	f8d9 1000 	ldr.w	r1, [r9]
 8010da2:	fa1f fb82 	uxth.w	fp, r2
 8010da6:	b289      	uxth	r1, r1
 8010da8:	fb0a 110b 	mla	r1, sl, fp, r1
 8010dac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010db0:	f8d9 2000 	ldr.w	r2, [r9]
 8010db4:	4461      	add	r1, ip
 8010db6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010dba:	fb0a c20b 	mla	r2, sl, fp, ip
 8010dbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010dc2:	b289      	uxth	r1, r1
 8010dc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010dc8:	4577      	cmp	r7, lr
 8010dca:	f849 1b04 	str.w	r1, [r9], #4
 8010dce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010dd2:	d8e2      	bhi.n	8010d9a <__multiply+0xb2>
 8010dd4:	9a01      	ldr	r2, [sp, #4]
 8010dd6:	f845 c002 	str.w	ip, [r5, r2]
 8010dda:	9a03      	ldr	r2, [sp, #12]
 8010ddc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010de0:	3304      	adds	r3, #4
 8010de2:	f1b9 0f00 	cmp.w	r9, #0
 8010de6:	d020      	beq.n	8010e2a <__multiply+0x142>
 8010de8:	6829      	ldr	r1, [r5, #0]
 8010dea:	f104 0c14 	add.w	ip, r4, #20
 8010dee:	46ae      	mov	lr, r5
 8010df0:	f04f 0a00 	mov.w	sl, #0
 8010df4:	f8bc b000 	ldrh.w	fp, [ip]
 8010df8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010dfc:	fb09 220b 	mla	r2, r9, fp, r2
 8010e00:	4492      	add	sl, r2
 8010e02:	b289      	uxth	r1, r1
 8010e04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010e08:	f84e 1b04 	str.w	r1, [lr], #4
 8010e0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010e10:	f8be 1000 	ldrh.w	r1, [lr]
 8010e14:	0c12      	lsrs	r2, r2, #16
 8010e16:	fb09 1102 	mla	r1, r9, r2, r1
 8010e1a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010e1e:	4567      	cmp	r7, ip
 8010e20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010e24:	d8e6      	bhi.n	8010df4 <__multiply+0x10c>
 8010e26:	9a01      	ldr	r2, [sp, #4]
 8010e28:	50a9      	str	r1, [r5, r2]
 8010e2a:	3504      	adds	r5, #4
 8010e2c:	e79a      	b.n	8010d64 <__multiply+0x7c>
 8010e2e:	3e01      	subs	r6, #1
 8010e30:	e79c      	b.n	8010d6c <__multiply+0x84>
 8010e32:	bf00      	nop
 8010e34:	080120c7 	.word	0x080120c7
 8010e38:	080120d8 	.word	0x080120d8

08010e3c <__pow5mult>:
 8010e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e40:	4615      	mov	r5, r2
 8010e42:	f012 0203 	ands.w	r2, r2, #3
 8010e46:	4606      	mov	r6, r0
 8010e48:	460f      	mov	r7, r1
 8010e4a:	d007      	beq.n	8010e5c <__pow5mult+0x20>
 8010e4c:	4c25      	ldr	r4, [pc, #148]	; (8010ee4 <__pow5mult+0xa8>)
 8010e4e:	3a01      	subs	r2, #1
 8010e50:	2300      	movs	r3, #0
 8010e52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e56:	f7ff fe9b 	bl	8010b90 <__multadd>
 8010e5a:	4607      	mov	r7, r0
 8010e5c:	10ad      	asrs	r5, r5, #2
 8010e5e:	d03d      	beq.n	8010edc <__pow5mult+0xa0>
 8010e60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010e62:	b97c      	cbnz	r4, 8010e84 <__pow5mult+0x48>
 8010e64:	2010      	movs	r0, #16
 8010e66:	f7fe f9db 	bl	800f220 <malloc>
 8010e6a:	4602      	mov	r2, r0
 8010e6c:	6270      	str	r0, [r6, #36]	; 0x24
 8010e6e:	b928      	cbnz	r0, 8010e7c <__pow5mult+0x40>
 8010e70:	4b1d      	ldr	r3, [pc, #116]	; (8010ee8 <__pow5mult+0xac>)
 8010e72:	481e      	ldr	r0, [pc, #120]	; (8010eec <__pow5mult+0xb0>)
 8010e74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010e78:	f000 f9f2 	bl	8011260 <__assert_func>
 8010e7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e80:	6004      	str	r4, [r0, #0]
 8010e82:	60c4      	str	r4, [r0, #12]
 8010e84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010e88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e8c:	b94c      	cbnz	r4, 8010ea2 <__pow5mult+0x66>
 8010e8e:	f240 2171 	movw	r1, #625	; 0x271
 8010e92:	4630      	mov	r0, r6
 8010e94:	f7ff ff12 	bl	8010cbc <__i2b>
 8010e98:	2300      	movs	r3, #0
 8010e9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e9e:	4604      	mov	r4, r0
 8010ea0:	6003      	str	r3, [r0, #0]
 8010ea2:	f04f 0900 	mov.w	r9, #0
 8010ea6:	07eb      	lsls	r3, r5, #31
 8010ea8:	d50a      	bpl.n	8010ec0 <__pow5mult+0x84>
 8010eaa:	4639      	mov	r1, r7
 8010eac:	4622      	mov	r2, r4
 8010eae:	4630      	mov	r0, r6
 8010eb0:	f7ff ff1a 	bl	8010ce8 <__multiply>
 8010eb4:	4639      	mov	r1, r7
 8010eb6:	4680      	mov	r8, r0
 8010eb8:	4630      	mov	r0, r6
 8010eba:	f7ff fe47 	bl	8010b4c <_Bfree>
 8010ebe:	4647      	mov	r7, r8
 8010ec0:	106d      	asrs	r5, r5, #1
 8010ec2:	d00b      	beq.n	8010edc <__pow5mult+0xa0>
 8010ec4:	6820      	ldr	r0, [r4, #0]
 8010ec6:	b938      	cbnz	r0, 8010ed8 <__pow5mult+0x9c>
 8010ec8:	4622      	mov	r2, r4
 8010eca:	4621      	mov	r1, r4
 8010ecc:	4630      	mov	r0, r6
 8010ece:	f7ff ff0b 	bl	8010ce8 <__multiply>
 8010ed2:	6020      	str	r0, [r4, #0]
 8010ed4:	f8c0 9000 	str.w	r9, [r0]
 8010ed8:	4604      	mov	r4, r0
 8010eda:	e7e4      	b.n	8010ea6 <__pow5mult+0x6a>
 8010edc:	4638      	mov	r0, r7
 8010ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ee2:	bf00      	nop
 8010ee4:	08012228 	.word	0x08012228
 8010ee8:	08012055 	.word	0x08012055
 8010eec:	080120d8 	.word	0x080120d8

08010ef0 <__lshift>:
 8010ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ef4:	460c      	mov	r4, r1
 8010ef6:	6849      	ldr	r1, [r1, #4]
 8010ef8:	6923      	ldr	r3, [r4, #16]
 8010efa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010efe:	68a3      	ldr	r3, [r4, #8]
 8010f00:	4607      	mov	r7, r0
 8010f02:	4691      	mov	r9, r2
 8010f04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010f08:	f108 0601 	add.w	r6, r8, #1
 8010f0c:	42b3      	cmp	r3, r6
 8010f0e:	db0b      	blt.n	8010f28 <__lshift+0x38>
 8010f10:	4638      	mov	r0, r7
 8010f12:	f7ff fddb 	bl	8010acc <_Balloc>
 8010f16:	4605      	mov	r5, r0
 8010f18:	b948      	cbnz	r0, 8010f2e <__lshift+0x3e>
 8010f1a:	4602      	mov	r2, r0
 8010f1c:	4b2a      	ldr	r3, [pc, #168]	; (8010fc8 <__lshift+0xd8>)
 8010f1e:	482b      	ldr	r0, [pc, #172]	; (8010fcc <__lshift+0xdc>)
 8010f20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010f24:	f000 f99c 	bl	8011260 <__assert_func>
 8010f28:	3101      	adds	r1, #1
 8010f2a:	005b      	lsls	r3, r3, #1
 8010f2c:	e7ee      	b.n	8010f0c <__lshift+0x1c>
 8010f2e:	2300      	movs	r3, #0
 8010f30:	f100 0114 	add.w	r1, r0, #20
 8010f34:	f100 0210 	add.w	r2, r0, #16
 8010f38:	4618      	mov	r0, r3
 8010f3a:	4553      	cmp	r3, sl
 8010f3c:	db37      	blt.n	8010fae <__lshift+0xbe>
 8010f3e:	6920      	ldr	r0, [r4, #16]
 8010f40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010f44:	f104 0314 	add.w	r3, r4, #20
 8010f48:	f019 091f 	ands.w	r9, r9, #31
 8010f4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010f50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010f54:	d02f      	beq.n	8010fb6 <__lshift+0xc6>
 8010f56:	f1c9 0e20 	rsb	lr, r9, #32
 8010f5a:	468a      	mov	sl, r1
 8010f5c:	f04f 0c00 	mov.w	ip, #0
 8010f60:	681a      	ldr	r2, [r3, #0]
 8010f62:	fa02 f209 	lsl.w	r2, r2, r9
 8010f66:	ea42 020c 	orr.w	r2, r2, ip
 8010f6a:	f84a 2b04 	str.w	r2, [sl], #4
 8010f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f72:	4298      	cmp	r0, r3
 8010f74:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010f78:	d8f2      	bhi.n	8010f60 <__lshift+0x70>
 8010f7a:	1b03      	subs	r3, r0, r4
 8010f7c:	3b15      	subs	r3, #21
 8010f7e:	f023 0303 	bic.w	r3, r3, #3
 8010f82:	3304      	adds	r3, #4
 8010f84:	f104 0215 	add.w	r2, r4, #21
 8010f88:	4290      	cmp	r0, r2
 8010f8a:	bf38      	it	cc
 8010f8c:	2304      	movcc	r3, #4
 8010f8e:	f841 c003 	str.w	ip, [r1, r3]
 8010f92:	f1bc 0f00 	cmp.w	ip, #0
 8010f96:	d001      	beq.n	8010f9c <__lshift+0xac>
 8010f98:	f108 0602 	add.w	r6, r8, #2
 8010f9c:	3e01      	subs	r6, #1
 8010f9e:	4638      	mov	r0, r7
 8010fa0:	612e      	str	r6, [r5, #16]
 8010fa2:	4621      	mov	r1, r4
 8010fa4:	f7ff fdd2 	bl	8010b4c <_Bfree>
 8010fa8:	4628      	mov	r0, r5
 8010faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fae:	f842 0f04 	str.w	r0, [r2, #4]!
 8010fb2:	3301      	adds	r3, #1
 8010fb4:	e7c1      	b.n	8010f3a <__lshift+0x4a>
 8010fb6:	3904      	subs	r1, #4
 8010fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8010fc0:	4298      	cmp	r0, r3
 8010fc2:	d8f9      	bhi.n	8010fb8 <__lshift+0xc8>
 8010fc4:	e7ea      	b.n	8010f9c <__lshift+0xac>
 8010fc6:	bf00      	nop
 8010fc8:	080120c7 	.word	0x080120c7
 8010fcc:	080120d8 	.word	0x080120d8

08010fd0 <__mcmp>:
 8010fd0:	b530      	push	{r4, r5, lr}
 8010fd2:	6902      	ldr	r2, [r0, #16]
 8010fd4:	690c      	ldr	r4, [r1, #16]
 8010fd6:	1b12      	subs	r2, r2, r4
 8010fd8:	d10e      	bne.n	8010ff8 <__mcmp+0x28>
 8010fda:	f100 0314 	add.w	r3, r0, #20
 8010fde:	3114      	adds	r1, #20
 8010fe0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010fe4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010fe8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010fec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010ff0:	42a5      	cmp	r5, r4
 8010ff2:	d003      	beq.n	8010ffc <__mcmp+0x2c>
 8010ff4:	d305      	bcc.n	8011002 <__mcmp+0x32>
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	4610      	mov	r0, r2
 8010ffa:	bd30      	pop	{r4, r5, pc}
 8010ffc:	4283      	cmp	r3, r0
 8010ffe:	d3f3      	bcc.n	8010fe8 <__mcmp+0x18>
 8011000:	e7fa      	b.n	8010ff8 <__mcmp+0x28>
 8011002:	f04f 32ff 	mov.w	r2, #4294967295
 8011006:	e7f7      	b.n	8010ff8 <__mcmp+0x28>

08011008 <__mdiff>:
 8011008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801100c:	460c      	mov	r4, r1
 801100e:	4606      	mov	r6, r0
 8011010:	4611      	mov	r1, r2
 8011012:	4620      	mov	r0, r4
 8011014:	4690      	mov	r8, r2
 8011016:	f7ff ffdb 	bl	8010fd0 <__mcmp>
 801101a:	1e05      	subs	r5, r0, #0
 801101c:	d110      	bne.n	8011040 <__mdiff+0x38>
 801101e:	4629      	mov	r1, r5
 8011020:	4630      	mov	r0, r6
 8011022:	f7ff fd53 	bl	8010acc <_Balloc>
 8011026:	b930      	cbnz	r0, 8011036 <__mdiff+0x2e>
 8011028:	4b3a      	ldr	r3, [pc, #232]	; (8011114 <__mdiff+0x10c>)
 801102a:	4602      	mov	r2, r0
 801102c:	f240 2132 	movw	r1, #562	; 0x232
 8011030:	4839      	ldr	r0, [pc, #228]	; (8011118 <__mdiff+0x110>)
 8011032:	f000 f915 	bl	8011260 <__assert_func>
 8011036:	2301      	movs	r3, #1
 8011038:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801103c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011040:	bfa4      	itt	ge
 8011042:	4643      	movge	r3, r8
 8011044:	46a0      	movge	r8, r4
 8011046:	4630      	mov	r0, r6
 8011048:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801104c:	bfa6      	itte	ge
 801104e:	461c      	movge	r4, r3
 8011050:	2500      	movge	r5, #0
 8011052:	2501      	movlt	r5, #1
 8011054:	f7ff fd3a 	bl	8010acc <_Balloc>
 8011058:	b920      	cbnz	r0, 8011064 <__mdiff+0x5c>
 801105a:	4b2e      	ldr	r3, [pc, #184]	; (8011114 <__mdiff+0x10c>)
 801105c:	4602      	mov	r2, r0
 801105e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011062:	e7e5      	b.n	8011030 <__mdiff+0x28>
 8011064:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011068:	6926      	ldr	r6, [r4, #16]
 801106a:	60c5      	str	r5, [r0, #12]
 801106c:	f104 0914 	add.w	r9, r4, #20
 8011070:	f108 0514 	add.w	r5, r8, #20
 8011074:	f100 0e14 	add.w	lr, r0, #20
 8011078:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801107c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011080:	f108 0210 	add.w	r2, r8, #16
 8011084:	46f2      	mov	sl, lr
 8011086:	2100      	movs	r1, #0
 8011088:	f859 3b04 	ldr.w	r3, [r9], #4
 801108c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011090:	fa1f f883 	uxth.w	r8, r3
 8011094:	fa11 f18b 	uxtah	r1, r1, fp
 8011098:	0c1b      	lsrs	r3, r3, #16
 801109a:	eba1 0808 	sub.w	r8, r1, r8
 801109e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80110a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80110a6:	fa1f f888 	uxth.w	r8, r8
 80110aa:	1419      	asrs	r1, r3, #16
 80110ac:	454e      	cmp	r6, r9
 80110ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80110b2:	f84a 3b04 	str.w	r3, [sl], #4
 80110b6:	d8e7      	bhi.n	8011088 <__mdiff+0x80>
 80110b8:	1b33      	subs	r3, r6, r4
 80110ba:	3b15      	subs	r3, #21
 80110bc:	f023 0303 	bic.w	r3, r3, #3
 80110c0:	3304      	adds	r3, #4
 80110c2:	3415      	adds	r4, #21
 80110c4:	42a6      	cmp	r6, r4
 80110c6:	bf38      	it	cc
 80110c8:	2304      	movcc	r3, #4
 80110ca:	441d      	add	r5, r3
 80110cc:	4473      	add	r3, lr
 80110ce:	469e      	mov	lr, r3
 80110d0:	462e      	mov	r6, r5
 80110d2:	4566      	cmp	r6, ip
 80110d4:	d30e      	bcc.n	80110f4 <__mdiff+0xec>
 80110d6:	f10c 0203 	add.w	r2, ip, #3
 80110da:	1b52      	subs	r2, r2, r5
 80110dc:	f022 0203 	bic.w	r2, r2, #3
 80110e0:	3d03      	subs	r5, #3
 80110e2:	45ac      	cmp	ip, r5
 80110e4:	bf38      	it	cc
 80110e6:	2200      	movcc	r2, #0
 80110e8:	441a      	add	r2, r3
 80110ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80110ee:	b17b      	cbz	r3, 8011110 <__mdiff+0x108>
 80110f0:	6107      	str	r7, [r0, #16]
 80110f2:	e7a3      	b.n	801103c <__mdiff+0x34>
 80110f4:	f856 8b04 	ldr.w	r8, [r6], #4
 80110f8:	fa11 f288 	uxtah	r2, r1, r8
 80110fc:	1414      	asrs	r4, r2, #16
 80110fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011102:	b292      	uxth	r2, r2
 8011104:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011108:	f84e 2b04 	str.w	r2, [lr], #4
 801110c:	1421      	asrs	r1, r4, #16
 801110e:	e7e0      	b.n	80110d2 <__mdiff+0xca>
 8011110:	3f01      	subs	r7, #1
 8011112:	e7ea      	b.n	80110ea <__mdiff+0xe2>
 8011114:	080120c7 	.word	0x080120c7
 8011118:	080120d8 	.word	0x080120d8

0801111c <__d2b>:
 801111c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011120:	4689      	mov	r9, r1
 8011122:	2101      	movs	r1, #1
 8011124:	ec57 6b10 	vmov	r6, r7, d0
 8011128:	4690      	mov	r8, r2
 801112a:	f7ff fccf 	bl	8010acc <_Balloc>
 801112e:	4604      	mov	r4, r0
 8011130:	b930      	cbnz	r0, 8011140 <__d2b+0x24>
 8011132:	4602      	mov	r2, r0
 8011134:	4b25      	ldr	r3, [pc, #148]	; (80111cc <__d2b+0xb0>)
 8011136:	4826      	ldr	r0, [pc, #152]	; (80111d0 <__d2b+0xb4>)
 8011138:	f240 310a 	movw	r1, #778	; 0x30a
 801113c:	f000 f890 	bl	8011260 <__assert_func>
 8011140:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011144:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011148:	bb35      	cbnz	r5, 8011198 <__d2b+0x7c>
 801114a:	2e00      	cmp	r6, #0
 801114c:	9301      	str	r3, [sp, #4]
 801114e:	d028      	beq.n	80111a2 <__d2b+0x86>
 8011150:	4668      	mov	r0, sp
 8011152:	9600      	str	r6, [sp, #0]
 8011154:	f7ff fd82 	bl	8010c5c <__lo0bits>
 8011158:	9900      	ldr	r1, [sp, #0]
 801115a:	b300      	cbz	r0, 801119e <__d2b+0x82>
 801115c:	9a01      	ldr	r2, [sp, #4]
 801115e:	f1c0 0320 	rsb	r3, r0, #32
 8011162:	fa02 f303 	lsl.w	r3, r2, r3
 8011166:	430b      	orrs	r3, r1
 8011168:	40c2      	lsrs	r2, r0
 801116a:	6163      	str	r3, [r4, #20]
 801116c:	9201      	str	r2, [sp, #4]
 801116e:	9b01      	ldr	r3, [sp, #4]
 8011170:	61a3      	str	r3, [r4, #24]
 8011172:	2b00      	cmp	r3, #0
 8011174:	bf14      	ite	ne
 8011176:	2202      	movne	r2, #2
 8011178:	2201      	moveq	r2, #1
 801117a:	6122      	str	r2, [r4, #16]
 801117c:	b1d5      	cbz	r5, 80111b4 <__d2b+0x98>
 801117e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011182:	4405      	add	r5, r0
 8011184:	f8c9 5000 	str.w	r5, [r9]
 8011188:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801118c:	f8c8 0000 	str.w	r0, [r8]
 8011190:	4620      	mov	r0, r4
 8011192:	b003      	add	sp, #12
 8011194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801119c:	e7d5      	b.n	801114a <__d2b+0x2e>
 801119e:	6161      	str	r1, [r4, #20]
 80111a0:	e7e5      	b.n	801116e <__d2b+0x52>
 80111a2:	a801      	add	r0, sp, #4
 80111a4:	f7ff fd5a 	bl	8010c5c <__lo0bits>
 80111a8:	9b01      	ldr	r3, [sp, #4]
 80111aa:	6163      	str	r3, [r4, #20]
 80111ac:	2201      	movs	r2, #1
 80111ae:	6122      	str	r2, [r4, #16]
 80111b0:	3020      	adds	r0, #32
 80111b2:	e7e3      	b.n	801117c <__d2b+0x60>
 80111b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80111b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80111bc:	f8c9 0000 	str.w	r0, [r9]
 80111c0:	6918      	ldr	r0, [r3, #16]
 80111c2:	f7ff fd2b 	bl	8010c1c <__hi0bits>
 80111c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80111ca:	e7df      	b.n	801118c <__d2b+0x70>
 80111cc:	080120c7 	.word	0x080120c7
 80111d0:	080120d8 	.word	0x080120d8

080111d4 <_calloc_r>:
 80111d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111d6:	fba1 2402 	umull	r2, r4, r1, r2
 80111da:	b94c      	cbnz	r4, 80111f0 <_calloc_r+0x1c>
 80111dc:	4611      	mov	r1, r2
 80111de:	9201      	str	r2, [sp, #4]
 80111e0:	f7fe f8b0 	bl	800f344 <_malloc_r>
 80111e4:	9a01      	ldr	r2, [sp, #4]
 80111e6:	4605      	mov	r5, r0
 80111e8:	b930      	cbnz	r0, 80111f8 <_calloc_r+0x24>
 80111ea:	4628      	mov	r0, r5
 80111ec:	b003      	add	sp, #12
 80111ee:	bd30      	pop	{r4, r5, pc}
 80111f0:	220c      	movs	r2, #12
 80111f2:	6002      	str	r2, [r0, #0]
 80111f4:	2500      	movs	r5, #0
 80111f6:	e7f8      	b.n	80111ea <_calloc_r+0x16>
 80111f8:	4621      	mov	r1, r4
 80111fa:	f7fe f82f 	bl	800f25c <memset>
 80111fe:	e7f4      	b.n	80111ea <_calloc_r+0x16>

08011200 <_realloc_r>:
 8011200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011204:	4680      	mov	r8, r0
 8011206:	4614      	mov	r4, r2
 8011208:	460e      	mov	r6, r1
 801120a:	b921      	cbnz	r1, 8011216 <_realloc_r+0x16>
 801120c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011210:	4611      	mov	r1, r2
 8011212:	f7fe b897 	b.w	800f344 <_malloc_r>
 8011216:	b92a      	cbnz	r2, 8011224 <_realloc_r+0x24>
 8011218:	f7fe f828 	bl	800f26c <_free_r>
 801121c:	4625      	mov	r5, r4
 801121e:	4628      	mov	r0, r5
 8011220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011224:	f000 f861 	bl	80112ea <_malloc_usable_size_r>
 8011228:	4284      	cmp	r4, r0
 801122a:	4607      	mov	r7, r0
 801122c:	d802      	bhi.n	8011234 <_realloc_r+0x34>
 801122e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011232:	d812      	bhi.n	801125a <_realloc_r+0x5a>
 8011234:	4621      	mov	r1, r4
 8011236:	4640      	mov	r0, r8
 8011238:	f7fe f884 	bl	800f344 <_malloc_r>
 801123c:	4605      	mov	r5, r0
 801123e:	2800      	cmp	r0, #0
 8011240:	d0ed      	beq.n	801121e <_realloc_r+0x1e>
 8011242:	42bc      	cmp	r4, r7
 8011244:	4622      	mov	r2, r4
 8011246:	4631      	mov	r1, r6
 8011248:	bf28      	it	cs
 801124a:	463a      	movcs	r2, r7
 801124c:	f7fd fff8 	bl	800f240 <memcpy>
 8011250:	4631      	mov	r1, r6
 8011252:	4640      	mov	r0, r8
 8011254:	f7fe f80a 	bl	800f26c <_free_r>
 8011258:	e7e1      	b.n	801121e <_realloc_r+0x1e>
 801125a:	4635      	mov	r5, r6
 801125c:	e7df      	b.n	801121e <_realloc_r+0x1e>
	...

08011260 <__assert_func>:
 8011260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011262:	4614      	mov	r4, r2
 8011264:	461a      	mov	r2, r3
 8011266:	4b09      	ldr	r3, [pc, #36]	; (801128c <__assert_func+0x2c>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	4605      	mov	r5, r0
 801126c:	68d8      	ldr	r0, [r3, #12]
 801126e:	b14c      	cbz	r4, 8011284 <__assert_func+0x24>
 8011270:	4b07      	ldr	r3, [pc, #28]	; (8011290 <__assert_func+0x30>)
 8011272:	9100      	str	r1, [sp, #0]
 8011274:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011278:	4906      	ldr	r1, [pc, #24]	; (8011294 <__assert_func+0x34>)
 801127a:	462b      	mov	r3, r5
 801127c:	f000 f80e 	bl	801129c <fiprintf>
 8011280:	f7fd ff9c 	bl	800f1bc <abort>
 8011284:	4b04      	ldr	r3, [pc, #16]	; (8011298 <__assert_func+0x38>)
 8011286:	461c      	mov	r4, r3
 8011288:	e7f3      	b.n	8011272 <__assert_func+0x12>
 801128a:	bf00      	nop
 801128c:	20000048 	.word	0x20000048
 8011290:	08012234 	.word	0x08012234
 8011294:	08012241 	.word	0x08012241
 8011298:	0801226f 	.word	0x0801226f

0801129c <fiprintf>:
 801129c:	b40e      	push	{r1, r2, r3}
 801129e:	b503      	push	{r0, r1, lr}
 80112a0:	4601      	mov	r1, r0
 80112a2:	ab03      	add	r3, sp, #12
 80112a4:	4805      	ldr	r0, [pc, #20]	; (80112bc <fiprintf+0x20>)
 80112a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80112aa:	6800      	ldr	r0, [r0, #0]
 80112ac:	9301      	str	r3, [sp, #4]
 80112ae:	f000 f84d 	bl	801134c <_vfiprintf_r>
 80112b2:	b002      	add	sp, #8
 80112b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80112b8:	b003      	add	sp, #12
 80112ba:	4770      	bx	lr
 80112bc:	20000048 	.word	0x20000048

080112c0 <__retarget_lock_init_recursive>:
 80112c0:	4770      	bx	lr

080112c2 <__retarget_lock_acquire_recursive>:
 80112c2:	4770      	bx	lr

080112c4 <__retarget_lock_release_recursive>:
 80112c4:	4770      	bx	lr

080112c6 <__ascii_mbtowc>:
 80112c6:	b082      	sub	sp, #8
 80112c8:	b901      	cbnz	r1, 80112cc <__ascii_mbtowc+0x6>
 80112ca:	a901      	add	r1, sp, #4
 80112cc:	b142      	cbz	r2, 80112e0 <__ascii_mbtowc+0x1a>
 80112ce:	b14b      	cbz	r3, 80112e4 <__ascii_mbtowc+0x1e>
 80112d0:	7813      	ldrb	r3, [r2, #0]
 80112d2:	600b      	str	r3, [r1, #0]
 80112d4:	7812      	ldrb	r2, [r2, #0]
 80112d6:	1e10      	subs	r0, r2, #0
 80112d8:	bf18      	it	ne
 80112da:	2001      	movne	r0, #1
 80112dc:	b002      	add	sp, #8
 80112de:	4770      	bx	lr
 80112e0:	4610      	mov	r0, r2
 80112e2:	e7fb      	b.n	80112dc <__ascii_mbtowc+0x16>
 80112e4:	f06f 0001 	mvn.w	r0, #1
 80112e8:	e7f8      	b.n	80112dc <__ascii_mbtowc+0x16>

080112ea <_malloc_usable_size_r>:
 80112ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112ee:	1f18      	subs	r0, r3, #4
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	bfbc      	itt	lt
 80112f4:	580b      	ldrlt	r3, [r1, r0]
 80112f6:	18c0      	addlt	r0, r0, r3
 80112f8:	4770      	bx	lr

080112fa <__sfputc_r>:
 80112fa:	6893      	ldr	r3, [r2, #8]
 80112fc:	3b01      	subs	r3, #1
 80112fe:	2b00      	cmp	r3, #0
 8011300:	b410      	push	{r4}
 8011302:	6093      	str	r3, [r2, #8]
 8011304:	da08      	bge.n	8011318 <__sfputc_r+0x1e>
 8011306:	6994      	ldr	r4, [r2, #24]
 8011308:	42a3      	cmp	r3, r4
 801130a:	db01      	blt.n	8011310 <__sfputc_r+0x16>
 801130c:	290a      	cmp	r1, #10
 801130e:	d103      	bne.n	8011318 <__sfputc_r+0x1e>
 8011310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011314:	f000 b94a 	b.w	80115ac <__swbuf_r>
 8011318:	6813      	ldr	r3, [r2, #0]
 801131a:	1c58      	adds	r0, r3, #1
 801131c:	6010      	str	r0, [r2, #0]
 801131e:	7019      	strb	r1, [r3, #0]
 8011320:	4608      	mov	r0, r1
 8011322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011326:	4770      	bx	lr

08011328 <__sfputs_r>:
 8011328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801132a:	4606      	mov	r6, r0
 801132c:	460f      	mov	r7, r1
 801132e:	4614      	mov	r4, r2
 8011330:	18d5      	adds	r5, r2, r3
 8011332:	42ac      	cmp	r4, r5
 8011334:	d101      	bne.n	801133a <__sfputs_r+0x12>
 8011336:	2000      	movs	r0, #0
 8011338:	e007      	b.n	801134a <__sfputs_r+0x22>
 801133a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801133e:	463a      	mov	r2, r7
 8011340:	4630      	mov	r0, r6
 8011342:	f7ff ffda 	bl	80112fa <__sfputc_r>
 8011346:	1c43      	adds	r3, r0, #1
 8011348:	d1f3      	bne.n	8011332 <__sfputs_r+0xa>
 801134a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801134c <_vfiprintf_r>:
 801134c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011350:	460d      	mov	r5, r1
 8011352:	b09d      	sub	sp, #116	; 0x74
 8011354:	4614      	mov	r4, r2
 8011356:	4698      	mov	r8, r3
 8011358:	4606      	mov	r6, r0
 801135a:	b118      	cbz	r0, 8011364 <_vfiprintf_r+0x18>
 801135c:	6983      	ldr	r3, [r0, #24]
 801135e:	b90b      	cbnz	r3, 8011364 <_vfiprintf_r+0x18>
 8011360:	f000 fb0c 	bl	801197c <__sinit>
 8011364:	4b89      	ldr	r3, [pc, #548]	; (801158c <_vfiprintf_r+0x240>)
 8011366:	429d      	cmp	r5, r3
 8011368:	d11b      	bne.n	80113a2 <_vfiprintf_r+0x56>
 801136a:	6875      	ldr	r5, [r6, #4]
 801136c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801136e:	07d9      	lsls	r1, r3, #31
 8011370:	d405      	bmi.n	801137e <_vfiprintf_r+0x32>
 8011372:	89ab      	ldrh	r3, [r5, #12]
 8011374:	059a      	lsls	r2, r3, #22
 8011376:	d402      	bmi.n	801137e <_vfiprintf_r+0x32>
 8011378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801137a:	f7ff ffa2 	bl	80112c2 <__retarget_lock_acquire_recursive>
 801137e:	89ab      	ldrh	r3, [r5, #12]
 8011380:	071b      	lsls	r3, r3, #28
 8011382:	d501      	bpl.n	8011388 <_vfiprintf_r+0x3c>
 8011384:	692b      	ldr	r3, [r5, #16]
 8011386:	b9eb      	cbnz	r3, 80113c4 <_vfiprintf_r+0x78>
 8011388:	4629      	mov	r1, r5
 801138a:	4630      	mov	r0, r6
 801138c:	f000 f96e 	bl	801166c <__swsetup_r>
 8011390:	b1c0      	cbz	r0, 80113c4 <_vfiprintf_r+0x78>
 8011392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011394:	07dc      	lsls	r4, r3, #31
 8011396:	d50e      	bpl.n	80113b6 <_vfiprintf_r+0x6a>
 8011398:	f04f 30ff 	mov.w	r0, #4294967295
 801139c:	b01d      	add	sp, #116	; 0x74
 801139e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a2:	4b7b      	ldr	r3, [pc, #492]	; (8011590 <_vfiprintf_r+0x244>)
 80113a4:	429d      	cmp	r5, r3
 80113a6:	d101      	bne.n	80113ac <_vfiprintf_r+0x60>
 80113a8:	68b5      	ldr	r5, [r6, #8]
 80113aa:	e7df      	b.n	801136c <_vfiprintf_r+0x20>
 80113ac:	4b79      	ldr	r3, [pc, #484]	; (8011594 <_vfiprintf_r+0x248>)
 80113ae:	429d      	cmp	r5, r3
 80113b0:	bf08      	it	eq
 80113b2:	68f5      	ldreq	r5, [r6, #12]
 80113b4:	e7da      	b.n	801136c <_vfiprintf_r+0x20>
 80113b6:	89ab      	ldrh	r3, [r5, #12]
 80113b8:	0598      	lsls	r0, r3, #22
 80113ba:	d4ed      	bmi.n	8011398 <_vfiprintf_r+0x4c>
 80113bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113be:	f7ff ff81 	bl	80112c4 <__retarget_lock_release_recursive>
 80113c2:	e7e9      	b.n	8011398 <_vfiprintf_r+0x4c>
 80113c4:	2300      	movs	r3, #0
 80113c6:	9309      	str	r3, [sp, #36]	; 0x24
 80113c8:	2320      	movs	r3, #32
 80113ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80113d2:	2330      	movs	r3, #48	; 0x30
 80113d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011598 <_vfiprintf_r+0x24c>
 80113d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80113dc:	f04f 0901 	mov.w	r9, #1
 80113e0:	4623      	mov	r3, r4
 80113e2:	469a      	mov	sl, r3
 80113e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113e8:	b10a      	cbz	r2, 80113ee <_vfiprintf_r+0xa2>
 80113ea:	2a25      	cmp	r2, #37	; 0x25
 80113ec:	d1f9      	bne.n	80113e2 <_vfiprintf_r+0x96>
 80113ee:	ebba 0b04 	subs.w	fp, sl, r4
 80113f2:	d00b      	beq.n	801140c <_vfiprintf_r+0xc0>
 80113f4:	465b      	mov	r3, fp
 80113f6:	4622      	mov	r2, r4
 80113f8:	4629      	mov	r1, r5
 80113fa:	4630      	mov	r0, r6
 80113fc:	f7ff ff94 	bl	8011328 <__sfputs_r>
 8011400:	3001      	adds	r0, #1
 8011402:	f000 80aa 	beq.w	801155a <_vfiprintf_r+0x20e>
 8011406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011408:	445a      	add	r2, fp
 801140a:	9209      	str	r2, [sp, #36]	; 0x24
 801140c:	f89a 3000 	ldrb.w	r3, [sl]
 8011410:	2b00      	cmp	r3, #0
 8011412:	f000 80a2 	beq.w	801155a <_vfiprintf_r+0x20e>
 8011416:	2300      	movs	r3, #0
 8011418:	f04f 32ff 	mov.w	r2, #4294967295
 801141c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011420:	f10a 0a01 	add.w	sl, sl, #1
 8011424:	9304      	str	r3, [sp, #16]
 8011426:	9307      	str	r3, [sp, #28]
 8011428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801142c:	931a      	str	r3, [sp, #104]	; 0x68
 801142e:	4654      	mov	r4, sl
 8011430:	2205      	movs	r2, #5
 8011432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011436:	4858      	ldr	r0, [pc, #352]	; (8011598 <_vfiprintf_r+0x24c>)
 8011438:	f7ee feda 	bl	80001f0 <memchr>
 801143c:	9a04      	ldr	r2, [sp, #16]
 801143e:	b9d8      	cbnz	r0, 8011478 <_vfiprintf_r+0x12c>
 8011440:	06d1      	lsls	r1, r2, #27
 8011442:	bf44      	itt	mi
 8011444:	2320      	movmi	r3, #32
 8011446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801144a:	0713      	lsls	r3, r2, #28
 801144c:	bf44      	itt	mi
 801144e:	232b      	movmi	r3, #43	; 0x2b
 8011450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011454:	f89a 3000 	ldrb.w	r3, [sl]
 8011458:	2b2a      	cmp	r3, #42	; 0x2a
 801145a:	d015      	beq.n	8011488 <_vfiprintf_r+0x13c>
 801145c:	9a07      	ldr	r2, [sp, #28]
 801145e:	4654      	mov	r4, sl
 8011460:	2000      	movs	r0, #0
 8011462:	f04f 0c0a 	mov.w	ip, #10
 8011466:	4621      	mov	r1, r4
 8011468:	f811 3b01 	ldrb.w	r3, [r1], #1
 801146c:	3b30      	subs	r3, #48	; 0x30
 801146e:	2b09      	cmp	r3, #9
 8011470:	d94e      	bls.n	8011510 <_vfiprintf_r+0x1c4>
 8011472:	b1b0      	cbz	r0, 80114a2 <_vfiprintf_r+0x156>
 8011474:	9207      	str	r2, [sp, #28]
 8011476:	e014      	b.n	80114a2 <_vfiprintf_r+0x156>
 8011478:	eba0 0308 	sub.w	r3, r0, r8
 801147c:	fa09 f303 	lsl.w	r3, r9, r3
 8011480:	4313      	orrs	r3, r2
 8011482:	9304      	str	r3, [sp, #16]
 8011484:	46a2      	mov	sl, r4
 8011486:	e7d2      	b.n	801142e <_vfiprintf_r+0xe2>
 8011488:	9b03      	ldr	r3, [sp, #12]
 801148a:	1d19      	adds	r1, r3, #4
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	9103      	str	r1, [sp, #12]
 8011490:	2b00      	cmp	r3, #0
 8011492:	bfbb      	ittet	lt
 8011494:	425b      	neglt	r3, r3
 8011496:	f042 0202 	orrlt.w	r2, r2, #2
 801149a:	9307      	strge	r3, [sp, #28]
 801149c:	9307      	strlt	r3, [sp, #28]
 801149e:	bfb8      	it	lt
 80114a0:	9204      	strlt	r2, [sp, #16]
 80114a2:	7823      	ldrb	r3, [r4, #0]
 80114a4:	2b2e      	cmp	r3, #46	; 0x2e
 80114a6:	d10c      	bne.n	80114c2 <_vfiprintf_r+0x176>
 80114a8:	7863      	ldrb	r3, [r4, #1]
 80114aa:	2b2a      	cmp	r3, #42	; 0x2a
 80114ac:	d135      	bne.n	801151a <_vfiprintf_r+0x1ce>
 80114ae:	9b03      	ldr	r3, [sp, #12]
 80114b0:	1d1a      	adds	r2, r3, #4
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	9203      	str	r2, [sp, #12]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	bfb8      	it	lt
 80114ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80114be:	3402      	adds	r4, #2
 80114c0:	9305      	str	r3, [sp, #20]
 80114c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80115a8 <_vfiprintf_r+0x25c>
 80114c6:	7821      	ldrb	r1, [r4, #0]
 80114c8:	2203      	movs	r2, #3
 80114ca:	4650      	mov	r0, sl
 80114cc:	f7ee fe90 	bl	80001f0 <memchr>
 80114d0:	b140      	cbz	r0, 80114e4 <_vfiprintf_r+0x198>
 80114d2:	2340      	movs	r3, #64	; 0x40
 80114d4:	eba0 000a 	sub.w	r0, r0, sl
 80114d8:	fa03 f000 	lsl.w	r0, r3, r0
 80114dc:	9b04      	ldr	r3, [sp, #16]
 80114de:	4303      	orrs	r3, r0
 80114e0:	3401      	adds	r4, #1
 80114e2:	9304      	str	r3, [sp, #16]
 80114e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114e8:	482c      	ldr	r0, [pc, #176]	; (801159c <_vfiprintf_r+0x250>)
 80114ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114ee:	2206      	movs	r2, #6
 80114f0:	f7ee fe7e 	bl	80001f0 <memchr>
 80114f4:	2800      	cmp	r0, #0
 80114f6:	d03f      	beq.n	8011578 <_vfiprintf_r+0x22c>
 80114f8:	4b29      	ldr	r3, [pc, #164]	; (80115a0 <_vfiprintf_r+0x254>)
 80114fa:	bb1b      	cbnz	r3, 8011544 <_vfiprintf_r+0x1f8>
 80114fc:	9b03      	ldr	r3, [sp, #12]
 80114fe:	3307      	adds	r3, #7
 8011500:	f023 0307 	bic.w	r3, r3, #7
 8011504:	3308      	adds	r3, #8
 8011506:	9303      	str	r3, [sp, #12]
 8011508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801150a:	443b      	add	r3, r7
 801150c:	9309      	str	r3, [sp, #36]	; 0x24
 801150e:	e767      	b.n	80113e0 <_vfiprintf_r+0x94>
 8011510:	fb0c 3202 	mla	r2, ip, r2, r3
 8011514:	460c      	mov	r4, r1
 8011516:	2001      	movs	r0, #1
 8011518:	e7a5      	b.n	8011466 <_vfiprintf_r+0x11a>
 801151a:	2300      	movs	r3, #0
 801151c:	3401      	adds	r4, #1
 801151e:	9305      	str	r3, [sp, #20]
 8011520:	4619      	mov	r1, r3
 8011522:	f04f 0c0a 	mov.w	ip, #10
 8011526:	4620      	mov	r0, r4
 8011528:	f810 2b01 	ldrb.w	r2, [r0], #1
 801152c:	3a30      	subs	r2, #48	; 0x30
 801152e:	2a09      	cmp	r2, #9
 8011530:	d903      	bls.n	801153a <_vfiprintf_r+0x1ee>
 8011532:	2b00      	cmp	r3, #0
 8011534:	d0c5      	beq.n	80114c2 <_vfiprintf_r+0x176>
 8011536:	9105      	str	r1, [sp, #20]
 8011538:	e7c3      	b.n	80114c2 <_vfiprintf_r+0x176>
 801153a:	fb0c 2101 	mla	r1, ip, r1, r2
 801153e:	4604      	mov	r4, r0
 8011540:	2301      	movs	r3, #1
 8011542:	e7f0      	b.n	8011526 <_vfiprintf_r+0x1da>
 8011544:	ab03      	add	r3, sp, #12
 8011546:	9300      	str	r3, [sp, #0]
 8011548:	462a      	mov	r2, r5
 801154a:	4b16      	ldr	r3, [pc, #88]	; (80115a4 <_vfiprintf_r+0x258>)
 801154c:	a904      	add	r1, sp, #16
 801154e:	4630      	mov	r0, r6
 8011550:	f7fe f80c 	bl	800f56c <_printf_float>
 8011554:	4607      	mov	r7, r0
 8011556:	1c78      	adds	r0, r7, #1
 8011558:	d1d6      	bne.n	8011508 <_vfiprintf_r+0x1bc>
 801155a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801155c:	07d9      	lsls	r1, r3, #31
 801155e:	d405      	bmi.n	801156c <_vfiprintf_r+0x220>
 8011560:	89ab      	ldrh	r3, [r5, #12]
 8011562:	059a      	lsls	r2, r3, #22
 8011564:	d402      	bmi.n	801156c <_vfiprintf_r+0x220>
 8011566:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011568:	f7ff feac 	bl	80112c4 <__retarget_lock_release_recursive>
 801156c:	89ab      	ldrh	r3, [r5, #12]
 801156e:	065b      	lsls	r3, r3, #25
 8011570:	f53f af12 	bmi.w	8011398 <_vfiprintf_r+0x4c>
 8011574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011576:	e711      	b.n	801139c <_vfiprintf_r+0x50>
 8011578:	ab03      	add	r3, sp, #12
 801157a:	9300      	str	r3, [sp, #0]
 801157c:	462a      	mov	r2, r5
 801157e:	4b09      	ldr	r3, [pc, #36]	; (80115a4 <_vfiprintf_r+0x258>)
 8011580:	a904      	add	r1, sp, #16
 8011582:	4630      	mov	r0, r6
 8011584:	f7fe fa96 	bl	800fab4 <_printf_i>
 8011588:	e7e4      	b.n	8011554 <_vfiprintf_r+0x208>
 801158a:	bf00      	nop
 801158c:	080123ac 	.word	0x080123ac
 8011590:	080123cc 	.word	0x080123cc
 8011594:	0801238c 	.word	0x0801238c
 8011598:	0801227a 	.word	0x0801227a
 801159c:	08012284 	.word	0x08012284
 80115a0:	0800f56d 	.word	0x0800f56d
 80115a4:	08011329 	.word	0x08011329
 80115a8:	08012280 	.word	0x08012280

080115ac <__swbuf_r>:
 80115ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ae:	460e      	mov	r6, r1
 80115b0:	4614      	mov	r4, r2
 80115b2:	4605      	mov	r5, r0
 80115b4:	b118      	cbz	r0, 80115be <__swbuf_r+0x12>
 80115b6:	6983      	ldr	r3, [r0, #24]
 80115b8:	b90b      	cbnz	r3, 80115be <__swbuf_r+0x12>
 80115ba:	f000 f9df 	bl	801197c <__sinit>
 80115be:	4b21      	ldr	r3, [pc, #132]	; (8011644 <__swbuf_r+0x98>)
 80115c0:	429c      	cmp	r4, r3
 80115c2:	d12b      	bne.n	801161c <__swbuf_r+0x70>
 80115c4:	686c      	ldr	r4, [r5, #4]
 80115c6:	69a3      	ldr	r3, [r4, #24]
 80115c8:	60a3      	str	r3, [r4, #8]
 80115ca:	89a3      	ldrh	r3, [r4, #12]
 80115cc:	071a      	lsls	r2, r3, #28
 80115ce:	d52f      	bpl.n	8011630 <__swbuf_r+0x84>
 80115d0:	6923      	ldr	r3, [r4, #16]
 80115d2:	b36b      	cbz	r3, 8011630 <__swbuf_r+0x84>
 80115d4:	6923      	ldr	r3, [r4, #16]
 80115d6:	6820      	ldr	r0, [r4, #0]
 80115d8:	1ac0      	subs	r0, r0, r3
 80115da:	6963      	ldr	r3, [r4, #20]
 80115dc:	b2f6      	uxtb	r6, r6
 80115de:	4283      	cmp	r3, r0
 80115e0:	4637      	mov	r7, r6
 80115e2:	dc04      	bgt.n	80115ee <__swbuf_r+0x42>
 80115e4:	4621      	mov	r1, r4
 80115e6:	4628      	mov	r0, r5
 80115e8:	f000 f934 	bl	8011854 <_fflush_r>
 80115ec:	bb30      	cbnz	r0, 801163c <__swbuf_r+0x90>
 80115ee:	68a3      	ldr	r3, [r4, #8]
 80115f0:	3b01      	subs	r3, #1
 80115f2:	60a3      	str	r3, [r4, #8]
 80115f4:	6823      	ldr	r3, [r4, #0]
 80115f6:	1c5a      	adds	r2, r3, #1
 80115f8:	6022      	str	r2, [r4, #0]
 80115fa:	701e      	strb	r6, [r3, #0]
 80115fc:	6963      	ldr	r3, [r4, #20]
 80115fe:	3001      	adds	r0, #1
 8011600:	4283      	cmp	r3, r0
 8011602:	d004      	beq.n	801160e <__swbuf_r+0x62>
 8011604:	89a3      	ldrh	r3, [r4, #12]
 8011606:	07db      	lsls	r3, r3, #31
 8011608:	d506      	bpl.n	8011618 <__swbuf_r+0x6c>
 801160a:	2e0a      	cmp	r6, #10
 801160c:	d104      	bne.n	8011618 <__swbuf_r+0x6c>
 801160e:	4621      	mov	r1, r4
 8011610:	4628      	mov	r0, r5
 8011612:	f000 f91f 	bl	8011854 <_fflush_r>
 8011616:	b988      	cbnz	r0, 801163c <__swbuf_r+0x90>
 8011618:	4638      	mov	r0, r7
 801161a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801161c:	4b0a      	ldr	r3, [pc, #40]	; (8011648 <__swbuf_r+0x9c>)
 801161e:	429c      	cmp	r4, r3
 8011620:	d101      	bne.n	8011626 <__swbuf_r+0x7a>
 8011622:	68ac      	ldr	r4, [r5, #8]
 8011624:	e7cf      	b.n	80115c6 <__swbuf_r+0x1a>
 8011626:	4b09      	ldr	r3, [pc, #36]	; (801164c <__swbuf_r+0xa0>)
 8011628:	429c      	cmp	r4, r3
 801162a:	bf08      	it	eq
 801162c:	68ec      	ldreq	r4, [r5, #12]
 801162e:	e7ca      	b.n	80115c6 <__swbuf_r+0x1a>
 8011630:	4621      	mov	r1, r4
 8011632:	4628      	mov	r0, r5
 8011634:	f000 f81a 	bl	801166c <__swsetup_r>
 8011638:	2800      	cmp	r0, #0
 801163a:	d0cb      	beq.n	80115d4 <__swbuf_r+0x28>
 801163c:	f04f 37ff 	mov.w	r7, #4294967295
 8011640:	e7ea      	b.n	8011618 <__swbuf_r+0x6c>
 8011642:	bf00      	nop
 8011644:	080123ac 	.word	0x080123ac
 8011648:	080123cc 	.word	0x080123cc
 801164c:	0801238c 	.word	0x0801238c

08011650 <__ascii_wctomb>:
 8011650:	b149      	cbz	r1, 8011666 <__ascii_wctomb+0x16>
 8011652:	2aff      	cmp	r2, #255	; 0xff
 8011654:	bf85      	ittet	hi
 8011656:	238a      	movhi	r3, #138	; 0x8a
 8011658:	6003      	strhi	r3, [r0, #0]
 801165a:	700a      	strbls	r2, [r1, #0]
 801165c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011660:	bf98      	it	ls
 8011662:	2001      	movls	r0, #1
 8011664:	4770      	bx	lr
 8011666:	4608      	mov	r0, r1
 8011668:	4770      	bx	lr
	...

0801166c <__swsetup_r>:
 801166c:	4b32      	ldr	r3, [pc, #200]	; (8011738 <__swsetup_r+0xcc>)
 801166e:	b570      	push	{r4, r5, r6, lr}
 8011670:	681d      	ldr	r5, [r3, #0]
 8011672:	4606      	mov	r6, r0
 8011674:	460c      	mov	r4, r1
 8011676:	b125      	cbz	r5, 8011682 <__swsetup_r+0x16>
 8011678:	69ab      	ldr	r3, [r5, #24]
 801167a:	b913      	cbnz	r3, 8011682 <__swsetup_r+0x16>
 801167c:	4628      	mov	r0, r5
 801167e:	f000 f97d 	bl	801197c <__sinit>
 8011682:	4b2e      	ldr	r3, [pc, #184]	; (801173c <__swsetup_r+0xd0>)
 8011684:	429c      	cmp	r4, r3
 8011686:	d10f      	bne.n	80116a8 <__swsetup_r+0x3c>
 8011688:	686c      	ldr	r4, [r5, #4]
 801168a:	89a3      	ldrh	r3, [r4, #12]
 801168c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011690:	0719      	lsls	r1, r3, #28
 8011692:	d42c      	bmi.n	80116ee <__swsetup_r+0x82>
 8011694:	06dd      	lsls	r5, r3, #27
 8011696:	d411      	bmi.n	80116bc <__swsetup_r+0x50>
 8011698:	2309      	movs	r3, #9
 801169a:	6033      	str	r3, [r6, #0]
 801169c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80116a0:	81a3      	strh	r3, [r4, #12]
 80116a2:	f04f 30ff 	mov.w	r0, #4294967295
 80116a6:	e03e      	b.n	8011726 <__swsetup_r+0xba>
 80116a8:	4b25      	ldr	r3, [pc, #148]	; (8011740 <__swsetup_r+0xd4>)
 80116aa:	429c      	cmp	r4, r3
 80116ac:	d101      	bne.n	80116b2 <__swsetup_r+0x46>
 80116ae:	68ac      	ldr	r4, [r5, #8]
 80116b0:	e7eb      	b.n	801168a <__swsetup_r+0x1e>
 80116b2:	4b24      	ldr	r3, [pc, #144]	; (8011744 <__swsetup_r+0xd8>)
 80116b4:	429c      	cmp	r4, r3
 80116b6:	bf08      	it	eq
 80116b8:	68ec      	ldreq	r4, [r5, #12]
 80116ba:	e7e6      	b.n	801168a <__swsetup_r+0x1e>
 80116bc:	0758      	lsls	r0, r3, #29
 80116be:	d512      	bpl.n	80116e6 <__swsetup_r+0x7a>
 80116c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116c2:	b141      	cbz	r1, 80116d6 <__swsetup_r+0x6a>
 80116c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80116c8:	4299      	cmp	r1, r3
 80116ca:	d002      	beq.n	80116d2 <__swsetup_r+0x66>
 80116cc:	4630      	mov	r0, r6
 80116ce:	f7fd fdcd 	bl	800f26c <_free_r>
 80116d2:	2300      	movs	r3, #0
 80116d4:	6363      	str	r3, [r4, #52]	; 0x34
 80116d6:	89a3      	ldrh	r3, [r4, #12]
 80116d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80116dc:	81a3      	strh	r3, [r4, #12]
 80116de:	2300      	movs	r3, #0
 80116e0:	6063      	str	r3, [r4, #4]
 80116e2:	6923      	ldr	r3, [r4, #16]
 80116e4:	6023      	str	r3, [r4, #0]
 80116e6:	89a3      	ldrh	r3, [r4, #12]
 80116e8:	f043 0308 	orr.w	r3, r3, #8
 80116ec:	81a3      	strh	r3, [r4, #12]
 80116ee:	6923      	ldr	r3, [r4, #16]
 80116f0:	b94b      	cbnz	r3, 8011706 <__swsetup_r+0x9a>
 80116f2:	89a3      	ldrh	r3, [r4, #12]
 80116f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80116f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80116fc:	d003      	beq.n	8011706 <__swsetup_r+0x9a>
 80116fe:	4621      	mov	r1, r4
 8011700:	4630      	mov	r0, r6
 8011702:	f000 f9fd 	bl	8011b00 <__smakebuf_r>
 8011706:	89a0      	ldrh	r0, [r4, #12]
 8011708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801170c:	f010 0301 	ands.w	r3, r0, #1
 8011710:	d00a      	beq.n	8011728 <__swsetup_r+0xbc>
 8011712:	2300      	movs	r3, #0
 8011714:	60a3      	str	r3, [r4, #8]
 8011716:	6963      	ldr	r3, [r4, #20]
 8011718:	425b      	negs	r3, r3
 801171a:	61a3      	str	r3, [r4, #24]
 801171c:	6923      	ldr	r3, [r4, #16]
 801171e:	b943      	cbnz	r3, 8011732 <__swsetup_r+0xc6>
 8011720:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011724:	d1ba      	bne.n	801169c <__swsetup_r+0x30>
 8011726:	bd70      	pop	{r4, r5, r6, pc}
 8011728:	0781      	lsls	r1, r0, #30
 801172a:	bf58      	it	pl
 801172c:	6963      	ldrpl	r3, [r4, #20]
 801172e:	60a3      	str	r3, [r4, #8]
 8011730:	e7f4      	b.n	801171c <__swsetup_r+0xb0>
 8011732:	2000      	movs	r0, #0
 8011734:	e7f7      	b.n	8011726 <__swsetup_r+0xba>
 8011736:	bf00      	nop
 8011738:	20000048 	.word	0x20000048
 801173c:	080123ac 	.word	0x080123ac
 8011740:	080123cc 	.word	0x080123cc
 8011744:	0801238c 	.word	0x0801238c

08011748 <__sflush_r>:
 8011748:	898a      	ldrh	r2, [r1, #12]
 801174a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801174e:	4605      	mov	r5, r0
 8011750:	0710      	lsls	r0, r2, #28
 8011752:	460c      	mov	r4, r1
 8011754:	d458      	bmi.n	8011808 <__sflush_r+0xc0>
 8011756:	684b      	ldr	r3, [r1, #4]
 8011758:	2b00      	cmp	r3, #0
 801175a:	dc05      	bgt.n	8011768 <__sflush_r+0x20>
 801175c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801175e:	2b00      	cmp	r3, #0
 8011760:	dc02      	bgt.n	8011768 <__sflush_r+0x20>
 8011762:	2000      	movs	r0, #0
 8011764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801176a:	2e00      	cmp	r6, #0
 801176c:	d0f9      	beq.n	8011762 <__sflush_r+0x1a>
 801176e:	2300      	movs	r3, #0
 8011770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011774:	682f      	ldr	r7, [r5, #0]
 8011776:	602b      	str	r3, [r5, #0]
 8011778:	d032      	beq.n	80117e0 <__sflush_r+0x98>
 801177a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801177c:	89a3      	ldrh	r3, [r4, #12]
 801177e:	075a      	lsls	r2, r3, #29
 8011780:	d505      	bpl.n	801178e <__sflush_r+0x46>
 8011782:	6863      	ldr	r3, [r4, #4]
 8011784:	1ac0      	subs	r0, r0, r3
 8011786:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011788:	b10b      	cbz	r3, 801178e <__sflush_r+0x46>
 801178a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801178c:	1ac0      	subs	r0, r0, r3
 801178e:	2300      	movs	r3, #0
 8011790:	4602      	mov	r2, r0
 8011792:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011794:	6a21      	ldr	r1, [r4, #32]
 8011796:	4628      	mov	r0, r5
 8011798:	47b0      	blx	r6
 801179a:	1c43      	adds	r3, r0, #1
 801179c:	89a3      	ldrh	r3, [r4, #12]
 801179e:	d106      	bne.n	80117ae <__sflush_r+0x66>
 80117a0:	6829      	ldr	r1, [r5, #0]
 80117a2:	291d      	cmp	r1, #29
 80117a4:	d82c      	bhi.n	8011800 <__sflush_r+0xb8>
 80117a6:	4a2a      	ldr	r2, [pc, #168]	; (8011850 <__sflush_r+0x108>)
 80117a8:	40ca      	lsrs	r2, r1
 80117aa:	07d6      	lsls	r6, r2, #31
 80117ac:	d528      	bpl.n	8011800 <__sflush_r+0xb8>
 80117ae:	2200      	movs	r2, #0
 80117b0:	6062      	str	r2, [r4, #4]
 80117b2:	04d9      	lsls	r1, r3, #19
 80117b4:	6922      	ldr	r2, [r4, #16]
 80117b6:	6022      	str	r2, [r4, #0]
 80117b8:	d504      	bpl.n	80117c4 <__sflush_r+0x7c>
 80117ba:	1c42      	adds	r2, r0, #1
 80117bc:	d101      	bne.n	80117c2 <__sflush_r+0x7a>
 80117be:	682b      	ldr	r3, [r5, #0]
 80117c0:	b903      	cbnz	r3, 80117c4 <__sflush_r+0x7c>
 80117c2:	6560      	str	r0, [r4, #84]	; 0x54
 80117c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80117c6:	602f      	str	r7, [r5, #0]
 80117c8:	2900      	cmp	r1, #0
 80117ca:	d0ca      	beq.n	8011762 <__sflush_r+0x1a>
 80117cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80117d0:	4299      	cmp	r1, r3
 80117d2:	d002      	beq.n	80117da <__sflush_r+0x92>
 80117d4:	4628      	mov	r0, r5
 80117d6:	f7fd fd49 	bl	800f26c <_free_r>
 80117da:	2000      	movs	r0, #0
 80117dc:	6360      	str	r0, [r4, #52]	; 0x34
 80117de:	e7c1      	b.n	8011764 <__sflush_r+0x1c>
 80117e0:	6a21      	ldr	r1, [r4, #32]
 80117e2:	2301      	movs	r3, #1
 80117e4:	4628      	mov	r0, r5
 80117e6:	47b0      	blx	r6
 80117e8:	1c41      	adds	r1, r0, #1
 80117ea:	d1c7      	bne.n	801177c <__sflush_r+0x34>
 80117ec:	682b      	ldr	r3, [r5, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d0c4      	beq.n	801177c <__sflush_r+0x34>
 80117f2:	2b1d      	cmp	r3, #29
 80117f4:	d001      	beq.n	80117fa <__sflush_r+0xb2>
 80117f6:	2b16      	cmp	r3, #22
 80117f8:	d101      	bne.n	80117fe <__sflush_r+0xb6>
 80117fa:	602f      	str	r7, [r5, #0]
 80117fc:	e7b1      	b.n	8011762 <__sflush_r+0x1a>
 80117fe:	89a3      	ldrh	r3, [r4, #12]
 8011800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011804:	81a3      	strh	r3, [r4, #12]
 8011806:	e7ad      	b.n	8011764 <__sflush_r+0x1c>
 8011808:	690f      	ldr	r7, [r1, #16]
 801180a:	2f00      	cmp	r7, #0
 801180c:	d0a9      	beq.n	8011762 <__sflush_r+0x1a>
 801180e:	0793      	lsls	r3, r2, #30
 8011810:	680e      	ldr	r6, [r1, #0]
 8011812:	bf08      	it	eq
 8011814:	694b      	ldreq	r3, [r1, #20]
 8011816:	600f      	str	r7, [r1, #0]
 8011818:	bf18      	it	ne
 801181a:	2300      	movne	r3, #0
 801181c:	eba6 0807 	sub.w	r8, r6, r7
 8011820:	608b      	str	r3, [r1, #8]
 8011822:	f1b8 0f00 	cmp.w	r8, #0
 8011826:	dd9c      	ble.n	8011762 <__sflush_r+0x1a>
 8011828:	6a21      	ldr	r1, [r4, #32]
 801182a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801182c:	4643      	mov	r3, r8
 801182e:	463a      	mov	r2, r7
 8011830:	4628      	mov	r0, r5
 8011832:	47b0      	blx	r6
 8011834:	2800      	cmp	r0, #0
 8011836:	dc06      	bgt.n	8011846 <__sflush_r+0xfe>
 8011838:	89a3      	ldrh	r3, [r4, #12]
 801183a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801183e:	81a3      	strh	r3, [r4, #12]
 8011840:	f04f 30ff 	mov.w	r0, #4294967295
 8011844:	e78e      	b.n	8011764 <__sflush_r+0x1c>
 8011846:	4407      	add	r7, r0
 8011848:	eba8 0800 	sub.w	r8, r8, r0
 801184c:	e7e9      	b.n	8011822 <__sflush_r+0xda>
 801184e:	bf00      	nop
 8011850:	20400001 	.word	0x20400001

08011854 <_fflush_r>:
 8011854:	b538      	push	{r3, r4, r5, lr}
 8011856:	690b      	ldr	r3, [r1, #16]
 8011858:	4605      	mov	r5, r0
 801185a:	460c      	mov	r4, r1
 801185c:	b913      	cbnz	r3, 8011864 <_fflush_r+0x10>
 801185e:	2500      	movs	r5, #0
 8011860:	4628      	mov	r0, r5
 8011862:	bd38      	pop	{r3, r4, r5, pc}
 8011864:	b118      	cbz	r0, 801186e <_fflush_r+0x1a>
 8011866:	6983      	ldr	r3, [r0, #24]
 8011868:	b90b      	cbnz	r3, 801186e <_fflush_r+0x1a>
 801186a:	f000 f887 	bl	801197c <__sinit>
 801186e:	4b14      	ldr	r3, [pc, #80]	; (80118c0 <_fflush_r+0x6c>)
 8011870:	429c      	cmp	r4, r3
 8011872:	d11b      	bne.n	80118ac <_fflush_r+0x58>
 8011874:	686c      	ldr	r4, [r5, #4]
 8011876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d0ef      	beq.n	801185e <_fflush_r+0xa>
 801187e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011880:	07d0      	lsls	r0, r2, #31
 8011882:	d404      	bmi.n	801188e <_fflush_r+0x3a>
 8011884:	0599      	lsls	r1, r3, #22
 8011886:	d402      	bmi.n	801188e <_fflush_r+0x3a>
 8011888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801188a:	f7ff fd1a 	bl	80112c2 <__retarget_lock_acquire_recursive>
 801188e:	4628      	mov	r0, r5
 8011890:	4621      	mov	r1, r4
 8011892:	f7ff ff59 	bl	8011748 <__sflush_r>
 8011896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011898:	07da      	lsls	r2, r3, #31
 801189a:	4605      	mov	r5, r0
 801189c:	d4e0      	bmi.n	8011860 <_fflush_r+0xc>
 801189e:	89a3      	ldrh	r3, [r4, #12]
 80118a0:	059b      	lsls	r3, r3, #22
 80118a2:	d4dd      	bmi.n	8011860 <_fflush_r+0xc>
 80118a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118a6:	f7ff fd0d 	bl	80112c4 <__retarget_lock_release_recursive>
 80118aa:	e7d9      	b.n	8011860 <_fflush_r+0xc>
 80118ac:	4b05      	ldr	r3, [pc, #20]	; (80118c4 <_fflush_r+0x70>)
 80118ae:	429c      	cmp	r4, r3
 80118b0:	d101      	bne.n	80118b6 <_fflush_r+0x62>
 80118b2:	68ac      	ldr	r4, [r5, #8]
 80118b4:	e7df      	b.n	8011876 <_fflush_r+0x22>
 80118b6:	4b04      	ldr	r3, [pc, #16]	; (80118c8 <_fflush_r+0x74>)
 80118b8:	429c      	cmp	r4, r3
 80118ba:	bf08      	it	eq
 80118bc:	68ec      	ldreq	r4, [r5, #12]
 80118be:	e7da      	b.n	8011876 <_fflush_r+0x22>
 80118c0:	080123ac 	.word	0x080123ac
 80118c4:	080123cc 	.word	0x080123cc
 80118c8:	0801238c 	.word	0x0801238c

080118cc <std>:
 80118cc:	2300      	movs	r3, #0
 80118ce:	b510      	push	{r4, lr}
 80118d0:	4604      	mov	r4, r0
 80118d2:	e9c0 3300 	strd	r3, r3, [r0]
 80118d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80118da:	6083      	str	r3, [r0, #8]
 80118dc:	8181      	strh	r1, [r0, #12]
 80118de:	6643      	str	r3, [r0, #100]	; 0x64
 80118e0:	81c2      	strh	r2, [r0, #14]
 80118e2:	6183      	str	r3, [r0, #24]
 80118e4:	4619      	mov	r1, r3
 80118e6:	2208      	movs	r2, #8
 80118e8:	305c      	adds	r0, #92	; 0x5c
 80118ea:	f7fd fcb7 	bl	800f25c <memset>
 80118ee:	4b05      	ldr	r3, [pc, #20]	; (8011904 <std+0x38>)
 80118f0:	6263      	str	r3, [r4, #36]	; 0x24
 80118f2:	4b05      	ldr	r3, [pc, #20]	; (8011908 <std+0x3c>)
 80118f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80118f6:	4b05      	ldr	r3, [pc, #20]	; (801190c <std+0x40>)
 80118f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80118fa:	4b05      	ldr	r3, [pc, #20]	; (8011910 <std+0x44>)
 80118fc:	6224      	str	r4, [r4, #32]
 80118fe:	6323      	str	r3, [r4, #48]	; 0x30
 8011900:	bd10      	pop	{r4, pc}
 8011902:	bf00      	nop
 8011904:	08011b81 	.word	0x08011b81
 8011908:	08011ba3 	.word	0x08011ba3
 801190c:	08011bdb 	.word	0x08011bdb
 8011910:	08011bff 	.word	0x08011bff

08011914 <_cleanup_r>:
 8011914:	4901      	ldr	r1, [pc, #4]	; (801191c <_cleanup_r+0x8>)
 8011916:	f000 b8af 	b.w	8011a78 <_fwalk_reent>
 801191a:	bf00      	nop
 801191c:	08011855 	.word	0x08011855

08011920 <__sfmoreglue>:
 8011920:	b570      	push	{r4, r5, r6, lr}
 8011922:	2268      	movs	r2, #104	; 0x68
 8011924:	1e4d      	subs	r5, r1, #1
 8011926:	4355      	muls	r5, r2
 8011928:	460e      	mov	r6, r1
 801192a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801192e:	f7fd fd09 	bl	800f344 <_malloc_r>
 8011932:	4604      	mov	r4, r0
 8011934:	b140      	cbz	r0, 8011948 <__sfmoreglue+0x28>
 8011936:	2100      	movs	r1, #0
 8011938:	e9c0 1600 	strd	r1, r6, [r0]
 801193c:	300c      	adds	r0, #12
 801193e:	60a0      	str	r0, [r4, #8]
 8011940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011944:	f7fd fc8a 	bl	800f25c <memset>
 8011948:	4620      	mov	r0, r4
 801194a:	bd70      	pop	{r4, r5, r6, pc}

0801194c <__sfp_lock_acquire>:
 801194c:	4801      	ldr	r0, [pc, #4]	; (8011954 <__sfp_lock_acquire+0x8>)
 801194e:	f7ff bcb8 	b.w	80112c2 <__retarget_lock_acquire_recursive>
 8011952:	bf00      	nop
 8011954:	20001705 	.word	0x20001705

08011958 <__sfp_lock_release>:
 8011958:	4801      	ldr	r0, [pc, #4]	; (8011960 <__sfp_lock_release+0x8>)
 801195a:	f7ff bcb3 	b.w	80112c4 <__retarget_lock_release_recursive>
 801195e:	bf00      	nop
 8011960:	20001705 	.word	0x20001705

08011964 <__sinit_lock_acquire>:
 8011964:	4801      	ldr	r0, [pc, #4]	; (801196c <__sinit_lock_acquire+0x8>)
 8011966:	f7ff bcac 	b.w	80112c2 <__retarget_lock_acquire_recursive>
 801196a:	bf00      	nop
 801196c:	20001706 	.word	0x20001706

08011970 <__sinit_lock_release>:
 8011970:	4801      	ldr	r0, [pc, #4]	; (8011978 <__sinit_lock_release+0x8>)
 8011972:	f7ff bca7 	b.w	80112c4 <__retarget_lock_release_recursive>
 8011976:	bf00      	nop
 8011978:	20001706 	.word	0x20001706

0801197c <__sinit>:
 801197c:	b510      	push	{r4, lr}
 801197e:	4604      	mov	r4, r0
 8011980:	f7ff fff0 	bl	8011964 <__sinit_lock_acquire>
 8011984:	69a3      	ldr	r3, [r4, #24]
 8011986:	b11b      	cbz	r3, 8011990 <__sinit+0x14>
 8011988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801198c:	f7ff bff0 	b.w	8011970 <__sinit_lock_release>
 8011990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011994:	6523      	str	r3, [r4, #80]	; 0x50
 8011996:	4b13      	ldr	r3, [pc, #76]	; (80119e4 <__sinit+0x68>)
 8011998:	4a13      	ldr	r2, [pc, #76]	; (80119e8 <__sinit+0x6c>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	62a2      	str	r2, [r4, #40]	; 0x28
 801199e:	42a3      	cmp	r3, r4
 80119a0:	bf04      	itt	eq
 80119a2:	2301      	moveq	r3, #1
 80119a4:	61a3      	streq	r3, [r4, #24]
 80119a6:	4620      	mov	r0, r4
 80119a8:	f000 f820 	bl	80119ec <__sfp>
 80119ac:	6060      	str	r0, [r4, #4]
 80119ae:	4620      	mov	r0, r4
 80119b0:	f000 f81c 	bl	80119ec <__sfp>
 80119b4:	60a0      	str	r0, [r4, #8]
 80119b6:	4620      	mov	r0, r4
 80119b8:	f000 f818 	bl	80119ec <__sfp>
 80119bc:	2200      	movs	r2, #0
 80119be:	60e0      	str	r0, [r4, #12]
 80119c0:	2104      	movs	r1, #4
 80119c2:	6860      	ldr	r0, [r4, #4]
 80119c4:	f7ff ff82 	bl	80118cc <std>
 80119c8:	68a0      	ldr	r0, [r4, #8]
 80119ca:	2201      	movs	r2, #1
 80119cc:	2109      	movs	r1, #9
 80119ce:	f7ff ff7d 	bl	80118cc <std>
 80119d2:	68e0      	ldr	r0, [r4, #12]
 80119d4:	2202      	movs	r2, #2
 80119d6:	2112      	movs	r1, #18
 80119d8:	f7ff ff78 	bl	80118cc <std>
 80119dc:	2301      	movs	r3, #1
 80119de:	61a3      	str	r3, [r4, #24]
 80119e0:	e7d2      	b.n	8011988 <__sinit+0xc>
 80119e2:	bf00      	nop
 80119e4:	08012010 	.word	0x08012010
 80119e8:	08011915 	.word	0x08011915

080119ec <__sfp>:
 80119ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ee:	4607      	mov	r7, r0
 80119f0:	f7ff ffac 	bl	801194c <__sfp_lock_acquire>
 80119f4:	4b1e      	ldr	r3, [pc, #120]	; (8011a70 <__sfp+0x84>)
 80119f6:	681e      	ldr	r6, [r3, #0]
 80119f8:	69b3      	ldr	r3, [r6, #24]
 80119fa:	b913      	cbnz	r3, 8011a02 <__sfp+0x16>
 80119fc:	4630      	mov	r0, r6
 80119fe:	f7ff ffbd 	bl	801197c <__sinit>
 8011a02:	3648      	adds	r6, #72	; 0x48
 8011a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011a08:	3b01      	subs	r3, #1
 8011a0a:	d503      	bpl.n	8011a14 <__sfp+0x28>
 8011a0c:	6833      	ldr	r3, [r6, #0]
 8011a0e:	b30b      	cbz	r3, 8011a54 <__sfp+0x68>
 8011a10:	6836      	ldr	r6, [r6, #0]
 8011a12:	e7f7      	b.n	8011a04 <__sfp+0x18>
 8011a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011a18:	b9d5      	cbnz	r5, 8011a50 <__sfp+0x64>
 8011a1a:	4b16      	ldr	r3, [pc, #88]	; (8011a74 <__sfp+0x88>)
 8011a1c:	60e3      	str	r3, [r4, #12]
 8011a1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011a22:	6665      	str	r5, [r4, #100]	; 0x64
 8011a24:	f7ff fc4c 	bl	80112c0 <__retarget_lock_init_recursive>
 8011a28:	f7ff ff96 	bl	8011958 <__sfp_lock_release>
 8011a2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011a30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011a34:	6025      	str	r5, [r4, #0]
 8011a36:	61a5      	str	r5, [r4, #24]
 8011a38:	2208      	movs	r2, #8
 8011a3a:	4629      	mov	r1, r5
 8011a3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011a40:	f7fd fc0c 	bl	800f25c <memset>
 8011a44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011a48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a50:	3468      	adds	r4, #104	; 0x68
 8011a52:	e7d9      	b.n	8011a08 <__sfp+0x1c>
 8011a54:	2104      	movs	r1, #4
 8011a56:	4638      	mov	r0, r7
 8011a58:	f7ff ff62 	bl	8011920 <__sfmoreglue>
 8011a5c:	4604      	mov	r4, r0
 8011a5e:	6030      	str	r0, [r6, #0]
 8011a60:	2800      	cmp	r0, #0
 8011a62:	d1d5      	bne.n	8011a10 <__sfp+0x24>
 8011a64:	f7ff ff78 	bl	8011958 <__sfp_lock_release>
 8011a68:	230c      	movs	r3, #12
 8011a6a:	603b      	str	r3, [r7, #0]
 8011a6c:	e7ee      	b.n	8011a4c <__sfp+0x60>
 8011a6e:	bf00      	nop
 8011a70:	08012010 	.word	0x08012010
 8011a74:	ffff0001 	.word	0xffff0001

08011a78 <_fwalk_reent>:
 8011a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a7c:	4606      	mov	r6, r0
 8011a7e:	4688      	mov	r8, r1
 8011a80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011a84:	2700      	movs	r7, #0
 8011a86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a8a:	f1b9 0901 	subs.w	r9, r9, #1
 8011a8e:	d505      	bpl.n	8011a9c <_fwalk_reent+0x24>
 8011a90:	6824      	ldr	r4, [r4, #0]
 8011a92:	2c00      	cmp	r4, #0
 8011a94:	d1f7      	bne.n	8011a86 <_fwalk_reent+0xe>
 8011a96:	4638      	mov	r0, r7
 8011a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a9c:	89ab      	ldrh	r3, [r5, #12]
 8011a9e:	2b01      	cmp	r3, #1
 8011aa0:	d907      	bls.n	8011ab2 <_fwalk_reent+0x3a>
 8011aa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011aa6:	3301      	adds	r3, #1
 8011aa8:	d003      	beq.n	8011ab2 <_fwalk_reent+0x3a>
 8011aaa:	4629      	mov	r1, r5
 8011aac:	4630      	mov	r0, r6
 8011aae:	47c0      	blx	r8
 8011ab0:	4307      	orrs	r7, r0
 8011ab2:	3568      	adds	r5, #104	; 0x68
 8011ab4:	e7e9      	b.n	8011a8a <_fwalk_reent+0x12>

08011ab6 <__swhatbuf_r>:
 8011ab6:	b570      	push	{r4, r5, r6, lr}
 8011ab8:	460e      	mov	r6, r1
 8011aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011abe:	2900      	cmp	r1, #0
 8011ac0:	b096      	sub	sp, #88	; 0x58
 8011ac2:	4614      	mov	r4, r2
 8011ac4:	461d      	mov	r5, r3
 8011ac6:	da08      	bge.n	8011ada <__swhatbuf_r+0x24>
 8011ac8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011acc:	2200      	movs	r2, #0
 8011ace:	602a      	str	r2, [r5, #0]
 8011ad0:	061a      	lsls	r2, r3, #24
 8011ad2:	d410      	bmi.n	8011af6 <__swhatbuf_r+0x40>
 8011ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ad8:	e00e      	b.n	8011af8 <__swhatbuf_r+0x42>
 8011ada:	466a      	mov	r2, sp
 8011adc:	f000 f8b6 	bl	8011c4c <_fstat_r>
 8011ae0:	2800      	cmp	r0, #0
 8011ae2:	dbf1      	blt.n	8011ac8 <__swhatbuf_r+0x12>
 8011ae4:	9a01      	ldr	r2, [sp, #4]
 8011ae6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011aea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011aee:	425a      	negs	r2, r3
 8011af0:	415a      	adcs	r2, r3
 8011af2:	602a      	str	r2, [r5, #0]
 8011af4:	e7ee      	b.n	8011ad4 <__swhatbuf_r+0x1e>
 8011af6:	2340      	movs	r3, #64	; 0x40
 8011af8:	2000      	movs	r0, #0
 8011afa:	6023      	str	r3, [r4, #0]
 8011afc:	b016      	add	sp, #88	; 0x58
 8011afe:	bd70      	pop	{r4, r5, r6, pc}

08011b00 <__smakebuf_r>:
 8011b00:	898b      	ldrh	r3, [r1, #12]
 8011b02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b04:	079d      	lsls	r5, r3, #30
 8011b06:	4606      	mov	r6, r0
 8011b08:	460c      	mov	r4, r1
 8011b0a:	d507      	bpl.n	8011b1c <__smakebuf_r+0x1c>
 8011b0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b10:	6023      	str	r3, [r4, #0]
 8011b12:	6123      	str	r3, [r4, #16]
 8011b14:	2301      	movs	r3, #1
 8011b16:	6163      	str	r3, [r4, #20]
 8011b18:	b002      	add	sp, #8
 8011b1a:	bd70      	pop	{r4, r5, r6, pc}
 8011b1c:	ab01      	add	r3, sp, #4
 8011b1e:	466a      	mov	r2, sp
 8011b20:	f7ff ffc9 	bl	8011ab6 <__swhatbuf_r>
 8011b24:	9900      	ldr	r1, [sp, #0]
 8011b26:	4605      	mov	r5, r0
 8011b28:	4630      	mov	r0, r6
 8011b2a:	f7fd fc0b 	bl	800f344 <_malloc_r>
 8011b2e:	b948      	cbnz	r0, 8011b44 <__smakebuf_r+0x44>
 8011b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b34:	059a      	lsls	r2, r3, #22
 8011b36:	d4ef      	bmi.n	8011b18 <__smakebuf_r+0x18>
 8011b38:	f023 0303 	bic.w	r3, r3, #3
 8011b3c:	f043 0302 	orr.w	r3, r3, #2
 8011b40:	81a3      	strh	r3, [r4, #12]
 8011b42:	e7e3      	b.n	8011b0c <__smakebuf_r+0xc>
 8011b44:	4b0d      	ldr	r3, [pc, #52]	; (8011b7c <__smakebuf_r+0x7c>)
 8011b46:	62b3      	str	r3, [r6, #40]	; 0x28
 8011b48:	89a3      	ldrh	r3, [r4, #12]
 8011b4a:	6020      	str	r0, [r4, #0]
 8011b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b50:	81a3      	strh	r3, [r4, #12]
 8011b52:	9b00      	ldr	r3, [sp, #0]
 8011b54:	6163      	str	r3, [r4, #20]
 8011b56:	9b01      	ldr	r3, [sp, #4]
 8011b58:	6120      	str	r0, [r4, #16]
 8011b5a:	b15b      	cbz	r3, 8011b74 <__smakebuf_r+0x74>
 8011b5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b60:	4630      	mov	r0, r6
 8011b62:	f000 f885 	bl	8011c70 <_isatty_r>
 8011b66:	b128      	cbz	r0, 8011b74 <__smakebuf_r+0x74>
 8011b68:	89a3      	ldrh	r3, [r4, #12]
 8011b6a:	f023 0303 	bic.w	r3, r3, #3
 8011b6e:	f043 0301 	orr.w	r3, r3, #1
 8011b72:	81a3      	strh	r3, [r4, #12]
 8011b74:	89a0      	ldrh	r0, [r4, #12]
 8011b76:	4305      	orrs	r5, r0
 8011b78:	81a5      	strh	r5, [r4, #12]
 8011b7a:	e7cd      	b.n	8011b18 <__smakebuf_r+0x18>
 8011b7c:	08011915 	.word	0x08011915

08011b80 <__sread>:
 8011b80:	b510      	push	{r4, lr}
 8011b82:	460c      	mov	r4, r1
 8011b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b88:	f000 f894 	bl	8011cb4 <_read_r>
 8011b8c:	2800      	cmp	r0, #0
 8011b8e:	bfab      	itete	ge
 8011b90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011b92:	89a3      	ldrhlt	r3, [r4, #12]
 8011b94:	181b      	addge	r3, r3, r0
 8011b96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011b9a:	bfac      	ite	ge
 8011b9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8011b9e:	81a3      	strhlt	r3, [r4, #12]
 8011ba0:	bd10      	pop	{r4, pc}

08011ba2 <__swrite>:
 8011ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba6:	461f      	mov	r7, r3
 8011ba8:	898b      	ldrh	r3, [r1, #12]
 8011baa:	05db      	lsls	r3, r3, #23
 8011bac:	4605      	mov	r5, r0
 8011bae:	460c      	mov	r4, r1
 8011bb0:	4616      	mov	r6, r2
 8011bb2:	d505      	bpl.n	8011bc0 <__swrite+0x1e>
 8011bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bb8:	2302      	movs	r3, #2
 8011bba:	2200      	movs	r2, #0
 8011bbc:	f000 f868 	bl	8011c90 <_lseek_r>
 8011bc0:	89a3      	ldrh	r3, [r4, #12]
 8011bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011bca:	81a3      	strh	r3, [r4, #12]
 8011bcc:	4632      	mov	r2, r6
 8011bce:	463b      	mov	r3, r7
 8011bd0:	4628      	mov	r0, r5
 8011bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd6:	f000 b817 	b.w	8011c08 <_write_r>

08011bda <__sseek>:
 8011bda:	b510      	push	{r4, lr}
 8011bdc:	460c      	mov	r4, r1
 8011bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011be2:	f000 f855 	bl	8011c90 <_lseek_r>
 8011be6:	1c43      	adds	r3, r0, #1
 8011be8:	89a3      	ldrh	r3, [r4, #12]
 8011bea:	bf15      	itete	ne
 8011bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8011bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011bf6:	81a3      	strheq	r3, [r4, #12]
 8011bf8:	bf18      	it	ne
 8011bfa:	81a3      	strhne	r3, [r4, #12]
 8011bfc:	bd10      	pop	{r4, pc}

08011bfe <__sclose>:
 8011bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c02:	f000 b813 	b.w	8011c2c <_close_r>
	...

08011c08 <_write_r>:
 8011c08:	b538      	push	{r3, r4, r5, lr}
 8011c0a:	4d07      	ldr	r5, [pc, #28]	; (8011c28 <_write_r+0x20>)
 8011c0c:	4604      	mov	r4, r0
 8011c0e:	4608      	mov	r0, r1
 8011c10:	4611      	mov	r1, r2
 8011c12:	2200      	movs	r2, #0
 8011c14:	602a      	str	r2, [r5, #0]
 8011c16:	461a      	mov	r2, r3
 8011c18:	f7f3 fd3b 	bl	8005692 <_write>
 8011c1c:	1c43      	adds	r3, r0, #1
 8011c1e:	d102      	bne.n	8011c26 <_write_r+0x1e>
 8011c20:	682b      	ldr	r3, [r5, #0]
 8011c22:	b103      	cbz	r3, 8011c26 <_write_r+0x1e>
 8011c24:	6023      	str	r3, [r4, #0]
 8011c26:	bd38      	pop	{r3, r4, r5, pc}
 8011c28:	20001700 	.word	0x20001700

08011c2c <_close_r>:
 8011c2c:	b538      	push	{r3, r4, r5, lr}
 8011c2e:	4d06      	ldr	r5, [pc, #24]	; (8011c48 <_close_r+0x1c>)
 8011c30:	2300      	movs	r3, #0
 8011c32:	4604      	mov	r4, r0
 8011c34:	4608      	mov	r0, r1
 8011c36:	602b      	str	r3, [r5, #0]
 8011c38:	f7f3 fd47 	bl	80056ca <_close>
 8011c3c:	1c43      	adds	r3, r0, #1
 8011c3e:	d102      	bne.n	8011c46 <_close_r+0x1a>
 8011c40:	682b      	ldr	r3, [r5, #0]
 8011c42:	b103      	cbz	r3, 8011c46 <_close_r+0x1a>
 8011c44:	6023      	str	r3, [r4, #0]
 8011c46:	bd38      	pop	{r3, r4, r5, pc}
 8011c48:	20001700 	.word	0x20001700

08011c4c <_fstat_r>:
 8011c4c:	b538      	push	{r3, r4, r5, lr}
 8011c4e:	4d07      	ldr	r5, [pc, #28]	; (8011c6c <_fstat_r+0x20>)
 8011c50:	2300      	movs	r3, #0
 8011c52:	4604      	mov	r4, r0
 8011c54:	4608      	mov	r0, r1
 8011c56:	4611      	mov	r1, r2
 8011c58:	602b      	str	r3, [r5, #0]
 8011c5a:	f7f3 fd42 	bl	80056e2 <_fstat>
 8011c5e:	1c43      	adds	r3, r0, #1
 8011c60:	d102      	bne.n	8011c68 <_fstat_r+0x1c>
 8011c62:	682b      	ldr	r3, [r5, #0]
 8011c64:	b103      	cbz	r3, 8011c68 <_fstat_r+0x1c>
 8011c66:	6023      	str	r3, [r4, #0]
 8011c68:	bd38      	pop	{r3, r4, r5, pc}
 8011c6a:	bf00      	nop
 8011c6c:	20001700 	.word	0x20001700

08011c70 <_isatty_r>:
 8011c70:	b538      	push	{r3, r4, r5, lr}
 8011c72:	4d06      	ldr	r5, [pc, #24]	; (8011c8c <_isatty_r+0x1c>)
 8011c74:	2300      	movs	r3, #0
 8011c76:	4604      	mov	r4, r0
 8011c78:	4608      	mov	r0, r1
 8011c7a:	602b      	str	r3, [r5, #0]
 8011c7c:	f7f3 fd41 	bl	8005702 <_isatty>
 8011c80:	1c43      	adds	r3, r0, #1
 8011c82:	d102      	bne.n	8011c8a <_isatty_r+0x1a>
 8011c84:	682b      	ldr	r3, [r5, #0]
 8011c86:	b103      	cbz	r3, 8011c8a <_isatty_r+0x1a>
 8011c88:	6023      	str	r3, [r4, #0]
 8011c8a:	bd38      	pop	{r3, r4, r5, pc}
 8011c8c:	20001700 	.word	0x20001700

08011c90 <_lseek_r>:
 8011c90:	b538      	push	{r3, r4, r5, lr}
 8011c92:	4d07      	ldr	r5, [pc, #28]	; (8011cb0 <_lseek_r+0x20>)
 8011c94:	4604      	mov	r4, r0
 8011c96:	4608      	mov	r0, r1
 8011c98:	4611      	mov	r1, r2
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	602a      	str	r2, [r5, #0]
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	f7f3 fd3a 	bl	8005718 <_lseek>
 8011ca4:	1c43      	adds	r3, r0, #1
 8011ca6:	d102      	bne.n	8011cae <_lseek_r+0x1e>
 8011ca8:	682b      	ldr	r3, [r5, #0]
 8011caa:	b103      	cbz	r3, 8011cae <_lseek_r+0x1e>
 8011cac:	6023      	str	r3, [r4, #0]
 8011cae:	bd38      	pop	{r3, r4, r5, pc}
 8011cb0:	20001700 	.word	0x20001700

08011cb4 <_read_r>:
 8011cb4:	b538      	push	{r3, r4, r5, lr}
 8011cb6:	4d07      	ldr	r5, [pc, #28]	; (8011cd4 <_read_r+0x20>)
 8011cb8:	4604      	mov	r4, r0
 8011cba:	4608      	mov	r0, r1
 8011cbc:	4611      	mov	r1, r2
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	602a      	str	r2, [r5, #0]
 8011cc2:	461a      	mov	r2, r3
 8011cc4:	f7f3 fcc8 	bl	8005658 <_read>
 8011cc8:	1c43      	adds	r3, r0, #1
 8011cca:	d102      	bne.n	8011cd2 <_read_r+0x1e>
 8011ccc:	682b      	ldr	r3, [r5, #0]
 8011cce:	b103      	cbz	r3, 8011cd2 <_read_r+0x1e>
 8011cd0:	6023      	str	r3, [r4, #0]
 8011cd2:	bd38      	pop	{r3, r4, r5, pc}
 8011cd4:	20001700 	.word	0x20001700

08011cd8 <_init>:
 8011cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cda:	bf00      	nop
 8011cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cde:	bc08      	pop	{r3}
 8011ce0:	469e      	mov	lr, r3
 8011ce2:	4770      	bx	lr

08011ce4 <_fini>:
 8011ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ce6:	bf00      	nop
 8011ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cea:	bc08      	pop	{r3}
 8011cec:	469e      	mov	lr, r3
 8011cee:	4770      	bx	lr
